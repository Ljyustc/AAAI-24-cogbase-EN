{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_squares = (n * (n + 1) * (2 * n + 1)) / 6 - ((first_term - 1) * first_term * (2 * first_term - 1)) / 6\n    return sum_squares\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    initial_amount = remaining_after_bag / 0.8\n    return initial_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    n = 0\n    while True:\n        if ((n + 1) * (n + 1) - n * n) == 26:\n            break\n        n += 1\n    num_students = n * n + 5\n    return num_students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    \n    remaining_students = total_students - physics_students - biology_students\n    return int(remaining_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    desired_difference = 4\n\n    # sets up the equation where after giving away some apples, Amy will have\n    # 4 more apples than John\n    # amy_apples - apples_given = john_apples + apples_given + desired_difference\n    # we solve for apples_given\n    apples_given = (amy_apples - john_apples - desired_difference) / 2\n\n    return int(apples_given)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    num_ways = permutations(9, 4)\n\n    return num_ways\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # If you want to win, you must ensure that you give the opponent\n    # a number of oranges that is a multiple of 4. This way, no matter\n    # what they pick: 1, 2, or 3, you can always pick a number that\n    # adds up to 4, and maintain that multiple of 4 strategy.\n    \n    # If Fred picks 3 oranges, the remaining 12 can always be forced\n    # into a multiple of 4 and Fred will win. If Fred picks 1 or 2 oranges,\n    # George can pick 3 or 2 oranges respectively, and give Fred a multiple of 4 (11 or 12),\n    # which will then cause Fred to lose.\n    # So the best strategy for Fred to ensure a win is to pick 3 oranges first.\n    \n    return 3\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # Combinations with dress with shoes\n    dress_shoes_combinations = dresses * shoes\n\n    # Combinations with dress with heels\n    dress_heels_combinations = dresses * heels\n\n    # Sum all possible combinations\n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom_age = symbols('tom_age')\n    dad_age = 43\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let the cost of the first house be x at which 10% profit is made.\n    # Therefore, selling price of the first house = x + 0.10 * x = 1.10 * x\n    # Since the selling price is given as 99000, we have 1.10 * x = 99000\n    # Hence, the cost of the first house x = 99000 / 1.10\n    \n    # Let the cost of the second house be y at which 10% loss is made.\n    # Therefore, selling price of the second house = y - 0.10 * y = 0.90 * y\n    # Since the selling price is given as 99000, we have 0.90 * y = 99000\n    # Hence, the cost of the second house y = 99000 / 0.90\n    \n    # Now, we calculate the cost price of both houses\n    cost_first_house = 99000 / 1.10\n    cost_second_house = 99000 / 0.90\n    \n    # The overall cost is the sum of the costs of both houses\n    overall_cost = cost_first_house + cost_second_house\n    \n    # The overall selling price is twice the selling price of one house\n    overall_selling_price = 2 * 99000\n\n    # Profit or loss is calculated as the difference between the selling price and the cost\n    profit_or_loss = overall_selling_price - overall_cost\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    return fraction_value > decimal_value\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara jogs from 6:30 AM to 8:30 AM which is 2 hours\n    jog_time = 2 # in hours\n    jog_speed = 8 # km per hour\n\n    # Calculate distance travelled while jogging\n    jog_distance = jog_speed * jog_time\n\n    # Sara walks from 8:30 AM to 9:30 AM which is 1 hour\n    walk_time = 1 # in hours\n    walk_speed = jog_speed / 2 # half the jogging speed\n\n    # Calculate distance travelled while walking\n    walk_distance = walk_speed * walk_time\n    \n    # Total distance travelled is the sum of jogging and walking distances\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let the number of each type of note be x\n    # Therefore, the total value is 5x + 10x + 20x = 280\n    # Simplify to 35x = 280\n    # Solve the equation for x\n    x = 280 // 35\n    # The total number of notes will be 3x because there are 3 types of notes\n    total_notes = 3 * x\n    return total_notes\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Last digit of powers of 2 cycle every 4: 2, 4, 8, 6\n    pow2_last_digit = [2, 4, 8, 6]\n    last_digit_2 = pow2_last_digit[100 % 4 - 1]\n\n    # Last digit of powers of 7 cycle every 4: 7, 9, 3, 1\n    pow7_last_digit = [7, 9, 3, 1]\n    last_digit_7 = pow7_last_digit[100 % 4 - 1]\n\n    # Last digit of powers of 9 cycle every 2: 9, 1\n    pow9_last_digit = [9, 1]\n    last_digit_9 = pow9_last_digit[100 % 2 - 1]\n\n    # Calculate the last digit of the whole expression\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10 \n\n    return last_digit\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    from itertools import permutations\n    \n    # A is in the middle of B and C so we will first count permutations of B, A, C (BAC)\n    # Then we will count the permutations for the remaining two students D and E in the left and right spots\n    bac_permutations = permutations(['B', 'A', 'C'])\n    de_permutations = permutations(['D', 'E'])\n\n    # Initialize count to zero\n    count = 0\n    \n    # Loop through all permutations of BAC and DE to count valid arrangements\n    for bac in bac_permutations:\n        for de in de_permutations:\n            count += 1  # For each combination, increment count\n\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    return square(diamond(7, 6), 9)\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    for largest in range(1, 17):\n        for second in range(1, largest):\n            for third in range(1, second):\n                for fourth in range(1, third):\n                    if largest + second + third + fourth == 16:\n                        return largest\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 1  # Start checking from the first prime number\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    A = sum([Fraction(1, i) for i in range(1, 6)])\n    A = A * 60  # Convert the sum to the form A/60\n    return A.numerator  # Return the numerator of the fraction which is A\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    # For three-digit palindromic numbers, the pattern is 'aba'.\n    # 'a' can be any digit from 1-9 (the first digit cannot be 0), \n    # 'b' can be any digit from 0-9.\n    # The number of choices for 'a' is 9.\n    # The number of choices for 'b' is 10.\n\n    num_choices_for_a = 9\n    num_choices_for_b = 10\n\n    # The total number of palindromic numbers is the product of the choices for 'a' and 'b'.\n    total_palindromic_numbers = num_choices_for_a * num_choices_for_b\n\n    return total_palindromic_numbers\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    minibusses = -(-students // capacity)  # Ceiling division\n\n    return minibusses\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Total number of floors Danny needs to move is 3 (from 1st to 4th floor)\n    total_floors = 4 - 1\n    # Time taken to move these 3 floors\n    total_time = 12\n    # Time taken to move one floor (from 1st to 2nd floor) would be total time divided by total floors\n    time_per_floor = total_time / total_floors\n    return time_per_floor\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += ((i ** 2) + ((i + 1) ** 2)) / (i * (i + 1))\n    return round(total)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    correct_average = 163\n    incorrect_average = 159\n    incorrect_height = 126\n    correct_height = 162\n\n    # Difference between the real total height and the incorrect total height\n    height_diff = correct_height - incorrect_height\n\n    # Difference between the correct average and the incorrect average\n    average_diff = correct_average - incorrect_average\n\n    # Number of girls\n    num_girls = height_diff / average_diff\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = 24 / 100 * 25\n    return result\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    return 8 * 9\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The provided formula is for 1^2 + 2^2 + 3^2 + ... + n^2\n    # Since we only want the squares of odd numbers, we need to adjust the formula.\n    # The odd numbers from 1 to 19 are the first 10 odd numbers, which are the squares of the first 10 natural numbers.\n    \n    # Calculate the sum of squares of the first 10 natural numbers using the given formula\n    n = 10\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)\n    \n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Calculate the sum of the sequence 1+3+5+...+13\n    n_terms = (13 - 1) // 2 + 1  # Number of terms in the arithmetic sequence\n    sum_sequence = n_terms * (1 + 13) // 2  # Sum of arithmetic sequence from 1 to 13 with common difference 2\n\n    # Use the formula 1³+2³+3³+......+n³=(1+2+3+......+n)² to calculate the sum of cubes\n    ans = sum_sequence ** 2\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_operation(a, b):\n        return a * b - 2 * a + 4\n    \n    ans = 200\n    for b in range(199, 0, -1):\n        ans = hash_operation(ans, b)\n    \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken, beth = symbols('ken beth')\n    equation = Eq(4/5 * beth, 2/5 * ken)\n    ken_beth_difference = Eq(ken, beth + 75)\n\n    solutions = solve((equation, ken_beth_difference), (ken, beth))\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    ribbon_lengths = [56, 42, 84]\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n    \n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube_number = cube_root**3\n        square_number = cube_number - 2\n        if int(square_number**0.5)**2 == square_number:\n            return square_number\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # After giving each kid 2 oranges, we have 13 - 2*3 oranges left to distribute.\n    remaining_oranges = 13 - 2 * 3\n    \n    # Since we have 3 kids, we have to add 2 'dividers' in the arrangement to split the remaining oranges.\n    # This is a stars-and-bars problem where we calculate combinations with repetition.\n    total_ways = comb(remaining_oranges + 3 - 1, 3 - 1)\n    \n    return total_ways\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    for i in range(1163):\n        a = i / 100\n        b = 11.63 - a\n        if a + b / 10 == 5.87:\n            return int((b - a) * 100)\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7 / 8) * 32\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tenners, twos = symbols('tenners twos')\n\n    # Given: David had a total of $40 notes\n    equation1 = Eq(tenners + twos, 40)\n\n    # After spending 40% of the $10 notes and 25% of the $2 notes\n    remaining_tenners = tenners - 0.4 * tenners\n    remaining_twos = twos - 0.25 * twos\n\n    # He had 4/5 as many $10 notes as $2 notes left\n    equation2 = Eq(remaining_tenners, remaining_twos * 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tenners, twos))\n\n    # Calculate the cost of the gift\n    cost_of_gift = tenners * 10 * 0.4 + twos * 2 * 0.25\n    cost_of_gift = cost_of_gift.subs(solutions)\n\n    return float(cost_of_gift)\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the ages of Bill, his son, and his father\n    bill, son, father = symbols('bill son father')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    sally_now, john_now = symbols('sally_now john_now')\n    \n    # Sally will be 6 times as old as John in 3 years\n    equation1 = Eq(sally_now + 3, 6 * (john_now + 3))\n    \n    # Their total age now is 50 years\n    equation2 = Eq(sally_now + john_now, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally_now, john_now))\n    \n    # Return Sally's age now\n    return solutions[sally_now]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # Can't be a leading zero in a 4-digit number\n            continue\n\n        if ((1000 * P + 100 * A + 10 * S + O)**0.5) % 1 == 0:\n            ans = 1000 * P + 100 * A + 10 * S + O\n            return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The given sequence multiplies terms of the form (1 + 1/2^k) for k being powers of 2, up to 2^2009.\n    # Observing the pattern, we realize each multiplication results in a telescoping series.\n    \n    # Each term (1 + 1/2^k) can be paired with a term in the sequence where k is the exponent in the previous term.\n    # When we multiply 1/(2^k) by 2, we get 1/(2^(k-1)) which is the next term to be subtracted in the telescoping series.\n    \n    # Since the last term is for k = 2^2009, that means the product stops with (1 - 1/2^(2^2009)),\n    # and since n must satisfy 2^n = 2^2009, we find that n = 2009.\n\n    # Thus, the value of n is 2009\n    return 2009\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 7 == 1 and i % 9 == 5:\n            return i\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    # Equation based on the total amount of water\n    equation1 = Eq(harry + liam, 640)\n    \n    # Equation after transferring the water\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n    \n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    difference = 3\n    num_days = 7\n    total_questions = sum(first_day + difference * day for day in range(num_days))\n    return total_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # rate of drinking by the man\n    man_rate = 1 / 15\n    # rate of drinking by both man and wife\n    combined_rate = 1 / 12\n\n    # rate of drinking by the wife\n    wife_rate = combined_rate - man_rate\n\n    # number of days the wife takes to finish the orange juice\n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # Iterate through possible counts of white balls remaining\n    for white_remain in range(3, 9):\n        # Calculate the count of white balls picked\n        white_picked = 9 - white_remain\n        # Iterate through possible counts of red balls remaining\n        for red_remain in range(2, 6):\n            # Calculate the count of red balls picked\n            red_picked = 5 - red_remain\n            # Calculate the count of black balls picked based on the previous two\n            black_picked = 10 - white_picked - red_picked\n            \n            # Only count valid combinations where 0 <= black balls picked <= 3\n            if 0 <= black_picked <= 3:\n                # Calculate ways to pick white, red, and black balls and multiply\n                ways = comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n                total_ways += ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The hundreds digit, cannot be zero\n        for j in range(0, 10):  # The tens digit\n            for k in range(0, 10):  # The units digit\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    ans = (2**10) % 3\n    return ans\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls on the strand\n    # According to the problem, we have the equation:\n    # x/2 (fell onto the floor) + x/4 (rolled under a chair) \n    # + x/6 (fell into her lap) + 3 (remained on the strand) = x (original number of pearls)\n    # Simplifying this equation: x/2 + x/4 + x/6 + 3 = x\n    # The common denominator for 2, 4, and 6 is 12, so we can rewrite the equation as:\n    # 6x/12 + 3x/12 + 2x/12 + 3 = x\n    # (6x + 3x + 2x)/12 = x - 3\n    # 11x/12 = x - 3\n    # Multipling both sides by 12 to get rid of the denominator:\n    # 11x = 12x - 36\n    # Moving all x terms to one side and constants to the other side:\n    # 12x - 11x = 36\n    # x = 36\n    # So there were originally 36 pearls on the strand.\n\n    return 36\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1           # Initial term index\n    term = 1        # First term in the sequence\n    \n    while True:\n        # Calculate the next term using formula for the nth term of the sequence\n        term = n * (n + 1) // 2\n        # Check if term is a two-digit number\n        if term > 99:\n            # Return the last two-digit term\n            return prev_term\n        prev_term = term\n        n += 1\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # Calculate the total sum of the first three numbers\n    sum_first_three = 120 * 3\n    # Calculate the total sum of all four numbers with the new mean\n    sum_four_numbers = 150 * 4\n    # The fourth number is the difference between the sum of four numbers and the sum of the first three numbers\n    fourth_number = sum_four_numbers - sum_first_three\n    return fourth_number\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # It is an arithmetic sequence, and we know three terms: 20 at hour 9-10, 28 at hour 10-11, and 36 at hour 11-12.\n    # The common difference of the arithmetic sequence is given by difference between any two consecutive terms. \n    common_difference = 28 - 20\n    \n    # We can calculate the first term (beans peeled in the first hour) by subtracting the common difference twice from the term at 9-10.\n    # This is because the first hour will be two hours before the 9-10 term.\n    first_term = 20 - 2 * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    original_mass = 2.3\n    mass_given_away = 0.76\n    remaining_mass = original_mass - mass_given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = full_weight - 2 * half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front. Hence, there are 5 children in front of Pip.\n    children_in_front_of_pip = 6 - 1\n    \n    # Bud is 6th from the end. Hence, there are 5 children behind Bud.\n    children_behind_bud = 6 - 1\n    \n    # There are 5 children between Pip and Bud, excluding Pip and Bud.\n    children_between_pip_and_bud = 5\n    \n    # Total children in the queue is the sum of:\n    # children in front of Pip, children between Pip and Bud, Pip, Bud, and children behind Bud.\n    total_children = (\n        children_in_front_of_pip + children_between_pip_and_bud + 1 + 1 + children_behind_bud\n    )\n\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (total_rows - 1) * difference\n\n    total_athletes = (first_term + last_term) * total_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    # Let x be the total age of the parents now.\n    # Total age of the family is the average age times the number of family members.\n    total_age_family = 29 * 6  # 29 average age * 6 members\n\n    # Total age of the children is given as 64.\n    total_age_children = 64\n\n    # Hence, the total age of the parents is the total age of the family minus the total age of the children.\n    total_age_parents = total_age_family - total_age_children\n\n    # The average age of the parents would be their total age divided by the number of parents (2).\n    average_age_parents_now = total_age_parents / 2\n\n    # The average age of the parents 3 years ago is their current average age minus 3.\n    average_age_parents_3_years_ago = average_age_parents_now - 3\n\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_done = 5\n    total_paintings_goal = 56\n\n    paintings_per_day = paintings_done / days_done\n    remaining_paintings = total_paintings_goal - paintings_done\n    days_needed = remaining_paintings / paintings_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = total_sum // 3\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy import symbols, lcm, solve\n\ndef solution():\n    x = symbols('x')\n\n    # Find least common multiple of 7, 8, 9 to ensure the constraint on consecutive numbers\n    lcm_value = lcm(7, 8, 9)\n\n    # Since the numbers are consecutive and even, we iterate through multiples of 2 * lcm_value\n    possible_sums = []\n    for i in range(lcm_value, 2 * lcm_value, 2):\n        # Check if all three conditions are satisfied\n        if all(i % j == 0 for j in [7, 8, 9]):\n            possible_sums.append(i + (i + 2) + (i + 4))\n\n    # Smallest sum of the three numbers\n    ans = min(possible_sums)\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    leaves = pieces_of_paper // interval\n\n    return leaves\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    difference = 3\n    last_term = 242\n    n = (last_term - first_term) // difference + 1  # The number of terms in the sequence initially\n    \n    # Calculating how many times we can remove 3 terms\n    # Each time we remove 3 terms, we also add 1 term (the sum of the 3), so net removal is 2 terms\n    times = (n - 3) // 2\n    \n    # The second number after all operations will be the fourth term after all removals\n    # As the first three terms are the ones always removed\n    second_number = first_term + difference * (times + 1)\n\n    return second_number\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for each person's weight\n    pip, bud, bob = symbols('pip bud bob')\n\n    # Equations based on the problem statement\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    # Return Pip's weight\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n\n    closest_value = min(numbers, key=lambda x: abs(x - target))\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef time_to_cross_two(people):\n    return max(people)  # Longest time of the two people crossing\n\ndef solution():\n    people_times = [7, 9, 4, 10]\n    all_crossed = float('inf')\n\n    # Generate all possible pairs combinations for the initial crossing\n    for first_crossing in combinations(people_times, 2):\n        first_time = time_to_cross_two(first_crossing)\n        remaining_after_first_cross = list(set(people_times) - set(first_crossing))\n\n        # Person with lowest time comes back after the first crossing\n        time_after_return = min(remaining_after_first_cross + list(first_crossing))\n        remaining_after_return = remaining_after_first_cross + [time_after_return]\n\n        # Generate all possible pairs combinations for the second crossing\n        for second_crossing in combinations(remaining_after_return, 2):\n            second_time = time_to_cross_two(second_crossing)\n            remaining_after_second_cross = list(set(remaining_after_return) - set(second_crossing))\n\n            # Person with lowest time comes back after the second crossing\n            if remaining_after_second_cross:\n                time_after_second_return = min(remaining_after_second_cross + list(second_crossing))\n                remaining_after_second_return = remaining_after_second_cross + [time_after_second_return]\n\n                # The last two people cross\n                last_cross_time = max(remaining_after_second_return)\n\n                total_time = first_time + time_after_return + second_time + time_after_second_return + last_cross_time\n\n                all_crossed = min(total_time, all_crossed)\n\n    return all_crossed\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n\n    # The common difference d can be found by the formula: Tn = T1 + (n-1)d\n    # where Tn is the nth term, T1 is the first term, and d is the common difference.\n    # From the given information, we can form the following equations:\n    # term_5 = T1 + 4d\n    # term_12 = T1 + 11d\n\n    # Now we can solve these two equations to find the common difference d\n    # term_12 - term_5 = (T1 + 11d) - (T1 + 4d)\n    #                  = 7d\n    # Therefore, d = (term_12 - term_5) / 7\n\n    common_difference = (term_12 - term_5) / 7\n\n    return common_difference\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n\n    # Work is assumed to be constant, so use the inverse proportion\n    # Work = People * Days\n    # People needed for the target days\n    people_needed = (original_people * original_days) / target_days\n\n    # More people needed is the difference between people needed and original people\n    more_people_needed = people_needed - original_people\n\n    return int(more_people_needed)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    time_diff = 5.5  # from 5:00 am to 10:30 am is 5 and a half hours\n    rate_of_increase = 2  # degrees per hour\n\n    increased_temp = time_diff * rate_of_increase\n    final_temp = initial_temp + increased_temp\n\n    return final_temp\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the usual speed in meters per minute, t be the time in minutes Maria ran before it started raining\n    x, t = symbols('x t')\n\n    # Before it started to rain, Maria ran for t minutes at speed x\n    # After it started to rain, Maria ran 2400 meters at speed 0.8x\n    # The total time is t minutes before rain and 2400/(0.8x) minutes after rain\n    # Maria arrives 5 minutes late, so the total time should be 30 + 5 minutes\n    equation = Eq(t + 2400/(0.8*x), 35)\n\n    # The length of the journey is x times the time ran before rain plus 2400 meters\n    distance = x*t + 2400\n\n    # Since she ran for t minutes at her usual speed before it started to rain, and the entire journey without rain would take 30 minutes,\n    # We have another equation: t = 30 - 2400/(0.8x)\n    equation2 = Eq(t, 30 - 2400/(0.8*x))\n\n    # Solving the system of equations for x and t\n    solutions = solve((equation, equation2), (x, t))\n\n    # Calculate the length of the journey\n    journey_length = solutions[x]*solutions[t] + 2400\n\n    return journey_length.evalf()\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Equation representing the money left after visiting each shop\n    equation = Eq(((x / 2 - 1) / 2 - 2) / 3 - 3, 49)\n\n    # Solve for x\n    money_at_first = solve(equation, x)\n\n    return money_at_first[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume the number of books on the top shelf is x\n    x = symbols('x')\n\n    # Since the difference between shelves is 3 (an arithmetic sequence)\n    # and there are seven shelves, we can express the total number of books as:\n    # Total = x + (x+3) + (x+6) + ... + (x+18), since 6 differences of 3 is 18\n\n    # Form the equation for the sum of the arithmetic sequence\n    # n/2 * (first_term + last_term)\n    n = 7  # number of shelves\n    first_term = x\n    last_term = x + 3 * (n - 1)  # because the difference (d) is 3 and n-1 differences\n    total_books = 280  # given total number of books\n\n    eq = Eq(n/2 * (first_term + last_term), total_books)\n\n    # Solve the equation for x\n    solution = solve(eq, x)\n\n    # Return the solution as the number of books on the top shelf\n    return int(solution[0])\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # worst case scenario for not getting a green pencil:\n    # Darrell draws all blue and all white pencils first\n    blue_pencils = 3\n    white_pencils = 3\n    # the next pencil he draws has to be a green one, so add one more draw\n    draws_needed = blue_pencils + white_pencils + 1\n\n    return draws_needed\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let a be the original number of students in school A\n    # Let b be the original number of students in school B\n    \n    # According to the problem after transfer:\n    # a - 20 = b + 20\n    # a still has 10 more students than school B\n    # a - 20 = b + 20 + 10\n    \n    # Before the transfer, total students in both schools are 1050\n    # a + b = 1050\n    \n    # We have two equations now\n    # equation1: a - 20 = b + 30 (after transfer situation)\n    # equation2: a + b = 1050 (total students)\n    \n    # We solve these two equations to find the value of a and b\n    # From equation1: a = b + 30 + 20\n    # Substitute the value of a in equation2: (b + 30 + 20) + b = 1050\n    # Simplify the equation: 2b + 50 = 1050\n    # 2b = 1050 - 50\n    # 2b = 1000\n    # b = 1000 / 2\n    # b = 500 (original number of students in school B)\n    \n    # Now, find original number of students in school A\n    # a = 500 + 30 + 20\n    # a = 550 (original number of students in school A)\n    \n    ans = 550\n    return ans\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n    factors = factorint(2240)\n    n = 1\n    for prime, power in factors.items():\n        if power % 2 == 1:\n            n *= prime\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep_cycle = 3\n    mop_cycle = 5\n    cook_cycle = 9\n    clean_cycle = 21  # 3 weeks = 21 days\n\n    return lcm(sweep_cycle, mop_cycle, cook_cycle, clean_cycle)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = (math_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies and y be the number of kids\n    x, y = symbols('x y')\n\n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(x, y * 18 - 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    equation2 = Eq(x, (y + 2) * 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    # Calculate the sum of digits for a given number\n    def sum_of_digits(number):\n        return sum(int(d) for d in str(number))\n\n    # Sum of all digits for all page numbers\n    total_sum = sum(sum_of_digits(page) for page in range(1, 311))\n    \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import root, Rational, N\n    \n    expression = 16.7 - ((-4.56)**2 - (8.1)**3) / (7.2)**3 / (-root(Rational(27, 4), 2) - (-30.15))\n    result = N(expression, 3)\n    \n    return result\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let's denote x as the number of years later.\n    # The age of Oliver after x years: 20 + x\n    # The age of Lin after x years: 26 + x\n    # The sum of their ages after x years: (20 + x) + (26 + x)\n    # We want to find out when their total age will be 48.\n    # So we set up the equation: (20 + x) + (26 + x) = 48\n    # Simplifying the equation: 46 + 2x = 48\n    # Solving for x: 2x = 48 - 46\n    # x = (48 - 46) / 2\n    # x = 2 / 2\n    # x = 1\n    x = (48 - 46) // 2\n    return x\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n\n    # 7 years ago, their ages ratio was 6:5\n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6/5)\n    # The sum of their current ages\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n\n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # total score of the 5 students\n    total_score_5_students = 5 * 87\n    # total score of the 6 students including Jim to get an average of 88\n    total_score_6_students = 6 * 88\n    # Jim's score is the difference between the total for 6 and 5 students\n    jim_score = total_score_6_students - total_score_5_students\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.1\n    second_discount = 0.2\n\n    first_price = original_price * (1 - first_discount)\n    final_price = first_price * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of baseball bats purchased\n    x = symbols('x')\n    \n    # Cost price of each bat is $135, so the total cost price would be 135x\n    # Selling price of each bat is $185, so the proceeds when left with 3 bats is 185(x - 3)\n    # The proceeds covered the initial cost (135x) plus a profit of $2945\n    # The equation is therefore: 185(x - 3) = 135x + 2945\n    \n    equation = Eq(185 * (x - 3), 135 * x + 2945)\n    \n    # Solving the equation for x\n    solution = solve(equation, x)\n    \n    # Returning the total number of baseball bats purchased\n    return solution[0]\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Jayden to Carter speed ratio is 7:4.\n    jayden_speed = 7\n    carter_speed = 4\n\n    # The sum of their speeds\n    total_speed = jayden_speed + carter_speed\n\n    # Distance between A and B\n    distance = 440\n\n    # Time until Jayden arrives at A (This is also the time they first meet)\n    time_to_meet = distance / total_speed\n\n    # Distance Jayden traveled until the first meeting\n    jayden_first_meeting_distance = time_to_meet * jayden_speed\n\n    # Distance Carter traveled until the first meeting\n    carter_first_meeting_distance = distance - jayden_first_meeting_distance\n\n    # Now Jayden turns around and they walk until they meet again\n    # Let's call the remaining distance to the second meeting 'e'\n    # Jayden will walk e meters to meet Carter, and during the same time, Carter walks the rest of the 440 - e meters\n    # Since their speeds ratio is 7:4, and they walk the same time towards each other again, the remaining distances will be in this ratio too.\n    # So we have: e / (440 - e) = jayden_speed / carter_speed\n\n    # Solving the equation for e\n    e = (jayden_speed * carter_first_meeting_distance) / carter_speed\n\n    # The meeting place from place A would be the distance Jayden traveled first plus e\n    meeting_place_distance_from_A = jayden_first_meeting_distance + e\n\n    return meeting_place_distance_from_A\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    sam, peter, john, john_final = symbols('sam peter john john_final')\n\n    # Equation representing the final count of John's stickers\n    equation1 = Eq(john_final, john + 0.2 * (sam + peter))\n    \n    # Equation representing the increase by 80% of John's stickers\n    equation2 = Eq(john_final, 1.8 * john)\n    \n    # Equation representing Sam’s final sticker count\n    equation3 = Eq(sam - 0.2 * sam, john_final + 20)\n    \n    # Sticker ratio between Sam and Peter\n    equation4 = Eq(sam, (7/5) * peter)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john, john_final))\n\n    # Return Peter's initial amount of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    number_of_minibuses = (boys + minibus_capacity - 1) // minibus_capacity\n    return number_of_minibuses\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one chair and one table\n    chair, table = symbols('chair table')\n    \n    # Equation representing the relationship between cost of table and chair\n    equation1 = Eq(table, chair + 160)\n    \n    # Equation representing the total cost of 1 table and 5 chairs being $328.\n    equation2 = Eq(table + 5 * chair, 328)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chair, table))\n    \n    # Extract the cost of one chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the hot tap to fill the bath alone\n    # Let y be the time it takes for the cold tap to fill the bath alone\n    x, y = symbols('x y')\n\n    # Equation 1: 1/x (part of the bath filled by hot tap in one minute)\n    #             + 1/y (part of the bath filled by cold tap in one minute)\n    #             = 1/10 (part of the bath filled by both in one minute)\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # Given: Water flows from the cold tap at twice the rate of the hot tap\n    # Hence, the time taken by the cold tap is half the time taken by the hot tap\n    # y = x/2\n    equation2 = Eq(y, x/2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want to find y, which is the time it takes for the cold tap alone\n    return solutions[y]\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_numbers = 10\n    total_mean = 1111\n\n    # Calculate total sum of all numbers\n    total_sum = total_numbers * total_mean\n\n    # Let the mean of the last 6 numbers be x\n    # Then the mean of the first 4 numbers will be (x - 240)\n    # Sum of the first 4 numbers = 4 * (x - 240)\n    # Sum of the last 6 numbers = 6 * x\n    # Total sum = sum of the first 4 numbers + sum of the last 6 numbers\n\n    # Therefore, we have an equation :\n    # 4 * (x - 240) + 6 * x = total_sum\n    # Solve for x to get the mean of the last 6 numbers\n\n    # Rearrange the equation:\n    # 4x - 960 + 6x = total_sum\n    # 10x = total_sum + 960\n    x = (total_sum + (4 * 240)) / 10\n\n    return x\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the initial amount of money for Raja and Kumar\n    raja, kumar = symbols('raja kumar')\n\n    # Create an equation representing that initially they had the same amount\n    equation1 = Eq(raja, kumar)\n\n    # Create an equation representing the money left after spending\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Solve the system of equations for Raja and Kumar's initial amounts\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]  # since raja equals to kumar, we can return any one of them\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip = 60 / 100  # Convert pence to pounds.\n    bud = 1.10\n    total_money = pip + bud\n    return total_money\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    # Since IS * 4 = PI,\n    # the two possible digits that P can represent when multiplied by 4 are 4 and 8\n    # because only a number ending with 8 can produce another number ending with 2 when multiplied by 4\n    # and only a number ending with 1 can become a number ending with 4 when multiplied by 4\n    # I can only be 1 or 4\n    # Now, if I were 4, then P would be 8*4 = 32, which leads to a three-digit PI, but PI must be two digits\n    # So, I must be 1\n    # If I is 1, then S can only be a number such that when you multiply it by 4, the resulting digit (P) is not 1\n    # This leaves us with S = 3 (since 13*4 = 52), making P = 5\n    # Therefore, I = 1 and S = 3\n    # So, PI is 53\n    P = 5\n    I = 1\n    return P * 10 + I\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Speed and distance for each part\n    speed1 = 7  # meters per second\n    distance1 = 280  # meters\n    \n    speed2 = 5  # meters per second\n    distance2 = 400  # meters\n    \n    speed3 = 8  # meters per second\n    # The total distance is 800 meters, subtract the first two parts to find the third distance\n    distance3 = 800 - distance1 - distance2  # meters\n\n    # Time = Distance / Speed for each part\n    time1 = distance1 / speed1  # time spent on the first part\n    time2 = distance2 / speed2  # time spent on the second part\n    time3 = distance3 / speed3  # time spent on the third part\n\n    # Total time is the sum of the times spent on each part\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    jocye_speed_ratio = 3  # Jocye's speed ratio\n    lori_speed_ratio = 2  # Lori's speed ratio\n\n    # Calculate Jocye's speed\n    jocye_speed = lori_speed * (jocye_speed_ratio / lori_speed_ratio)\n\n    # Calculate the distance Jocye can run in 10 seconds\n    distance_jocye_runs = jocye_speed * 10\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n    \n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3\n\n    prob_over_25 = prob_over_25_given_over_20 / prob_over_20\n\n    return prob_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Distance from the meeting point to the library\n    distance_to_library = 780 - 360\n    \n    # Don walks towards the library at a speed of 60 metres per minute\n    don_speed = 60\n    \n    # Time taken for Don to meet Danny\n    time_taken = distance_to_library / don_speed\n    \n    # Distance Danny walks\n    distance_danny_walks = 360\n    \n    # Speed of Danny\n    danny_speed = distance_danny_walks / time_taken\n    \n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 1\n    page = 0\n    while total_digits >= digits_per_page * (10**digits_per_page - 10**(digits_per_page - 1)):\n        total_digits -= digits_per_page * (10**digits_per_page - 10**(digits_per_page - 1))\n        page += 9 * (10**(digits_per_page - 1))\n        digits_per_page += 1\n    page += total_digits // digits_per_page\n    \n    return page\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    total_rope_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = total_rope_skipping + total_long_jump - 2 * both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all weight to grams\n    flour = 1500  # 1 kg 500 g converted to grams\n    sugar = 1200  # 1 kg 200 g converted to grams\n    butter = 900  # 900 g as it is already in grams\n    \n    total_weight = flour + sugar + butter  # Total mixture weight\n    weight_per_tin = total_weight / 8  # Divided into 8 tins\n    \n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(j/i for i in range(2, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can be in the first or the last position: 2 options for the first, and 2 for the last.\n    positions_for_A_and_B = 2 * 2\n\n    # After placing A and B, there are 2 remaining spots for C and D, which can be arranged in 2! ways.\n    arrangements_for_C_and_D = 2\n\n    # Total number of ways is the product of the two possibilities.\n    total_ways = positions_for_A_and_B * arrangements_for_C_and_D\n\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case scenario,\n    # Janice could pick 3 red, 3 blue and 3 green marbles without having 4 of the same color.\n    # Therefore, the next marble she pulls out must be the fourth marble of the same color.\n    num_marbles = 3 * 3 + 1  # Worst case for three colors + 1 to guarantee the fourth of the same color\n    return num_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    count = 0\n    for tens in [1, 2, 3]:\n        for ones in [1, 2, 3]:\n            if tens != ones:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    # start from smallest even digit for the last place\n    last_digit_options = [digit for digit in digits if digit % 2 == 0]\n    smallest_last_digit = min(last_digit_options)\n    \n    # remove smallest even digit and sort remaining digits in ascending order\n    digits.remove(smallest_last_digit)\n    digits.sort()\n    \n    # combine the sorted digits with the smallest even digit at the end\n    smallest_number = int(''.join(str(digit) for digit in digits) + str(smallest_last_digit))\n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from the largest two-digit number\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    # Number of worker-days required to build the wall\n    total_worker_days = 3 * 3\n    \n    # Number of days for 1 worker to build the same wall\n    days_for_1_worker = total_worker_days / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n\n    pupils_per_row = total_pupils // rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b = symbols('a b')\n\n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Extract the value of b\n    b_value = solutions[b]\n\n    return b_value\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        if p.index('A') in range(p.index('B')+1, p.index('C')) or p.index('A') in range(p.index('C')+1, p.index('B')):\n            if abs(p.index('D') - p.index('E')) != 1:\n                if abs(p.index('F') - p.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Speed ratio of Nicolas to Yiding is 4:3 (from the initial condition given)\n    # Therefore, for every 4 levels Nicolas climbs, Yiding climbs 3 levels.\n    \n    # If when Nicolas is at level 16, we need to find the level of Yiding.\n\n    # Level reached by Nicolas divided by Nicolas speed ratio\n    # gives the number of intervals taken by Nicolas.\n    nicolas_intervals = 16 / 4\n    \n    # Yiding's level is then the number of intervals taken by Nicolas\n    # multiplied by Yiding speed ratio.\n    yiding_level = nicolas_intervals * 3\n\n    return yiding_level\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_per_cake = symbols('price_per_cake')\n    lucy_money = symbols('lucy_money')\n\n    # Equation when buying 10 cakes\n    equation1 = Eq(10 * price_per_cake - lucy_money, 11)\n\n    # Equation when buying 13 cakes\n    equation2 = Eq(13 * price_per_cake - lucy_money, 26)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (price_per_cake, lucy_money))\n\n    return solutions[price_per_cake]\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "# Python code for the solution\ndef solution():\n    # John's equation is 60x + 6y + 25 = 200x + 20y\n    # Simplifying John's equation gives us -140x - 14y + 25 = 0\n    # Which simplifies to -70x - 7y + 12.5 = 0\n    # John's conclusion 10x + y = 45 is incorrect as it does not consider the 25 added to 6 times A to equal B\n\n    # Correctly setting up the equation gives us 6 * (10x + y) + 25 = 20x + 2y\n    # This simplifies to 60x + 6y + 25 = 20x + 2y\n    # We can then solve for x and y\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    A = 10 * x + y\n    B = 20 * x + 2 * y\n\n    equation = Eq(6 * A + 25, B)\n    solution = solve(equation, (x, y))\n    \n    x_value = solution[x]\n    y_value = solution[y]\n    \n    # Calculate A with the solved values of x and y\n    A_value = 10 * x_value + y_value\n    return A_value\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # original expression\n    expr = lambda a, b, c, d, e: a + b / c - d\n\n    # possible placements for the first pair of brackets\n    first_bracket_placements = [(285, 15, 5, 2),  # no brackets\n                                ((285 + 15), 5, 2, 0),  # (285 + 15) / 5 - 2\n                                (285, (15 / 5), 2, 0),  # 285 + (15 / 5) - 2\n                                (285 + (15 / 5), -2, 1, 0)]  # 285 + (15 / 5 - 2)\n\n    # applying the second pair of brackets to each case of the first pair\n    second_bracket_placements = []\n    for placement in first_bracket_placements:\n        second_bracket_placements.append(expr(*placement))  # no second bracket\n        second_bracket_placements.append(expr(placement[0] + placement[1], placement[2], placement[3], 0))  # (a + b) / c - d\n        second_bracket_placements.append(expr(placement[0], placement[1] / placement[2], placement[3], 0))  # a + (b / c) - d\n        second_bracket_placements.append(expr(placement[0], placement[1], placement[2] + placement[3], 0))  # a + b / (c - d)\n\n    # remove duplicates\n    unique_results = set(second_bracket_placements)\n\n    # count unique results\n    count = len(unique_results)\n\n    return count\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / 10\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = (quotient * divisor) + remainder\n\n    return number\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n\n    for locker_number in range(1, 101):\n        if locker_number % 3 == 0:  # Every multiple of 3 gets locked and possibly toggled by 5\n            if locker_number % 5 == 0:  # Every multiple of 5 toggles the state\n                # For a number to be toggled twice and be unlocked\n                # at the end, it needs to be a multiple of both 3 and 5, i.e., a multiple of 15,\n                # which will be locked first and then unlocked again. Hence, we ignore it here.\n                pass\n            else:\n                # If it's just a multiple of 3 and not 5, it stays locked.\n                pass\n        elif locker_number % 5 == 0:  # Every multiple of 5 that hasn't been touched by 3 gets locked\n            pass\n        else:\n            # Since it's neither a multiple of 3 nor 5, the locker remains unlocked.\n            unlocked_lockers += 1\n\n    for square_number in range(1, 11):  # For square numbers between 1^2 to 10^2\n        if square_number**2 <= 100:\n            # Only square numbers will be toggled an odd number of times (including during 3 and 5),\n            # so they will end up unlocked. Hence, we add them to the unlocked count.\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    halfway = (4.6 + 13.8) / 2\n    return halfway\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    # total number of matches\n    matches = 5\n    \n    # sum of the known scores\n    known_scores_sum = 37 + 53 + 29 + 41\n    \n    # mean score is 40\n    mean_score = 40\n    \n    # total sum of scores to achieve the mean\n    total_scores_sum = mean_score * matches\n    \n    # calculate x\n    x = total_scores_sum - known_scores_sum\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')  # Total number of letters in the word\n    unique_letters = {'C': 1, 'H': 1, 'E': 3, 'S': 1}  # Count of each unique letter\n\n    ways = factorial(total_letters)\n    for count in unique_letters.values():\n        ways //= factorial(count)\n\n    return ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    all_three_digit_numbers = set(range(100, 1000))  # All three-digit numbers\n    numbers_without_sevens = set(range(100, 1000)) - set(range(170, 800, 100)) - set(range(70, 800, 10)) - {7}\n    \n    for num in all_three_digit_numbers:\n        if '7' in str(num):\n            numbers_without_sevens.discard(num)\n    \n    count_with_at_least_two_sevens = len(all_three_digit_numbers) - len(numbers_without_sevens)\n    return count_with_at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    total, cows, goats = symbols('total cows goats')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(cows, 0.65 * total)  # 65% of the original total are cows\n    equation2 = Eq(goats, total - cows)  # The rest are goats\n    equation3 = Eq(0.85 * total, cows + 240)  # After adding 240 animals, cows are now 85% of the total\n    equation4 = Eq(2 * goats, total - (cows + 240))  # Goats are doubled\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total, cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):  # search for the five-digit number (excluding the unit digit which is '9')\n        original_number = i * 10 + 9  # construct the original six-digit number with '9' as the unit\n        new_number = int('9' + str(i))  # construct the new six-digit number by placing '9' at the beginning\n        if new_number == 4 * original_number:  # check the condition\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n    # Abigail is 6 years older than Jonathan.\n    equation1 = Eq(abigail, jonathan + 6)\n    # Six years ago, Abigail was twice as old as Jonathan.\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_work = 1\n\n    for alice_days_off in range(28):\n        alice_effective_days = 27 - alice_days_off\n        work_done = (alice_effective_days * alice_work_rate) + (27 * bob_work_rate)\n        if work_done >= total_work:\n            return alice_days_off\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations of digits for A, B, C, D\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Ensure A and C are not zero as they are the first digits in each number\n        if A == 0 or C == 0:\n            continue\n        num1 = A * 101  # ABA\n        num2 = C * 101 + D * 10  # CDC\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pages and days\n    total_pages = symbols('total_pages')\n    deadline = symbols('deadline')\n\n    # Vanessa reads 30 pages a day and finishes 2 days after the deadline\n    eq1 = Eq(30 * (deadline + 2), total_pages)\n\n    # Vanessa reads 39 pages a day and finishes 4 days before the deadline\n    eq2 = Eq(39 * (deadline - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (total_pages, deadline))\n\n    # Return the number of days to finish the book and the total number of pages\n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = \"2020202020202020\"  # the repeating sequence of digits\n    total_digits = 535\n    digit_count_2 = sequence.count('2') * (total_digits // len(sequence)) + \\\n                    sequence[:total_digits % len(sequence)].count('2')\n    return digit_count_2\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n\n    return custom_operation(4, 3) - custom_operation(3, 4)\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product_mod = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product_mod\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 // 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_in_one_box = 5\n    number_of_boxes = 6\n    total_apples = apples_in_one_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of fifty-cent coins Owen had at first\n    # Let y be the number of one-dollar coins Owen had at first\n    x, y = symbols('x y')\n\n    # At first Owen had 2/7 of his coins as fifty-cent coins\n    # This implies 5/7 of his coins were one-dollar coins\n    # So the ratio of one-dollar coins to fifty-cent coins is 5:2\n    equation1 = Eq(y, (5/2) * x)\n\n    # After receiving the coins from his mother, he had 10 more one-dollar coins\n    # and five-dollars worth of fifty-cent coins which is equal to (5/0.5) = 10 fifty-cent coins\n    equation2 = Eq((x + 10) * 2, y + 10)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The total number of coins Owen had at first\n    total_coins = solutions[x] + solutions[y]\n\n    return total_coins\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = adults * 5 + children * 3\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dress, belt, shirt = symbols('dress belt shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (dress, belt, shirt))\n\n    ans = solutions[dress] - solutions[shirt]\n    return ans\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    # Andy saves $7 each day\n    andy_daily_savings = 7\n    \n    # Brenda saves $6 each day\n    brenda_daily_savings = 6\n    \n    # Andy has saved $378 in total\n    andy_total_savings = 378\n    \n    # Calculate the number of days Andy saved to reach $378\n    andy_saving_days = andy_total_savings // andy_daily_savings\n    \n    # Calculate how much Brenda would have saved in the same number of days\n    brenda_total_savings = brenda_daily_savings * andy_saving_days\n    \n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * points_correct) + (incorrect_answers * points_incorrect)\n        if score == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume is 100%\n    original_volume = 1\n    \n    # Length is increased by 10%, so it becomes 1 + 0.1 = 1.1 or 110% of the original\n    new_length = 1.1\n    \n    # Breadth is reduced to 4/5 or 80% of the original\n    new_breadth = 4 / 5\n    \n    # The new height to original height ratio is 11:10, so the new height is 1.1 or 110% of the original\n    new_height = 11 / 10\n    \n    # New volume is the product of the new dimensions\n    new_volume = new_length * new_breadth * new_height\n    \n    # Convert the new volume to percentage of the original volume\n    new_volume_percentage = new_volume * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n    \n    ways = factorial(8) // factorial(8 - 3)\n    \n    return ways\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Set up the equations based on the problem statement\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)\n    after_transactions_eq = Eq(anna + 8, (betsy - 8) * (5/2))\n    final_ratio_eq = Eq(anna / 2, betsy / 5, charlene / 7)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, after_transactions_eq, final_ratio_eq), (anna, betsy, charlene))\n\n    # Extract the solution for the number of marbles Betsy had originally (before transactions)\n    betsy_at_first = solutions[betsy] + 15\n\n    return betsy_at_first\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Since we only have three data points, we can attempt to find a pattern or relationship\n    # between the numbers using the given equations.\n    \n    # From the provided equations:\n    # 4 Δ 1 = 17 can be thought of as f(4, 1) = 17\n    # 5 Δ 4 = 29 can be thought of as f(5, 4) = 29\n    # 8 Δ 16 = 80 can be thought of as f(8, 16) = 80\n\n    # Let's see if we can identify any pattern.\n    # One possible pattern is to see if the relationship between the results\n    # and the input pairs can be derived by attempting different arithmetic operations:\n    # (a*b + a + b) seems to be one that fits.\n    # Checking against the given cases:\n    # 4*1 + 4 + 1 = 4 + 4 + 1 = 9 (not 17)\n    # This doesn't work, but what if it's squared?\n    # (4*1 + 4 + 1)^2 = 9^2 = 81 (still not 17)\n    # But, if we subtract the product of the two inputs we get the correct result:\n    # (4*1 + 4 + 1)^2 - 4*1 = 81 - 4 = 77 (not 17)\n\n    # Let's reconsider our approach after the failed attempt\n    # Another approach could be a combination of addition and multiplication:\n    # a Δ b = (a^2 - a) + (b^2 - b)\n\n    # Let's test the given examples:\n    # 4 Δ 1: (4^2 - 4) + (1^2 - 1) = (16 - 4) + (1 - 1) = 12 + 0 = 12 (which is not 17)\n    # 5 Δ 4: (5^2 - 5) + (4^2 - 4) = (25 - 5) + (16 - 4) = 20 + 12 = 32 (which is not 29)\n    # 8 Δ 16: (8^2 - 8) + (16^2 - 16) = (64 - 8) + (256 - 16) = 56 + 240 = 296 (which is not 80)\n\n    # After these incorrect attempts, a more careful observation is needed.\n    # Since direct mathematical operations don't work, we can try to find a formula to generalize the operation.\n    # Suppose we have the formula Δ given by f(a, b) = k * (a^2 + b^2) + m * (a + b) + n\n    # We need to determine the coefficients: k, m, n\n\n    # Using the given examples:\n    # f(4, 1) => k * (4^2 + 1^2) + m * (4 + 1) + n = 17 (Equation 1)\n    # f(5, 4) => k * (5^2 + 4^2) + m * (5 + 4) + n = 29 (Equation 2)\n    # f(8, 16) => k * (8^2 + 16^2) + m * (8 + 16) + n = 80 (Equation 3)\n\n    # Let's solve these equations for k, m, n\n    \n    from sympy import symbols, Eq, solve\n\n    k, m, n = symbols('k m n')\n    eq1 = Eq(k * (4 ** 2 + 1 ** 2) + m * (4 + 1) + n, 17)\n    eq2 = Eq(k * (5 ** 2 + 4 ** 2) + m * (5 + 4) + n, 29)\n    eq3 = Eq(k * (8 ** 2 + 16 ** 2) + m * (8 + 16) + n, 80)\n\n    solutions = solve((eq1, eq2, eq3), (k, m, n))\n\n    # Express Δ in terms of k, m, n and a, b\n    def delta(a, b):\n        return solutions[k] * (a**2 + b**2) + solutions[m] * (a + b) + solutions[n]\n\n    ans = delta(10, 9)\n\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    number_of_points = 10\n    points_needed_to_form_triangle = 3\n\n    ans = comb(number_of_points, points_needed_to_form_triangle)\n    \n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 60 / 100\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    additional_mushrooms_first_hour = 26\n\n    # Let x be the number of mushrooms gathered in the first hour, then:\n    # x + (x + 26) = total_mushrooms\n    # 2x + 26 = 40\n    # 2x = 40 - 26\n    # x = (40 - 26) / 2\n\n    mushrooms_first_hour = (total_mushrooms - additional_mushrooms_first_hour) / 2\n    mushrooms_second_hour = mushrooms_first_hour + additional_mushrooms_first_hour\n\n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # To maximize the number of questions Noa can solve, we should allocate\n    # as few questions as possible to the other four classmates in such a way\n    # that everyone solves a different number of questions.\n    # We start by giving 1 question to the first student, 2 to the second,\n    # 3 to the third, and 4 to the fourth. That's 1+2+3+4 questions allocated.\n    # The remaining questions can be given to Noa.\n\n    questions_allocated_to_classmates = sum(range(1, 5))\n    max_questions_for_noa = 40 - questions_allocated_to_classmates\n    \n    return max_questions_for_noa\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    ans = round(278, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temp = -89\n    hottest_temp = 58\n    difference = hottest_temp - coldest_temp\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the distance jogged from 6:30 AM to 7:30 AM at 6.5 miles per hour\n    jogging_time = 1  # time in hours from 6:30 AM to 7:30 AM\n    jogging_speed = 6.5  # speed in miles per hour\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Calculate the distance walked from 7:30 AM to 9:30 AM at 4.5 miles per hour\n    walking_time = 2  # time in hours from 7:30 AM to 9:30 AM\n    walking_speed = 4.5  # speed in miles per hour\n    walking_distance = walking_time * walking_speed\n    \n    # Calculate the total distance covered\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    ans = 9 * 100  # There are 100 centimetres in a metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    scan, ted = symbols('scan ted')\n    \n    # Current ratio of their ages: scan : ted = 1 : 4\n    equation1 = Eq(scan, ted / 4)\n    \n    # Ratio of their ages in 4 years: (scan + 4) : (ted + 4) = 1 : 3\n    equation2 = Eq(scan + 4, (ted + 4) / 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (scan, ted))\n    \n    # Extract their current ages\n    scan_age = solutions[scan]\n    ted_age = solutions[ted]\n    \n    # Let \"years_ago\" be the number of years ago when the ratio was 1:9\n    years_ago = symbols('years_ago')\n    \n    # Equation for the ratio years ago: (scan - years_ago) : (ted - years_ago) = 1 : 9\n    equation3 = Eq((scan_age - years_ago) / (ted_age - years_ago), 1 / 9)\n    \n    # Solve the equation for \"years_ago\"\n    years_ago_solution = solve(equation3, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for foldable and non-foldable bicycles\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Create equations based on the problem statement\n    total_bikes_equation = Eq(foldable + non_foldable, 476)\n    sold_bikes_equation = Eq(foldable + non_foldable - 208, \n                             (5/9) * non_foldable + (4/7) * foldable)\n    \n    # Solve the system of equations\n    solutions = solve((total_bikes_equation, sold_bikes_equation), (foldable, non_foldable))\n    \n    # Calculate the number of foldable bicycles sold\n    foldable_sold = solutions[foldable] - (4/7) * solutions[foldable]\n    \n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climbed_distance = 0\n    day_count = 0\n    slide_distance = 1\n\n    while climbed_distance < height:\n        day_count += 1\n        climbed_distance += 10\n\n        if climbed_distance >= height:\n            break\n\n        climbed_distance -= slide_distance\n        slide_distance += 1\n\n    return day_count\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    difference = mollies - guppies\n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height_meters = 12  # meters\n    real_tree_height_cm = real_tree_height_meters * 100  # convert meters to cm\n    model_tree_height = real_tree_height_cm * scale_ratio  # cm\n    return model_tree_height\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If every student is to get less than 3 candies (which is the maximum number to ensure at least one will get 3),\n    # then the maximum number of candies each can get is 2 \n    # (since giving any more would violate the condition of at least one student getting at least 3 candies).\n    # Therefore, we can give 2 candies to each of the 19 students, and any additional candy will ensure that\n    # at least one student will get 3 candies.\n\n    # 19 students get 2 candies each\n    candies_for_19_students = 19 * 2\n    \n    # Plus one more candy to ensure at least one student gets 3 candies\n    at_least_one_with_3_candies = candies_for_19_students + 1\n\n    return at_least_one_with_3_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n    \n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # Then x + y = total_questions and 8x + (-4)y = total_score.\n    # We can solve for x using these equations.\n    \n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if correct_mark * x + wrong_mark * y == total_score:\n            return x\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # grams\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # In the worst-case scenario, Yohan could take out all the red and black socks first.\n    # This means he would take 10 red socks and 10 black socks.\n    red_socks = 10\n    black_socks = 10\n\n    # Once he has taken out all red and black socks, the next two socks he takes out\n    # must be white, as only white socks are left in the drawer.\n    # Therefore, he needs 1 more white sock to make a pair.\n    white_socks_needed = 1\n\n    # The maximum number of socks he needs to take to ensure he gets a pair of white socks is:\n    max_socks = red_socks + black_socks + white_socks_needed\n\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60\n    total = 765\n    \n    ans = (percentage / 100) * total\n    \n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    # Total flowers\n    total_flowers = 30\n    # Flowers between each lamp post\n    flowers_between_each = 3\n    # Since he plants 3 flowers between every 2 lamp posts,\n    # the number of gaps between lamp posts is total_flowers / flowers_between_each.\n    num_gaps = total_flowers // flowers_between_each\n    # The number of lamp posts is one more than the number of gaps.\n    num_lamp_posts = num_gaps + 1\n    # The total length of the road is 50m.\n    road_length = 50\n    # The distance between each lamp post is the road length divided by the number of gaps.\n    distance_between_posts = road_length / num_gaps\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    total_sum = sum(range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_books = 14 - 1  # Subtract 1 because the 14th book from the right is the favorite book itself\n    total_books = left_books + right_books + 1  # Plus 1 for the favorite book\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    return 8 - 17\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    result = 48 / (4/5)\n    return result\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    term = 5\n    \n    nth_number = first_number * (ratio ** (term - 1))\n    \n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    kept_for_sister = 6\n    friends = 6\n\n    sweets_per_friend = (total_sweets - kept_for_sister) // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12 - 2 * 1.5  # subtracting distance from each edge\n    distance_between_bushes = 3\n    # Number of bushes on one side\n    bushes_per_side = side_length // distance_between_bushes\n    # Total bushes for the square lawn\n    total_bushes = 4 * bushes_per_side\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km per hour\n    speed_slow_van = 78   # km per hour\n    time = 8  # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percent = 100 - 60\n    total_masks = 360 / (remaining_work_percent / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    score_solution = solve(equation, original_score)\n\n    return score_solution[0]\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Initialize maximum number to the least possible value,\n    # which is when apples are distributed in increasing order starting from 1\n    max_apples = 1\n    # Iterate from 1 apple to 19, checking distributions\n    for apples in range(1, 20):\n        remaining_apples = 19 - apples\n        # initialize variable to keep track of current child's apple count \n        current = 1\n        child_count = 1\n        # while there are enough remaining apples to give the next child a unique amount\n        while remaining_apples > current:\n            # move to the next child and give them more apples than the previous\n            child_count += 1\n            remaining_apples -= current + 1\n            current += 1\n            # if we have run out of children, store the apples count if max so far\n            if child_count == 5 and remaining_apples > max_apples:\n                max_apples = apples\n                break\n    return max_apples\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0 and i % 2 == 0:\n                count += 1\n        return count\n\n    ans = count_divisors(78)\n    return ans\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the rates of work for P and Q\n    P, Q = symbols('P Q')\n\n    # P completes the job in 12 days working 8 hours a day\n    # so the rate of work for P (hours of work per day that it takes to finish the job) is:\n    equation1 = Eq(P, 1 / (12 * 8))\n\n    # Q completes the job in 8 days working 10 hours a day\n    # so the rate of work for Q is:\n    equation2 = Eq(Q, 1 / (8 * 10))\n\n    # Solve the system of equations to find the rates of work for P and Q\n    rates = solve((equation1, equation2), (P, Q))\n\n    # Rate of P\n    rate_P = rates[P]\n\n    # Rate of Q\n    rate_Q = rates[Q]\n\n    # Rate of work when P and Q work together for 8 hours per day\n    combined_rate = rate_P * 8 + rate_Q * 8\n\n    # Number of days required to complete the job when working together\n    days_required = 1 / combined_rate\n\n    return days_required\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Define the exchange rates\n    rabbits_for_goats = 9 / 3  # 9 rabbits for 3 goats = 3 rabbits for 1 goat\n    goats_for_cows = 2 / 4    # 2 goats for 4 cows = 1 goat for 2 cows\n\n    # Determine how many rabbits can be exchanged for 2 cows\n    # We need to use the exchange rates in reverse order for cows to rabbits\n    cows_for_goats = 2 / 1  # 2 cows for 1 goat (inverse of goats_for_cows)\n    goats_for_rabbits = 1 / 3  # 1 goat for 3 rabbits (inverse of rabbits_for_goats)\n\n    # Now we can calculate how many rabbits can be exchanged for 2 cows\n    rabbits_for_2_cows = 2 * cows_for_goats * goats_for_rabbits\n    \n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    correct_points = 4\n    wrong_points = -1\n    total_score = 168\n    \n    # Number of questions attempted\n    attempted_questions = total_questions - not_attempted\n    \n    # Let x be the number of correct answers\n    # Then the number of wrong answers is attempted_questions - x\n    # 4x - (attempted_questions - x) = total_score\n    # 4x - attempted_questions + x = total_score\n    # 5x = total_score + attempted_questions\n    x = (total_score + attempted_questions) / (correct_points - wrong_points)\n    \n    return int(x)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    from sympy import symbols, solve\n\n    pencils, pens = symbols('pencils pens')\n\n    # Initial ratio\n    equation1 = (pencils / pens) - (4 / 5)\n\n    # After taking out a pen and replacing it with a pencil\n    equation2 = ((pencils + 1) / (pens - 1)) - (7 / 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencils, pens))\n\n    return solutions[pencils] + solutions[pens]\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    last_term = first_term + (num_rows - 1) * common_difference\n    total_seats = (num_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = new_operation(10, 9)\n    result = new_operation(result, 8)\n    result = new_operation(result, 7)\n    result = new_operation(result, 6)\n    result = new_operation(result, 5)\n    result = new_operation(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    girls_percentage = 100 - boys_percentage\n    total_children = girls * (100 / girls_percentage)\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_price, curry_price = symbols('tuna_price curry_price')\n    equation1 = Eq(curry_price, tuna_price - 0.20)\n    equation2 = Eq(12 * tuna_price + 19 * curry_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_price, curry_price))\n\n    return solutions[tuna_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_numbers_count = 0\n\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                number = tens * 10 + ones\n                if number % 2 != 0:\n                    odd_numbers_count += 1\n\n    return odd_numbers_count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total cost of the books\n    x = symbols('x')\n    \n    # The expected profit is 60% of the total cost: 0.6 * x\n    expected_profit = 0.6 * x\n    \n    # On the first day, 70% of the books are sold at 60% profit\n    first_day_profit = 0.7 * x * 0.6\n    \n    # The total profit is 80% of the planned profit: 0.8 * (0.6 * x)\n    total_profit = 0.8 * expected_profit\n    \n    # Profit from the second day's sale is the total profit minus the first day's profit\n    second_day_profit = total_profit - first_day_profit\n    \n    # On the second day, the remaining 30% of the books are sold, thus the profit from the second day\n    # represents the discount on the remaining books: second_day_profit = 0.3 * x * discount_rate\n    # We express it as an equation and solve for the discount rate\n    discount_rate = symbols('discount_rate')\n    equation = Eq(second_day_profit, 0.3 * x * (1 - discount_rate))\n    \n    # Solve the equation for the discount rate\n    solution = solve(equation, discount_rate)\n    \n    # Convert the discount rate to a percentage\n    discount_percentage = solution[0] * 100\n    \n    return discount_percentage\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    balloons_for_boy = 2\n    balloons_for_girl = 4\n    \n    # Assume all children are boys and calculate the leftover balloons\n    all_boys_balloons = total_children * balloons_for_boy\n    leftover_balloons = total_balloons - all_boys_balloons\n\n    # Calculate how many girls there are by dividing the leftover balloons by the additional\n    # balloons a girl receives compared to a boy\n    additional_balloons_for_girl = balloons_for_girl - balloons_for_boy\n    num_girls = leftover_balloons // additional_balloons_for_girl\n\n    # Subtract the number of girls from the total number of children to find the number of boys\n    num_boys = total_children - num_girls\n    \n    return num_boys\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Since pages are printed on both sides, each sheet contains 2 page numbers\n    page_numbers_per_sheet = 2\n    \n    # The last page number before the missing pages\n    last_page_before_missing = 14\n    \n    # The first page number after the missing pages\n    first_page_after_missing = 35\n    \n    # Calculate the number of missing page numbers\n    # We subtract one because the counting includes both the last page before missing\n    # and the first page after missing, so one of them doesn't count as missing.\n    missing_page_numbers = first_page_after_missing - last_page_before_missing - 1\n    \n    # Calculate the number of missing sheets\n    missing_sheets = missing_page_numbers / page_numbers_per_sheet\n    \n    return int(missing_sheets)\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n\n    ans = (end - start) + 1\n\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_in_seconds = 200\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_m_per_min * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n\n    result = 1\n    for i in range(1, 20, 2):\n        result *= Fraction(1) + Fraction(2, i)\n\n    return float(result)\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    required_length_cm = 400 * 85                          # Total required length in cm\n    roll_length_cm = 20 * 100                              # Roll length in cm (1m = 100cm)\n\n    # Calculate the number of rolls needed\n    rolls_needed = required_length_cm / roll_length_cm     # This will likely not be an integer\n    # If rolls_needed is not an integer, we need to round up, because you can't buy a fraction of a roll\n    # The ceil function returns the next integer\n    from math import ceil\n    rolls_needed = ceil(rolls_needed)\n\n    # Compare calculated rolls_needed with Haoyuan's estimate\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma's and John's current ages\n    emma, john = symbols('emma john')\n\n    # Set up the equations based on the problem statement\n    # In 3 years, the sum of their ages will be 27\n    equation1 = Eq(emma + 3 + john + 3, 27)\n    # John is 7 years older than Emma\n    equation2 = Eq(john, emma + 7)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if (cookies - 5) % 6 == 0 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    spending = (5/6) * remainder\n    saving = remainder - spending\n\n    equation = Eq(spending, donation + 78)\n\n    sol = solve(equation, salary)\n\n    return sol[0]\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of animals initially\n    # Let y be the number of goats initially\n    x, y = symbols('x y')\n\n    # Initial conditions\n    # 65% were cows, so 35% were goats\n    # y = 35% of x\n    equation1 = Eq(y, 0.35 * x)\n\n    # After adding 240 animals\n    # Cows become 85% and goats doubled\n    # (x - y + 240) * 85% = 0.65*x + 240\n    # 2y = x - y\n    \n    equation2 = Eq((x + 240) * 0.85, 0.65*x + 240)\n    equation3 = Eq(2*y, x - y)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_of_2 = pow(2, 2017, 10)\n    last_digit_of_3 = pow(3, 2017, 10)\n    last_digit = (last_digit_of_2 * last_digit_of_3) % 10\n    return last_digit\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote t as the time (in minutes) David spends walking at the increased speed\n    t = symbols('t')\n\n    # Distance walked at increased speed is (150 + 50)t = 200t\n    # Distance walked at initial speed is 150 * 10 for the first 10 minutes\n    # Total distance is the sum of both parts and equals 3700 meters\n    equation = Eq((150 * 10) + (200 * t), 3700)\n\n    # Solve the equation for t\n    time_increased_speed = solve(equation, t)[0]\n    \n    # Total time spent walking is 10 minutes at initial speed plus time at increased speed\n    total_time = 10 + time_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given terms and their positions\n    term_7 = 57\n    term_15 = 89\n\n    # Calculate the common difference\n    common_difference = (term_15 - term_7) / (15 - 7)\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    number, modulo = solve_congruence(*congruences)\n\n    while number > 400:\n        number -= modulo\n\n    return number\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    possible_sums = []\n    # The sum of the digits of a number that is divisible by 9 must be a multiple of 9\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({A, B, C, 4, 7, 1, 9}) == 7:  # All digits must be different\n                    digits_sum = 4 + 7 + A + 1 + B + 9 + C\n                    if digits_sum % 9 == 0:\n                        possible_sums.append((A + B + C, f'47A1B9C'.replace('A', str(A)).replace('B', str(B)).replace('C', str(C))))\n    \n    return possible_sums[0]  # Return the first valid result\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_left = 150\n    sweets_bought_per_week = 45\n    sweets_eaten_per_week = 60\n    net_sweets_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    weeks = (initial_sweets - sweets_left) / net_sweets_per_week\n    \n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    carrie_pays = solutions[apple] + solutions[orange]\n\n    return carrie_pays\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Since each digit can be used more than once, we have 3 choices for each digit place.\n    choices_per_place = 3\n\n    # The number of different three-digit numbers is then the number of choices for the\n    # hundreds place multiplied by the number of choices for the tens place\n    # multiplied by the number of choices for the units place.\n    total_numbers = choices_per_place ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    # Initialize the number of sweets with the smallest number that gives a remainder of 2 when divided by 3.\n    sweets = 2\n    while True:\n        # Check if the current number of sweets gives a remainder of 2 when divided by 3, 4, 5, and 6.\n        if all(sweets % n == 2 for n in [3, 4, 5, 6]):\n            # Check if the number of sweets is more than or equal to each divisor, to ensure each child gets at least one sweet.\n            if all(sweets // n >= 1 for n in [3, 4, 5, 6]):\n                return sweets\n        # Increment the total number of sweets by the LCM of the divisors to maintain the remainder condition.\n        # The LCM of 3, 4, 5, and 6 is 60 since the LCM of 3 and 4 is 12 and the LCM of 12 and 5 is 60 and 60 is a multiple of 6.\n        sweets += 60\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n    \n    both_classes = sport_class_students + reading_class_students - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    ball_price = 1.5\n\n    # Calculate the total cost of two rackets\n    cost_of_rackets = 2 * racket_price\n\n    # Calculate the remaining money Ryan has after buying two rackets\n    remaining_money = total_money - cost_of_rackets\n\n    # Calculate the number of tennis balls Ryan can buy with the remaining money\n    number_of_balls = remaining_money // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Assume we pick the worst possible outcome for each draw -\n    # that is we pick the same color until we are forced to have all colors.\n    \n    # If we pick all 4 balls of one color, we have to start picking another color.\n    # So, after picking 4 balls of the first color, we can pick 4 of the second.\n    # At this point, we have 8 balls and still only have 2 different colors.\n    \n    # To guarantee a third color, we must pick one more ball.\n    # So the minimum number of balls we must draw is 4 + 4 + 1.\n    \n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    # Initial number of chocolates\n    heinz_chocolates = 87\n    jed_chocolates = 137\n\n    # Chocolates exchanged per week\n    heinz_exchange_rate = 4\n    jed_exchange_rate = -6  # Negative because Jed gives away chocolates\n\n    # Number of weeks passed\n    weeks = 0\n\n    # Loop until Heinz and Jed have the same number of chocolates\n    while heinz_chocolates != jed_chocolates:\n        # Each week, update the number of chocolates for both Heinz and Jed\n        heinz_chocolates += heinz_exchange_rate\n        jed_chocolates += jed_exchange_rate\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points on the circle. To form a right-angled triangle,\n    # the hypotenuse must be the diameter of the circle.\n    # For any selected point, there is only one point opposite to it that\n    # can serve as the end point of the hypotenuse.\n    \n    # Therefore, we can select the first point (tip of the hypotenuse) in 12 ways.\n    # For each selection, the opposite point is uniquely determined.\n    # After that, we have 10 remaining points to choose the third point of the triangle.\n    # This third point cannot be one of the two already chosen.\n    # So, for each hypotenuse, there are 10 ways to complete the triangle.\n\n    # Each of these triangles is unique, as each hypotenuse is unique.\n    total_right_triangles = 12 * 10\n\n    return total_right_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    num_boxes = 6\n    eaten_donuts = 3\n\n    total_donuts = donuts_per_box * num_boxes\n    remaining_donuts = total_donuts - eaten_donuts\n\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    return durians_left\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples], solutions[oranges]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    # Equation based on first scenario: 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    # Equation based on second scenario: 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Since the tiger is in the middle and the 11th as well,\n    # it means there are 10 animals in front and 10 animals behind him.\n    # Therefore, the total number of animals in the line is\n    # 10 (in front) + 1 (tiger) + 10 (behind) = 21 animals\n    total_animals = 10 + 1 + 10\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months = debt / monthly_salary\n    return months\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3)*24 + (2/5)*30 + (1/3)*15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy initially divides 24 roses into 3 vases, so each vase has 24 / 3 roses\n    roses_per_vase_initially = 24 // 3\n    \n    # Let's assume her mother brings back x roses, which are then divided into 4 vases\n    # Therefore, each of these vases would also have roses_per_vase_initially (equal amount)\n    # Hence x / 4 = roses_per_vase_initially, solving for x gives us the roses her mother brought back\n    x = roses_per_vase_initially * 4\n\n    # The total number of roses is the sum of the initial roses and the roses her mother brought back\n    total_roses = 24 + x\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    result = 36.42 * 1000\n    return result\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # in dollars\n    mamee_cost = haribo_cost - 0.30  # in dollars\n    big_jelly_cost = 6 * mamee_cost  # in dollars\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n\n    # Assuming Will hates mint flavour, he would not eat that one.\n    max_candies_he_can_eat = lemon_flavour + cherry_flavour\n\n    return max_candies_he_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n    price_of_2_cheesecakes = 2 * cheese_cake\n    return price_of_2_cheesecakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if all(num % d == d - 1 for d in [2, 3, 4, 5]):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In single elimination, we play N-1 games for N players\n\n    return games_played\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the ages of the sons and daughters\n    son_older, son_younger, daughter_older, daughter_younger = symbols('son_older son_younger daughter_older daughter_younger', positive=True, integer=True)\n    \n    # Equations based on the given information\n    eq_sum_ages = Eq(son_older + son_younger + daughter_older + daughter_younger, 55)   # sum of ages is 55\n    eq_sons_diff = Eq(son_younger - son_older, 3)                                       # sons are three years apart\n    eq_daughters_diff = Eq(daughter_older - daughter_younger, 2)                        # daughters are two years apart\n    eq_son_daughter_age = Eq(son_younger, 2 * daughter_older)                           # younger son is twice older daughter's age\n    \n    # Solve the system of equations\n    solutions = solve((eq_sum_ages, eq_sons_diff, eq_daughters_diff, eq_son_daughter_age),\n                      (son_older, son_younger, daughter_older, daughter_younger))\n    \n    youngest_child_age = min(solutions[son_older], solutions[son_younger], solutions[daughter_older], solutions[daughter_younger])\n    \n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(3*x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # iterating through all 4-digit numbers to find the one that meets the requirements\n    for A in range(1, 10):  # A cannot be zero\n        for B in range(10):  # B can be any digit\n            for C in range(10):  # C can be any digit\n                for D in range(1, 10, 2):  # D must be odd because CD should be divisible by 5\n                    AB = A * 10 + B\n                    BC = B * 10 + C\n                    CD = C * 10 + D\n                    ABC = A * 100 + BC\n                    BCD = B * 100 + CD\n                    if (\n                        AB % 2 == 0\n                        and BC % 3 == 0\n                        and CD % 5 == 0\n                        and ABC % 9 == 0\n                        and BCD % 11 == 0\n                        and len({A, B, C, D}) == 4  # confirming all digits are different\n                    ):\n                        return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    wallet, watch = symbols('wallet watch')\n\n    # Create equations based on the information provided\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    # Get the cost of a wallet\n    wallet_cost = solutions[wallet]\n\n    return wallet_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    sum_of_numbers = 2405 + 1827\n    num_to_words = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', \n                    10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen',\n                    16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 20: 'twenty',\n                    30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty',\n                    90: 'ninety', 0: 'zero'}\n\n    def two_digits(number):\n        if number < 20:\n            return num_to_words[number]\n        elif number < 100 and number % 10 == 0:\n            return num_to_words[number]\n        else:\n            return num_to_words[number // 10 * 10] + '-' + num_to_words[number % 10]\n    \n    def three_digits(number):\n        if number < 100:\n            return two_digits(number)\n        elif number % 100 == 0:\n            return num_to_words[number // 100] + ' hundred'\n        else:\n            return num_to_words[number // 100] + ' hundred and ' + two_digits(number % 100)\n\n    def number_to_words(number):\n        if number < 100:\n            return two_digits(number)\n        elif number < 1000:\n            return three_digits(number)\n        else:\n            thousands = number // 1000\n            rest = number % 1000\n            if rest == 0:\n                return three_digits(thousands) + ' thousand'\n            else:\n                return three_digits(thousands) + ' thousand ' + three_digits(rest)\n\n    return number_to_words(sum_of_numbers)\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = \"428571\"  # Sequence of recurring digits in the decimal form of 3/7\n    sequence_length = len(recurring_sequence)\n    \n    # Calculate the sum of the first 58 digits (since the sequence repeats every 6 digits)\n    sum_first_58 = (58 // sequence_length) * sum(int(digit) for digit in recurring_sequence)\n    # Add the sum of the remaining digits (if any)\n    sum_first_58 += sum(int(recurring_sequence[i]) for i in range(58 % sequence_length))\n    \n    return sum_first_58\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    books_factorial = factorial(total_books)\n    biographies_factorial = factorial(3)\n    science_fictions_factorial = factorial(4)\n    magazines_factorial = factorial(2)\n    practice_books_factorial = factorial(2)\n    arrangements = books_factorial // (biographies_factorial * science_fictions_factorial * magazines_factorial * practice_books_factorial)\n    return arrangements\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to exchange in grams\n    x = symbols('x')\n\n    # Equation for the final concentration of solution in bottle A after exchange\n    equation_a = Eq((50 * 0.11 + x * (0.47 - 0.11)) / 50, (50 * 0.47 - x * (0.47 - 0.11)) / 50)\n\n    # Solve the equation for x\n    solution_x = solve(equation_a, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string_length = 13\n    difference_in_length = 25\n    nicks_string_length = toms_string_length + difference_in_length\n    ans = nicks_string_length - toms_string_length\n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_in_cm = 20 * 100  # converting plot length from metres to centimetres\n    space_between_cauliflowers = 40  # space between cauliflowers in centimetres\n    first_cauliflower_offset = 20  # space from the end to the first cauliflower in centimetres\n\n    # Calculate the space available for planting after the first cauliflower is planted\n    planting_space = length_in_cm - first_cauliflower_offset\n\n    # Calculate the number of cauliflowers that can be planted\n    number_of_cauliflowers = 1 + (planting_space // space_between_cauliflowers)\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Since the cards can be rotated, any card can take any of the three positions in a three-digit number.\n    # Therefore, the total number of different three-digit numbers is simply 3 * 3 * 3\n    # because there are 3 choices for each of the hundreds, tens, and ones places.\n    ans = 3 * 3 * 3\n    return ans\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    # Generate all combinations for numbers summing to 15\n    for combo in combinations(range(1, 15), 4):\n        if sum(combo) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    prime_numbers = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n            prime_numbers.append(num)\n    return count, prime_numbers\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percent = 30\n    base = 250\n    ans = (percent / 100) * base\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100\n    subtract_meters = 2 + 7 / 100\n    ans = total_meters - subtract_meters\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    # Define the Fibonacci sequence generator\n    def fibonacci_seq(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    # Since we have the 7th number in the sequence (21), we need the next one, which is the 8th\n    # So, we call the fibonacci_seq function with n=8 to get the 8th Fibonacci number\n    ans = fibonacci_seq(8)\n    return ans\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n\n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence where each term is double the previous term\n    # The first term a1 is 1, and the common ratio r is 2\n    # The nth term of a geometric sequence is given by:\n    # an = a1 * r^(n-1)\n    # To find the 20th term, n=20; to find the 17th term, n=17\n    \n    # Find the 20th term\n    a20 = 1 * 2 ** (20 - 1)\n    \n    # Find the 17th term\n    a17 = 1 * 2 ** (17 - 1)\n    \n    # Divide the 20th term by the 17th term\n    ans = a20 / a17\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_integers = 35\n    max_product = 0\n    for i in range(1, sum_of_integers):\n        product = i * (sum_of_integers - i)\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earning = 70\n    days_worked_in_a_week = 6\n\n    total_earnings = average_daily_earning * days_worked_in_a_week\n    \n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    result = minutes * seconds_per_minute\n    return result\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Let's denote x as the total number of books Alice, Becky, and Crystal have\n    # Average = Total number of books / Number of persons\n    # We have the equation: x / 3 = 60\n    # So the total number of books is x = 60 * 3\n\n    x = 60 * 3\n\n    # Now, we include Dennis. The average increases by 10 when he's included\n    # So the new average is 60 + 10 = 70\n    # We have a new equation for the total number of books, including Dennis\n    # The new total is (x + Dennis_books) / 4 = 70\n\n    # We can solve for Dennis_books: Dennis_books = 70 * 4 - x\n\n    Dennis_books = 70 * 4 - x\n\n    return Dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_progress = 5\n    night_regress = 3\n    total_distance = 16\n    distance_covered = 0\n    day_count = 0\n\n    while distance_covered < total_distance:\n        day_count += 1\n        distance_covered += day_progress\n        if distance_covered >= total_distance:  # Snail reaches or crosses the top during the day\n            break\n        distance_covered -= night_regress\n\n    return day_count\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt\n\n    # Find smallest two-digit prime number\n    smallest_prime = list(primerange(10, 100))[0]\n\n    # Find largest two-digit square number\n    largest_square = int(sqrt(99)) ** 2\n    \n    # Calculate the product\n    product = smallest_prime * largest_square\n\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_between_first_and_fourth = 9\n    number_of_intervening_flags = 4 - 1\n    distance_between_flags = distance_between_first_and_fourth / number_of_intervening_flags\n    distance_between_first_and_ninth = distance_between_flags * (9 - 1)\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_johns = 2\n    ratio_mikes = 3\n\n    mikes_height = (johns_height / ratio_johns) * ratio_mikes\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Check if 233 is a prime number\n    if 233 > 1:\n        for i in range(2, 233):\n            if (233 % i) == 0:\n                return False # Michael is not correct; the number can be divided evenly\n        else:\n            return True # Michael is correct; the number is prime and cannot be divided evenly\n    else:\n        return False # Michael is not correct; 1 is not a prime number\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Since the digit 7 is in the hundredths place, its value is 0.07 (7 * 10^-2).\n    # Since the digit 6 is in the tenths place, its value is 0.6 (6 * 10^-1).\n    # The ones place has a value of 4 (4 * 10^0).\n    # The number is the sum of these values: 4 + 0.6 + 0.07\n    number = 4 + 0.6 + 0.07\n    \n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    total_speed_downstream = speed_in_still_water + speed_of_current\n    distance = 200\n\n    time_taken = distance / total_speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Cost of a pencil and a pen\n    cost_pencil = 2\n    cost_pen = 4\n    \n    # Number of pencils Owen should give Oscar to trade for a pen\n    pencils_for_pen = cost_pen // cost_pencil\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_questions = 10\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_for_correct + wrong * points_for_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    ways = trains + buses + flights\n    return ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    # Let x be the number of peaches Eddie gets\n    # Let a be the number of students in Class A\n    # Let b be the number of students in Class B\n    \n    # According to the given conditions we have:\n    # x = 5a + 10 (1)\n    # x = 8b - 2 (2)\n    # a = b + 3 (3)\n    \n    # From (1) and (2), we can eliminate x:\n    # 5a + 10 = 8b - 2\n    # or, 5a - 8b = -12 (4)\n    \n    # Substituting (3) into (4), we get:\n    # 5(b + 3) - 8b = -12\n    # or, 5b + 15 - 8b = -12\n    # or, -3b = -27\n    # Hence, b = 9\n    \n    # Substitute b back into (3) to find a:\n    # a = 9 + 3\n    # a = 12\n    \n    # Now, we use the value of a to find x from (1):\n    # x = 5a + 10\n    # x = 5 * 12 + 10\n    # x = 60 + 10\n    # x = 70\n    \n    # Therefore, Eddie gets 70 peaches.\n    b = 9\n    a = b + 3\n    x = 5 * a + 10\n\n    return x\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    # Initialize h to 1.\n    h = 1\n    \n    # Check numbers one by one to find the smallest h for which 28512 / h is a cube.\n    while True:\n        # Calculate the quotient\n        quotient = 28512 // h\n        \n        # Check if the quotient is a perfect cube\n        cube_root = round(quotient ** (1/3))\n        \n        # If the rounded cube root cubed is equal to the quotient, it's a perfect cube\n        if cube_root ** 3 == quotient:\n            return h\n        \n        # Increase h for the next iteration\n        h += 1\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To ensure two different colors are selected, consider the worst-case scenario:\n    # Bart picks all of one color first.\n    # Since there are 5 brown chips (the most of any color), he can pick all 5 and not have 2 different colors.\n    # So we add 1 to guarantee the next one is a different color.\n    worst_case = 5 + 1\n    return worst_case\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "from math import factorial\n\ndef solution():\n    def D(n):\n        # Base cases\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        # Recursive relation for derangement\n        return (n-1) * (D(n-1) + D(n-2))\n\n    n = 7  # Number of friends\n    ans = D(n)\n\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    people_per_family = 3  # father, mother, child\n    \n    # Each father shakes hands with 9 fathers, 9 mothers, and 9 children of other families.\n    handshakes_fathers = total_families * (total_families - 1) * (people_per_family - 1)\n    \n    # Each mother shakes hands with 9 fathers and 9 children.\n    handshakes_mothers = total_families * (total_families - 1) * (people_per_family - 2)\n\n    # Each child shakes hands with 9 fathers and 9 mothers.\n    handshakes_children = handshakes_mothers\n\n    # Total handshakes\n    total_handshakes = handshakes_fathers + handshakes_mothers + handshakes_children\n    \n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    ans = (31415926 + 31415925) * (31415926 - 31415925)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n    \n    # Number of 'slots' for the sketch performances is (D - 1) where D is the number of dances\n    # because one dance must be between each sketch.\n    # There are 4 slots available, because we need to have one dance between each of the 3 sketches, \n    # and we can place on either side of the line of dances.\n    slots_for_sketches = 7 - 1 + 1\n    \n    # Choose 3 slots for the sketches out of the 4 available \n    sketch_options = combinations(slots_for_sketches, 3)\n\n    # Permute the 7 dancing performances\n    dance_permutations = permutations(7, 7)\n\n    # Permute the 3 playing a sketch performances\n    sketch_permutations = permutations(3, 3)\n\n    total_ways = dance_permutations * sketch_permutations * sketch_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odds = 5\n    # Each of the three positions can be any of the 5 odd digits\n    count = odds * odds * odds\n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    index = (79 - 1) % len(recurring_sequence)  # Subtract 1 because index starts from 0\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # Since the number needs to be divisible by both 17 and 19,\n    # it needs to be divisible by 17*19 (the least common multiple of 17 and 19)\n    lcm = 17 * 19\n\n    # Start from the largest 3-digit number and work downwards\n    largest_three_digit_number = 999\n\n    # Loop through each number to find the largest one that, when added to 2009,\n    # results in a number divisible by lcm\n    while (2009 + largest_three_digit_number) % lcm != 0:\n        largest_three_digit_number -= 1\n\n    return largest_three_digit_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    # 40 free hours, then $5 per hour from hour 41 to hour 50, $8 per hour from hour 51 to hour 60\n    # Calculate the total bill for 50 hours and 60 hours of parking\n    bill_at_50_hours = (50 - free_hours) * 5\n    bill_at_60_hours = bill_at_50_hours + (60 - 50) * 8\n    \n    if bill <= bill_at_50_hours:\n        # Calculate hours if the bill is below or equal to the bill for 50 hours\n        parked_hours = free_hours + (bill / 5)\n    elif bill <= bill_at_60_hours:\n        # Calculate additional hours above 50 if the bill is between the bill for 50 and 60 hours\n        parked_hours = 50 + ((bill - bill_at_50_hours) / 8)\n    else:\n        # Calculate total hours if the bill is above the bill for 60 hours\n        parked_hours = 60 + ((bill - bill_at_60_hours) / 15)\n    \n    return parked_hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))\n    actual_sum = 1939\n    missing_number = expected_sum - actual_sum\n    return missing_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # The worst case scenario is that Jane keeps drawing the same colour until she has no choice \n    # but to draw a marble of a new color. This is a classic use of the Pigeonhole Principle. \n\n    # Calculate the cumulative number of marbles drawn by assuming that in the worst case Jane\n    # draws all but one of each color before getting to the final needed color.\n    \n    # 3 red (since we can leave one out and still have red marbles in hand), \n    # 6 green (allowing one to be left in the bag),\n    # 5 blue (again leaving one),\n    # and finally 2 orange (since we need both to have 4 different colors)\n    marbles_needed = 3 + 6 + 5 + 2\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1, 999):\n        if i + (i-1) == 777:\n            return i\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def count_ways(steps, avoid):\n    ways = [0] * (max(steps) + 1)\n    for step in range(1, min(steps) + 1):\n        if step not in avoid:\n            ways[step] = 1\n    for i in range(min(steps) + 1, max(steps) + 1):\n        if i not in avoid:\n            ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n    return ways\n\ndef solution():\n    steps = [10]\n    avoid = [5]\n    all_ways_to_reach_each_step = count_ways(steps, avoid)\n    \n    # total ways to reach the 10th step\n    total_ways = all_ways_to_reach_each_step[10]\n\n    # minus the ways that require stepping on the 5th step\n    ways_to_reach_fifth_step = all_ways_to_reach_each_step[5]\n    total_ways -= ways_to_reach_fifth_step * all_ways_to_reach_each_step[5]\n\n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    total_fence_length = 2 * (length + width)\n    return total_fence_length\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60  # James earns an average of £60 a day\n    week_days = 7  # Number of days in a week from Monday to Sunday\n\n    total_weekly_earnings = average_daily_earnings * week_days  # Total amount earned in a week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "网络故障，请重试"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    return 3016 - 100\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # We need to find the maximum largest number\n    # so we should first allocate the minimum possible values to the other four numbers.\n    # Since they are odd and different, the smallest odd numbers are 1, 3, 5, and 7.\n\n    # Allocate the smallest odd numbers to the first four numbers\n    smallest_numbers_sum = 1 + 3 + 5 + 7  # this is the smallest sum we can get from four different odd numbers\n\n    # Now find the largest number by subtracting the sum of four smallest odd numbers from the total\n    largest_number = 85 - smallest_numbers_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for T (tax rate) and annual income\n    T, income = symbols('T income')\n\n    # Equation for the income up to $30,000\n    tax_below_30k = (T / 100) * 30000\n\n    # Equation for the income above $30,000\n    tax_above_30k = ((T + 3) / 100) * (income - 30000)\n\n    # Total tax is the sum of both parts\n    total_tax = tax_below_30k + tax_above_30k\n\n    # Equation for the total tax being (T + 1)% of his annual income\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n    \n    # We solve for income given that T is in the equation as well.\n    # We know that income > 30000 because otherwise the part of the equation with (T+3)% wouldn't exist\n    solution = solve((equation, income > 30000), (T, income))\n\n    # The solution will be in a list of tuples, we select the first solution\n    # that makes sense in the context of the problem\n    valid_solution = [sol[1] for sol in solution if sol[1] > 30000]\n    if valid_solution:\n        return valid_solution[0]\n    else:\n        return \"No valid solution found\"\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Let x be the number of 20-cent coins and y be the number of 50-cent coins\n    for x in range(22):  # We cannot have more than 21 coins so we go from 0 to 21\n        y = 21 - x  # total number of coins is 21 thus y = 21 - x\n        if (20 * x + 50 * y) == 630:  # total value in cents should be $6.30 or 630 cents\n            return y\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the speed of Alan in meters per minute\n    x = symbols('x')\n    \n    # According to the problem, Phillip walks 15 meters more than Alan per minute\n    # Phillip's speed will be x + 15\n    \n    # Alan takes 3 minutes more than Phillip, thus Alan takes 12 + 3 minutes to reach B\n    alan_time = 12 + 3\n    \n    # Phillip takes 12 minutes to reach B\n    phillip_time = 12\n    \n    # Distance is speed times time, and both Alan and Phillip cover the same distance\n    # Equate Alan's distance to Phillip's distance\n    equation = Eq(x * alan_time, (x + 15) * phillip_time)\n    \n    # Solve the equation for x to find Alan's speed\n    alan_speed = solve(equation, x)[0]\n    \n    # Calculate the distance between A and B using Phillip's speed and time\n    distance_AB = (alan_speed + 15) * phillip_time\n    \n    return distance_AB\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    number = 2\n    \n    for i in range(0, 5):\n        if floor(sqrt(number)) == sqrt(number):\n            count += 1\n        number = number * 10 + 5\n    \n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    alice_after_spending = 68.10 - 25.40\n    alice_initial = alice_after_spending + 36\n    return alice_initial\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_for_first_set = 5 * 28  # Mean * Number of items\n    total_for_second_set = 12 * 11 # Mean * Number of items\n    combined_mean = (total_for_first_set + total_for_second_set) / (5 + 12)\n\n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    # Total length of the road\n    total_road_length = 74\n    # Distance between the benches\n    distance_between_benches = 7\n    # Number of benches minus one to get the intervals between benches\n    number_of_intervals = 9 - 1\n    \n    # Total distance occupied by benches\n    total_bench_length = total_road_length - (number_of_intervals * distance_between_benches)\n    # Length of one bench\n    bench_length = total_bench_length / 9\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n\n    students_A = 2 * students_B\n\n    # Equation for class A:\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # candies = 4 * students_A - 20\n    equation1 = Eq(candies, 4 * students_A - 20)\n    \n    # Equation for class B:\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # candies = 6 * students_B + 16\n    equation2 = Eq(candies, 6 * students_B + 16)\n\n    solution = solve((equation1, equation2), (candies, students_B))\n\n    return solution[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cut = 21\n    regrow = 1\n    cut = 5\n    \n    original_arms = (total_cut - regrow * (total_cut / cut)) / (cut - regrow)\n    \n    return int(original_arms)\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # With the third greatest number being 246, we can assume the first two are at least 247 and 248\n    # (since they must be whole numbers and distinct from each other).\n    # Let's subtract the sum of 246, 247, and 248 from the total 2021.\n    remaining_sum = 2021 - (246 + 247 + 248)\n    \n    # We now have to distribute the remaining_sum among 7 numbers,\n    # with each of them being at least 1 and less than 246.\n    # To minimize the 4th greatest number, we should maximize the values\n    # of the 1st, 2nd, and 3rd greatest numbers and minimize the others.\n    # This means making the remaining 6 smallest numbers all equal to 1.\n    min_fourth_number = remaining_sum - 6 * 1\n    \n    return min_fourth_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Since there are 6 gold and 6 silver coins,\n    # in the worst case, we might pick all coins of one color first.\n    # Therefore, we need to pick all 6 coins of one color plus 1 coin to ensure we have 2 different colored coins.\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # distance from 1st tree to 5th tree (4 intervals) is 20 cm\n    # so each interval is 20 / 4 = 5 cm\n    interval_length = 20 / 4\n\n    # distance from 8th tree to 14th tree is 6 intervals (14 - 8)\n    num_intervals = 14 - 8\n\n    # distance we want to find is number of intervals times the interval length\n    distance = num_intervals * interval_length\n\n    return distance\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey, father = symbols('grey father')\n    equation = Eq(father, 30 + grey)\n    equation2 = Eq(father, 3 * grey)\n    \n    solutions = solve((equation, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Assuming Bud has 1 part, Pip has 5 parts\n    parts_bud = 1\n    parts_pip = 5\n\n    # Create a bar plot for the \"parts\" graph\n    plt.figure(figsize=(5,3))\n    plt.bar('Bud', parts_bud, color='blue')\n    plt.bar('Pip', parts_pip, color='red')\n    \n    plt.ylabel('Number of Parts')\n    plt.title('Parts Distribution between Bud and Pip')\n\n    # Save the figure\n    plt.savefig('parts_graph.png')\n\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # A natural number x is adjacent to another number y if gcd(x, y) == 1.\n    # To maximize such numbers, we want to minimize the number of adjacent pairs where their gcd is greater than 1.\n    # Essentially, this comes down to avoiding placing multiples of the same prime number adjacent to each other.\n    \n    # We can use a greedy approach for this problem. We start with 1, because it's not mutually exclusive with any number.\n    # Then, we pick the next highest number not mutually exclusive with 1, which is 2.\n    # We keep adding numbers to the circle that are not mutually exclusive with the last number added.\n    \n    # To do so, we use the Euler's totient function, which counts the positive integers up to a given integer n that are relatively prime to n.\n    # We can loop through 1 to 24 and use the totient function to find how many numbers are relatively prime to each number.\n\n    from math import gcd\n\n    # Initialize a list with the first element being 1.\n    circle = [1]\n    \n    # Loop through 2 to 24 to find numbers to add to the circle.\n    for num in range(2, 25):\n        # Check if the gcd of the last element in the circle and the current number is 1.\n        if gcd(circle[-1], num) == 1:\n            # Check if the number is also not mutually exclusive with the first element in the circle.\n            if gcd(circle[0], num) == 1 or len(circle) == 1:\n                # If it satisfies both conditions, add the number to the circle.\n                circle.append(num)\n\n    return len(circle)\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator/denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n    # By Pigeonhole Principle, at least one layer will have ceil(total_books / total_layers) books\n    least_most_books = -(-total_books // total_layers)  # Ceiling division\n    return least_most_books\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of terms using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    number_of_rows = (last_term - first_term) // difference + 1\n\n    # Calculate the sum of an arithmetic series\n    sum_of_seats = (number_of_rows * (first_term + last_term)) // 2\n\n    return sum_of_seats\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Initialize the count variable\n    count = 0\n    \n    # Loop through all possible 3 digit places\n    for digit1 in range(1, 3):  # First digit can't be 0\n        for digit2 in range(3):  # Second digit can be 0, 1, or 2\n            for digit3 in range(3):  # Third digit can be 0, 1, or 2\n                # Check if all digits are unique\n                if len({digit1, digit2, digit3}) == 3:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The minimum divisor is when the quotient is the minimum positive integer, which is 1.\n    min_divisor = 1\n    # The formula for the dividend is: dividend = divisor * quotient + remainder\n    min_dividend = min_divisor * quotient + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y represent the current age of Hazel\n    y = symbols('y')\n    \n    # According to the problem, in three years Hazel will be y+3 years old\n    hazel_future_age = y + 3\n    \n    # Jessica is 3 years younger than Hazel, so her age in three years will be (hazel_future_age - 3)\n    jessica_future_age = hazel_future_age - 3\n\n    # Next year, Hazel will be y+1 years old and Jessica will be (hazel_future_age - 3) + 1 \n    # since Jessica's age will also increase by 1 next year\n    total_age_next_year = (y + 1) + ((hazel_future_age - 3) + 1)\n\n    # Since we are interested in their total age next year, return this total\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's assume the total number of animals in the farm initially is 'total_animals'\n    total_animals = symbols('total_animals')\n\n    # 65% of the animals were cows\n    cows = 0.65 * total_animals\n\n    # the rest were goats\n    goats = total_animals - cows\n\n    # when 240 more cows and goats were added, the cows increased by 20%\n    # so cows become 85% of the total\n    new_total_animals = total_animals + 240\n    new_cows = 0.85 * new_total_animals\n\n    # number of goats doubled\n    new_goats = 2 * goats\n\n    # since the total animals is now the sum of new cows and new goats\n    equation = Eq(new_cows + new_goats, new_total_animals)\n\n    solution = solve(equation, total_animals)\n\n    # initial number of goats\n    initial_goats = total_animals - 0.65 * total_animals\n\n    return int(initial_goats.subs(total_animals, solution[0]))\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert the second section from meters to centimeters\n    second_section_cm = 1.5 * 100\n    \n    # Convert the third section from millimeters to centimeters\n    third_section_cm = 150 / 10\n    \n    # Calculate the total width\n    total_width_cm = 30 + second_section_cm + third_section_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    age_difference = uncle_future_age - melanie_age\n    uncle_age = melanie_age + age_difference\n\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # converting pounds to pence\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 51):\n        if (i % 4 == 0 and i % 6 != 0) or (i % 6 == 0 and i % 4 != 0):\n            continue\n        facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    # Convert the start time to minutes\n    start_time_hour = 15\n    start_time_minute = 25\n    start_time_in_minutes = start_time_hour * 60 + start_time_minute\n    \n    # Duration of the film in minutes\n    film_duration = 108\n    \n    # Calculate end time in minutes\n    end_time_in_minutes = start_time_in_minutes + film_duration\n    \n    # Convert end time back to hours and minutes\n    end_time_hour = end_time_in_minutes // 60\n    end_time_minute = end_time_in_minutes % 60\n    \n    # Format the time for a 24-hour clock.\n    ans = f\"{end_time_hour:02d}:{end_time_minute:02d}\"\n    return ans\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all variables.\n    # For the monomial -x^3y^(2n), the degree is 3 + 2n.\n    # We are given that the degree is 5. Therefore, 3 + 2n = 5.\n    # Solving for n:\n    degree = 5\n    n = (degree - 3) / 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "def solution():\n    from fractions import Fraction\n    \n    result = (2 + Fraction(3, 8)) + (6 + Fraction(9, 12)) + (1 + Fraction(14, 16))\n    \n    return float(result)\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_age_now = sister_age_in_3_years - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different card ranks (numbers or letters).\n    # By Pigeonhole Principle, if we draw one card from each rank, we\n    # will have 13 cards of all different ranks.\n    # To ensure that there is at least one duplicate, we must draw one more card.\n    num_ranks = 13\n    cards_to_draw = num_ranks + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # Iterate through 3-digit even numbers\n    for num in range(100, 1000, 2):\n        # Calculate the sum of digits\n        if sum(map(int, str(num))) == 21:\n            return num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for numerator in range(2, 20):\n        ans += sum(numerator/j for j in range(numerator + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18  # 3/5 of the whole amount is 18p\n    whole = (part * 5) / 3  # Multiply by 5 then divide by 3 to find the whole amount\n    return whole\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_cost = 156\n    price_cactus = 2\n    price_sunflower = 7\n    extra_cacti = 6\n\n    # Let the number of sunflowers be s\n    # cacti will be s + 6\n    # Equation: price_cactus * (s + 6) + price_sunflower * s = total_cost\n\n    # Solve for s\n    for s in range(total_cost // price_sunflower + 1):\n        if price_cactus * (s + extra_cacti) + price_sunflower * s == total_cost:\n            num_cacti = s + extra_cacti\n            break\n\n    return num_cacti\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    # Sarah's payment\n    sarah_payment = 8 * book_price + 3 * 0.4\n    # Rebecca's payment\n    rebecca_payment = 3 * book_price + 8 * 0.4\n    \n    # Sarah paid £1 more than Rebecca\n    equation = Eq(sarah_payment - rebecca_payment, 1)\n\n    book_price_solution = solve(equation, book_price)\n\n    return float(book_price_solution[0])\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2*i)**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i - 1)**2 for i in range(1, 11)])\n    return even_squares - odd_squares\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17  # Total water in the bottle initially\n    pour_each_jug = 2  # Water poured into each jug\n    num_jugs = 6  # Number of jugs\n\n    water_poured = pour_each_jug * num_jugs\n    water_left = total_water - water_poured\n\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_initial, manutd_initial = symbols('liverpool_initial manutd_initial')\n\n    liverpool_later = liverpool_initial + 472\n    manutd_later = manutd_initial + 4836\n\n    equation1 = Eq(liverpool_initial, manutd_initial + 1000)\n    equation2 = Eq(manutd_later, 3 * liverpool_later)\n\n    solutions = solve((equation1, equation2), (liverpool_initial, manutd_initial))\n\n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n    \n    # Difference in what Sarah and Rebecca paid\n    price_difference = Eq(sarah_total - rebecca_total, 1.00)\n\n    # Solve for the book price\n    book_cost = solve(price_difference, book_price)\n\n    return book_cost[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # after giving $2 to Mike, Andy had $3 left, so before giving she had $3 + $2\n    after_nini = 3 + 2  \n    # Andy gave half of the remaining to Nini, so before giving to Nini, Andy had twice the amount\n    after_bob = after_nini * 2\n    # Andy gave half of the remaining to Bob, so before giving to Bob, Andy had twice the amount\n    after_mother = after_bob * 2\n    # Andy gave half of the money to her mother, so the original amount was twice the amount after giving to mother\n    original_amount = after_mother * 2\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the number of peaches be p, number of students in Class A be a, and number of students in Class B be b\n    p, a, b = symbols('p a b')\n    \n    # Formulate equations based on the problem\n    equation_a = Eq(5*a + 10, p)  # If all peaches are given to Class A\n    equation_b = Eq(8*b - 2, p)   # If all peaches are given to Class B\n    equation_students = Eq(a, b + 3)  # Class A has 3 more students than Class B\n    \n    # Solve the equations\n    solutions = solve((equation_a, equation_b, equation_students), (p, a, b))\n    \n    # Return the number of peaches\n    return solutions[p]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Initialize variables to track the length of sequences and the digit count\n    sequence_length, digit_count = 0, 0\n\n    # Iterate through the numbers to find the sequence containing the 2023rd digit\n    for i in range(1, 10000):\n        # Increment the sequence length and digit count\n        sequence_length += 1\n        digit_count += len(str(i))\n        \n        # Check if we've reached or passed the 2023rd digit\n        if digit_count >= 2023:\n            # Calculate the position of the 2023rd digit in the current number\n            digit_index = 2023 - (digit_count - len(str(i)))\n            \n            # Extract and return the 2023rd digit\n            ans = int(str(i)[digit_index - 1])\n            return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    third_number = 450 - first_number - second_number\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    total_sales = 132\n    ratio = Eq(t_shirts / caps, 8/5)\n    \n    total_tshirt_sales = 3 * (t_shirts / 4)\n    total_cap_sales = 5 * (caps / 5)\n    \n    sales_eq = Eq(total_tshirt_sales + total_cap_sales, total_sales)\n    \n    solutions = solve((ratio, sales_eq), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 99 - 11  # Subtract 11 years from 99 to estimate the birth year\n    age_on_31_12_01 = 1 + (1 - birth_year) # Calculate the age on 31/12/01 (1 year + the difference between 01 and birth year)\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    min_odd_number = float('inf')  # Initialize to infinity to find min\n    digits = [4, 6, 2, 5]\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 != 0:  # Check if the number is odd\n            min_odd_number = min(min_odd_number, number)\n            \n    return min_odd_number\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    max_per_boat = 6\n    trips = (students + max_per_boat - 1) // max_per_boat\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    nth_term = 36\n\n    ordinal_number = ((nth_term - first_term) / difference) + 1\n\n    return int(ordinal_number)\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    joe, eric = symbols('joe eric')\n    \n    # Joe has 7 times as many game cards as Eric.\n    equation1 = Eq(joe, 7 * eric)\n    \n    # If Joe gives x cards to Eric, they will both have 168 cards.\n    equation2 = Eq(joe - eric, 168)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (joe, eric))\n    \n    # Calculate how many cards Joe must give to Eric\n    joe_cards = solutions[joe]\n    cards_to_give = joe_cards - 168\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens in [2, 3, 5, 7]:\n        for ones in [2, 3, 5, 7]:\n            N = 10 * tens + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    ran_away = 5\n    additional_catch = 9\n\n    final_catch = initial_catch - ran_away + additional_catch\n\n    return final_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "网络故障，请重试"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # Since person 6 stands directly opposite to person 19, the total number of people\n    # must be twice the difference between those two numbers.\n    num_people = (19 - 6) * 2\n    return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # Select the number of apples in the first group\n        x2 = 10 - x1  # The second group will have the remaining apples\n        if x2 != x1:  # The two groups should have different number of apples\n            count += 1  # Increment the count of different ways\n    return count // 2  # Divide by 2 to account for duplicate combinations\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    num_students = 5\n    ans = factorial(num_students)\n\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let's denote the number of pears Anne has originally as 'a'\n    # and the number of pears Charlie has as 'c'. \n    # The given condition implies: a - 6 = c + 6 \n    # We also know that: a + c = total_pears\n    # Now we have a system of two equations with two unknowns.\n\n    # We will now use algebra to solve this system of equations.\n    # From the first equation, we get a = c + 12 \n    # By substituting the value of 'a' in the second equation, we get:\n    # (c + 12) + c = 38 -> 2c + 12 = 38 -> 2c = 26 -> c = 13\n    # Now we can find the number of pears Anne has: a = c + 12 = 13 + 12\n\n    charlie_pears = (total_pears - 12) // 2\n    anne_pears = charlie_pears + 12\n    \n    return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_times = amy_swims - joanne_swims\n\n    return more_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 since it's the hundreds-thousands place\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    abcd = int(f\"{a}{b}{c}{d}\")\n                    abc = int(f\"{a}{b}{c}\")\n                    ab = int(f\"{a}{b}\")\n                    if abcd + abc + ab + a == 1370:\n                        return abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial condition: Isaac had 5 times as many stamps as Joseph\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After receiving stamps, Joseph has 9/10 as many stamps as Isaac\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "from math import factorial\n\ndef count_trailing_zeros(n):\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n\ndef solution():\n    factorial_29 = factorial(29)\n    ans = count_trailing_zeros(factorial_29)\n    return ans\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N = int(\"12345654321\", 8)\n    r7 = N % 7\n    r9 = N % 9\n    return r7 + r9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let's denote the length of the path as L.\n    # Linda jogs 1200m when they meet. So Ted jogs (L - 1200)m by then.\n    # The speed ratio is given as 3:4 (Linda: Ted), so the time taken by both is the same.\n    # Distance = Speed * Time\n    # Therefore, Linda's distance / Linda's speed = Ted's distance / Ted's speed\n    # 1200 / 3 = (L - 1200) / 4\n    # Cross multiplying and solving for L\n    L = (1200 * 4) / 3 + 1200\n\n    return L\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits has to be divisible by 9.\n    # The sum of the digits in 2018 is 2 + 0 + 1 + 8 = 11.\n    # To find the possible values for A, we have to find a digit A such that (11 + A) is divisible by 9.\n    # 11 % 9 = 2, so we need a value for A such that (2 + A) % 9 == 0.\n    # The smallest such A is 7, since 2 + 7 = 9 and 9 is divisible by 9.\n\n    A = 7\n\n    # The 5-digit number we are looking for is now 20187.\n    # We need to find the remainder when 20187 is divided by 8.\n    remainder = 20187 % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Number of squirrels in front of Ryan\n    front_ryan = 5\n    # Number of squirrels behind Elvis\n    behind_elvis = 7\n    # Number of squirrels between Ryan and Elvis\n    between_re = 1\n\n    # Total number of squirrels is the sum of the squirrels in front of Ryan,\n    # behind Elvis, the one between them, and Ryan and Elvis themselves.\n    total_squirrels = front_ryan + behind_elvis + between_re + 2  # +2 for Ryan and Elvis\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    # 3 workers take 3 days to build a wall\n    # This implies that 1 worker will take 3 times the amount of days to build the same wall\n    # because the amount of work done is inversely proportional to the number of workers\n    days_for_1_worker = 3 * 3\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    total_weight = 64\n    ans = total_weight * percentage\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pupils_P, pupils_Q = symbols('pupils_P pupils_Q')\n\n    # Ratio of pupils before the admission\n    equation1 = Eq(pupils_P/pupils_Q, 2/3)\n\n    # Ratio of the pupils after the admission of 240 primary one pupils\n    # to both schools.\n    equation2 = Eq((pupils_P + 240)/(pupils_Q + 240), 3/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pupils_P, pupils_Q))\n\n    return solutions[pupils_P]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    amount = 45\n    result = (percentage / 100) * amount\n    return result\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    jack = symbols('jack')\n    equation = Eq(jack - 5, (jack + 8) / 2)\n    solution_age = solve(equation, jack)\n    return solution_age[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Percentage of money spent on the bag\n    percentage_bag = 70  # 70%\n    # The fraction of the remainder spent on the purse\n    fraction_purse = 3/8\n\n    # Percentage of money left after buying the bag\n    percentage_left = 100 - percentage_bag\n    # The money spent on the purse is the fraction of the remainder\n    percentage_purse = (percentage_left * fraction_purse)\n    # Convert to the percentage of the original amount\n    percentage_purse_of_original = (percentage_bag / 100) * percentage_purse\n\n    return percentage_purse_of_original\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    \n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n    \n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n    \n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION')  # Total number of letters in the word EDUCATION\n    vowel_count = len('EUAIO')        # Number of vowels in the word EDUCATION\n    consonant_count = total_letters - vowel_count  # Number of consonants\n\n    # Total arrangements of the letters\n    total_arrangements = factorial(total_letters)\n\n    # Arrangements where vowels are together - considered as a single unit\n    vowels_together = factorial(vowel_count) * factorial(consonant_count + 1)\n\n    # Final result: Total arrangements - Arrangements where vowels are together\n    ans = total_arrangements - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    original_students = 5\n    candies_each_original = 12\n    total_candies = original_students * candies_each_original\n    new_students = original_students + 1\n    candies_each_new = total_candies // new_students\n    return candies_each_new\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # In a triangle, the sum of angles is 180 degrees.\n    # Let m∠ABC = x, since BP bisects it, we have m∠ABP = m∠PBC = x/2.\n    # Let m∠ACB = y, since CP bisects it, we have m∠ACP = m∠PCB = y/2.\n    # m∠BAC is given as 50 degrees.\n    # So, the angles in the triangle ABC should satisfy: x + y + 50 = 180\n\n    # Solving for x and y\n    x_plus_y = 180 - 50\n    x = 180 - 50\n\n    # m∠BPC is an external angle for triangle ABP which is sum of opposite internal angles.\n    # m∠BPC = m∠ABP + m∠ACP, replacing m∠ABP with x/2 and m∠ACP with (180 - 50 - x)/2 gives us m∠BPC.\n    # Since BP and CP bisect their respective angles, m∠BPC = x/2 + y/2 = (180 - 50)/2 = 130/2 = 65 degrees.\n    \n    m_BPC = (x_plus_y)/2 \n\n    return m_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Set up the equation\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n\n    # Solve the equation and fetch the result\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11  # initial number of sweets Sharon can buy\n    wrappers = 11  # initial number of wrappers from bought sweets\n\n    while wrappers >= 3:\n       # exchange wrappers for new sweets\n       new_sweets = wrappers // 3\n       sweets_bought += new_sweets  # add new sweets to total count\n       # update the number of wrappers (used + leftovers)\n       wrappers = wrappers % 3 + new_sweets\n\n    return sweets_bought\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Calculate the number of bags Renee can get from 5kg of sweets.\n    # 1 kg = 1000 g, so 5 kg = 5000 g.\n    total_weight = 5 * 1000   # in grams\n    weight_per_bag = 250      # in grams\n    number_of_bags = total_weight / weight_per_bag\n\n    # Calculate the total sales from selling all bags\n    price_per_bag = 0.65  # in pounds\n    total_sales = number_of_bags * price_per_bag\n\n    # Calculate the cost\n    cost = 10  # in pounds\n\n    # Calculate the profit\n    profit = total_sales - cost\n\n    # Calculate the percentage profit\n    percentage_profit = (profit / cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    total = sum(range(1, 11))\n    return total\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # There are two ways to reach from Ayton to Deeton.\n    # 1. Directly from Ayton to Deeton\n    # 2. From Ayton to Beeton to Ceeton to Deeton\n    \n    # Number of direct ways from Ayton to Deeton\n    direct_ways = 3\n    \n    # Number of ways from Ayton to Beeton to Ceeton to Deeton (via intermediate towns)\n    via_ways = 4 * 5 * 6  # Multiplication Principle\n    \n    # Total number of different ways from Ayton to Deeton\n    total_ways = direct_ways + via_ways   # Addition Principle\n    \n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    from fractions import Fraction\n\n    # creating the Fraction object which will automatically reduce it\n    fraction = Fraction(15, 20)\n\n    # denominator of the reduced form of 15/20 is the answer for □\n    ans = fraction.denominator\n\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each bird type\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)        # The number of two-tailed birds\n    equation2 = Eq(three_tailed, 2 + (six_tailed / 2))      # The number of three-tailed birds\n    equation3 = Eq(2 * two_tailed + 3 * three_tailed +\n                   6 * six_tailed + 8 * eight_tailed, 4 * (two_tailed + three_tailed + \n                   six_tailed + 2 * eight_tailed) - 2)      # The total number of tails\n    equation4 = Eq(two_tailed + three_tailed + six_tailed + 2 * eight_tailed -\n                   (2 * two_tailed + 3 * three_tailed +\n                   6 * six_tailed + 8 * eight_tailed), 241) # The difference between heads and tails\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4),\n                      (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    # Return the number of three-tailed birds\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return int(twelfth_term)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n\n    sum_numbers = sum(numbers)\n\n    return sum_numbers\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n\n    # Loop through all the numbers from 1 to 2016\n    for i in range(1, 2017):\n        # Count how many times a number has been underlined.\n        # It's twice underlined if it's a multiple of exactly two of these: 2, 3, or 4.\n        times_underlined = 0\n        if i % 2 == 0:\n            times_underlined += 1\n        if i % 3 == 0:\n            times_underlined += 1\n        # A multiple of 4 is also a multiple of 2, so we ignore the green underline\n        # since it's redundant with the red one for all multiples of 4.\n        # Therefore, we don't need to count multiples of 4 separately.\n\n        # Add to count if times_underlined is exactly 2\n        if times_underlined == 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe_initial = symbols('joe_initial')\n\n    equation = Eq((3.75 - 2.5) + (joe_initial - 2.5), 5)\n\n    solution = solve(equation, joe_initial)\n\n    return solution[joe_initial]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_avg * 3\n    total_trees_last_5_days = last_5_days_avg * 5\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n    \n    magic_number_value = solve(equation, magic_number)[0]\n    \n    return magic_number_value\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "def solution():\n    from math import comb\n\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    choices = 0\n    choices += comb(salads, 2)  # Choosing 2 salads\n    choices += comb(soups, 2)   # Choosing 2 soups\n    choices += comb(vegetables, 2)  # Choosing 2 vegetables\n    choices += comb(sandwiches, 2)  # Choosing 2 sandwiches\n\n    choices += salads * soups  # 1 salad and 1 soup\n    choices += salads * vegetables  # 1 salad and 1 vegetable\n    choices += salads * sandwiches  # 1 salad and 1 sandwich\n    choices += soups * vegetables  # 1 soup and 1 vegetable\n    choices += soups * sandwiches  # 1 soup and 1 sandwich\n    choices += vegetables * sandwiches  # 1 vegetable and 1 sandwich\n\n    return choices\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            numbers = [int(digit) for digit in str(i)]\n            if sum(numbers) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n    \n    equation = Eq(first_number, 6 * second_number)\n    \n    sol = solve(equation, magic_number)\n    \n    return sol[magic_number]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Assume the side length of the square filled by boys is 'b' and by girls is 'g'.\n    # Boys occupy the outer layer and girls occupy the next, so the number of boys is b^2,\n    # while the number of girls is (b-2)^2 if there's at least one layer of girls.\n    # According to the problem, we need to find the smallest 'b' such that \n    # b^2 - (b-2)^2 = 32 (since there are 32 more boys than girls)\n    \n    b = 1  # Let's start by checking from the smallest possible square that can have a layer of girls inside.\n    while True:\n        boys = b**2\n        girls = (b - 2)**2 if b > 1 else 0  # If b equals 1, there are no girls as there's only one layer.\n        if boys - girls == 32:\n            break\n        b += 1  # Increment b to check for next possible solution\n        \n    # Once we have 'b', we know that it is the total side length including both boys and girls,\n    # so the total number of students is b^2.\n    total_students = b**2\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    plasters_per_day = 20\n    days_last = total_plasters / plasters_per_day\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    # Let x be the mass of strawberries\n    # Then x + 448g is the mass of mangoes\n    # After giving away 900g, the mass of mangoes becomes (x + 448g - 900g)\n    # It is given that after giving away, the mass of strawberries (x) is twice the mass of mangoes\n    # Therefore, x = 2 * (x + 448g - 900g)\n    # Solving the equation for x gives us the mass of strawberries at first\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x, 2 * (x + 448 - 900))\n\n    mass_strawberries = solve(equation, x)[0]\n\n    return mass_strawberries\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of lemons be 'l'\n    l = symbols('l')\n\n    # Equation based on the given information\n    equation = Eq((2/3) * (l + 12) - l, 12)\n\n    # Solve the equation to find the number of lemons\n    lemons = solve(equation, l)\n\n    return lemons[0]\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original amount of money Max had, and y be the original amount of Anthony\n    x, y = symbols('x y')\n    \n    # Equation for the scenario where Max buys the chocolates\n    equation1 = Eq((x - 12) / y, 2/5)\n    \n    # Equation for the scenario where Anthony buys the chocolates\n    equation2 = Eq(x / (y - 12), 8/13)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let's say Liz had r red stickers and b blue stickers initially, r=b\n    # After giving away 2/3 of red stickers, she's left with r/3 red stickers\n    # If she's left with 1/4 of all her stickers, that means:\n    # remaining red stickers + remaining blue stickers = 1/4 total stickers\n    # => r/3 + remaining blue stickers = 1/4 * (2r) [since r=b and total is r+b=2r]\n    # => r/3 + remaining blue stickers = r/2\n    # To find the fraction of blue stickers remaining, let's solve for the remaining blue stickers in terms of r\n    # remaining blue stickers = r/2 - r/3\n    # remaining blue stickers = (3r - 2r) / 6\n    # remaining blue stickers = r / 6\n    # This means she's left with r/6 blue stickers out of the initial b (=r) blue stickers\n    # Fraction of blue stickers remaining is (r/6)/r = 1/6\n    # Fraction of blue stickers given away is 1 - fraction remaining = 1 - 1/6 = 5/6\n\n    fraction_given_away = 5/6\n    return fraction_given_away\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial as fact\n\ndef solution():\n    # Since each kid must get at least one pen, we start by giving one pen to each kid\n    # Now we have 20 - 6 = 14 pens left to divide amongst the 6 kids\n    remaining_pens = 20 - 6\n    kids = 6\n    \n    # We can use the stars and bars combinatorial method (n+k-1 choose k-1)\n    # Here \"stars\" are the remaining pens and \"bars\" are the partitions between kids\n    # n = remaining_pens = 14, k = kids = 6\n    # Therefore, we calculate the binomial coefficient (n+k-1 choose k-1) = (14+6-1 choose 6-1)\n    ans = fact(remaining_pens + kids - 1) // (fact(kids - 1) * fact(remaining_pens))\n    \n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # We only care about the unit digit of 444, which is 4.\n    # The unit digit of powers of 4 cycles in a pattern: 4, 6, 4, 6, ...\n    # This is because: 4^1 = 4, 4^2 = 16, 4^3 = 64, 4^4 = 256, and then it repeats.\n\n    # Now we need to find the position in the cycle for 4^2022.\n    # There are 2 numbers in the cycle, so we will find the remainder when 2022 is divided by 2.\n    \n    cycle_position = 2022 % 2\n    \n    # If the remainder is 0, the unit digit is 6, as it is the second number in the cycle.\n    # If the remainder is 1, the unit digit is 4, as it is the first number in the cycle.\n\n    # Since cycle_position will be either 0 or 1, we can use a simple if-else to determine the unit digit.\n    if cycle_position == 0:\n        unit_digit = 6\n    else:\n        unit_digit = 4\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Sort piles minimally to maximize the amount in the largest pile\n    for largest in range(16, 0, -1):\n        for second_largest in range(largest-1, 0, -1):\n            for third_largest in range(second_largest-1, 0, -1):\n                for smallest in range(third_largest-1, 0, -1):\n                    if largest + second_largest + third_largest + smallest == 16:\n                        return largest\n    return None\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Conversion factors\n    mm_to_cm = 0.1\n    cm_to_m = 0.01\n    m_to_km = 0.001\n\n    # Lengths in meters for comparison\n    lengths_m = [\n        10 * mm_to_cm * cm_to_m,  # 10 millimetres in meters\n        100 * cm_to_m,            # 100 centimetres in meters\n        10,                       # 10 meters\n        2 / m_to_km,              # 2 kilometres in meters\n        2800 * cm_to_m,           # 2800 centimetres in meters\n        2500,                     # 2500 meters\n        100 * mm_to_cm * cm_to_m, # 100 millimetres in meters\n        100                       # 100 meters\n    ]\n\n    # Find the smallest length\n    min_length_m = min(lengths_m)\n    # Return the index which corresponds to the smallest length in meters\n    ans = lengths_m.index(min_length_m) + 1  # Adding 1 because the index starts from 0\n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_pages = (num_terms * (first_term + last_term)) // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    return smallest_6_digit_number - largest_5_digit_number\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for p in permutations([1, 2, 3, 4, 5, 6], 3):\n        if p[2] % 2 != 0:  # The last digit must be odd for the number to be odd.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim = 20\n    basketball = 25\n    both = 10\n    neither = 9\n\n    total_students = (swim + basketball - both) + neither\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, (2/3) * B)\n    equation2 = Eq(B, (4/5) * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of bookmarks Mr. Wong has\n    bookmarks = symbols('bookmarks')\n    \n    # Define the variable for the number of pupils\n    pupils = symbols('pupils')\n\n    # Equation for giving out 4 bookmarks per pupil and having 8 left\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n\n    # Equation for giving out 6 bookmarks per pupil and being 10 short\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    # Return the number of bookmarks Mr. Wong has\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    for ducks in range(total_animals + 1):\n        cows = total_animals - ducks\n        if ducks * 2 + cows * 4 == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    girls, boys = 11, 5\n    total_children = girls + boys\n    avg_height_children = 122.5\n\n    total_height = total_children * avg_height_children\n\n    # Let the average height of the boys be x\n    # Then the average height of the girls will be x + 3.2\n    # girls * (x + 3.2) + boys * x = total_height\n    x = symbols('x')\n    equation = Eq(girls * (x + 3.2) + boys * x, total_height)\n\n    avg_height_boys = solve(equation, x)[0]\n    avg_height_girls = avg_height_boys + 3.2\n    \n    return avg_height_girls\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Number of ways to divide the plane with n triangles follows the recursive formula:\n    # P(n) = P(n - 1) + n\n    # where P(0) = 1 (a blank plane has one region)\n    \n    # Initial number of parts (a blank plane)\n    parts = 1\n    \n    # Using inductive recursion to compute the total parts after each triangle addition\n    for n in range(1, 6):\n        parts += n\n    \n    return parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n\n    girls = symbols('girls')\n\n    equation = Eq(girls * girls_average + (total_students - girls) * boys_average, total_students * total_average)\n\n    number_of_girls = solve(equation, girls)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since the numbers are consecutive odd numbers, they form an arithmetic sequence with a common difference of 2.\n    # Let the first term of the sequence be 'a' and the common difference be 'd'.\n    # The sum of an arithmetic sequence can be found using the formula: S = n/2 * (2a + (n-1)d),\n    # where S is the sum of the sequence, n is the number of terms, a is the first term, and d is the common difference.\n    # For this problem, we have S = 1503, n = 9 (given), and d = 2 (since they are consecutive odd numbers).\n    # We need to find 'a', so we rewrite the formula to solve for 'a':\n    # 1503 = 9/2 * (2a + (9-1)*2)\n    # 1503 = 9/2 * (2a + 16)\n    # 1503 * 2 = 9 * (2a + 16)\n    # 3006 = 18a + 144\n    # 3006 - 144 = 18a\n    # 2862 = 18a\n    # a = 2862 / 18\n\n    a = 2862 // 18  # Using integer division since 'a' has to be an integer (odd number)\n\n    return a\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # We are given that it's a linear sequence\n    n1, a_n1 = 32, 157  # The 32nd term is 157\n    n2, a_n2 = 108, 537  # The 108th term is 537\n\n    # Calculate the common difference d\n    d = (a_n2 - a_n1) / (n2 - n1)\n    \n    # Use the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # We can rearrange to find the first term a_1\n    a_1 = a_n1 - (n1 - 1) * d\n\n    return int(a_1)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of candies Kate received from Jane\n    x = symbols('x')\n \n    # Kate ate 1/4 of x and thus (3/4)x candies were left\n    # (3/4)x = 42\n    equation = Eq(3/4 * x, 42)\n    \n    # Solve the equation to find the number of candies Kate received\n    candies_kate_received = solve(equation, x)[0]\n\n    # Jane then ate 1/3 of the candies she had and gave (2/3)y - 4 to Kate\n    y = symbols('y')\n    equation_for_jane = Eq(2/3 * y - 4, candies_kate_received)\n    candies_jane_received = solve(equation_for_jane, y)[0]\n    \n    # Finally, Donna kept half of what she had plus 3 and gave the rest to Jane\n    d = symbols('d')\n    equation_for_donna = Eq(1/2 * d + 3, candies_jane_received)\n    initial_candies = solve(equation_for_donna, d)[0]\n    \n    return initial_candies\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 individuals to whom A can pass the ball initially.\n    first_pass_options = 3\n    # After the first pass, the passer cannot receive the ball back immediately.\n    # So there are only 2 options for the second pass.\n    second_pass_options = 2\n    # For the third pass, the ball must be passed back to A;\n    # hence, there is only 1 option.\n    third_pass_options = 1\n\n    # The number of different methods is the product of the options for each pass.\n    num_methods = first_pass_options * second_pass_options * third_pass_options\n    return num_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # After Jason gives Anthea 4 storybooks, they have the same number.\n    # Let's denote Anthea's original number of storybooks as 'anthea_books'.\n    # Therefore, we can set up the equation:\n    # Jason's remaining books = Jason's original books - 4 (books he gives to Anthea)\n    # Anthea's new books = Anthea's original books + 4 (books she receives from Jason)\n    # And since both are now equal:\n    # Jason's remaining books = Anthea's new books\n    # Hence:\n    # 30 - 4 = anthea_books + 4\n    # Solving for anthea_books:\n    anthea_books = (30 - 4) - 4\n\n    # The difference in the number of storybooks between Jason and Anthea at first\n    # is simply Jason's original books - Anthea's original books:\n    difference = 30 - anthea_books\n\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    return (36 * 21) // (6 * 7)\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        if q != 0 and (10*q + p) == 2*(p*10 + q):\n            return 10*q + p\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    position = 1\n    while True:\n        if position % 4 == 0 and position % 10 == 0:\n            break\n        position += 1\n    return position\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_sec = 2\n    time_seconds = 12 * 60  # converting minutes to seconds\n\n    distance = speed_m_per_sec * time_seconds\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    part1 = 2020 // common_factor_1 * common_factor_1\n    part2 = 68 // common_factor_2 * common_factor_2\n\n    ans = (part1 * part2 + 505 * 128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = total_sugar / total_solution * 100\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, 2 * B)\n    equation2 = Eq(1/A + 1/B, 1/12)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    A_days = 12\n    B_days = A_days + 12\n    \n    combined_rate = 1/A_days + 1/B_days\n    ans = 1 / combined_rate\n\n    return ans\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')  # Total number of boys at the start\n\n    # After leaving boys = boys - (3/5)*boys = (2/5)*boys\n    # After 42 girls left and there are 12 more boys than girls\n    # So, (2/5)*boys - (boys - 12) = 42\n\n    equation = Eq((2/5)*boys - (boys - 12), 42)\n\n    # Solve the equation to find the number of boys\n    number_of_boys = solve(equation, boys)[0]\n\n    # Total students at the exhibition initially (since boys = girls)\n    total_students = 2 * number_of_boys\n\n    return int(total_students)\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time_hours = 12 / 60\n    early_time_hours = -4 / 60\n\n    # Let the distance be d km\n    # At 3 km/h, his time to travel d km is d/3 hours; he is late by 12 min (0.2 hours), \n    # so the normal time to travel should be d/3 - 0.2 hours\n    # At 5 km/h, his time to travel d km is d/5 hours; he is early by 4 min (1/15 hours), \n    # so the normal time to travel should be d/5 + 1/15 hours\n    \n    # Since both expressions represent the normal time, they are equal\n    # d/3 - 0.2 = d/5 + 1/15\n\n    # Solve for d\n    # d/3 - d/5 = 0.2 + 1/15\n    # (5d - 3d) / 15 = 0.2 + 1/15\n    # 2d / 15 = 3/15 + 1/15\n    # 2d / 15 = 4/15\n    # 2d = 4\n    # d = 4 / 2\n    # d = 2 km\n    \n    distance = 2  # distance in km\n    return distance\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n\n    digits = '123'\n    all_permutations = set()\n\n    # Generate permutations for all possible lengths of given digits\n    for length in range(1, len(digits) + 1):\n        all_permutations.update(permutations(digits, length))\n\n    # Convert the tuple permutations into integer numbers\n    all_numbers = {int(''.join(permutation)) for permutation in all_permutations}\n    \n    ans = len(all_numbers)\n\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + (3 * baskets_of_tomatoes)\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of candies Rachel originally has\n    # Let a represent the number of candies Alice originally has\n    r, a = symbols('r a')\n\n    # Equation 1: Rachel gives Alice 10 pieces of candy\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: Alice gives Rachel 10 pieces of candy\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations for r and a\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate total pieces of candy originally\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Ratio before new children joined\n    original_ratio = Eq(boys/girls, 3/2)\n    \n    # Ratio after new children joined\n    new_ratio = Eq((boys + 12)/(girls + 12), 19/14)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n    \n    # Calculate total number of children in the afternoon\n    total_children = solutions[boys] + solutions[girls] + 12 + 12\n    \n    return int(total_children)\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temp_last_night = -8\n    temp_today = 13\n    difference = temp_today - temp_last_night\n    return difference\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks\n    different_socks = factorial(4)  # 4!\n\n    # For two different colored pairs of socks\n    # Each pair is indistinguishable, so we divide by 2! for each pair which gives us 4! / (2! * 2!)\n    same_socks = factorial(4) // (factorial(2) * factorial(2))\n\n    return different_socks, same_socks\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "import math\n\ndef solution():\n    g_earth = 9.8  # acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon in m/s^2\n    T_earth = 1  # period of the pendulum on Earth in seconds\n\n    # Using the formula T = 2π * sqrt(L / g)\n    # T_moon / T_earth = sqrt(g_earth / g_moon)\n    ratio = math.sqrt(g_earth / g_moon)\n    T_moon = T_earth * ratio\n\n    return T_moon\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar1 = 23\n    length_iron_bar2 = 37\n    length_welded_part = 3\n\n    total_length = length_iron_bar1 + length_iron_bar2 - length_welded_part\n\n    return total_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 4\n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = justin_correct * 6 - (10 - justin_correct) * 2\n        if justin_points == william_points + 24 and justin_points + william_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime(2023, 3, 1)\n    end_date = datetime(2023, 4, 15)\n    \n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    \n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # In this puzzle, we assume that each letter (D, O, N, A, L, and G) represents a unique digit.\n    # Since G + D gives A in the ones place, and there's no carry from the previous addition,\n    # A must equal G if D is 0, or A must equal G + 1 if D is 1\n    # Since we want to find A's value, and because G appears in the thousands place, G must be 1\n    # (as no carry is possible in the initial placement). Therefore, A is 0 + 1.\n    \n    A = 1\n    return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    A_work_per_day = 1 / 15\n    B_work_per_day = 1 / 10\n\n    work_done_in_3_days = 3 * (A_work_per_day + B_work_per_day)\n    remaining_work = 1 - work_done_in_3_days\n\n    days_for_B_to_finish = remaining_work / B_work_per_day\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Let n be the number of layers from the outside\n    # to the center of the square.\n    # Since the square has 400 tiles and is therefore made up of\n    # a 20x20 grid (because 20 * 20 = 400), there will be\n    # n = 20 / 2 = 10 layers.\n\n    n = 20 // 2\n\n    red_tiles = 0\n    green_tiles = 0\n\n    # Iterate over the layers, starting from the outermost\n    for layer in range(1, n+1):\n        # The number of tiles in the current layer is the perimeter of the\n        # square minus the corners (which have already been counted in\n        # the previous layer), so it's (side_length*4) - 4\n        side_length = 20 - (layer-1)*2\n        tiles_in_layer = (side_length * 4) - 4\n\n        # Add to the respective color count based on whether the layer is odd or even\n        if layer % 2 == 1:  # Odd layers are red\n            red_tiles += tiles_in_layer\n        else:  # Even layers are green\n            green_tiles += tiles_in_layer\n\n    # The center tile's color depends on whether n is odd or even\n    # If n is odd, the center is red since we start with red\n    center_color = 'red' if n % 2 == 1 else 'green'\n\n    if center_color == 'red':\n        red_tiles += 1\n    else:\n        green_tiles += 1\n\n    # Determine the dominant color and the difference\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return dominant_color, difference\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Since there are 100 people standing in a square array\n    # it means we have sqrt(100) people on each side because a square array has equal number of people on each side\n    side_people = int(100 ** 0.5)\n    \n    # The outermost layer would consist of the people on the outer edges less the 4 corners as they are counted twice\n    outermost_layer_people = 4 * side_people - 4\n\n    return outermost_layer_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The difference between the second and the first term\n    term = first_term\n    count = 0\n\n    while term > 0:\n        term += common_difference\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The winning strategy for Tom is to always leave a total number\n    # of cards that is a multiple of the divisor after Jane's turn.\n    \n    # Since Pile A has 88 cards and Pile B has 52 cards,\n    # we need to calculate the difference between the two piles.\n    difference = 88 - 52\n    \n    # Tom should first equalize the two piles in his first move.\n    # Therefore, he should take difference number of cards from Pile A.\n    \n    # Then, whatever move Jane makes, Tom should make a move that keeps\n    # the piles equal after his turn.\n    # For example, if Jane takes x cards from one pile, Tom should take\n    # x cards from the other pile.\n    \n    # By doing this, Tom will always leave a multiple of a divisor after Jane's turn\n    # and he will take the last card.\n    \n    # The number of cards Tom should take from Pile A initially is the \n    # difference between the two piles to ensure that they are equal.\n    return difference\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had.\n    # After giving 3/7 of his cash to his sister, he is left with 4/7 of it.\n    # Then he gives 1/8 of the remaining amount to his mum. He is left with (1 - 1/8) = 7/8 of this amount.\n    # Finally he is left with $280.\n\n    # Representing the above in a mathematical equation:\n    # (4/7)x * (7/8) = 280\n    # Simplifying the left hand side we get (4/8)x = 280\n    # Further simplification gives us 1/2x = 280\n    # Thus x = 2 * 280\n\n    x = 2 * 280  # Calculating the initial amount.\n    return x  # Returning the result.\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    loafs_needed = 24\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Minimum number of apples one student can get is 3\n    min_apples_per_student = 3\n    \n    # Using the Pigeonhole Principle, we divide the total apples by the minimum apples per student, \n    # and round up to ensure each student gets at least one apple.\n    # Adding one because at least one student must get at least 3 apples\n    class_size = (80 // min_apples_per_student) + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the common ratio for red:white be x\n    # So red balls = x, white balls = 2x\n    # Also let the common ratio for white:black be y\n    # So white balls = 3y, black balls = 4y\n    # Since both represent white balls, 2x = 3y\n    # We now have two equations:\n    # x + 2x + 3y + 4y = 34 and 2x = 3y\n\n    # Solving the equations to find the value of x\n    # 3x + 7y = 34 and y = 2/3 x\n    # Replacing y in the first equation, we get:\n    # 3x + 7*(2/3)*x = 34\n    # 3x + (14/3)*x = 34\n    # (9/3)x + (14/3)x = 34\n    # (23/3)x = 34\n    # Multiply both sides by 3 and divide by 23, we get x\n    x = (34 * 3) / 23\n    \n    # The number of red balls is x\n    red_balls = x\n    return int(red_balls)\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    num_people = 8\n    amount_per_person = total_amount / num_people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since the factorial of any number greater than 9 ends with a zero,\n    # the last digit of 2014! would be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    ans = (4 / 50) * 100\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5**2\n    hole_area = 1**2\n    filled_area = base_area - hole_area\n    height = 480 / filled_area\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 11):\n        total_sum += i * (2 * i - 1)\n    return total_sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    exchange_rate = pen_cost // pencil_cost\n\n    return exchange_rate\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 == 1 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Let the original number of yellow beads be 3x and green beads be 2x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Original number of yellow beads = 3x\n    # Original number of green beads = 2x\n    # After buying more beads:\n    # Number of yellow beads = 3x + 5\n    # Number of green beads = 2x + 20\n    # New ratio (green : yellow) = 3 : 2\n    # (2x + 20) / (3x + 5) = 3 / 2\n\n    equation = Eq((2 * x + 20) / (3 * x + 5), 3 / 2)\n    # Solve for x value\n    solution_x = solve(equation, x)\n    # Total number of beads at first = original yellow + original green\n    total_beads = 3 * solution_x[0] + 2 * solution_x[0]\n    \n    return total_beads\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    # Marbles given to brother\n    brother = 26\n    # Marbles given to each sister\n    sister_each = 13\n    # Total marbles given to sisters\n    sisters = sister_each * 2\n    # Marbles left with Henry\n    left = 16\n\n    # Total marbles Henry had at first\n    total = brother + sisters + left\n\n    return total\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # 11, 22, 33, ..., 99\n    # Three-digit palindromic numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # 101, 111, ..., 191, 202, ..., 999\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * n - 1) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    # Calculate total distance they covered when they meet\n    total_distance_covered = (amy_speed + christen_speed) * meeting_time\n\n    # Time taken for Christen to reach Amy's starting point = Total Distance / Christen's Speed\n    time_for_christen_to_reach_amy = total_distance_covered / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n\n    for p in permutations(digits, 4):\n        # p is a tuple like ('1', '0', '3', '6')\n        if p[-1] in ['0', '6', '8']:  # Check if the number is even\n            # Check to avoid the number starting with '0'\n            if p[0] != '0':\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    total_marks = 110\n\n    # Let x be the number of correct answers\n    # Then, 50 - x will be the number of wrong answers\n\n    # The total marks will be 4x (for correct answers) minus (50 - x) (for wrong answers)\n    # We set up the equation: 4x - (50 - x) = total_marks\n    # Simplified: 4x - 50 + x = total_marks\n    # 5x - 50 = total_marks\n    # 5x = total_marks + 50\n    # x = (total_marks + 50) / 5\n\n    correct_answers = (total_marks + 50) / 5\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # lemon_cakes to chocolate_cakes = 4:5\n    lemon_cakes = (4 / (4 + 5)) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # Initialize the count\n    count = 0\n\n    # Loop over the possible hundreds digits (1-9)\n    for hundreds in range(1, 10):\n        # Loop over the possible tens and ones digits (0-9)\n        for digit in range(0, 10):\n            # Skip if the tens and ones digit are the same as the hundreds digit\n            if digit == hundreds:\n                continue\n\n            # Case 1: hundreds digit is different and the tens and ones digits are the same\n            count += 1  # (hundreds)(digit)(digit)\n            \n            # Case 2: hundreds digit is different, tens and ones digits are different from \n            # each other and from hundreds digit, in two positions - tens or ones place\n            count += 2  # (hundreds)(digit)(other), (hundreds)(other)(digit) where other != digit\n\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume lily_books is the number of books Lily has\n    # and judy_books is the number of books Judy has.\n    lily_books, judy_books = symbols('lily_books judy_books')\n\n    # After Lily gives x number of books to Judy, they will have the same amount:\n    # lily_books - x = judy_books + x\n    # Since we are interested in the difference, and not the actual number of books:\n    # lily_books - judy_books = x + x\n    equation = Eq(lily_books - judy_books, 2 * (lily_books - (lily_books + judy_books) / 2))\n\n    # The solution of this equation will give us the difference between the number of books Lily has more than Judy.\n    difference = solve(equation, lily_books - judy_books)\n\n    return difference[0]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 3 people: Cici, Lily, and April.\n    # Starting with Lily, she has two options to pass to: Cici or April.\n    # Whoever receives the ball, has only one option to pass to since they cannot pass back to Lily (which would make it only one pass).\n    # Therefore, there are 2 different pass ways: Lily -> Cici -> April and Lily -> April -> Cici.\n    return 2\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_first_four_assignments = 89 * 4\n    fifth_assignment_score = 94\n    total_five_assignments = total_first_four_assignments + fifth_assignment_score\n    average_five_assignments = total_five_assignments / 5\n    return average_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n\n    total_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = total_wibbles * wibble_arms\n    total_wobble_arms = total_arms - total_wibble_arms\n    total_wobbles = total_wobble_arms // wobble_arms\n\n    return total_wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import primerange\n\n    # Generating a list of prime numbers that could be possible candidates for a and b\n    # We use 179 because it's the max value given by the equation, and a prime can't be bigger than this in our equation\n    primes = list(primerange(2, 180))\n\n    # Try every possible combination of a and b in the range of prime numbers to satisfy the equation\n    for a in primes:\n        for b in primes:\n            if 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k == 15) and (j == 2 * i) and (i == k + 1):\n                    return 100 * i + 10 * j + k\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10  # km/h\n    distance_ahead = 10  # km\n    \n    # Convert Maverick's catch-up time to hours (24 min = 24/60 hours)\n    maverick_time_hours = 24 / 60\n    \n    # The distance covered by Maverick when he catches up to Kelvin\n    maverick_distance = maverick_speed * maverick_time_hours\n    \n    # The distance covered by Kelvin when Maverick catches up to him\n    kelvin_distance = kelvin_speed * maverick_time_hours\n    \n    # The difference should be equal to the initial distance ahead (10 km)\n    # If it's true, Maverick is correct; if not, Kelvin is correct\n    catch_up_time_correct = maverick_distance - kelvin_distance == distance_ahead\n    \n    if catch_up_time_correct:\n        # Maverick is correct\n        return 24  # minutes\n    else:\n        # Kelvin is correct; we need to calculate the correct catch-up time\n        # The catch-up time can be found by dividing the distance ahead by the\n        # difference in speeds (since that's the rate at which Maverick is catching up)\n        correct_catch_up_time_hours = distance_ahead / (maverick_speed - kelvin_speed)\n        # Convert the catch-up time to minutes\n        correct_catch_up_time_minutes = correct_catch_up_time_hours * 60\n        return correct_catch_up_time_minutes\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # The custom operation can be rewritten as \n    # a # b = a + b - (ab/910) = (910a + 910b - ab)/910 = (a(910 - b) + 910b)/910\n    # Notice that if we apply the operation with b=910 it simplifies nicely:\n    # a # 910 = (910a + 910^2 - 910a)/910 = 910\n    # This means that if we encounter \"x # 910\" in our chain, everything before it\n    # does not matter as it results in 910.\n    # Hence, from the given sequence 2016 # 2015 # ... # 3 # 2 # 1,\n    # everything before 910 (inclusive) would give us 910.\n    # Given 2016 # 2015 # ... # 912 # 911 # 910 = 910, \n    # the sequence simplifies to 910 # 909 # ... # 3 # 2 # 1.\n\n    # To simplify further, we look for another pair that simplifies to 910\n    # By trying a few numbers manually, one can notice that 909 # 1 = 910, as (909 + 1 - 909*1/910) = 910.\n    # Therefore, we can apply this pattern again, and since there's a symmetry of numbers decreasing from 910 and increasing from 1,\n    # we can pair them up: (910 # 909), (908 # 3), (907 # 4), ..., finally, (906 # 5), (907 # 4), (908 # 3), (909 # 2 # 1) = (909 # 2) # 1 = 910 # 1\n\n    # The above pattern always results in 910, no matter how many times the operation is performed.\n    # Finally, we are left with the simplified sequence 910, which is the answer.\n    \n    ans = 910\n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "from math import comb\n\ndef solution():\n    # Since each child gets at least one eraser, we start by giving one eraser to each child.\n    # Now we have 6 - 3 = 3 erasers left to distribute.\n    remaining_erasers = 3\n    children = 3\n\n    # The problem is equivalent to placing 2 dividers among the remaining erasers to partition them into 3 parts (for the 3 children).\n    # Number of partitions is the same as choosing 2 positions out of `remaining_erasers + children - 1` for the dividers.\n    partitions = comb(remaining_erasers + children - 1, children - 1)\n    \n    return partitions\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    score_correct = 5\n    score_wrong = -2\n    total_score = 23\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * score_correct + wrong * score_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Distance covered by plum trees\n    total_distance_plum = (41 - 1) * 4  # One less interval than the number of trees\n\n    # Since pine trees are also planted at opposite ends, the total distance will be the same.\n    # Now we must calculate the number of pine trees which is one more than the number of intervals\n    num_pine_trees = (total_distance_plum // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    original_people = 10\n    original_hours = 9\n    target_hours = 3\n\n    # Work is unchanged, so Work = People * Time\n    # original_people * original_hours = required_people * target_hours\n    required_people = (original_people * original_hours) // target_hours\n\n    return required_people\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total = week1 + week2 + week3\n    return total\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (2/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    start = 5\n    total_sum = (n * (n + 1) * (2 * n + 1)) // 6\n    exclude_sum = (start - 1) * start * (2 * (start - 1) + 1) // 6\n    sum_squares = total_sum - exclude_sum\n    return sum_squares\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the two men\n    young, old = symbols('young old')\n\n    # Create equations based on the given information\n    # Let's assume 'x' is the number of years ago when the older man was the age of the younger man now\n    # Then, 'x' years ago, the younger man was 4 years old\n    equation1 = Eq(old - young, young - 4)\n\n    # Let 'y' be the number of years it will take for the younger man to reach the current age of the older man\n    # At that time, the older man will be the age of the younger man plus 'y'\n    equation2 = Eq(old + y, young + y + 61)\n\n    # Now we use these two equations to solve for the current ages of the two men\n    solutions = solve((equation1, equation2), (young, old))\n\n    # There could be multiple solutions, filter for the one where the younger age is less than the older age\n    solution = [sol for sol in solutions if sol[0] < sol[1]][0]\n\n    return solution[0]\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Number of desks in front of Jessica's\n    desks_in_front_of_jessica = 5\n    \n    # Jessica's desk\n    jessica_desk = 1\n    \n    # Judy's desk\n    judy_desk = 1\n    \n    # Number of desks behind Judy's\n    desks_behind_judy = 7\n    \n    # Total number of desks in the column\n    total_desks = desks_in_front_of_jessica + jessica_desk + judy_desk + desks_behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let's denote the initial amount of money as 'initial_money'.\n    # According to the problem:\n    # (2/5) * (2/3) * initial_money = 120\n    # From this, we can find 'initial_money'.\n\n    fraction_spent_on_bag = (2/5) * (2/3)\n    initial_money = 120 / fraction_spent_on_bag\n\n    return initial_money\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    difference = -11  # Since he subtracts 11 each time.\n\n    # n: the term number when the value becomes negative\n    n = 0\n    while initial_value - n * difference >= 0:\n        n += 1\n\n    # The first negative number in the sequence\n    first_negative = initial_value - n * difference\n\n    return first_negative\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    num1 = 0.11\n    midpoint = 0.126\n    difference = midpoint - num1\n    num2 = midpoint + difference\n\n    return num2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    unit_rate = 7 / 12\n    toffees = chocolates * unit_rate\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in [i for i in range(1, number+1) if number % i == 0]:\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mangoes_cost_per_case = 56\n    mangoes_cases = 24\n    lychees_cases = 19\n\n    lychees_cost_per_case = (total_cost - (mangoes_cost_per_case * mangoes_cases)) / lychees_cases\n\n    return lychees_cost_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    unique_totals = set()\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                total = coin1 + coin2 + coin3\n                unique_totals.add(total)\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        A, B, C = p\n        num1 = int('6{}2'.format(A))\n        num2 = int('{}4'.format(B))\n        num3 = int('{}85'.format(C))\n        if num1 * num2 == num3:\n            return sum(map(int, p))\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    # Convert percentage to decimal\n    percent_decimal = 65 / 100\n\n    # Given decimal\n    given_decimal = 0.507\n\n    # Convert fraction to decimal\n    fraction_decimal = 1 / 4\n\n    # Add them together\n    ans = percent_decimal + given_decimal + fraction_decimal\n\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 1, 2, 2]\n    three_digit_numbers = set()\n\n    for perm in permutations(cards, 3):\n        if perm[0] != 0:  # Exclude numbers starting with 0\n            three_digit_numbers.add(perm)\n    \n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(0, 10):\n        for Q in range(0, 10):\n            for R in range(0, 10):\n                # Multiplying the three digit number by P, Q, and R separately\n                product1 = P * 100 + P * 10 + P\n                product2 = Q * 100 + Q * 10 + Q\n                product3 = R * 100 + R * 10 + R\n                \n                # Adding up the three products and a given four digit number 2222\n                total = product1 + product2 + product3 + 2222\n                \n                # Check if total is a five digit number with all digits the same\n                total_str = str(total)\n                if len(total_str) == 5 and total_str.count(total_str[0]) == 5:\n                    return P + Q + R\n                    \nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid £10, and y be the number who paid £15.\n    # We have two equations based on the problem:\n    # x + y = 50 (total number of children)\n    # 10*x + 15*y = 555 (total amount paid)\n    # We can solve this system of equations for y\n\n    total_children = 50\n    total_amount_paid = 555\n    shirt_cost_without_name = 10\n    shirt_cost_with_name = 15\n\n    # Using the total number of children, we can express x in terms of y\n    # x = total_children - y\n\n    # Now replace x in the second equation and solve for y\n    # shirt_cost_without_name*(total_children - y) + shirt_cost_with_name*y = total_amount_paid\n    # Simplify and solve for y\n    y = (total_amount_paid - shirt_cost_without_name*total_children) / (shirt_cost_with_name - shirt_cost_without_name)\n\n    return int(y)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs from 7:30 am to 8:30 am for 1 hour\n    jogging_time = 1  # 1 hour\n    jogging_speed = 5  # 5 miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Susan walks from 8:30 am to 10:30 am for 2 hours\n    walking_time = 2  # 2 hours\n    walking_speed = 3  # 3 miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance is sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Since the numbers are consecutive, let the smallest number be x.\n    # Therefore, the numbers are x, x+1, x+2, x+3, x+4\n    # Their sum can be represented by:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 100\n\n    # Simplifying the sum gives us 5x + 10 = 100\n    # Solving for x we subtract 10 from both sides and then divide by 5.\n    x = (100 - 10) / 5\n\n    return x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(44000)\n    q = 1\n    for prime, exponent in factors.items():\n        if exponent % 3 != 0:  # If the exponent is not a multiple of 3\n            q *= prime ** (3 - (exponent % 3))  # Make it a multiple of 3\n\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_10_boxes = 3 * 10\n    oranges_in_5_boxes = 7 * 5\n\n    leftover_oranges = total_oranges - (oranges_in_10_boxes + oranges_in_5_boxes)\n\n    return leftover_oranges\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # To ensure at least 3 cards have the same number,\n    # we can draw the worst-case scenario:\n    # 2 cards of each number, that's 2 cards * 13 numbers = 26 cards.\n    # Then we draw one more card, which guarantees that\n    # at least 3 cards will have the same number.\n    max_diff_cards = 2 * 13\n    one_more_card = 1\n    ans = max_diff_cards + one_more_card\n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_distance = 800  # total distance of the road in meters\n    trees = 21  # total number of trees to be planted\n\n    # Number of intervals will be one less than the number of trees\n    num_intervals = trees - 1\n    \n    # Distance between each tree\n    distance_between_trees = total_distance / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy has 149 notebooks\n    andy_notebooks = 149\n    # After giving away 38 notebooks, Andy and his sister would have the same number\n    # Let's call the number of notebooks Andy's sister has initially as sister_notebooks\n    # After the transaction: andy_notebooks - 38 = sister_notebooks + 38\n\n    # Solving for sister_notebooks\n    sister_notebooks = andy_notebooks - 2 * 38\n    return sister_notebooks\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_intervals = 9 + 1  # 9 trees create 10 intervals\n    distance_between_trees = total_distance / number_of_intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    # Initialize the counter for prime numbers\n    primes_count = 0\n    \n    original_number = '200'\n\n    # Check for all possible digits (0-9) and all possible positions except the last one (hundreds, tens)\n    for i in range(len(original_number)-1):\n        for digit in '0123456789':\n            if original_number[i] != digit: # Ensure we are creating a different number\n                new_number = int(original_number[:i] + digit + original_number[i+1:])\n                if isprime(new_number):\n                    primes_count += 1\n                    \n    # Check the last position (ones), avoiding even numbers and five\n    for digit in '1379':\n        new_number = int(original_number[:-1] + digit)\n        if isprime(new_number):\n            primes_count += 1\n\n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards within each suit\n    spades = ['A', 'J', 'K']\n    hearts = ['3', '5', 'K']\n    diamonds = ['2', '7', 'J']\n    clubs = ['A', '7']\n\n    # Convert to a single list of cards\n    all_cards = [('spades', card) for card in spades] \\\n              + [('hearts', card) for card in hearts] \\\n              + [('diamonds', card) for card in diamonds] \\\n              + [('clubs', card) for card in clubs]\n\n    possible_cards_after_eddie = [\n        card for card in all_cards \n        if sum(1 for c in all_cards if c[0] == card[0]) > 1\n    ]\n\n    possible_cards_after_avril = [\n        card for card in possible_cards_after_eddie \n        if sum(1 for c in possible_cards_after_eddie if c[1] == card[1]) == 1\n    ]\n\n    # There should be only one card left after Eddie's statement\n    final_card = possible_cards_after_avril[0]\n\n    return final_card[1] if final_card[0] == 'spades' else None\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    num_values = 5\n\n    sum_of_values = mean_value * num_values\n    sum_of_known_values = 3 + 4 + 6 + 10\n\n    fifth_number = sum_of_values - sum_of_known_values\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    total_people = people_in_front_of_emily + danny_position_from_back + 1  # +1 is Emily herself\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # She cuts the wood into 4 sections in 12 minutes.\n    # That means she makes 3 cuts (since 4 sections result from 3 cuts).\n    # If she needs to cut the wood 5 times, she will create 6 sections.\n    minutes_per_cut = 12 / 3\n    total_minutes = minutes_per_cut * 5\n    return total_minutes\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_to_deadline, total_pages = symbols('days_to_deadline total_pages')\n\n    equation1 = Eq(total_pages, 30 * (days_to_deadline + 2))\n    equation2 = Eq(total_pages, 39 * (days_to_deadline - 4))\n\n    solutions = solve((equation1, equation2), (days_to_deadline, total_pages))\n\n    return solutions[days_to_deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    total_count = 30\n    count = 0\n    page = 0\n    while count < total_count:\n        page += 1\n        count += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2*x - 3), 5 - (x - 2))\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    ans = (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    total_workers = 2\n    \n    days = (total_rooms / (rooms_per_day_per_worker * total_workers))\n    \n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one apple as \"a\" and the cost of one orange as \"o\".\n    a, o = symbols('a o')\n\n    # We create two equations based on the given information.\n    equation1 = Eq(1*a + 2*o, 48)\n    equation2 = Eq(1*a + 1*o, 31)\n\n    # We then solve these equations for \"a\" and \"o\".\n    solutions = solve((equation1, equation2), (a, o))\n\n    # The solution for \"o\" (the cost of one orange) is what we want to find.\n    orange_cost = solutions[o]\n\n    return orange_cost\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the price of one tennis ball and 'p' be the pocket money.\n    x, p = symbols('x p')\n\n    # First week equation: 4x + 27 = p\n    # Since there are 100 pennies in a pound, we convert 27p to 0.27 pound.\n    eq1 = Eq(4*x + 0.27, p)\n\n    # Second week equation: 2x + 1.51 = p\n    eq2 = Eq(2*x + 1.51, p)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (x, p))\n\n    # Answer is the amount of weekly pocket money 'p'.\n    return solutions[p]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3 / 8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, will, tom = symbols('jason will tom')\n    \n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n    \n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    \n    # Original number of stickers\n    equation1 = Eq(elias, 5 * aileen)\n    \n    # After giving away and losing stickers\n    equation2 = Eq(elias - 88, aileen - 8)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n    \n    return (elias_final, aileen_final)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n    total_steps = steps_per_staircase * number_of_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    in_front_of_louis = total_people - behind_louis - 1 # Subtract 1 for Louis himself\n    return in_front_of_louis\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_pieces = 104\n    thomas_rate = 5\n    gerald_rate = 3\n    total_rate = thomas_rate + gerald_rate\n\n    thomas_pieces = (thomas_rate / total_rate) * total_pieces\n    gerald_pieces = (gerald_rate / total_rate) * total_pieces\n    difference = thomas_pieces - gerald_pieces\n\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        str_num = str(number)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    return cookies_per_gram * 48\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the numbers from base 8 to base 10, perform addition and convert back to base 8\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n\n    sum_base10 = num1 + num2\n\n    ans = oct(sum_base10)[2:]  # Convert to base 8 string and remove the prefix '0o'\n\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    ans = (8/11) * 1.54\n    return ans\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_each = 150\n    selling_price_each = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of tennis rackets purchased at first\n    # The total cost is then 150x\n    # The profit is when the shop has sold all but 8 rackets, so the proceeds are:\n    # Number of rackets sold * selling price each = (x - 8) * 175\n    # This should equal the cost price plus the profit: 150x + 525\n    # Hence, we have the equation: (x - 8) * 175 = 150x + 525\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq((x - 8) * selling_price_each, cost_price_each * x + profit)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    chloe_spent_per_day = 20\n    gordon_spent_per_day = 25\n    chloe_remaining = 157\n    gordon_remaining = 82\n\n    # Calculate the difference in their spendings\n    spend_diff = gordon_spent_per_day - chloe_spent_per_day\n\n    # Calculate the difference in their remaining money\n    remaining_diff = chloe_remaining - gordon_remaining\n\n    # Use the differences to find out how many days passed\n    days_passed = remaining_diff / spend_diff\n\n    # Calculate how much Gordon had at first\n    gordon_initial = gordon_remaining + (days_passed * gordon_spent_per_day)\n\n    return gordon_initial\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for student A and student B's scores.\n    A, B = symbols('A B')\n\n    # Create the equations based on the problem statement.\n    equation1 = Eq(B + 24, A - 2)  # If student B is given 24 points.\n    equation2 = Eq(A + 25, 5 * (B - 25))  # If student A is given 25 points.\n\n    # Solve the system of equations for A and B.\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Retrieve the student A's score.\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let b represent the number of boys, g represent the number of girls, and a represent the number of adults.\n    # According to the problem, we have the following equations:\n    # b = (2/7) * g and a = (2/3) * (b + g), a - b = 1228\n\n    # We can express g in terms of b: g = (7/2) * b\n    # We can also express a in terms of b: a = (2/3) * (b + (7/2) * b)\n    # Simplifying a in terms of b: a = (2/3) * (9/2) * b = 3 * b\n    # Now we can substitute a with 3 * b in the third equation: 3 * b - b = 1228\n    \n    # Solving for b: 2 * b = 1228, so b = 1228 / 2\n    b = 1228 / 2\n\n    # Now we find g using the relation g = (7/2) * b\n    g = (7/2) * b\n\n    # Now we find a using the relation a = 3 * b\n    a = 3 * b\n\n    # The total number of people at the park is the sum of boys, girls, and adults\n    total_people = b + g + a\n\n    return int(total_people)\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    # Number of circles\n    n = 10\n    # The maximum number of regions formed by n circles can be found by the formula:\n    # R(n) = 1 + n(n + 1)/2\n    ans = 1 + n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # ensure x2 is greater than x1\n            for x3 in range(x2+1, 14):  # ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    product = 1\n    for i in range(1, 11):\n        product *= i\n    \n    count_zeros = 0\n    while product % 10 == 0:\n        product //= 10\n        count_zeros += 1\n        \n    return count_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    total_sales = remaining_melons * selling_price_per_melon\n    profit = total_sales - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    # Initialize maximum possible number of neighbours based on the fruits\n    max_neighbours = min(150, 100)\n    \n    for i in range(1, max_neighbours + 1):\n        # If dividing oranges and apples among 'i' neighbours has the given remainders,\n        # 'i' is the number of neighbours.\n        if (150 - 17) % i == 0 and (100 - 5) % i == 0:\n            return i\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    total_length_cm = 10\n    distance_per_cross_cm = 1\n\n    number_of_crosses = (total_length_cm / distance_per_cross_cm) + 1\n\n    return int(number_of_crosses)\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_count_in_pattern = 2\n\n    full_patterns = 75 // pattern_length\n    remaining_balloons = 75 % pattern_length\n\n    green_balloons = full_patterns * green_count_in_pattern\n    additional_greens = 1 if remaining_balloons > 2 else 0\n\n    total_green_balloons = green_balloons + additional_greens\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the original total value of jewels in the two boxes be x.\n    # Since there are 3 jewels in each box initially, the average value per jewel is x/6.\n    # After moving a jewel worth £5000 from P to Q, the total value remains the same but\n    # the average value of jewels in each box increases by £1000.\n    \n    # So, we have the following equations:\n    # Original average value per box: x/6\n    # New average value for P: (x - 5000)/3 + 1000\n    # New average value for Q: (x + 5000)/3 + 1000\n\n    # Since the average values of the jewels in each box increase by £1000, we can write:\n    # (x - 5000)/3 + 1000 = x/6 + 1000\n    # (x + 5000)/3 + 1000 = x/6 + 1000\n\n    # Simplifying the two equations:\n    # (x - 5000 + 3000)/3 = x/6\n    # (x + 5000 + 3000)/3 = x/6\n\n    # Multiplying both sides of each equation by 6:\n    # 2x - 4000 = x\n    # 2x + 8000 = x\n\n    # Solving the equations for x:\n    # x = 4000\n    # x = -8000 (This doesn't make sense in the context of the problem, so we discard this solution)\n\n    # Total value of all 6 jewels is x, which is £4000.\n    return 4000\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals = 6 - 1  # intervals between 1st and 6th is 5\n    distance_per_interval = distance_between_first_and_sixth / number_of_intervals\n\n    distance_between_first_and_ninth = distance_per_interval * (9 - 1)  # intervals between 1st and 9th is 8\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    matches = comb(num_teams, 2)\n    \n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    n = 1\n    count_ones = 0\n    count_twos = 0\n    while True:\n        str_n = str(n)\n        count_ones += str_n.count('1')\n        count_twos += str_n.count('2')\n        if count_ones == 15 and count_twos == 14:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # she shared the candy with her seven friends, and each received 26 pieces.\n    # Total candy shared at school\n    shared_candy = 7 * 26\n\n    # she left with 22 pieces\n    remaining_candy = 22\n\n    # Total candy she brought to school\n    school_candy = shared_candy + remaining_candy\n\n    # Total candy before she ate 1/3 at home\n    # She ate 1/3 at home, so 2/3 left to school\n    total_candy = school_candy * 3 / 2\n\n    return int(total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Andy's position is 9 floors when Bob's position is 5 floors\n    andy_position = 9\n    bob_position = 5\n\n    # When Andy is at the 25th (top) floor, we need to calculate Bob's position\n    # Using ratios since they climb at constant speeds\n    ratio = bob_position / andy_position\n    andy_top_floor = 25\n\n    # Calculate Bob's position when Andy reaches the top floor\n    bob_at_andy_top = ratio * andy_top_floor\n\n    return int(bob_at_andy_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the initial number of marbles Sandra had\n    # Let j be the initial number of marbles Jessica had\n    s, j = symbols('s j')\n    \n    # Sandra gives 13 marbles to Jessica\n    # Therefore, Sandra has s - 13 marbles left\n    # Jessica has j + 13 marbles after receiving them\n    \n    # After the transaction, Sandra has 6 fewer marbles than Jessica\n    equation1 = Eq(s - 13, j + 13 - 6)\n    \n    # Sandra had more marbles than Jessica at first\n    equation2 = Eq(s, j + 13)\n    \n    solutions = solve((equation1, equation2), (s, j))\n    \n    # The question asks for how many more marbles Sandra had than Jessica\n    # This can be found by subtracting Jessica's initial marbles from Sandra's initial marbles\n    more_marbles = solutions[s] - solutions[j]\n    \n    return more_marbles\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original Amounts\n    equation1 = Eq(A, (2/3) * B)\n\n    # After pouring\n    equation2 = Eq(A + 4, (7/8) * (B - 4))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total amount in both pails\n    total_amount = solutions[A] + solutions[B]\n\n    return total_amount\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    net_distance = climb_distance - slip_distance\n    current_distance = 0\n    day = 0\n \n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slip_distance\n \n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_content = 0.06  # 6 percent\n    final_sugar_content = 0.10  # 10 percent\n\n    # Calculating the amount of sugar in the initial 900ml bottle\n    initial_sugar = initial_volume * initial_sugar_content\n\n    # Let added_sugar be the amount of sugar that must be added to reach the final sugar content of 10%\n    # Let total_volume be the total volume of the solution after adding the sugar\n    # Since the volume of the sugar itself is negligible, we can assume total_volume is approximately equal to initial_volume\n    total_volume = initial_volume\n\n    # Creating an equation where the final concentration is the total amount of sugar divided by total volume\n    # initial_sugar + added_sugar = final_sugar_content * total_volume\n    # Solve for added_sugar:\n    added_sugar = final_sugar_content * total_volume - initial_sugar\n\n    return added_sugar\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_seamstress_per_day = 2\n    number_of_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_seamstress_per_day * number_of_seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n\n    rate_per_hour = parts_already_made / hours_spent\n    remaining_parts_needed = total_parts_needed - parts_already_made\n    hours_needed = remaining_parts_needed / rate_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the total number of words he needs to type\n    # Let s be the words per minute speed\n    w, s = symbols('w s')\n    \n    # Equation 1: w = s*3 (he can finish in 3 minutes)\n    equation1 = Eq(w, s*3)\n    \n    # Equation 2: w = (s+30)*(3-1) (he can finish 1 minute earlier if he types 30 more words per minute)\n    equation2 = Eq(w, (s+30)*(3-1))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, s))\n    \n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to off (0)\n\n    # Ms. Lily presses switches of lights labeled with odd numbers (every other one starting from 1)\n    for i in range(1, 11, 2):\n        lights[i - 1] = 1  # Turn on the lights with odd labels\n\n    # Sam presses each switch of lights with even numbers 7 times\n    for i in range(2, 11, 2):\n        lights[i - 1] = (lights[i - 1] + 7) % 2  # Toggle lights with even labels 7 times\n\n    # Count the number of lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Since there are 3 colors, to ensure we get all 3 different colors in the worst case,\n    # we might get all 5 balls of one color first, then all 5 balls of a second color,\n    # and then we will need just one more ball to get the third color.\n    # Thus, the result is 5 (red) + 5 (white or yellow) + 1 (the remaining color) = 11\n    ans = 5 + 5 + 1\n    return ans\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    colors = 5\n    balls_per_person = 2\n    combinations_for_one_person = comb(colors, balls_per_person)\n    min_people = combinations_for_one_person + 1\n    \n    return min_people\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hisham, melissa = symbols('hisham melissa')\n    \n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    \n    # Hisham and Melissa had 876 cards\n    equation2 = Eq(hisham + melissa, 876)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    \n    # Calculate how many cards Melissa should give to Hisham\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / 2\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert the total length into centimeters (2 m 20 cm = 220 cm)\n    each_piece_length = total_length_cm / 2  # Divide by 2 to get the length of each piece\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Since we want to find a pair of numbers that\n    # when multiplied, the result is divisible by 4,\n    # one of the numbers should be even. However,\n    # if both numbers are even but not multiples of 4,\n    # their product will not be divisible by 4.\n    # Thus, we need to consider multiples of 4 as well.\n    # We have 32 numbers total, from 10 to 41.\n\n    # Count numbers not divisible by 4: the worst case.\n    count_non_div_by_4 = 0\n\n    for number in range(10, 42):\n        if number % 4 != 0:\n            count_non_div_by_4 += 1\n\n    # Since we are only considering the worst case scenario, which is no number is divisible by 4,\n    # after we have drawn all numbers not divisible by 4, the next number we draw (the count_non_div_by_4 + 1 th)\n    # will guaranteedly make a pair with one of the previously drawn numbers to be divisible by 4\n    # (in this scenario, because it will be a multiple of 4).\n\n    # So, the answer is all non_div_by_4 numbers + 1 (to ensure at least one is a multiple of 4).\n    return count_non_div_by_4 + 1\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(40/(x + 5), 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 0.96\n    coffee_cost_euro = 4.8\n\n    coffee_cost_dollar = coffee_cost_euro / euro_to_dollar_rate\n\n    return coffee_cost_dollar\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = float('-inf')\n    \n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b / c + (d / e) * f - (g + h / j)\n        if N == int(N):\n            max_value = max(max_value, N)\n    \n    return max_value\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20):\n            C = 19 - A - B\n            if C > 0:\n                product = A * B * C\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books = 3900\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    # Calculate initial number of books for each language\n    chinese_books = (ratio_chinese / total_ratio) * total_books\n    malay_books = (ratio_malay / total_ratio) * total_books\n    english_books = (ratio_english / total_ratio) * total_books\n\n    # Calculate the increased number of Chinese and Malay books\n    chinese_books_new = chinese_books * 1.20  # 20% increase\n    malay_books_new = malay_books * 1.10  # 10% increase\n\n    # Calculate the new total number of books with the addition of 510\n    total_books_new = total_books + 510\n    new_books_except_english = chinese_books_new + malay_books_new\n    \n    # Find the number of new English books\n    english_books_new = total_books_new - new_books_except_english\n    \n    # Calculate the percentage increase in the number of English books\n    increase_percentage_english = ((english_books_new - english_books) / english_books) * 100\n\n    return increase_percentage_english\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt\n\n    # Identify the smallest two-digit prime number\n    smallest_two_digit_prime = next(primerange(10, 100))\n    \n    # Identify the largest two-digit square number\n    # Start from sqrt(99) and go down to find a perfect square\n    for i in range(int(sqrt(99)), int(sqrt(9)), -1):\n        if i*i < 100:\n            largest_two_digit_square = i*i\n            break\n            \n    # Compute the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_count = 12\n    seniors_count = 8\n    total_participants = juniors_count + seniors_count\n\n    average_juniors = 10\n    average_total = 14\n\n    total_score_juniors = juniors_count * average_juniors\n    total_score_all = total_participants * average_total\n\n    total_score_seniors = total_score_all - total_score_juniors\n    average_seniors = total_score_seniors / seniors_count\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_value = rounded_number - 50\n    return smallest_possible_value\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Let's denote the combined current age of the 2 dogs as x.\n    # Four years ago, their combined age was x - 4 * 2 (since each dog aged 4 years).\n    # We are given that four years ago their combined age was 10, so we have the equation x - 8 = 10\n    # Solving for x, we get:\n    current_combined_age = 10 + 8\n    \n    # In 2 years, each dog will be 2 years older, thus the combined age will increase by 2 * 2.\n    # So, the combined age in 2 years will be:\n    combined_age_in_2_years = current_combined_age + 2 * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_unattempted = 0\n    rex_score = 66\n    rex_answered = total_questions - 1\n\n    for correct in range(rex_answered + 1):\n        incorrect = rex_answered - correct\n        if correct * score_correct + incorrect * score_incorrect == rex_score:\n            return correct\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = 90\n    correct = symbols('correct')\n\n    # Mochi answered 60% of the questions\n    answered = total_questions * 0.60\n\n    # For unanswered questions, 1 mark is awarded per question\n    unanswered_marks = (total_questions - answered) * 1\n\n    # Equation for the total marks scored\n    equation = Eq(5 * correct - 2 * (answered - correct) + unanswered_marks, 264)\n\n    # Solve for the number of correctly answered questions\n    correct_answers = solve(equation, correct)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    min_apples_per_container = 1\n    additional_apples = 1 # We need at least one container with 2 apples\n\n    least_apples = containers * min_apples_per_container + additional_apples\n\n    return least_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**(-2022)\n    denominator = 92 * 10**(-2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram_of_butter = 160 / 50\n    grams_of_butter_for_300_cookies = 300 / cookies_per_gram_of_butter\n    return grams_of_butter_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each.\n    # Dedra now has = dedra + 72\n    # Timm now has = timm + 72\n    \n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n    \n    # Dedra's initial amount of money\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    N = ''\n    i = 1\n    while len(N) < 1000:\n        N += str(i)\n        i += 1\n    ans = int(N[999])\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19+2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    \n    people_in_front = total_people - people_behind - 1\n    \n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Formula for permutations: P(n, r) = n! / (n - r)!\n    ans = factorial(n) / factorial(n - r)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n    jack_age = 4\n\n    equation1 = Eq(jack, jack_age)\n    equation2 = Eq(jason, bruce)\n    equation3 = Eq(jason, willie)\n    equation4 = Eq(jack + jason + bruce + willie, 19)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (jack, jason, bruce, willie))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    erasers_left_5 = 3\n    erasers_short_6 = 2\n\n    # Since he would be short of 2 erasers if he gave each friend 6 erasers, there is one more friend than the number of 5-eraser sets he can give out.\n    # Thus, the number of erasers is 5 times the number of friends plus the 3 left over after giving out 5 each; and also\n    # 6 times the number of friends minus the 2 he's short of.\n    # So, total_erasers = 5 * friends + 3 = 6 * (friends + 1) - 2\n\n    total_erasers = erasers_left_5 + erasers_short_6  # This will be the minimum number of erasers he can have\n    while True:  # Start with minimum and keep adding 1 until it satisfies the condition\n        if (total_erasers - 3) % 5 == 0 and (total_erasers + 2) % 6 == 0:\n            break\n        total_erasers += 1\n\n    return total_erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jake, john = symbols('jake john')\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    solutions = solve((equation1, equation2), (jake, john))\n    \n    john_future_age = solutions[john] + 14\n    \n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    # Given values\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n    \n    # Calculate present value using formula: PV = FV / ((1 + r)**n)\n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    youngest = symbols('youngest')\n    equations = []\n\n    # Define the age of all 9 children based on the youngest child age and the intervals\n    for i in range(9):\n        if i == 0:\n            age_i = youngest\n        else:\n            age_i = youngest + i * (15 / 12) # 15 months interval in years\n        equations.append(age_i)\n\n    # Oldest is six times as old as the youngest\n    oldest = youngest + (9 - 1) * (15 / 12)\n    equation_age = Eq(oldest, 6 * youngest)\n\n    # Solve the system\n    age_solution = solve(equation_age, youngest)\n\n    return age_solution[0]\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum((i**2 + (i+1)**2) / (i * (i+1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Start with 1000, as it's the smallest 4-digit number\n    for x in range(1000, 10000):\n        # Get the first and last digits of the original number\n        first_digit_of_original = x // 1000\n        last_digit_of_original = x % 10\n        # Create the new number by swapping the digits\n        new_number = (last_digit_of_original * 1000) + (x % 1000) + (first_digit_of_original)\n        # Check if the difference between the new and original number is 5877\n        if new_number - x == 5877:\n            return x  # This is the smallest original combination lock number\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Before Cayden gives Jiaxiang the sweets\n    # Let Jiaxiang's sweets be x.\n    # Then Cayden's sweets are x + 5.\n\n    # When Cayden gives Jiaxiang 10 sweets:\n    # Cayden will have (x + 5 - 10) sweets and Jiaxiang will have (x + 10) sweets.\n\n    # Difference in number of sweets they will have now:\n    # Difference = |(x + 5 - 10) - (x + 10)| = |x - 5 - x - 10| = 15\n    return 15\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    # Find the smallest multiple of 11 greater than or equal to 50\n    min_val = ((50 // 11) + 1) * 11\n    # Find the largest multiple of 11 less than or equal to 150\n    max_val = (150 // 11) * 11\n    # Calculate the number of multiples by subtracting and dividing by 11\n    num_multiples = (max_val - min_val) // 11 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from itertools import permutations\n\ndef calculate_expression(ops):\n    return eval(\"\".join(str(s) for s in ops))\n\ndef solution():\n    numbers_ops = [15, '+', 5, '*', 5, '+', 15, '-', 6, '+', 7]\n    brackets_positions = [(0, 4), (2, 6), (4, 8), (6, 10)]\n    smallest_result = float('inf')\n    best_ops = None\n    \n    # Generate all permutations of two pairs of brackets\n    for bracket1, bracket2 in permutations(brackets_positions, 2):\n        bracket_ops = numbers_ops.copy()\n        # Insert closing brackets\n        bracket_ops.insert(bracket2[1]+1, ')')\n        bracket_ops.insert(bracket1[1]+1, ')')\n        # Insert opening brackets\n        bracket_ops.insert(bracket1[0], '(')\n        bracket_ops.insert(bracket2[0]+2, '(')  # added +2 because two '(' were added before\n        \n        try:\n            result = calculate_expression(bracket_ops)\n            if result < smallest_result:\n                smallest_result = result\n                best_ops = bracket_ops\n        except ZeroDivisionError:\n            continue\n    \n    return smallest_result, \"\".join(str(s) for s in best_ops)\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    return 75 * 0.29 + 75 / 100 * 74 - 0.3 / (2 / 15)\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n\n    AC = 48\n    AE = 36\n    CE = 50\n\n    ACE = 25\n\n    # Inclusion-Exclusion Principle for Three Sets\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    total_fruits = A + C + E - AC - AE - CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    average_without_mary = 72\n    total_without_mary = average_without_mary * 5\n    new_average = 75\n    total_with_mary = new_average * 6\n\n    marys_score = total_with_mary - total_without_mary\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # Speed in meters per second\n\n    time_to_cross = (train_length + bridge_length) / speed\n    return time_to_cross\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Start with the greatest 3-digit odd number\n    for number in range(999, 99, -2): # Decrease by 2 to maintain odd numbers\n        if number % 9 == 0: # Check if divisible by 9\n            tens_digit = (number // 10) % 10 # Extract tens digit\n            if tens_digit % 4 == 0: # Check if tens digit is divisible by 4\n                return number\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    actual_time = distance / speed\n    \n    return int(actual_time) if actual_time == int(actual_time) else actual_time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The worse case scenario to ensure Jane gets at least one marble of each color is to consider that she could pick all the marbles of each color minus one before getting a new color.\n    # Therefore, she could pick all but one of the red, green, blue marbles, and then she will get an orange one for sure in the next two draws.\n    \n    # Number of marbles of each color minus one\n    red = 4 - 1\n    green = 7 - 1\n    blue = 6 - 1\n    orange = 2  # She needs two more draws to ensure getting an orange marble\n    \n    # Total number of marbles Jane must draw to guarantee getting 4 different colors\n    return red + green + blue + orange\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the possible coins Angela could have received,\n    # each value is in pence (5p, 10p, 20p, 50p, 100p, 200p)\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Calculate the total amount of change Angela could have received\n    for i in range(len(coins)):\n        for j in range(len(coins)):\n            for k in range(len(coins)):\n                for l in range(len(coins)):\n                    for m in range(len(coins)):\n                        if len(set([i, j, k, l, m])) == 5:  # ensure all coins are different\n                            change = coins[i] + coins[j] + coins[k] + coins[l] + coins[m]\n                            if change < 500:  # ensure the change is less than the five pound note\n                                spent = 500 - change  # calculate how much she spent\n                                return spent  # return the amount spent\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    result = 0.2 * 7\n    return result\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temperature = 4\n    drop_in_temperature = 11\n    midnight_temperature = midday_temperature - drop_in_temperature\n    return midnight_temperature\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    for ten_notes in range(39):\n        two_notes = 38 - ten_notes\n        spent_ten = 0.8 * ten_notes\n        spent_two = 0.75 * two_notes\n        remaining_ten = ten_notes - spent_ten\n        remaining_two = two_notes - spent_two\n\n        if remaining_ten == 3 * remaining_two:\n            cost_of_fan = spent_ten * 10 + spent_two * 2\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    # Number of bee hives required for 50 kg of honey\n    initial_hives = 5\n    # Amount of honey produced by the initial number of hives\n    initial_honey = 50\n    # Target amount of honey to be produced\n    target_honey = 90\n\n    # Calculate the amount of honey produced by one hive in a year\n    honey_per_hive = initial_honey / initial_hives\n    # Calculate the total number of hives required to produce 90 kg of honey\n    total_hives_needed = target_honey / honey_per_hive\n    # Calculate the additional number of hives needed to reach the target\n    additional_hives_needed = total_hives_needed - initial_hives\n\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # The problem can be transformed into a problem of distributing 11 - 4 = 7 identical items\n    # to 4 different boxes, where each box already has 1 item to satisfy the at least one requirement.\n    \n    # This is equivalent to finding combinations with repetition allowed.\n    # The formula for combinations with repetition is C(n + r - 1, r)\n    # where n is the number of items to distribute and r is the number of boxes.\n    \n    # In this case, we have n = 7 (remaining doughnuts after giving each student one)\n    # and r = 4 (number of students).\n    # Using the formula, we get C(7 + 4 - 1, 4 - 1) = C(10, 3)\n    return comb(10, 3)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of erasers Ali initially has and y be the number Kumar has.\n    x, y = symbols('x y')\n\n    # Create the equations based on the problem statement\n    # Equation 1: The initial ratio of erasers between Ali and Kumar\n    eq1 = Eq(x / y, 7 / 5)\n\n    # Equation 2: The new ratio after Ali gives Kumar 10 erasers\n    eq2 = Eq((x - 10) / (y + 10), 1 / 5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # The total number of erasers is the sum of Ali's and Kumar's erasers\n    total_erasers = solutions[x] + solutions[y]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    student_number = 23\n    \n    problems_solved_by_23rd_student = first_term + (student_number - 1) * common_difference\n    \n    return problems_solved_by_23rd_student\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    # Calculate the total distance east-west\n    ew_distance = 15 - 9  # Tina went 15 km east and then 9 km west\n    # Calculate the total distance north-south\n    ns_distance = 3 + 5  # Tina went 3 km north and then 5 km further north\n    \n    # Use Pythagoras theorem to find the shortest distance\n    shortest_distance = (ew_distance**2 + ns_distance**2)**0.5\n    \n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20  # Convert total time to minutes\n    activity_and_break_time = 45 + 20    # Time for each activity and the following break\n\n    # The last activity does not follow a break, so we subtract one break time\n    activities = (total_time_in_minutes - 20) // activity_and_break_time \n    \n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 92)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days B takes to finish the work\n    x = symbols('x')\n    \n    # A's efficiency is twice B's, so A takes half the time B does\n    # So, A takes x/2 days to finish the work\n    \n    # A also finishes the job in 5 days less than B\n    # So, A takes x - 5 days to finish the work\n    \n    # These two expressions for the number of days A takes should be equal\n    equation = Eq(x / 2, x - 5)\n    \n    # Solve for x to find the number of days B takes\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    # Apply the divisibility rule for 11:\n    # Sum of digits in odd places and sum of digits in even places\n    # The result should be divisible by 11 or the difference should be a multiple of 11\n    odd_sum = sum(digits[::2])\n    even_sum = sum(digits[1::2])\n    diff = abs(odd_sum - even_sum)\n\n    # Check if the difference is a multiple of 11\n    remainder = diff % 11\n    is_divisible = remainder == 0\n\n    return (is_divisible, remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n    \n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # initial length in meters\n    end_length_m = 78 / 100.0  # converted end length from cm to meters\n\n    melted_length_m = start_length_m - end_length_m  # calculate the melted length\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    percent_of_grams = (percentage / 100) * total_grams\n\n    return percent_of_grams\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        # Count ways for n-1 steps plus ways for n-4 steps\n        return count_ways(n-1) + count_ways(n-4)\n    \n    ans = count_ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    result = 3549 // 7\n    return result\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    \n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    after_second_stop = after_first_stop - (1/4) * after_first_stop + 13\n\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the sequence 0.5, 1, 1.5, ..., 10\n    terms = [0.5 * i for i in range(1, 21)]\n\n    # Calculate the sum of numbers in the sequence\n    sum_of_terms = sum(terms)\n    \n    # Use the formula for the sum of cubes: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    ans = sum_of_terms ** 2\n\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    price_tolerance = 5\n\n    # The least amount his shopping bill could be - We subtract the half of the tolerance\n    # from the estimated price because the estimated price is the nearest imaginable price\n    # that means the real price could be anywhere from 2.5 less to 2.5 more.\n    actual_minimum_price = estimated_price - (price_tolerance / 2)\n\n    return actual_minimum_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    years_until_future = future_sum_ages - current_sum_ages\n    return years_until_future\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):  # First school\n        for x2 in range(98, 103):  # Second school\n            x3 = 300 - x1 - x2  # Third school as the remainder\n            if 98 <= x1 <= 102 and 98 <= x2 <= 102 and 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Tim's time to complete the book alone\n    tim = symbols('tim')\n\n    # Equation based on work done. Work is assumed to be 1 (writing the book)\n    # Nancy's work rate is 1/6 per day\n    # Tim's work rate is 1/tim per day\n    # Together, their combined work rate is 1/4 per day\n    equation = Eq(1/6 + 1/tim, 1/4)\n\n    # Solve for Tim's time to complete the book alone\n    tim_solution = solve(equation, tim)\n\n    return tim_solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan + his 3 sisters\n    biscuits_per_person = total_biscuits / people_count\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n\n    sum_of_numbers = mean_value * (len(numbers) + 1)\n    a = sum_of_numbers - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    # Time spent for each activity\n    prepare_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    # Total time calculation\n    total_time = prepare_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% off\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people_carried = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    \n    average_people_per_car = total_people_carried / total_cars\n    \n    return average_people_per_car\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # Rachel's speed in km/h\n    eleanor_time_to_G = 4  # Eleanor's time to reach City G in hours\n    time_difference = 1.5  # Time difference in hours when Eleanor reached City G and Rachel was 39 km away from City F\n    \n    # When Eleanor reached City G, Rachel had travelled (time_difference * rachel_speed) km less the remaining 39 km\n    rachel_distance = time_difference * rachel_speed - 39\n    \n    # Total distance between F and G is the distance Eleanor travels in 4 hours plus the distance Rachel travels in 2.5 hours\n    eleanor_speed = (rachel_distance + 39) / time_difference  # Eleanor's speed in km/h\n    distance_F_to_G = eleanor_speed * eleanor_time_to_G\n\n    return distance_F_to_G\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass of the sauce from kg to g\n    total_mass_sauce_g = 172 * 1000\n    \n    # Mass of each packet for P, Q, R\n    mass_P = 300\n    mass_Q = 400\n    mass_R = 500\n    \n    # Ratio of packets of P, Q, R\n    ratio_P, ratio_Q, ratio_R = 7, 3, 2\n    \n    # Let the common ratio multiplier be x\n    # Total mass of sauce = mass per P packet * number of P packets +\n    #                       mass per Q packet * number of Q packets +\n    #                       mass per R packet * number of R packets\n    # Solve for x: mass_P * ratio_P * x + mass_Q * ratio_Q * x + mass_R * ratio_R * x = total_mass_sauce_g\n    x = total_mass_sauce_g / (mass_P * ratio_P + mass_Q * ratio_Q + mass_R * ratio_R)\n    \n    # Calculate number of packets for each ingredient\n    packets_P = int(ratio_P * x)\n    packets_Q = int(ratio_Q * x)\n    packets_R = int(ratio_R * x)\n    \n    # Sum of all packets\n    total_packets = packets_P + packets_Q + packets_R\n    return total_packets\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    base = 4\n    multiplier = 3\n    total = 0\n    for i in range(1, multiplier + 1):\n        num_str = str(base) * i\n        total += int(num_str)\n    return total\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert all times to seconds for common units\n    first_traffic_light = 1 * 60  # 1 minute\n    second_traffic_light = 1.5 * 60  # 1.5 minutes\n    simultaneous_time = 9 * 60  # 9 minutes\n\n    # Find the least common multiple (LCM) of the first two lights\n    lcm_first_second = lcm(first_traffic_light, second_traffic_light)\n\n    # The third traffic light's time must be a factor of the simultaneous time and\n    # also at least 30 seconds long.\n    # We start with the LCM of the first two and iterate down to 30 seconds to find the LCM with the simultaneous time.\n    third_traffic_light = lcm_first_second\n    while third_traffic_light > 30:\n        if lcm(lcm_first_second, third_traffic_light) == simultaneous_time:\n            return third_traffic_light\n        third_traffic_light -= 1\n\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    pink_length_m = 2.5  # Pink ribbon length in meters\n    blue_length_cm = 220  # Blue ribbon length in centimeters\n    orange_length_cm = 30.5  # Orange ribbon length in centimeters\n\n    # Convert all lengths to the same unit (centimeters)\n    pink_length_cm = pink_length_m * 100\n    blue_length_cm = blue_length_cm  # already in centimeters\n    orange_length_cm = orange_length_cm  # already in centimeters\n\n    # Determine the longest ribbon by comparing their lengths in centimeters\n    longest_ribbon = max(pink_length_cm, blue_length_cm, orange_length_cm)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon == pink_length_cm:\n        return \"pink\"\n    elif longest_ribbon == blue_length_cm:\n        return \"blue\"\n    elif longest_ribbon == orange_length_cm:\n        return \"orange\"\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    boys = 5\n    total_students = 25\n    percentage_of_boys = (boys / total_students) * 100\n    return percentage_of_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    book_cost_cad = 64\n    exchange_rate = 1.25\n    book_cost_usd = book_cost_cad / exchange_rate\n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # 8th from the front, 10th from the back\n    # This means there are 7 shelves in front of the desired shelf and 9 shelves behind it.\n    # The shelf in question is counted once, hence:\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    min_score = None\n    for score1 in range(0, 101):\n        for score2 in range(0, 101):\n            for score3 in range(0, 101):\n                for score4 in range(0, 101):\n                    for score5 in range(0, 101):\n                        scores = [score1, score2, score3, score4, score5]\n                        if sum(scores) == 90 * 5 and len(set(scores)) == 5:\n                            if min_score is None or min(score1, score2, score3, score4, score5) < min_score:\n                                min_score = min(scores)\n    return min_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's symbolize the lengths of Rope A, B, and C in centimeters\n    A, B, C = symbols('A B C')\n\n    # We have the following relationships:\n    # A = 3 * B\n    # C = B + 56\n    # A = C + 130 (converting 1m 30cm to cm)\n\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Total length is the sum of A, B, and C\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    return (2 * max(numbers)) - (3 * min(numbers))\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    # Calculation of total number of ways to choose 3 letters out of 5 without any restriction\n    total_ways = factorial(5) / factorial(5 - 3)\n    \n    # Calculation of number of ways to choose 1 letter out of the remaining 3 (since A and B are already chosen)\n    ways_to_choose_third = factorial(3) / factorial(3 - 1)\n\n    # Calculation of probability that both A and B are in the string\n    probability = ways_to_choose_third / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_male_members = 0.16 * male_members\n    student_female_members = 0.10 * female_members\n    total_students = student_male_members + student_female_members\n    total_members = male_members + female_members\n    percentage_students = (total_students / total_members) * 100\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    juice_in_first = 200 * 0.35\n    juice_in_second = 300 * 0.50\n    total_juice = juice_in_first + juice_in_second\n    concentration = (total_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratios x:48 and 3:4, we can form an equation x/48 = 3/4\n    # Then we solve for x: x = 48 * (3/4)\n    x = 48 * (3/4)\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    result = 1212 // 6\n    return result\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    amy_final_apples = john_apples + 4  # Amy has to have 4 more apples than John\n    amy_gives = amy_apples - amy_final_apples  # The number of apples Amy gives to John\n    return amy_gives\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    \n    # Calculate number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of the arithmetic sequence\n    ans = (num_terms * (first_term + last_term)) // 2\n    \n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_per_bag = 5\n\n    markers_left = total_markers - markers_given_away\n    num_bags = markers_left // markers_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be from 1 to 9 because it is the first digit of a 2-digit number\n        for b in range(10):  # 'b' can be from 0 to 9\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_numbers\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers and y be the original rate (papers per hour)\n    x, y = symbols('x y')\n\n    # Based on the given information, we have two equations\n    # After marking for one hour at the original rate, the teacher has 4 hours left to finish (x - y) papers\n    # If she marks 6 more papers per hour, she finishes in the remaining 4 hours\n    equation1 = Eq(y + (y + 6) * 4, x)\n\n    # If the teacher marks 10 more papers per hour, she can finish 1 hour earlier (in 3 hours)\n    equation2 = Eq(y + (y + 10) * 3, x)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum(map(int, str(i)))\n    return total_sum\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    # Total number of chicken pies\n    chicken_pies = 40\n    # Total number of vegetable pies\n    vegetable_pies = 20\n    # Total number of fruit pies\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n\n    # Fraction of the chicken pies more than vegetable pies out of the total chicken pies\n    fraction_chicken_more = Fraction(chicken_more_than_vegetable, chicken_pies)\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    vegetable_less_than_fruit = fruit_pies - vegetable_pies\n\n    # Fraction of the vegetable pies less than fruit pies out of the total vegetable pies\n    fraction_vegetable_less = Fraction(vegetable_less_than_fruit, vegetable_pies)\n\n    # Return answers as a tuple of fractions\n    return (fraction_chicken_more, fraction_vegetable_less)\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    completed_designs = 24\n    fraction_completed = 3 / 4\n    total_designs = completed_designs / fraction_completed\n    return int(total_designs)\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the cost of one jug and c represent the cost of one cup\n    j, c = symbols('j c')\n\n    # The first equation represents the cost of 4 jugs and 5 cups\n    equation1 = Eq(4*j + 5*c, 85)\n\n    # The second equation represents the cost of 2 jugs and 2 cups\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations for j and c\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(1, 5):  # Hundreds place must be at least 1 because we are finding three-digit numbers\n        for j in range(5):  # Tens place can be 0 to 4\n            for k in range(5):  # Units place can also be 0 to 4\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 different numbers, but we can only have 10 starting numbers for a consecutive sequence (1 to 10).\n    # So if we draw 40 cards (10*4), we may still not have 4 consecutive numbers.\n    # To guarantee 4 consecutive numbers, we need to draw one more from a new sequence, hence 41 cards.\n    \n    ans = 40 + 1\n    return ans\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    years_ago = 3\n    age_difference = 2\n\n    brother_age = (ashley_age - years_ago) - age_difference\n\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    page_num = 1\n    printed_page_count = 1\n\n    while printed_page_count < 89:\n        if (page_num + 1) % 3 != 0:\n            printed_page_count += 1\n        page_num += 1\n\n    return page_num\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if 5 * adults + 3 * children == 75:\n            return adults\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the costs of the cap and wristband\n    cost_cap, cost_wristband = symbols('cost_cap cost_wristband')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(cost_cap, 3 * cost_wristband)  # Each cap costs 3 times a wristband\n    total_spend_on_items = 4 * cost_cap + 6 * cost_wristband\n    remaining_money = 1 - (2/5)\n    spend_on_more_caps = remaining_money * (1/3) \n\n    # The spend_on_more_caps is equal to some number of caps times the cost of one cap\n    # We know that total_spend_on_items is 2/5 of his total money\n    # Hence, solve for the cost of a wristband, and therefore the cost of a cap\n    cost_wristband_solved = solve(Eq(total_spend_on_items, 2/5), cost_wristband)[0]\n    cost_cap_solved = 3 * cost_wristband_solved\n\n    # Now we find the number of caps he could buy with 1/3 of his remaining money\n    # which is spend_on_more_caps / cost_cap_solved\n    number_of_caps_with_remaining = spend_on_more_caps / cost_cap_solved \n\n    # Caleb spent 2/5 of his money on 4 caps, plus the additional caps he bought\n    total_caps = 4 + number_of_caps_with_remaining\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h1 = 3000  # initial altitude in meters\n    h2 = 2000  # final altitude in meters\n    v0 = symbols('v0')  # initial velocity\n\n    # Energy conservation: (1/2) * m * v1^2 = m * g * (h1 - h2) + (1/2) * m * v0^2\n    # where m is mass (cancels out), g is gravity, h1 is initial height,\n    # h2 is final height, v1 is final velocity (what we want to find), and v0 is initial velocity\n\n    # Since the skydiver jumps from rest, initial velocity v0 = 0\n    v1 = symbols('v1')\n\n    # Using the equation of motion under gravitational force without air resistance\n    # Conservation of mechanical energy (ignoring potential and kinetic energy at v0):\n    # final kinetic energy = initial potential energy - final potential energy\n    # (1/2) * m * v1^2 = m * g * h1 - m * g * h2\n    # m cancels out, and we are left to solve for v1:\n    equation = Eq((1/2) * v1**2, g * (h1 - h2))\n\n    # Solving the equation for v1\n    solution = solve(equation, v1)\n\n    # Since we are interested in the magnitude of the velocity (speed)\n    # we only consider the positive root.\n    v1_solution = max(solution)\n\n    return v1_solution\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef is_divisible(num, div):\n    return int(num) % div == 0\n\ndef solution():\n    for p in permutations('0245689', 7):\n        A, B, _, D, _, F, _, G, _, J = '3', p[0], '1', p[1], p[2], p[3], '7', p[4], p[5], '0'\n        if (is_divisible(A, 1) and\n            is_divisible(A+B, 2) and\n            is_divisible(A+B+'1', 3) and\n            is_divisible(A+B+'1'+D, 4) and\n            is_divisible(A+B+'1'+D+F, 5) and\n            is_divisible(A+B+'1'+D+F+G, 6) and\n            is_divisible(A+B+'1'+D+F+G+p[4], 7) and\n            is_divisible(A+B+'1'+D+F+G+p[4]+p[5], 8) and\n            is_divisible(A+B+'1'+D+F+G+p[4]+p[5]+'0', 9)):\n            return {'B': B, 'D': D, 'E': '1', 'F': F, 'H': G, 'I': p[4], 'J': '0'}\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # Multiple of both 3 and 5, for inclusion-exclusion principle\n    \n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n    grandma_age_now = grandma_age_future - (tom_age_future - tom_age_now)\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n    students_b = symbols('students_b')\n\n    # Equation representing the scenario where each student in class A gets 4 candies\n    # and 20 more candies are needed. Since class A has twice the students as class B,\n    # the total number of candies needed for class A is 8 * students_b\n    eq1 = Eq(8 * students_b + 20, candies)\n\n    # Equation representing the scenario where each student in class B gets 6 candies\n    # and there are 16 candies left.\n    eq2 = Eq(6 * students_b + 16, candies)\n\n    # Solving the system of equations to find the total number of candies\n    solution = solve((eq1, eq2), (candies, students_b), dict=True)\n    total_candies = solution[0][candies]\n\n    return total_candies\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):  # He can use 0 to 5 ten-pence coins\n        for twenty_pences in range(4):  # He can use 0 to 3 twenty-pence coins\n            for fifty_pences in range(2):  # He can use 0 to 1 fifty-pence coins\n                total = ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50\n                if total == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # There are 3 red and 3 green stickers.\n    # In the worst case, we can pick one by one of each color alternately.\n    # To ensure we get 2 stickers of the same color, we have to consider the worst case scenario:\n    # Pick 1 red -> 1 green -> 1 red -> 1 green -> and the next one must be of the same color as one we already picked.\n\n    # Total number of stickers taken to be sure we get 2 stickers of the same color:\n    stickers_taken = 1 + 1 + 1 + 1 + 1 # The fifth sticker guarantees two of the same color.\n    return stickers_taken\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # In the worst case scenario, Sheila must draw one less than the number of balls needed of each color\n    # before she is guaranteed to draw the 4th ball of the same color.\n    # So for blue, 3 balls, for orange, 3 balls, and for yellow, 2 balls\n    # After drawing this combination of balls, the next ball she draws\n    # must be of a color that she already has three of.\n    \n    balls_to_get_four_of_same_color = (3 + 3 + 2) + 1\n    return balls_to_get_four_of_same_color\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    total_bird_legs = ducklings_legs + baby_geese_legs\n    remaining_legs = 36 - total_bird_legs\n    lamb_legs = 4\n    number_of_lambs = remaining_legs // lamb_legs\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation based on the ratio\n    equation1 = Eq(boys, 3 * girls)\n    \n    # Equation based on the total number of sweets\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    largest_num = int(''.join(sorted(digits, reverse=True)))\n    smallest_num = int(''.join(sorted(digits)))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (topmost) has 1^2=1 box\n    # Layer 2 has 2^2=4 boxes\n    # Layer 3 has 3^2=9 boxes\n    # Total number of boxes is the sum of the boxes in each layer\n    total_boxes = 1**2 + 2**2 + 3**2\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    change = 5 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_A = (3/5) * 600\n    good_copies_B = (2/5) * 600\n    total_copies_A = good_copies_A * (5/4)\n    total_copies_B = good_copies_B * (6/5)\n    total_copies = total_copies_A + total_copies_B\n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    ans = a * (a) - a * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol s for the son's time to harvest the crops alone.\n    s = symbols('s')\n    \n    # The son works for 6 hours, so he completes 6/s of the work.\n    # The remaining work (1 - 6/s) is completed by both in 16 hours,\n    # hence farmer's rate is 1/24 and total rate when working together is 1/16.\n    # So, the equation is: (1 - 6/s) / 24 + (1 - 6/s) / s = 1/16\n    \n    equation = Eq((1 - 6/s) / 24 + (1 - 6/s) / s, 1/16)\n    \n    # Solve the equation for s\n    solution = solve(equation, s)\n    \n    # Return the positive solution for the time son will take\n    return min(solution)  # We assume the solution to be a positive time value\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    \n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    ans = int(math.sqrt(40))\n    return ans\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Initial height in meters\n    bounce_height = initial_height / 2  # Height after the first bounce\n\n    # The total distance travelled is the sum of the drop, the bounce up, and the second drop\n    total_distance = initial_height + bounce_height + bounce_height\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    num_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_number_of_5s = num_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    # divisible by 36, so we'll start from the largest 3-digit number, 999\n    # and go backwards until we find a number divisible by 36\n    for number in range(999, 99, -1):\n        if number % 36 == 0:\n            return number\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(5) # Total ways to arrange 5 children with no restrictions\n    \n    # Total ways where Hugh is between Louise and Richard\n    total_restrictions = 3 * factorial(3) \n    \n    # Subtract the restricted arrangements from the total to get the valid ones\n    ans = total_ways - total_restrictions\n    \n    return ans\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny started with the right method, multiplying the quotient by the divisor\n    quotient = 9\n    divisor = 4\n    remainder = 2\n    incorrect_product = quotient * remainder  # This is incorrect, he should have multiplied the quotient by the divisor\n    correct_product = quotient * divisor  # This is the correct step\n    \n    # He then added the divisor instead of the remainder to get his final answer\n    incorrect_final_answer = incorrect_product + divisor\n    correct_final_answer = correct_product + remainder\n    \n    # If the incorrect_final_answer is the same as the correct_final_answer then Johnny's answer is correct\n    # Else, return the correct_final_answer and False indicating an error\n    return correct_final_answer, incorrect_final_answer == correct_final_answer\n\nans, is_correct = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum_result = 0\n    # Start at 40, reduce by 2 each time, end at 2\n    for i in range(40, 1, -2):\n        sum_result = sum_result + i - (i - 2)\n    return sum_result\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)\n    change = 1000 - total_cost  # Convert £10 to pence for calculation\n    return change / 100  # Convert the change back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10  # 10% discount\n    second_discount = 0.20 # 20% discount\n\n    first_reduced_price = initial_price * (1 - first_discount)\n    final_price = first_reduced_price * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # Total sum of the 8 numbers\n    total_sum = 8 * 555\n\n    # Let x be the mean of the last 5 numbers\n    # mean of first 3 numbers = x - 296\n    # Total sum of the first 3 numbers = 3 * (x - 296)\n    # Total sum of the last 5 numbers = 5 * x\n    # total_sum = 3 * (x - 296) + 5 * x\n\n    # Solve for x\n    x = (total_sum + 3 * 296) / 8\n\n    return x\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    count = 0\n    for num in range(2, 101, 2):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Lost 10 matches, so these do not contribute points.\n    # Let's assume the team played X matches in total.\n    # According to the question:\n    # Wins -> 2/5 of total, so 2/5 * X\n    # Draws -> 7/20 of total, so 7/20 * X\n\n    # We need to find X first because we know the team lost 10 matches.\n    # We know that all matches account for 1, so:\n    # Wins + Draws + Losses = X\n    # (2/5 * X) + (7/20 * X) + 10 = X\n    # To find X, we solve for:\n    # X - (2/5 * X) - (7/20 * X) = 10\n    \n    # The losses do not affect the number of points, so we can remove the 10 matches lost.\n    # Converting fractions to a common denominator (20) gives us:\n    # (20/20 * X) - (8/20 * X) - (7/20 * X) = 10\n    # (20 - 8 - 7)/20 * X = 10\n    # 5/20 * X = 10\n    # X = 10 * (20/5)\n    X = 10 * (20/5)\n\n    # Now we calculate the number of wins and number of draws.\n    wins = (2/5) * X\n    draws = (7/20) * X\n\n    # Point calculation:\n    # 3 points for a win\n    # 1 point for a draw\n    points = (3 * wins) + (1 * draws)\n\n    return int(points)\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    \n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n    \n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # Number of people originally\n    original_people = 5\n    # Number of days originally\n    original_days = 15\n    # Target number of days to build the bridge\n    target_days = 5\n    \n    # Calculate work done by one person in one day (work rate)\n    work_rate_per_person_per_day = 1 / (original_people * original_days)\n    \n    # Calculate total work to build the bridge\n    total_work = 1  # since the bridge is the whole task, it is represented by 1\n    \n    # Calculate total work rate needed to build the bridge in target_days\n    total_work_rate_needed = total_work / target_days\n    \n    # Calculate number of people needed for the new work rate\n    people_needed = total_work_rate_needed / work_rate_per_person_per_day\n    \n    # Calculate how many more people are needed\n    more_people_needed = people_needed - original_people\n    \n    return int(more_people_needed)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money Rasidah and Chai Seng have.\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Create the equation based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), rasidah * (1 - 3/5) * 1/2)\n\n    # Solve the system of equations for the amount of money Rasidah had at first\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    isaac_past_age = isaac_current_age - years_ago\n    mother_past_age = mother_current_age - years_ago\n\n    equation = Eq(isaac_past_age, mother_past_age / 3)\n\n    ans = solve(equation, years_ago)\n\n    return ans[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Given conditions\n    # Grandma's age % 4 = 2\n    # Grandma's age % 5 = 3\n    # Grandma's age % 9 = 6\n\n    # System of congruences:\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Use Chinese Remainder Theorem to solve the system of congruences\n    grandma_age, _ = solve_congruence(*congruences)\n\n    return grandma_age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_factor = 2.2\n    kilograms = pounds / conversion_factor\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        sum_sequence = sum(range(a, b))\n        return sum_sequence - b\n\n    result = custom_op(5, 10) - custom_op(4, 9)\n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    return 35 + 18 + 26 + 22 - 16 + 25\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3]\n    all_permutations = list(permutations(digits, 3))\n    count = len(all_permutations)\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21): # Prime numbers within 20\n        if isprime(prime):\n            if isprime(prime + 6) or isprime(prime - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_diffs = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n\n    next_second_diff = second_diffs[-1]\n\n    next_diff = differences[-1] + next_second_diff\n    next_number = 50 + next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n\n    # List of even digits that can be in the last position\n    even_digits = ['2', '4']\n\n    # Generate all permutations of the digits 1 through 5\n    all_perms = permutations('12345')\n\n    # Filter permutations to find those that end with an even digit\n    for perm in all_perms:\n        if perm[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    # Initialize the smallest number to an impossible high to ensure a minimum can be found\n    smallest_number = float('inf')\n    \n    # Loop through all possible tens digits (1 through 9)\n    for tens in range(1, 10):\n        # Calculate the ones digit by subtracting the tens digit from the sum 15\n        ones = 15 - tens\n        # If ones is between 0 and 9, it is a valid digit\n        if 0 <= ones <= 9:\n            # Construct the two-digit number\n            number = tens * 10 + ones\n            # Update smallest_number if a new smaller valid number is found\n            if number < smallest_number:\n                smallest_number = number\n                \n    return smallest_number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_apples = 8\n    initial_mean_weight = 50\n    new_mean_weight = 52\n    new_apples = initial_apples + 1\n\n    total_initial_weight = initial_apples * initial_mean_weight\n    total_new_weight = new_apples * new_mean_weight\n\n    extra_apple_weight = total_new_weight - total_initial_weight\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # A bulb ends up on if it is switched an odd number of times.\n    # A bulb is switched once for each of its factors since each person\n    # toggles the switch for multiples of their number.\n    # The bulbs that are switched an odd number of times are those with odd numbers of factors.\n    # Only perfect squares have an odd number of factors.\n    \n    # Find perfect squares up to 250\n    count = 0\n    for i in range(1, 251):\n        if (i ** 0.5).is_integer():\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n\n    average = (first_term + last_term) / 2\n    \n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    \n    current_date = start_date + one_year\n    \n    while current_date.weekday() != 0: # 0 is Monday\n        if current_date.year % 4 == 0: # Leap year check\n            if current_date.year % 100 == 0:\n                if current_date.year % 400 == 0:\n                    current_date += one_day # Leap year\n        else:\n            if (current_date + one_day).month == 2 and (current_date + one_day).day == 29:\n                current_date += one_day # Leap year\n\n        current_date += one_year\n        \n    ans = current_date.year\n    return ans\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 10000):  # reasonable upper limit for search \n        dividend = 8 * divisor + 7\n        if len(str(divisor)) == len(str(dividend)):\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pages as 'p'.\n    p = symbols('p')\n    # Initial rate is 50 pages per minute.\n    initial_rate = 50\n    # Time taken at initial rate is p / initial_rate.\n    initial_time = p / initial_rate\n    # 20 more pages per minute means the new rate is 50 + 20 = 70 pages per minute.\n    new_rate = initial_rate + 20\n    # Time taken at new rate is p / new_rate. It's also 2 minutes less than the initial_time.\n    new_time = p / new_rate\n\n    # The equation representing the time difference.\n    time_difference_eq = Eq(initial_time - new_time, 2)\n    \n    # Solve the equation to find 'p'.\n    solution = solve(time_difference_eq, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time from 6:30 to 7:30 is 1 hour\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Walking time from 7:30 to 9:30 is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    saving_days = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = (original_amount + daily_savings * saving_days - lent_to_brother - spent_on_snacks)\n\n    return current_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900  # total length of expressway in meters\n    companies = 4  # number of construction companies\n    days = 5  # number of days taken by all companies to build the expressway\n\n    # Calculate the work done by one company in one day\n    meters_per_company_per_day = total_expressway / (companies * days)\n    \n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.1 * normal_cost\n    discounted_cost = normal_cost - discount\n    members = 30\n    cost_per_member = discounted_cost / members\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_price = 80  # in cents\n    additional_rate = 5  # cents per minute\n    total_price = 140  # in cents (1.4 dollars)\n\n    # Initial 15 minutes cost\n    if total_price == base_price:\n        return 15\n    else:\n        # Calculate additional minutes\n        additional_minutes = (total_price - base_price) / additional_rate\n        return 15 + int(additional_minutes)\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Coefficient of the variable is 4\n    # Right hand side (rhs) of the equation is 55\n    # Left hand side (lhs) of the equation is subtracted by 13\n    \n    # Rearrange the equation to solve for the variable\n    # 4 * variable - 13 = 55\n    # Add 13 to both sides of the equation\n    # 4 * variable = 55 + 13\n    # Divide both sides by the coefficient 4\n    # variable = (55 + 13) / 4\n\n    variable = (55 + 13) // 4\n    return variable\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Let's try to find a pattern based on the given examples:\n    # The pattern seems to be that the second number is subtracted from the product of the two numbers\n    # 4 * 7 - 7 = 21\n    # 6 * 22 - 22 = 20\n    # 8 * 30 - 30 = 26\n    # Now we apply the same logic to find 9 ◈ 20\n    ans = 9 * 20 - 20\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5  # Find the first multiple of 5 greater than 56\n    last_multiple = 120 // 5 * 5  # Find the last multiple of 5 less than or equal to 120\n\n    if last_multiple < first_multiple:  # If no multiples in the range, return 0\n        return 0\n\n    num_multiples = (last_multiple - first_multiple) // 5 + 1  # Calculate the number of multiples\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    gina_birth_year = 2005 - 50\n    james_birth_year = 1997 - 20\n    year_when_gina_was_35 = gina_birth_year + 35\n    james_age_when_gina_was_35 = year_when_gina_was_35 - james_birth_year\n\n    return james_age_when_gina_was_35\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # We know that the last digit of a number in base 10 depends on the last digit of its factors.\n    # For the expression (2^2017) * (3^2017), the last digit cycles in a known pattern.\n    # For 2: 2 -> 4 -> 8 -> 6 and then back to 2 (cycle of 4)\n    # So the last digit after 2^2017 will be the same as 2^(2017 mod 4)\n    \n    # For 3: 3 -> 9 -> 7 -> 1 and then back to 3 (cycle of 4)\n    # So the last digit after 3^2017 will be the same as 3^(2017 mod 4)\n    \n    # To find the last digit of the entire expression, we find the last digit of each part and multiply them.\n    last_digit_2_power = pow(2, 2017 % 4, 10)  # Second argument is the exponent, third is the modulus (for last digit)\n    last_digit_3_power = pow(3, 2017 % 4, 10)  # Same procedure for 3\n\n    # Now multiplying the last digit of both:\n    last_digit_of_expression = (last_digit_2_power * last_digit_3_power) % 10  # Modulus to ensure it's the last digit\n\n    return last_digit_of_expression\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return int(\"10034\")\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # 1 whole consists of 4 quarters\n    # So 2 wholes consist of 2 * 4 = 8 quarters\n    # 1/2 consist of 1/2 * 4 = 2 quarters\n    # Thus, 2 wholes and 1/2 (2 1/2) consist of 8 + 2 = 10 quarters\n    ans = 2 * 4 + 1/2 * 4\n    return int(ans)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy is the 5th from the front\n    # Eddie is the 9th from the back\n    # There are 2 people standing between Lucy and Eddie\n    # Therefore, the total people in the line is the sum of:\n    # - Number of people in front of Lucy (Lucy's position - 1)\n    # - Lucy herself\n    # - 2 people between Lucy and Eddie\n    # - Eddie himself\n    # - Number of people behind Eddie (Eddie's position - 1)\n    \n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n    \n    total_people = (lucy_position - 1) + 1 + people_between + 1 + (eddie_position - 1)\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    # Loop through possible values of B (0-9) to find the one that makes the number divisible by 13\n    for B in range(10):\n        num = int(f\"26{B}789\")\n        if num % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    primes = [2, 3, 5, 7] # list of prime numbers\n\n    # Try all permutations of the prime numbers and solve the modular equations\n    # Equation form: number % divisors[i] == primes[i]\n    divisors = [3, 5, 7, 8]\n\n    ans = float('inf')  # Start with infinity, we are looking for the minimum\n    \n    # We will use the itertools module to permute the prime numbers\n    from itertools import permutations\n    for permutation in permutations(primes):\n        # solve_congruence accepts congruences in the form of (remainder, modulo)\n        congruences = [(permutation[i], divisors[i]) for i in range(4)]\n        # attempt to solve these congruences\n        result = solve_congruence(*congruences)\n        if result is not None:\n            # if there's a solution, update the answer if it's smaller than the current\n            number, _ = result\n            if number < ans:\n                ans = number\n\n    return ans\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    # Convert the total length from m and cm to cm\n    total_length_cm = (11 * 100) + 74\n    \n    # Subtract the length used for the dress in cm\n    remaining_length_cm = total_length_cm - ((5 * 100) + 8)\n\n    # Divide the remaining length by 9 to get the length of each stripe in cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    # Convert the length of each stripe back to m and cm\n    stripe_length_m = int(stripe_length_cm // 100)\n    stripe_length_remaining_cm = int(stripe_length_cm % 100)\n    \n    # The length of each stripe in m and cm\n    ans = (stripe_length_m, stripe_length_remaining_cm)\n    \n    return ans\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    final_result = 35\n    added_number = 4\n    multiplied_by = 7\n    subtracted_number = 21\n    \n    initial_number = (final_result + subtracted_number) / multiplied_by - added_number\n    \n    return int(initial_number)\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # create equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    equation2 = Eq(orchids / tulips, 3/5)\n    \n    # calculate the flowers left after selling\n    flowers_left = 3616 - (0.4 * orchids + tulips / 5 + 0.25 * roses)\n    \n    # create the third equation\n    equation3 = Eq(flowers_left, 2644)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of right-handed girls occurs when all non-right-handed pupils are girls.\n    # This means the left-handed pupils are girls.\n    left_handed = total_pupils - right_handed\n    \n    # Now, the remaining girls must be right-handed.\n    right_handed_girls = girls - left_handed\n    \n    # If there are more left-handed kids than girls, then all girls are right-handed\n    right_handed_girls = max(right_handed_girls, 0)\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols for number of books and files\n    books, files = symbols('books files')\n    \n    # equation for total cost\n    eq1 = Eq(12 * books + 9 * files, 336)\n    \n    # equation for the number of books bought compared to files\n    eq2 = Eq(books, files + 14)\n    \n    # solve the equations\n    solutions = solve((eq1, eq2), (books, files))\n    \n    # return the number of books\n    return solutions[books]\n\n# calculate the final answer by calling the function\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    # Let's assume 'c' is the number of chickens and 'r' is the number of rabbits.\n    # Each chicken has 2 legs and each rabbit has 4 legs.\n    # We have two equations based on the problem statement:\n    # c + r = 10 (total number of chickens and rabbits)\n    # 2c + 4r = 34 (total number of legs)\n    # We can solve these equations to find the value of 'c', the number of chickens.\n    \n    total_animals = 10\n    total_legs = 34\n    \n    # Rearranging the first equation to express 'r' in terms of 'c':\n    # r = total_animals - c\n    # Substituting 'r' in the second equation:\n    # 2c + 4(total_animals - c) = total_legs\n    # 2c + 40 - 4c = 34\n    # -2c = 34 - 40\n    # -2c = -6\n    # c = -6 / -2\n    # c = 3 <-- This is the number of chickens.\n\n    # Since we can solve this algebraically, we'll implement it directly:\n    c = (4 * total_animals - total_legs) // 2\n\n    return c\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    powers_last_digit = [pow(i, 2013, 10) for i in range(1, 10)]\n    sum_of_last_digits = sum(powers_last_digit)\n    ans = sum_of_last_digits % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    # Grandma's age has to satisfy two conditions:\n    # (1) When divided by 6, there is a remainder of 2.\n    # (2) When divided by 7, there is a remainder of 5.\n\n    for age in range(30, 121):   # Age is between 30 and 120 (inclusive)\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario: Peter takes one of each color\n    max_different_socks = 3\n\n    # To guarantee two socks of the same color, take one more after the worst case\n    socks_needed = max_different_socks + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime(year=1, month=7, day=2, hour=20)  # 8pm on the 2nd\n    arrival_time = datetime(year=1, month=7, day=3, hour=1)  # 1am on the 3rd\n    # Adjust for time zone difference (+7 hours to convert France time to Japan time)\n    adjusted_arrival_time = arrival_time + timedelta(hours=7)\n\n    flight_duration = adjusted_arrival_time - departure_time\n    return flight_duration.total_seconds() // 3600  # convert seconds to hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    \n    # Count digits for each group of page numbers: 1-9, 10-99, 100-131\n    pages_single_digit = 9\n    pages_double_digits = 90\n    pages_triple_digits = 131 - 99\n\n    # Calculate the number of digits for each group\n    digits += pages_single_digit * 1        # Each page from 1 to 9 has 1 digit\n    digits += pages_double_digits * 2       # Each page from 10 to 99 has 2 digits\n    digits += pages_triple_digits * 3       # Each page from 100 to 131 has 3 digits\n    \n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    marks_for_correct = 4\n    marks_penalized_for_wrong = 1\n    score = 168\n    unattempted_questions = 3\n\n    attempted_questions = total_questions - unattempted_questions\n    # Let x be the number of correct answers. Then, (attempted_questions - x) is the number wrong.\n    # The total score is therefore (4 * correct_answers) - (1 * wrong_answers) = score.\n    # We can set up the equation: 4x - (attempted_questions - x) = score and solve for x.\n    \n    # Rearrange the equation to isolate x\n    # 4x - attempted_questions + x = score\n    # 5x - attempted_questions = score\n    # 5x = score + attempted_questions\n    # x = (score + attempted_questions) / 5\n    \n    correct_answers = (score + attempted_questions) / (marks_for_correct + marks_penalized_for_wrong)\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are three choices for each digit (0, 1, 2)\n    # For 2-digit number, the first digit can't be 0 as it would be a single-digit number\n    # So there are 2 choices for the first digit (1 or 2)\n    # For the second digit, there are 3 choices (0, 1, 2) as 0 can be used here\n    num_ways_first_digit = 2\n    num_ways_second_digit = 3\n    total_numbers = num_ways_first_digit * num_ways_second_digit\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x.\n    # Then the next four consecutive even numbers will be x+2, x+4, x+6, x+8.\n    # The sum of these five consecutive even numbers (arithmetic sequence) is 200.\n    # So, x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 200.\n    # Hence, 5x + 20 = 200\n    # Solving for x gives us x = (200 - 20) / 5.\n\n    x = (200 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the volume of sugar solution transferred\n    x = symbols('x')\n\n    # Initial amounts of sugar in each container\n    sugar_A = 0.10 * 50\n    sugar_B = 0.20 * 30\n\n    # The weight of the water remains after transferring x grams\n    water_A = 50 - x\n    water_B = 30 - x\n\n    # The amount of sugar remains in A and is transferred to B\n    sugar_A_new = sugar_A - 0.10 * x\n    sugar_B_new = sugar_B + 0.10 * x\n\n    # The concentration of sugar in both containers is the same after transferring\n    concentration_A = sugar_A_new / water_A\n    concentration_B = sugar_B_new / water_B\n\n    # Setup the equation based on the fact that the concentration is the same\n    equation = Eq(concentration_A, concentration_B)\n\n    # Solve for the volume of sugar solution transferred\n    solution_volume = solve(equation, x)\n\n    return solution_volume[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    # Initialize variables\n    numerator = 1\n    denominator = 1\n    sum_series = 0\n\n    # Iterate over the terms of the series\n    for i in range(4, 101):  # Start from 4 because the first term is equivalent to 100/97 with 100*99*98*...*4/97*96*95*...*1\n        numerator *= i\n        denominator *= (i - 3)\n        sum_series += numerator / denominator\n\n    # Add the first term which is 100/97\n    sum_series += 100 / 97\n\n    return sum_series\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    sections_for_5_cuts = 5\n    time_for_5_cuts = 8  # 8 minutes to cut into 5 sections\n\n    # To cut into 6 sections, Katie needs to make 5 cuts\n    # Time taken for 1 cut is 8 minutes divided by the 4 cuts made to get 5 sections\n    time_per_cut = time_for_5_cuts / (sections_for_5_cuts - 1)\n\n    # Katie needs to make 6 cuts to get 7 sections\n    time_for_6_cuts = time_per_cut * 6\n\n    return int(time_for_6_cuts)\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_peter = 35\n    votes_other = 22 + 27\n\n    votes_needed = (total_votes // 2) + 1  # Majority need to win the election\n    additional_votes_peter_needs = votes_needed - votes_peter\n\n    return additional_votes_peter_needs\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls + 7, boys)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Compare the units digit of both numbers\n    num1 = 31\n    num2 = 32\n\n    # Get the units digits\n    unit1 = num1 % 10\n    unit2 = num2 % 10\n\n    # Find the number with the highest value of units\n    if unit1 > unit2:\n        ans = num1\n    else:\n        ans = num2\n    \n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # ￡4.90 is equal to 490p\n    # Let's denote the number of each type of coin as n.\n    # We know that there are equal numbers of 5p, 10p, and 20p coins.\n    # Therefore, the total amount is n*(5+10+20), which simplifies to n*35.\n    # We need to find n such that n*35 = total_amount.\n    n = total_amount // 35\n\n    # Since there are equal numbers of each type of coin, the total number of coins is 3 times n.\n    total_coins = 3 * n\n\n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # dollars\n    gift_cost = 20  # dollars\n\n    remaining_amount = initial_amount - gift_cost  # dollars\n    remaining_amount_cents = remaining_amount * 100  # cents\n\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * (1 + rate) ** time\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    digits = 0\n    \n    # 1-digit page numbers: 1 to 9\n    digits += 9\n    \n    # 2-digit page numbers: 10 to 99\n    digits += (99 - 10 + 1) * 2\n    \n    # 3-digit page numbers: 100 to 185\n    digits += (185 - 100 + 1) * 3\n    \n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    yearly_salary = 24000\n    pay_rise_percentage = 0.10\n    new_yearly_salary = yearly_salary * (1 + pay_rise_percentage)\n    new_monthly_salary = new_yearly_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Using the formula for the sum of an arithmetic series: S_n = (n/2)*(a_1 + a_n),\n    # where S_n is the sum of the n terms, a_1 is the first term, and a_n is the nth term.\n    # In this case, S_9 = 135, n = 9, and the common difference d = 3.\n\n    # Let's denote the first day's number of sweets as a_1.\n    # We have S_9 = (9/2) * (a_1 + a_9) = 135\n    # Since each day he eats 3 more sweets than the day before, a_9 = a_1 + 8 * 3\n    # We can set up a system of equations to solve for a_1:\n    # (9/2) * (a_1 + a_1 + 8*3) = 135\n    # 9 * a_1 + 9*8*3/2 = 135\n    # 9 * a_1 + 108 = 135\n    # 9 * a_1 = 27\n    # a_1 = 3\n\n    # Now that we have the first day's number of sweets, we can find the last day's\n    a_1 = 3\n    a_9 = a_1 + 8 * 3\n\n    return a_9\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Using a brute-force method to iterate through all possible days and months\n    for month in range(1, 13): # since there are 12 months\n        for day in range(1, 32): # the maximum number of days in a month is 31\n            if month * 31 + day * 12 == 376:\n                # Format the date as \"ddmm\"\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Using the distributive property: a*b = c*b + d*b\n    # => d*b = a*b - c*b\n    # => d = (a - c)\n    a = 4.08\n    c = 1.08\n    d = a - c  # Calculate the missing number\n\n    return d\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    # Initialize the sequence array\n    sequence = []\n    # Populate the sequence with the specified pattern\n    for i in range(119, 98, -2):\n        sequence.append(i if (i - 119) % 4 == 0 else -i)\n    # Compute the sum of the sequence\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = cost_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 0.30  # in pounds (30p = 0.30 pounds)\n    \n    # Discounts\n    discount_calculator = 0.25  # 25% discount\n    discount_protractor = 0.50  # 50% discount\n    \n    # Calculate the sale prices\n    sale_price_calculator = calculator_price * (1 - discount_calculator)\n    sale_price_protractor = protractor_price * (1 - discount_protractor)\n    \n    # David's purchases\n    num_calculators = 8\n    num_protractors = 20\n    \n    # Total cost\n    total_cost = (sale_price_calculator * num_calculators) + (sale_price_protractor * num_protractors)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    tom_milk = (milk_needed / flour_needed) * tom_flour\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let's denote:\n    # y = age of the younger elephant this year\n    # o = age of the older elephant this year\n\n    y = 18  # given age of the younger elephant this year\n\n    # The difference in age between the older and younger elephant will remain constant.\n    # Therefore, when the younger elephant is o years old, the difference in age will\n    # be the same as it is now, so the older elephant will have aged the same amount\n    # of years and will be 62 years old.\n\n    # We can set up an equation based on the above explanation:\n    # o (older elephant's current age) - y (younger elephant's current age) = 62 - o (when the younger elephant will be the older elephant's current age)\n    # We can then solve for o.\n\n    # Rearrange the equation:\n    # 2 * o = 62 + y\n    # o = (62 + y) / 2\n\n    o = (62 + y) / 2\n\n    return int(o)\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # x oxen * y weeks = constant work\n    work_done = 27 * 6  # Total work done by 27 oxen in 6 weeks\n    # 23 oxen can finish the same work in 9 weeks\n    # So, work_done equals 23 oxen * 9 weeks\n    # Therefore, work_done also equals 21 oxen * z weeks, where z is the number of weeks we want to find\n    # Solving for z:\n    z = work_done / 21\n    return z\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = 1 / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    result = (2/3) * 1.194 * 1000  # Convert tonnes to kilograms and find two-thirds\n    return result\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Calculate the time Ellen rides the bike\n    bike_time_hours = 1 # from 7:30 AM to 8:30 AM\n\n    # Calculate the distance Ellen travels on the bike\n    bike_speed_mph = 10\n    bike_distance = bike_speed_mph * bike_time_hours\n\n    # Calculate the time Ellen spends on the train\n    train_time_hours = 2 # from 8:30 AM to 10:30 AM\n\n    # Calculate the distance Ellen travels on the train\n    train_speed_mph = 50\n    train_distance = train_speed_mph * train_time_hours\n\n    # Calculate the total distance Ellen travels\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from sympy.functions.combinatorial.numbers import stirling\n    # The number of ways to partition five balls into three boxes (partitions of an integer)\n    # with some boxes possibly being empty is given by the Stirling number of the second kind\n    # S(n, k) counts the ways to partition a set of n objects into k non-empty containers\n    # As some boxes can be empty, we need to consider all possible non-empty partition counts (1 to 3)\n    \n    # For 1 box, it's just 1 way (all balls in one box)\n    # For 2 boxes, we have to consider having 1 ball in one box and 4 in another,\n    # or 2 balls in one box and 3 in another.\n    # For 3 boxes, each box may have any number of balls.\n    \n    total_ways = 0\n    for i in range(1, 4):\n        total_ways += stirling(5, i)\n    \n    return total_ways\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is the 3rd from front and 2nd from back, that means there are 3 + 1 rows.\n    rows = 3 + 1\n\n    # Lucas is the 4th from left to right and 3rd from right to left, that means there are 4 + 2 columns.\n    columns = 4 + 2\n\n    # Total students in the rectangular array is the product of rows and columns.\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_percentage = 25\n    original_price = sale_price / (1 - (discount_percentage / 100))\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    number = 217\n    while digit_sum(number) != 9:\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Initializing with the first term\n    for denominator in range(2, 11):\n        for numerator in range(1, denominator + 1):\n            ans += numerator / denominator\n        for numerator in range(denominator - 1, 0, -1):\n            ans += numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # From the front to back, Lucas is 3rd, therefore,\n    # there must be 2 people in front of him.\n    # Since he is second from the back, there is 1 person behind him.\n    # So, the total in this direction is 2 (in front) + 1 (Lucas) + 1 (behind) = 4\n\n    front_back_total = 2 + 1 + 1\n\n    # From left to right, Lucas is 4th, therefore,\n    # there are 3 people on his left.\n    # Since he is third from the right, there are 2 people on his right.\n    # So, the total in this direction is 3 (on left) + 1 (Lucas) + 2 (on right) = 6\n\n    left_right_total = 3 + 1 + 2\n\n    # The total number of students is the product of\n    # the number of people from front to back and from left to right.\n\n    total_students = front_back_total * left_right_total\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio condition: girls = (9/11) * boys\n    eq1 = Eq(girls, (9/11) * boys)\n    \n    # After transferring 2 girls: girls + 2 = (10/11) * boys\n    eq2 = Eq(girls + 2, (10/11) * boys)\n\n    # Solve the simultaneous equations\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    # Calculate the total number of students now\n    total_students_now = solutions[boys] + solutions[girls] + 2\n\n    return total_students_now\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    equation = 2 * (3 * x - y) - (2 * x + 4)\n\n    sol = solve(equation, (x, y))\n\n    return sol[2*x - y]\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    change_pence = 500 - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    lim, tan = symbols('lim tan')\n\n    # The equations based on the problem statement\n    equation1 = Eq(lim + tan, 390)   # Total tiles equation\n    equation2 = Eq(lim, 5 * tan)     # Mr Lim has 5 times as many tiles as Mr Tan\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lim, tan))\n    \n    # Calculate the difference in the number of tiles\n    difference = solutions[lim] - solutions[tan]\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_now = symbols('zehan_now')\n    zehan_future = zehan_now + 12\n    \n    equation = Eq(zehan_future, 3 * zehan_now)\n\n    zehan_current_age = solve(equation, zehan_now)\n\n    return zehan_current_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total ways to choose 5 students from 15 without restriction\n    total_ways = comb(15, 5)\n    \n    # Ways to choose 5 students with none of A, B or C\n    ways_with_none = comb(12, 5)\n    \n    # Ways to choose 5 students with all of A, B and C\n    ways_with_all = comb(12, 2)\n    \n    # We subtract the number of ways where none or all are chosen from the total\n    ans = total_ways - ways_with_none - ways_with_all\n    \n    return ans\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    value = 0.36\n    percent_value = value * 100\n    return percent_value\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    # let x be the original amount of lemon juice\n    # let y be the original amount of water\n    # we know lemon juice to water is in the ratio 2:3, so x/y = 2/3\n    # after adding 80ml of lemon juice, the new ratio is x+80/y = 6/5\n    # need to solve for x in terms of the given ratios and new amounts\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    original_ratio = Eq(x / y, 2 / 3)\n    new_ratio = Eq((x + 80) / y, 6 / 5)\n\n    # solve the system of equations for x and y\n    solution = solve((original_ratio, new_ratio), (x, y))\n\n    # we are only interested in the value of x, which is the amount of lemon juice\n    return solution[x]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    return 6 * 3\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's share of sweets is 6 units if Savannah's share is 5 units.\n    # Shaila received 36 sweets, which corresponds to 6 units.\n    # Therefore, 1 unit is 36 / 6 = 6 sweets.\n    unit = 36 / 6\n\n    # The total number of sweets (Savannah's 5 units + Shaila's 6 units) is:\n    total_sweets = unit * (5 + 6)\n\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total savings Kim originally had\n    x = symbols('x')\n\n    # Kim gave 1/3 of savings to her mother\n    gave_to_mother = x / 3\n\n    # Kim bought dresses for £177 and earrings for £129\n    spent_on_dresses_and_earrings = 177 + 129\n\n    # Amount left is 50% of what she gave her mother\n    amount_left = gave_to_mother / 2\n\n    # Total amount left after her spending is equal to her savings\n    # minus what she gave her mother and what she spent on dresses and earrings\n    equation = Eq(x - gave_to_mother - spent_on_dresses_and_earrings, amount_left)\n\n    # Solve the equation to find x\n    savings = solve(equation, x)\n\n    return savings[0]  # We return the first (and only) solution\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Using Inclusion-Exclusion Principle\n    both_languages_teachers = (french_teachers + japanese_teachers) - total_teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Equation representing the relationship between their money\n    equation1 = Eq(ema, keng_wee - 360)\n\n    # Equations representing how much each spent\n    equation2 = Eq(ema - ema / 4, keng_wee - (4 / 7) * keng_wee)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase in speed\n    delay_time_in_hours = 9 / 60  # 9 minutes delay converted to hours\n\n    # If a car travels at the increased speed for the time it would have at the usual speed minus the delay,\n    # it covers the same distance. Thus, time = distance/speed, and\n    # usual_time - delay_time = increased_distance/increased_speed\n    # Since increased_distance = usual_distance (the car has to cover the same distance),\n    # we have usual_speed * usual_time = increased_speed * (usual_time - delay_time)\n    # Solving for usual_time (time the car would have taken at the usual speed):\n    usual_time = delay_time_in_hours * increased_speed / (increased_speed - usual_speed)\n    \n    # Now we calculate the distance using the formula distance = speed * time\n    distance = usual_speed * usual_time\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let the number be x\n    # According to the given statement, the equation modelling the scenario is:\n    # (((x + 8) * 8 - 8) / 8) = 80\n    # Simplifying the equation:\n    # (x + 8) * 8 - 8 = 80 * 8\n    # (x + 8) * 8 = 80 * 8 + 8\n    # x + 8 = (80 * 8 + 8) / 8\n    # x = ((80 * 8 + 8) / 8) - 8\n    # Calculate the result\n    x = ((80 * 8 + 8) / 8) - 8\n    return x\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be s (in m/min)\n    # Let the original time be t (in min)\n    s, t = symbols('s t', real=True, positive=True)\n\n    # s * t = distance (distance remains constant)\n    # Scenario 1: speed increases by 25%\n    # New speed = 1.25 * s, new time = t - 20\n    # (1.25 * s) * (t - 20) = s * t\n\n    # Scenario 2: speed decreases by 45 m/min\n    # New speed = s - 45, new time = 1.75 * t\n    # (s - 45) * (1.75 * t) = s * t\n\n    # Setting up the equations based on the scenarios\n    equation1 = Eq(1.25 * s * (t - 20), s * t)\n    equation2 = Eq((s - 45) * 1.75 * t, s * t)\n\n    # Solving the system of equations for s and t\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Assuming the solution will have only one pair of real positive values for (s, t)\n    speed, time = solutions[0]\n\n    # Now find the distance\n    distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    \n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        length = red_ropes * 2 + blue_ropes * 3\n        if length == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_second_half = 6\n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):  # 9*7 is the least common multiple of 7 and 9\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    half = 22 // 2  # Finds the midpoint for the iterations\n    count = 0\n    for i in range(1, half):\n        # Starting from 1 to half of 22, because we need two different integers\n        # and we are counting each pair only once\n        count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n\n    return total_used.simplify()\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            A = 41 + i\n            break\n    return A * 7\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= 1 + (1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of lollipops each person has\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # According to the problem, we have:\n    # y - x = 36 (the difference between the two numbers)\n    # x + y = 98 (the sum of the numbers)\n    # We can solve this system of equations for x and y\n    # From the second equation, we get y = 98 - x\n    # Substituting into the first equation, we get: 98 - x - x = 36\n    # This simplifies to 98 - 36 = 2x\n    # Thus, 2x = 62\n    # and x = 31\n    x = (98 - 36) // 2\n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = 4 ** (100 % 2)  # 4's cycle of last digits is [4, 6] so we use 100 % 2\n    last_digit_7 = 7 ** (100 % 4)  # 7's cycle of last digits is [7, 9, 3, 1] so we use 100 % 4\n    last_digit_9 = 9 ** (100 % 2)  # 9's cycle of last digits is [9, 1] so we use 100 % 2\n    last_digit_11 = 1              # 11's last digit is 1 regardless of the power because it ends in 1\n\n    last_digit_product = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_mark = 3\n    wrong_mark = -1\n    total_marks = 78\n\n    correct_answers = int(total_questions * correct_percentage)\n    wrong_answers = total_questions - correct_answers\n    marks_from_correct = correct_answers * correct_mark\n    marks_from_wrong = wrong_answers * wrong_mark\n\n    # Adjust for the correct number of wrong answers based on the total score\n    while marks_from_correct + marks_from_wrong != total_marks:\n        correct_answers -= 1\n        wrong_answers += 1\n        marks_from_correct = correct_answers * correct_mark\n        marks_from_wrong = wrong_answers * wrong_mark\n\n    return correct_answers\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # file cost - x, ruler cost - y\n    # 6x + 10y = 40\n    # We will calculate the cost for one file (x) and one ruler (y) using these equations\n    # Then we will calculate the cost for 9 files and 15 rulers using x and y\n    # We know that the relationship between files and rulers will remain constant\n    # Thus, we can find that for each file, there are 10/6 rulers\n    # and for each ruler, there are 6/10 files\n    # Therefore, for 9 files, there should be (10/6) * 9 rulers\n    # since 15 is (10/6) * 9, the cost will also be proportionally larger\n\n    cost_six_files_ten_rulers = 40\n\n    # Let's calculate the cost for one file and one ruler proportionally\n    cost_one_file = cost_six_files_ten_rulers / (6 + (10 * 6 / 10))\n    cost_one_ruler = (6 / 10) * cost_one_file\n\n    # Now we calculate the cost for 9 files and 15 rulers\n    cost_nine_files = cost_one_file * 9\n    cost_fifteen_rulers = cost_one_ruler * 15\n\n    total_cost = cost_nine_files + cost_fifteen_rulers\n\n    return total_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n\n    equation1 = Eq(john, 5/13 * jessie)\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 0\n\n    while count_1 < 15 or count_2 < 14:\n        N += 1\n        count_1 += str(N).count('1')\n        count_2 += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime('10:30', '%H:%M')\n    end_time = datetime.strptime('11:00', '%H:%M')\n\n    baking_duration = end_time - start_time\n    return baking_duration.seconds // 60\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Equation based on the ratio of T-shirts to caps\n    equation1 = Eq(t_shirts / caps, 8 / 5)\n\n    # Equation based on the amount collected from selling T-shirts and caps\n    # Siti sold 1/4 of T-shirts and 1/5 of the caps.\n    # Cost of each T-shirt was $3 and each cap was $5.\n    equation2 = Eq((t_shirts / 4) * 3 + (caps / 5) * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t_shirts, caps))\n\n    # Number of T-shirts Siti had at first\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = 3 * 12 + 5 * 11  # Calculate total cost in pence\n    payment = 200  # Payment in pence (£2 coin)\n\n    change_in_pence = payment - total_cost\n    change_in_pounds = change_in_pence / 100  # Convert pence to pounds\n\n    return round(change_in_pounds, 2)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    spacing = 2\n    num_children = 7\n    youngest_age = 7\n    # Using arithmetic sequence formula: a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, n is the term number and d is the common difference\n    harvirs_age = youngest_age + (num_children - 1) * spacing\n    return harvirs_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    # Prices of the items\n    calendar_price = 6.97\n    ball_price = 2.99\n    \n    # Total amount spent\n    total_spent = calendar_price + ball_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    # Norah used 1/5 kg for muffins\n    muffins_flour_kg = 1/5\n    \n    # Norah used 1/2 kg for cookies\n    cookies_flour_kg = 1/2\n    \n    # Norah had 360 g left, converting to kg\n    remaining_flour_kg = 360 / 1000\n    \n    # Calculate the initial amount of flour\n    initial_flour_kg = muffins_flour_kg + cookies_flour_kg + remaining_flour_kg\n    \n    return initial_flour_kg\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Convert pounds to pence for 5 pounds\n    total_pence = 500  \n\n    # Initialize the count of how many combinations possible\n    count = 0  \n    orange_price = 26\n    lemon_price = 30\n\n    # Use a nested loop to try every combination of oranges and lemons\n    for num_oranges in range(total_pence // orange_price + 1):\n        for num_lemons in range(total_pence // lemon_price + 1):\n            if (num_oranges * orange_price + num_lemons * lemon_price) == total_pence:\n                count += 1\n                oranges_and_lemons = num_oranges + num_lemons\n\n    return oranges_and_lemons\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # Since sitting around a circular table is equivalent to fixing one person's position\n    # and arranging the others, the number of different orders is (4-1)!.\n    num_people = 4\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    # Define the operation functions\n    def operation_mult(a, b):\n        return 3 * a - 2 * b\n\n    def operation_delta(a, b):\n        return 3 * a + 2 * b\n\n    # Calculate the answer step-by-step\n    result1 = operation_delta(3, 4)\n    result2 = operation_mult(result1, 5)\n    ans = operation_delta(result2, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of male and female visitors on the first day\n    male, female = symbols('male female')\n\n    # On the first day, the number of male visitors was 450 more than the female visitors\n    equation1 = Eq(male - female, 450)\n\n    # On the second day, female visitors increased by 15%\n    # and male visitors decreased by 18%\n    # The total number of visitors was 1354\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n\n    # Solve the equations to find the number of male and female visitors\n    solutions = solve((equation1, equation2), (male, female))\n\n    # The total number of visitors on the first day is male + female\n    total_visitors_first_day = solutions[male] + solutions[female]\n\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo - 220, jason)\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    schoolbooks = 2\n\n    # Calculate permutations considering the indistinguishable groups\n    total_permutations = factorial(total_books)\n    permutations_biographies = factorial(biographies)\n    permutations_science_fictions = factorial(science_fictions)\n    permutations_magazines = factorial(magazines)\n    permutations_schoolbooks = factorial(schoolbooks)\n\n    # Division principle to account for indistinguishable objects\n    ans = total_permutations // (permutations_biographies * permutations_science_fictions * permutations_magazines * permutations_schoolbooks)\n\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        a, b, c, d, e = p\n        if a == 0 or c == 0:  # A and C cannot be zero as they are the first digits of the numbers\n            continue\n        num1 = a * 10**4 + b * 10**3 + c * 10**2 + c * 10 + b  # ABC + CBA = EF * DE\n        num2 = d * 10 + e\n        if num1 == num2 * (d * 10 + e):\n            return num1\n            \nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencils are identical and the pencil cases are identical,\n    # we are essentially looking for the number of partitions of 7\n    # into at most 3 parts. This is a problem of distributing 7 indistinguishable\n    # items into 3 indistinguishable boxes.\n\n    # Ways to do so:\n    # 7 = 7+0+0 (1 way)\n    # 7 = 6+1+0 (1 way)\n    # 7 = 5+2+0 (1 way)\n    # 7 = 5+1+1 (1 way)\n    # 7 = 4+3+0 (1 way)\n    # 7 = 4+2+1 (1 way)\n    # 7 = 3+3+1 (1 way)\n    # 7 = 3+2+2 (1 way)\n    # So there are 8 ways in total.\n\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    total_robots = robots_per_day * days_in_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    step = 9\n    last_positive_number = starting_number % step\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6\n    friends_count = 5\n    cost_per_friend = total_cost / friends_count\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15\n    x, y = symbols('x y')\n\n    # Equation for the total number of children\n    equation1 = Eq(x + y, 50)\n\n    # Equation for the total amount paid\n    equation2 = Eq(10 * x + 15 * y, 555)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Define variables for the problem\n    distance = 3700  # total distance David walks\n    initial_speed = 150  # initial speed in metres per minute\n    increased_speed = 200  # speed after increase\n    delay = 10  # delay time in minutes before he increases his speed\n    \n    # Calculate the distance David walks at initial speed\n    distance_at_initial_speed = initial_speed * delay\n    \n    # The remaining distance David walks at the increased speed\n    remaining_distance = distance - distance_at_initial_speed\n    \n    # Calculate the time he spends walking at the increased speed\n    time_at_increased_speed = remaining_distance / increased_speed\n    \n    # Total time he spent walking\n    total_time = delay + time_at_increased_speed\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of male and female visitors on the first day\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # Equation for the difference in the number of male and female visitors on the first day\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # Define the number of visitors on the second day according to the percentages given\n    male_second_day = male_first_day - 0.18 * male_first_day\n    female_second_day = female_first_day + 0.15 * female_first_day\n\n    # Equation for the total number of visitors on the second day\n    equation2 = Eq(male_second_day + female_second_day, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    # Since every time we remove the odd-numbered students, the order of the remaining\n    # students will be 2, 4, 6, ..., and can be considered as 1, 2, 3, ... if we divide by 2.\n    # This process is repeated until one student remains.\n    # The position of the last student can be represented as 2^x, where x is the number\n    # of times the process is done and 2^x should not exceed the number of students.\n    # The largest x that satisfies 2^x <= 40 is what we're looking for.\n\n    n = 40\n    power_of_two = 1\n\n    while power_of_two * 2 <= n:\n        power_of_two *= 2\n\n    return power_of_two\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London\n    time_difference = 7\n    \n    # The plane took off at 05:00 Singapore time, which is equivalent to 22:00 (-7 hours) the previous day in London time\n    takeoff_time_in_london = 22\n    \n    # It landed at 11:00 London time\n    landing_time_in_london = 11\n    \n    # Calculate the flight duration considering the time rolled over from the previous day\n    if landing_time_in_london < takeoff_time_in_london:\n        # Time crossed over midnight\n        flight_duration = (24 - takeoff_time_in_london) + landing_time_in_london\n    else:\n        # Normal calculation of time difference\n        flight_duration = landing_time_in_london - takeoff_time_in_london\n    \n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways_to_arrange = factorial(total_cards)\n    ways_to_arrange //= (factorial(4) * factorial(3) * factorial(7))\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # the smallest multiple of 5\n    second_digit = 1  # the smallest odd number among the natural numbers\n    third_digit = 9  # in a single digit, the largest odd number\n    fourth_digit = 2  # in nature, the smallest even number\n    fifth_digit = 8  # the largest single digit that is a multiple of 2\n    sixth_digit = 3  # the smallest odd number greater than 1 in nature\n    seventh_digit = 0  # a digit that makes the number a multiple of 2 and 5\n    \n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    \n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    # Initial pages read\n    first_day_pages = 20\n    # Difference in pages read per day\n    common_difference = 5\n    # Remaining pages read on the last day\n    last_day_pages = 80\n    # Total pages in the storybook\n    total_pages = 0\n\n    # Calculate total number of days\n    days = 1  # Starting from the first day\n    pages_read_till_now = first_day_pages\n\n    while pages_read_till_now < last_day_pages:\n        days += 1\n        pages_read_till_now += first_day_pages + (days - 1) * common_difference\n\n    total_days = days + 1  # Including the last day\n\n    # Calculate total pages using arithmetic series sum formula:\n    # S_n = n/2 * (2a + (n - 1)d)\n    total_pages = (total_days / 2) * (2 * first_day_pages + (total_days - 1) * common_difference)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9  # kg\n    cashew_nuts = 1/3  # kg\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's solution\n    johnnys_answer = quotient * remainder + divisor\n\n    # Correct approach: original_number = divisor * quotient + remainder\n    correct_answer = divisor * quotient + remainder\n\n    # return the correct_answer and a boolean indicating whether Johnny was right or wrong\n    return correct_answer, johnnys_answer == correct_answer\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))  # Sum of numbers added\n    sum_negative = sum(range(2, 53, 4))  # Sum of numbers subtracted\n\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    # Loop to find the smallest number that satisfies all the conditions\n    num = 1\n    while True:\n        # Check remainders for each division\n        if num % 6 == 3 and num % 7 == 4 and num % 8 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for digits 0-9\n    S, A, M, O, G = symbols('S A M O G', integer=True)\n    \n    # Define the range for each digit (0 to 9)\n    constraints = [\n        (S >= 1) & (S <= 9),  # S cannot be zero as it is the initial digit of a 5 digit number\n        (A >= 0) & (A <= 9),\n        (M >= 0) & (M <= 9),\n        (O >= 0) & (O <= 9),\n        (G >= 0) & (G <= 9),\n        # All digits should be different\n        (S != A) & (S != M) & (S != O) & (S != G),\n        (A != M) & (A != O) & (A != G),\n        (M != O) & (M != G),\n        (O != G)\n    ]\n\n    # Define the equation SASMO * 4 = OGAMS\n    equation = Eq(S*10000 + A*1000 + S*100 + M*10 + O, 4*(O*10000 + G*1000 + A*100 + M*10 + S))\n    \n    # Compute the solution using the equation and constraints\n    for sol in solve((equation,) + tuple(constraints)):\n        # Check if the solution dictionary is valid (all values are integers)\n        if all(isinstance(n, int) for n in sol.values()):\n            # Compute the SASMO number with the solved digits\n            sasmo = sol[S]*10000 + sol[A]*1000 + sol[S]*100 + sol[M]*10 + sol[O]\n            return sasmo\n    \n    return None\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    # Let's denote the number of boys as b, and number of girls as g.\n    # We have two equations:\n    # 1) b + g = 40 (total number of students)\n    # 2) 4b = 3g + 62 (boys distributed 62 more bags than girls)\n\n    # From 1) we express g = 40 - b\n    # Substituting g in 2) --> 4b = 3(40-b) + 62\n\n    # Now we solve for b\n    b = symbols('b')\n    equation = Eq(4*b, 3*(40-b) + 62)\n\n    solutions = solve(equation, b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Calculate the count of numbers before the first 11\n    count = sum(range(1, 11))\n    # Since the sequence is repeating each number n times, we know that the median will be the middle number.\n    # In case of an even number count, since the numbers are repeating n times, and increasing, the median will be the average of the two middle numbers.\n    if count % 2 == 1:\n        # Odd case: Find the number by dividing the total count by 2 and adding 1\n        median_pos = count // 2 + 1\n        # Find the medain according to its position\n        median = next(n for n in range(1, 11) if median_pos - n <= 0)\n    else:\n        # Even case: Find the numbers at positions count/2 and count/2 + 1\n        median_pos1, median_pos2 = count // 2, count // 2 + 1\n        # Find the two median numbers according to their positions\n        median1 = next(n for n in range(1, 11) if median_pos1 - n <= 0)\n        median2 = next(n for n in range(1, 11) if median_pos2 - n <= 0)\n        # Median is the average of median1 and median2\n        median = (median1 + median2) / 2\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut = symbols('cut')\n    equation = Eq((65 - cut), 3 * (29 - cut))\n\n    solution = solve(equation, cut)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n    \n    fraction_value = numerator / denominator_original\n    ans = fraction_value * denominator_new\n    \n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    dresses_cost = 6 * (7 * x)\n    skirts_cost = 3 * 35\n    total_cost = Eq(dresses_cost + skirts_cost, 441)\n\n    dress_price = solve(total_cost, x)\n\n    return dress_price[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]  # possible odd digits for each place\n    # There are 5 choices for the hundreds place, 5 for the tens place, and 5 for the ones place\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    \n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The sum converges to a pattern of (n - 1) / n for the nth term\n    # Following the observed pattern and given that there are 2011 terms:\n    k = 2011\n\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on his own\n    x = symbols('x')\n\n    # If the energetic one paints 1/12 of the house in a day, and together they paint 1/8 of the house in a day,\n    # then the lazy one paints 1/x of the house in a day. We have the equation:\n    # 1/12 + 1/x = 1/8\n\n    equation = Eq(1/12 + 1/x, 1/8)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the number of days it would take the lazy one to paint the house on his own\n    return solution[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    return remainder_sum % 3\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let l be the original length and w be the width of the rectangle\n    # New rectangle properties: length is (l + 12) and the width is the same w\n    # Perimeter of new rectangle = 2 * (l + 12) + 2w = 38\n\n    # Let's express the width in terms of the original length from the equation of the new perimeter \n    # w = (38 - 2 * (l + 12)) / 2\n\n    # Equating and simplifying, we can express the width w in terms of the original length l\n    w = (38 - 2 * l - 24) / 2\n    w = (14 - 2 * l) / 2\n    w = 7 - l\n\n    # To find the perimeter of the original rectangle, we use the formula: 2l + 2w\n    # We already know w in terms of l, so we can express the perimeter in terms of l\n    # perimeter_original = 2l + 2(7 - l) = 2l + 14 - 2l\n\n    # The l terms cancel out, so the perimeter does not depend on the length l\n    perimeter_original = 14\n\n    return perimeter_original\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = 8/9 * baby_chickens\n    roosters = 1/4 * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stamps Natasha has. \n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    \n    # The ratio of the number of stamps is 5:3.\n    equation1 = Eq(jamie_anne, 5/3 * natasha)\n    \n    # Jamie-Anne has 18 more stamps than Natasha.\n    equation2 = Eq(jamie_anne - natasha, 18)\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n    \n    # Calculate the total number of stamps.\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    total_coins = 234\n    coins_given_away = 12\n    \n    # Equation 1: Sana has 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    \n    # Equation 2: Sana and Mina have 234 coins together at first\n    equation2 = Eq(sana + mina, total_coins)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Mina's coins after giving away 12\n    mina_left = solutions[mina] - coins_given_away\n    \n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remaining_after_tuesday / bag_weight\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Assuming that the distance between each lamp post is constant\n    # If Uncle Sam passes 10 lamp posts in 50 seconds (from first to eleventh lamp post is 10 intervals),\n    # then he passes one lamp post every 5 seconds (50 seconds / 10 lamp posts)\n\n    time_per_lamp_post = 50 / 10\n\n    # After 80 seconds, the number of lamp posts he will have passed is:\n    lamp_posts_passed = 80 / time_per_lamp_post\n\n    # He starts at the first lamp post so we need to add 1 to include the starting lamp post\n    total_lamp_posts = lamp_posts_passed + 1\n\n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Calculate the number of flowers on each side without the corners\n    flowers_per_side = 6 - 1  # Subtracting 1 because the corner flowers are counted only once\n    \n    # Since there are four sides and four corners\n    total_flowers = (flowers_per_side * 4) + 4  # Adding 4 for the corner flowers\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the total items\n    total_items = symbols('total_items')\n\n    # Equations based on the problem statement\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve for the total number of items\n    total_items_solution = solve((equation), (total_items))\n\n    # Calculate the number of lemons\n    num_lemons = total_items_solution[0] - (2/3)*total_items_solution[0] - (1/9)*total_items_solution[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    hundreds_digit = 8\n    ones_digit = sum([i for i in range(1, 5) if 4 % i == 0])\n    thousands_digit = hundreds_digit + 1\n    tens_digit = hundreds_digit - ones_digit\n    final_number = 40000 + thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + ones_digit\n    \n    return final_number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_length = basketball_court_length + 56\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    return ana_discount * 100\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    from fractions import Fraction\n\n    left_bound = Fraction(3, 10)\n    right_bound = Fraction(5, 16)\n    s = 1  # We start checking for the smallest s = 1 and increase until we find the smallest s that fits the criteria.\n\n    while True:\n        found = False\n        for r in range(1, s):  # r has to be less than s to be a proper fraction\n            fraction = Fraction(r, s)\n            if left_bound < fraction < right_bound:\n                found = True\n                break\n        if found:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total_steering_wheels = total_two_days / (5/6)\n\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Maximum capacity of the bus in terms of children\n    max_children = 40\n    \n    # Number of children already on the bus\n    children_on_bus = 15\n    \n    # Remaining capacity for children\n    remaining_capacity_children = max_children - children_on_bus\n    \n    # Conversion rate from children to adults\n    conversion_rate = 40 / 24\n    \n    # Maximum number of adults that can be carried with the remaining capacity for children\n    max_adults = remaining_capacity_children / conversion_rate\n    \n    # Since we need to find the greatest number of adults, we take the floor of the result as we can't have a fraction of an adult\n    return int(max_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n    mult = 1\n    for factor, power in factors.items():\n        if power % 2 != 0:\n            mult *= factor\n    return mult\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_to_cook_one_batch = 3  # minutes\n    pancakes_per_batch = 2\n    total_time_available = 12  # minutes\n\n    batches_in_total_time = total_time_available / time_to_cook_one_batch\n    total_pancakes = batches_in_total_time * pancakes_per_batch\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n\n    # Apply the Pigeonhole Principle\n    min_students_same_size = (num_students + num_sizes - 1) // num_sizes\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_op(a, b):\n        return (a + 2) / b\n\n    ans = triangle_op(8, triangle_op(6, 4))\n\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    salary = symbols('salary')\n    # Let salary be the total monthly salary\n    # Amount spent on the DVD player is $740\n    # Remaining amount after buying DVD is salary - 740\n    # Then 3/4 of remaining amount is spent on TV set, which is 3/4 * (salary - 740)\n    # 1/5 of salary is left after buying both\n    # Therefore: salary - (740 + 3/4 * (salary - 740)) = 1/5 * salary\n    \n    equation = salary - (740 + (3/4 * (salary - 740))) - (1/5 * salary)\n    \n    # Solve for salary\n    salary_value = solve(equation, salary)\n\n    return salary_value[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's create a symbol for Russell's current age\n    russell_now = symbols('russell_now')\n\n    # Equation: In 32 years, Russell = 4 times Russell's age 16 years ago\n    equation = Eq(russell_now + 32, 4 * (russell_now - 16))\n\n    # Solve the equation\n    russell_age_now = solve(equation, russell_now)\n\n    return russell_age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    return (19 - 6) * 2\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = A * 1000 + B * 100 + C * 10 + A\n                bud_number = A * 1000 + C * 100 + B * 10 + A\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    A, B = symbols('A B')  # Original number of students in 6A and 6B\n    # A is (4/9) of B\n    equation1 = Eq(A, (4/9) * B)\n    # After reshuffling, A + 18 = B - 3 (they are equal in number now)\n    equation2 = Eq(A + 18, B - 3)\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    return solutions[A]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to cut a rod into 2 pieces, which means 1 cut.\n    # To cut a rod into 5 pieces, we need 4 cuts.\n    # Therefore, if 1 cut takes 2 minutes, 4 cuts will take 4 * 2 minutes.\n    \n    cuts_required = 5 - 1\n    time_per_cut = 2\n    total_time = cuts_required * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Number of spelling books on a shelf is fixed at 9\n    spelling_books_per_shelf = 9\n    # Total number of spelling books\n    total_spelling_books = 72\n    # Since each shelf can have either 4 math books or 9 spelling books\n    # First, find out how many shelves are filled with spelling books\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    # Total number of shelves\n    total_shelves = 15\n    # Shelves with math books will be total shelves - shelves with spelling books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    # Since each shelf with math books holds 4 books\n    math_books_per_shelf = 4\n    # Calculate the total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Given that Jeffrey takes 6 minutes to walk from first to fourth floor\n    # we can assume there are 3 intervals between these floors (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals_first_to_fourth = 3\n\n    # To find the time taken to walk from the first floor to the tenth floor\n    # we first find the number of intervals between these floors (1st to 2nd, ..., 9th to 10th)\n    intervals_first_to_tenth = 9  # From floor 1 to floor 10\n\n    # Now, we calculate the time taken for one interval by dividing the total time by number of intervals\n    time_per_interval = 6 / intervals_first_to_fourth\n\n    # Finally, we calculate the total time by multiplying the time per interval with the number of intervals to the tenth floor\n    total_time_first_to_tenth = time_per_interval * intervals_first_to_tenth\n\n    return total_time_first_to_tenth\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_per_biscuit = 40 / 100\n    biscuits_available = 75\n    chocolate_needed = chocolate_per_biscuit * biscuits_available\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n    return solutions[0]  # Assuming you want the positive solution\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, the 16th student is directly opposite the 8th,\n    # This means that there must be 15 students between 8th and 16th in the circle\n    # Therefore, the total number of students in the first game N1 is 16 + 15 = 31\n\n    # After more students join and they are evenly spaced,\n    # the 22nd student is now directly opposite the 8th student.\n    # This means there are 21 students between the 8th and 22nd positions.\n    # Therefore, the total number of students in the second game N2 is 22 + 21 = 43 \n\n    # Now we calculate the difference between the number of students in the two games\n    num_students_joined = 43 - 31\n\n    return num_students_joined\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate the time spent on each section of the race\n    time_first_part = 280 / 7\n    time_middle_part = 400 / 5\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Sum the times to get the total time spent\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles each had at the end\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Set up the equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    ratio_anna_betsy = Eq(anna/betsy, 2/5)\n    ratio_betsy_charlene = Eq(betsy/charlene, 5/7)\n    betsy_to_charlene = Eq(charlene - betsy, 15) # after Charlene gave Betsy 15 marbles\n    anna_to_betsy = Eq(betsy - anna, 8) # after Betsy gave Anna 8 marbles\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, ratio_anna_betsy, ratio_betsy_charlene, betsy_to_charlene, anna_to_betsy), (anna, betsy, charlene))\n\n    # Calculate Betsy's initial number of marbles (before giving or receiving)\n    betsy_initial = solutions[betsy] + 8 - 15\n\n    return betsy_initial\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9 * 6) - (7 * 6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "def solution():\n    from math import factorial\n\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    total_cards = yellow_cards + red_cards + green_cards\n\n    ways_to_arrange = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let l be the initial lollipops and g be the initial gum drops\n    l, g = symbols('l g')\n\n    # Original ratio\n    equation1 = Eq(l/g, 5/7)\n\n    # New ratio after adding candies\n    equation2 = Eq((l + 120) / (g + 120), 4/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (l, g))\n    lollipops = solutions[l]\n    gum_drops = solutions[g]\n\n    # Total pieces of candy now\n    total_candy = lollipops + gum_drops + 120 * 2\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper in cm (converted from meters for precision)\n    length_cm = int(1.36 * 100)\n    width_cm = int(0.8 * 100)\n\n    # Calculate the greatest common divisor of the length and width\n    side_of_square_cm = gcd(length_cm, width_cm)\n\n    # Calculate the number of squares that can be cut out\n    num_squares = (length_cm // side_of_square_cm) * (width_cm // side_of_square_cm)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n\n    for hundreds in digits:\n        for tens in digits:\n            for ones in digits:\n                if ones % 2 == 1:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (201 - 1) // 5\n    count_by_7 = (201 - 1) // 7\n    count_by_35 = (201 - 1) // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one durian, pineapple, and watermelon\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's purchase equation\n    chris_eq = Eq(1*durian + 2*pineapple + 3*watermelon, 440)\n\n    # Dylan's purchase equation\n    dylan_eq = Eq(4*durian + 6*pineapple + 9*watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((chris_eq, dylan_eq), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of teams in the league.\n    x = symbols('x')\n\n    # Since each team plays each other twice, the total number of matches played is given by\n    # x choose 2 times 2, which is the binomial coefficient for choosing 2 teams out of x, multiplied by 2.\n    equation = Eq(x * (x - 1), 30 * 2)  # Each match is played twice, hence 30 * 2\n\n    # Solving for x\n    num_teams = solve(equation, x)\n\n    # The solution will include a positive and a negative value, we only need the positive one\n    for team_number in num_teams:\n        if team_number > 0:\n            return team_number\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Let x be the number without the ones digit, and y the original ones digit\n    # The original value of the number is 10*x + y\n    # The value Vicky wrote down is 10*x\n    # According to the problem, (10*x + y) - 10*x = 135\n    # Which simplifies to y = 135\n    # y must be a digit from 0 to 9, so 135 as a digit is not possible\n    # We have to rewrite the equation as 10*(x+1) + y - 10*x = 135\n    # Simplifying we get 10 + y = 135, hence y = 125\n    # But y has to be a single digit, so we need to take the tens from y and add it to x\n    # The ones digit of y should be 5, because trailing 0 is forgotten. Therefore, we add 12 (from 125) to x\n    # Now we have a new equation: 10*(x+12) + 5 = 10*x + 135\n    # Simplifying we have 10*x + 120 + 5 = 10*x + 135\n    # This gives us the correct original number as: x=13 and y=5\n    # So the original number is 10*13 + 5 = 135\n\n    x = 13\n    y = 5\n    original_value = 10 * x + y\n\n    return original_value\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    expression = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return expression\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    # Each trip can take a maximum of 5 people.\n    # A return trip is needed for each crossing, except the last one.\n    max_people_per_trip = 5\n    \n    # Total number of students\n    total_students = 37\n    \n    # We calculate the full trips where 5 persons cross the river.\n    # Each full trip includes two movements: crossing and coming back.\n    full_trips = total_students // max_people_per_trip\n    \n    # The returning trips, except for the last crossing.\n    return_trips = full_trips - 1\n    \n    # Check if there are students left for a partial trip.\n    partial_trip_students = total_students % max_people_per_trip\n    \n    # The partial trip only needs one crossing if there are any students left.\n    partial_trip = 1 if partial_trip_students > 0 else 0\n    \n    # The total number of trips is the sum of full trips,\n    # the return trips, and the additional partial trip (if any).\n    total_trips = (full_trips * 2) - 1 + partial_trip\n    \n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    both_percent = 80 + 35 - 10 - 100  # Calculate the percentage of students who chose both subjects\n    both_count = 75  # Number of students who chose both subjects\n    total_students = both_count * 100 / both_percent  # Calculate the total number of students\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    return factorial(100) / (factorial(99) + factorial(98))\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of Frank, Alex, and Paul\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Age difference between Frank and Alex and between Alex and Paul is the same\n    equation1 = Eq(frank - alex, alex - paul)\n\n    # Sum of their ages is 99\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # There will be multiple solutions due to symmetry; select the one where Frank is oldest and Paul is youngest\n    for s in solutions:\n        if s[frank] > s[alex] > s[paul]:\n            return s[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    import itertools\n    digits = [1, 4, 6, 9]\n    all_numbers = [int(\"\".join(map(str, perm))) for perm in itertools.permutations(digits)]\n    average = sum(all_numbers) / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # At first, the number of boys and girls is equal\n    initial_condition = Eq(boys, girls)\n\n    # After 60 boys and 12 girls leave the gathering:\n    # there are twice as many girls as boys\n    leave_condition = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solve the system of equations\n    solution = solve((initial_condition, leave_condition), (boys, girls))\n\n    return solution[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(10):\n        for ones in range(10):\n            if tens + ones == 15 and tens != ones and tens != 9 and ones != 9:\n                return 900 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n    all_numbers = set(range(1, 14))\n    odd_numbers = set(range(1, 14, 2))\n    \n    def count_factors(n):\n        count = 1  # include the number itself\n        for i in range(1, (n // 2) + 1):\n            if n % i == 0:\n                count += 1\n        return count\n    \n    # Two students know the number of different factors their number has.\n    # So they cannot have numbers with a unique factor count\n    # We need to find numbers with non-unique factor counts\n    factor_counts = {x: count_factors(x) for x in all_numbers}\n    # Invert the dictionary to find numbers with the same factor count\n    factors_to_numbers = {}\n    for k, v in factor_counts.items():\n        factors_to_numbers.setdefault(v, []).append(k)\n        \n    # Find factor counts with more than one number\n    non_unique_factors = {k: v for k, v in factors_to_numbers.items() if len(v) > 1}\n    possible_chosen_numbers = [n for numbers in non_unique_factors.values() for n in numbers]\n    \n    # Now consider what Alice and May said to narrow down the choices further\n    # Alice has an odd number\n    alice_possible_numbers = [n for n in possible_chosen_numbers if n in odd_numbers]\n    \n    # May's number is smaller than Alice's by 2 and bigger than Mark's by 1\n    # This implies May cannot have the smallest or the biggest of the possible numbers\n    may_possible_numbers = {n: [a for a in alice_possible_numbers if a == n + 2] for n in possible_chosen_numbers}\n    may_possible_numbers = {k: v for k, v in may_possible_numbers.items() if v}  # Filter out empty lists\n    \n    # Now iterate through the possible combinations of the 9 numbers chosen\n    for chosen in combinations(all_numbers, 9):\n        # Check if the chosen set contains valid numbers based on above constraints\n        intersect_with_may = set(may_possible_numbers.keys()).intersection(chosen)\n        intersect_with_alice = set(alice_possible_numbers).intersection(chosen)\n        \n        if not intersect_with_may or not intersect_with_alice:\n            continue\n        \n        for may_number in intersect_with_may:\n            if (may_number + 2) in intersect_with_alice:\n                product = 1\n                for number in all_numbers - set(chosen):\n                    product *= number\n                return product\n    \n    return None  # In case no solution is found\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km/h\n    car_speed = 120  # km/h\n    \n    # The van has already travelled for 3 hours\n    van_lead_distance = van_speed * 3  # km\n    \n    # Relative speed at which the car is catching up\n    catchup_speed = car_speed - van_speed  # km/h\n    \n    # Time required for the car to catch up\n    catchup_time = van_lead_distance / catchup_speed  # hours\n\n    return catchup_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # Number of ways to choose hats (0 to 4)\n    hats = 1 + 4  # Choosing no hat or one out of four\n    \n    # Number of ways to choose shirts (1 to 3)\n    shirts = 3  # Must choose one, two, or all three\n    \n    # Number of ways to choose pants (1 to 2)\n    pants = 2  # Must choose one or both of the pairs\n    \n    # Number of ways to choose skirts (1 skirt)\n    skirts = 1  # Must choose the skirt\n    \n    # Total number of combinations\n    total_combinations = hats * shirts * pants * skirts\n\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert repeating decimals 0.01 to fraction\n    # 0.010101... = 1/99 (because 0.01 is 1/100 and it repeats in a cycle of 2 digits)\n    numerator_1 = 1\n    denominator_1 = 99\n    \n    # Repeat for the second number\n    numerator_2 = numerator_1\n    denominator_2 = denominator_1\n    \n    # Multiply the fractions\n    numerator_product = numerator_1 * numerator_2\n    denominator_product = denominator_1 * denominator_2\n    \n    # Since the numerator is 1, the length of the repetend of the product will be\n    # the same as the number of digits in the denominator of the resulting fraction\n    # because the cycle of repetition is determined by factors of the denominator.\n    # Here we will count them.\n    \n    # Reducing the fraction won't affect the length of the repetend, so we can \n    # skip the reduction step and calculate the number of digits directly\n    repetend_length = len(str(denominator_product))\n    \n    return repetend_length\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the rate at which each printer prints pages\n    rate_a = 300 / 12    # printer A's rate in pages per minute\n    rate_b = 300 / 10    # printer B's rate in pages per minute\n    \n    # Calculate combined rate\n    combined_rate = rate_a + rate_b\n    \n    # Half an hour is equivalent to 30 minutes\n    half_hour_in_minutes = 30\n    \n    # Calculate the total number of pages printed by both printers in half an hour\n    total_pages = combined_rate * half_hour_in_minutes\n    \n    return total_pages\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_items = symbols('total_items')\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - (apples_fraction + bananas_fraction)\n\n    apples = apples_fraction * total_items\n    bananas = bananas_fraction * total_items\n    lemons = lemons_fraction * total_items\n\n    equation = Eq(apples - lemons, 12)\n\n    solution = solve(equation, total_items)\n\n    lemons_number = lemons_fraction * solution[0]\n\n    return lemons_number\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):  # Iterate over the months\n        for day in range(1, 32):  # Iterate over the days\n            # Form the date string in the required format dd/mm/yyyy\n            date = f\"{day:02d}/{month:02d}/2019\"\n            # Count the number of '3' in the date string\n            count += date.count('3')\n            # Account for days not in all months\n            if month in [4, 6, 9, 11] and day == 30:\n                break  # These months only have 30 days\n            elif month == 2 and day == 28:\n                break  # February has 28 days in 2019 (not a leap year)\n\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # Let x be the common multiplier for the ratio quantities\n    # Total money collected = 3x*5 + 4x*3 + 2x*4 = 560\n    # Solve for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_money = Eq(3*x*5 + 4*x*3 + 2*x*4, 560)\n    x_value = solve(total_money, x)\n    \n    # Calculate the amount collected from durian puffs\n    # Durian puffs = 3x*5\n    money_from_durian = 3 * x_value[0] * 5\n    \n    return money_from_durian\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Given a 7x5x14 cuboid, we find the number of smaller cubes with 3 painted sides.\n    # The cubes with 3 painted sides are the corner cubes of the original cuboid.\n    # A cuboid has 8 corners. Each corner shares one cube.\n    # Therefore, there are 8 small cubes with exactly three faces painted.\n    \n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the tens digit and y be the ones digit\n    x, y = symbols('x y')\n\n    # Original number is 10x + y\n    # Swapped number is 10y + x\n    # The new number (10y + x) is three more than one third of the original (10x + y)\n    equation = Eq(10*y + x, 3 + (10*x + y) / 3)\n\n    # Find solutions where x and y are both between 1 and 9 (inclusive) to be a valid two-digit number\n    solutions = solve((equation, (x > 0, y > 0, x < 10, y < 10)), (x, y))\n\n    # Return the original number as int\n    for sol in solutions:\n        if sol[0].is_integer and sol[1].is_integer:\n            return int(10 * sol[0] + sol[1])\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.191\n    interest_last_two_years = 1.166\n\n    amount_after_three_years = initial_investment * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    # Each raisin roll costs 3 times as much as each donut.\n    equation1 = Eq(raisin_roll, 3 * donut)\n\n    # 5 raisin rolls and 6 donuts cost $14.70.\n    equation2 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Given number of students from each school\n    school_a = 24\n    school_b = 36\n    school_c = 42\n\n    # Calculate the greatest common denominator (GCD) for the three schools\n    gcd_ab = gcd(school_a, school_b)\n    gcd_abc = gcd(gcd_ab, school_c)\n\n    # The largest possible number of students in each team is the GCD of the three numbers\n    return gcd_abc\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs of each item\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # The equations based on the given information\n    eq1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)  # Total cost equation\n    eq2 = Eq(notebook + pencil_case, 6)                        # Cost of a notebook and a pencil case\n    eq3 = Eq(pencil_case + eraser, 9)                          # Cost of a pencil case and an eraser\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (notebook, pencil_case, eraser))\n    \n    # Return the cost of a pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the levels where A, B, C, D, Zachary, Yvonne, Xavier, Waylon live\n    A, B, C, D = symbols('A B C D', integer=True)\n    Zachary, Yvonne, Xavier, Waylon = symbols('Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Define the range for their levels\n    constraints = (A > 0, A <= 18,\n                   B > 0, B <= 18,\n                   C > 0, C <= 18,\n                   D > 0, D <= 18,\n                   Zachary > 0, Zachary <= 18,\n                   Yvonne > 0, Yvonne <= 18,\n                   Xavier > 0, Xavier <= 18,\n                   Waylon > 0, Waylon <= 18,\n                   D == 5 * Yvonne,\n                   A > C, A < D,\n                   B < Xavier,\n                   Zachary + 2 - Xavier == Zachary - Waylon,\n                   Zachary == Yvonne + Xavier,\n                   D <= 18, # Because D is 5 times Yvonne, they cannot be higher than 18\n                   )\n    \n    # Solve the system of equations\n    solutions = solve(\n        (A - C, A - D, B - Xavier, D - 5*Yvonne, Zachary + 2 - Xavier, Xavier - Waylon, Zachary - Yvonne - Xavier) + constraints, \n        (A, B, C, D, Zachary, Yvonne, Xavier, Waylon)\n    )\n    \n    # Find the valid solution that satisfies all constraints\n    for sol in solutions:\n        # Verify if all conditions are met by the solution\n        if all(map(lambda cond: cond.subs(sol), constraints)):\n            return sol[A]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Sum of the first n terms of an arithmetic sequence S_n = n/2 * (a_1 + a_n),\n    # where a_1 is the first term and a_n is the nth term.\n    # Also, the nth term can be expressed as a_n = a_1 + (n - 1)d,\n    # where d is the common difference.\n    \n    # From the problem, we know that:\n    # S_9 = 99 and S_27 = 540\n\n    # We can set up two equations based on the sum of the arithmetic series:\n    # 99 = 9/2 * (2a_1 + 8d) => Equation (1)\n    # 540 = 27/2 * (2a_1 + 26d) => Equation (2)\n    \n    # Now let's solve for a_1 and d\n    # Equation (1) multiplied by 3 and subtracted from Equation (2) to eliminate a_1\n    a_1, d = symbols('a_1 d')\n    eq1 = Eq(9/2 * (2*a_1 + 8*d), 99)\n    eq2 = Eq(27/2 * (2*a_1 + 26*d), 540)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a_1, d))\n\n    # Now that we have a_1 and d, we can calculate the sum of the first 16 terms\n    # S_16 = 16/2 * (2a_1 + 15d)\n    sum_16 = 16/2 * (2*solutions[a_1] + 15*solutions[d])\n\n    return sum_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = (12 * (12 + 1)) // 2\n    middle = total_numbers // 2\n    \n    if total_numbers % 2 == 0:  # If even number of elements, average the middle two\n        num = 1\n        count = 0\n        while count < middle:\n            count += num\n            if count == middle:\n                return num\n            elif count > middle:\n                return num - 1\n            num += 1\n    else:  # If odd, take the middle element\n        num = 1\n        count = 0\n        while count < middle:\n            count += num\n            num += 1\n        return num - 1\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [4, 5, 8]\n    perm = permutations(digits)\n    \n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    digits = 0\n    for number in range(7, 41):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # In the group stage, each group has 4 teams playing a single round-robin tournament\n    # Each team plays with all other 3 teams once, so that's 3 games per team\n    # For 4 teams, this results in 4*3/2 = 6 games per group (divided by 2 to not count each match twice)\n    games_per_group = (4 * 3) // 2\n    \n    # With 8 groups, the total number of games in the group stage is:\n    group_stage_games = games_per_group * 8\n\n    # In the knockout round, for the top 16 we have 8 games\n    # For the top 8 (quarter-finals), we have 4 games\n    # For the top 4 (semi-finals), we have 2 games\n    # For the final and the third place match, we have 2 more games\n    knockout_games = 8 + 4 + 2 + 2\n\n    # Total number of games played in the World Cup is the sum of all the games\n    total_games = group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # The least common multiple (LCM) of the flashing rates will give us\n    # the frequency at which both lights flash at the same instant\n    from math import lcm\n    red_flash_rate = 4  # per minute\n    green_flash_rate = 6  # per minute\n\n    # Calculate LCM of the two flash rates\n    lcm_flash_rate = lcm(red_flash_rate, green_flash_rate)\n    \n    # The number of times both lights flash at the same instant in one minute\n    same_instant_per_minute = 60 // lcm_flash_rate\n    \n    # Since we need to calculate for one hour and there are 60 minutes in an hour\n    same_instant_per_hour = same_instant_per_minute * 60\n    \n    # Including the first and the last time, we have to add 1\n    ans = same_instant_per_hour + 1\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number we are trying to find\n    # According to the problem, we have the equation: 3x + 1 = 22\n    # To find x, we will do the inverse operations to isolate x\n\n    # Subtract 1 from both sides of the equation\n    result = 22 - 1\n\n    # Divide by 3 to get the value of x\n    x = result // 3\n\n    return x\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_artist_paintings = 40\n    landscape_paintings = int(0.4 * total_paintings)\n    french_landscape_paintings = 25\n    \n    # Calculate the number of landscape paintings that are not by French artists\n    non_french_landscape_paintings = landscape_paintings - french_landscape_paintings\n    \n    # Calculate the number of still life paintings\n    still_life_paintings = total_paintings - landscape_paintings\n    \n    # Calculate the number of still life paintings by French artists\n    french_still_life_paintings = french_artist_paintings - french_landscape_paintings\n    \n    # Calculate the number of still life paintings that are not by French artists\n    non_french_still_life_paintings = still_life_paintings - french_still_life_paintings\n    \n    return non_french_still_life_paintings\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume_ml = 60 + 780  # Total volume of rose drink in milliliters\n    max_volume_per_glass = total_volume_ml // 9  # Find the greatest integer volume that can be poured into each glass equally\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_in_first_mix = 0.50 * 100\n    rice_in_second_mix = 0.80 * 400\n    total_rice = rice_in_first_mix + rice_in_second_mix\n    concentration = total_rice / total_weight\n    return concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    current_number = 0\n    \n    for i in range(2017):\n        current_number = current_number * 10 + 2\n        total_sum += current_number\n\n    last_five_digits = total_sum % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15  # Total hay is enough for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # How long the same hay can feed 20 horses\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Let's consider the house number to be abcd (where a, b, c, d are the digits)\n    # Moving the first digit to the one's place, we get bcda.\n    # Since bcda = abcd + 4707, we can write the following:\n    # 1000b + 100c + 10d + a = 1000a + 100b + 10c + d + 4707\n    # Rearrange terms to bring like terms together:\n    # 999b + 90c + (d - a) = 4707 + 999a\n    # Let's now proceed by trying to solve it systematically.\n\n    # Iterate through all 4-digit numbers to find the number that satisfies the condition\n    for a in range(1, 10):  # a cannot be 0 because it's a 4-digit number\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if (1000 * b + 100 * c + 10 * d + a) - (1000 * a + 100 * b + 10 * c + d) == 4707:\n                        house_number = 1000 * a + 100 * b + 10 * c + d\n                        return house_number\n    # If no solution is found, return None (though this shouldn't happen given the problem specifications)\n    return None\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Oliver's age this year\n    oliver_age_now = 20\n    # Lin's age this year\n    lin_age_now = 26\n    # Desired sum of their ages\n    desired_sum = 48\n\n    # Let x be the number of years later\n    # Equation: (oliver_age_now + x) + (lin_age_now + x) = desired_sum\n    # Simplify the equation: 2x = desired_sum - oliver_age_now - lin_age_now\n    # Calculate the value of x\n    x = (desired_sum - (oliver_age_now + lin_age_now)) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    multiple = 1\n    while True:\n        num = 35 * multiple\n        if str(num).endswith('35') and sum(map(int, str(num))) == 35:\n            return num\n        multiple += 1\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    \n    # Equation based on the problem statement\n    equation = Eq(4*y + 20 + 2*(y-5), 8*y)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Odd days are deposit days\n            pocket_money += 10\n        else:  # Even days are spending days\n            pocket_money -= 8\n\n    return pocket_money\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 3 != 0 and i % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    sum_of_strikes = sum(range(1, 13))\n    return sum_of_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total value of coins in pence\n    ten_pence_coins = total_pence // 10  # number of ten-pence coins\n    total_weight = weight_per_coin * ten_pence_coins  # total weight of coins\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let x be the number of buttons James originally has\n    # Nina has 22 - x buttons\n    # After giving 4 buttons to James, James has x + 4 buttons\n    # Nina has 22 - x - 4 = 18 - x buttons\n    # They have the same number of buttons, so x + 4 = 18 - x\n    # Solving for x we get: 2x = 14 -> x = 7\n    james_buttons = 7\n    # Nina originally has 22 - x buttons\n    nina_buttons = 22 - james_buttons\n    return nina_buttons\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    # Define the start and end years\n    start_year = 1901\n    end_year = 2000\n    \n    # Count leap years between 1901 and 2000\n    leap_years_count = sum(1 for year in range(start_year, end_year + 1) if (year % 4 == 0))\n\n    # Calculate the number of days in leap years\n    leap_year_days = leap_years_count * 366\n    \n    # Calculate the number of days in non-leap years\n    non_leap_year_days = (end_year - start_year + 1 - leap_years_count) * 365\n    \n    # Total number of days from 1901 to 2000 inclusive\n    total_days = leap_year_days + non_leap_year_days\n\n    return total_days\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    questions = 6\n    \n    for correct_answers in range(questions + 1):\n        wrong_answers = questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    \n    adults = total_people * (ratio_adults / total_ratio)\n    \n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10 # m/s\n    angle = 37 # degrees\n    g = 9.81 # m/s^2, acceleration due to gravity\n\n    angle_rad = math.radians(angle) # convert angle to radians\n\n    # Calculate the vertical component of the initial velocity\n    initial_speed_y = initial_speed * math.sin(angle_rad)\n\n    # Calculate the time it takes to reach the maximum height\n    time_to_top = initial_speed_y / g\n\n    # Calculate the maximum height reached\n    max_height = initial_speed_y * time_to_top - 0.5 * g * time_to_top**2\n\n    # Calculate the horizontal component of the initial velocity\n    initial_speed_x = initial_speed * math.cos(angle_rad)\n    \n    # Calculate the distance along the ramp\n    distance_along_ramp = initial_speed_x * 2 * time_to_top\n\n    return max_height, distance_along_ramp\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    start_seat = 3\n    total_seats = 9\n\n    last_seat = (start_seat + total_candies - 1) % total_seats\n    if last_seat == 0:\n        last_seat = total_seats\n\n    return last_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    # First equation: racket + 3 * ball = 536\n    equation1 = Eq(racket + 3 * ball, 536)\n\n    # Second equation: 2 * racket + 3 * ball = 904\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    return 30 + 30 * 30 + 30 * 30 * 30\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    matches_required = (players - 1) // (players_per_match - 1)\n\n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    return sum([1, 3, 5, 95, 97, 99])\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the digits as symbols\n    d1, d2, d3, d4 = symbols('d1 d2 d3 d4', integer=True)\n\n    # define the two equations\n    original_number = Eq(d1*1000 + d2*100 + d3*10 + d4, 0)\n    new_number = Eq(d4*1000 + d1*100 + d2*10 + d3, 4707)\n\n    constraints = (d1 > 0, d1 < 10, d2 < 10, d3 < 10, d4 < 10)  # d1>0 because it's a 4-digit number, all digits <10\n\n    solutions = solve((original_number, new_number) + constraints, (d1, d2, d3, d4))\n\n    # Only accept solutions where numbers are digits (0-9) \n    filtered_solutions = [s for s in solutions if all(x.is_Integer and 0 <= x < 10 for x in s)]\n    \n    # Construct the original house number from the digits if a solution is found\n    if filtered_solutions:\n        house_number = int(''.join(str(digit) for digit in filtered_solutions[0]))\n    else:\n        house_number = None\n\n    return house_number\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_of_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags_of_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Using the pigeonhole principle, we consider the worst-case scenario.\n    # Sheila could pick 3 blue balls (leaving 2, not enough for a group of 4),\n    # then 3 orange balls (leaving 1, not enough for a group of 4),\n    # then 2 yellow balls (using all the yellow balls but still not reaching 4),\n    # At this worst case, she has 3 blue, 3 orange, and 2 yellow, total of 8 balls out.\n    # Now no matter which colour ball she picks next, she will have a group of 4 balls of the same colour.\n    # But we need 2 groups of 4 balls of the same colour, so Sheila must empty\n    # one colour by picking additional 2 balls, and then ensure at least one group of another colour\n    # by picking all remaining balls of that colour. So additional 4 balls are required in the worst case.\n    # Therefore, she needs to pick 3 (first three blue) + 3 (first three orange)\n    # + 2 (two yellow) + 2 (remaining blue to make one group of 4) + 4 (remaining orange to make second group)\n    \n    ans = 3 + 3 + 2 + 2 + 4\n    return ans\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    exchange_rate = 1.17  # Assuming £1 = 1.17 euros (example rate, actual rate may vary)\n    cd_cost_england = 14  # CD cost in pounds\n    amount_spent_st_petersburg = cd_cost_england  # Amount spent in pounds is equal to the cost of one CD in England\n    \n    # Convert the amount spent in St Petersburg from pounds to euros\n    amount_spent_st_petersburg_euros = amount_spent_st_petersburg * exchange_rate\n    \n    # Assuming the cost of a CD in St Petersburg is 500 rubles (example cost, actual cost may vary)\n    cd_cost_st_petersburg_rubles = 500\n\n    # The current exchange rate from euros to rubles (example rate, actual rate may vary)\n    euro_to_rubles_exchange_rate = 86  # 1 euro = 86 rubles\n    \n    # Convert the amount spent in St Petersburg from euros to rubles\n    amount_spent_st_petersburg_rubles = amount_spent_st_petersburg_euros * euro_to_rubles_exchange_rate\n\n    # Calculate the number of CDs that can be bought in St Petersburg\n    number_of_cds = amount_spent_st_petersburg_rubles // cd_cost_st_petersburg_rubles\n\n    return int(number_of_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n    # Search within a reasonable range, for example 1 to 100\n    for age in range(1, 100):\n        # Check if 3 years ago the age was a square number\n        if (age - 3)**0.5 == int((age - 3)**0.5):\n            # Check if next year the age will be a prime number\n            if isprime(age + 1):\n                # Check if in 12 years the age will be a cube number\n                cube_root = (age + 12)**(1/3)\n                if cube_root == int(cube_root):\n                    # Return the answer if all conditions are met\n                    return age\n                    \nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To ensure he gets 2 M&Ms of different colors, he could take the worst-case scenario:\n    # taking all of one color, then one more to guarantee a different color\n    # Since the smallest number of M&Ms is for red, he takes all 3 red M&Ms\n    # Then, he takes one more (either yellow or brown), resulting in 4 M&Ms total\n    min_chips = 3 + 1\n    return min_chips\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # The rate of Andrew and Bernice when Andrew is at level 5 and Bernice is at level 3\n    # Andrew : Bernice = 5 : 3\n    a_to_b = 5 / 3\n\n    # The rate of Bernice and Cassandra when Bernice is at level 6 and Cassandra is at level 10\n    # Bernice : Cassandra = 6 : 10\n    b_to_c = 6 / 10\n\n    # The combined rate factor for Andrew, Bernice, and Cassandra\n    # Andrew : Bernice : Cassandra = 5 : 3 : (3 * 6 / 10)\n    a_to_c = a_to_b * b_to_c\n\n    # Since Cassandra reached level 19, we now find the level Andrew would be at\n    # Using the combined rate\n    andrew_level = 19 * a_to_c\n\n    return int(andrew_level)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # Let new_operation(x, 4) be y, then we have 2 * y + 2 + y = 59\n    # Therefore, we solve for y in the equation 3y + 2 = 59\n\n    y = (59 - 2) // 3\n\n    # Now we solve for x using the new operation: x * 4 + x + 4 = y\n    # This simplifies to 4x + x + 4 = y => 5x = y - 4\n\n    x = (y - 4) // 5\n    return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    pattern_length = len(pattern)\n    total_digits = 43\n    full_patterns_count = total_digits // pattern_length\n    remaining_digits_count = total_digits % pattern_length\n\n    full_pattern_sum = sum(int(digit) for digit in pattern)\n    remaining_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits_count))\n\n    total_sum = full_pattern_sum * full_patterns_count + remaining_pattern_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Let the first term of the arithmetic sequence be 'a' and common difference be 'd'\n    # The sum of the first n terms of an arithmetic sequence can be computed by: n/2 * (2a + (n - 1)d)\n    # The sum of the first 9 terms is: 9/2 * (2a + 8d) = 72\n    # The sum of the first 23 terms is: 23/2 * (2a + 22d) = 736\n    \n    # Set up two equations based on the given information\n    # Equation 1 (for first 9 terms): (9/2) * (2a + 8d) = 72\n    # Equation 2 (for first 23 terms): (23/2) * (2a + 22d) = 736\n    \n    # Simplifying both equations gives us:\n    # Equation 1 Simplified: 9a + 36d = 144\n    # Equation 2 Simplified: 23a + 253d = 736 * 2\n    \n    # We can now express 'a' in terms of 'd' from Equation 1\n    # a = (144 - 36d) / 9\n    # We can use this expression to solve for 'd' using Equation 2\n    \n    # Substitute the equation of 'a' into Equation 2\n    # 23 * (144 - 36d) / 9 + 253d = 736 * 2\n    # Simplify further to solve for 'd'\n    # 368d = 736 * 2 - 23 * 16\n    d = (736 * 2 - 23 * 16) / 368\n    \n    # Now that we have 'd', we can find 'a' using the equation of 'a'\n    a = (144 - 36 * d) / 9\n    \n    # Now we find the sum of the first 16 terms using the formula for the sum of an arithmetic sequence\n    # Sum = (n/2) * (2a + (n - 1)d)\n    sum_first_16 = (16/2) * (2*a + (16 - 1)*d)\n    \n    return sum_first_16\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # time in minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # converting minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    conversion_factor_to_centimetres = 100000  # 1 km = 100000 cm\n\n    centimetres = kilometres * conversion_factor_to_centimetres\n\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    speed_shafur = 54  # km/h\n    speed_samuel = 66  # km/h\n\n    # Convert 40 minutes to hours\n    time_initial_drive = 40 / 60  # hours\n\n    # Distance both drivers covered before Samuel turned back\n    distance_initial_drive_shafur = speed_shafur * time_initial_drive  # km\n    distance_initial_drive_samuel = speed_samuel * time_initial_drive  # km\n\n    # Remaining distance Shafur covered\n    remaining_distance_shafur = distance_initial_drive_samuel - distance_initial_drive_shafur\n\n    # Time Shafur took to cover the remaining distance\n    time_remaining_shafur = remaining_distance_shafur / speed_shafur\n\n    # Time Samuel drove back to Town X and then to Town Y which is same as time Shafur took for remaining distance\n    time_samuel_back_and_forth = 2 * (distance_initial_drive_samuel / speed_samuel) + time_remaining_shafur\n\n    # Distance between Town X and Town Y is the distance Samuel covered at his speed in the time he took\n    distance_X_to_Y = speed_samuel * time_samuel_back_and_forth\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n    for years in range(100):\n        new_grandpa_age = grandpa_age + years\n        new_grandson_ages = [age + years for age in grandson_ages]\n        if sum(new_grandson_ages) == new_grandpa_age:\n            return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of each chair as 'c' and each table as 't'\n    c, t = symbols('c t')\n\n    # According to the problem, we know that:\n    # 4 tables and 9 chairs cost $504\n    equation1 = Eq(4 * t + 9 * c, 504)\n    # The cost of each table is the total cost of 3 chairs\n    equation2 = Eq(t, 3 * c)\n\n    # Now we solve the two equations to find the values of 'c' and 't'\n    solutions = solve((equation1, equation2), (c, t))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n    n = 1  # Since we already have the first term which is positive\n    term = first_term\n\n    # Loop until the first negative term\n    while term > 0:\n        n += 1  # Next term\n        term += difference\n\n    # The loop stops when the term is not positive, the last positive term is (n-1)\n    return n - 1\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        digits = [int(x) for x in str(i)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product > 99 and product < 1000:\n            return i\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "import math\n\ndef solution():\n    flowers = 68\n    flowers_per_vase = 9\n    \n    num_vases = math.ceil(flowers / flowers_per_vase)\n    \n    return num_vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning = 416\n    afternoon = 248\n    difference = morning - afternoon\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n\n    # Expression 1: 7 / -3.33333...\n    exp1_numerator = Fraction(7)\n    exp1_denominator = Fraction(-10, 3)\n    exp1 = exp1_numerator / exp1_denominator\n    \n    # Expression 2: Cube root of -0.027 is -0.3\n    exp2 = -0.3\n\n    # Expression 3: 2^3 / 4^2\n    exp3_numerator = Fraction(2**3)\n    exp3_denominator = Fraction(4**2)\n    exp3 = exp3_numerator / exp3_denominator\n    \n    # Expression 4: 0.125 * [1.8 - (0.2 * 7)]\n    exp4 = 0.125 * (Fraction(18, 10) - (Fraction(2, 10) * 7))\n    \n    # Expression 5: 0.1 / 0.142857 repeating is 7/10 / 1/7\n    exp5 = Fraction(7, 10) / Fraction(1, 7)\n    \n    # Expression 6: 2 * 0.3\n    exp6 = 2 * Fraction(3, 10)\n    \n    # Final answer\n    ans = (exp1 / exp2) + (exp3 / exp4) - (exp5 + exp6)\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 // 3) + (1 if 38 % 3 > 0 else 0)\n    last_multiple = 81 // 3\n\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Sum of the sequence from 3 to 10\n    sum_to_10 = sum(range(3, 11))\n    \n    # Sum of the sequence from 3 to 6\n    sum_to_6 = sum(range(3, 7))\n    \n    # The full sequence repeats the range from 3 to 6 twice (once increasing and once decreasing),\n    # so we should subtract one occurrence of it because in the sequence the 3 to 6 is mentioned twice\n    # but should only be counted once.\n    total_sum = 2 * sum_to_10 - sum_to_6\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for Pip's and Bud's initial pocket money\n    pip, bud = symbols('pip bud')\n\n    # Equation 1: Pip has £50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # Equation 2: Pip has spent 80% of his money, which is 20% left\n    # Bud has spent 3/4 of her money, which is 1/4 left\n    # The ratio of their leftover money is 6:5\n    equation2 = Eq((pip * 0.2) / (bud * 0.25), 6 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    # Return Pip's initial amount of pocket money\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_feb = 78\n    sold_in_feb = 13\n    sold_in_jan = 22\n\n    half_remaining_after_feb = remaining_after_feb + sold_in_feb\n    remaining_after_jan = 2 * half_remaining_after_feb\n    initial_mobile_phones = 2 * half_remaining_after_jan + sold_in_jan\n\n    return initial_mobile_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (base_number * 5) / 6\n    return result\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    return 4\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let x be the number of pencils, then the number of pens is x + 50\n    # The equation is: x + (x + 50) = 438\n    # Solving for x gives us the number of pencils\n    x = (total_items - more_pens) // 2\n\n    return x\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes_of_apples = 5\n    apples_per_box = 9\n    additional_apples = 16\n\n    total_apples = (boxes_of_apples * apples_per_box) + additional_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_money_needed = 70 * 4  # Amount needed for each grandchild\n    money_short = 15  # Amount she is short of\n\n    money_she_had = total_money_needed - money_short\n    return money_she_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, each game eliminates one person.\n    # Since there are 5 people, we need to eliminate 4 people to have a winner.\n    # Thus, 4 games will be played.\n    num_games = 5 - 1\n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Equations based on the problem description\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    betsy_new = Eq(betsy + 15, charlene - 15)  # Charlano gave 15 marbles to Betsy\n    anna_new = Eq(anna + 8, betsy - 8)  # Betsy gave 8 marbles to Anna\n    ratio = Eq(anna / betsy / charlene, 2 / 5 / 7)  # The final ratio\n    \n    # Solve the system of equations\n    solutions = solve((total_marbles, betsy_new, anna_new, ratio), (anna, betsy, charlene))\n    \n    # Extract Betsy's initial number of marbles\n    betsy_initial = solutions[betsy] - 15\n    \n    return betsy_initial\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Shelf number from the front\n    front = 8\n    # Shelf number from the back\n    back = 10\n    # Total shelves is the sum of shelf positions from the front and back minus 1.\n    total_shelves = front + back - 1\n\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(2016)  # Get the prime factors and their powers\n    ages = []\n\n    # The prime factorization of 2016 is 2^5 * 3^2 * 7. So we combine these factors to form four different ages.\n    # The possible combinations of the prime factors to create four distinct numbers all under 10 are limited.\n    # Since the highest power of 2 is 5 and 2^4 = 16 (too high for the age), we must use 2^3 (8) for one child,\n    # which leaves us with 2^2 * 3^2 * 7 to distribute among the other three children.\n    # Use 2^2 (4), 3^2 (9), and use 2 * 7 (14) which is greater than 10 and not allowed.\n    # So we try 3 * 7 (21) which is too high. The other combination is 3 * 2 (6) and 3 * 7 (21) which is too high.\n    # Finally, we use 7 for one child and 3 * 2 (6) for another, and 3 for the third child.\n    # This satisfies the conditions, and the ages are 8, 4, 6, and 3.\n\n    # The children's ages are therefore 8, 4, 6, and 7.\n    ages = [8, 4, 6, 7]\n    sum_of_ages = sum(ages)\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Total students in a row = Chris' position from the left + Chris' position from the right - 1\n    students_in_row = 3 + 7 - 1\n    # Total students in a column = Chris' position from the front + Chris' position from the back - 1\n    students_in_column = 7 + 4 - 1\n    # Total students = students in a row * students in a column\n    total_students = students_in_row * students_in_column\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, combined age of 2 dogs was 10 years\n    combined_age_4_years_ago = 10\n\n    # Add the 4 years to get their age at present\n    combined_age_now = combined_age_4_years_ago + 2 * 4\n\n    # Add the 2 years to get their age in 2 years\n    combined_age_in_2_years = combined_age_now + 2 * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p10 = symbols('p10') # Let p10 be the number of 10p coins\n    p20 = 2 * p10 # twice as many 20p coins as 10p coins\n    p5 = p10 / 2 # half as many 5p coins as 10p coins\n\n    # total amount in pence\n    total_pence = 1575\n\n    # equation for the total amount\n    equation = Eq(5 * p5 + 10 * p10 + 20 * p20, total_pence)\n\n    # solve the equation for p10\n    solutions = solve(equation, p10)\n\n    # find the number of 20p coins using p10 value\n    num_p20 = 2 * solutions[0]\n\n    # return the number of 20p coins\n    return num_p20\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Each boy has as many sisters as brothers: brothers - 1 (excluding himself) = sisters\n    equation1 = Eq(boys - 1, girls)\n    \n    # Each girl has half as many sisters as brothers: sisters = brothers / 2\n    # girls - 1 (excluding herself) = boys / 2\n    equation2 = Eq(girls - 1, boys / 2)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    remaining_weight = 60  # grams\n    \n    original_weight = remaining_weight / remaining_fraction\n\n    return original_weight\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15) # Assume the current year is 2023\n    duration = timedelta(weeks=3)\n\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally_amount = 8\n    kelvin_extra = 12\n    kelvin_amount = sally_amount + kelvin_extra\n    ivan_amount = kelvin_amount * 2\n\n    return ivan_amount\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    number = 96\n    base = 6\n    if number < 0:\n        return '-' + solution(-number)\n    if number < base:\n        return str(number)\n    else:\n        return solution(number // base) + str(number % base)\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declaring the symbol for 'x'\n    x = symbols('x')\n\n    # Set up the equation based on the problem\n    # Since the total distance is 70 miles, sum of distances covered in each of the 30 minute intervals should be equal to 70\n    # distance = speed * time.\n    # Convert 30 minutes into hours (30/60 = 0.5 hours)\n\n    # Speed during the first 30 mins is x mph, so distance is x * 0.5\n    # Speed during the second 30 mins is (x-20) mph, so distance is (x-20) * 0.5\n    # Speed during the last 30 mins is (x+10) mph, so distance is (x+10) * 0.5\n    # Summing these gives the equation for the total distance\n    equation = Eq(x * 0.5 + (x - 20) * 0.5 + (x + 10) * 0.5, 70)\n\n    # Solve the equation for 'x'\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 0.10\n    note = 50\n    \n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * tip_percentage\n    total_payment = total_cost + total_tip\n    \n    change = note - total_payment\n    \n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    distance_per_day = 4\n    slide_per_night = 2\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = (total_distance - distance_per_day) // effective_distance_per_day + 1\n\n    return days\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To win the game, Jason needs to end his turn\n    # with the number of marbles left being a multiple of 4.\n\n    # Since there are 26 marbles at the start, \n    # if Jason takes out 2 marbles on his first turn, \n    # there will be 24 marbles left, which is a multiple of 4.\n\n    # This way, no matter how many marbles Belinda takes (1, 2, or 3),\n    # Jason can always take a number of marbles that makes the remaining count\n    # a multiple of 4 again on his turn.\n    \n    # To demonstrate this:\n    # If Belinda takes 1, Jason can take 3 to get back to a multiple of 4.\n    # If Belinda takes 2, Jason can take 2.\n    # If Belinda takes 3, Jason can take 1.\n    \n    # Going with this strategy will ensure that Jason will win\n    # by forcing Belinda to take the last marble.\n\n    # Therefore, Jason should take 2 marbles.\n\n    return 2\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # To minimize the apples for the kid who gets the most,\n    # we should distribute the apples as evenly as possible\n    # Start by giving each kid one apple, that leaves 27 - 5 = 22 apples\n    # If each kid gets a different number of apples, the distribution could be like:\n    # 1, 2, 3, 4, ... and so on.\n    # We can calculate the least number of apples the kid with the most can get\n    # by trying to minimize the difference between the amount each kid gets.\n\n    # The question becomes a problem of finding minimum of the largest part\n    # when dividing a number into different parts with a fixed sum.\n\n    # Distribute apples so that each subsequent child gets one more apple than the previous.\n    # We use the formula for the sum of an arithmetic series: n/2 * (first_term + last_term)\n    # Where 'n' is the number of terms, 'first_term' is the smallest number of apples (1 in this case),\n    # and 'last_term' is the number we are trying to find (x).\n\n    distributed_apples = 0\n    for i in range(1, 6):\n        distributed_apples += i\n    remaining_apples = 27 - distributed_apples\n\n    # Now, we add the remaining apples starting from the child who gets the least,\n    # ensuring the difference between each child's apples stays 1.\n    x = 5  # Represents the starting number for the kid who gets the most\n    while remaining_apples > 0:\n        x += 1\n        remaining_apples -= 5\n\n    return x\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    possible_numbers = range(1, 26)\n    ways = [combo for combo in combinations(possible_numbers, 7) if sum(combo) == 25]\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    return 0.9\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    whole_number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (whole_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    # Calculate the sum of the arithmetic series\n    # sum = n/2 * (first_term + last_term)\n    # The last term is 5n\n    # The sum expression becomes n/2 * (5 + 5n) = 5n(n + 1)/2\n    # We need to find the smallest n for which this expression is divisible by 2013\n    \n    # Since 2013 = 3 * 11 * 61, n(n + 1)/2 should be divisible by 3 * 11 * 61 / 5\n    # We divide by 5 since it's a common factor in 5n(n + 1)/2, but we keep the other prime factors\n    target_divisor = 3 * 11 * 61 // 5\n\n    n = 1\n    # Keep iterating until we find the smallest n that satisfies the condition\n    while True:\n        # Check the divisibility of the sum for a given n\n        if (n * (n + 1) // 2) % target_divisor == 0:\n            return n\n        n += 1\n\n# Store the result in `ans`\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # assuming the current year as 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let the number of volunteers be v and the number of trees be t\n    from sympy import symbols, Eq, solve\n    \n    v, t = symbols('v t')\n    \n    equation1 = Eq(4 * v + 5, t)\n    equation2 = Eq(7 * (v - 1), t)\n    \n    solutions = solve((equation1, equation2), (v, t))\n    \n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 55\n    row = 1\n    while True:\n        boys = (row * 4) - 4 if row > 1 else 1\n        girls = ((row - 2) * 4) - 4 if row > 2 else 0\n        total_students += boys + girls\n        if boys - girls == boys_more_than_girls:\n            break\n        row += 2\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let g be the amount of grass grown each week\n    # Let t be the total amount of grass\n\n    # From the first statement, we get the equation\n    # t + 12*g = 120*12\n    # Since 120 cows eat up the grass in 12 weeks, \n    # which means t grass plus the grass grown in 12 weeks (12*g) \n    # is enough to feed 120 cows for 12 weeks.\n\n    # From the second statement, we get the equation\n    # t + 8*g = 150*8\n    # Similarly, 150 cows eat up the grass in 8 weeks.\n\n    # We need to find the number of cows (c) that the pasture can sustain for 6 weeks\n    # We use the equation\n    # t + 6*g = c*6\n\n    # Now let's solve the system of equations:\n\n    # t + 12g = 120 * 12\n    # t + 8g = 150 * 8\n    # Subtracting the second equation from the first, we get\n    # 4g = 120*12 - 150*8\n\n    g = (120*12 - 150*8) // 4\n    t = 120*12 - 12*g\n\n    # Now use t and g to solve for c using the third equation\n    c = (t + 6*g) // 6\n\n    return c\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b') # Number of stickers in Bag A and Bag B initially\n\n    # Total number of stickers\n    total_stickers_eq = Eq(a + b, 270)\n\n    # After moving from Bag A to Bag B, ratio of B to A is 3:2\n    moved_stickers_eq = Eq((b + 56) / (a - 56), 3/2)\n\n    # Solving the equations\n    solutions = solve((total_stickers_eq, moved_stickers_eq), (a, b))\n\n    # There may be multiple solutions. We pick the one with positive stickers initially in Bag A.\n    for sol in solutions:\n        if sol[a] > 0 and sol[b] > 0:\n            return sol[a]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion\n    # 10:x = 14:21\n    # Cross Multiplication\n    # 10 * 21 = x * 14\n    # Therefore,\n    # x = (10 * 21) / 14\n    x = (10 * 21) // 14  # Using integer division since we expect the answer to be an integer\n\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 6\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    packets_needed = -(-children // bars_per_packet)\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        sum_f = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum_f += i\n                if i != n // i:\n                    sum_f += n // i\n        return sum_f\n    \n    n = 2\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    # Initialize the variables\n    start_value = 30\n    end_value = 14\n    ans = 0\n    \n    # Iterator from start_value to end_value with step -2\n    for i in range(start_value, end_value - 1, -2):\n        # Alternate between subtracting and adding\n        ans = ans - i if (start_value - i) % 4 == 0 else ans + i\n    \n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 28 + (10 - 2) * 3\n    first_term = nth_term - (10 - 1) * 3\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes / cakes_per_box\n\n    return int(num_boxes) if total_cakes % cakes_per_box == 0 else int(num_boxes) + 1\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    sweets_initial = 30\n    sweets_kept = 6\n    friends_count = 6\n\n    sweets_given_away = sweets_initial - sweets_kept\n    sweets_per_friend = sweets_given_away // friends_count\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lovelle, makayla = symbols('lovelle makayla')\n    equation1 = Eq(lovelle + makayla, 3998)\n    equation2 = Eq(lovelle - 462, makayla - (2/5)*makayla)\n    \n    solutions = solve((equation1, equation2), (lovelle, makayla))\n    \n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Irene had\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq((1/4)*x + (2/7)*x, 225)\n\n    # Solve for x\n    total_money = solve(equation, x)[0]\n\n    return total_money\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Using the Pigeonhole Principle to solve\n    # Consider the worst-case scenario before we get 10 cards of the same colour.\n    # The dealer could pick 9 cards from each colour and not have 10 of the same colour.\n    # Thus, add one more card to guarantee 10 of the same colour.\n    \n    max_cards_before_ten = (4 - 1) * 9\n    cards_to_ensure_ten = max_cards_before_ten + 1\n    return cards_to_ensure_ten\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    gap_between_daffodils = 1.1\n    number_of_gaps = 8 - 1  # Since the row begins and ends with a daffodil, there's one less gap than the number of daffodils\n\n    length_of_row = (number_of_gaps * gap_between_daffodils) + (2 * 0)  # The plants on the ends don't contribute to the gap\n\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n\n    length_per_piece = ribbon_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 9 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Since the boxes are identical, we need to divide by the number of permutations\n    # of the three boxes, which is 3 factorial (3! = 3*2*1 = 6).\n    return count // 6\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let x be the amount Jane drinks, then Alex drinks 1.5x.\n    # Together they drink the whole bottle. So, x + 1.5x = total_juice.\n    x = total_juice / (1 + 1.5)\n    alex_drinks = 1.5 * x  # Calculate how much Alex drinks.\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n\n    minutes_taken = distance / speed\n\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # To find the largest number of different positive integers that sum up to 30,\n    # we can start from 1 and keep adding the next integer until we cannot add a new term without exceeding 30.\n    # This is essentially finding the maximum length of consecutive integers starting from 1 summing to a value <= 30.\n    # This sequence will be 1, 2, 3, ..., k such that 1 + 2 + 3 + ... + k <= 30.\n    total = 0\n    ans = 0\n    for i in range(1, 31):\n        total += i\n        if total > 30:\n            break\n        ans = i\n    return ans\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n\n    # Calculate the total number of ways to form a group of 4 without any condition\n    total_ways_any = comb(total_girls + total_boys, group_size)\n    \n    # Calculate the number of ways to form a group of 4 with girls only\n    ways_girls_only = comb(total_girls, group_size)\n    \n    # Subtract the girls-only groups from the total to ensure at least 1 boy\n    ans = total_ways_any - ways_girls_only\n    \n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1 / 2) * (16 / (1 / 4))\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    friends = 6\n\n    pears_per_friend = total_pear // friends\n    strawberries_per_friend = total_strawberry // friends\n    chocolates_per_friend = total_chocolate // friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    fraction_spent_on_bag = 2/5\n\n    # Calculate the money before buying the bag\n    before_bag = bag_cost / fraction_spent_on_bag\n\n    fraction_remaining_after_book = 1 - 1/4\n\n    # Calculate the initial amount of money\n    initial_money = before_bag / fraction_remaining_after_book\n\n    return initial_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6 # Since the base of 6^3 is 6\n\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    pages = 0\n    digits = 0\n    \n    while digits < 157:\n        pages += 1\n        digits += len(str(pages))\n    \n    return pages - 1 if digits > 157 else pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # Iterating through odd numbers between 200 and 241\n        if number % 3 == 0 and number % 7 == 0:  # Checking divisibility by both 3 and 7\n            return number  # Return the number if conditions met\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7 - 7) * 13)\n    return ans\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            price = int(f\"{i}679{j}\")\n            if price % 72 == 0:\n                return price // 72\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n    \n    time_to_pass = train_length / speed  # time = distance/speed\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Check if sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    plants = intervals + 1\n    return plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    spent_on_dvd = total_money / 3\n    remaining_after_dvd = total_money - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n    \n    return remaining_after_book\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Calculate the total length of the road using peach trees\n    total_length = (41 - 1) * 3  # 41 trees with 40 intervals of 3m each\n    \n    # Calculate the number of lamp posts\n    # Since there are lamp posts at both ends of the road, we start with 1 lamp post\n    # Then, we divide the total length by the distance between lamp posts and add 1\n    num_lamp_posts = (total_length // 8) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    for year in range(3):\n        # Rabbits multiply\n        rabbits *= 3\n        # Wolves eat half of the rabbits\n        rabbits /= 2\n    return int(rabbits)\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of candies as c, students in class A as a, and students in class B as b.\n    c, a, b = symbols('c a b')\n    \n    # According to the problem description, we have the following system of equations:\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    # Therefore, the total number of candies needed for class A is 4*a + 20.\n    equation1 = Eq(4*a + 20, c)\n    \n    # If each student in class B gets 6 candies, there will be 16 candies left.\n    # Therefore, the total number of candies needed for class B is c - 16.\n    equation2 = Eq(6*b, c - 16)\n    \n    # It's known that the number of students in class A is twice that of class B.\n    equation3 = Eq(a, 2*b)\n    \n    # Solving the system of equations for c (the number of candies).\n    solutions = solve((equation1, equation2, equation3), (c, a, b))\n    \n    # Extracting the value of c from the solutions dictionary.\n    return solutions[c]\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time to travel the first mile at 60 mph\n    time_for_first_mile = 1 / 60\n    # Calculate the time to travel the second mile at 30 mph\n    time_for_second_mile = 1 / 30\n    \n    # Calculate the total time for 2 miles\n    total_time = time_for_first_mile + time_for_second_mile\n    \n    # Calculate the total distance\n    total_distance = 2\n    \n    # Calculate the average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    money_per_wash = 1.40\n    target_amount = 12\n    number_of_washes = (target_amount / money_per_wash) + 1  # Plus 1 because we need \"more than\" £12\n\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    return 2 ** (4 - 1)\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define a symbol for our natural number greater than 1\n    x = symbols('x', integer=True, positive=True)\n\n    # Set up the equations based on the given information\n    eq1 = Eq(290 % x, a)\n    eq2 = Eq(235 % x, a + 2)\n    eq3 = Eq(200 % x, a + 5)\n\n    # Solve the system of modular equations\n    sols = solve((eq1, eq2, eq3), (x, a))\n\n    # Filter out the natural number greater than 1\n    ans = [sol[x] for sol in sols if sol[x] > 1][0]\n    return ans\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6  # From Monday to Saturday\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n    equation1 = Eq(angle2, 2 * angle1)\n    equation2 = Eq(angle1 + angle2 + 90, 180)\n\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    return solutions[angle2]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        is_val = 10 * i + s\n        pi_val = 10 * p + i\n        if 4 * is_val == pi_val and p != 0:\n            return pi_val\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    n = 9  # number of elderly members\n    # The sum of an arithmetic sequence can be calculated by: n * (first_term + last_term) / 2 = total_sum\n    # Because there are 9 consecutive numbers n * (first_term + last_term) / 2 = total_sum\n    # Thus, the middle term (which is also the average because n is odd) is total_sum / n\n    middle_age = total_sum / n\n    return int(middle_age)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n    \n    # Define the equations based on the problem statement\n    eq1 = Eq(9 * necklace + 5 * earring, 1440)\n    eq2 = Eq(3 * necklace + earring, 438)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (necklace, earring))\n    \n    # Calculate and return the total cost of one necklace and one earring\n    total_cost = solution[necklace] + solution[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    total_sunshine_for_sunday = 10\n    total_days = 7\n    total_sunshine_for_week = total_sunshine_for_six_days + total_sunshine_for_sunday\n    average_sunshine_per_day = total_sunshine_for_week / total_days\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n    walking_time = 24  # min\n\n    # Total distance to school.\n    total_distance = walking_speed * walking_time  # meters\n\n    # Distance covered by walking half the journey.\n    half_distance = total_distance / 2  # meters\n\n    # Time taken to walk half the journey.\n    time_walking_half = half_distance / walking_speed  # min\n\n    # Time taken to run half the journey.\n    time_running_half = half_distance / running_speed  # min\n\n    # Total time for half walk and half run.\n    total_time = time_walking_half + time_running_half\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_distance = 320\n    trees = 79\n    intervals = trees + 1  # There are always n+1 intervals if n objects are placed in a line\n\n    distance_between_each_tree = total_distance / intervals\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 0.5\n    girls_saw_movie = girls * 0.6\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Kim's savings\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    mother_share = savings / 3\n    \n    # Kim spent $177 on dresses and $129 on earrings\n    expenses = 177 + 129\n\n    # The amount left is 1/2 of what she gave her mother\n    money_left = mother_share / 2\n\n    # Total savings equation\n    equation = Eq(savings - mother_share - expenses, money_left)\n    \n    # Solve the equation\n    solutions = solve(equation, savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Number of apples that can be distributed\n    apples = 6\n    # Number of identical baskets\n    baskets = 3\n\n    # Initialize the answer\n    ans = 0\n\n    # The problem can be thought of as distributing n+1 identical objects into r distinct boxes\n    # Using the formula (n+r-1)C(r-1)\n    n = apples  # identical apples\n    r = baskets  # distinct baskets\n    \n    from math import comb\n    ans = comb(n + r - 1, r - 1)\n\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n\n    # calculate the number of pieces that can be cut\n    number_of_pieces = total_length // piece_length\n    \n    # calculate the length left over after cutting the maximum number of pieces\n    length_left_over = total_length - (number_of_pieces * piece_length)\n    \n    return length_left_over\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    decimal = 1 + 3/100\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    # Initialize the sum of all possible values of N to 0\n    sum_of_N = 0\n    # We know that 2018 divided by N gives remainder 11, so 2018 - 11 must be divisible by N\n    dividend = 2018 - 11 # which is 2007\n\n    # We need to find all divisors of 2007\n    for potential_divisor in range(1, dividend + 1):\n        if dividend % potential_divisor == 0:\n            sum_of_N += potential_divisor\n\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):  # From day 1 to day 9\n        total_skirts += day * skirts_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    return (77.5 * 52 / 100) + (5.2 * 2.25)\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n    result = []\n    for n in range(30, 61):\n        if (n - first_term) % common_difference == 0:\n            result.append(n)\n    return result\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    number_string = \"\"\n    current_number = 1\n\n    while len(number_string) < 2023:\n        number_string += str(current_number)\n        current_number += 1\n\n    ans = int(number_string[2022])\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for apples and bananas\n    a, b = symbols('a b')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    initial_income = 150000\n    initial_tax_rate = 0.08\n    initial_taxed_income = 50000\n    paid_tax = 15000\n\n    # Calculate the tax paid for the first $50,000\n    tax_for_initial_income = initial_taxed_income * initial_tax_rate\n\n    # Calculate the remaining tax paid\n    remaining_tax = paid_tax - tax_for_initial_income\n\n    # Income above initial $50,000\n    remaining_income = initial_income - initial_taxed_income\n\n    # Effective tax rate for the remaining income\n    effective_tax_rate = remaining_tax / remaining_income\n\n    # Find T by subtracting the initial 8% tax\n    T = (effective_tax_rate - initial_tax_rate) * 100\n\n    return T\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 24  # Woody answered all but one of the 25 questions\n    score_per_correct = 4\n    score_per_incorrect = -2\n    total_score = 66\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * score_per_correct + incorrect * score_per_incorrect\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    min_boys_per_day = total_boys // days_in_january\n    if total_boys % days_in_january == 0:\n        ans = min_boys_per_day\n    else:\n        ans = min_boys_per_day + 1\n    return ans\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    digits = [0, 2, 3]\n    count = 0\n\n    # Using the digits 2 and 3 in the hundreds place (0 cannot be used here)\n    for hundreds in digits[1:]:  # Only 2 or 3\n        for tens in digits:  # Can be 0, 2, or 3\n            for ones in digits:  # Can be 0, 2, or 3\n                if tens != hundreds and ones != tens and ones != hundreds:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces_length = space_between_cars * (31 - 1) * 2 # spaces before and after each car\n\n    total_length = first_car_length + (other_cars_length * number_of_other_cars) + total_spaces_length\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    term7 = 105\n    term8 = 120\n    common_difference = term8 - term7\n    term100 = term7 + (100 - 7) * common_difference\n    return term100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    initial_chocolates = 5 * 10\n    chocolates_given_away = 23\n    remaining_chocolates = initial_chocolates - chocolates_given_away\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    \n    for perm in permutations(students):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) // sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    cost_biscuits_per_packet = 73  # in pence\n    cost_cake_per_large = 113  # in pence since £1.13 is 113p\n    total_biscuits_cost = 7 * cost_biscuits_per_packet\n    total_cakes_cost = 9 * cost_cake_per_large\n    \n    total_cost_in_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_in_pounds = total_cost_in_pence / 100  # converting pence to pounds\n\n    note_in_pounds = 20\n    change = note_in_pounds - total_cost_in_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    \n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables: rachel's candy and alice's candy\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # After eating 8 pieces each, Rachel has 3 times the pieces Alice has\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # The total pieces of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define varible for Peter's original number of stickers\n    peter = symbols('peter')\n    \n    # Sam has 40 more stickers than Peter originally\n    sam = peter + 40\n    \n    # Sam gives 20% of his stickers to Peter\n    sam -= 0.20 * sam\n    peter += 0.20 * (peter + 40)\n    \n    # Peter gives 25% of his stickers to Sam\n    peter -= 0.25 * peter\n    sam += 0.25 * (0.20 * (peter + 40))\n    \n    # In the end, Sam has 96 stickers more than Peter\n    equation = Eq(sam - peter, 96)\n    \n    # Solve the equation\n    peter_original = solve(equation, peter)\n    \n    return peter_original[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    return tops * bottoms\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    total_minutes_before_lunch = 10 + 20 + 20\n    home_arrival_time = lunch_end_time - timedelta(minutes=total_minutes_before_lunch)\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40', '%H:%M')\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n\n    return leave_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # Calculate combinations of selecting 3 unique digits from 4\n    combinations_3_digits = factorial(4) / factorial(4 - 3)\n    \n    # There are 3! ways to arrange 3 digits from the 4 digits in 2017\n    permutations_3_digits = factorial(3)\n    \n    # Total number of 3-digit numbers\n    total_3_digits = combinations_3_digits * permutations_3_digits\n    \n    # Calculate permutations of 4 unique digits\n    # Since we are using all 4 digits, no need to calculate combinations\n    permutations_4_digits = factorial(4)\n    \n    # Total number can be formed is the sum of the two\n    ans = total_3_digits + permutations_4_digits\n    \n    return int(ans)\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    # Convert 6 1/2 to an improper fraction: (6 * 2 + 1) / 2\n    numerator = 6 * 2 + 1\n    denominator = 2\n    # Perform division by multiplying by the reciprocal of 1/2, which is 2/1\n    result_numerator = numerator * 2\n    result_denominator = denominator * 1\n\n    # Simplify the result (if needed)\n    ans = result_numerator / result_denominator\n\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    number_of_terms = 14\n    \n    last_term = first_term + (number_of_terms - 1) * difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    # Initialize the count of 9s and page number\n    count_9s, page = 0, 0\n\n    # Count the occurrence of digit 9 in each page number until the count reaches 181\n    while count_9s < 181:\n        page += 1\n        count_9s += str(page).count('9')\n    \n    # Return the page number just before we exceed 181 occurrences of 9\n    return page\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for number of crystals Jason had initially\n    initial_crystals = symbols('initial_crystals')\n    \n    # Equation based on the problem statement\n    final_equation = Eq((initial_crystals / 2) + 10 + 20 - 14, 35 + (initial_crystals / 2))\n    \n    # Solving for the initial number of crystals\n    solutions = solve(final_equation, initial_crystals)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Since the pattern repeats every 5 rabbits (1 black, 2 white, 2 grey)\n    # and we know that there are 14 grey rabbits,\n    # we need to find the number of complete patterns and any extra grey rabbits.\n\n    # Each complete pattern contains 2 grey rabbits,\n    # so the number of complete patterns is 14 grey rabbits / 2 grey per pattern.\n    complete_patterns = 14 // 2\n\n    # If the number of grey rabbits is not evenly divisible by 2,\n    # there will be an incomplete pattern with an additional grey rabbit after the complete patterns.\n    extra_grey = 14 % 2\n\n    # Incomplete pattern scenarios:\n    # If there is 1 extra grey,\n    # we need to account for 1 black and 2 white rabbits before repeating the pattern.\n    if extra_grey == 1:\n        extra_rabbits = 1 + 2  # 1 black and 2 white rabbits before the extra grey\n    else:\n        extra_rabbits = 0\n\n    # Total number of rabbits is the number in complete patterns plus any extra rabbits.\n    total_rabbits = (complete_patterns * 5) + extra_rabbits\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    for first_digit in numbers:\n        for second_digit in numbers:\n            for third_digit in numbers:\n                if first_digit != 0 and first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    three_digit_number = first_digit * 100 + second_digit * 10 + third_digit\n                    three_digit_numbers.append(three_digit_number)\n    \n    largest = max(three_digit_numbers)\n    smallest = min(three_digit_numbers)\n    difference = largest - smallest\n    \n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    A = 12\n    B = 15\n    C = 18\n\n    # Calculate the greatest common divisor of the number of students\n    ans = gcd(gcd(A, B), C)\n    \n    return ans\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = ['2', '4']\n    count = 0\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    count = 0\n    \n    for i in range(1, num + 1):\n        if num % i == 0 and i % 9 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n    \n    final_amount = principal * ((1 + rate) ** years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    total_cost = cost_per_box * 12\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Price for one sweet and three sweets\n    one_sweet_price = 12\n    three_sweets_price = 30\n    \n    # Convert £2 to pence\n    total_pence = 200\n    \n    # Calculate maximum number of sweets when buying sets of three\n    max_three_sweets_sets = total_pence // three_sweets_price\n    remaining_pence = total_pence % three_sweets_price\n    \n    # Calculate additional sweets that can be bought with the remaining pence\n    additional_sweets = remaining_pence // one_sweet_price\n    \n    # Total number of sweets\n    total_sweets = (max_three_sweets_sets * 3) + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n    # Distributing k identical items into n distinct boxes with at least one in each box\n    # is equivalent to (k-1) identical items into n boxes without restrictions.\n    # This is solved by using combinations with repetition: comb(k - 1, n - 1).\n    k = 10  # number of identical balls\n    n = 7   # number of different boxes\n    ans = comb(k - 1, n - 1)\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the total litres of water needed to fill the tank.\n    # Equation for 5-litre pail: x = 5n - 4 where n is the number of 5-litre pails.\n    # Equation for 3-litre pail: x = 3m + 4 where m is the number of additional 3-litre pails needed.\n    # We need to find the smallest x that satisfies both conditions.\n\n    n = 1  # Start with one 5-litre pail\n    while True:\n        if (5 * n - 4) % 3 == 1:  # The remaining water when divided by 3 should give us a remainder of 1, which means it needs one more pail\n            break\n        n += 1\n\n    # Now, n is the number of 5-litre pails needed.\n    # The total litres of water needed to fill the tank is given by 5n - 4.\n    x = 5 * n - 4\n\n    return x\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n\n    num_pipes_needed = pipe_length / each_pipe_length\n\n    return int(num_pipes_needed)\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8*9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count_twice = 0 \n    for num in range(1, 2017):\n        factors = 0\n        if num % 2 == 0:  # Check if the number is a multiple of 2\n            factors += 1\n        if num % 3 == 0:  # Check if the number is a multiple of 3\n            factors += 1\n        if num % 4 == 0:  # Check if the number is a multiple of 4\n            factors += 1\n        if factors == 2:  # If the number has exactly two factors \n            count_twice += 1\n    return count_twice\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    kenny_age_now, brother_age_now, may_age_future, sum_ages_future = symbols('kenny_age_now brother_age_now may_age_future sum_ages_future')\n\n    # Kenny is 2 years older than his younger brother\n    equation1 = Eq(kenny_age_now, brother_age_now + 2)\n    \n    # When May is 10, the sum of Kenny's and his brother's age is 3 times May's age\n    equation2 = Eq(sum_ages_future, 3 * may_age_future)\n    \n    # May's future age is 10\n    equation3 = Eq(may_age_future, 10)\n    \n    # Kenny's age + Brother's age - May's age (when Kenny tells May the statement, she is 7)\n    equation4 = Eq(sum_ages_future, kenny_age_now + brother_age_now - (10 - 7))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (kenny_age_now, brother_age_now, may_age_future, sum_ages_future))\n\n    # Kenny's age difference from May today (May is 7 years old today)\n    kenny_age_difference_from_may = solutions[kenny_age_now] - 7\n\n    return kenny_age_difference_from_may\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count, pages = 0, 0\n    while count < 28:\n        pages += 1\n        count += str(pages).count('3')\n    return pages\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # The strategies are based on eating a number of candies that leaves a position where the other player only has bad moves.\n\n    # The starting number of candies is 10.\n    # We work backwards to determine the strategy.\n    # We want to leave the opponent with a number of candies which is a multiple of 3 on our last move.\n    # This way, no matter if they eat 1 or 2 candies, we can always eat 2 or 1 respectively to return to a multiple of 3.\n\n    # We should thus aim for leaving 9, 6, 3, or 0 candies after our move (of course,\n    # zero cannot occur since the person who eats the last candy wins).\n    # This can be achieved by eating 1 candy when the number of candies is 10 (leaving 9).\n\n    # Assuming both players play optimally, we can define this winning strategy:\n    # Felix should go first and eat 1 candy.\n    # Then, no matter what John does, Felix can always respond in such a way to leave John a multiple of 3 candies.\n\n    # Let's represent this strategy in the function:\n    optimal_play = True\n    felix_move = 1  # Felix should eat 1 candy on the first move\n\n    return optimal_play, felix_move\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total = sum(coins)\n    \n    for coin in coins:\n        if (total - coin) == 2 * (total - (total - coin)):\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    time_first_bus = 15 * 60 + 55\n    time_you_arrive = time_first_bus + 4  # 4 minutes late\n    time_second_bus = 16 * 60 + 35\n\n    wait_time = time_second_bus - time_you_arrive  # in minutes\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "from sympy.solvers import solve\nfrom sympy import Symbol\n\ndef solution():\n    boys = Symbol('boys')\n    girls = Symbol('girls')\n\n    original_count_eq = boys + girls - 152\n    after_removal_eq = (boys - (boys / 11)) - (girls - 5)\n\n    # Solve the system of equations\n    solved_values = solve((original_count_eq, after_removal_eq), (boys, girls))\n    \n    return solved_values[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    num_trees = road_length // distance_between_trees + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = -(-workers // capacity)  # Ceiling division\n\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    men, women = symbols('men women')\n    \n    # 4 times as many women as men\n    equation1 = Eq(women, 4 * men)\n    \n    # number of women was 126 more than the number of men\n    equation2 = Eq(women, men + 126)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n    \n    # total number of people in the concert hall\n    total_people = solutions[men] + solutions[women]\n    \n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Andrew and Louise's ages\n    andrew, louise = symbols('andrew louise')\n    \n    # Andrew is three times as old as Louise\n    equation1 = Eq(andrew, 3 * louise)\n    \n    # The sum of their ages is 84\n    equation2 = Eq(andrew + louise, 84)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # The sum of 4 of these 5 numbers is 36*4, 38*4, 39*4, 45*4, and 49*4 respectively\n    sums_of_four = [36*4, 38*4, 39*4, 45*4, 49*4]\n\n    # The sum of all these 5 numbers would then be the sum of the above minus the smallest sum\n    all_numbers_sum = max(sums_of_four) + min(sums_of_four)\n    \n    # The sum of the four smallest numbers is the second smallest sum of four\n    four_smallest_sum = sorted(sums_of_four)[1]\n    \n    # The largest number is the difference between the sum of all 5 numbers and the sum of the 4 smallest numbers\n    largest_number = all_numbers_sum - four_smallest_sum\n    \n    return largest_number\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n    \n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 4), x ≡ 3 (mod 5), x ≡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Solve the system of congruences\n    x = solve_congruence(*congruences)\n\n    # Since we are looking for a three-digit number less than 200,\n    # we find the smallest number that fits this condition.\n    while x[0] < 100 or x[0] >= 200:\n        x = (x[0] + x[1], x[1])\n\n    return x[0]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    students, rooms = symbols('students rooms')\n    \n    equation1 = Eq(4*rooms + 6, students)\n    equation2 = Eq(rooms - 1, students / 5)\n    \n    solutions = solve((equation1, equation2), (students, rooms))\n    \n    return solutions[students]\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die2 != die3 and die1 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    weight_sugar = 1000  # 1kg in grams\n    weight_pasta = 50    # already in grams\n    weight_spaghetti = 15 # already in grams\n\n    total_weight = weight_sugar + weight_pasta + weight_spaghetti\n\n    return total_weight\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    original_mean = 9\n    new_mean = 10\n    num_numbers = 7\n\n    total_original = original_mean * num_numbers\n    total_new = new_mean * (num_numbers - 1)\n\n    removed_number = total_original - total_new\n\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_leave = total_people * (1/3)\n    people_remaining = total_people - people_leave\n    return int(people_remaining)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Extract the common factor of 3999 and 2014\n    common_factor = 3999 * 2014\n    # Calculate the value inside the parentheses\n    value_inside = common_factor * 1.2014 + 3999.3999 * 2014\n    # Divide the result by 12.0012\n    ans = value_inside / 12.0012\n    # Return the final result\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30  # time taken to pass the tree\n    length_meters = 360  # length of the train\n    speed_meters_per_second = length_meters / time_seconds  # speed = distance / time\n\n    # Convert speed from meters/second to meters/hour\n    speed_meters_per_hour = speed_meters_per_second * 3600\n\n    return speed_meters_per_hour\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "from math import lcm\n\ndef solution():\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    # Find the least common multiple of the intervals\n    lcm_interval = lcm(interval_a, interval_b, interval_c)\n\n    # Convert the least common multiple from minutes to a time format (HH:MM)\n    hours_added = lcm_interval // 60\n    minutes_added = lcm_interval % 60\n    next_arrival_hour = 10 + hours_added\n    next_arrival_minute = minutes_added\n\n    # If the minutes exceed 59, adjust the hour\n    if next_arrival_minute >= 60:\n        next_arrival_hour += 1\n        next_arrival_minute -= 60\n\n    # Format the time to HH:MM\n    next_time = f\"{next_arrival_hour:02d}:{next_arrival_minute:02d} am\"\n\n    return next_time\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_no_answer_mark = -2\n    total_marks = 79\n\n    # Let x be the number of questions Eddie answered correctly.\n    # The remaining questions count as wrong or no answer, which is total_questions - x.\n    # The total score is then x * correct_mark + (total_questions - x) * wrong_no_answer_mark.\n    # We set the equation to equal the total marks Eddie got.\n\n    # x * correct_mark + (total_questions - x) * wrong_no_answer_mark = total_marks\n    # After simplifications:\n    # (correct_mark - wrong_no_answer_mark) * x = total_marks - total_questions * wrong_no_answer_mark\n    # x = (total_marks - total_questions * wrong_no_answer_mark) / (correct_mark - wrong_no_answer_mark)\n\n    x = (total_marks - total_questions * wrong_no_answer_mark) / (correct_mark - wrong_no_answer_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    daily_climb = 3\n    nightly_slide = 1\n    net_distance = daily_climb - nightly_slide\n    \n    days = (total_distance - daily_climb) // net_distance\n    \n    if (total_distance - daily_climb) % net_distance != 0:\n        days += 1\n\n    days += 1  # For the final climb\n    \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Considering the worst case scenario with the pigeonhole principle:\n    # Drawing all of one color, then all of another, and then some of the third\n    # Worst case: 12 (all reds) + 9 (all blues) + 1 (one yellow) = 22\n    # But since we need 4 different colors and we only have 3 so far,\n    # we must draw one more marble which will be of the remaining color (green).\n    ans = 12 + 9 + 1 + 1 # Red + Blue + Yellow + Green\n    return ans\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4  # Applying the Law of Addition\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    num1, num2 = 10, 24\n    step = 2\n\n    # Since they are directly opposite in the circle, the number of people\n    # in half the circle must be (num2 - num1) / step\n    half_people = (num2 - num1) // step\n\n    # Total number of people is double the half_people\n    total_people = half_people * 2\n\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_percentage = 20\n    savings_less_than_food = 6\n\n    books_cost = (books_percentage / 100) * pocket_money\n    food_plus_transport = pocket_money - books_cost\n    savings = (1/4) * food_plus_transport - savings_less_than_food\n    savings_percentage = (savings / pocket_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    valid_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return valid_ages[0] if valid_ages else None\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # By Inclusion-Exclusion Principle for 3 sets:\n    # |Swimmers ∪ Cyclists ∪ TableTennisPlayers| = |Swimmers| + |Cyclists| + |TableTennisPlayers|\n    # - |Swimmers ∩ Cyclists| - |Cyclists ∩ TableTennisPlayers| - |Swimmers ∩ TableTennisPlayers|\n    # + |Swimmers ∩ Cyclists ∩ TableTennisPlayers|\n    \n    # As we need the least number of students who are in all three sets, we maximize the intersection of two sets\n    # The maximum intersection for two sets is min(|Swimmers|, |Cyclists|, |TableTennisPlayers|)\n    # Total intersections should be sum of individuals minus total_students, since we can't have more than total_students\n    \n    total_intersections = swimmers + cyclists + table_tennis_players - total_students\n    \n    # We need to split this intersection into three parts; we assume the intersections of two sets are maximized\n    \n    # For three sets, there could be max_intersections - |TableTennisPlayers| at most in the intersection of Swimmers and Cyclists\n    max_two_set_intersections = min(swimmers, cyclists, total_intersections)\n    \n    # Deducting the intersections of two sets from total_intersections gives us number of students who belong to all three\n    all_three_sports = total_intersections - max_two_set_intersections\n    \n    return all_three_sports\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "from math import lcm\n\ndef solution():\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    # Factors of 75 are 1, 3, 5, 15, 25, 75\n    # Since we're looking for a 2-digit number, the possible factors are 15, 25, and 75.\n    # Number when divided by 6 gives a remainder of 3; this means number = 6k + 3\n    # We're looking for a number that fits both criteria.\n    for factor in [15, 25, 75]:\n        if factor % 6 == 3:\n            return factor\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Incorrect subtraction problem solved by Little Miss Careless\n    incorrect_subtrahend = 41\n    incorrect_answer = 50\n    \n    # Find out the minuend by adding the incorrect subtrahend and incorrect answer\n    minuend = incorrect_subtrahend + incorrect_answer\n    \n    # Correct subtrahend\n    correct_subtrahend = 14\n    \n    # Calculate the correct difference\n    correct_difference = minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum(40 - i * 2 * ((i % 2) * 2 - 1) for i in range(0, 10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_ate = justin_ate + sisters_ate_each * number_of_sisters\n    total_apples_before = total_ate + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount_after_4_years = 7320.5\n    \n    # We need to find the interest rate such that principal*(1+r)^4 = amount_after_4_years\n    # We can rearrange this to find r: (1+r)^4 = amount_after_4_years / principal\n    # And then we take the fourth root: 1+r = ((amount_after_4_years / principal) ^ (1/4))\n    # Finally, we subtract 1 from both sides to isolate r: r = ((amount_after_4_years / principal) ^ (1/4)) - 1\n    \n    interest_rate = (amount_after_4_years / principal) ** (1/4) - 1\n    \n    return interest_rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for i in range(1, 31):\n        original_squares = i * i\n        new_squares = (i + 1) * (i + 1)\n        if new_squares - original_squares == 31:\n            return new_squares\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # Given that 3/x * 56 = 21, we can solve for x.\n    x = (3 * 56) / 21\n    return x\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    A = 3.2 + 6.77 + 8.88\n    B = 6.77 + 8.88 + 6.3\n    C = 3.2 + 6.77 + 8.88 + 6.3\n    D = 6.77 + 8.88\n\n    ans = (A * B) - (C * D)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # minutes (1 hour and 20 minutes)\n    \n    ans = total_time // time_per_picture\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n\n    # we have 6 choices for the first digit (1-6)\n    # we have 5 remaining choices for the second digit\n    # we have 4 remaining choices for the third digit\n    # we have 3 remaining choices for the fourth digit\n\n    # for numbers starting with '32'\n    for d3 in range(1, 7):  # d3 can be from [1-6]\n        if d3 != 2 and d3 != 3:  # d3 should not be equal to d1 or d2\n            for d4 in range(1, 7):  # d4 can be from [1-6]\n                if d4 != d3 and d4 != 2 and d4 != 3:  # all digits must be different\n                    total_count += 1  # each valid combination is incremented\n\n    # for numbers starting with '4'\n    for d2 in range(1, 7):  # d2 can be from [1-6]\n        if d2 != 4:  # d2 should not be equal to d1\n            for d3 in range(1, 7):  # d3 can be from [1-6]\n                if d3 != d2 and d3 != 4:  # d3 should not be equal to d1 or d2\n                    for d4 in range(1, 7):  # d4 can be from [1-6]\n                        if d4 != d3 and d4 != d2 and d4 != 4:  # all digits must be different\n                            total_count += 1  # each valid combination is incremented\n\n    # for numbers starting with '3'\n    # but can't start with '31', '33', '34', '35', '36' because those are less than 3267\n    for d2 in [2]:\n        for d3 in range(1, 7):  # d3 can be from [1-6]\n            if d3 != 3 and d3 != 2:  # d3 should not be equal to 3 or 2\n                for d4 in range(1, 7):  # d4 can be from [1-6]\n                    if d4 != d3 and d4 != 2 and d4 != 3:  # all digits must be different\n                        total_count += 1  # each valid combination is incremented\n\n    ans = total_count\n    return ans\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n\n    num_seconds = seconds_per_minute * minutes\n\n    return num_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # As there are 5 other children and each child must get at least one apple,\n    # we distribute one apple to each of the five children first.\n    apples_for_others = 5  # One apple for each of the 5 other children.\n    \n    # The remaining apples can be given to Ann.\n    ann_apples = 30 - apples_for_others\n    \n    return ann_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        number = int(''.join(perm)) # This generates the first number by concatenating the permuted digits\n        second = 2 * number # The second number is 2 times the first number\n        third = 4 * number # The third number is 4 times the first number\n        \n        # Check if the three numbers together contain every digit exactly once\n        combined = str(number) + str(second) + str(third)\n        if len(combined) == 7 and len(set(combined)) == 7:\n            return third\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    with_pants = shirts * pants * shoes\n    with_dress_shoes = dresses * shoes\n    with_dress_heels = dresses * heels\n\n    total_combinations = with_pants + with_dress_shoes + with_dress_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    eq1 = Eq(a + b, 13)\n    eq2 = Eq(a + c, 25)\n    eq3 = Eq(c, 3 * b)\n\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price, teddy_bear_price = symbols('book_price teddy_bear_price')\n    \n    equation1 = Eq(4 * book_price + 8 * teddy_bear_price, 164)\n    equation2 = Eq(2 * book_price + 3 * teddy_bear_price, 67)\n    \n    solutions = solve((equation1, equation2), (book_price, teddy_bear_price))\n    \n    return solutions[book_price]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    # Convert all masses to grams for easier calculation\n    # Total mass = 9 kg 5 g = 9005 g\n    total_mass_g = 9 * 1000 + 5\n    \n    # Mass of soil = 4 kg 50 g = 4050 g\n    soil_mass_g = 4 * 1000 + 50\n    \n    # Mass of sand = Total mass - Mass of soil\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    # Difference between the mass of the pack of soil and the mass of the pack of sand\n    difference_g = abs(soil_mass_g - sand_mass_g)\n    \n    # Convert the difference back to kg and g\n    difference_kg = difference_g // 1000\n    difference_g_remainder = difference_g % 1000\n\n    return (difference_kg, difference_g_remainder)\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let nina's buttons be n and james' buttons be j\n    # From the problem we have two equations\n    # n + j = 22 (Equation 1)\n    # n - 4 = j + 4 (Equation 2)\n    # From Equation 2 we can get n = j + 8\n    # Substituting the value of n from Equation 2 in Equation 1 we get\n    # j + 8 + j = 22\n    # Simplifying we get 2j = 14\n    # Which gives us j = 7\n    # Substituting j in Equation 2\n    # n = j + 8 = 7 + 8 = 15\n    # So Nina originally has 15 buttons\n    nina_buttons = 15\n    return nina_buttons\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    points_correct = 4\n    points_incorrect = -2\n    total_points = 29\n    \n    # Hypothetical situation: all answers are correct\n    # Then, recalculate for the actual score by compensating with incorrect answers\n    correct_answers = total_points / points_correct\n    score_difference = (total_questions * points_correct) - total_points\n    \n    incorrect_answers = score_difference / (points_correct - abs(points_incorrect))\n    correct_answers -= incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    full_patterns = 52 // 5\n    remainder_digits = 52 % 5\n    pattern_sum = sum(range(1, 6))\n    partial_sum = sum(range(1, remainder_digits + 1))\n\n    total_sum = full_patterns * pattern_sum + partial_sum\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper = 4.8\n    \n    kites_made = total_paper // paper_needed_per_kite\n    \n    return int(kites_made)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_distance = 320  # road length in meters\n    trees = 79  # total number of trees\n    intervals = trees + 1  # number of intervals is one more than the number of trees\n    \n    distance_between_each_tree = total_distance / intervals\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen traded 10 fish for 4 rabbits -> 1 rabbit = 10/4 fish\n    rabbits_per_fish = 10 / 4\n    \n    # Oscar traded 5 rabbits for 6 packs of wheat -> 1 pack of wheat = 5/6 rabbits\n    wheat_per_rabbit = 5 / 6\n    \n    # Dennis needs 12 packs of wheat\n    # Calculate how many rabbits are needed for 12 packs of wheat\n    rabbits_needed = 12 / wheat_per_rabbit\n    \n    # Calculate how many fish are needed for that number of rabbits\n    fish_needed = rabbits_needed * rabbits_per_fish\n    \n    return fish_needed\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    from fractions import Fraction\n\n    total_length = Fraction(54, 5)  # 10 4/5 meters converted to improper fraction\n    short_rod_length = Fraction(3, 10)\n\n    number_of_short_rods = total_length / short_rod_length\n    \n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    total_cost_for_20_single = 20 * single_laptop_cost\n\n    deal_cost_for_30 = 2800\n    per_laptop_cost_in_deal = deal_cost_for_30 / 30\n    total_cost_for_20_in_deal = 20 * per_laptop_cost_in_deal\n\n    savings = total_cost_for_20_single - total_cost_for_20_in_deal\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35 / 100\n\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    # Let p be the number of penguins\n    from sympy import symbols, Eq, solve\n\n    p = symbols('p')\n    equation1 = Eq(3 * p + 5, 4 * p - 15)  # setting up the equation based on the problem statement\n\n    penguins = solve(equation1, p)  # solving the equation\n\n    return penguins[0]  # as we need the number of penguins, we return the solution\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    total_earnings = hourly_wage * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    # Jenny subtracted 26 and got -14\n    wrong_result = -14\n    # To find the correct number, we add 26 to the wrong result, because subtracting was the mistake\n    correct_result_without_mistake = wrong_result + 26\n    # The intended operation was to add 26, so we add 26 again to find the number she should have obtained\n    actual_number_she_should_have_obtained = correct_result_without_mistake + 26\n\n    return actual_number_she_should_have_obtained\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate number of ways to arrange 6 singing performances (S)\n    s_permutations = factorial(6)\n\n    # Since there must be at least 1 singing performance (S) between every 2 dancing performances (D),\n    # we can treat each D as if it 'consumes' an S to be placed between D's. \n    # This means we have only 3 'free' S's to place which divides the D's into segments.\n    # The 4 D's can be placed into 4 segments created (before the first S, between S's, and after last S)\n    # which is (number of S's + 1) because of the constraint. So we have 7 places to put 4 D's.\n\n    # The number of ways to place 4 D's in these 7 places is the same as choosing 4 places from 7\n    # which is calculated by \"7 choose 4\"\n    d_placements = factorial(7) // (factorial(4) * factorial(7 - 4))\n\n    # The total number of ways is the product of s_permutations and d_placements\n    return s_permutations * d_placements\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors\n\ndef solution():\n    # M and N are multiples of their greatest common divisor, which is 75\n    gcd = 75  # gcd(M, N)\n    \n    # Prime factors of gcd(M, N) are 3 and 5\n    # gcd = 3^x * 5^y\n    # From 75 = 3^1 * 5^2, we get x = 1 and y = 2\n\n    # To find M and N, we consider they have to be of the form 3^a * 5^b\n    # and must be multiples of 75. We need to find such 'a' and 'b' that M and N\n    # have the required number of factors.\n\n    # Number of divisors for a number of the form 3^a * 5^b is given by (a+1)(b+1)\n    # M has 12 factors, which means (a+1)(b+1) = 12. We find (a, b) pairs that satisfy this.\n    possible_exponents_M = [(a, b) for a in range(1, 13) for b in range(1, 13) if (a + 1) * (b + 1) == 12]\n\n    # N has 10 factors, which means (a+1)(b+1) = 10. We find (a, b) pairs that satisfy this.\n    possible_exponents_N = [(a, b) for a in range(1, 11) for b in range(1, 11) if (a + 1) * (b + 1) == 10]\n\n    # Since M and N are multiples of 75, a must be at least 1 and b at least 2, since 75 = 3^1 * 5^2.\n    possible_values_M = [3**a * 5**b for (a, b) in possible_exponents_M if a >= 1 and b >= 2]\n    possible_values_N = [3**a * 5**b for (a, b) in possible_exponents_N if a >= 1 and b >= 2]\n\n    # Finally, we filter the list of possible M's and N's to make sure they have the right number of factors.\n    concrete_values_M = [value for value in possible_values_M if len(divisors(value)) == 12]\n    concrete_values_N = [value for value in possible_values_N if len(divisors(value)) == 10]\n\n    # Assume there is only one such M and N for each that satisfies all conditions\n    M = concrete_values_M[0]\n    N = concrete_values_N[0]\n\n    # Return the sum of M and N\n    return M + N\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew_to_kelly = 4/5\n    kelly_height = matthew_height / ratio_matthew_to_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 0.35 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    half_time_scores = 0\n    for team1 in range(4):  # Team 1 can score 0 to 3 goals by half time\n        for team2 in range(3):  # Team 2 can score 0 to 2 goals by half time\n            # The half time score shouldn't exceed the full time score for each team\n            if team1 <= 3 and team2 <= 2:\n                half_time_scores += 1\n    return half_time_scores\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1,10):         # The first digit of a two-digit number cannot be zero\n        for b in range(0,10):     # The second digit can be any number from 0 - 9\n            if (10*a + b) + (10*b + a) + b == 1000*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma = symbols('emma')\n    clara_baked = 5 * emma\n    total_baked = emma + clara_baked\n    equation = Eq(total_baked, 1002)\n\n    emma_cookies = solve(equation, emma)\n\n    return emma_cookies[0]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    # number of students\n    n = 6\n    # number of class monitors to choose\n    k = 2\n    # Using combinations to calculate the number of ways to choose 2 monitors from 6 students\n    return comb(n, k)\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_weight_when_half_full = half_full_weight - (full_weight / 2)\n    empty_basket_weight = (full_weight / 2) - mangoes_weight_when_half_full\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Calculate the total number of sweets based on the part Bud had\n    bud_part = 16\n    total_sweets = bud_part / (1 - 3/5)\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    left_side = 6 * 5\n    right_side = 40  # 100% of 40\n\n    # We want to find x such that left_side is x% of right_side\n    # x% of 40 = left_side\n    # x / 100 * 40 = left_side\n    # x = (left_side / 40) * 100\n    \n    ans = (left_side / right_side) * 100\n    return ans\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls in the class\n    # Let b represent the number of boys in the class\n    g, b = symbols('g b')\n\n    # According to the problem, there are 20 pupils who cannot swim\n    # and there is an equal number of boys and girls who cannot swim,\n    # so the number of non-swimming girls is equal to the number of non-swimming boys, which is 10 each.\n    \n    # The equation representing non-swimming girls: (1 - 3/8) * g = 10\n    # The equation representing non-swimming boys: (1 - 3/5) * b = 10\n    \n    # Setting up the equations\n    equation1 = Eq((1 - 3/8) * g, 10)\n    equation2 = Eq((1 - 3/5) * b, 10)\n\n    # Solving the equations gives us the number of girls and boys in the class\n    solutions = solve((equation1, equation2), (g, b))\n\n    # The total number of pupils in the class is the sum of the number of girls and boys.\n    total_pupils = solutions[g] + solutions[b]\n    return int(total_pupils)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike's position is always 2nd regardless of the direction,\n    # he can be in a corner that is second in two directions.\n    # This implies that the classroom can be arranged in a rectangle\n    # of desks and chairs where the lengths of the sides are consecutive integers.\n    # Let's denote the smaller side as n and the larger side as n+1,\n    # so the total number of students is n * (n + 1).\n    # We need to find out all the possible values of n.\n\n    class_size = []\n    for n in range(1, 100):  # n should be reasonably large\n        if n*(n + 1) >= 4:   # At least 4 students to fulfill the condition.\n            class_size.append(n * (n + 1))\n    \n    # Mike cannot be in the middle of one side, so n cannot be odd\n    # We will return the sum of all even values of n*(n+1)\n    ans = sum(size for size in class_size if size % 2 == 0)\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_five_cups = cost_per_cup * 5\n    return total_cost_for_five_cups\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days = 7  # Monday to Sunday, inclusive\n\n    total_earnings = average_daily_earnings * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(8, 0, -2):\n        ans += (i**2) - ((i - 1)**2)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5.00 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    factors = [2, 3]\n    for i in range(1, sum_of_numbers + 1):\n        prod = factors[0] * factors[1] * i\n        if prod == sum_of_numbers:\n            return i\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    capacity_big_house = 4\n    \n    # Calculate the number of rabbits in all big houses\n    rabbits_in_big_houses = big_houses * capacity_big_house\n    \n    # Calculate the remaining rabbits that need to be accommodated in small houses\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    \n    # Calculate the number of rabbits each small house can accommodate\n    # Assuming each small house accommodates the same number of rabbits\n    rabbits_per_small_house = remaining_rabbits / small_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    # Abigail is three times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n\n    # In 6 years time Abigail will be 42\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # How old will Ryan be in 2 years?\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * 7\n    ways[0] = 1  # Base case: There's one way to be at the start, before taking any steps\n\n    for i in range(1, 7):\n        ways[i] = ways[i - 1]\n        if i >= 2:\n            ways[i] += ways[i - 2]\n        if i >= 3:\n            ways[i] += ways[i - 3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = -(-56 // 4)  # Ceiling division to find the first multiple of 4 greater than or equal to 56\n    last_multiple = 92 // 4  # Floor division to find the last multiple of 4 less than or equal to 92\n    \n    num_multiples = last_multiple - first_multiple + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    num_terms = (last_term - first_term) // 2 + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum(i if i % 4 < 2 else -i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit in 999^99 will be the same as the ones digit in 9^99\n    # because the tens, hundreds etc. do not affect the ones digit.\n    # The cycle of ones digits for powers of 9 is 9, 1, and repeats after every power of 2.\n    # Thus, we need to find 99 % 2 to find the position in the cycle.\n\n    position_in_cycle = 99 % 2\n    \n    # If the position is 1, the ones digit is 9, if it is 0, the ones digit is 1.\n    if position_in_cycle == 1:\n        ones_digit = 9\n    else:\n        ones_digit = 1\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Claire's current age\n    claire_current = symbols('claire_current')\n\n    # Equation representing the relationship between her current age and age in 6 years\n    age_in_6_years_eq = Eq(claire_current + 6, 3 * claire_current)\n\n    # Solve the equation for Claire's current age\n    claire_current_age = solve(age_in_6_years_eq, claire_current)[0]\n\n    # Calculate Claire's age two years from now\n    claire_age_in_2_years = claire_current_age + 2\n\n    return claire_age_in_2_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Define the variables for actual and expected time\n    actual_time_fraction = 11/12\n    late_departure = 15\n    late_arrival = 5\n\n    # Calculate the actual journey time\n    # actual_travel_time = expected_travel_time * actual_time_fraction\n    # but we also know that actual_travel_time = expected_travel_time - late_departure + late_arrival\n    # Combining the two equations, we get:\n    # expected_travel_time - late_departure + late_arrival = expected_travel_time * actual_time_fraction\n    # Let expected_travel_time be x\n    # So, x - 15 + 5 = (11/12) * x\n    # x - 10 = (11/12) * x\n    # (1/12) * x = 10\n    # x = 10 * 12\n\n    expected_travel_time = 10 * 12\n\n    return expected_travel_time\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    # Calculate the result of the full multiplication\n    full_result = 5.42 * 25\n    \n    # Subtract the known multiplication part from the full result\n    remaining = full_result - (5.42 * 5)\n    \n    # Divide the remaining part by 5.42 to find the missing number\n    missing_number = remaining / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    # The problem is equivalent to finding a number x that satisfies the following:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    \n    # We will use the Chinese Remainder Theorem to find the smallest x that satisfies these three congruences.\n    # Since the moduli 3, 4 and 5 are pairwise coprime, the CRT guarantees a unique solution modulo the product of the moduli.\n\n    # Modular inverses for the system will be calculated using Extended Euclidean algorithm, but to simplify,\n    # direct calculation due to small numbers can be used.\n    \n    M = 3 * 4 * 5  # Product of the moduli\n    M1, M2, M3 = M//3, M//4, M//5  # Divided moduli\n\n    # Inverse of M1 mod 3, M2 mod 4 and M3 mod 5 (by inspection)\n    # Since the inverse of M1 mod 3 is irrelevant (multiplied by 0 will always be 0), we can skip calculating it.\n    inv_M2 = 1  # 4*1 ≡ 1 (mod 3)\n    inv_M3 = 1  # 5*1 ≡ 1 (mod 4)\n\n    # Now we construct the solution using the formula:\n    # x = (remainder1 * M1 * inverse_M1)\n    #   + (remainder2 * M2 * inverse_M2)\n    #   + (remainder3 * M3 * inverse_M3)\n    x = (2 * M1 * 0) + (3 * M2 * inv_M2) + (4 * M3 * inv_M3)\n    x = x % M  # Minimize x to be the smallest positive integer\n    \n    # The solution x should be less than 100, so we consider x + kM for some integer k until x is less than 100.\n    while x < 100:\n        if 0 < x < 100:\n            return x\n        x += M\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    \n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_height = 9\n    climb_per_day = 3\n    slide_per_night = 1\n    net_progress_per_day = climb_per_day - slide_per_night\n    current_height = 0\n    day = 0\n\n    while current_height < total_height:\n        day += 1  # Snail starts climbing at the beginning of the day\n        current_height += climb_per_day\n        if current_height >= total_height:\n            break\n        current_height -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    books = 19\n    kids = 4\n    # Since each kid should get at least one book, we distribute 1 book to each\n    remaining_books = books - kids\n    \n    # We are now distributing the remaining books among the kids\n    # Using stars and bars method\n    # (books + kids - 1) choose (kids - 1)\n    ways = factorial(remaining_books + kids - 1) // (factorial(kids - 1) * factorial(remaining_books))\n    \n    return ways\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Values of coins in pence\n    fare = 44\n    smallest_coins_count = 0\n    payment = 200  # Start by paying with the largest coin possible\n\n    # Calculate the change required\n    change = payment - fare\n    for coin in coins:\n        # Use as many coins of each denomination as possible\n        count, change = divmod(change, coin)\n        smallest_coins_count += count\n    \n    ans = smallest_coins_count + 1  # Plus one for the coin used to pay\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # We have 4 red, 7 green, 6 blue, and 2 orange marbles.\n    # In the worst case, to get 4 different colored marbles, Jane would need to pick as follows:\n    # She could pick all 7 green marbles first, then 6 blue marbles,\n    # and then 1 red marble. At this point, she has 3 different colors.\n    # Then she needs to pick just 1 more marble which will be the 2nd orange one to have all 4 colors.\n    # So the maximum marbles she needs to pick to ensure she has all 4 different colors is:\n    # 7 (green) + 6 (blue) + 1 (red) + 1 (orange) = 15 marbles\n\n    return 7 + 6 + 1 + 1\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    # Initialize the sequence with the given terms.\n    a, b = 2, 3\n\n    # Continue the sequence until a three-digit number is found.\n    while b < 100:\n        # Calculate the next term in the sequence.\n        next_term = a + b\n        a = b\n        b = next_term\n        \n    return next_term\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Subtract 1 pen for each pencil case to ensure none are empty\n    pens_left = 6 - 3\n    # Now we have 3 pens left to distribute in 3 pencil cases\n    # This is equivalent to the number of solutions to x + y + z = 3\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups\n    # The formula for this is (n + r - 1) choose (r - 1)\n    # In our case n = pens_left and r = 3\n    ways = math.comb(pens_left + 3 - 1, 3 - 1)\n    return ways\n\nimport math\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Tank D has 41 liters of water\n    D = 41\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, C + 5)\n    equation3 = Eq(A, C + D)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4*i+2)**2 - (4*i)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    milk_needed = milk_per_cup * cups_needed\n    return milk_needed\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let m = motorbikes, t = tricycles, v = vans\n    m, t, v = symbols('m t v')\n    \n    # motorbikes have 2 wheels each, tricycles have 3, vans have 4\n    total_wheels = Eq(2*m + 3*t + 4*v, 101)\n    \n    # motorbike and van wheels minus tricycle wheels\n    more_motorbike_van_than_tricycle = Eq(2*m + 4*v - 3*t, 35)\n    \n    # tricycle and van wheels minus motorbike wheels\n    more_tricycle_van_than_motorbike = Eq(3*t + 4*v - 2*m, 13)\n    \n    # solve the equations\n    solutions = solve((total_wheels, more_motorbike_van_than_tricycle, more_tricycle_van_than_motorbike), (m, t, v))\n    \n    # calculate how many more motorbikes than vans\n    more_motorbikes_than_vans = solutions[m] - solutions[v]\n    \n    return more_motorbikes_than_vans\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Pip_and_Bud = 2  # Pip and Bud themselves\n\n    total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    year = '2014'\n    days = 0\n    for month in range(1, 13):\n        if month < 10:\n            month_str = '0' + str(month)\n        else:\n            month_str = str(month)\n        for day in range(1, 32):\n            if day < 10:\n                day_str = '0' + str(day)\n            else:\n                day_str = str(day)\n            date_str = year + month_str + day_str\n            count_0 = date_str.count('0')\n            count_1 = date_str.count('1')\n            count_2 = date_str.count('2')\n            if count_0 == count_1 == count_2:\n                days += 1\n    return days\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers without p and q\n    given_numbers = [4, 5, 6, 9, 3, 9]\n    \n    # Given average of all 8 numbers\n    average = 6\n    \n    # Calculate the sum of the given numbers\n    sum_of_given_numbers = sum(given_numbers)\n    \n    # Calculate the total sum of all 8 numbers using the average (8 * average)\n    total_sum = 8 * average\n    \n    # Calculate the sum of p and q\n    sum_of_p_q = total_sum - sum_of_given_numbers\n    \n    # The highest and lowest possible values from the given numbers\n    highest_given = max(given_numbers)\n    lowest_given = min(given_numbers)\n    \n    # The difference between the highest and lowest values is 6\n    difference = 6\n    \n    # Initialize the lowest possible value for q\n    lowest_q = highest_given + difference\n    \n    # Considering p < q, and p + q equals sum_of_p_q,\n    # find the lowest possible value for q\n    while True:\n        p = sum_of_p_q - lowest_q\n        if p < lowest_q and (lowest_q - p == difference or \n            lowest_q - highest_given == difference or \n            lowest_given - p == difference):\n            break\n        lowest_q -= 1\n    \n    return lowest_q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both_sports = symbols('both_sports')\n\n    football = 3 * both_sports\n    basketball = 4 * both_sports\n    total_students = 36\n\n    equation = Eq(football + basketball - both_sports, total_students)\n\n    solution = solve(equation, both_sports)\n\n    return solution[0]\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed is 60 km/h and Jacob's speed is 80 km/h\n    adam_speed = 60\n    jacob_speed = 80\n    \n    # Jacob reached home in 3 hours\n    jacob_travel_time = 3\n    # Adam still has 30 minutes to travel to reach home, so his total travel time is 3.5 hours\n    adam_travel_time = 3.5\n    \n    # Distance travelled by Adam\n    adam_distance = adam_speed * adam_travel_time\n    # Distance travelled by Jacob\n    jacob_distance = jacob_speed * jacob_travel_time\n    \n    # Total distance apart is the sum of both distances\n    total_distance_apart = adam_distance + jacob_distance\n    \n    return total_distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def op(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = op(op(op(1, 2), 3), 4)\n    final_result = int(op(result, 5))\n    return final_result\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Since 252 = 36 * 7 and 36 = 6 * 6, we know that 252 = 2^2 * 3^2 * 7\n    # To determine the number of factors of 252, add 1 to each of the exponents in the prime factorization\n    # and then multiply these numbers together.\n    num_factors = (2 + 1) * (2 + 1) * (1 + 1) \n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Applying the Pigeonhole Principle\n    max_cakes_in_one_layer = (total_cakes + layers - 1) // layers\n\n    return max_cakes_in_one_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_percentage = 0.07\n    gst_paid = 0.91\n    total_cost_before_gst = gst_paid / gst_percentage\n    \n    return total_cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case scenario is picking one marble of each color first,\n    # so Lucy must take at least one more to guarantee a pair of same color. \n    return 2 + 1\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # We know that a number that when divided by 7, 11, and 13 has remainders 3, 7, and 9 respectively,\n    # is a solution to the system of congruences:\n    # x ≡ 3 (mod 7)\n    # x ≡ 7 (mod 11)\n    # x ≡ 9 (mod 13)\n    # The least common multiple of 7, 11, and 13 is their product, since they are prime numbers.\n    \n    lcm = 7 * 11 * 13\n    # Now we iterate over multiples of the lcm until we find the smallest five-digit number\n    # that satisfies the given conditions.\n    \n    for i in range(lcm, 100000, lcm):\n        # Adjust the number to get the correct remainders\n        number = i + (3 - i % 7) + (7 - i % 11) + (9 - i % 13)\n        # Check if the adjusted number is still a multiple of the lcm\n        if (number - 3) % 7 == 0 and (number - 7) % 11 == 0 and (number - 9) % 13 == 0:\n            # Since we are iterating from lowest to highest, return the first found value\n            # Also ensure it's a five-digit number\n\n            if 10000 <= number < 100000:\n                return number\n            elif number >= 100000:\n                break\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg = 2.49 + 3\n    weight_g = 670 + 80\n    total_weight_g = (weight_kg * 1000) + weight_g\n    return total_weight_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    meet_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n    \n    initial_hour = 10\n    initial_minutes = 0\n\n    hours_passed = meet_time_seconds // 3600\n    minutes_passed = (meet_time_seconds % 3600) // 60\n\n    final_hour = (initial_hour + hours_passed) % 24\n    final_minutes = initial_minutes + minutes_passed\n\n    if final_minutes >= 60:\n        final_hour += final_minutes // 60\n        final_minutes %= 60\n\n    return f\"{final_hour:02d}:{final_minutes:02d}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # Total exercise time in minutes\n    cycling_time_fraction = 1/3\n    cycling_time = cycling_time_fraction * total_time\n    jogging_time = total_time - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solutions = solve(equation, justin)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18\n    last_term = 2\n    next_term = last_term - difference\n    return next_term\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_miles_per_gallon = 72.8\n    sam_distance = 273\n    tom_additional_gallons = 6 + 3/4\n\n    sam_gallons = sam_distance / sam_miles_per_gallon\n    tom_gallons = sam_gallons + tom_additional_gallons\n    tom_miles_per_gallon = sam_distance / tom_gallons\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee two M&M's of different colors, Bart should take the worst-case scenario into account.\n    # Worst-case scenario: taking all of one color first. \n    # After taking all of one color, he needs to take just one more to be sure of getting a different color.\n\n    # Since red is the least amount, taking all the red ones first would be the worst case.\n    max_red = 3\n\n    # Now, after taking all red M&M's, we take one more which could be yellow or brown.\n    final_pick = 1\n\n    # Adding up all the red M&M's and the final additional pick.\n    ans = max_red + final_pick\n\n    return ans\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum(i**2 for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # We start by assigning at least one apple to each child to satisfy that condition\n    remaining_apples = 30 - 6  # we gave one apple to each child already\n\n    # We know that all children get different apples\n    # Let's assume that the child with the least apples got just one\n    # Then, let's distribute the rest in increasing order until we reach the maximum possible for the last child\n    # The maximum number for the last child (who gets the most) can be found by distributing the\n    # remaining apples in an increasing sequence (1 apple more than the previous child)\n    # until there is no apple left to distribute\n\n    apple_distribution = [1] * 6  # each child has at least one apple to start with\n    i = 1  # start giving apples to the second child\n    \n    while remaining_apples > 0:\n        if i == 5:  # we are at the last child who gets the most\n            apple_distribution[i] += remaining_apples\n            break\n        elif remaining_apples - (i + 1) > 0:\n            apple_distribution[i] += i + 1  # give i+1 apples to the i-th child to keep the count growing\n            remaining_apples -= i + 1  # reduce the remaining apple count\n            i += 1  # move to the next child\n        else:\n            apple_distribution[i] += remaining_apples\n            break\n\n    # The number of apples for the child who gets the most (at the end of the distribution list)\n    max_apples = apple_distribution[-1]\n\n    return max_apples\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # There are 2 choices for shirts and 2 choices for skirts.\n    # For each shirt, Linda can choose either of the 2 skirts.\n    return 2 * 2\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    pattern = [1, 3]\n    while len(pattern) < 4:\n        next_value = pattern[-1] * 3\n        pattern.append(next_value)\n    \n    return pattern[2]\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # The difference (common difference) in the arithmetic sequence\n    difference = 120 - 105  # or 135 - 120\n\n    # We can find the first term of the sequence by subtracting 6 times the difference from the 7th term\n    first_term = 105 - (6 * difference)\n    \n    # Now that we have the first term, we can find the 100th term by adding 99 times the difference to the first term\n    n_th_term = first_term + (99 * difference)\n    \n    return n_th_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, perform the addition, then convert back to base 7\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n    \n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    \n    # Convert the sum from base 10 to base 7\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    return ans or '0'\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # create equations based on the problem statement\n    equation1 = Eq(oranges / lemons, 3/5)\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_rabbit_per_day = 4\n\n    total_carrots = rabbits * days * carrots_per_rabbit_per_day\n\n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # The worst case scenario: Isabella picks all non-red apples first.\n    non_red_apples = 11 + 7 # green and yellow apples\n    \n    # To ensure that she gets 3 red apples, she needs to pick 3 more after the non-red apples.\n    required_apples = non_red_apples + 3\n    \n    return required_apples\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Rate of eating hay per day for horse, cow, and sheep\n    rate_horse = 1 / 2\n    rate_cow = 1 / 3\n    rate_sheep = 1 / 12\n\n    # Total rate of eating hay for all animals per day\n    total_rate = rate_horse + rate_cow + rate_sheep\n\n    # Number of bales of hay\n    bales_of_hay = 22\n\n    # Total days the bales will last\n    days = bales_of_hay / total_rate\n\n    return days\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_amount = 200\n    new_amount = 204\n    percentage_change = ((new_amount - original_amount) / original_amount) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let's denote m as the mother's current age and d as the daughter's current age\n    # From the problem statement, we have two equations:\n    # 1. m + (m - d) = 75  (When the daughter reaches the mother's current age)\n    # 2. d + (d - 3) = m    (When the mother was the daughter's current age)\n    \n    # Let's solve these equations step by step\n    # Equation 1 can be simplified as:\n    # m + m - d = 75\n    # 2m - d = 75  ...(Eq1)\n\n    # Equation 2 can be simplified as:\n    # 2d - 3 = m  ...(Eq2)\n\n    # Replacing the m from Eq2 in Eq1\n    # 2(2d - 3) - d = 75\n    # 4d - 6 - d = 75\n    # 3d - 6 = 75\n    # 3d = 81\n    # d = 27 (Daughter's current age)\n\n    # Now we'll find the mother's age\n    # m = 2d - 3\n    m = 2*27 - 3\n\n    return m\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    return 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Create a list to hold the two fixed digits for the year 2014\n    fixed_digits = ['2', '0', '1', '4']\n    # We are looking for additional digits which have equal numbers of 0, 1, and 2, so we repeat '0', '1', and '2' twice each\n    possible_digits = ['0', '1', '2'] * 2\n    # Generate all permutations of the possible digits, while removing the fixed digits since they are already used\n    for perm in set(permutations(possible_digits)):\n        # Construct the full date with the fixed year and the permutation of digits for month and day\n        date_str = ''.join(fixed_digits) + ''.join(perm[:2]) + ''.join(perm[2:])\n        yyyy, mm, dd = int(date_str[:4]), int(date_str[4:6]), int(date_str[6:])\n        # Check if the month and day form a valid date in 2014\n        if 1 <= mm <= 12:\n            if mm in (1, 3, 5, 7, 8, 10, 12) and 1 <= dd <= 31:\n                count += 1\n            elif mm in (4, 6, 9, 11) and 1 <= dd <= 30:\n                count += 1\n            elif mm == 2 and 1 <= dd <= 28:  # 2014 is not a leap year\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.8\n    savings = total_spent / (1 - discount) * discount\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament with 6 teams, each team plays with each other team exactly once.\n    # Hence, the total number of games played is 5 + 4 + 3 + 2 + 1 = 15 games.\n    total_games = sum(range(1, 6))\n\n    # For each game, there are 2 points to be distributed.\n    # Regardless of the outcome (win/loss or tie), the total number of points distributed in the tournament remains the same.\n    total_points = total_games * 2  # 2 points per game\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_children = 45\n    minibus_capacity = 8\n    minibuses_needed = -(-total_children // minibus_capacity)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane wants to ensure she has 4 different coloured marbles,\n    # in the worst case scenario, she might draw all marbles of the same color first.\n    # Thus, she has to draw all but one of each color (since she could get the final 4th color on the next draw).\n    # Red: 3 (leaving 1 red), Green: 6 (leaving 1 green),\n    # Blue: 5 (leaving 1 blue), She now has 3 colors, she needs one last to complete 4 colors.\n    # The next draw, regardless of color, will ensure she has the 4th color.\n    \n    draws = (4 - 1) + (7 - 1) + (6 - 1) + 1  # Subtracting 1 from each and adding 1 for the last draw of the fourth color\n    return draws\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # The largest possible number of left-handed pupils is total_pupils - right_handed.\n    max_left_handed = total_pupils - right_handed\n    \n    # The smallest number of right-handed girls would be when all left-handed pupils are girls.\n    # But since not all girls can be left-handed, \n    # the minimum right-handed girls would be the total number of girls \n    # minus the maximum possible left-handed pupils (who could all be girls).\n    min_right_handed_girls = girls - max_left_handed\n\n    return max(0, min_right_handed_girls)  # in case the subtraction goes negative, which is not possible.\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    girls_swim, girls_not_swim = 31*girls, 49*girls\n    boys_swim, boys_not_swim = boys - 120, boys\n    \n    equation1 = Eq(girls + 90, boys)\n    equation2 = Eq(girls + boys, 1690)\n    equation3 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)\n    equation4 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation5 = Eq(boys_swim + 120, boys_not_swim)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    not_swim = int(solutions[girls_not_swim] + solutions[boys_not_swim])\n    \n    return not_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if all(number % divisor == 0 if divisor != 7 else number % divisor == 6 for divisor in [2, 3, 5, 7]):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # The number of zeros at the end of a factorial is determined by its prime factors of 2 and 5\n    # Since there are more factors of 2 than 5, the number of factors of 5 will determine the number of trailing zeros\n    n = 1\n    count_fives = 0\n    while count_fives < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_fives += 1\n            temp_n /= 5\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41] # Generate a list of primes less than 41\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Cost per single piece for the first offer\n    cost_per_pc_4 = 7 / 4\n    # Cost per single piece for the second offer\n    cost_per_pc_6 = 8.5 / 6\n    \n    # Compare costs to find the better buy\n    better_buy = \"4pc\" if cost_per_pc_4 < cost_per_pc_6 else \"6pc\"\n    \n    return better_buy\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet_amount = 1\n    payout = 10\n    # Calculate the probability of the sum being greater than 10\n    favorable_outcomes = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            if dice1 + dice2 > 10:\n                favorable_outcomes += 1\n    total_possible_outcomes = 6 * 6\n    probability = favorable_outcomes / total_possible_outcomes\n    # Expected win per game is:\n    expected_win_per_game = probability * payout - bet_amount\n    # Expected total win (or loss) is:\n    expected_total_win = expected_win_per_game * total_rolls\n    return -expected_total_win\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Kiera's total monthly salary as 's'.\n    s = symbols('s')\n    \n    # She spent $740 on a new phone.\n    remaining_after_phone = s - 740\n    \n    # Then, she spent 75% of the remaining money on rent.\n    remaining_after_rent = remaining_after_phone * (1 - 0.75)\n    \n    # She had 1/5 of her salary left.\n    equation = Eq(remaining_after_rent, s / 5)\n    \n    # Solve the equation to find the salary 's'.\n    salary = solve(equation, s)[0]\n\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    # Let b be the weight of the basket, and a be the average weight of an apple.\n    # We have two equations:\n    # 5 * a + b = 580 (1)\n    # 2 * a + b = 280 (2)\n    # Subtracting equation (2) from (1) gives us 3 * a = 300\n\n    # From the equation above, we can find the weight of one apple\n    weight_of_one_apple = 300 // 3\n\n    # Now we substitute the apple's weight back into equation (2) to find the weight of the basket\n    weight_of_basket = 280 - weight_of_one_apple * 2\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    all_numbers = set()\n    for i in range(1, len(digits) + 1):\n        for perm in permutations(digits, i):\n            all_numbers.add(int(''.join(map(str, perm))))\n    return len(all_numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    time = 231  # Start at 02:31, convert to an integer for simplicity\n    while True:\n        time += 1\n        if time % 100 >= 60:  # Correct for invalid minute representations\n            time += 40\n        if time >= 2400:  # Correct for invalid hour representations\n            time -= 2400\n        if all(str(digit) in str(time).zfill(4) for digit in [0, 1, 2, 3]):  # Check if all digits are present\n            break\n    return time - 231  # Calculate the difference from the start time\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # ml\n    original_amount = remaining_after_class * 2  # ml\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    # Initial condition, both have the same amount of money\n    equation1 = Eq(lynn, mary)\n\n    # After spending, Mary has thrice as much as Lynn\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n    \n    # Calculate the amount Lynn has left\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond_operation(A, B):\n        return A * A - 3 * B\n    \n    def triangle_operation(A, B):\n        return 5 * A - B * B\n    \n    diamond_result = diamond_operation(4, 2)\n    triangle_result = triangle_operation(diamond_result, 6)\n    \n    return triangle_result\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = remainder_after_monday * (3/8)\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remainder_after_tuesday / bag_weight\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    unsold_tickets_fraction = 1 - 0.6\n    total_tickets = 28 / unsold_tickets_fraction\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # Minimum divisor is one more than remainder\n\n    # Using the formula for finding the dividend: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64-i*2 if i % 2 == 0 else -1 * (64-i*2) for i in range(12)])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    original_diff = 36\n    mistaken_tens = 5 - 3\n    mistaken_ones = 2 - 3\n    mistaken_diff = (mistaken_tens * 10) + mistaken_ones\n\n    correct_diff = original_diff + mistaken_diff\n\n    return correct_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    # let x be the number Phoebe thought of\n    # according to the question, the equation is 5 * x - 4 = 41\n    # we rearrange the equation to find x: x = (41 + 4) / 5\n    \n    x = (41 + 4) / 5\n    return int(x)\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_milliliters = 7 * 195\n    jug_capacity = 250\n\n    jugs_needed = (total_milliliters + jug_capacity - 1) // jug_capacity\n\n    return jugs_needed\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # 49 red + 1 blue\n    target_percentage = 0.90  # 90%\n\n    # Calculate the number of red balls for 90% total after removing x red balls\n    # Let's call the number of red balls to be removed 'x'.\n    # The equation will be: (49 - x) / (total_balls - x) = target_percentage\n\n    # Rearrange the equation to find 'x':\n    # (49 - x) = target_percentage * (total_balls - x)\n    # 49 - x = target_percentage * (50 - x)\n    # 49 - x = 45 - target_percentage * x\n    # x - target_percentage * x = 49 - 45\n    # x * (1 - target_percentage) = 4\n    # x = 4 / (1 - target_percentage)\n\n    x = 4 / (1 - target_percentage)\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = 0\n    numerator = 100\n    denominator = 97\n    for i in range(4):\n        ans += numerator / denominator\n        numerator *= (100 - i - 1)\n        denominator *= (97 - i - 1)\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight = 45\n    empty_box_weight = 12\n    matches = 220\n\n    matches_weight = total_weight - empty_box_weight\n    weight_per_match = matches_weight / matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n    birds_legs = 2\n    cows_legs = 4\n\n    # Assuming all animals are birds, so the total legs will be:\n    all_birds_legs = total_animals * birds_legs\n\n    # Calculate the extra legs if they were all cows:\n    extra_legs = total_legs - all_birds_legs\n\n    # The number of cows would be the extra legs divided by the difference\n    # in the number of legs between a cow and a bird:\n    number_of_cows = extra_legs / (cows_legs - birds_legs)\n\n    return int(number_of_cows)\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    number = 96\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the velocity of the cars after the collision\n    v_x, v_y = symbols('v_x v_y')\n    \n    # Masses and velocities before the collision\n    m1 = m2 = 500  # kg\n    v1_north = 20  # m/s (due north)\n    v2_west = 30   # m/s (due west)\n\n    # Conservation of momentum in the x and y directions\n    # For the northward direction\n    eq_y = Eq(m1 * v1_north, (m1 + m2) * v_y)\n    \n    # For the westward direction. We'll assume west direction is negative for the x-axis\n    eq_x = Eq(-m2 * v2_west, (m1 + m2) * v_x)\n\n    # Solve the momentum equations for v_x and v_y\n    solutions = solve((eq_x, eq_y), (v_x, v_y))\n\n    v_x_after = solutions[v_x]\n    v_y_after = solutions[v_y]\n\n    # Calculate magnitude of velocity using Pythagoras\n    v_magnitude = (v_x_after**2 + v_y_after**2)**0.5\n    \n    return round(v_magnitude, 2)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    for i in range(100, 1000): # Loop over all 3-digit numbers\n        if i % 2 == 1 and i % 9 == 0: # Check if the number is odd and divisible by 9\n            tens_digit = (i // 10) % 10 # Get the tens digit\n            if tens_digit % 4 == 0: # Check if the tens digit is divisible by 4\n                max_number = max(max_number, i) # Update the maximum number if necessary\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    # After giving away pens, Jenny has 83 - 28 pens\n    jenny_pens_after_giving = jenny_pens - pens_given_to_ben\n\n    # Since Jenny and Ben will have the same number of pens, Ben's original number of pens is the same as Jenny's after giving pens\n    ben_pens = jenny_pens_after_giving\n\n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_trees = 2\n    distance_between_lamps = 10\n    number_of_trees = 21\n\n    length_of_road = (number_of_trees - 1) * distance_between_trees\n    number_of_lamps = (length_of_road // distance_between_lamps) + 1\n\n    return number_of_lamps\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one laptop and one DVD player\n    laptop_cost, dvd_cost = symbols('laptop_cost dvd_cost')\n    \n    # Equation for the total cost paid by Mrs. Kumar\n    total_cost_eq = Eq(5 * laptop_cost + 4 * dvd_cost, 14438)\n    \n    # Equation for the combined cost of one laptop and one DVD player\n    combined_cost_eq = Eq(laptop_cost + dvd_cost, 2960)\n    \n    # Solve the system of equations\n    solutions = solve((total_cost_eq, combined_cost_eq), (laptop_cost, dvd_cost))\n    \n    # Return the cost of one DVD player\n    return solutions[dvd_cost]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colours = 5  # black, white, red, yellow, purple\n\n    different_types = sizes * colours\n\n    return different_types\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    aaron_weight = 45\n    ben_weight = 71\n    new_avg_after_aaron = 61\n    new_avg_after_ben = 62\n    \n    # Total weight after Aaron joined\n    total_after_aaron = new_avg_after_aaron * (new_avg_after_aaron - aaron_weight)\n    # Number of people in the group after Aaron joined\n    num_people_after_aaron = (total_after_aaron - aaron_weight)\n    # Total number of people after Ben joined\n    num_people_after_ben = (new_avg_after_ben * (num_people_after_aaron + 1 + 1)) - ben_weight - total_after_aaron\n    # Average weight before Aaron and Ben joined\n    original_avg = (total_after_aaron - aaron_weight) / num_people_after_aaron\n    \n    return original_avg\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = perm\n        if s == 0 or m == 0:\n            continue\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        money = m * 10000 + o * 1000 + n * 100 + e * 10 + y\n        if send + more == money:\n            return e\n    return None\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # there are 20 possible pairs that sum to each multiple of 5 (1+4, 2+3, 6+9, 7+8, etc.)\n    # 100/5 = 20, so there are 20 different sets of pairs\n    # each set has 10 pairs, since 1 pairs with 4, 2 with 3, etc., but not with themselves\n    # so we have 20*10 total pairs\n    # however, each pair that sums to a multiple of 10 is counted twice (once at the start and once at the end)\n    # there are 5 multiples of 10, each with 5 pairs, so we have to subtract these 25 pairs\n    ans = 20*10 - 5*5\n    \n    return ans\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    sequence_length = 2000\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n    full_patterns = sequence_length // pattern_length\n    remaining_digits = sequence_length % pattern_length\n\n    # Sum for full pattern repetitions\n    total_sum = full_patterns * pattern_sum\n\n    # Sum for the remaining digits\n    for i in range(remaining_digits):\n        total_sum += int(pattern[i])\n\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    # Convert all costs to pence for consistency\n    total_cost_pence = 515\n    coffee_cost_pence = 369\n    milk_cost_pence = 89\n\n    # Calculate the cost of the bag of sugar in pence\n    sugar_cost_pence = total_cost_pence - (coffee_cost_pence + milk_cost_pence)\n\n    # Convert the cost of the bag of sugar back to pounds\n    sugar_cost_pounds = sugar_cost_pence / 100 \n\n    return sugar_cost_pounds\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):  # iterate through the possible hours since midnight\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # If you take out 3 blue, 3 orange and 3 yellow balls, you would still not have 4 balls of the same color.\n    # That's 9 balls in total. But if you take out one more ball (the 10th), you will definitely have\n    # 4 balls of the same color regardless of the color of the 10th ball.\n  \n    # It's the classic pigeonhole principle problem.\n    # The maximum number for not having 4 of the same color is by having 3 of each color.\n\n    max_without_four_same = (3 * 3) # three of each of the three colors\n\n    # So, to have 4 of the same color, Sheila must take out one more ball.\n    balls_to_take_out = max_without_four_same + 1\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n    \n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n    \n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_elements = len(numbers) + 1  # Including the unknown 'a'\n    sum_of_elements = mean_value * total_elements\n    current_sum = sum(numbers)\n    a = sum_of_elements - current_sum\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's work per day\n    work_per_day_A = 1 / 15\n    # B's work per day\n    work_per_day_B = 1 / 10\n    \n    # Total work done by A and B in the first 4 days\n    work_done_4_days = 4 * (work_per_day_A + work_per_day_B)\n    \n    # Remaining work\n    remaining_work = 1 - work_done_4_days\n    \n    # Days for B to finish the remaining job\n    days_for_B_to_finish = remaining_work / work_per_day_B\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first part of the sequence: 1+2+3+...+12+13\n    first_half_sum = sum(range(1, 14))  # This is an arithmetic series\n\n    # Calculate the sum of the second part of the sequence: 13+12+...+2+1\n    second_half_sum = sum(range(1, 14))  # This is the same arithmetic series as the first part\n\n    # The total sum is the sum of both halves\n    total_sum = first_half_sum + second_half_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction = original_price - reduced_price\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_diff_girls = 52\n    total_students = 0\n\n    for side_length in range(1, 1000, 2):  # We assume the maximum side length is less than 1000 and it is odd\n        boys = side_length*4 - 4\n        girls = (side_length - 2)*(side_length - 2)\n\n        if boys - girls == boys_diff_girls:\n            total_students = boys + girls\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    test_tubes_needed = 0\n    while 2 ** test_tubes_needed < 1000:\n        test_tubes_needed += 1\n    return test_tubes_needed\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # The number of legs for each type of animal\n    duck_legs = 2\n    goose_legs = 2\n    lamb_legs = 4\n\n    # The number of each type of animal\n    ducks = 4\n    geese = 2\n\n    # Calculating the total number of legs for ducks and geese\n    total_legs_ducks_geese = (ducks * duck_legs) + (geese * goose_legs)\n\n    # Subtracting the total legs of ducks and geese from the overall total to find the total legs of lambs\n    total_legs_lambs = 36 - total_legs_ducks_geese\n\n    # Calculating the number of lambs by dividing their total legs by the number of legs one lamb has\n    lambs = total_legs_lambs / lamb_legs\n\n    return int(lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres_to_mililitres_conversion_factor = 1000\n    n = 2.5 * litres_to_mililitres_conversion_factor\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # Reverse calculate the remaining sweets after the third day\n    sweets_after_third_day = remaining_sweets / (1 - 1/4)\n\n    # Reverse calculate the remaining sweets after the second day\n    sweets_after_second_day = sweets_after_third_day / (1 - 1/5)\n\n    # Reverse calculate the remaining sweets after the first day\n    sweets_after_first_day = sweets_after_second_day / (1 - 1/6)\n\n    # Reverse calculate the initial number of sweets\n    initial_sweets = sweets_after_first_day / (1 - 1/7)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies baked by Charlene\n    x = symbols('x')\n\n    # Charlene kept half of the cookies plus 8, so she gave Emerald x/2 - 8.\n    # Emerald ate a third of what she received plus 4, so she gave Hebe (x/2 - 8)/3 - 4.\n    # Hebe ate a quarter of what she received and had 42 left, so 3/4 of what Hebe received is 42.\n    equation = Eq((x/2 - 8)/3 - 4 - ((x/2 - 8)/3 - 4)/4, 42)\n\n    # Solving the equation to find x\n    solution = solve(equation, x)\n\n    # Returning the value of x which represents the total number of cookies\n    return int(solution[0])\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid_chocolates = 17\n    last_kid_chocolates = 150\n    difference = 7\n\n    total_kids = ((last_kid_chocolates - first_kid_chocolates) // difference) + 1\n\n    return total_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    teams = symbols('teams')\n    \n    # Each team plays each other team twice, and each game involves two teams, we have:\n    # total_matches = number_of_teams * (number_of_teams - 1)\n    # Since each match is counted twice (once for each team), divide by 2:\n    matches = teams * (teams - 1) / 2\n\n    # Create an equation based on the above expression where total matches = 30\n    equation = Eq(matches, 30)\n    \n    # Solve for the number of teams\n    number_of_teams = solve(equation, teams)\n    \n    # Since the number of teams should be positive, we discard negative solutions\n    ans = [team for team in number_of_teams if team.is_positive]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_needed = (total_uniforms / made_in_5_days) * 5\n\n    return days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        return count_ways(steps - 1) + count_ways(steps - 2)\n    \n    # Count ways to reach the 5th step\n    ways_to_5 = count_ways(5)\n    \n    # Count ways to reach the 10th step from the 5th step\n    ways_from_5_to_10 = count_ways(10 - 5)\n\n    # Total ways are the product of the two scenarios\n    total_ways = ways_to_5 * ways_from_5_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    first, second, third = symbols('first second third')\n\n    # Equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables\n    boys = symbols('boys')\n\n    # Define the equation based on the problem statement\n    equation = Eq(45, 3 * boys - 21)\n\n    # Solve the equation\n    solutions = solve(equation, boys)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    prime_factor_2 = 3 + 3 + 1  # Total number of 2s in the prime factorization\n    prime_factor_5 = 1 + 2 + 2  # Total number of 5s in the prime factorization\n\n    # The number of 0s at the end of the product will be equal to the minimum\n    # of the count of 2s and 5s in the prime factorization because each pair\n    # of (2, 5) contributes to an additional zero in the end.\n    num_zeros = min(prime_factor_2, prime_factor_5)\n\n    return num_zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # since sqrt(40) < 7 < sqrt(50)\n        n = i**2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    number_of_cups = 3\n\n    water_used = cup_volume * number_of_cups\n    water_left = initial_volume - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    num1 = 0.7\n    num2 = 5.1\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Equations based on the provided information\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    # Using the fact that the product of four consecutive numbers is 3024\n    # and assuming that the smallest number is x, the equation becomes:\n    # x*(x+1)*(x+2)*(x+3) = 3024\n    equation = Eq(x*(x+1)*(x+2)*(x+3), 3024)\n    solutions = solve(equation)\n    # Filter out the non-natural solutions and get the largest\n    natural_solutions = [s for s in solutions if s.is_real and s > 0]\n    largest_natural = max(natural_solutions) + 3\n    \n    return largest_natural\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Alan and Bob's cards\n    alan, bob = symbols('alan bob')\n    \n    # Bob has 15 more cards than Alan initially\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards\n    # After that, Bob has 3 times as many cards as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Return the number of cards Alan has\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Least Common Multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find the minimum number of packs needed to exceed 1000 markers\n    num_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        num_packs += 1\n\n    # Calculate the total number of packs required\n    total_packs = num_packs * 4  # Since there are 4 different types of packs\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    # Number of handshakes between n students is given by the combination formula nC2\n    # which is n! / (2! * (n-2)!)\n    # Or simply, n(n-1)/2\n    num_students = 10\n    handshakes = (num_students * (num_students - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    x = 0.111992517  # Close approximation of the first recurring decimal\n    y = 0.234567  # Close approximation of the second recurring decimal\n\n    n = 1\n    while True:\n        if int((x * (10 ** n)) % 10) == 7 and int((y * (10 ** n)) % 10) == 7:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    anne_apples = solve(total_apples, anne)\n    \n    return anne_apples[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    \n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100 * 90) - (90 / 100 * 20)\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    # We need to determine the total number of days he read\n    # This forms an arithmetic sequence where\n    # first_term = first_day_pages, last_term = last_day_pages\n    # total_sum = total_pages\n    # total_sum = n/2 * (first_term + last_term)\n    # n = 2 * total_sum / (first_term + last_day_pages)\n    # Then we need to solve for the common difference d\n    # last_term = first_term + (n - 1) * d\n\n    # According to the formula of the sum of an arithmetic sequence:\n    # total_pages = n/2 * (first_day_pages + last_day_pages)\n    # because last_day_pages = first_day_pages + (n - 1) * d\n    # substituting in we get:\n    # total_pages = n/2 * (2 * first_day_pages + (n - 1) * d)\n    # 2 * total_pages = n * (2 * first_day_pages + (n - 1) * d)\n\n    # Now we have a quadratic equation in terms of n\n    # 2 * total_pages = n^2 * d + n * (2 * first_day_pages - d)\n    \n    # Let's solve this equation using sympy\n    from sympy import symbols, Eq, solve\n\n    n, d = symbols('n d')\n    equation = Eq(2 * total_pages, n ** 2 * d + n * (2 * first_day_pages - d))\n    # we know first and last term, thus n is known\n    n_value = (2 * total_pages) / (first_day_pages + last_day_pages)\n    # substitute n by its value\n    equation_sub = equation.subs(n, n_value)\n    # solve for d\n    d_value = solve(equation_sub, d)[0]\n    return d_value\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_purchase = 416\n    afternoon_purchase = 248\n    difference = morning_purchase - afternoon_purchase\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10\n    \n    water_amount = (water_ratio * orange_amount) / orange_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n    total_required = required_average * 5\n    \n    current_total = sum(scores)\n    minimum_final_score = total_required - current_total\n    \n    return minimum_final_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's represent the interest rate as r.\n    P = 10000  # Principal amount\n    interest = 816  # Total interest after 2 years\n    \n    # The total amount after 2 years includes the principal plus interest.\n    # Total amount = Principal amount * (1 + interest rate per year) ^ number_of_years\n    # 10000 * (1 + r) ^ 2 - 10000 = 816\n    \n    r = symbols('r')\n    equation = Eq(P * (1 + r)**2 - P, interest)\n    solution = solve(equation, r)\n    \n    # We choose the positive solution since interest rates are positive.\n    rate = [sol for sol in solution if sol > 0]\n    \n    # Convert the decimal interest rate to a percentage\n    interest_rate_percent = rate[0] * 100  # Convert to percentage\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's incorrect calculation:\n    # johnny_answer = (quotient * remainder) + divisor\n\n    # Correct calculation:\n    correct_answer = (divisor * quotient) + remainder\n\n    # Is Johnny's answer correct?\n    is_correct = correct_answer == 22  # Johnny's claimed answer\n    return is_correct, correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    original_number = (final_number - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # time ratio 3:4, we can assume times are 3t and 4t\n    # speed of Peter is 15 cm/s faster than that of Hannah\n    # Speed = Distance / Time,\n    # So, Distance = Speed * Time\n    # Let the speed of Hannah be x, then the speed of Peter is x + 15\n    # Because they cover the same distance, we can set up the equation:\n    # Hannah's speed * Hannah's time = Peter's speed * Peter's time\n    # x * 4t = (x + 15) * 3t\n\n    x = symbols('x')  # speed of Hannah\n    t = symbols('t')  # part of the time\n    equation = Eq(x * 4*t, (x + 15) * 3*t)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Define the equations based on the given information\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    # Get the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of 50-cent coins as f and the number of 1-dollar coins as d.\n    f, d = symbols('f d')\n    \n    # initial state according to the problem\n    initial_state = Eq(f, 2/7 * (f + d))\n\n    # After receiving more coins, the equation changes.\n    # Owen receives 10 one-dollar coins and 5 dollars worth of fifty-cent coins, which is 10 fifty-cent coins.\n    final_state = Eq(d + 10, 2 * (f + 10))\n    \n    # Use sympy's solve function to solve the system of equations\n    solution = solve((initial_state, final_state), (f, d))\n    \n    # Calculate the total initial number of coins\n    initial_total_coins = solution[f] + solution[d]\n    return initial_total_coins\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_blank_time = 35\n\n    short_answer_time = total_time - (multiple_choice_time + fill_in_blank_time)\n\n    return short_answer_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # in meters per second\n    time_to_cross = 45  # in seconds\n    train_length = 850  # in meters\n    \n    # Distance covered by train while crossing the tunnel equals speed * time\n    distance_covered = train_speed * time_to_cross\n    \n    # Length of the tunnel is the total distance covered minus the length of the train\n    tunnel_length = distance_covered - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    parts_by_circles = circles * (circles + 1) // 2 + 1\n    parts_by_line = parts_by_circles + circles + 1\n\n    return parts_by_line\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    # There are 4 entrances and 3 people, so one entrance will remain unused.\n    # Joe, Mike, and Tina can be abbreviated as 'J', 'M', 'T', and 'U' for the unused entrance.\n    \n    # We need to count all permutations where 'J' and 'M' do not appear in the same entrance (pair).\n    # Let's generate all permutations for the 4 \"entrances\", we will ignore the actual entrance index\n    # since it does not matter which entrance is which, just that J and M are not together.\n    all_perms = permutations('JMTU')\n    \n    # Now let's filter out the permutations where 'J' and 'M' are together,\n    # this happens when 'J' and 'M' are next to each other since we're treating the sequence as circular.\n    valid_perms = [perm for perm in all_perms if not (\n        ('J' in perm and 'M' in perm and (abs(perm.index('J') - perm.index('M')) == 1 or\n        abs(perm.index('J') - perm.index('M')) == 3)))]  # Since the sequence is circular, we also check for distance 3.\n\n    # Each permutation corresponds to a unique way for the three people to enter the station.\n    return len(valid_perms)\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let the amount spent on transportation be x\n    # Then the amount spent on food is 2x\n    # According to the question, x + 2x = spent_money\n    x = spent_money / 3\n    money_spent_on_food = 2 * x\n    \n    return money_spent_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    cost_per_ton_initial = 4  # Cost per ton for the first 3 tons\n    cost_per_ton_additional = 3  # Cost per ton after 3 tons\n    fixed_fee = 4  # Fixed service fee\n    total_cost = 109  # Total money available\n    initial_water_usage_cost = 3 * cost_per_ton_initial\n    \n    # Calculate remaining money after initial usage and fixed fee\n    remaining_cost = total_cost - (initial_water_usage_cost + fixed_fee)\n    \n    # Calculate how many tons she can use after the first 3 tons\n    additional_tons = remaining_cost // cost_per_ton_additional\n    \n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45*7 + 13*7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of cookies each person has\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n    \n    # Given equations\n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, amelia / 2)\n    equation3 = Eq(carl, 3*amelia / 4 - bala - daniel)\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n\n    # The smallest possible dividend, when remainder is not zero,\n    # is obtained when the divisor is the smallest nonzero integer (1)\n    # since the division of any number by 1 gives itself as quotient and no remainder.\n\n    # Dividend = Divisor * Quotient + Remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume quick gardener's work rate as x and lazy gardener's work rate as y\n    # Rate is in lawns per hour\n    x, y = symbols('x y')\n\n    # Equation representing the rates combined to do one lawn in 8 hours\n    equation1 = Eq(1/8, x + y)\n\n    # Equation representing the quick gardener's rate to do one lawn in 12 hours\n    equation2 = Eq(1/12, x)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the time it would take for the lazy gardener to mow the lawn on his own\n    # The time is the inverse of the lazy gardener's rate (y)\n    lazy_time = 1 / solutions[y]\n\n    return lazy_time\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Equation representing the difference between oranges and apples\n    equation1 = Eq(oranges, apples + 32)\n    # Equation representing the remaining fruits after giving some away\n    equation2 = Eq(apples - apples / 3 + oranges - oranges / 2, 100)\n\n    # Solving the equations to find the numbers of apples and oranges\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculating total number of fruits at first\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Eve's, Alice's and Irene's candies\n    girls_count = 3  # Number of girls\n    candy_per_girl = total_candy // girls_count  # Equal division\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda = 36\n    belinda -= 7  # Belinda gives 7 tomatoes to Matthew\n    matthew = belinda  # After giving, they have the same amount\n    return matthew - 7  # Matthew originally had 7 less than he ended up with\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    dresses_cost = 5 * x\n    skirts_cost = 3 * x\n    remaining_money = 5 * x\n\n    equation = Eq(dresses_cost + skirts_cost + remaining_money, 182)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    green_line_interval = 5  # minutes\n    red_line_interval = 6    # minutes\n\n    least_common_multiple = lcm(green_line_interval, red_line_interval)\n\n    hours = least_common_multiple // 60\n    minutes = least_common_multiple % 60\n    \n    initial_time_hours = 5\n    next_time_hours = initial_time_hours + hours\n    next_time_minutes = minutes\n    \n    # Format the time for output, ensuring two digits for minutes\n    if next_time_minutes < 10:\n        next_time_minutes = \"0\" + str(next_time_minutes)\n    \n    # If hours go beyond 24, adjust it to fit the 24-hour clock system\n    if next_time_hours >= 24:\n        next_time_hours %= 24\n    \n    return f\"{next_time_hours}:{next_time_minutes}\"\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in mL\n    half_jug = jug_capacity / 2\n\n    cup_capacity = half_jug / 3  # Since 3 cups fill half of the jug\n\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    meters_per_tree = 3\n    tree_count = 101\n    time_to_101th_tree_minutes = 3\n    total_distance_meters = 4000\n    # Calculate the distance Olivia walks from the first to the 101th tree\n    distance_to_101th_tree = (tree_count - 1) * meters_per_tree\n    # Assuming a constant speed, calculate the speed (meters/minute)\n    speed = distance_to_101th_tree / time_to_101th_tree_minutes\n    # Calculate the time it takes to travel the whole distance to school at the same speed\n    time_total = total_distance_meters / speed\n    return time_total\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 1*2  # The first term is simply 2\n\n    # Now, we iterate over the remaining terms, calculating the product as described.\n    # Since each term adds two more numbers in the sequence, we start with 3.\n    for i in range(3, 15, 2):\n        product = 1\n        for j in range(1, i + 1, 2):  # For each term, multiply the odd numbers up to `i`\n            product *= j\n        product *= i + 1  # Multiply by the next even number\n        ans += product  # Add the current product to `ans`\n\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    price_per_gram = 80 / 100\n    cost_for_250_grams = price_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4\n    sum_of_squares = lambda x: (x * (x + 1) * (2 * x + 1)) // 6\n    ans = sum_of_squares(n) * 4**2\n    return ans\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum([(6 + 5 * i) ** 2 for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for cost per apple and cost per banana\n    cost_apple, cost_banana = symbols('cost_apple cost_banana')\n\n    # Equations based on the given information\n    equation1 = Eq(3 * cost_apple + 2 * cost_banana, 1.25)\n    equation2 = Eq(cost_apple + cost_banana, 0.48)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cost_apple, cost_banana))\n\n    # Calculating cost for 5 bananas\n    cost_5_bananas = 5 * solutions[cost_banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    people = 'LJAK'\n    entrances = '123'\n    valid_combinations = set()\n\n    for perm in permutations(people):\n        for n1 in entrances:\n            for n2 in entrances:\n                for n3 in entrances:\n                    if len(set([n1, n2, n3])) == 3:\n                        entry_pattern = ''.join(sorted([n1, n2, n3]))\n                        valid_combinations.add((perm[0], entry_pattern[0]) + (perm[1], entry_pattern[1]) + (perm[2], entry_pattern[2]) + (perm[3], entry_pattern[2]))\n\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    score_for_wrong = -2\n    total_score = 23\n\n    # Let's assume all questions were answered correctly\n    max_correct_score = total_questions * score_for_correct\n\n    # Now, we find for each incorrect answer, how many scores lost\n    for wrong_answers in range(total_questions + 1):\n        correct_answers = total_questions - wrong_answers\n        if (correct_answers * score_for_correct + wrong_answers * score_for_wrong) == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Justin's current age\n    justin = symbols('justin')\n\n    # Equation based on the problem statement\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    # Solve the equation\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_for_one_drawing = 124\n    total_drawings = 111\n    total_time = time_for_one_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Initial trades:\n    # Owen: 5 fish for 2 rabbits  =>  5 fish / 2 rabbits\n    # Oscar: 4 rabbits for 7 packs of wheat =>  4 rabbits / 7 packs of wheat\n    \n    # For 14 packs of wheat:\n    # 7 packs of wheat = 4 rabbits\n    # 14 packs of wheat = 8 rabbits (since 14 is double of 7, we double the rabbits)\n    \n    # Now we need to find out how many fish are 8 rabbits worth:\n    # 2 rabbits = 5 fish\n    # 8 rabbits = ? fish\n    # We can setup a proportion for fishes to rabbits from the initial trade.\n    \n    # proportion = (fish / rabbits) = (5 / 2)\n    # fish_owen_to_dennis = proportion * rabbits\n    fish_owen_to_dennis = (5 / 2) * 8\n    \n    return fish_owen_to_dennis\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # Solve the system of congruences\n    num, _ = solve_congruence(*congruences)\n\n    # Find the smallest number that satisfies all the conditions and is less than 100\n    while num < 100:\n        return num\n        num += 4 * 5 * 6\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x is the total number of animals, y is the number of goats initially\n    x, y = symbols('x y')\n    \n    # 65% of total animals were cows\n    cows_initially = 0.65 * x\n    \n    # the rest were goats\n    goats_initially = x - cows_initially\n    \n    # when 240 more animals are added, percentage of cows becomes 85% of new total (x + 240)\n    cows_after_adding = 0.85 * (x + 240)\n    \n    # number of goats doubled\n    goats_after_adding = 2 * goats_initially\n    \n    # the new total of goats and cows is equal to the old total plus 240\n    total_after_adding = x + 240\n    \n    # we have two equations based on the information given\n    equation1 = Eq(goats_initially, y)\n    equation2 = Eq(goats_after_adding + cows_after_adding, total_after_adding)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount = 15  # Assuming the higher discount applies because the cost is above $50.\n    final_amount = total_cost - discount\n    \n    return final_amount\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange 2 boys at each end\n    arrangements_boys = factorial(2)\n    \n    # Number of ways to arrange 3 girls in the middle\n    arrangements_girls = factorial(3)\n    \n    # Multiply the two possibilities as per the Multiplication Principle\n    total_arrangements = arrangements_boys * arrangements_girls\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    ages.sort()\n    jason, adam, tom = ages\n    return adam\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst-case scenario following the Pigeonhole Principle:\n    # Draw all balls of the first color: 5 balls.\n    # Draw all balls of the second color: 5 balls.\n    # Now, the next ball drawn is guaranteed to be of the third color.\n    # Therefore, we need to draw 1 additional ball.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num = 2023\n    str_num = str(num)\n    n = 1\n    while True:\n        test_num = int(str_num * n)\n        if test_num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4 * b - 9, 7)\n    solution = solve(equation, b)\n    return solution[0]\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Since Avril and 5 other children means we are distributing to 6 people,\n    # and they need to get a different number of apples each.\n    # To maximize Avrils apples, we give the minimum to others first.\n    # We start with giving 1 apple to the first child, 2 to the second, and so on.\n    # Hence, the first five children will get 1+2+3+4+5 = 15 apples in total.\n    min_apples_others = sum(range(1, 6))\n    # We subtract this number from the total apples to find the max for Avril\n    max_apples_avril = 28 - min_apples_others\n\n    return max_apples_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)    # Triangle + Triangle = Square\n    equation2 = Eq(square + triangle, circle)      # Square + Triangle = Circle\n    equation3 = Eq(diamond, circle + square + triangle)  # Diamond = Circle + Square + Triangle\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles are equal to diamond\n    num_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    laptop_cost = total_money * fraction_used\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # The ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori  # Calculate Jocye's speed\n\n    time = 10  # Time in seconds\n    distance_jocye = jocye_speed * time  # Distance Jocye can run in 10 seconds\n\n    return distance_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    final_average = 70\n    total_initial_numbers = 2\n\n    total_initial_sum = initial_average * total_initial_numbers\n    total_final_numbers = total_initial_numbers + 1\n\n    total_final_sum = final_average * total_final_numbers\n    \n    new_number = total_final_sum - total_initial_sum\n    \n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Hannah left school\n    leave_school = datetime.strptime('15:22', '%H:%M')\n    \n    # Time when Hannah caught the bus\n    catch_bus = datetime.strptime('16:01', '%H:%M')\n    \n    # Time spent walking to the bus stop\n    walking_to_bus = (catch_bus - leave_school).total_seconds() / 60\n    \n    # Time when the bus trip ended\n    end_bus_trip = catch_bus + timedelta(minutes=18)\n    \n    # Time when Hannah got home\n    get_home = datetime.strptime('16:35', '%H:%M')\n    \n    # Time spent walking from the bus drop off point to home\n    walking_from_bus = (get_home - end_bus_trip).total_seconds() / 60\n    \n    # Total time spent walking\n    total_walking = walking_to_bus + walking_from_bus\n    \n    return int(total_walking)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    third_term = 30\n    last_term = 79\n\n    common_difference = second_term - first_term\n\n    # Use the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)*d\n    # Rearrange the formula to find n: n = ((a_n - a_1) / d) + 1\n    num_people = ((last_term - first_term) // common_difference) + 1\n\n    return num_people\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    # After giving some money to Lisa, Ken had $21 less than Lisa\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n    \n    # Solve equations to find the amount_given\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # First 5 questions give 1, 2, 3, 4, 5 trophies respectively\n    first_5 = sum(range(1, 6))\n\n    # next questions give 4, 3, 2 trophies each\n    next_questions = 4 + 3 + 2\n\n    # total trophies\n    total_trophies = first_5 + next_questions\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the total number of elements (2x1 + 3x2 + 4x3 + ... + 9x8)\n    total_elements = sum(i * (i - 1) for i in range(2, 10))\n    \n    # Since elements will be symmetric about the median in this pattern\n    # We just need to find the middle position\n    middle_position = (total_elements + 1) // 2\n    \n    # Counting up to the middle position to find the median number\n    current_number = 1\n    total_count = 0\n    \n    while total_count < middle_position:\n        next_count = total_count + current_number * (current_number - 1)\n        if next_count >= middle_position:\n            return current_number\n        total_count = next_count\n        current_number += 1\n        \nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Number of blue and orange marbles\n    blue_marbles = 18\n    orange_marbles = 8\n    \n    # Worst case is taking out all blue and orange marbles first\n    # and then taking 2 red marbles\n    marbles_to_ensure_two_red = blue_marbles + orange_marbles + 2\n    \n    return marbles_to_ensure_two_red\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    \n    for student in range(1, 31):\n        # Check if it is multiple of 2 or 3\n        turned_around = (student % 2 == 0) + (student % 3 == 0)\n        \n        # If the student turned an even number of times, they end up facing the teacher\n        if turned_around % 2 == 0:\n            facing_teacher += 1\n            \n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x**0.5 + 36**0.5, 81**0.5)\n    solution = solve(equation, x)\n\n    return solution[0]\n    \nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    common_difference = (25 - 10) // (4 - 1)\n    total_rows = 25\n\n    sum_of_series = total_rows * (2 * first_term + (total_rows - 1) * common_difference) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Let x be the number of cookies eaten on the first day\n    # The number of cookies eaten on successive days form an arithmetic sequence\n    # The sum of an arithmetic sequence is given by the formula S = n/2 * (a1 + an),\n    # where S is the sum of the sequence, n is the number of terms, a1 is the first term, and an is the last term.\n    # The common difference d is the difference in the number of cookies eaten between consecutive days, which is 6.\n    \n    # Therefore, the sum S of the sequence is 100 (total number of cookies),\n    # n is 5 (total number of days),\n    # and the common difference (d) is 6.\n    \n    # We need to find the first term (x), and we know the last term is x + 4 * 6 (since there are 5 days, giving 4 differences).\n    \n    # Plugging these values into the sum formula, we get:\n    # 100 = 5/2 * (x + (x + 4*6))\n    \n    # Simplifying the equation will give us x, the number of cookies eaten on the first day\n    \n    n = 5\n    d = 6\n    S = 100\n    \n    # Use the arithmetic sum formula to solve for the first term a1 (denoted as x)\n    a_n = symbols('a_n')\n    x = symbols('x')\n    \n    # Set up the equation according to the sum of arithmetic sequence\n    equation = Eq(n/2 * (x + a_n), S)\n    \n    # Since the last term a_n can be expressed in terms of the first term x and common difference d\n    a_n = x + (n - 1) * d\n    \n    # Substitute a_n into the equation\n    substituted_equation = Eq(n/2 * (x + (x + (n - 1) * d)), S)\n    \n    # Solve for x\n    solution = solve(substituted_equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Probabilities initially for each door\n    prob_car_behind_door_1 = 1 / 3\n    prob_car_behind_door_2 = 1 / 3\n    prob_car_behind_door_3 = 1 / 3\n\n    # Host opens door 3, which has a goat behind it\n    # Probability is now redistributed\n    # Door 1's probability stays the same since no new information about it was revealed\n    # Door 3's probability becomes 0 because it is now known to have a goat\n    # Door 2's probability becomes 1 - P(Door 1), since the car must be behind Door 1 or Door 2\n    prob_car_behind_door_2 = 1 - prob_car_behind_door_1\n\n    # Since the probability for door 2 (2/3) is higher than the probability for door 1\n    # (1/3), it is better to choose door 2.\n    # Return the gate number with the highest probability of having a car behind it\n    return 2 if prob_car_behind_door_2 > prob_car_behind_door_1 else 1\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    missing_number = 221 * 4\n    return missing_number\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if (num % 4 == 2) and (num % 3 == 2) and (num % 7 == 1):\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 32):\n        total_sum += i * (i + 1)\n    return total_sum\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    # David spends 3/4 of his money on CDs, so he has 1/4 left\n    # He then spends 1/4 of the remaining (which is 1/4 of original_sum) on batteries\n    # Finally, he is left with 1/3 of the original_sum\n    # Set up the equation based on the problem statement\n\n    spending_on_cds = 3 / 4 * original_sum\n    remaining_after_cds = original_sum - spending_on_cds\n\n    spending_on_batteries = 1 / 4 * remaining_after_cds\n    remaining_after_batteries = remaining_after_cds - spending_on_batteries\n\n    # He was left with 1/3 of the original sum\n    final_remainder = 1 / 3 * original_sum\n\n    # Equation which represents the remaining money is equal to the final remainder\n    equation = Eq(remaining_after_batteries, final_remainder)\n    solution = solve(equation, original_sum)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Given that 7 pokemon trainers can catch 7 pokemon in 7 minutes\n    # This means 1 pokemon trainer catches 1 pokemon in 7 minutes\n\n    # We need to figure out how many pokemon trainers are needed to catch 49 pokemon in 49 minutes\n    # If 1 pokemon trainer catches 1 pokemon in 7 minutes, then in 49 minutes, 1 pokemon trainer will catch 7 pokemon (because 49/7 = 7)\n\n    # To catch 49 pokemon, we need 49/7 = 7 times as many trainers as to catch 7 pokemon\n    # Since 7 pokemon trainers can catch 7 pokemon in 7 minutes, the same number of trainers (7) can catch 49 pokemon in 49 minutes\n\n    # Therefore, the number of pokemon trainers needed is 7\n    return 7\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to choose 3 books out of 7\n    # This is the same as calculating the number of combinations\n    # for selecting 3 books from 7, which can be calculated by\n    # 7! / (3! * (7 - 3)!) \n    return factorial(7) // (factorial(3) * factorial(7 - 3))\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 12\n    tommy = 1\n    minutes_spent = 142\n    \n    total_people = number_of_friends + tommy\n    total_time = total_people * minutes_spent\n    \n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Each repeated block \"928\" has 3 digits and the sum is 9+2+8 = 19\n    repeated_block_sum = 19\n    # Since we have a 99-digit number, the block is repeated 99/3 = 33 times\n    total_repeated_blocks = 99 // 3\n    # The total sum of digits for the full number is the sum of one block\n    # multiplied by the number of times it is repeated\n    total_sum_of_digits = repeated_block_sum * total_repeated_blocks\n    # According to the divisibility rule for 9, if the sum of the digits is divisible by 9,\n    # then the number itself is divisible by 9. So we need to find the remainder of the sum\n    # when divided by 9.\n    remainder = total_sum_of_digits % 9\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    oplus = symbols('oplus')\n\n    # Set up the equation oplus * 9 + 47 - oplus = 84 + 27\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    # Solve the equation for oplus\n    solution = solve(equation, oplus)\n\n    # Get the value of oplus\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage = (incorrect_identifications / total_people) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbolize the three numbers\n    num1, num2, num3 = symbols('num1 num2 num3')\n\n    # Equations based on the given conditions\n    equation1 = Eq(num1 + num2 + num3, 56)\n    equation2 = Eq((num1 + num2) / 2, 14)\n    equation3 = Eq((num2 + num3) / 2, 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (num1, num2, num3))\n\n    # As the median is the middle number, sort the solutions to find it\n    median = sorted(solutions)[1]\n\n    return median\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    target = 2.5\n    closest_number = min(numbers, key=lambda x: abs(target - x))\n    return closest_number\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Define the cost of the bars in pence\n    sour_sweets_cost = 12\n    chocolate_drops_cost = 17\n\n    # Define the money paid by Eliot and Maya in pence\n    eliot_paid = 300  # 3 pounds in pence\n    maya_paid = 400   # 4 pounds in pence\n\n    # Since they receive the same amount of change, we loop through\n    # possible numbers of bars to find when this condition is met\n    for bars in range(1, max(eliot_paid, maya_paid)):\n        eliot_change = eliot_paid - bars * sour_sweets_cost\n        maya_change = maya_paid - bars * chocolate_drops_cost\n        \n        if eliot_change == maya_change and eliot_change > 0:\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [3, 5, 7, 8]\n    digits.sort()\n    # Start with the smallest even digit for the smallest even number\n    for digit in digits:\n        if digit % 2 == 0:\n            digits.remove(digit)\n            break\n    # Form the smallest 4-digit number from the remaining digits\n    smallest_even = digit\n    for d in sorted(digits):\n        smallest_even = smallest_even * 10 + d\n    return smallest_even\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # in litres\n    container_volume = 2  # in litres per container\n    number_of_containers = total_volume / container_volume\n    return int(number_of_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "网络故障，请重试"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(0, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    first_expression = 66 * 2 + 66 * 3\n    second_expression = 66 * 5\n\n    ans = first_expression == second_expression\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + bun, 41)\n\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare = 1.2\n    total_fare = 8.5\n    base_distance = 1.8\n    \n    additional_cost = total_fare - base_fare\n    additional_distance = additional_cost / additional_fare\n    total_distance = base_distance + additional_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let's denote x as the number of students in the class\n    x = symbols('x')\n\n    # The teacher has 80 apples, and at least one student gets at least 3 apples.\n    # This means that in the worst case scenario (to maximize the class size),\n    # all but one student gets 1 apple, and one student gets at least 3 apples.\n    # Therefore, we have the equation: (x - 1) + 3 <= 80.\n    # Simplifying this, we get x <= 80 - 3 + 1.\n    \n    equation = Eq(x - 1 + 3, 80)\n    # Solve for x\n    class_size = solve(equation, x)\n\n    # The class size is solved from the equation\n    return class_size[0]\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote red, blue, and yellow balloons as R, B, Y respectively\n    R, B, Y = symbols('R B Y')\n\n    # According to the problem, we have the following equations:\n    equation1 = Eq(R, 2 * Y)  # Twice as many red balloons as yellow\n    equation2 = Eq(B, 3 * Y)  # Three times as many blue balloons as yellow\n    equation3 = Eq(R + B + Y, 150)  # Total of 150 balloons\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (R, B, Y))\n\n    return solutions[R]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolate = 8\n    original_chocolates = received_chocolate * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    big_cars_needed = boys // big_car_capacity\n    small_cars_needed = girls // small_car_capacity\n\n    return big_cars_needed + small_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_age = 100\n\n    current_sum = mother_age + father_age + julia_age\n    years = 0\n\n    while current_sum < total_age:\n        mother_age += 1\n        father_age += 1\n        julia_age += 1\n        current_sum = mother_age + father_age + julia_age\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    ounces = 56\n\n    pounds = ounces / ounces_per_pound\n    kilograms = pounds / pounds_per_kg\n\n    return round(kilograms, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Count ascending numbers from 5 to 80\n    ascending_sum = sum(range(5, 81))\n    # Count descending numbers from 79 to 5\n    descending_sum = sum(range(5, 80))\n    # Sum both parts\n    total_sum = ascending_sum + descending_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    largest_A = 0\n    for perm in permutations(range(1, 10)):\n        A = sum(int(''.join(map(str, perm[i:i+3]))) for i in range(7))\n        if A > largest_A:\n            largest_A = A\n    return largest_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price_after_first_discount = 32\n    further_discount = 4\n    \n    price_after_further_discount = original_price_after_first_discount - further_discount\n    \n    discount_rate = 0.20\n    original_price = original_price_after_first_discount / (1 - discount_rate)\n    \n    total_discount = original_price - price_after_further_discount\n    total_percentage_discount = (total_discount / original_price) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    # Since A wants to stand on the left side of B, and B on the left side of C, we can treat ABC as a single unit.\n    # There are 3! ways to arrange ABC among themselves keeping the condition A before B and B before C.\n    abc_internal_arrangements = factorial(3)\n    # Now we have 3 units (ABC, the 4th person, and the 5th person) to arrange, which we can do in 3! ways.\n    external_arrangements = factorial(total_people - 2)    # = 3!\n    # Multiply the internal arrangements of ABC with the external arrangements.\n    count = abc_internal_arrangements * external_arrangements\n    return count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum = 0\n    for i in range(3, 2016, 7):\n        sum += 2019 / (i * (i + 7))\n    return sum\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    # The given sequence is an arithmetic sequence \n    # where a = 21 (the first term), d = 2 (the common difference)\n    \n    # The last term l is 159\n    # We need to find the number of terms n in the sequence\n    # The formula for the nth term of an arithmetic sequence is:\n    # a + (n - 1) * d = l\n    \n    # Solving for n:\n    # 21 + (n - 1) * 2 = 159\n    # (n - 1) * 2 = 159 - 21\n    # n - 1 = (159 - 21) / 2\n    # n = ((159 - 21) / 2) + 1\n    \n    a = 21\n    l = 159\n    d = 2\n    \n    n = ((l - a) / d) + 1\n    \n    # Now we calculate the sum of the sequence using the formula:\n    # S = n/2 * (a + l)\n    \n    S = n / 2 * (a + l)\n    \n    return int(S)\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Find the pattern in the given equations\n    # 10 * 10 = 1     (1 * 1 = 1)\n    # 11 * 11 = 4     (2 * 2 = 4)\n    # so the pattern seems to be the difference between the two digits squared\n    # 55 * 55 -> 5 * 5 = 25\n\n    return 25\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_permutations = sorted([''.join(p) for p in permutations(digits, 6) if p[0] != '0'])\n    return int(all_permutations[504])\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # the hundreds digit can be either 2 or 3, so we have 2 choices\n    hundreds_choices = 2\n    \n    # the tens digit can be 0, 2, or 3, but one digit has already been used for\n    # the hundreds place, so we have 2 choices\n    tens_choices = 2\n    \n    # the ones digit can be 0, 2 or 3, but two digits have already been used for\n    # the hundreds and tens place, so we have 1 choice left\n    ones_choices = 1\n    \n    # Multiply the choices to get the total number of 3-digit numbers\n    total_numbers = hundreds_choices * tens_choices * ones_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Work rates for Alice and Bob\n    alice_work_rate = 1/40\n    bob_work_rate = 1/60\n\n    # Total work done by both if they worked together for 27 days\n    total_work = (alice_work_rate + bob_work_rate) * 27\n\n    # Since the job is completed in 27 days, the total work should be 1 job\n    # We need to find the number of days Alice took off such that\n    # the remaining work done by Bob equals the total work minus Alice's work when she didn't take days off\n\n    # Let's denote the number of days Alice took off as 'days_off'\n    # The work done by Bob during 'days_off' is 'bob_work_rate * days_off'\n    # The work done by Alice during the days she worked is 'alice_work_rate * (27 - days_off)'\n    # These two amounts should sum to the total work which is 1 job\n    # Hence we get the equation: alice_work_rate * (27 - days_off) + bob_work_rate * days_off = 1\n\n    # We can solve the above equation for 'days_off'\n    from sympy import symbols, Eq, solve\n\n    days_off = symbols('days_off')\n    equation = Eq(alice_work_rate * (27 - days_off) + bob_work_rate * days_off, 1)\n\n    days_off_solution = solve(equation, days_off)\n\n    # Return the number of days off as an integer\n    return days_off_solution[0]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of red, white, and black balls\n    r, w, b = symbols('r w b')\n\n    # Set up the equations based on the ratios given in the problem\n    equation1 = Eq(r, w / 2)\n    equation2 = Eq(w, 3 * b / 4)\n\n    # The total number of balls is 136\n    equation3 = Eq(r + w + b, 136)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, w, b))\n\n    # Get the number of red balls\n    return solutions[r]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a_n = 105  # 7th term\n    a_n_plus_1 = 120  # 8th term\n    common_difference = a_n_plus_1 - a_n  # Calculate the common difference\n    n = 100  # Term number to find\n\n    a_100 = a_n + (n - 7) * common_difference  # General formula for nth term\n\n    return a_100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We have 2 different colors, and we want at least one matching pair.\n    # According to the pigeonhole principle, if we take one more sock than the number\n    # of colors available, we will definitely have one matching pair.\n    num_colors = 2\n    ans = num_colors + 1\n    return ans\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_past = 24\n    years_since_past = 4\n    years_ahead = 2\n    \n    # In four years ago, the total number of dog years increased by 4 years for each dog\n    current_combined_age = combined_age_past + (3 * years_since_past)\n    \n    # In two more years, the total number of dog years will increase by 2 years for each dog\n    future_combined_age = current_combined_age + (3 * years_ahead)\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11 ** 2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles Ryan and Audrey had at first\n    ryan_initial, audrey_initial = symbols('ryan_initial audrey_initial')\n\n    # Define the equations based on the problem's statement\n    equation1 = Eq(ryan_initial / audrey_initial, 2 / 7)\n    equation2 = Eq((ryan_initial + 20) / (audrey_initial - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan_initial, audrey_initial))\n\n    return solutions[audrey_initial]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Each hour makes up 30 degrees on the clock (360 degrees / 12 hours)\n    # However, as time progresses, the hour hand moves too. For every minute, the hour hand moves 0.5 degrees (30 degrees / 60 minutes)\n    hour_angle = (hour % 12) * 30 + (minute * 0.5)\n\n    # Each minute is 6 degrees on the clock (360 degrees / 60 minutes)\n    minute_angle = minute * 6\n\n    # The angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n\n    # angle should be the smaller angle between the hands, so if it's larger than 180 degrees, take the complement to 360 degrees.\n    angle = min(angle, 360 - angle)\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    left_apples = 20\n\n    total_apples = justin_apples + sisters_apples + left_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    only_piano = 30 - 15  # Students who play only piano\n    only_violin = 41 - 15  # Students who play only violin\n    both_instruments = 15  # Students who play both instruments\n    total_students = only_piano + only_violin + both_instruments\n    \n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # The sum of beads in one complete pattern\n    black_beads_in_pattern = 3 + 3  # The number of black beads in one complete pattern\n\n    # Number of complete patterns\n    complete_patterns = total_beads // pattern_length\n\n    # Number of black beads in all complete patterns\n    total_black_beads = complete_patterns * black_beads_in_pattern\n\n    # Beads in the incomplete pattern (if any)\n    remaining_beads = total_beads % pattern_length\n\n    # If there are remaining beads, some of them might be black\n    # Count the black beads in the incomplete pattern\n    if remaining_beads > 0:\n        if remaining_beads >= 3:\n            total_black_beads += 3\n        else:\n            total_black_beads += remaining_beads\n\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    required_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wake_up_time = required_time - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 > 1 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # possible coin values\n    coins = [1, 2, 5]\n    \n    # set to store unique totals\n    totals = set()\n    \n    # find all permutations of 3 coin values and calculate their sum\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                total = c1 + c2 + c3\n                totals.add(total)\n                \n    # return the count of unique totals\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from itertools import permutations\n\n    total_ways = 0\n    for perm in permutations(range(4), 3):\n        if perm[0] != perm[1]:  # Joe and Mike cannot join the same entrance\n            total_ways += 1\n\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice / 5\n    abigail_drank = 200\n    anna_drank = 120\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = time_days * 24 + time_hours  # convert time to hours\n\n    average_speed = distance / total_time_hours  # calculate average speed\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2\n    concentration1 = 0.40\n    volume2 = 3\n    concentration2 = 0.70\n\n    total_volume = volume1 + volume2\n    total_juice = volume1 * concentration1 + volume2 * concentration2\n\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let x be the number of chickens and ducks (each has 1 head and 2 legs)\n    # Let y be the number of cows (each has 1 head and 4 legs)\n    # According to the problem we have two equations:\n    # x + y = 51 (total number of heads)\n    # 2x + 4y = 160 (total number of legs)\n    \n    # From the first equation: y = 51 - x\n    # Substitute y in the second equation:\n    # 2x + 4(51 - x) = 160\n    # 2x + 204 - 4x = 160\n    # 2x - 4x = 160 - 204\n    # -2x = -44\n    # x = 22\n\n    # We know that the number of chickens is equal to the number of ducks, so:\n    chickens = 22 // 2\n    \n    return chickens\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = -(50 // 11) + 1\n    last_multiple = 150 // 11\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister_stamps = 339\n    bought_stamps = 455\n    gave_away_stamps = 777\n\n    remaining_stamps = initial_stamps - gave_to_sister_stamps + bought_stamps - gave_away_stamps\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    # Albert and Bella are included in the queue, so add 2\n    total_people = people_in_front_of_bella + people_behind_albert + 2\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(20, 30))\n    return primes[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Fatouma's current age \n    fatouma_age = symbols('fatouma_age')\n\n    # Construct the equation based on the problem statement\n    # In two years time, Fatouma's age will be: fatouma_age + 2\n    # Five years ago, Fatouma's age was: fatouma_age - 5\n    # Fatouma's age in two years will be twice her age five years ago:\n    equation = Eq(fatouma_age + 2, 2 * (fatouma_age - 5))\n\n    # Solve the equation\n    solution = solve(equation, fatouma_age)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    solutions = []\n    for x in range(1, 14):\n        for y in range(x+1, 14):\n            z = 14 - x - y\n            if z > y:\n                solutions.append((x, y, z))\n    return len(solutions), solutions\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_heights = 132 - 124 + 1  # Possible heights are from 124 to 132 inclusive\n    min_class_size = 4 * total_heights  # At least 4 students of each height\n\n    return min_class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50\n    change = 5 - total_spent\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # The winning strategy is to ensure that after your turn, the number of oranges\n    # is a multiple of 4. Thus, you can always bring the number back to a multiple\n    # of 4 after the opponent's turn, and eventually force them to take the last orange.\n\n    # Total number of oranges is 15.\n    # If Fred takes 3 oranges on the first turn, 12 will be left, which is a multiple of 4.\n    # If Fred takes 2 oranges on the first turn, 13 will be left, which is not a multiple of 4.\n    # If Fred takes 1 orange on the first turn, 14 will be left, which is not a multiple of 4.\n    # Therefore, Fred should take 3 oranges to ensure a win.\n\n    fred_first_turn = 3\n    return fred_first_turn\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = end_time - cook_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let w be the initial number of women, and m be the initial number of men.\n    # After the first bus, the number of women becomes w - 36.\n    # And the number of men at that point is still m.\n    # According to the first condition: w - 36 = (3/5) * m\n\n    # After the second bus, the number of men becomes m - 48.\n    # Now the number of men and women is equal.\n    # Therefore: w - 36 = m - 48\n\n    # We have two equations now:\n    # Equation 1: w - 36 = (3/5) * m\n    # Equation 2: w - 36 = m - 48\n\n    # From Equation 2, we can express m in terms of w:\n    # m = w + 12\n\n    # Substitute m in Equation 1:\n    # w - 36 = (3/5) * (w + 12)\n\n    # Now we solve this single equation for w.\n\n    # Multiply both sides by 5 to clear the fraction.\n    5 * (w - 36) = 3 * (w + 12)\n    # Simplify and solve for w.\n    5w - 180 = 3w + 36\n    # Move variables to one side and constants to the other side.\n    2w = 216\n    # Divide both sides by 2.\n    w = 108\n\n    # Now we find m using w and Equation 2.\n    # m = w + 12\n    m = 108 + 12\n    m = 120\n\n    # The total number of people at first is the sum of men and women.\n    total_people = w + m\n    return total_people\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n    \n    only_go_checkers = go_checkers - all_three\n    only_go_chess = go_chess - all_three\n    only_checkers_chess = checkers_chess - all_three\n\n    only_go = go - only_go_checkers - only_go_chess - all_three\n    only_checkers = checkers - only_go_checkers - only_checkers_chess - all_three\n    only_chess = chess - only_go_chess - only_checkers_chess - all_three\n\n    total_students = (only_go + only_checkers + only_chess +\n                      only_go_checkers + only_go_chess + only_checkers_chess +\n                      all_three)\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x represent the number of years later\n    # Oliver's age in x years: 20 + x\n    # Lin's age in x years: 26 + x\n    # The equation representing their sum of ages is:\n    # (20 + x) + (26 + x) = 48\n\n    # Solving the equation for x\n    x = (48 - (20 + 26)) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3  # meters\n    total_distance = (num_poles - 1) * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root_of_245 = 245 ** (1/3)\n    p = round(cube_root_of_245 ** 3 / 245)\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n        # Ensure that the leading digits of the numbers are not zero\n        if E == 0 or S == 0 or A == 0:\n            continue\n        ESSE = E * 1000 + S * 100 + S * 10 + E\n        SASMO = S * 10000 + A * 1000 + S * 100 + M * 10 + O\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    meters = cm_value / 100\n    return meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([64-62, 60-58, 56-54, 52-50, 48-46])\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_min_production = this_year_production // 4 + 1\n\n    return last_year_min_production\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    sick_leave = 1\n    personal_leave = 1\n    attending_students = total_students - sick_leave - personal_leave\n    attendance_rate = (attending_students / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return (8 * 15) / 5\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    common_difference = 26 - 22  # second term minus first term\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_of_fractions = 0\n    for i in range(2, 2018):\n        sum_of_fractions += sum([j / i for j in range(1, i)])\n    return sum_of_fractions\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    amount = 270\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # From front to back, Tim is 4th, so there are 3 people ahead of him.\n    front_to_back = 3\n\n    # From back to front, Tim is 3rd, so there are 2 people behind him.\n    back_to_front = 2\n\n    # Total number of rows = 3 (ahead of Tim) + 1 (Tim's row) + 2 (behind Tim)\n    total_rows = front_to_back + 1 + back_to_front\n\n    # From left to right, Tim is 1st, so there are no people to his left.\n    left_to_right = 0\n\n    # From right to left, Tim is 4th, so there are 3 people to his right.\n    right_to_left = 3\n\n    # Total number of columns = 0 (to the left of Tim) + 1 (Tim's column) + 3 (to the right of Tim)\n    total_columns = left_to_right + 1 + right_to_left\n\n    # Total number of band members is the product of the total number of rows and columns.\n    total_band_members = total_rows * total_columns\n\n    return total_band_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    # let the number of apples be 3x and the number of oranges be 8x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # original ratio equation\n    equation1 = Eq(3 * x / (8 * x), 3 / 8)\n    # new ratio equation when 1 apple is removed\n    equation2 = Eq((3 * x - 1) / (8 * x), 1 / 3)\n\n    # solving the equations to find the value of x\n    solutions = solve((equation1, equation2), (x))\n\n    # number of oranges is 8 times the value of x\n    oranges_num = 8 * solutions[x]\n\n    return oranges_num\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(100 - x))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_savings = 2.4\n    target_savings = 150\n    days_needed = target_savings / daily_savings\n    weeks_needed = days_needed / 7\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))  # sum from 1 to 14\n    final_sum = initial_sum + 2019  # add 2019 to the initial sum\n\n    # The sum of n consecutive numbers starting with m is n/2 * (2m + n - 1)\n    # We know n=8 for the 8 consecutive numbers, so we can derive the following:\n    # 8/2 * (2m + 8 - 1) = final_sum\n    # Simplify this to find the value of m\n    for m in range(1, final_sum):\n        if (8 * (2 * m + 7)) // 2 == final_sum:\n            return m  # m will be the smallest of the 8 consecutive numbers\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = (6 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let r be the weight of one rabbit and c be the weight of one chicken.\n    # According to the problem, 2 rabbits = 6 chickens, so r = 3c.\n    # Also, 3 kangaroos = 4 rabbits.\n    # Let k be the weight of one kangaroo.\n    # According to the problem, 3k = 4r, substituting the value of r, we get 3k = 4 * 3c = 12c.\n    # So, one kangaroo is equal to 12c / 3 = 4 chickens.\n    # Hence, one kangaroo weighs the same as 4 chickens.\n    \n    return 4\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    n = (last_term - first_term) // difference + 1  # number of terms\n\n    sum_of_series = n * (first_term + last_term) // 2  # sum of arithmetic sequence\n\n    return sum_of_series\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    frequency = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for freq in frequency.values():\n        total_permutations //= factorial(freq)\n    return total_permutations\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = [3, 1, 5, 1, 1, 1, 1]  # Duration of each task\n    ans = sum(tasks)\n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    factor_sum = 836 + 162 + 2\n    ans = common_factor * factor_sum\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    ans = total_amount // note_value\n    return ans\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    ashley_age_3_years_ago = ashley_age - 3\n    brothers_age_3_years_ago = ashley_age_3_years_ago - 2\n    brothers_current_age = brothers_age_3_years_ago + 3\n    return brothers_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th in line from both front and back since she is in the middle.\n    # To find the total number of dwarves, we need to consider her position from one side,\n    # and double it (since she is exactly in the middle) then subtract 1 (to account for Snow White herself).\n    snow_white_position = 7\n    total_dwarves = (snow_white_position * 2) - 1\n\n    return total_dwarves\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    common_difference = 3\n    last_term = 52\n\n    # Calculate the number of terms in the arithmetic sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum = n * (first_term + last_term) // 2\n\n    return sum\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fractional_part = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        sum_fractional_part += fractional_part\n    return sum_fractional_part\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):  # range of four digit numbers\n        product = number * 6\n        quotient = number // 6\n\n        # Check if the cube root of product is an integer\n        if round(product ** (1/3))**3 == product and round(quotient ** 0.5)**2 == quotient:\n            return number\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number1 = 3 + Fraction(5, 9)\n    mixed_number2 = 6 + Fraction(4, 9)\n\n    result = mixed_number1 + mixed_number2\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # The number of rows can be found by adding Tim's positions from front and back, and subtracting 1 (as Tim is counted twice)\n    rows = 4 + 3 - 1\n\n    # The number of columns can be found by adding Tim's positions from left and right, and subtracting 1 (as Tim is counted twice)\n    columns = 4 + 7 - 1\n\n    # Total band members is the product of the number of rows and columns\n    ans = rows * columns\n\n    return ans\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    import math\n\n    lcm = math.lcm(2, 3, 8)\n\n    return lcm\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # The pigeonhole principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    \n    # In this case, to guarantee that the school with most participants has at least 4,\n    # we want the worst case scenario where all other schools have 3 participants,\n    # because if any school gets a 4th participant, it would be the school with most participants.\n\n    # Let's assume there are x schools. If there were x-1 schools with 3 participants each, \n    # then the last school (which will have the most participants), must have \n    # the remaining number of participants, which would be at least 4.\n\n    # Total participants is 100.\n    total_participants = 100\n\n    # Each school other than the one with the most participants would have 3 participants.\n    participants_per_school = 3\n\n    # Calculate the number of schools needed such that when each of them (except one) has 3 participants,\n    # the last school must have at least 4 participants.\n    for x in range(1, total_participants + 1):\n        if (x - 1) * participants_per_school + 4 <= total_participants:\n            continue\n        else:\n            return x - 1\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    num, _ = solve_congruence(*congruences)\n    return num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount of wheat Lily and Gigi have\n    lily, gigi = symbols('lily gigi')\n\n    # Equation 1: After giving 36 tonnes, Lily would still have 26 more than Gigi\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n\n    # Equation 2: Lily has 8 times the wheat Gigi has\n    equation2 = Eq(lily, 8 * gigi)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    # Return the amount of wheat Lily has\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_amount = sum(coins)\n    brother_amount = total_amount // 2\n\n    for coin in coins:\n        if total_amount - coin == brother_amount * 2:\n            return coin\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Let's call the distance travelled by the slower train x km.\n    # Then the distance travelled by the faster train will be x + 70 km.\n    # The time taken by both trains to meet would be the same.\n    # So by using the formula: distance = speed * time, we get:\n    # Time taken by slower train = x / 36\n    # Time taken by faster train = (x + 70) / 48\n    \n    # Since the time taken by both trains to meet is the same:\n    # x / 36 = (x + 70) / 48\n    # Cross-multiply to solve for x:\n    # 48x = 36(x + 70)\n    # 48x = 36x + 36 * 70\n    # 48x - 36x = 36 * 70\n    # 12x = 36 * 70\n    # x = (36 * 70) / 12\n\n    x = (36 * 70) / 12\n    \n    # Distance between two stations will be the sum of distances travelled by both trains\n    distance = x + (x + 70)\n\n    return distance\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Assume a reasonable upper limit for the number of boats\n        for students in range(1, 1000):  # Assume a reasonable upper limit for the number of students\n            if ((students / boats) == 6) and ((students / (boats - 2)) == 9):\n                return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize count of pairs to 0\n    count = 0\n    \n    # Loop through all possible pairs of numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensure j > i to avoid counting the same pair twice\n            # Check if the sum of the pair i and j is a multiple of 5\n            if (i + j) % 5 == 0:\n                # Increment count for each valid pair\n                count += 1\n    \n    # Return the total count of pairs\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_total = solutions[chocolates]\n    remaining_chocolates_after_giving_20_each = chocolates_total - 20 * solutions[friends]\n\n    return remaining_chocolates_after_giving_20_each\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah - (3/5)*rasidah, 2*(chai_seng - (6/7)*chai_seng))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    two_digit_numbers = set()\n\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != '0' and d1 != d2:\n                two_digit_numbers.add(d1 + d2)\n\n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance Amy traveled uphill\n    distance_uphill = 3 * 5  # time * speed\n    \n    # Calculate the distance Amy traveled downhill\n    distance_downhill = 2 * 10  # time * speed\n    \n    # Calculate the total distance traveled\n    total_distance = distance_uphill + distance_downhill\n    \n    # Calculate the total time traveled\n    total_time = 3 + 2  # uphill time + downhill time\n    \n    # Calculate the average speed for the whole trip\n    average_speed = total_distance / total_time  # total distance / total time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    fixed_rate = 2\n    additional_rate = 1\n    service_fee = 3\n    total_amount = 63\n    first_5_kwh_cost = 5 * fixed_rate\n\n    # Cost for first 5 kWh\n    if total_amount <= (first_5_kwh_cost + service_fee):\n        return 'Not enough money for service fee and first 5 kWh'\n\n    # Remaining amount after fixed charges\n    remaining_amount = total_amount - first_5_kwh_cost - service_fee\n\n    # Calculate total kWh including first 5 kWh\n    total_kwh = 5 + remaining_amount / additional_rate \n\n    return total_kwh\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Loop through all possibilities of thousands, hundreds, tens, and ones digits\n    for d4 in range(1, 10):     # Thousands digit (d4) cannot be 0\n        for d3 in range(0, 10): # Hundreds digit (d3) can be 0\n            d2 = d4 + d3        # Tens digit (d2) is the sum of d4 and d3\n            if d2 > 9:          # d2 must be a single digit\n                continue\n            d1 = d4 + d3 + d2   # Ones digit (d1) is the sum of the other three digits\n            if d1 > 9:          # d1 must be a single digit\n                continue\n            if d4 < d3 < d2 < d1 and d4+d3+d2+d1 == 16: # Checking the condition\n                return d1       # Ones digit is the answer\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    whole_number = 63\n    result = 54\n\n    fraction_part = result / whole_number\n    numerator = fraction_part * 7\n\n    return int(numerator)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    final_value = round(final_value, 1)\n\n    return final_value\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(0, 10):\n        for y in range(0, 10):\n            A = 10*x + y\n            B = 400 + 10*x + y\n            if B == 10 + 7*A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    \n    # Calculate how many full small boxes we can use\n    full_small_boxes = total_cookies // small_box_capacity\n\n    # Check if we need an additional small box for remaining cookies\n    if total_cookies % small_box_capacity != 0:\n        # We need one more box for the remaining cookies\n        full_small_boxes += 1\n\n    return full_small_boxes\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_passed = 43\n    math_passed = 30\n    science_passed = 28\n    english_passed = 25\n\n    # Maximum possible students passing all three tests can be obtained by assuming no student passed in exactly two tests.\n    # Subtract the sum of students passing each test from the total passed to estimate those who passed all three,\n    # then add back the total passed to correct for double subtraction of the three-test passers.\n    max_all_passed = math_passed + science_passed + english_passed - total_passed\n\n    return max_all_passed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first = 20 * 0.35\n    juice_in_second = 30 * 0.60\n    total_juice = juice_in_first + juice_in_second\n    concentration = (total_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount of grain in warehouse B\n    grain_b = symbols('grain_b')\n\n    # The amount of grain in warehouse A after shipment\n    grain_a = 50 + 12\n\n    # The amount of grain in warehouse B after shipment\n    grain_b_after_shipment = grain_b - 16\n\n    # Equation representing the relationship\n    equation = Eq(grain_a, 2 * grain_b_after_shipment)\n\n    # Solve for grain_b\n    solutions = solve(equation, grain_b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    return 37\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factors_4320 = {2: 6, 3: 3, 5: 1}  # Prime factorization of 4320: 2^6 * 3^3 * 5\n    prime_factors_3_div_2 = {3: 1, 2: -1}    # Prime factorization of 3/2: 3^1 * 2^-1\n\n    # An integer multiplied by (3/2)^n is an integer if and only if n is less or equal to the power of 2 in 4320, i.e., 6\n    # Because each multiplication by 3/2 will reduce the power of 2 by 1\n    # Thus, n must be from 0 to 6, inclusive\n\n    ans = prime_factors_4320[2] + 1  # Number of possible values for n is 0 to 6, inclusive\n\n    return ans\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    \n    ways = factorial(total_letters)\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    \n    return ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.5 * 0.2 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Ratio of fishes to rabbits\n    fishes_to_rabbits = 3 / 1\n\n    # Ratio of rabbits to packs of wheat\n    rabbits_to_wheat = 2 / 3\n\n    # Overall ratio of fishes to a pack of wheat\n    fishes_to_wheat = fishes_to_rabbits * (1 / rabbits_to_wheat)\n\n    # Simplify to find out how many fishes Owen should give Dennis for a pack of wheat\n    return fishes_to_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # x = total number of people\n    # y = total number of benches\n    # Equation 1: When 3 people per bench, 7 people standing: 3y + 7 = x\n    # Equation 2: When 7 people per bench, 3 benches left: 7(y - 3) = x\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(3 * y + 7, x)\n    equation2 = Eq(7 * (y - 3), x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n    \n    # Subtract the booking fee from the total cost to find the cost that went into paying for the hours\n    cost_for_hours = total_cost - booking_fee\n    \n    # Divide the remaining cost by the cost per hour to find the number of hours the hall was hired for\n    hours_hired = cost_for_hours / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Solve the system of congruences using the Chinese Remainder Theorem:\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    # Find x such that 400 < x < 500\n    while x < 400:\n        x += 4 * 5 * 7\n\n    return x if x < 500 else None\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Dell had twice as many stickers as Ginnie\n    ginnie = 32 // 2\n    # Ginnie had 4 times as many stickers as Lyn\n    lyn = ginnie // 4\n    # The total number of stickers Ginnie and Lyn had altogether\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    empty_bottle_mass, apple_juice_mass = symbols('empty_bottle_mass apple_juice_mass')\n\n    # Equations based on the given information\n    equation1 = Eq((5/6) * apple_juice_mass + empty_bottle_mass, 4.6)\n    equation2 = Eq((2/3) * apple_juice_mass + empty_bottle_mass, 4.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (empty_bottle_mass, apple_juice_mass))\n\n    # Get the mass of the empty bottle in grams\n    empty_bottle_mass_grams = solutions[empty_bottle_mass] * 1000\n\n    return empty_bottle_mass_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    # Inverse operation steps\n    result_after_operations = 19\n    return (result_after_operations + 3) / 2\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10, 2):  # The hundreds digit must be odd and non-zero\n        for tens in range(10):  # The tens digit can be any digit from 0 to 9\n            for ones in range(10):  # The ones digit can be any digit from 0 to 9\n                if hundreds + tens + ones == 5:  # The sum of the digits must be 5\n                    count += 1  # Increment the count for each valid combination\n    return count\n    \nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages_with_single_digit = 9\n    pages_with_double_digits = 90 * 2\n    pages_with_triple_digits = 900 * 3\n\n    remaining_digits = total_digits - (pages_with_single_digit + pages_with_double_digits + pages_with_triple_digits)\n    pages_with_quadruple_digits = remaining_digits // 4\n\n    total_pages = pages_with_single_digit + 90 + 900 + pages_with_quadruple_digits\n\n    return total_pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Since the knowledge point is related to multiplication outside of the multiplication table,\n    # assuming the question requires a simple multiplication, for example 123 * 456,\n    # which is not typically found in standard multiplication tables for elementary education.\n    # Here we will perform this calculation.\n\n    result = 123 * 456\n    return result\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n    pupils_each_after_transfer = total_pupils // 2\n\n    return pupils_each_after_transfer\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i for i in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    adder = 2\n    while term < 100:\n        if term + adder >= 100:\n            break\n        term += adder\n        adder += 2\n    return term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # From the problem, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Adding all the equations, we get:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # Now dividing by 2 to get the sum of the weights of Adam, Ben and Carl.\n    total_weight = (102 + 97 + 93) / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    book_price = 3.4\n    magazine_price = 1.6\n    total_spent = 23\n\n    # Hypothesis: Clara buys 0 books.\n    # The maximum number of magazines Clara can buy if she buys 0 books.\n    max_magazines = total_spent // magazine_price\n\n    for magazines in range(int(max_magazines) + 1):\n        if (total_spent - magazines * magazine_price) % book_price == 0:\n            return magazines\n    \n    return None\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks = andy_notebooks - andy_gives * 2\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = sum(solutions.values())\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age to be less than 100 for practical purposes\n        age_base10 = str(age) + \"0\"\n        age_base3 = int(age_base10, 3)\n        if age_base3 == age:\n            return age\n    return None\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5/8 + 1/17) * 8 + 9/17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            factors.append(i)\n\n    factor1, factor2 = factors\n    sum_of_factors = factor1 + factor2\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "from math import factorial\n\ndef solution():\n    # Since rotating the table results in the same seating, we fix one person's position\n    # to avoid counting rotations as different seatings.\n    # After fixing one person's position, there are 6 seats left to be filled.\n    num_people = 7\n    \n    # Calculate the permutations for the remaining people.\n    different_orders = factorial(num_people - 1)\n    \n    return different_orders\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # First pile\n        for x2 in range(1, 10 - x1):  # Second pile\n            x3 = 10 - x1 - x2  # Third pile is the remainder\n            if x1 != x2 and x1 != x3 and x2 != x3:\n                count += 1\n    return count // 6  # Factor of 6 due to permutation of piles\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    # Start from the smallest prime number, which is 2\n    for prime1 in range(2, 55):\n        prime2 = 55 - prime1\n        # Check if both numbers are prime\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2  # Return their product\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_price = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    chocolate_to_cheesecake_ratio = 3 / 2\n    \n    single_cheesecake_price = cookie_price * cheesecake_to_cookie_ratio\n    single_chocolate_price = single_cheesecake_price * chocolate_to_cheesecake_ratio\n    \n    return single_chocolate_price\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities we want to find\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, 3616)  # total flowers\n    equation2 = Eq(orchids / tulips, 3 / 5)  # ratio of orchids to tulips\n\n    # After selling flowers, the remaining flowers are:\n    flowers_left = symbols('flowers_left')\n    equation3 = Eq(flowers_left, 2616)\n    equation4 = Eq(flowers_left,  orchids - 0.4*orchids + tulips - (1/5)*tulips + roses - 0.25*roses)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (orchids, tulips, roses, flowers_left))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Define a function to check if the sum of digits of a number is divisible by 9\n    def is_divisible_by_9(number):\n        return sum(int(digit) for digit in str(number)) % 9 == 0\n\n    # Iterate over the possibilities for A, M, C making sure all digits are different\n    for A in range(0, 10):\n        for M in range(0, 10):\n            for C in range(0, 10):\n                if len({2, 0, A, M, C, 1, 9}) == 7:  # All digits must be different\n                    number = int(f'20{A}{M}{C}19')\n                    if is_divisible_by_9(number):  # Check divisibility by 9\n                        return A + M + C  # Return the sum if the condition is met\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n    eq1 = Eq(C + B, 18)\n    eq2 = Eq(B, A + A + A)\n    eq3 = Eq(C + A, 10)\n\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Mike's candy count as m and Valeria's as v\n    m, v = symbols('m v')\n\n    # The total candy count is 36\n    total_candies = Eq(m + v, 36)\n\n    # If both eat the same amount of candy, the number of candies each will have left\n    candies_left = Eq(m - v, 6 - 22)\n\n    # Solve the system of equations\n    solutions = solve((total_candies, candies_left), (m, v))\n\n    return solutions[v]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    fraction_read = 1/4\n    days_to_read_fraction = 3\n    total_days = days_to_read_fraction * (1 / fraction_read)\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Melissa's current age and her mother's current age\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    \n    # When Melissa was 8, her mother was 32, so the difference in their ages is 32 - 8\n    age_difference = 32 - 8\n    \n    # Create equations based on the problem statement\n    # The first equation represents the age difference which never changes\n    # The second equation represents the current ratio of their ages\n    equation1 = Eq(mother_now - melissa_now, age_difference)\n    equation2 = Eq(mother_now, 3 * melissa_now)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n    \n    # Return Melissa's current age\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n\n    recurring_decimal = Decimal('4.73').quantize(Decimal('1.000')) + Decimal('4.73') % Decimal('1') * Decimal('0.001') / Decimal('0.99')\n    precise_decimal = Decimal('4.73')\n    large_recurring_decimal = Decimal('4.77')\n    three_decimal_places = Decimal('4.737')\n    \n    smallest_decimal = min(recurring_decimal, precise_decimal, large_recurring_decimal, three_decimal_places)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    plants_before_joel = (remaining_after_joel + 2) * 2\n    \n    remaining_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_after_valerie + 3) * 2\n    \n    remaining_after_ethan = plants_before_valerie\n    plants_at_first = (remaining_after_ethan + 1) * 2\n    \n    return plants_at_first\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining = 18\n    half_remaining_plus_seven = remaining * 2 + 7\n    total_minus_half_minus_sixteen = half_remaining_plus_seven * 2 - 16\n    initial_eggs = total_minus_half_minus_sixteen + 16\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    numbers = [33, 29, 34, 28, 27, 30]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percent = 40\n\n    original_price = increased_price / (1 + increase_percent / 100)\n\n    return original_price\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_part = '857142'  # The recurring part of the fraction 6/7\n    total_length = 58  # The total length of the digits we want to sum\n    \n    # Calculate the full repetitions of the recurring part within 58 digits\n    full_repetitions = total_length // len(recurring_part)\n    \n    # Calculate the number of digits in the partial repetition\n    partial_repetition_length = total_length % len(recurring_part)\n    \n    # Calculate the sum for the full repetitions\n    sum_full_repetitions = sum(map(int, recurring_part)) * full_repetitions\n    \n    # Calculate the sum for the partial repetition\n    sum_partial_repetition = sum(map(int, recurring_part[:partial_repetition_length]))\n    \n    # The final sum of the first 58 digits is the sum of the full repetitions and the partial repetition\n    ans = sum_full_repetitions + sum_partial_repetition\n    \n    return ans\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let's denote P1 as x and P6 as y.\n    # According to the question, we have two equations:\n    # x + y = 120       (1)\n    # 2*y + (1/2)*x = 180    (2)\n    \n    # We can solve these two linear equations using algebra or we can set up a simple loop in Python to find the integer solutions.\n    for x in range(121):  # As there are a total of 120 students, P1 students can range from 0 to 120\n        y = 120 - x  # From equation (1)\n        if 2 * y + 0.5 * x == 180:  # Check if it satisfies equation (2)\n            return x  # Return the number of P1 students\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_for_one_coin = 2  # Heads or tails\n    total_tosses = 2\n    ans = outcomes_for_one_coin ** total_tosses\n    return ans\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    # Each team plays every other team once, so use combination formula C(n, 2) where n is num_teams\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Ratio of fish to rabbit \n    fish_to_rabbit_ratio = 3 / 1\n    # Ratio of rabbits to packs of wheat\n    rabbit_to_wheat_ratio = 2 / 3\n\n    # Combined ratio of fish to packs of wheat\n    # Multiplying the two ratios to get how many fish per pack of wheat\n    fish_to_wheat_ratio = fish_to_rabbit_ratio / rabbit_to_wheat_ratio\n    \n    return fish_to_wheat_ratio\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    incorrect_product = quotient * remainder\n    incorrect_sum = incorrect_product + divisor\n\n    # In Johnny's solution, the error is made while multiplying the remainder by the quotient.\n    # This step makes no sense in the context of division with remainders.\n    \n    # The correct way to find the dividend is to multiply the quotient by the divisor and then add the remainder.\n    correct_dividend = (quotient * divisor) + remainder\n\n    # If Johnny's answer of 22 was correct, his calculation of 18 (9 times 2) + 4 = 22 would also be correct.\n    # But actually, only the calculation of dividend as mentioned before is correct.\n    \n    return correct_dividend\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equations based on the given information\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Returning the cost of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    # Current ages of Eddie and Mike\n    eddie_age_now = 8\n    mike_age_now = 48\n    \n    # Calculate the difference in age between Mike and Eddie\n    age_difference = mike_age_now - eddie_age_now\n    \n    # Eddie's age when he will be 18\n    eddie_age_future = 18\n    \n    # Mike's age when Eddie is 18\n    mike_age_future = eddie_age_future + age_difference\n    \n    return mike_age_future\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Let's denote the side of the cube as 's'.\n    s = symbols('s')\n\n    # From the problem, we have:\n    # PB^2 = s^2 + s^2\n    # PC^2 = s^2 + (s-sqrt(2)/2)^2\n    # PD^2 = (s-sqrt(2)/2)^2 + (s-sqrt(2)/2)^2\n    # PG^2 = 3*s^2\n\n    # Using the lengths provided by the problem and setting up the equations\n    # PB = 60*sqrt(10) -> 2*s^2 = (60*sqrt(10))^2\n    # PC = 60*sqrt(5) -> s^2 + (s-sqrt(2)/2)^2 = (60*sqrt(5))^2\n    # PD = 120*sqrt(2) -> 2*(s-sqrt(2)/2)^2 = (120*sqrt(2))^2\n    # PG = 36*sqrt(7) -> 3*s^2 = (36*sqrt(7))^2\n\n    # Setting up the equations\n    equation1 = Eq(2 * s**2, (60*sqrt(10))**2)\n    equation2 = Eq(s**2 + (s-sqrt(2)/2)**2, (60*sqrt(5))**2)\n    equation3 = Eq(2 * (s-sqrt(2)/2)**2, (120*sqrt(2))**2)\n    equation4 = Eq(3 * s**2, (36*sqrt(7))**2)\n\n    # Solving for 's'\n    solutions = solve((equation1, equation2, equation3, equation4), s)\n\n    # PA will then be one of these 4 solutions\n    # We can eliminate the complex and negative solutions,\n    # and since we are equating squares, we take the square root of the side for PA\n\n    # PA = sqrt(solutions[0]) since PA is the side of the cube\n    return float(sqrt(solutions[0]))\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    for i in range(1, 4):  # From one to three digit numbers\n        # Generate permutations for current number of digits\n        perms = [''.join(p) for p in permutations(digits, i)]\n        # Convert to integers and filter out primes\n        primes.update(int(p) for p in perms if isprime(int(p)))\n\n    # Filter only those primes which are less than 100\n    primes_less_than_100 = {p for p in primes if p < 100}\n\n    return len(primes_less_than_100)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    first_division = numerator / denominator\n\n    second_numerator = 3.5 + Fraction(14, 3) + Fraction(32, 15)\n    second_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    second_division = second_numerator / second_denominator\n\n    ans = first_division / second_division\n\n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bracelet, necklace, ring = symbols('bracelet necklace ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(bracelet + necklace + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (bracelet, necklace, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for n in range(1000, 10000):\n        for i in range(4):\n            m = int(str(n)[:i] + str(n)[i+1:])\n            if n - m == 2021:\n                return n\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming_percent = 82\n    jogging_percent = 54\n    neither_percent = 16\n\n    # Calculate the number of students for each category\n    swimming_count = (swimming_percent / 100) * total_students\n    jogging_count = (jogging_percent / 100) * total_students\n    neither_count = (neither_percent / 100) * total_students\n\n    # Using the principle of inclusion-exclusion to find students who like both\n    both_count = (swimming_count + jogging_count) - (total_students - neither_count)\n\n    return int(both_count)\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of students in the canteen initially be x\n    total_students = symbols('x')\n    \n    # Initially, 40% of the students were boys, which means the number of boys initially = 0.4 * x\n    initial_boys = 0.4 * total_students\n    \n    # After 16 boys leave and 16 girls enter, the number of boys becomes initial_boys - 16,\n    # while the number of girls becomes initial_girls (which is x - initial_boys) + 16.\n    # The new number of boys is 2/15 of the total students now.\n    equation = Eq(initial_boys - 16, (2 / 15) * (total_students + 16 - 16))\n    \n    # Solve for the total number of students\n    total_students_solution = solve(equation, total_students)\n    \n    # Calculate the initial number of girls\n    initial_girls = total_students_solution[0] - initial_boys.subs(total_students, total_students_solution[0])\n    \n    # Calculate the final number of girls after 16 girls entered\n    final_girls = initial_girls + 16\n    \n    return final_girls\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    rate_a = 1 / 15\n    # B's work rate per day\n    rate_b = 1 / 10\n\n    # Work done together in 4 days\n    work_done = 4 * (rate_a + rate_b)\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n\n    # Days B needs to finish the remaining work\n    days_b = remaining_work / rate_b\n\n    return days_b\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34)\n    part2 = (0.23 + 0.34 + 0.65)\n    part3 = (1 + 0.23 + 0.34 + 0.65)\n    part4 = (0.23 + 0.34)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Including the trees at the opposite ends, the number of trees is\n    # one more than the number of intervals (spaces between the trees).\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda can do 1 problem every 5 minutes\n    linda_rate = 1 / 5\n    # Cici can do 1 problem every 6 minutes\n    cici_rate = 1 / 6\n    \n    # Together their combined rate is the sum of their rates\n    combined_rate = linda_rate + cici_rate\n\n    # Total time working in minutes (2 hours * 60 minutes/hour)\n    total_time = 2 * 60\n    \n    # Total problems solved is the combined rate multiplied by the total time\n    total_problems = combined_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples\n    # and John will have (john + x) apples\n    # We want Amy to have exactly 4 more apples than John, so:\n    # amy - x = john + x + 4\n    # Solve for x:\n    x = (amy - john - 4) / 2\n    \n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    \n    return gcd(num1, num2)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    return 15\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total amount of grass the pasture can provide\n    total_grass = 14 * 15\n    \n    # Grass consumption per day by a goat or 4 rabbits\n    goat_consumption = total_grass / 14\n    rabbit_consumption = goat_consumption / 4\n    \n    # Total daily consumption by 17 goats and 20 rabbits\n    daily_consumption = 17 * goat_consumption + 20 * rabbit_consumption\n\n    # Number of days the pasture can feed the 17 goats and 20 rabbits\n    days = total_grass / daily_consumption\n\n    return days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_numbers = 10\n    mean_value = 37\n\n    # Calculate the total sum of the 10 numbers.\n    total_sum = mean_value * total_numbers\n\n    # Subtract the sum of known numbers to find the missing number.\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    answer = tens + tenths + hundredths\n    return answer\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4 - toh / 3, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tasha, sandra, riley = symbols('tasha sandra riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 / 5 * sandra)\n    equation3 = Eq(tasha, riley + 60)\n    \n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    slide_distance = 1\n\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # Snail climbs during the day\n\n        if height_climbed >= 45:  # Check if it has reached the top\n            break\n\n        height_climbed -= slide_distance  # Snail slides down at night\n        slide_distance += 1  # Increase the slide distance for the next night\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbols represent the number of prizes for X, Y, and Z.\n    x, y, z = symbols('x y z')\n    \n    # Set up the equations based on the given information:\n    eq1 = Eq(x, y + 83)  # There are 83 more Prizes X than Prizes Y\n    eq2 = Eq(z, x + 24)  # There are 24 more Prizes Z than Prizes X\n    eq3 = Eq(x + y + z, 283)  # Total number of prizes is 283\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # Return the number of Prizes Y\n    return solutions[y]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    a = 4\n    b = 3\n\n    ans = sum(a * 10**i for i in range(b))\n    \n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    jan_saving = 13\n    feb_saving = 18\n    mar_saving = 5\n    total_months = 3\n\n    total_savings = jan_saving + feb_saving + mar_saving\n    mean_saving = total_savings / total_months\n\n    return mean_saving\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9 ** 2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "from itertools import permutations\n\ndef solution():\n    angel_code = \"0141705021\"\n    devil_code_trial = \"4005220912\"\n    angel_permutations = set(permutations(angel_code))\n    if tuple(devil_code_trial) in angel_permutations:\n        return True\n    else:\n        return ''.join(min(angel_permutations))\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "from sympy import Integer, binomial\n\ndef solution():\n    count = 0\n    n = 6\n    # minimum two parts means max part size would be n-1 for n\n    for i in range(2, n):\n        # n can be divided into i parts in binomial(n-1, i-1) ways\n        count += binomial(n-1, i-1)\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef solution():\n    # Use Fraction to handle repeating decimals correctly\n    terms = [Fraction(1, 9), Fraction(12, 90), Fraction(23, 90), \n             Fraction(34, 90), Fraction(45, 90), Fraction(54, 90), \n             Fraction(78, 90)]\n    \n    # Sum all the terms\n    total_sum = sum(terms)\n    # Convert the fraction to decimal\n    ans = float(total_sum)\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, Eq, sqrt, solve\n\n    x, a = symbols('x a', real=True, positive=True)\n    \n    # Given equation\n    eq = Eq(sqrt(x), sqrt(a) - 2/sqrt(a))\n    \n    # Solve for x\n    sol = solve(eq, x)\n    x_val = sol[0]\n    \n    # Find expression for sqrt(x^2 + 8*x)\n    expression = sqrt(x_val**2 + 8 * x_val)\n    \n    # Simplify the expression\n    simplified_expr = expression.simplify()\n\n    return simplified_expr\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    nums = list(range(2017, 2036))\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if (nums[i] + nums[j] + nums[k]) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # The principle ensures that at least one pen must have ceil(total_sheep/total_pens) sheep\n    most_sheep = -(-total_sheep // total_pens)  # Ceiling division\n\n    return most_sheep\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if all(num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n    \n    total_boys = 18\n    total_girls = 27\n    \n    total_age_boys = mean_age_boys * total_boys\n    total_age_girls = mean_age_girls * total_girls\n    \n    mean_age_total = (total_age_boys + total_age_girls) / (total_boys + total_girls)\n    \n    return mean_age_total\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Define the mapping from letters to numbers\n    angel_to_number = {'A': '0', 'N': '1', 'G': '4', 'E': '7', 'L': '5'}\n    devil_to_number = {'D': '0', 'E': '1', 'V': '4', 'I': '7', 'L': '2'}\n\n    # The original password for \"ANGEL\"\n    angel_password = \"0141705021\"\n\n    # Andy's attempt to unlock the chest with \"DEVIL\"\n    andy_input = \"4005220912\"\n\n    # Construct the correct password from the mapping\n    devil_password = ''.join(devil_to_number[letter] for letter in \"DEVIL\")\n\n    # Check if Andy's attempt is correct\n    if andy_input == devil_password:\n        ans = True\n    else:\n        ans = devil_password\n\n    return ans\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    days = [6, 12, 16]\n    ans = reduce(lcm, days)\n    return ans\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Sara could first draw 4 green balls, 4 yellow balls and 2 red balls.\n    # This guarantees her not having 5 balls of the same color yet.\n    # However, the next ball Sara draws has to be the 5th ball of one of these colors.\n    return 4 + 4 + 2 + 1\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_number = 10\n    term_value = 25\n    common_difference = 28 - 25\n\n    first_term = term_value - (term_number - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Define the average speeds\n    speed_sam = 1  # in m/s\n    speed_ben = 0.6  # in m/s\n    pool_length = 30  # in meters\n    time_swimming = 10 * 60  # converting 10 minutes to seconds\n\n    # Calculate the combined speed of Sam and Ben\n    combined_speed = speed_sam + speed_ben  # since they start from opposite ends and move towards each other\n\n    # Calculate the number of times they meet by dividing the total distance traveled by the length of the pool\n    # Total distance traveled by both is their combined speed multiplied by the time swimming\n    # The number of meetings will be the number of pools lengths they cover together\n    total_distance = combined_speed * time_swimming\n    meets = total_distance // pool_length\n    \n    return int(meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Split the numbers 89 and 75 into their digits\n    a, b = divmod(89, 10)  # Split 89 into a=8, b=9\n    c, d = divmod(75, 10)  # Split 75 into c=7, d=5\n\n    # Apply the new operation as defined by the rule\n    result = a * b + c * d\n\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]  # The given temperatures\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    difference = hottest - coldest  # Find the difference between the hottest and coldest\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n\n    # Total height of Bob and Cindy\n    total_height_bob_cindy = average_bob_cindy * 2\n\n    # Total height of the three children\n    total_height_three = total_height_bob_cindy + height_doris\n\n    # Average height of the three children\n    average_height_three = total_height_three / 3\n\n    return average_height_three\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    \n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # In 6 years, Destin will be twice his nephew's age\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n\n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solving the system of equations\n    sol = solve((equation1, equation2), (destin, nephew))\n\n    # Sum of their ages in 10 years' time\n    sum_ages_in_10_years = sol[destin] + 10 + sol[nephew] + 10\n\n    return sum_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils  # average * total number of pupils\n    \n    boys, girls = symbols('boys girls')\n\n    # Equations based on the problem\n    equation1 = Eq(boys + girls, total_pupils)  # total number of boys and girls is 40\n    equation2 = Eq(20 * boys + 60 * girls, total_pencils)  # total pencils owned by boys and girls\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p represent the number of pies each of them had at first.\n    p = symbols('p')\n    \n    # Equation representing the final number of pies Mrs Tan has after buying 12\n    tan_pies = p + 12\n    \n    # Equation representing the final number of pies Mrs Lim has after giving away 4\n    lim_pies = p - 4\n    \n    # Mrs Tan has twice as many pies as Mrs Lim.\n    equation = Eq(tan_pies, 2 * lim_pies)\n    \n    # Solving the equation\n    num_pies = solve(equation, p)\n    \n    return num_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5']\n    perm = permutations(digits, len(digits))\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = \"6:35am\"\n    arrival_time = \"10:22am\"\n\n    fmt = \"%I:%M%p\"\n    tdelta = datetime.strptime(arrival_time, fmt) - datetime.strptime(departure_time, fmt)\n\n    minutes = tdelta.seconds // 60\n    \n    return minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"345634563456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n\n    # Repeat the full pattern for as many complete times as it fits in 50 digits\n    full_patterns = 50 // pattern_length\n    full_pattern_sum = full_patterns * pattern_sum\n\n    # Add the sum of the remaining digits of the pattern\n    remaining_digits = 50 % pattern_length\n    remaining_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = full_pattern_sum + remaining_pattern_sum\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    return 3 * (5/3) * (7/5) * (9/7) * (13/9) * (15/13)\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    # Calculate the number of sweets that 3/5 of the students received\n    sweets_three_fifths = (3/5) * total_sweets\n    # Calculate the number of students in the 3/5 group\n    students_three_fifths = sweets_three_fifths / 6\n    \n    # Calculate the remaining sweets after 3/5 of students received theirs\n    remaining_sweets = total_sweets - sweets_three_fifths\n    # Calculate the number of sweets that 1/4 of the remaining students received\n    sweets_one_fourth_remaining = (1/4) * remaining_sweets\n    # Calculate the number of students in the 1/4 remaining group\n    students_one_fourth_remaining = sweets_one_fourth_remaining / 4\n    \n    # Calculate the remainder sweets after 1/4 of the remaining students received theirs\n    remaining_sweets_after_one_fourth = remaining_sweets - sweets_one_fourth_remaining\n    # Calculate the number of students that received 5 sweets each\n    students_remaining_five_sweets = remaining_sweets_after_one_fourth / 5\n    \n    # Sum up all the students\n    total_students = students_three_fifths + students_one_fourth_remaining + students_remaining_five_sweets\n    return int(total_students)\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    \n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + (30/100)\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    ans = 0\n    for num in range(1, 1000, 2):  # Searching for odd numbers\n        found = False\n        for i in range(2, num-4, 2):  # Looping through even numbers and using the property that even + odd = odd\n            if is_composite(i):\n                for j in range(2, num-i-2, 2):\n                    if is_composite(j) and is_composite(num-i-j):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            ans = num\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    days_in_tablet_1 = 25\n    days_in_tablet_2 = 20\n\n    least_common_multiple = lcm(days_in_tablet_1, days_in_tablet_2)\n\n    return least_common_multiple\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert the mixed numbers into improper fractions\n    # To convert a mixed number to an improper fraction:\n    # (whole number * denominator) + numerator\n    \n    first_number = (3 * 4) + 1  # 3 and 1/4\n    second_number = (1 * 4) + 3 # 1 and 3/4\n\n    # Convert into the same denominators\n    first_improper = first_number / 4\n    second_improper = second_number / 4\n\n    # Calculate the difference and return as a decimal\n    difference = first_improper - second_improper\n    return difference\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    import math\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    product_set = set()\n\n    # Iterate through all combinations of the numbers for Candy (2 cards)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product1 = numbers[i] * numbers[j]\n\n            # Iterate through all combinations for Candice (3 cards)\n            for k in range(len(numbers)):\n                for l in range(k + 1, len(numbers)):\n                    for m in range(l + 1, len(numbers)):\n                        # Avoid using the same numbers Candy used\n                        if k != i and k != j and l != i and l != j and m != i and m != j:\n                            product2 = numbers[k] * numbers[l] * numbers[m]\n\n                            # If products are equal, add them to the set\n                            if product1 == product2:\n                                product_set.add(numbers[i])\n                                product_set.add(numbers[j])\n                                product_set.add(numbers[k])\n                                product_set.add(numbers[l])\n                                product_set.add(numbers[m])\n\n    # Find the number that is not in the product set\n    for number in numbers:\n        if number not in product_set:\n            return number\n\n    return None\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    start = 3  \n    end = 99  \n    difference = 4\n    numbers = range(start, end + 1, difference)\n    return sum(numbers)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for side in range(1, 12//2):\n        for base in range(1, 12):\n            if side * 2 + base == 12 and side * 2 > base:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    elder, younger = symbols('elder younger')\n\n    # sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n    # a few years ago, the situation explained\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    strawberries_given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Find the greatest common divisor of the three class sizes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_but_failed_first = 3\n\n    # Using Inclusion-Exclusion Principle \n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_but_failed_first)\n    \n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Ways from A->D directly\n    A_D_direct = 6\n\n    # Ways from A->B->C->D\n    A_B_C_D = 7 * 5 * 2\n\n    # Ways from A->C->D\n    A_C_D = 4 * 2\n\n    # Total ways from A->D \n    total_ways = A_D_direct + A_B_C_D + A_C_D\n\n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, cheese = symbols('chocolate cheese')\n    total_cupcakes = 255\n    equation1 = Eq(chocolate + cheese, total_cupcakes)\n    equation2 = Eq(chocolate * 0.6, cheese * 0.25)\n\n    solutions = solve((equation1, equation2), (chocolate, cheese))\n\n    chocolate_left = solutions[chocolate] * 0.6\n    cheese_left = solutions[cheese] * 0.25\n    return chocolate_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    pencil_quantity = 3\n    pen_quantity = 2\n    \n    total_pencil_cost = pencil_cost * pencil_quantity\n    total_pen_cost = total_cost - total_pencil_cost\n    pen_cost = total_pen_cost / pen_quantity\n    \n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    hay_per_day_per_cattle = total_hay / (cattle * days)\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from math import sqrt\n\n    for youngest in range(1, int(sqrt(210)) + 1):\n        if 210 % youngest == 0:\n            middle_product = 210 // youngest\n            for middle in range(youngest, int(sqrt(middle_product)) + 1):\n                if middle_product % middle == 0:\n                    oldest = middle_product // middle\n                    if oldest < 10 and oldest > middle:\n                        return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b be the number of boys and g be the number of girls\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n\n    # Equation based on the problem statement\n    equation1 = Eq(b / 4, (2 * g) / 5)\n    \n    # Total students in class\n    equation2 = Eq(b + g, 39)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the difference between the number of boys and girls\n    difference = solutions[b] - solutions[g]\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_kilograms = 960\n    kilograms_per_box = 8\n    num_boxes = total_kilograms // kilograms_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_by_frost = total_seedlings * (3/8)\n    surviving_seedlings = total_seedlings - killed_by_frost\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    remaining_locusts = total_locusts % daily_consumption\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Total number of notes is 116\n    equation1 = Eq(x + y, 116)\n\n    # He spent 60% of the $10 notes and 25% of the $5 notes on a bag\n    # Therefore, he has 40% of the $10 notes and 75% of the $5 notes left\n    # After spending, he was left with 4/7 as many $10 notes as $5 notes.\n    equation2 = Eq(0.4 * x, 0.75 * y * (4/7))\n\n    # Solve the equations to find the number of $5 and $10 notes\n    solutions = solve((equation1, equation2), (x, y))\n    x_solution, y_solution = solutions[x], solutions[y]\n\n    # Calculate the amount spent on the bag\n    # 60% of the $10 notes value + 25% of the $5 notes value\n    amount_spent = (0.6 * x_solution * 10) + (0.25 * y_solution * 5)\n\n    return amount_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = (12 * 92) + (22 * 82) + (32 * 72)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Don and Ben originally had\n    don, ben = symbols('don ben')\n\n    # Create equations based on the problem statement\n    # Original ratio 2:3\n    equation1 = Eq(don / ben, 2 / 3)\n    # After buying and losing stickers, ratio becomes 6:7\n    equation2 = Eq((don + 10) / (ben - 5), 6 / 7)\n\n    # Solve the system of equations for don and ben\n    solutions = solve((equation1, equation2), (don, ben))\n\n    # Return the number of stickers Don had at first\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total_sum = 0\n    for num in range(2, 2017, 2):  # start from 2, up to 2016, step size 2\n        total_sum += num - (num - 1)\n    return total_sum\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    return remainder if remainder == 0 else 25 - remainder\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n\n    toys_to_give = (amy_toys - sally_toys) // 2\n\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # Initialize the maximum product variable\n    max_product = 0\n\n    # Iterate through all possible combinations of a, b, and c\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b  # Since a + b + c = 31\n            max_product = max(max_product, a * b * c)\n\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_squares = 2870\n    ans = 0\n    for num in range(1, 21):\n        ans += (2 * num - 1) * (2 * num + 1)\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    # Trees are planted at both ends, so we have one additional tree\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"21{i}{j}35\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n    # Using pigeonhole principle\n    min_students_in_week = (total_students + days_in_week - 1) // days_in_week\n    return min_students_in_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # There are only 7 possible ways the 55-day period could start,\n    # i.e., starting on each day of the week (Monday, Tuesday, ...)\n    \n    # Since we are specifically looking for Fridays, we will count from Friday\n    # If the period starts on a Friday, then every 7th day after would also be a Friday\n    # Thus, the number of Fridays would be the total number of days divided by 7, plus an extra Friday\n    # if there are remaining days after the whole weeks.\n    \n    total_days = 55\n    max_fridays = (total_days // 7) + (1 if total_days % 7 >= 1 else 0)\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    # Calculate the arrangements for the twins (not next to each other)\n    # Total arrangements without restriction: factorial(7)\n    # Arrangements where twins are next to each other: 2 * factorial(6)\n    total_arrangements = factorial(7)\n    twin_together_arrangements = 2 * factorial(6)\n    \n    # Calculate the arrangements for the triplets (want to be together)\n    # Consider the triplets as one entity, so we have 5 entities to arrange: factorial(5)\n    # Within that entity, the triplets can arrange themselves in factorial(3) ways\n    triplets_as_one_arrangement = factorial(5)\n    triplet_permutations = factorial(3)\n    \n    # Calculate the final result\n    # Subtract the arrangements where twins are together from total arrangements\n    # Then multiply by the arrangements of triplets keeping together\n    arrangement_twins_apart = total_arrangements - twin_together_arrangements\n    final_result = arrangement_twins_apart * triplets_as_one_arrangement * triplet_permutations\n    \n    return final_result\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wearing_glasses = 20\n    total_girls = 25\n    \n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    N = 5\n    while True:\n        if (N % 2 == 0 and N % 3 == 0 and N % 4 == 0 and\n            N % 5 == 0 and N % 6 == 0 and N % 8 == 0 and\n            N % 9 == 0):\n            return N\n        N += 7  # Since N gives remainder of 5 when divided by 7, we increment N by 7\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost / pencil_cost\n\n    return int(pencils_for_pen)\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Price per item\n    price_per_mug = 3.50 / 5\n    price_per_pen = 6.80 / 8\n    \n    # Total cost for mugs and pens\n    total_cost = (price_per_mug * 7) + (price_per_pen * 5)\n    \n    # Change from £10\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away_fraction = 1/5\n    pupils_away = total_pupils * pupils_away_fraction\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    minutes_per_child_per_song = 3\n    number_of_songs = 2\n    number_of_children = 50\n    \n    total_time = minutes_per_child_per_song * number_of_songs * number_of_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_1_apple = weight_of_3_apples / 3\n    weight_of_5_apples = 5 * weight_of_1_apple\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    num1 = 25 / 100\n    num2 = 0.3\n    ans = max(num1, num2)\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = (final_amount / principal - 1) / rate\n\n    return round(years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes of donuts, each containing 6 donuts\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    needed_loafs = 35\n    needed_cups = needed_loafs / loafs_per_cup\n    return needed_cups\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    ans = None\n    for i in range(lcm, lcm*10, lcm):  # Loop over multiples of the LCM that are under 100\n        if str(i).endswith('2'):  # Check if the multiple ends with a 2\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n    \n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    return days_in_a_week * num_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value_1 = 3 * 10**2 # the place value of the first 3 (hundreds)\n    place_value_2 = 3 * 10**5 # the place value of the second 3 (hundred-thousands)\n\n    difference = place_value_2 - place_value_1\n\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let 'j' represent the time John would take to build the wall on his own\n    # let 'c' represent the combined work rate for Jonah and Angus\n    j = symbols('j')\n    \n    # If John, Jonah and Angus can build the wall in 27 hours, their combined work rate is 1/27\n    # Jonah and Angus combined work rate is 1/36\n    # The equation for John's work rate then becomes: 1/j = 1/27 - 1/36\n    equation = Eq(1/j, 1/27 - 1/36)\n    \n    # Solve for 'j' which is the time John would take to build the wall on his own\n    solution = solve(equation, j)\n\n    return solution[0]\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "网络故障，请重试"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Start with the basic assumption that all amounts can be made\n    can_make = [False] * (4 * 5)  # Based on the chicken McNugget theorem: for two numbers a, b the largest number that cannot be obtained by any combination of a and b (excluding 0 of either) is a*b-a-b\n\n    # Iterate through combinations of how many times 4z and 5z can contribute to a total\n    # to find which totals can be made\n    for x in range(5):\n        for y in range(4):\n            can_make[x * 4 + y * 5] = True\n\n    # Find the first False occurrence in can_make to deduce the largest total that cannot be made\n    # as the list is indexed from 0 to n-1, and False indicates that the total cannot be made\n    ans = can_make.index(False)\n    \n    return ans\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    total_sum = 1001\n    num_count = 10\n\n    # Since the numbers are not necessarily distinct, we can find the gcd by\n    # finding the greatest divisor of 1001 that can divide the total sum such that\n    # the quotient is less than or equal to 10 (the max integer value),\n    # since we only have 10 numbers to add up to 1001.\n    # We want the maximum divisor, so we'll start from the largest possible\n    # and work our way down to the smallest (which is 1).\n\n    # The largest possible value for d would be if each of the 10 integers is 1001 // 10 = 100,\n    # But since they sum to 1001, one number must be 1001 % 100 = 1 greater, hence d divides 100.\n    d = total_sum // num_count\n    while total_sum % d != 0:\n        d -= 1\n    return d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be Claire's age 5 years ago and y be Daniel's age 5 years ago.\n    # According to the problem, we have: x + y = 14.\n    # Their combined age now is x + 5 + y + 5 = x + y + 10.\n    # We know x + y = 14 from 5 years ago, so their combined age now is 14 + 10.\n    combined_age_now = 14 + 10\n    \n    # To find the combined age in 3 years, we add 3 years to each of their current ages.\n    combined_age_in_3_years = combined_age_now + 3 + 3\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    import math\n    length1 = 45\n    length2 = 30\n    gcd_value = math.gcd(length1, length2)\n    return gcd_value\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = 152\n    boys, girls = symbols('boys girls')\n    \n    # If we remove 1/11 of the boys and 5 girls, the leftover number of boys and girls are equal.\n    equation = Eq(boys - boys / 11, girls - 5)\n    \n    # We also know that the total number of boys and girls is 152.\n    total_equation = Eq(boys + girls, total_students)\n    \n    # Solve the system of equations.\n    sol = solve((equation, total_equation), (boys, girls))\n    \n    return sol[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    # Number 1082ab needs to be divisible by 12,\n    # which means it needs to be divisible by both 3 and 4.\n    # For divisibility by 3, the sum of the digits needs to be divisible by 3.\n    # For divisibility by 4, the last two digits (ab) need to be divisible by 4.\n\n    count = 0\n    \n    # Calculate the sum of the first four digits: 1, 0, 8, 2\n    sum_of_first_four_digits = 1 + 0 + 8 + 2\n    \n    # Checking possible values of a and b\n    for a in range(10):  # Possible values of 'a' (0-9)\n        for b in range(10):  # Possible values of 'b' (0-9)\n            sum_of_digits = sum_of_first_four_digits + a + b  # Sum of all digits\n            last_two_digits = 10 * a + b  # In decimal form\n            \n            # Check divisibility by both 3 (sum_of_digits % 3 == 0)\n            # and 4 (last_two_digits % 4 == 0)\n            if sum_of_digits % 3 == 0 and last_two_digits % 4 == 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_laid_daily = 50\n    days_to_adulthood = 30\n    total_days = 40\n    new_adult_fleas = 0\n    \n    for day in range(1, total_days + 1):\n        if day > days_to_adulthood:\n            new_adult_fleas += eggs_laid_daily\n            \n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15 \n    japanese = 12 \n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n    \n    # Using the inclusion-exclusion principle to find the total number of people\n    total_people = (french + japanese + italian \n                    - french_japanese - french_italian - japanese_italian\n                    + all_three)\n    \n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    water_ratio = 3 / 4\n    water_litres = total_drink * water_ratio\n    return water_litres\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    total_students = (num_rows / 2) * (2 * first_term + (num_rows - 1) * difference)\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total = story_books + magazines\n    return total\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(f\"5{abcd}\")\n        N = int(f\"{abcd}5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert the mixed numbers to improper fractions\n    num1 = 21 * 286 + 21\n    den1 = 286\n    frac1 = Fraction(num1, den1)\n\n    num2 = 6 * 2530 + 647\n    den2 = 2530\n    frac2 = Fraction(num2, den2)\n\n    num3 = 1 * 2829 + 1370\n    den3 = 2829\n    frac3 = Fraction(num3, den3)\n\n    # Perform the operations\n    result = frac1 / frac2 * frac3\n\n    # Convert result to mixed number\n    mixed_number = (result.numerator // result.denominator, \n                    result.numerator % result.denominator, \n                    result.denominator)\n\n    return mixed_number\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    ans = 0.30 * 1600\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    cost_pencil = 0.38\n    cost_ruler = 0.59\n\n    money_left = total_money - (cost_pencil + cost_ruler)\n\n    return money_left\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    def distinct_partitions(n, p):\n        if n == 0:\n            return 1\n        if p == 0:\n            return 0\n        if (n, p) in memo:\n            return memo[(n, p)]\n        ways = distinct_partitions(n, p - 1)\n        if p <= n:\n            ways += distinct_partitions(n - p, p)\n        memo[(n, p)] = ways\n        return ways\n    \n    memo = {}\n    ans = distinct_partitions(140, 139)  # as 139 is the closest odd number to 140\n    return ans\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for i in range(10, 100):\n        if i % 9 == 5 and i % 11 == 2:\n            return i\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Since there are 20 keys and 20 classrooms and each key must be tried in each classroom,\n    # in the worst-case scenario, the warden will try each key on each door until he finds the right one.\n    # Therefore, for the first key, he might have to try 20 times (in case it's the last key he tries),\n    # For the second key, at most 19 times (since one classroom is already matched),\n    # and so on, until the last key which will match the last classroom directly.\n    \n    # This is a sum of an arithmetic series from 20 to 1\n    num_keys = 20\n    max_tries = sum(range(1, num_keys + 1))\n    \n    return max_tries\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the original cuboid\n    length, width, height = 6, 10, 12\n    \n    # Since the original cuboid is cut into 720 small cubes, we can find the size of each small cube\n    volume_small_cube = (length * width * height) / 720\n    side_small_cube = volume_small_cube ** (1/3)\n    \n    # The number of small cubes along each dimension\n    num_cubes_length = length // side_small_cube\n    num_cubes_width = width // side_small_cube\n    num_cubes_height = height // side_small_cube\n    \n    # Calculate the number of small cubes with exactly one face painted\n    # For each dimension, we'll have two faces painted (front/back, left/right, top/bottom)\n    # We subtract 2 along each dimension to not count the edges more than once\n    # Multiply by 2 for both faces of each dimension\n    cubes_one_face_painted = 2 * ((num_cubes_length - 2) * (num_cubes_width - 2) +\n                                  (num_cubes_length - 2) * (num_cubes_height - 2) +\n                                  (num_cubes_width - 2) * (num_cubes_height - 2))\n    \n    return int(cubes_one_face_painted)\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B\n    # Updated stone counts: A = 20, B = 16\n    \n    # To win, Jerry must take stones in a way that leaves both stacks with equal counts.\n    # Hence, he should take stones from Stack A to make the count of Stack A\n    # equal to the current count of Stack B.\n    # This makes it impossible for Tom to make a move without creating an imbalance,\n    # which Jerry can then capitalize on to win.\n    \n    stones_to_take = 20 - 16  # Number of stones to take to make A = B\n    \n    # Jerry must take 4 stones from Stack A.\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack A.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    third_sheet_pages = [5, 6, 51, 52] # Page numbers on the third sheet\n    total = sum(third_sheet_pages)\n    return total\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peach = 6\n    peach_to_apple = 3 / 2\n    watermelon_to_apple = watermelon_to_peach * peach_to_apple\n    return int(watermelon_to_apple)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    digits_used = 0\n\n    while digits_used < 933:\n        pages += 1\n        digits_used += digits_per_page\n        if pages >= 10 and pages < 100:\n            digits_per_page = 2\n        elif pages >= 100:\n            digits_per_page = 3\n\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice_cost = 30 * 5\n    total_orange_juice_cost = 50 * 3\n    total_peach_juice_cost = 20 * 10\n    \n    total_cost = total_apple_juice_cost + total_orange_juice_cost + total_peach_juice_cost\n    total_cups = 30 + 50 + 20\n    \n    average_cost_per_cup = total_cost / total_cups\n    \n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Define the number of each colored pen in box A\n    blue_a = 10\n    red_a = 15\n    black_a = 20\n    green_a = 25\n\n    # Define the number of each colored pen in box B\n    blue_b = 10\n    red_b = 15\n    black_b = 20\n    green_b = 25\n\n    # After taking 20 pens from box A (we don't know the distribution of colors)\n    # and placing them into box B, we need to ensure at least 15 pens of each\n    # color remain in box A.\n\n    # Since Box A must have at least 15 pens of each color and it initially had\n    # 10 blue, 15 red, 20 black, and 25 green. We need to return enough pens to\n    # make sure that blue has at least 15, because it's the only color that has\n    # less than 15 to begin with in Box A.\n\n    # We need to return 5 blue pens to box A to reach the minimum of 15.\n    pens_to_return = 5\n\n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = 9 * 60 + 15  # Convert 9:15 pm to minutes\n    end_time = 23 * 60 + 6    # Convert 11:06 pm to minutes\n\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    for boys in range(2, 100, 2):  # to keep symmetry, we increment boys by 2 for each layer\n        girls = boys - 1  # girls layer is always one less than boys layer\n        boys_count = boys ** 2 - (boys - 2) ** 2\n        girls_count = (girls ** 2) - (girls - 2) ** 2 if girls > 1 else 0\n        \n        if boys_count - girls_count == 32:\n            total_students = boys_count + girls_count\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n\n    # Minimum number of soft-centred milk chocolates\n    min_soft_milk = max(0, soft_centres - plain_chocolates)\n    # Maximum number of soft-centred plain chocolates\n    max_soft_plain = min(plain_chocolates, soft_centres)\n\n    # Total number of soft-centred plain chocolates\n    soft_plain = total_chocolates - milk_chocolates - min_soft_milk\n\n    return soft_plain\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dividend, divisor = symbols('dividend divisor')\n    \n    # The quotient is 29\n    quotient = 29\n    \n    # The remainder is 11\n    remainder = 11\n    \n    # Equation 1: Dividend = Divisor * Quotient + Remainder\n    equation1 = Eq(dividend, divisor * quotient + remainder)\n    \n    # Equation 2: Dividend + Divisor = 431\n    equation2 = Eq(dividend + divisor, 431)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (dividend, divisor))\n    \n    # Getting the difference between the dividend and divisor\n    difference = abs(solutions[dividend] - solutions[divisor])\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_of_violin_players = 12.5\n    number_of_violin_players = 11\n\n    total_pupils = (number_of_violin_players * 100) / percentage_of_violin_players\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Note: 'solution' function expects one argument (the number 'n' of chocolate bars)"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each coin type\n    x = symbols('x')\n    \n    # Create an equation based on the value of each coin times the number of coins\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Calculate the total number of coins\n    total_coins = solution[0] * 4  # Since we have 4 types of coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the unknowns: number of apples and pears\n    a, p = symbols('a p')\n    \n    # Given equations\n    equation1 = Eq(a + p, 105)  # Total fruits\n    equation2 = Eq(a - a/3, p - 2*p/5) * 6/5  # Relation between unsold apples and pears\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n    \n    # Extract the solutions for the number of apples and pears\n    apples, pears = solutions[a], solutions[p]\n    \n    # Calculate the number of apples and pears sold\n    apples_sold = apples / 3\n    pears_sold = 2 * pears / 5\n    \n    # Find the total number sold\n    total_sold = apples_sold + pears_sold\n    \n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of stickers be x and the number of pupils be y\n    x, y = symbols('x y')\n    \n    # If Mr. Ya gives 13 stickers to each pupil, he will have an excess of 190 stickers\n    equation1 = Eq(x, 13*y + 190)\n    \n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers\n    equation2 = Eq(x, 17*y + 50)\n    \n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Returning the number of stickers Mr. Ya has\n    return solutions[x]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Create equations based on the problem statement\n    ratio_equation = Eq(A/B, 4/5) & Eq(B/C, 5/6)  # A:B = 4:5 and B:C = 5:6\n    difference_equation = Eq(C - A, 10)  # C is greater than A by 10\n    \n    # Solve the system of equations\n    solutions = solve((ratio_equation, difference_equation), (A, B, C))\n    \n    # Calculate the sum of A, B, and C\n    sum_abc = sum(solutions.values())\n    \n    return sum_abc\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C, D as one unit and calculate permutations of 9 units\n    permutations_of_units = factorial(9)\n\n    # Permutation of A, B, C, D within themselves\n    permutations_within_unit = factorial(4)\n\n    # Total permutations is the product of the two values\n    total_permutations = permutations_of_units * permutations_within_unit\n\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played is the combination C(n, 2) for n = 6\n    total_games = 6 * (6 - 1) // 2\n    # Total points given out in all games (2 points per game)\n    total_points = total_games * 2\n    # Points known to have been achieved by five students\n    known_points = 7 + 6 + 5 + 4 + 3\n    # Points for the remaining student\n    remaining_points = total_points - known_points\n    \n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio equation: A / B = 5 / 3\n    original_ratio = Eq(A/B, 5/3)\n\n    # New ratio after transferring 10 grams from A to B: (A - 10) / (B + 10) = 7 / 5\n    new_ratio = Eq((A - 10)/(B + 10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (A, B))\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n\n    # The sum of an arithmetic sequence is given by: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n\n    # To find n, we rearrange the sum equation: n = sum * 2 / (first_term + last_line)\n    n = (total_players * 2) // (first_line + last_line)\n\n    # The difference between each term is given by: difference = (last_term - first_term) / (n - 1)\n    difference = (last_line - first_line) // (n - 1)\n\n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement:\n    # x ≡ 2 (mod 3)\n    # x ≡ 2 (mod 5)\n    # x ≡ 2 (mod 7)\n    congruences = [(2, 3), (2, 5), (2, 7)]\n    result = solve_congruence(*congruences)\n\n    # Get the smallest number that satisfies the conditions \n    # and is between 100 and 200\n    num = result[0]\n    while num < 100:\n        num += result[1]\n    return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    zeros_count = 0\n    \n    # Count the number of trailing zeros by dividing by 10 until the remainder is non-zero\n    while product % 10 == 0:\n        zeros_count += 1\n        product //= 10\n    \n    return zeros_count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # masses in grams\n    largest_mass = max(masses)\n\n    return largest_mass\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of different types of candies.\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n\n    # Create the equations based on the problem statement.\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    ratio_girls = 6\n    ratio_total = 11\n\n    boys = total_children * (ratio_total - ratio_girls) / ratio_total\n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    # Let the number of stickers Mr. Ya has be s, and the number of pupils be p.\n    # According to the problem:\n    # s = 13p + 190\n    # s = 17p + 50\n    # By equating the two expressions for s, we get:\n    # 13p + 190 = 17p + 50\n    # Solving for p gives us:\n    p = (190 - 50) // (17 - 13)\n    # Then we can find the total number of stickers s:\n    s = 13 * p + 190\n    return s\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    min_diff = float('inf')\n    from itertools import permutations\n    for perm in permutations('123456789'):\n        num1 = int(''.join(perm))\n        for perm2 in permutations('123456789'):\n            num2 = int(''.join(perm2))\n            if num1 != num2:\n                diff = abs(num1 - num2)\n                if diff < min_diff:\n                    min_diff = diff\n                    if min_diff == 1:  # Early break, since 1 is the smallest possible difference\n                        return min_diff\n    return min_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial difference in boys and girls\n    equation1 = Eq(boys, girls - 65)\n    \n    # Equation representing the remaining boys and girls after some left for recess\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    boys_left = solutions[boys] - 2/5 * solutions[boys]\n    girls_left = solutions[girls] - 3/7 * solutions[girls]\n    \n    # Sum of the remaining boys and girls\n    total_left = boys_left + girls_left\n    \n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    unmoved_bricks = 25\n    third_trip_bricks = 68\n\n    # Half the remaining number of bricks after first trip\n    second_trip_half_remaining = third_trip_bricks + unmoved_bricks - 11\n\n    # The remaining number of bricks after first trip\n    remaining_after_first_trip = 2 * second_trip_half_remaining\n\n    # The half number of bricks moved on the first trip\n    first_trip_half_bricks = remaining_after_first_trip + 26\n\n    # Original total number of bricks\n    total_bricks = 2 * first_trip_half_bricks + remaining_after_first_trip\n\n    return total_bricks\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # There are 2 instances of theft in the past 1000 days\n    theft_occurrences = 2\n\n    # Dog barks 3 times weekly, which is about 3/7 times each day\n    # Calculate barking occurrences in 1000 days\n    bark_per_day = Rational(3, 7)\n    barking_occurrences = bark_per_day * 1000\n\n    # Probability of the dog barking when a thief is around is 0.9\n    prob_bark_given_theft = Rational(9, 10)\n\n    # Using Bayes' Theorem: P(A|B) = P(B|A) * P(A) / P(B)\n    # A: Theft occurs\n    # B: Dog barks\n    # We want to find P(A|B), the probability the theft occurs given the dog barks\n    # P(B|A) = Probability of dog barking given that a theft occurs = 0.9 (given)\n    # P(A) = Probability of a theft occurring on a particular day = theft_occurrences/1000\n    # P(B) = Probability of dog barking on a particular day = barking_occurrences/1000\n    \n    prob_theft = Rational(theft_occurrences, 1000)\n    prob_barking = Rational(barking_occurrences, 1000)\n\n    prob_theft_given_bark = (prob_bark_given_theft * prob_theft) / prob_barking\n\n    return prob_theft_given_bark\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9, 2412 % 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    # The number of different ways to arrange num_kids elements is num_kids factorial\n    num_ways = factorial(num_kids)\n    \n    return num_ways\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # We are looking for a square number such that Mike's position can be\n    # the 2nd in line from any side of the square.\n    # This means that Mike must be sitting at coordinates (1,1) if we count \n    # starting from 0. This is similar to finding a square with side length n,\n    # where n > 2 (since Mike cannot be second in a square of size 2x2 or less).\n\n    # Start checking from 3x3 square (n = 3) which is the smallest possible square\n    # where Mike can be the 2nd in line.\n    n = 3 \n    while True:\n        total_students = n * n\n        # Check if Mike's position is 2nd in line\n        # Since he can be 2nd in line only if (n - 1) is evenly divisible by (n - 2)\n        # which means that Mike's seat will leave exactly one seat at the ends.\n        if (n - 1) % (n - 2) == 0:\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let's denote Geoff's current age as G and his sister's current age as S.\n    # According to the problem, we have G + S = 22.\n    # Let's denote the number of years it will take for the sum of their ages to be 40 as n.\n    # Each year, Geoff and his sister each get one year older, so after n years, we have:\n    # (G + n) + (S + n) = 40\n    # Simplifying the equation, we get: G + S + 2n = 40\n    # Now we substitute the value of G + S from the first equation into the second, we get:\n    # 22 + 2n = 40\n    # Solving for n: 2n = 40 - 22\n    # n = (40 - 22) / 2\n    # n = 18 / 2\n    # n = 9\n    \n    # So, it will take 9 years for the sum of their ages to be 40.\n    n = (40 - 22) // 2\n    \n    return n\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    passengers = symbols('passengers')\n    first_stop = passengers * (2/5)\n    remaining_after_first = passengers - first_stop\n    second_stop = remaining_after_first / 3\n    remaining_after_second = remaining_after_first - second_stop\n\n    equation = Eq(remaining_after_second, 22)\n\n    initial_passengers = solve(equation, passengers)\n\n    return initial_passengers[0]\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):  # since it has 20 pages\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    boys_more_than_girls = 90\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_swim_less = 120\n\n    # Calculate the total number of girls and boys\n    total_girls = (total_pupils - boys_more_than_girls) // 2\n    total_boys = total_girls + boys_more_than_girls\n    \n    # Calculate the number of girls who can swim and who cannot\n    total_girls_swim = (total_girls * girls_swim_ratio) // (girls_swim_ratio + girls_not_swim_ratio)\n    total_girls_not_swim = total_girls - total_girls_swim\n    \n    # Calculate the number of boys who can swim and who cannot\n    total_boys_not_swim = (total_boys + boys_swim_less) // 2\n    total_boys_swim = total_boys_not_swim - boys_swim_less\n    \n    # Calculate the total number of pupils who cannot swim\n    total_cannot_swim = total_girls_not_swim + total_boys_not_swim\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n < 5:\n            return (\n                count_ways(n - 2) + count_ways(n - 3)\n            )  # For n < 5, the only way to get to step n is from step n-2 or step n-3\n        else:\n            return (\n                count_ways(n - 2) + count_ways(n - 3)\n            ) * 2  # For n >= 5, we can reach step n in two different orders, from n-2 to n or n-3 to n-1 to n\n\n    ans = count_ways(10)\n    return ans\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Let's denote the original 4-digit number as 'abcd' (where each letter represents a digit)\n    # When we swap the ones place 'd' with the first digit 'a', the new number becomes 'dbcd'\n    # According to the problem, the new number is greater than the original number by 5877\n    # Mathematical representation: 1000d + 100b + 10c + d - (1000a + 100b + 10c + d) = 5877\n    # Simplifying the equation: 999d - 999a = 5877\n    # Divide both sides by 999: d - a = 5877 / 999 \n\n    # Find the difference 'd - a' which must be less than 10 as they are single digits\n    difference = 5877 // 999  # Using floor division because we are dealing with digits\n\n    # Knowing the difference and the condition (new number > original number),\n    # we need to find 'a' and 'd' such that 'd - a = difference' and d > a\n    for a in range(10):\n        d = a + difference\n        if d < 10:  # Ensure 'd' is still a single digit\n            # Reconstruct the original number 'abcd' using the found digits 'a' and 'd'\n            abcd = a * 1000 + d\n            return abcd\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    divisor = 1\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    total_stamps = 410\n\n    # Triston has 5 times as many stamps as Bentley.\n    equation1 = Eq(triston, 5 * bentley)\n\n    # Bentley has 25 fewer stamps than David.\n    equation2 = Eq(bentley, david - 25)\n\n    # The total amount of stamps\n    equation3 = Eq(david + bentley + triston, total_stamps)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = \"1998\"\n    n = len(num)\n    while int(num * (n // len(num))) % 33 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first = group_number\n    second = group_number ** 2\n    third = group_number ** 3\n    \n    sum_of_group = first + second + third\n    \n    return sum_of_group\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    number_of_runs = total_miles / per_run_miles \n    return int(number_of_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    num = 3 * 10**6 + 30 * 10**3 + 30\n    return num\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return girls\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(candice, 5 * elly)\n    equation2 = Eq(elly, doris + 6)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion: 10 / x = 14 / 21\n    # Cross multiply to solve for x\n    x = 10 * 21 / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and num % 9 == 0 and num % 10 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n    correct_answer = original_number + tens_more\n    johnnys_answer = 5839\n    return correct_answer if johnnys_answer != correct_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    return 27\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3 meters to centimeters\n    lengths_cm = [147, 32.5, 67]\n    fourth_length_cm = total_length_cm - sum(lengths_cm)\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = {'A': 0.5, 'B': 0.4, 'C': 0.2}\n    outcomes = list(product([1, 0], repeat=3)) # Generate all pass-fail possibilities for A, B, C\n    likelihood = {0: 0, 1: 0, 2: 0, 3: 0} # Dictionary to count number of passes\n    \n    for outcome in outcomes:\n        num_passed = sum(outcome) # Count how many passed\n        prob = 1\n        for i, person in enumerate('ABC'):\n            if outcome[i] == 1:\n                prob *= probabilities[person] # Probability of passing\n            else:\n                prob *= 1 - probabilities[person] # Probability of not passing\n        likelihood[num_passed] += prob # Add the probability to the corresponding number of passes\n\n    most_likely_passes = max(likelihood, key=likelihood.get) # Find the number of passes with max probability\n\n    return most_likely_passes\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    \n    # Leaves would be inserted after every 3 pieces of paper\n    # This means a leaf comes after the 3rd, 6th, 9th paper and so on\n    # The number of leaves is equal to the number of intervals of 3 papers in 18 pieces\n    leaves = pieces_of_paper // interval\n\n    return leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Account for the initial '1' in the sequence\n    for i in range(2, 11):  # Loop from 2 to 10\n        ans += (1/i) * i  # Add i times the fraction 1/i to account for the terms like 1/2, 2/2, ..., 1/3, 2/3, 3/3, and so on\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    initial_ratio = Eq(8 * caps, 11 * watches)\n    final_ratio = Eq(12 * (caps - 88), 11 * watches)\n\n    solutions = solve((initial_ratio, final_ratio), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam spends 30 minutes riding from the first house to the sixth house,\n    # which means he covers 5 intervals in 30 minutes.\n    # Since the distance between each two adjacent houses is equal,\n    # the time to cover each interval is also equal.\n\n    # Calculate the time it takes to cover one interval (between two houses)\n    time_per_interval = 30 / 5  # time spent between 5 intervals (house 1 to house 6)\n\n    # To deliver to all ten houses, Sam must travel through 9 intervals\n    # (from the first house to the tenth house)\n    total_intervals = 9\n\n    # Total time to cover all intervals is the time per interval times the number of intervals\n    total_time = time_per_interval * total_intervals\n\n    return int(total_time)\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == D/4:\n                for B in range(1, 10):\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            ABCD = 1000*A + 100*B + 10*C + D\n                            DCBA = 1000*D + 100*C + 10*B + A\n                            if ABCD * 4 == DCBA and len({A, B, C, D}) == 4:\n                                return ABCD\n    return None\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05\n    longer_piece_m = (2/3) * total_length_m\n    longer_piece_cm = longer_piece_m * 100\n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # The total number of coins is 2015.\n    # Jack needs to make sure that after his first turn, the number of coins left\n    # is a multiple of 12 (1+11, as either of them should ensure he can win).\n    # Thus, he should pick such a number of coins that 2015 minus the number of coins picked\n    # leaves a multiple of 12.\n\n    for first_pick in range(1, 12):\n        # Check if after picking 'first_pick' number of coins, we are left with\n        # a multiple of 12. (As 2015 is not a multiple of 12, we are sure that at least\n        # one number in this range will satisfy the condition).\n        if (2015 - first_pick) % 12 == 0:\n            return first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, b (y-intercept) must be 0.\n    b = 0\n    \n    # Now we know the line passes through (0, b) and (4, 8)\n    # Slope (m) can be found by rise over run, which is change in y over change in x\n    x1, y1 = 0, b\n    x2, y2 = 4, 8\n\n    # Calculate slope\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since the y-intercept (b) is 0, the linear equation is y = mx\n    return f'y = {m}x'\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white_group = 2  # in each repetition ●○●○○ there are 2 white balls\n    total_group = white_group + 3  # total balls in each repetition\n    white_balls = 92  # given number of white balls\n\n    # Find the number of complete repetitions\n    complete_repetitions = white_balls // white_group\n\n    # Calculate the total number of balls after the complete repetitions\n    total_balls = complete_repetitions * total_group\n\n    # Check if there are extra white balls that don't complete a full repetition\n    extra_white_balls = white_balls % white_group\n    if extra_white_balls > 0:\n        total_balls += extra_white_balls + 1  # Adding the extra black ball before the extra white balls\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    num_str = str(2015)\n    count = sum(1 for digit in num_str if digit in ['0', '6', '9'])\n    count += sum(2 for digit in num_str if digit == '8')\n\n    return count\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    age_sum_youngest_three = 42\n    common_difference = 1  # Consecutive years = difference of 1\n\n    # Let the age of the youngest be x\n    # The next two ages will be x+1 and x+2\n    # Sum of the ages of the youngest three: x + (x+1) + (x+2) = 42\n    \n    x = (age_sum_youngest_three - 3) // 3  # Deducting 3 for the added 1 and 2, then divide by 3\n\n    # The age of the oldest: x + 6 (since there are 7 dwarfs in consecutive years)\n    age_oldest = x + 6\n    \n    return age_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    import math\n    ans = math.gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    initial_length_cm = 10  # initial length in cm\n    reduced_length_mm = 4  # reduced length in mm\n    reduced_length_cm = reduced_length_mm / 10  # convert mm to cm\n\n    new_length = initial_length_cm - reduced_length_cm\n    return new_length\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    sam, peter, john = symbols('sam peter john')\n    \n    # Create equations based on the problem\n    john_initial = john / (1 + 0.8)  # John's stickers increased by 80%\n    equation1 = Eq(sam - 0.2 * sam, john + 20)  # Sam gave 20% and has 20 more than John\n    equation2 = Eq(peter - 0.2 * peter, john_initial)  # Peter gave 20% to John\n    equation3 = Eq(sam, peter * (7/5))  # Sam and Peter had stickers in the ratio 7:5\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    # Peter's stickers at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Calculate the time spent on each part of the race\n    time1 = 420 / 7  # time = distance / speed\n    time2 = 620 / 5\n    distance3 = 1200 - 420 - 620  # total distance - the sum of the first two parts\n    time3 = distance3 / 8\n\n    # Total time spent on the race is the sum of time spent on each part\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 89 * 4\n    target_average = 95\n    additional_tests = 0\n    \n    while True:\n        additional_tests += 1\n        new_total_score = current_total_score + 100 * additional_tests\n        new_average = new_total_score / (4 + additional_tests)\n        if new_average >= target_average:\n            break\n            \n    return additional_tests\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n\n    total_length = days * meters_per_day\n\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    return 4  # 1 for each color plus 1 guarantees at least a pair of the same color\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_notes = 58\n    total_value = 164\n\n    # Let x be the number of $5 notes, then (58 - x) is the number of $2 notes\n    # So, 5 * x + 2 * (58 - x) = 164\n    # Solving for x gives us the number of $5 notes\n\n    for x in range(total_notes + 1):\n        if 5 * x + 2 * (total_notes - x) == total_value:\n            return x\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    first_term = 105 - (7 - 1) * 15\n    nth_term = (100 - 1) * 15 + first_term\n\n    return nth_term\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Total number of notes\n    equation1 = Eq(x + y, 72)\n\n    # Spent 90% of $10 notes and 75% of $2 notes\n    # Remaining are 10% of $10 notes and 25% of $2 notes\n    # After spending, twice as many $10 notes as $2 notes\n    equation2 = Eq(0.10 * x, 2 * 0.25 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate how much was spent\n    spent_10_notes = 0.90 * solutions[x] * 10\n    spent_2_notes = 0.75 * solutions[y] * 2\n    total_spent = spent_10_notes + spent_2_notes\n\n    return total_spent\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the filling rate of pool using hose A per hour\n    # Let y be the filling rate of pool using hose B per hour\n    # Let z be the filling rate of pool using hose C per hour\n    x, y, z = symbols('x y z')\n\n    # Equation 1: A and B together fill the pool in 9 hours\n    equation1 = Eq(x + y, 1/9)\n    \n    # Equation 2: A and C together fill the pool in 12 hours\n    equation2 = Eq(x + z, 1/12)\n    \n    # Equation 3: B and C together fill the pool in 18 hours\n    equation3 = Eq(y + z, 1/18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate the combined filling rate of all hoses\n    combined_rate = solutions[x] + solutions[y] + solutions[z]\n\n    # The time taken to fill the pool with all hoses is the inverse of this rate\n    combined_time = 1 / combined_rate\n\n    return combined_time\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    min_pigeons_in_max_cage = (total_pigeons // total_cages) + (1 if total_pigeons % total_cages != 0 else 0)\n\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Total amount spent on cupcakes and muffins\n    total_cupcakes_muffins = 36 + 32\n    \n    # Given that Cellina spent 5/9 of her money on cupcakes and muffins\n    # And that she spent 1/6 of her money to buy more cupcakes\n    # So the total fraction of her money spent is 5/9 + 1/6\n    total_fraction_spent = (5/9) + (1/6)\n    \n    # Find common denominator and sum fractions\n    total_fraction_spent = (5*6 + 1*9) / (9*6)\n    \n    # Simplify fractions\n    total_fraction_spent = total_fraction_spent.simplify()\n    \n    # Calculate the total money she had initially before spending\n    total_money = (187.50 * 9) / total_fraction_spent.numerator\n    \n    # Calculate the amount spent on the initial 36 cupcakes: 5/9 of the total money\n    initial_cupcakes_cost = (5/9) * total_money\n    \n    # Since the price of one cupcake is thrice the price of one muffin\n    # Let the price of one muffin be x, then the price of one cupcake is 3x\n    # We know she bought 36 cupcakes and 32 muffins\n    # Therefore, 36 cupcakes price + 32 muffins price = 5/9 of her money\n    # 36*(3x) + 32*x = initial_cupcakes_cost\n    # Solve for x\n    muffin_price = symbols('x')\n    eq = Eq(36*3*muffin_price + 32*muffin_price, initial_cupcakes_cost)\n    muffin_price_solution = solve(eq, muffin_price)\n    \n    # Calculate the money spent on muffins\n    money_spent_on_muffins = 32 * muffin_price_solution[0]\n\n    return money_spent_on_muffins.evalf()\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start by assigning the smallest even numbers to the boxes while keeping two boxes the same.\n    # Since we need at least 2 marbles per box, and boxes need different numbers with two boxes having the same number\n    # of marbles, we'll start from 2 and allocate the marbles to the boxes.\n    # 2 boxes will have 2*2 marbles, and the other 8 boxes will have 2, 4, ..., 16 marbles.\n    \n    marbles = [2 * i for i in range(1, 9)] + [4]  # 2, 4 (twice), 6, 8, 10, 12, 14, 16\n    return sum(marbles)\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Since there are 1007 parterres in a straight line,\n    # and a sprinkler must be installed in the middle of each two parterres,\n    # there are 1007 - 1 gaps between parterres that need a sprinkler.\n    # Therefore, the minimum number of sprinklers needed is 1006.\n    return 1007 - 1\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Given papaya's mass\n    papaya_mass = 2 + 1/4  # in kg\n\n    # Jackfruit is 3 times the mass of papaya\n    jackfruit_mass = 3 * papaya_mass\n    \n    # Calculate the total mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    # James's workings\n    james_workings_correct = False\n    \n    # James's workings error: 2 1/4 * 4 = 9, not 3\n    if james_workings_correct:\n        return total_mass\n    else:\n        # Error in James's calculation and the correct total mass\n        return (james_workings_correct, total_mass)\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    # function to check if a number is palindromic\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    # start with 1991 steps and increment until another palindrome is found\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            # number of additional steps taken to find next palindrome\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7 / 5) * alexis)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_final = marry - 0.2 * marry\n    alexis_final = alexis - 0.2 * alexis\n    charlotte_final = charlotte + 0.2 * marriage + 0.2 * alexis\n\n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, 1.8 * charlotte)\n    \n    # Mary had 20 stickers more than Charlotte in the end.\n    equation3 = Eq(marry_final, charlotte_final + 20)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    # First day paved 8k feet\n    first_day = 8\n\n    # Second day paved (total_length/6) + 4k feet\n    second_day = (total_length / 6) + 4\n\n    # First two days paved 5/12 of the total road\n    equation = Eq((first_day + second_day), total_length * (5/12))\n\n    solutions = solve(equation, total_length)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 4, 5]\n    perm = permutations(digits)\n    \n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5 / 9\n    given_away = 440\n    initial_collection = given_away / (1 - remaining_fraction)\n    \n    return int(initial_collection)\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    i = 1\n    while True:\n        number = 35 * i\n        if str(number).endswith('35') and sum(int(digit) for digit in str(number)) == 35:\n            break\n        i += 1\n    return number\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    for rainy_days in range(9):\n        sunny_days = 8 - rainy_days\n        total_nuts = sunny_days * 20 + rainy_days * 12\n        if total_nuts == 112:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pounds\n    price_single = 0.15\n    price_double = 0.28\n    price_pack = 0.60\n\n    # Total bottles needed\n    bottles_needed = 17\n\n    # Find the smallest amount to spend by initially setting the value to a high number\n    min_amount = float('inf')\n\n    # Try all possible combinations of buying packs, doubles, and singles\n    for packs in range(bottles_needed // 5 + 1):  # Number of 5 packs\n        for doubles in range(bottles_needed // 2 + 1):  # Number of 2 packs\n            singles = bottles_needed - (5 * packs + 2 * doubles)\n            if singles >= 0:\n                amount = (price_pack * packs) + (price_double * doubles) + (price_single * singles)\n                min_amount = min(min_amount, amount)\n\n    return round(min_amount, 2)\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # Therefore, with 4 people, the number of games needed is one less\n    # than the number of players because the last game determines the winner.\n    num_players = 4\n    num_rounds = num_players - 1  # In a knockout, every round eliminates one player\n\n    return num_rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    # Only kids who answered the first question correctly\n    only_first = 10 - 7\n\n    # Only kids who answered the second question correctly\n    only_second = 15 - 7\n\n    # Total kids who can only answer one question correctly\n    total_one_correct = only_first + only_second\n\n    return total_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed_m_per_s = 42  # speed of the train in meters per second\n    time_s = 5  # time in seconds it takes to pass the tree\n\n    # Distance = Speed * Time\n    length_of_train = speed_m_per_s * time_s\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    f1 = 1\n    f2 = 1\n    while True:\n        f_new = f1 + f2\n        if f_new > 21:\n            break\n        f1 = f2\n        f2 = f_new\n    return f_new\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Defining the original expression and potential bracket insertions\n    expression = \"285+15/5-2\"\n    bracket_options = [\n        \"({}+15)/5-2\",\n        \"({}+15/5)-2\",\n        \"285+({}/5)-2\",\n        \"285+({}/5-2)\",\n        \"285+(15/{})-2\",\n        \"285+(15/{}-2)\",\n        \"285+15/({}-2)\",\n        \"(285+15)/({}-2)\",\n        \"(285+15/5)-{}\",\n        \"(285+15)/5-{}\",\n        \"285+(15/5)-{}\"\n    ]\n\n    # Calculate the result for each bracket option\n    results = set()\n    for option in bracket_options:\n        # Replace placeholder in the bracket option with the original expression\n        new_expr = option.format(expression)\n        # Evaluate the modified expression and add the result to the results set\n        results.add(eval(new_expr))\n\n    # The number of unique results\n    ans = len(results)\n    return ans\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of mushrooms gathered in the first hour\n    # Therefore, the number of mushrooms gathered in the second hour will be 40 - x\n    \n    x = symbols('x')\n    equation = Eq(x + 26, 40 - x)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # The number of mushrooms gathered in the second hour will be 40 - x\n    mushrooms_second_hour = 40 - solution[0]\n    \n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n    for num_brushes in range((total_spent // brush_price) + 1):\n        if (total_spent - num_brushes * brush_price) % towel_price == 0:\n            if brush_price * num_brushes < 10:\n                return num_brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    # Let the number of teddy bears made on the first day be x\n    # Then the number of teddy bears made on the 2nd day is x+2, on the 3rd day is x+4, and so on\n    # The total number of teddy bears made over the 5 days is\n    # x + (x+2) + (x+4) + (x+6) + (x+8) = 35\n    # This simplifies to 5x + 20 = 35, hence we find the value of x\n    \n    x = (total_bears - 20) / days  # Solving the simplified arithmetic sequence sum for x\n    \n    # The number of teddy bears made on the fifth day is x + 8\n    bears_on_fifth_day = x + 8\n    \n    return int(bears_on_fifth_day)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    field_length = 144\n    field_width = 204\n    total_wheat = 116\n\n    # Since a wheat is planted at each corner, we must subtract 4 from the total count\n    # to consider the sides without the corners.\n    wheat_on_sides = total_wheat - 4\n\n    # Wheat will be split between the length and the width.\n    # If we name the number of wheat along the length as `x` and along the width as `y`,\n    # then we must remember that each distinct side shares the wheat with an opposite one.\n    # Hence, we have `2x + 2y = wheat_on_sides`.\n    # But as there's a wheat on each corner, shared between sides, we need to discount those and hence -4.\n    # 2x + 2y - 4 = wheat_on_sides\n    # 2(x + y - 2) = wheat_on_sides\n    # x + y - 2 = wheat_on_sides // 2\n    # x + y = wheat_on_sides // 2 + 2\n    # \n    # Now, x * distance between each wheat along the length = field_length;\n    # and y * distance between each wheat along the width = field_width.\n    # Hence, distance along the length = field_length / (x - 1);\n    # and distance along the width = field_width / (y - 1).\n    # Since it mentions that the distance between 2 wheat is the same, these 2 distances must be the same.\n    # So, field_length / (x - 1) = field_width / (y - 1)\n    #\n    # From the earlier formula (x + y = wheat_on_sides // 2 + 2),\n    # we substitute `x` with `y` from formula and then `y` with `x` from formula.\n    # Hence, we get the following equations:\n    # field_length / (y - 3) = field_width / (y - 1)\n    # field_length / ((wheat_on_sides // 2 + 2) - y - 1) = field_width / (y - 1)\n\n    for y in range(2, wheat_on_sides // 2 + 2):\n        if field_length * (y - 1) == field_width * ((wheat_on_sides // 2 + 2) - y - 1):\n            x = (wheat_on_sides // 2 + 2) - y\n            break\n\n    distance = field_length / (x - 1)\n\n    return distance\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 8, 71)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction('0.49').limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rick, morty = symbols('rick morty')\n    \n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n    \n    solutions = solve((equation1, equation2), (rick, morty))\n    \n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    digits = [0, 1, 8]  # available digits\n    count = 0\n    \n    # the first digit (hundreds place) cannot be 0\n    for first in digits[1:]:  # choose a non-zero digit for hundreds place\n        for second in digits:  # choose a digit for tens place\n            if second != first:  # it must be different from hundreds place\n                for third in digits:  # choose a digit for units place\n                    if third != first and third != second:  # it must be different from the other two places\n                        count += 1  # this is a valid three-digit number\n                        \n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # We want to ensure we draw at least one blue marble\n    # For the worst case scenario, we have to consider drawing all non-blue marbles first\n    # Therefore, we have to draw all pink and grey marbles + 1 blue marble\n    return pink + grey + 1\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    sales_tax = 30\n    price = sales_tax / tax_rate\n    return price\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "def solution():\n    from itertools import permutations\n    from math import gcd\n\n    def is_coprime_adjacent(perm):\n        return all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1))\n\n    count = sum(1 for perm in permutations(range(1, 9)) if is_coprime_adjacent(perm))\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the problem statement: boys = girls - 30\n    equation1 = Eq(boys, girls - 30)\n\n    # Equation after 3/5 of the boys and 5/8 of the girls left, the remaining boys and girls are equal\n    # Remaining boys: boys - (3/5)*boys\n    # Remaining girls: girls - (5/8)*girls\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n\n    equation1 = Eq(frogs_before, dragonflies_before + 9)\n    equation2 = Eq(frogs_before - dragonflies_before, 1) # One frog is turned into one dragonfly.\n\n    solutions = solve((equation1, equation2, frogs_before + dragonflies_before - 21), (frogs_before, dragonflies_before))\n\n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - (9 + 19 + 29 + 39 + 49 + 59)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    s = (amy_apples - john_apples) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(1, 25):\n        if (24 - i) / 4 == 4:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Rates at which workers can finish the job individually\n    # Let's consider the entire job as '1' unit of work\n    # a, b, c are the fractions of the job done by workers A, B, and C in one hour respectively\n    \n    # A and B together finish the job in 3 hours\n    a_plus_b = 1 / 3\n    # B and C together finish the job in 4 hours\n    b_plus_c = 1 / 4\n    # A and C together finish the job in 8 hours\n    a_plus_c = 1 / 8\n    \n    # Summing the rates of A+B, B+C, and A+C gives us twice the sum of the individual rates of A, B, and C\n    total_rate = (a_plus_b + b_plus_c + a_plus_c)\n    \n    # The individual sum of rates of A, B, and C is half of the total rate\n    a_b_c = total_rate / 2\n    \n    # The time taken by A, B, and C to complete the job together is the reciprocal of their combined rate\n    time_taken = 1 / a_b_c\n    \n    return time_taken\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expr = \"285+15/5-2\"\n    results = set()\n    \n    # With one pair of brackets\n    results.add(eval(f\"({expr[:3]}){expr[3:]}\"))  # (285)+15/5-2\n    results.add(eval(f\"{expr[:3]}+({expr[4:6]}){expr[6:]}\"))  # 285+(15/5)-2\n    results.add(eval(f\"{expr[:3]}+{expr[4:6]}/({expr[7:]})\"))  # 285+15/(5-2)\n    results.add(eval(f\"{expr[:3]}+({expr[4:7]}){expr[7:]}\"))  # 285+(15/5-2)\n    results.add(eval(f\"{expr[:7]}-({expr[8:]})\"))  # 285+15/5-(2)\n    \n    # With two pairs of brackets\n    results.add(eval(f\"({expr[:3]})+({expr[4:6]}){expr[6:]}\"))  # (285)+(15/5)-2\n    results.add(eval(f\"({expr[:3]})+{expr[4:6]}/({expr[7:]})\"))  # (285)+15/(5-2)\n    results.add(eval(f\"({expr[:3]})+({expr[4:7]}){expr[7:]}\"))  # (285)+(15/5-2)\n    results.add(eval(f\"{expr[:3]}+({expr[4:6]})-({expr[8:]})\"))  # 285+(15/5)-(2)\n    \n    return len(results)\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the kilograms of 15% sugar water needed\n    x = symbols('x')\n\n    # Set up the equation\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve the equation\n    sugar_water_needed = solve(equation, x)\n\n    return sugar_water_needed[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    total_coins = Eq(johnson + vicky, 48)\n    coins_after_giving = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((total_coins, coins_after_giving), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies, and y be the number of kids\n    x, y = symbols('x y')\n\n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(x, y * 18 + 12)\n\n    # If every kid eats 15 candies, there are enough candies for 2 more kids\n    equation2 = Eq(x, (y + 2) * 15)\n\n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    s = sum(int(\"2\" * i) for i in range(1, 2018))\n    last_5_digits = s % 100000\n    return last_5_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    return (77 // 7) - 6\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    \n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n    \n    solutions = solve((equation1, equation2), (david, eugene))\n    \n    total_cupcakes = solutions[david] + solutions[eugene]\n    \n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    total_cookies = 1170\n    sam_ate = sam / 4\n    tim_bought = tim / 5\n\n    equation1 = Eq(sam + tim, total_cookies)\n    equation2 = Eq(sam - sam_ate + (tim + tim_bought), tim + tim_bought - 663)\n\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    sam_cookies = solutions[sam]\n\n    return sam_ate.subs(sam, sam_cookies)\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    kg_per_6_days = 24\n    kg_per_day = kg_per_6_days / 6\n    kg_per_8_days = kg_per_day * 8\n\n    return kg_per_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    # Iterate through numbers between 200 and 300 to find the number that satisfies the conditions.\n    for num in range(200, 301):\n        if all(num % i == 1 for i in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    sally_stamps = 40\n    ting_stamps = 32\n    sally_final_stamps = sally_stamps - x\n    ting_final_stamps = ting_stamps + x\n    # The final ratio of Sally's stamps to Ting's stamps is 1:2\n    # Therefore, Sally's stamps are half the number of Ting's stamps after the exchange\n    # sally_final_stamps / ting_final_stamps = 1 / 2\n    # Solving for x in the equation 1/2 = (40 - x) / (32 + x)\n    # Multiply both sides by 2*(32 + x) to get rid of the fraction\n    # 2*(40 - x) = 1*(32 + x)\n    # Expand and rearrange to solve for x\n    # 80 - 2x = 32 + x\n    # 3x = 80 - 32\n    # 3x = 48\n    x = 48 / 3\n    # Calculate the final number of stamps for Ting\n    ting_final_stamps = ting_stamps + x\n\n    return ting_final_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate per hour\n    jerry_rate = 1 / 18\n    \n    # Combined rate per hour when Tom and Jerry work together\n    combined_rate = 1 / 6\n    \n    # Tom's rate per hour\n    tom_rate = combined_rate - jerry_rate\n    \n    # Time taken for Tom to complete the job by himself\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    # Initial speed in metres per minute\n    initial_speed = 150\n    # Increased speed\n    increased_speed = initial_speed + 50\n    # Distance covered in the first 10 minutes\n    initial_distance = initial_speed * 10\n    # Remaining distance to cover\n    remaining_distance = 3700 - initial_distance\n    # Time spent walking at increased speed in minutes\n    increased_speed_time = remaining_distance / increased_speed\n    # Total time spent walking in the park in minutes\n    total_time = 10 + increased_speed_time\n    \n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Calculate how many packets can be bought with $20 at $4 each\n    packets_bought = 20 // 4\n\n    # Calculate the number of sweets in the bought packets\n    sweets_in_bought_packets = packets_bought * 8\n    \n    # Calculate the number of free sweets\n    free_sweets = packets_bought // 2\n\n    # Maximum number of sweets obtained is sum of sweets in bought packets and free sweets\n    max_sweets = sweets_in_bought_packets + free_sweets\n    \n    return max_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # The total number of candies is 88.\n    # We need to distribute these into 8 distinct piles (where each pile represents the number of candies a child gets).\n    # Since no two children can have the same number of candies, we have to distribute them in increasing order,\n    # starting from at least 1 candy for the first child.\n    # We can use the smallest numbers possible for the first 7 children to maximize the number of candies\n    # for the child who gets the most.\n\n    remaining_candies = 88\n    # Give the first seven children candies in increasing order: 1, 2, 3, ..., 7.\n    for i in range(1, 8):\n        remaining_candies -= i\n\n    # The remaining candies go to the last child, which will be the most in this scenario.\n    most_candies = remaining_candies\n    return most_candies\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    initial_pink = 5\n    initial_total = 5 + 7 + 8  # Total counters\n    desired_pink_probability = (initial_pink / initial_total) * 2\n\n    extra_pink = 0\n    while True:\n        new_total = initial_total + extra_pink\n        current_pink_probability = (initial_pink + extra_pink) / new_total\n        if current_pink_probability >= desired_pink_probability:\n            break\n        extra_pink += 1\n\n    return extra_pink\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Before anyone leaves\n    equation1 = Eq(boys, 1.4 * girls)\n\n    # After 24 boys and 24 girls leave\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return int(solutions[boys])\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zero_count = 0\n\n    while n > 0:\n        n //= 5\n        zero_count += n\n\n    return zero_count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # There are 3 colors and Cindy needs 2 pairs of the same color.\n    # In the worst-case scenario, Cindy will pull out one of each color until she gets a pair.\n    # For each color, she can pull out a maximum of 3 without getting a pair.\n    # That's 3 socks per color, for 3 colors, making 9 socks without having a pair.\n    # The next sock she pulls out must match one of the three colors, giving her one pair.\n    # However, she needs two pairs of the same color.\n    # Therefore, she could have 1 pair of each color with 10 socks pulled (3*3+1).\n    # To guarantee the second pair of the same color:\n    # She can pull out another sock. Now she either has two pairs of the same color or three pairs of different colors.\n    # In either case, the next sock will guarantee the second pair of the same color.\n    \n    # Thus, she needs to pull out 10 (worse case for 1 pair) + 2 socks = 12 socks to guarantee 2 pairs of the same color.\n    \n    ans = 12\n    return ans\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let the initial number of cupcakes be c and the initial number of muffins be m.\n    # According to the problem, we have the following two conditions:\n    # 1) c = m (Demi had an equal number of cupcakes and muffins at first)\n    # 2) m - 12 = 2 * (c - 60) (After selling, muffins left is twice the cupcakes left)\n    \n    # From condition 1, we can replace m with c in condition 2:\n    # c - 12 = 2 * (c - 60)\n    # Expanding the right side of the equation:\n    # c - 12 = 2c - 120\n    # Solving for c:\n    # c = 120 - 12\n    # c = 108\n    \n    # Since c = m, the initial number of muffins m is also equal to 108.\n    # So the total initial number is c + m = 108 + 108.\n    \n    total_initial = 108 + 108\n    return total_initial\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    helen_daily, george_daily = symbols('helen_daily george_daily')\n    \n    helen_savings = 60\n    george_savings_more = 90\n    daily_expense = 5\n\n    # Helen saves $60\n    helen_eq = Eq((helen_daily - daily_expense), helen_savings)\n    # George saves $90 more than Helen\n    george_eq = Eq((george_daily - daily_expense), helen_savings + george_savings_more)\n    # George receives $3 more than Helen every day\n    difference_eq = Eq(george_daily, helen_daily + 3)\n    \n    # Solving the equations\n    solutions = solve((helen_eq, george_eq, difference_eq), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n  \nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    time_to_LA = 12.25\n    time_to_SH = time_to_LA + 1.5\n    total_time = time_to_LA + time_to_SH\n    return total_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let e be the amount of money Eddi has and w be the amount Wiya has\n    e, w = symbols('e w')\n    \n    # Initial ratio condition: e / w = 3 / 2\n    equation1 = Eq(e / w, 3/2)\n    \n    # After Lisa gives Eddi $4, the ratio becomes: (e + 4) / w = 8 / 5\n    equation2 = Eq((e + 4) / w, 8/5)\n    \n    # Solve the system of equations for e and w\n    solutions = solve((equation1, equation2), (e, w))\n\n    # w is the amount of money Wiya has\n    return solutions[w]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of numbers from 1 to 30 using the arithmetic series formula\n    n = 30\n    sum_1_to_30 = n * (n + 1) // 2\n    \n    # Calculate the sum of numbers from 1 to 29 using the arithmetic series formula\n    n = 29\n    sum_1_to_29 = n * (n + 1) // 2\n    \n    # The total sum is the sum from 1 to 30 plus the sum from 1 to 29\n    total_sum = sum_1_to_30 + sum_1_to_29\n    \n    return total_sum\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "网络故障，请重试"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    initial_distance = 2 * 40\n    remaining_distance = 280\n    total_distance = initial_distance + remaining_distance\n    \n    time_for_initial_distance = 2\n    time_for_remaining_distance = remaining_distance / 70\n    total_time = time_for_initial_distance + time_for_remaining_distance\n    \n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    at_least_two_sevens = 0\n\n    # For numbers with exactly two sevens, the third digit can be anything but seven\n    # Positions for two sevens can be arranged in 3C2 = 3 ways\n    at_least_two_sevens += 3 * 9  # 9 possible digits for the third place\n\n    # For numbers with exactly three sevens, we have only one number which is 777\n    at_least_two_sevens += 1\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_per_4page_letter = 4\n    pages_per_3page_letter = 3\n\n    # Assume Oni writes a 4-page letter to all penpals\n    # Calculate the pages produced by this assumption\n    all_4page_letters = total_penpals * pages_per_4page_letter\n\n    # The excess pages if Oni writes a 4-page letter to all\n    excess_pages = all_4page_letters - total_pages\n\n    # The difference in page numbers between a 4-page letter and a 3-page letter\n    page_difference = pages_per_4page_letter - pages_per_3page_letter\n\n    # The number of penpals receiving 3-page letters is equal to the excess pages\n    # divided by the page difference\n    num_3page_penpals = excess_pages // page_difference\n\n    return num_3page_penpals\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    num_str = '768354'\n    place_value = num_str.index('8')\n    power_of_ten = len(num_str) - place_value - 1\n    value_of_8 = 8 * (10 ** power_of_ten)\n    return value_of_8\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the first term and 'd' the common difference in the arithmetic progression\n    a, d = symbols('a d')\n\n    # Using the information given about the 9th and 15th terms\n    # a_9 = a + 8*d\n    # a_15 = a + 14*d\n    # a_9 = a_15 + 18 => (a + 8*d) = (a + 14*d) + 18 => -6*d = 18\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # The sum of the 20th term and the 12th term is 88\n    # a_20 + a_12 = 88 => (a + 19*d) + (a + 11*d) = 88 => 2*a + 30*d = 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Using the value of 'a' and 'd' to find the 32nd term\n    # a_32 = a + 31*d\n    a_32 = solutions[a] + 31 * solutions[d]\n\n    return a_32\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the packet sizes\n    days_to_next_start = lcm(25, 20)\n\n    # Since she starts on March 1st, calculate the next starting date\n    # March has 31 days\n    total_days_in_march = 31\n    next_start_date_in_march = days_to_next_start % total_days_in_march\n\n    if next_start_date_in_march == 0:\n        next_start_date_in_march = 31\n        next_start_month = \"March\"\n    else:\n        next_start_month = \"April\"\n\n    return f\"{next_start_date_in_march} {next_start_month}\"\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial as fact\n\ndef solution():\n    # Total singing performances\n    S = 6\n    # Total dancing performances\n    D = 4\n    \n    # Since at least one singing performance should be between 2 dancing performances, we have 'D-1' places\n    # and 'S' singing performances to arrange in these places first. So we'll place 'D-1' performances and\n    # leave 'S - (D - 1)' performances to arrange freely later.\n    # Number of ways to choose 'D-1' places from 'S' singing performances.\n    places_to_choose = S - (D - 1)\n    \n    # Again, since one singing performance needs to be between two dancing performances\n    # The maximum number of singing performances that can occur consecutively without\n    # a dance performance is 2.\n    remaining_singings = S - (D - 1)\n    \n    # We have (D - 1) + 1 = D \"slots\" between dancing performances where the remaining\n    # singing performances can be placed, including before the first and after the last\n    # dancing performance.\n    slots = D + 1\n    \n    # Now, we can distribute the remaining singing performances in those slots using\n    # stars and bars method which is: C(n+k-1, k), where n is remaining_singings and\n    # k is the number of slots.\n    ways_to_distribute = fact(remaining_singings + slots - 1) // (fact(remaining_singings) * fact(slots - 1))\n    \n    # The total arrangements for dancing can be given by D!\n    dance_arrangements = fact(D)\n    \n    # Multiplying the possible arrangements for dance and sing performances\n    ans = ways_to_distribute * dance_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    A = 1\n    a_1 = A - 1/2\n    a_2 = A - 2/3\n    a_3 = A - 7/8\n    a_4 = A - 29/30\n    a_5 = A - 139/144\n    a_6 = A - 839/840\n    \n    a_0 = A - (a_1 + a_2 + a_3 + a_4 + a_5 + a_6)\n\n    # Simplify the fraction of a0\n    from fractions import Fraction\n    a_0_fraction = Fraction(a_0).limit_denominator()\n    \n    m = a_0_fraction.numerator\n    n = a_0_fraction.denominator\n    \n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    from itertools import permutations\n\n    # Given clues\n    clue1 = set('8765')\n    clue2 = set('1023')\n    clue3 = '8642'\n    clue4 = set('5430')\n    \n    # Possible digits based on clues 1 and 2\n    possible_digits = (clue1 | clue2) - clue4\n\n    # Iterate through all permutations of the possible digits\n    for perm in permutations(possible_digits, 4):\n        perm_str = ''.join(perm)\n        # Clue 1 and Clue 2 checks\n        if sum(1 for a, b in zip(perm_str, '8765') if a == b) != 0:\n            continue\n        if sum(1 for a, b in zip(perm_str, '1023') if a == b) != 0:\n            continue\n        # Clue 3 checks\n        if sum(1 for a, b in zip(perm_str, clue3) if a == b) != 2:\n            continue\n        # Clue 4 check, already validated by possible_digits\n\n        # We've found the only number that fits all clues\n        return int(perm_str)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    incorrect_eq = Eq(x / 4 - 25, 2021)\n    \n    x_value = solve(incorrect_eq, x)[0]\n    correct_answer = 4 * x_value + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors_75 = 75 // 5 // 5  # 75 = 3 * 5 * 5\n    prime_factors_56 = 56 // (2 * 2 * 2)  # 56 = 2 * 2 * 2 * 7\n    prime_factors_12 = 12 // (2 * 2 * 3)  # 12 = 2 * 2 * 3\n    prime_factors_105 = 105 // (5 * 3 * 7)  # 105 = 3 * 5 * 7\n\n    # since 0 at the end of a number is given by the pair of 2 and 5 in the prime factors\n    # calculate the total of each prime factor in the product\n    total_twos = (3 + 2 + 2)\n    total_fives = (2 + 1 + 1)\n\n    # the smallest of the totals gives the number of zeros at the end\n    ans = min(total_twos, total_fives)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be x.\n    # Then Chloe has 4 * x books.\n    # Chloe has 816 more books than Donna, so 4 * x - x = 816\n    # Solve for x, which represents the number of books Donna has.\n    x = 816 // 3\n    return x\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming that the tildes (~) represent a single variable (x)\n    x = symbols('x')\n    equation = Eq((x + 4) / 8, 3)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # The last digit of 999\n    exponent = 99\n    ones_digit = pow(base, exponent, 10)  # Compute the ones digit directly\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            b = (193 - 3*a) / 11\n            if b.is_integer() and isprime(int(b)):\n                return int(a + b)\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = 14 / (3 * 4)\n    houses = houses_per_worker_per_day * 9 * 2\n    return int(houses)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of adults as A, girls as G, and boys as B.\n    # We have two equations based on the problem statement:\n    # A = 3C (where C is the number of children, and C = G + B)\n    # B = 2G\n    # A = G + 176\n    # Also, C = A / 3 => C = G + 176 / 3 => B + G = G + 176 / 3 => B = 2G\n    # We'll have three equations with three unknowns.\n\n    A, G, B, C = symbols('A G B C')\n\n    equation1 = Eq(A, 3 * C)  # Three times as many adults as children\n    equation2 = Eq(B, 2 * G)  # Twice as many boys as girls\n    equation3 = Eq(A, G + 176)  # 176 more adults than girls\n\n    # We can substitute C with G + B in the first equation,\n    # since the number of children is the sum of the number of boys and girls.\n    # Also, from the third equation, we have A = G + 176.\n    # Let's substitute A in the first equation and B from the second equation\n    # to find the number of girls, and then we can find other variables.\n\n    equations = (equation1, equation2, equation3)\n\n    # Solving the system of equations for A, G, and B.\n    solutions = solve(equations, (A, G, B, C))\n\n    # Getting the total amount of people by calculating A + G + B.\n    total_people = solutions[A] + solutions[G] + solutions[B]\n\n    return total_people\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people', integer=True)\n    children = 2/5 * total_people\n    women = 1/4 * total_people\n    men = total_people - children - women\n    \n    equation = Eq(children, men + 20)\n\n    solution = solve(equation, total_people)\n\n    return solution[0]  # Return the number of people at the funfair\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # We need to find the two-digit number ab such that multiplying it by 7 gives a0b\n    for a in range(1, 10):  # Loop over all possible values of a (1 to 9 because ab is two-digit number)\n        for b in range(0, 10):  # Loop over all possible values of b (0 to 9)\n            ab = 10 * a + b  # This is the two-digit number formed by digits a and b\n            a0b = 100 * a + b  # This is the number a0b formed by digits a, 0, and b\n            if ab * 7 == a0b:  # Check for the condition given in the question\n                return ab  # ab is the required two-digit number\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_per_ball, total_money = symbols('cost_per_ball total_money')\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n    \n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # Since the highest common factor is 75, both A and B are multiples of 75.\n    # We are looking for the largest possible 3-digit number that is multiple of 75.\n    # The largest 3-digit multiple of 75\n    max_A_or_B = (999 // 75) * 75\n    # Now we need to find the next smallest number that satisfies the conditions\n    # It should also have two equal digits and be a multiple of 75, but smaller than max_A_or_B\n    for i in range(max_A_or_B - 75, 74, -75):\n        # Convert to string to check for two equal digits\n        str_i = str(i)\n        if (str_i[0] == str_i[1] or str_i[0] == str_i[2] or str_i[1] == str_i[2]):\n            return max_A_or_B + i\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # The height after the second bounce\n    # Each bounce it goes to 1/3 of the previous height, so we reverse this\n    # To find the height before the second bounce, multiply by 3\n    height_before_second_bounce = height_after_second_bounce * 3\n    # To find the initial height, multiply by 3 again\n    initial_height = height_before_second_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the numerator of the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = Fraction(2, 25)\n    # Compute the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - Fraction(2, 3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = Fraction(8, 3)\n    # Compute the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Add the two complex fractions\n    ans = complex_fraction1 + complex_fraction2\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for dog ages\n    bob, rex, fido = symbols('bob rex fido', integer=True)\n\n    # Define equations based on the problem statement\n    eq1 = Eq(fido, bob - 10)              # Fido is 10 years younger than Bob\n    eq2 = Eq(bob + rex + fido, 28)        # Sum of their ages is 28\n    # We could add eq3 with inequalities rex != fido != bob != rex, but sympy's solve does not handle inequalities.\n    \n    # Using substitution instead of direct equality to ensure they are different ages.\n    possible_solutions = []\n\n    # Bob has to be older than 10 for Fido to have a positive age\n    for b in range(11, 28):\n        # Human age is up to ~120, but it's unreasonable for dogs\n        for r in range(1, 28):\n            if b == r:\n                continue\n            for f in range(1, 28):\n                if f == b or f == r:\n                    continue\n                substitutions = {bob: b, rex: r, fido: f}\n                if solve([eq1.subs(substitutions), eq2.subs(substitutions)]):\n                    # If solutions exist for these values, add the product of ages\n                    possible_solutions.append(b * r * f)\n\n    # Return the minimum product of ages\n    return min(possible_solutions)\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Lee's work rate be x and Nancy's work rate be y (jobs per hour)\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # The work done by Lee and Nancy in 10 hours working together\n    equation1 = Eq((lee_rate + nancy_rate) * 10, 1)\n\n    # The work done when Lee works for 6 hours and Nancy works for 20 hours\n    equation2 = Eq(lee_rate * 6 + nancy_rate * 20, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Nancy's time to finish the job by herself is the reciprocal of her work rate\n    nancy_time = 1/solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_avg_score = 90\n    total_marks = total_pupils * total_avg_score\n\n    class_a_avg = symbols('class_a_avg')\n    class_b_avg = class_a_avg + 7\n\n    eq1 = Eq((40 * class_a_avg + 30 * class_b_avg), total_marks)\n\n    class_a_score = solve(eq1, class_a_avg)[0]\n    class_b_score = class_a_score + 7\n\n    return class_b_score\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    value = 1 / (1 / (2007 * 2008) + 1 / (2008 * 2009) + 1 / 2009)\n    return value\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6): # He can use from 0 to 5 ten-pence coins\n        for twenty_pence in range(4): # He can use from 0 to 3 twenty-pence coins\n            for fifty_pence in range(2): # He can use 0 or 1 fifty-pence coin\n                total = ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50\n                if total == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    num_boats = (students + boat_capacity - 1) // boat_capacity\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    return 11 - 2 + 7 - 4 + 2\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    term1 = 250250**2\n    term2 = 250249 * 250251\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Aaron, Becky, and Chris's ages\n    Aaron, Becky, Chris = symbols('Aaron Becky Chris')\n\n    # Equation 1: Aaron's age is same difference greater than Becky's age\n    equation1 = Eq(Aaron - Becky, Becky - Chris)\n\n    # Equation 2: Sum of their ages is 60\n    equation2 = Eq(Aaron + Becky + Chris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Aaron, Becky, Chris))\n\n    # Return Becky's age\n    return solutions[Becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n    people_in_front_of_mark = total_people - people_behind_mark - 1 # subtract one for Mark himself\n    \n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits_count = 0\n    for i in range(1, 201):\n        digits_count += len(str(i))\n    return digits_count\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for j in range(10):\n        if (int(str(6) + str(j)) % 4) == 0:\n            return j\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair, table = symbols('chair table')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the cost of an apple and p represent the cost of a peach.\n    a, p = symbols('a p')\n\n    # Write down the equations based on the problem statements.\n    equation1 = Eq(4 * a + 3 * p, 10)\n    equation2 = Eq(4 * a + 6 * p, 16)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    # Applying inverse operations\n    # Let x be the original number\n    # 6 * (x + 7) = 66\n    # x + 7 = 66 / 6\n    # x = (66 / 6) - 7\n\n    return (66 / 6) - 7\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    def new_operation(a, b):\n        return 5*a - 2*b\n\n    x = symbols('x')\n    equation = Eq(new_operation(9, x), 33)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Calculate the sum of squares up to 24\n    n = 24\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Since the series starts with 0*1^2, we subtract it\n    sum_of_squares -= 0 * 1**2\n\n    # Calculate the sum of cubes up to 23\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_cubes -= 24**2  # since the series ends at 23*24^2, we subtract 24^2\n\n    # Applying the distributive law to get the total sum\n    ans = sum_of_squares + sum_of_cubes\n\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    dividend = 476\n    divisor = 17\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11  # The question \"11\" is a statement of a number without a mathematical problem or context.\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    days_for_tablets = lcm(25, 20)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month, day = 3, 1  # March 1st\n    day += days_for_tablets  # Find the next same start day\n    \n    while day > days_in_month[month - 1]:\n        day -= days_in_month[month - 1]\n        \n        if month == 12:\n            month = 1\n        else:\n            month += 1\n    \n    ans = (day, month)\n    return ans\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_per_day_watermelons = 9\n    used_per_day_pineapples = 9\n    ratio = 3\n\n    # w_left/p_left = 1/3\n    # w_left = p_left/3\n    # 94 - 9*days = (138 - 9*days)/3\n    # Solve for days\n    days = (pineapples - ratio * watermelons) / (used_per_day_watermelons * (ratio - 1))\n\n    return int(days)\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each friend sends a card to each of the other friends.\n    cards_sent_by_each_friend = num_friends - 1\n    # Total cards sent altogether.\n    total_cards = num_friends * cards_sent_by_each_friend\n\n    return total_cards\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    tom_now, jerry_now = symbols('tom_now jerry_now')\n\n    # Equations based on the problem description\n    equation1 = Eq(tom_now + 4, 2 * tom_now)\n    equation2 = Eq(tom_now - 3 + jerry_now - 3, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tom_now, jerry_now))\n\n    # Find Tom's and Jerry's current ages\n    tom_age_now = solutions[tom_now]\n    jerry_age_now = solutions[jerry_now]\n\n    # Define a new symbol for the number of years it takes for Jerry's age to double\n    years = symbols('years')\n\n    # Equation for when Jerry's age will be doubled\n    equation3 = Eq(jerry_now + years, 2 * jerry_now)\n\n    # Solve for the number of years it will take for Jerry's age to double\n    years_to_double_jerry = solve(equation3, years)\n\n    return years_to_double_jerry[0]\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time_minutes = 360\n    ratio_up_to_down = 5 / 4\n\n    # Calculate the time spent going up and down based on the ratio\n    time_up = (ratio_up_to_down / (1 + ratio_up_to_down)) * total_time_minutes\n    time_down = total_time_minutes - time_up\n    speed_difference = 10  # the speed difference between going up and down\n\n    # Now, we have two equations:\n    # 1) distance = (speed_down - speed_difference) * time_up\n    # 2) distance = speed_down * time_down\n    # They are equal, so we can write:\n    # (speed_down - speed_difference) * time_up = speed_down * time_down\n    # We solve for speed_down\n    speed_down = (speed_difference * time_up) / (time_down - time_up)\n\n    # Now we calculate the distance\n    distance_up = (speed_down - speed_difference) * time_up\n    distance_down = speed_down * time_down\n\n    # The total distance is the sum of the distance up and down\n    total_distance = distance_up + distance_down\n    return total_distance\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Yun's cars\n    yun_cars = 4\n    yun_fruits = 24.2\n    yun_fruits_per_car = yun_fruits / yun_cars\n\n    # Yang's trucks\n    yang_trucks = 50\n    yang_fruits = 410\n    yang_fruits_per_truck = yang_fruits / yang_trucks\n\n    # Difference in mass of fruits between a truck and a car\n    difference = yang_fruits_per_truck - yun_fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival_time = (9 * 60) + 22  # Convert 9:22 to minutes (9 hours * 60 minutes + 22 minutes)\n    bus_departure_time = (9 * 60) + 15  # Convert 9:15 to minutes\n\n    # Calculate the minutes passed since the last bus\n    minutes_since_last_bus = aiden_arrival_time - bus_departure_time\n\n    # Calculate how many buses have left since the last departure at or before 9:15\n    buses_missed = minutes_since_last_bus // bus_interval\n\n    # Calculate the time when the next bus leaves\n    next_bus_time = bus_departure_time + ((buses_missed + 1) * bus_interval)\n\n    # Calculate the waiting time for the next bus\n    wait_time = next_bus_time - aiden_arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_per_week = 7\n    \n    weeks_until_birthday = days_until_birthday // days_per_week\n    \n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time = 5\n    \n    # Since they meet after 5 minutes, they covered the total distance together\n    total_distance = (eddie_speed + brother_speed) * time\n    \n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import primerange\n\ndef solution():\n    # Start from 2018 since we are looking for the next year\n    current_year = 2018\n    ages = [7, 5, 29, 31]\n    while True:\n        # Calculate new ages for the current year\n        new_ages = [age + (current_year - 2017) for age in ages]\n        # Check if all new ages are prime\n        if all(age in primerange(1, max(new_ages) + 1) for age in new_ages):\n            return new_ages[3]  # Father's age is the last in the list\n        current_year += 1  # Move to the next year\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    after_discount = original_price * (1 - discount_rate)\n    final_price = after_discount * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # Number of gaps between lamp posts is (total flowers / flowers between each lamp post)\n    num_gaps = total_flowers / flowers_between_lamps\n\n    # The total length of the road is 50m, so we divide this by the number of gaps to get the distance between each lamp post\n    distance_between_lamps = 50 / (num_gaps + 1)  # +1 because there's an extra lamp post at the end of the road\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # Formula derived from inductive reasoning for maximum number of parts p with n circles:\n    # p(n) = p(n - 1) + n\n    # Starting with p(0) = 1, since with 0 circles, we still have 1 part - the whole plane\n    # Here n = 7\n    \n    p = [1]  # Base case: p(0) = 1\n    n = 7\n    \n    for i in range(1, n + 1):\n        p.append(p[i - 1] + i)\n    \n    return p[n]\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_remaining = total_books - books_given_away\n\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lora, mother = symbols('lora mother')\n    \n    equation1 = Eq(mother, 3 * lora)\n    equation2 = Eq(lora + mother, 44)\n    \n    solutions = solve((equation1, equation2), (lora, mother))\n    \n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_digit = 4\n    exponent = 2008\n\n    # Unit digit of powers of 4 cycles every 2 steps: 4, 6, repeat...\n    unit_digits_cycle = [4, 6]\n\n    # Calculate the position in the cycle for the exponent (using modulo)\n    cycle_index = exponent % len(unit_digits_cycle)\n\n    # Subtract 1 to get the correct index (since list is zero-based)\n    cycle_index -= 1\n\n    # Return the unit digit from the cycle\n    return unit_digits_cycle[cycle_index]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    number_of_males = total_adults * fraction_male\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to each shop\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n    \n    # Number of paths from each shop to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    # Total number of paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # let a, b, c represent the weights of Adam, Ben and Carl respectively\n    a_and_b = 102  # Adam and Ben's total weight\n    b_and_c = 97   # Ben and Carl's total weight\n    a_and_c = 93   # Adam and Carl's total weight\n    \n    # Sum of individual weights of Adam, Ben, and Carl\n    # a_and_b + b_and_c + a_and_c = a + 2b + c\n    sum_of_individuals = a_and_b + b_and_c + a_and_c\n    \n    # Since a + b + c is the total weight, we need to subtract b from the sum\n    # of individuals to get the total weight\n    total_weight = (sum_of_individuals - b_and_c)\n    \n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    # Equation: Benson - calculator price + Clive - racket price = total money\n    equation1 = Eq(benson - calculator_price + clive - racket_price, total_money)\n\n    # Equation: Both have same amount after purchases\n    equation2 = Eq(benson - calculator_price, clive - racket_price)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belle_sticks = 49\n    belle_sticks_after = belle_sticks + 11\n    eddie_sticks = symbols('eddie_sticks')\n    \n    equation = Eq(belle_sticks_after, eddie_sticks)\n    \n    eddie_initial_sticks = solve(equation, eddie_sticks)[0]\n    \n    return eddie_initial_sticks\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamps = 50\n    distance_between_lamps = 2\n    # Since there are lamp posts on both ends of the road, we have to subtract one from the total count.\n    road_length = (num_lamps - 1) * distance_between_lamps\n    \n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference_temp = 12\n    exeter_temp = glasgow_temp + difference_temp\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Chelsia's and Brian's money\n    chelsia, brian = symbols('chelsia brian')\n\n    # Create the equations based on the problem description\n    # 3/4 of Chelsia's money is the same as 5/6 of Brian's money\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia - brian, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n    # Calculate the total money Chelsia and Brian have altogether\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    for john_coins in range(1, 25):  # Since they have 25 coins together, start from 1 to 24\n        kofi_coins = 25 - john_coins  # Kofi has the remaining coins\n    \n        if (kofi_coins + 4) == (john_coins - 4) + 3:\n            return john_coins\n    \n    return None  # In case there is no solution, although there should be one.\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea / 2\n    tea_to_give = tea_each - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6]\n    all_possible_numbers = set()\n\n    for i in range(1, len(digits)+1):\n        for combo in permutations(digits, i):\n            number = int(''.join(map(str, combo))) # Convert tuple of digits to integer\n            all_possible_numbers.add(number)\n  \n    ans = len(all_possible_numbers)\n    return ans\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return (18 + 2) + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_had_after_eating = 4\n    neelesh_received = neelesh_had_after_eating + 1 # because he ate one\n    total_sweets = neelesh_received * 6 # since Neelesh had 1/6, multiply by 6 to get the total\n    ayesha_has_left = total_sweets - neelesh_received # subtract what was given to Neelesh\n\n    return ayesha_has_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbit, special_rabbit = symbols('normal_rabbit special_rabbit')\n    \n    equation1 = Eq(normal_rabbit + 3 * special_rabbit, 53)\n    equation2 = Eq(4 * normal_rabbit + 2 * special_rabbit, 102)\n    \n    solutions = solve((equation1, equation2), (normal_rabbit, special_rabbit))\n\n    return solutions[normal_rabbit] + solutions[special_rabbit]\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of gummy bears and y represent the number of lollipops\n    x, y = symbols('x y')\n\n    # Create two equations based on the information provided\n    equation1 = Eq(x / y, 5 / 7)\n    equation2 = Eq((x + 120) / (y + 120), 4 / 5)\n\n    # Use solve to solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of candies now\n    total_candies_now = solutions[x] + solutions[y] + 2 * 120\n\n    return total_candies_now\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Since 1/70 is a rational number, it has a recurring cycle.\n    # We need to figure out this cycle to determine the 500th digit.\n    \n    # First, calculate the decimal form of 1/70 up to a large number of recurring cycles.\n    # We'll calculate a few thousand digits to be sure we cover at least 500 digits after the cycle starts.\n    remainder = 1\n    decimals = ''\n    remainders = {}\n    cycle_start = 0\n    \n    for i in range(1, 3000):\n        remainder = remainder * 10\n        decimals += str(remainder // 70)\n        remainder = remainder % 70\n\n        # If we have seen this remainder before, it means the cycle is repeating.\n        if remainder in remainders:\n            cycle_start = remainders[remainder]\n            break\n        \n        # Keep track of remainders to find the cycle.\n        remainders[remainder] = i\n\n    cycle = decimals[cycle_start:]\n    cycle_length = len(cycle)\n\n    # Find the 500th digit after the decimal point\n    position_in_cycle = (500 - cycle_start) % cycle_length\n    ans = int(cycle[position_in_cycle - 1])  # minus 1 because of 0-indexing\n    return ans\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marbles_A = 80\n    total_marbles = 560\n    box_C = symbols('box_C')\n\n    box_B = 2 * box_C\n    equation = Eq(marbles_A + box_B + box_C, total_marbles)\n\n    solution = solve(equation, box_C)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 25    # The 10th term in the sequence\n    n = 10           # The n-th position of the term in the sequence\n    difference = 3   # Common difference in the arithmetic sequence\n\n    # Formula to find the first term: first_term = nth_term - (n - 1) * difference\n    first_term = nth_term - (n - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    repetitions = 3\n    total_sum = sum(numbers) * repetitions\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1 - num2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize a set representing the first 20 positive integers\n    numbers = set(range(1, 21))\n\n    # Initialize the chosen numbers list and the maximum length variable\n    chosen = []\n    max_len = 0\n\n    # Iterate over the numbers set in ascending order\n    for num in sorted(numbers):\n        # Check if the current number or any number that differs by 5\n        # is already in the chosen numbers list\n        if not any((num + i in chosen) or (num - i in chosen) for i in range(1, 6)):\n            chosen.append(num)  # Add the number to the chosen list if it's safe\n\n    # Update the maximum length of n\n    max_len = len(chosen)\n\n    return max_len\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of calories in one cake and one biscuit\n    cake, biscuit = symbols('cake biscuit')\n\n    # Two equations based on the problem statement\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, mother_age = symbols('john_age mother_age')\n    \n    # John’s age in 8 years is the same as his mother’s age 20 years ago.\n    eq1 = Eq(john_age + 8, mother_age - 20)\n    \n    # Since there's no direct age given, we establish an age difference variable.\n    age_difference = mother_age - john_age\n    \n    # When his mother was 5 times his age.\n    eq2 = Eq(mother_age - age_difference, 5 * (john_age - age_difference))\n    \n    # Now, we solve the system of equations.\n    solutions = solve((eq1, eq2), (john_age, mother_age))\n    \n    # We calculate how old John was at the time.\n    john_age_when = solutions[john_age] - age_difference\n    \n    return john_age_when\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_answers = correct_answers + wrong_answers\n    average_mark = total_marks / total_answers\n    return average_mark\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_child in range(1, 100):\n        total_pencils = 44 * pencils_per_child\n        if str(total_pencils).startswith('1') and len(str(total_pencils)) == 3:\n            return pencils_per_child\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara, kevin, james = symbols('sara kevin james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    numbers = [4, 6, 7]\n    lcm_result = lcm(numbers[0], numbers[1])\n    lcm_result = lcm(lcm_result, numbers[2])\n    return lcm_result\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [M % i for i in range(2, 11)]\n        if len(set(remainders)) == len(remainders) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24  # Tom completes a lap every 24 minutes\n    william_time = 8  # William completes a lap every 8 minutes\n\n    # Calculate least common multiple (LCM) of Tom and William's lap times\n    # since they meet whenever both have completed an integral number of laps\n    lcm_time = (tom_time * william_time) // math.gcd(tom_time, william_time)\n\n    return lcm_time\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    reema = symbols('reema')\n    romily = reema + 10\n\n    equation = Eq(reema + romily, 120)\n\n    solved_values = solve(equation, reema)\n\n    return solved_values[0]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    import fractions\n    \n    # Convert mixed numbers to improper fractions\n    num1 = fractions.Fraction(2017 * 8 + 7, 8)\n    num2 = fractions.Fraction(3 * 3 + 2, 3)\n    num3 = fractions.Fraction(2016 * 3 + 35, 3)\n    num4 = fractions.Fraction(2017 * 3 + 1, 3)\n    num5 = fractions.Fraction(3 * 32 + 23, 32)\n    \n    # Perform the calculation\n    numerator = num1 * num2 - num3 * (11/3)\n    denominator = (num4 - 2016.875) * 17\n    ans = numerator / denominator * num5\n\n    return ans\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = (math_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    post_interval = 4\n    field_length = 480\n    number_of_posts = field_length // post_interval + 1\n    return number_of_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it is a two-digit number\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    result = (612 // 34) * 25\n    return result\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers_sum = sum(range(10, 80, 10))\n    negative_numbers_sum = sum(range(6, 70, 10))\n    result = positive_numbers_sum - negative_numbers_sum\n    return result\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 into its prime factors\n    factors = factorint(28)\n    \n    # To make it a perfect square, each prime factor's power must be even.\n    # Multiplying 28 by the factors which are not already even powers will make it a perfect square.\n    product = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:  # If the power is odd\n            product *= prime  # We need to multiply by this prime\n    \n    return product\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    for year in range(years):\n        initial_rabbits = (initial_rabbits * 5) // 2  # Multiply by 5 then halve the population\n    return initial_rabbits\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # lunch finished at 2:50 pm\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    \n    # lunch lasted for 20 minutes\n    lunch_duration = timedelta(minutes=20)\n\n    # time when lunch started\n    lunch_start_time = lunch_end_time - lunch_duration\n\n    # watched television for 20 minutes\n    tv_duration = timedelta(minutes=20)\n\n    # time when television watching started\n    tv_start_time = lunch_start_time - tv_duration\n\n    # played for 10 minutes\n    play_duration = timedelta(minutes=10)\n\n    # time when Benson reached home\n    home_reach_time = tv_start_time - play_duration\n\n    # format the result to get time in \"H:M\" format\n    ans = home_reach_time.strftime('%H:%M')\n    \n    return ans\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Treat A and B as a single entity since they must be next to each other.\n    # So, we have 5 \"entities\" to arrange: AB, C, D, E, F\n    entities = 5\n    ways_to_arrange_entities = factorial(entities)\n    \n    # A and B can be arranged in 2! ways (A next to B or B next to A)\n    ways_to_arrange_A_and_B = factorial(2)\n    \n    # Total ways is the product of the arrangements of entities and the arrangements of A and B\n    total_ways = ways_to_arrange_entities * ways_to_arrange_A_and_B\n    \n    return total_ways\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, (3 / 5) * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    # Since at least one student gets 5 sweets, the class size cannot be larger than 138 // 5\n    max_students = total_sweets // 5\n\n    # Now we check from the maximum possible class size downward to find the largest size \n    # such that the sweets can be distributed as evenly as possible\n    for class_size in range(max_students, 0, -1):\n        if total_sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Given: 246 * 135 = 33210\n    # To find: 248 * 135\n    # Add two times 135 to the given result to get the answer for 248 times 135\n    ans = 33210 + (2 * 135)\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variable x as a symbol\n    x = symbols('x')\n\n    # Define the equation 34 - 3*(2x - 2) = 16\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution corresponding to x\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps the escalator has in total\n    # Let y be the number of steps the escalator moves in one second\n\n    # In the first scenario, Peter walks 10 steps in 10 seconds.\n    # Therefore, the escalator moves y * 10 steps in those 10 seconds.\n    # The total number of steps (x) is the sum of Peter's steps and the steps moved by the escalator\n    # x = 10 + 10y\n\n    # In the second scenario, Peter walks 16 steps in 8 seconds (since he takes 2 steps per second).\n    # Therefore, the escalator moves y * 8 steps in those 8 seconds.\n    # Again, the total number of steps (x) is the sum of Peter's steps and the steps moved by the escalator\n    # x = 16 + 8y\n\n    # We have two equations with two variables:\n    # 1) x = 10 + 10y\n    # 2) x = 16 + 8y\n\n    # By equating the two expressions for x, we get:\n    # 10 + 10y = 16 + 8y\n    # Simplify it to find y:\n    # 10y - 8y = 16 - 10\n    # 2y = 6\n    # y = 3\n\n    # Now that we have y, we can substitute it back into either equation for x.\n    # Using equation 1):\n    # x = 10 + 10y\n    # x = 10 + 10*3\n    # x = 10 + 30\n    # x = 40\n    # The number of steps the escalator has in total is x, which is 40.\n\n    return 40\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120cm tall\n    difference = 30     # James is 30cm shorter than Mark\n    mark_height = james_height + difference  # Mark's height is the sum of James' height and the difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    stickers_left = 3\n\n    num_children = (total_stickers - stickers_left) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    \n    return int(remaining_blocks)\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5): # The digit should be even and less than 5 to satisfy being a multiple of 9 with distinct even digits\n        for tens in range(hundreds+1, 10, 2): # The digit should be even and greater than hundreds digit\n            ones = hundreds * 2\n            if ones > 9 or tens % 2 != 0: # Ones should be less than 10 and even\n                continue\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:\n                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sally (S) and Ken (K)\n    S, K = symbols('S K')\n\n    # The initial ratio of chocolates Sally and Ken had: 5S = 7K.\n    # After giving away chocolates: S + 24 = 2(K - 24).\n    eq1 = Eq(5 * S, 7 * K)\n    eq2 = Eq(S + 24, 2 * (K - 24))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (S, K))\n\n    # Ken's chocolates in the end: K - 24\n    return solutions[K] - 24\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for each person's money\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    # Raju has 3 times as much money as Vijay\n    equation1 = Eq(raju, 3 * vijay)\n    # Raju has $152 more than Patrick\n    equation2 = Eq(raju, patrick + 152)\n    # The three boys have an average amount of $507\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    square_sides = 4\n    triangle_sides = 3\n    \n    number_thinking_of = (square_sides * 2) - triangle_sides\n    \n    return number_thinking_of\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percent = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percent)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of one color pencil and one notebook\n    pencil, notebook = symbols('pencil notebook')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    # Calculate the total cost of 1 color pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    additional_bill = total_bill - 40   # Deduct the free hours' amount from the bill\n    hours_paid = 0\n\n    if additional_bill > 0:\n        # Calculate the number of hours in the $5 bracket\n        if additional_bill <= 50:\n            hours_paid = additional_bill // 5\n        else:\n            hours_paid += 10  # Maximum 10 hours in the $5 bracket\n            additional_bill -= 50  # Deduct the $50 for the first 10 paid hours\n            \n            if additional_bill <= 80:\n                hours_paid += additional_bill // 8\n            else:\n                hours_paid += 10  # Maximum 10 hours in the $8 bracket\n                additional_bill -= 80  # Deduct the $80 for the 10 hours in the $8 bracket\n                \n                # Calculate the number of hours in the $15 bracket\n                hours_paid += additional_bill // 15\n\n    total_hours = hours_paid + 40  # Add back the free hours\n    return total_hours\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = [(i+1) * 9 * 10**i for i in range(4)]\n    total_pages = 0\n    used_digits = 0\n    \n    for i, dpp in enumerate(digits_per_page):\n        if used_digits + dpp >= 1014:\n            remaining_digits = 1014 - used_digits\n            pages_with_current_digits = remaining_digits // (i+1)\n            total_pages += pages_with_current_digits\n            break\n        used_digits += dpp\n        total_pages += 9 * 10**i\n\n    return total_pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    return joanna_total - amy_total\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n    equation = Eq(first_number, 4 * second_number)\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways to form a committee with 1 teacher and 4 students regardless of gender\n    all_combinations = total_teachers * comb(total_male_students + total_female_students, 4)\n\n    # Total ways to form a committee with 1 teacher and 4 male students (no females)\n    all_male_combinations = total_teachers * comb(total_male_students, 4)\n\n    # Subtracting the all-male committee count from the total committee count to ensure at least 1 female\n    valid_combinations = all_combinations - all_male_combinations\n\n    return valid_combinations\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    total = 0\n    for i in range(1, 8):\n        total += (10 * i) - (6 + (i - 1) * 10)\n    total += 2021\n    return total\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    positions_diff = 15 - 10\n    \n    common_difference = (fifteenth_term - tenth_term) / positions_diff\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of all variables.\n    # Monomial is -x^3 * y^(2n)\n    # Degree of x is 3\n    # Let's denote degree of y as degree_y and it equals 2n\n    # According to the question, degree of the monomial is 5\n    # degree_x + degree_y = 5\n    # 3 + 2n = 5\n    # Solving for n, we have:\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    total_cups = 45\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n\n    total_milk = total_cups * milk_per_cup\n    total_tea = total_cups * tea_per_cup\n\n    total_liquid = total_milk + total_tea\n\n    return total_liquid\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_price = symbols('book_price pencil_price')\n    total_sarah = 8 * book_price + 3 * pencil_price\n    total_rebecca = 3 * book_price + 8 * pencil_price\n    pencil_price_value = 40 / 100  # Convert pence to pounds\n\n    equation = Eq(total_sarah - total_rebecca, 1)\n    solutions = solve(equation.subs(pencil_price, pencil_price_value), book_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq((angela + bernice + candice) * 6, 342)\n    \n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let's denote the first of the three consecutive numbers as n.\n    # Then the second number is n+1 and the third number is n+2.\n    # We are given that their sum is 60. So we have:\n    # n + (n + 1) + (n + 2) = 60\n    # 3n + 3 = 60\n    # 3n = 60 - 3\n    # n = (60 - 3) / 3\n    # n = 57 / 3\n    # n = 19\n    # The largest number will be n + 2, so:\n    largest_number = 19 + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10  # Total volume of orange juice Angel has in litres\n    volume_per_container = 2  # Volume of orange juice in litres that each container can hold\n    num_containers = total_volume / volume_per_container  # Number of containers needed\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    members_not_shaking = 4\n    \n    # Total handshakes that would have occurred if everyone had shaken hands\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Handshakes that didn't happen because four members did not shake hands with each other\n    non_shakes = members_not_shaking * (members_not_shaking - 1) // 2\n    \n    # Handshakes that did happen are the total possible handshakes minus the handshakes that didn't happen\n    handshakes_happened = total_handshakes - non_shakes\n    \n    return handshakes_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Assume that the A appears in hundreds place, tens place and ones place, the value of A should satisfy:\n    # 100A + 10A + A + A = 10A + A or 111A + A = 11A\n    # Simplifying the equation gives us: 111A + A = 11A -> 112A = 11A -> 112A - 11A = 0 -> 101A = 0\n    # The only integer that satisfies this equation is A = 0\n    A = 0\n    return A\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    # Since it's a list of 10 numbers, the median will be the average of the 5th and 6th numbers\n    median_index = len(numbers) // 2\n    n = 20 - ((7 + 8) / 2)  # subtract the average of (n+7) and (n+8) to find n\n\n    mean = (n + (n+2) + (n+3) + (n+5) + (n+7) + (n+8) + (n+11) + (n+14) + (n+16) + (n+19)) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):  # because the original number is a single-digit number\n        if int(str(i) + '0') - i == 27:\n            return i\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x be the weight of the lightest apple, y be the weight of the medium apple, \n    # and z be the weight of the heaviest apple.\n\n    # From the problem we have:\n    # (y + z)/2 = 105   (1) -> If Tim eats the lightest apple, mean weight of the remaining two apples is 105 grams.\n    # (x + y)/2 = 70    (2) -> If Tim eats the largest apple, mean weight of the remaining two apples is 70 grams.\n\n    # We can express y and z in terms of x from equations (1) and (2):\n    # y + z = 210       (3) -> Multiply equation (1) by 2.\n    # x + y = 140       (4) -> Multiply equation (2) by 2.\n    # Subtract equation (4) from equation (3) to find z - x (the weight difference between the heaviest and the lightest apple):\n    \n    # (y + z) - (x + y) = 210 - 140\n    # z - x = 70\n\n    # Therefore, the weight difference between the heaviest apple and the lightest apple is 70 grams.\n    weight_difference = 70\n    return weight_difference\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Given that the fox is always 3rd in line when counting from any direction,\n    # the smallest possible grid that satisfies this condition is a 3x3 grid.\n    # The fox has to be in the center of this 3x3 grid to be 3rd in any direction.\n    # In a 3x3 grid, there are 9 animals.\n\n    # There are 9 animals, including the fox, in this configuration.\n    return 9\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of one-cent coins, y the number of two-cent coins, and z the number of five-cent coins\n    x, y, z = symbols('x y z')\n\n    # The height relationships between the coins\n    equation1 = Eq(6*x, 5*y)  # 6 one-cent coins = 5 two-cent coins\n    equation2 = Eq(4*x, 3*z)  # 4 one-cent coins = 3 five-cent coins\n\n    # Total number of coins used\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the system of equations for x, y, and z\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Finding the total value of the coins in cents\n    total_value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total distance covered by plum trees\n    # Distance = number of intervals between trees * distance per interval\n    total_distance = (41 - 1) * 4\n    \n    # Calculating the number of pine trees\n    # Number of pine trees = (total distance / distance between pine trees) + 1\n    # Adding one to include the tree at the beginning of the road\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11 - 11\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for blue_pens in range(2, 100, 2):\n        green_pens = (5 / 2) * blue_pens\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens > max_red_pens:\n            max_red_pens = int(red_pens)\n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    \n    # Damon spends 25% of his money on books\n    spent_on_books = initial_money * 0.25\n    money_left_after_books = initial_money - spent_on_books\n    \n    # Damon spends 20% of the rest on a DVD\n    spent_on_dvd = money_left_after_books * 0.20\n    money_left = money_left_after_books - spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # The number of monthly produced components\n    monthly_components = m / 12\n    return monthly_components\n\n# Example usage (the actual value of m needs to be provided when calling the function):\n# ans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(999999, 100000, -1):\n        if str(num) == str(num)[::-1] and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n    total_children_after_an_hour = boys_initial + girls_initial + children_joined\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of water in Container A as 'a'\n    a = symbols('a')\n\n    # According to the problem, Container A has 350mL more water than Container B\n    # So, Container B initially has 'a - 350' mL of water\n\n    # After spilling 500mL, Container A has 'a - 500' mL of water left\n    # At this point, Container B has twice as much water as Container A, which means that Container B has '2 * (a - 500)' mL of water\n\n    # However, Container B hasn't changed in amount, so it still has 'a - 350' mL of water\n    # We can set up the equation as 'a - 350 = 2 * (a - 500)'\n    equation = Eq(a - 350, 2 * (a - 500))\n\n    # Solving the equation for 'a'\n    solution = solve(equation, a)\n\n    # Returning the solution for 'a', the initial amount of water in Container A\n    return solution[0]\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    required_length_m = 1.83  # length required in meters\n    shortage_m = 0.1  # shortage in meters (10 cm converted to meters)\n\n    length_in_garage_m = required_length_m - shortage_m  # calculate length in garage in meters\n    length_in_garage_cm = length_in_garage_m * 100  # convert length in garage to centimeters\n\n    return length_in_garage_cm\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5, 3, 3, 2, 5]  # The repeating pattern\n    pattern_length = len(pattern)  # The length of the pattern\n\n    full_patterns_count = 41 // pattern_length  # Number of full patterns within 41 numbers\n    remaining_numbers_count = 41 % pattern_length  # Remaining numbers after full patterns\n\n    # Sum of the repeating pattern\n    sum_full_patterns = sum(pattern) * full_patterns_count\n    # Sum of the remaining numbers\n    sum_remaining = sum(pattern[:remaining_numbers_count])\n\n    # Total sum is the sum of full patterns plus the sum of remaining numbers\n    total_sum = sum_full_patterns + sum_remaining\n\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 24):\n        for five_p in range(0, 10):\n            if 2 * two_p + 5 * five_p == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator_sequence = [(9 + 10 + 11) / 8, (10 + 11 + 12) / 9, (11 + 12 + 13) / 10, (12 + 13 + 14) / 11]\n    denominator_sequence = [1 / 8, 1 / 9, 1 / 10, 1 / 11]\n    \n    numerator = numerator_sequence[0] - numerator_sequence[1] + numerator_sequence[2] - numerator_sequence[3]\n    denominator = denominator_sequence[0] - denominator_sequence[1] + denominator_sequence[2] - denominator_sequence[3]\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of marbles as 'x'.\n    x = symbols('x')\n\n    # He gave 3/8 of them to his friends, so he is left with 5/8 of the marbles.\n    remaining_after_friends = (5/8) * x\n\n    # He gave 5/7 of the remaining marbles to his brother.\n    remaining_after_brother = (2/7) * remaining_after_friends\n\n    # His cousin gave him 408 marbles.\n    final_count = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first.\n    equation = Eq(final_count, 2 * x)\n\n    # Solve the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "from itertools import combinations\n\ndef solution():\n    total_apples = 11\n    pile_count = 3\n    divisors = pile_count - 1\n    ways = list(combinations(range(1, total_apples), divisors))\n    \n    # Remove combinations in which any pile would end up with zero apples\n    # by ensuring that the differences between the pile divisors are less than total_apples\n    valid_ways = [way for way in ways if all(b - a > 1 for a, b in zip((0,) + way, way + (total_apples,)))]\n    \n    return len(valid_ways)\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = round(654876, -2)\n    num2 = round(279745, -2)\n\n    estimated_diff = num1 - num2\n\n    return estimated_diff\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_and_needles = 2540\n    sold_pins = 1820\n    fraction_of_needles_sold = 4 / 5\n\n    # Let's denote the initial number of needles as 'n' and pins as 'p'. \n    # We know that initially, total_pins_and_needles = p + n\n    # After selling, she has (total_pins_and_needles - sold_pins - fraction_of_needles_sold * n) pins \n    # and (n - fraction_of_needles_sold * n) needles left which are equal.\n    \n    # Set up the equations:\n    # p + n = total_pins_and_needles\n    # p - sold_pins = n - fraction_of_needles_sold * n\n    \n    # From the first equation, p = total_pins_and_needles - n\n    # Substitute p in the second equation:\n    # (total_pins_and_needles - n) - sold_pins = n - fraction_of_needles_sold * n\n    # total_pins_and_needles - sold_pins = n - fraction_of_needles_sold * n + n\n    # n = (total_pins_and_needles - sold_pins) / (2 - fraction_of_needles_sold)\n    \n    n = (total_pins_and_needles - sold_pins) / (2 - fraction_of_needles_sold)\n    \n    # But we are looking for the number of needles left, which is (1 - fraction_of_needles_sold) * n:\n    needles_left = (1 - fraction_of_needles_sold) * n\n    \n    return int(needles_left)\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_meters = 480\n\n    # Since the train passes the tree completely in 16 seconds,\n    # the speed of the train is the length of the train divided\n    # by the time it takes to pass the tree.\n\n    speed_m_per_s = length_meters / time_seconds\n    # Convert the speed from m/s to km/h for a more conventional train speed unit\n    speed_km_per_h = speed_m_per_s * 3.6\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # At age 14, Brian's father was 41. So the age difference is 41 - 14 = 27 years.\n    age_difference = 27\n\n    # We need to find the next time their ages are the reverse of each other's.\n    # If Brian's age has the format XY (two digits), his father's age would be YX (reverse).\n    # Let's take X and Y as Brian's age's ten's and unit's place respectively.\n\n    # Since the difference is constant, if Brian is XY, then his father is XY + age_difference.\n    # The next such age would be when Brian is more than 14.\n\n    # We loop through possible ages for Brian until we find the condition satisfied.\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        # Convert both ages to string to reverse and compare.\n        brian_age_str = str(brian_age)\n        father_age_str = str(father_age)\n\n        # Ensure that father's age is exactly 2 digits after Brian turns 15.\n        if len(father_age_str) == 2:\n            # Now check if Brian's age is the reverse of his father's.\n            if brian_age_str == father_age_str[::-1]:\n                return brian_age\n\n    # If no age is found, return None (though it should never come to this).\n    return None\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # We are looking for the number of partitions of the number 8.\n    # Since we are partitioning 8 into at least two parts, we need to exclude the partition (8).\n    # The partitions of 8 are (7,1), (6,2), (6,1,1), (5,3), (5,2,1), (5,1,1,1),\n    # (4,4), (4,3,1), (4,2,2), (4,2,1,1), (4,1,1,1,1), (3,3,2), (3,3,1,1),\n    # (3,2,2,1), (3,2,1,1,1), (3,1,1,1,1,1), (2,2,2,2), (2,2,2,1,1),\n    # (2,2,1,1,1,1), (2,1,1,1,1,1,1).\n    # Thus, there are 20 partitions of 8 that consist of at least two parts.\n    # However, since the order of summands doesn't matter in this case,\n    # the count above includes each possible permutation of a given partition.\n    # We only need the number of unique sets of numbers that sum to 8.\n    # Hence, the result in this specific case matches the number of partitions,\n    # which is 20 (since we don't need to account for order).\n    # Thus, the answer is 20.\n    return 20\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    fraction = 2 / 5\n    total = 30\n    result = fraction * total\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    percentage_failed = (failed_pupils / total_pupils) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pasta_choices = 4\n    sauce_choices = 3\n    topping_choices = 3\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    return 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    return max(numbers) - min(numbers)\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    per_bag = 12\n\n    full_bags, poppers_left = divmod(guests, per_bag)\n    \n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    return (7 ** 2023) % 10\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    getcontext().prec = 6  # Setting precision to 6 to ensure accuracy after rounding\n\n    # Compute the repeating decimals\n    neg_13_3 = Decimal(-40) / Decimal(3)  # -13.333...\n    four_09 = Decimal(4) + Decimal(1) / Decimal(99)  # 4.010101...\n    eleven_1 = Decimal(10) / Decimal(9)  # 11.111...\n\n    # Perform the calculation according to the given expression\n    numerator = (neg_13_3 ** Decimal(1/3)) * (four_09 ** Decimal(2))\n    denominator = Decimal('59.24') - eleven_1.sqrt()\n\n    result = numerator / denominator\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create the initial number by concatenating numbers from 1 to 30\n    long_number = ''.join(str(x) for x in range(1, 31))\n    \n    # Since we want the smallest number after removing 46 digits, we start removing from the left.\n    # The number after removing 46 digits\n    remaining_number = long_number[46:]\n    ans = int(remaining_number)\n    \n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = 999999\n    \n    # Difference between the least 5-digit palindrome and the greatest 6-digit palindrome number\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys are 1/4 of the total members\n    girls = total_members - boys  # Subtract the number of boys from total members to get the number of girls\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the price of one banana and a represent the price of one apple\n    b, a = symbols('b a')\n\n    # Ellie's equation: 2 bananas + 3 apples = £1.50\n    eq1 = Eq(2 * b + 3 * a, 1.50)\n\n    # Beth's equation: 3 bananas + 2 apples = £1.45\n    eq2 = Eq(3 * b + 2 * a, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, a))\n\n    # Find the price for 1 banana and 1 apple\n    price_for_one_of_each = solutions[b] + solutions[a]\n\n    return price_for_one_of_each\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_current_age = 8\n    lucy_current_age = 36\n    target_sum_age = 60\n\n    years_later = (target_sum_age - (sara_current_age + lucy_current_age)) / 2\n    return int(years_later)\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_person_benches = 6\n    three_person_benches = 9\n    \n    total_seating = (two_person_benches * 2) + (three_person_benches * 3)\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_amount = 16  # Since we are paying with £1 coins, we need to pay £16 (as we can't use a fraction of a coin)\n\n    change = paid_amount - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(99, 120, 2):\n        sum += i * sign\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = 201 * 1/7 / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for footballs and basketballs\n    f, b = symbols('f b')\n\n    # Initial ratio of footballs to basketballs is 2/5\n    # So, f = (2/5) * b\n    equation1 = Eq(f, (2/5) * b)\n\n    # After selling 16 basketballs, the ratio becomes 2/3\n    # So, f = (2/3) * (b - 16)\n    equation2 = Eq(f, (2/3) * (b - 16))\n\n    # Solve the two equations to get values of f and b\n    solutions = solve((equation1, equation2), (f, b))\n\n    # Total number of footballs and basketballs at first\n    total = solutions[f] + solutions[b]\n\n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure that Rona takes out at least a pair of gloves in the same color,\n    # she has to take out one glove more than the product of the number of colors by the number of gloves per color (since one pair is 2 gloves).\n    # Since there are 5 colors, and she needs to take out 1 glove of each color to have the 'worst-case' scenario where none matched yet\n    # she needs to take out:\n    # 1 glove of each color (5 colors) --> 5 gloves \n    # + 1 glove to ensure a match --> 1 glove\n\n    num_gloves = 5 + 1  # 1 more than one of each color to ensure a pair\n    return num_gloves\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n\n    if first_multiple < 30:\n        first_multiple += 8\n    if last_multiple > 82:\n        last_multiple -= 8\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter, sam = symbols('peter sam')\n\n    sam_original = peter + 40\n    sam_after_giving = sam_original - 0.2 * sam_original\n    peter_after_receiving = peter + 0.2 * sam_original\n\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n    peter_final = peter_after_receiving - 0.25 * peter_after_receiving\n\n    equation = Eq(sam_after_receiving - peter_final, 96)\n\n    solutions = solve((equation, Eq(sam_original - sam, 40)), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    # Given 13 straight lines\n    n = 13\n    \n    # Maximum number of junctions formed by n lines is n*(n-1)/2\n    ans = n * (n - 1) // 2\n    \n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in each group stage.\n    # In a single round-robin tournament, each team plays every other team exactly once.\n    # Thus, for n teams, the number of games is C(n, 2) = n * (n - 1) / 2.\n    # Since there are 4 groups and each group has 16 / 4 = 4 members:\n    group_games = (4 * (4 - 1) // 2) * 4\n\n    # Calculate the number of games in the knockout stage.\n    # This includes the quarterfinals (8 teams -> 4 games), semifinals (4 teams -> 2 games),\n    # and the final and third-place playoff (2 games).\n    knockout_games = 4 + 2 + 1 + 1  # quarterfinals + semifinals + final + third-place playoff\n\n    # Return the total number of games played in the contest.\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y be the current age of the younger brother.\n    x, y = symbols('x y')\n\n    # When the age of an older brother was the same as his younger brother's current age, y years ago\n    # the older brother's age was y, and the younger brother's age was 12.\n    # When y years have passed from now, the younger brother's age will be x, and\n    # the older brother's age will be x + y = 27.\n    equation1 = Eq(x - y, 12)\n    equation2 = Eq(x + y, 27)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x, y))\n\n    # The age of the older brother this year\n    return solution[x]\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's age this year\n    flora_age = 5\n    \n    # Flora's age two years ago\n    flora_age_2_years_ago = flora_age - 2\n    \n    # Father's age two years ago, which was 9 times Flora's age at that time\n    fathers_age_2_years_ago = 9 * flora_age_2_years_ago\n    \n    # Father's age this year\n    fathers_age = fathers_age_2_years_ago + 2\n\n    return fathers_age\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sushi each character ate\n    doggo, pusheen, bugcat = symbols('doggo pusheen bugcat')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(doggo + pusheen + bugcat, 189)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (doggo, pusheen, bugcat))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_increase = original_price * 0.10\n    spring_price = original_price + spring_increase\n    lantern_decrease = spring_price * 0.10\n    lantern_price = spring_price - lantern_decrease\n    \n    return lantern_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    teacher_speed = 12       # Teacher's speed in km/h\n    student_speed = 8        # Students' speed in km/h\n    total_time = 7.2 / 60    # Total time in hours\n\n    # Relative speed when teacher is going towards the front\n    relative_speed_going = teacher_speed - student_speed\n\n    # Relative speed when teacher is going towards the end\n    relative_speed_returning = teacher_speed + student_speed\n\n    # Let the distance from the back to the front be x km\n    # The time for teacher to reach the front is x/relative_speed_going hours\n    # The time for teacher to reach the back is x/relative_speed_returning hours\n    # The total time is the sum of time to go and return\n    # So we have the equation x/relative_speed_going + x/relative_speed_returning = total_time\n\n    # Calculate x from the equation\n    x = total_time / (1/relative_speed_going + 1/relative_speed_returning)\n\n    return x\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance from Mike's home to the office\n    x = symbols('x')\n    \n    # Speed traveling at 4 km/h, 20 minutes late\n    time_taken_at_4kmph = x / 4\n    correct_time = time_taken_at_4kmph - 20/60\n\n    # Speed traveling at 6 km/h, 10 minutes early\n    time_taken_at_6kmph = x / 6\n    correct_time = time_taken_at_6kmph + 10/60\n\n    # Creating an equation based on the above two equations\n    equation = Eq(time_taken_at_4kmph - 20/60, time_taken_at_6kmph + 10/60)\n\n    # Solving the equation for x\n    distance = solve(equation, x)\n\n    return distance[0]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n    \nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        digits = list(str(i))\n        count += digits.count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for number in range(2, 51, 2):  # The first 25 even numbers\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    # The value of 1 pound in pence\n    pounds_to_pence = 1 * 125\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_price = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_price\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Ken took 1 less than half of the remaining pieces - reverse the operation\n    before_ken = (remaining + 1) * 2\n    # Nini took 3 more than half of the remaining pieces - reverse the operation\n    remaining = before_ken\n    before_nini = (remaining - 3) * 2\n    # Ivy took 2 less than half of the pieces left - reverse the operation\n    remaining = before_nini\n    before_ivy = (remaining + 2) * 2\n    # Eddie took 1 more than half of the pieces - reverse the operation\n    remaining = before_ivy\n    before_eddie = (remaining - 1) * 2\n    \n    return before_eddie\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance to climb is 18 metres.\n    total_distance = 18\n\n    # Distance climbed during the day for the first 5 days.\n    daily_climb = 7\n\n    # On the 6th day, the snail climbs only 3 metres.\n    sixth_day_climb = 3\n\n    # Calculate the distance climbed after 5 days.\n    distance_after_5_days = daily_climb * 5\n\n    # Calculate the remaining distance to climb after the 6th day.\n    remaining_distance_after_6_days = total_distance - distance_after_5_days - sixth_day_climb\n\n    # Since the snail manages to climb out on the 6th day, it does not slide down anymore.\n    # Therefore, the slide down distance is the difference between the daily climb and the remaining distance.\n    nightly_slide = daily_climb - remaining_distance_after_6_days\n\n    return nightly_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "def solution():\n    from itertools import permutations\n    char_list = ['C', 'Y', 'Z', 'Z']\n    perms = set(permutations(char_list))\n    return len(perms)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all measurements to meters\n    height_m = 5\n    height_cm = 120 / 100  # 120 cm to meters\n    height_mm = 50 / 1000  # 50 mm to meters\n    height_ft = 8 * 0.3048  # 8 feet to meters\n\n    # Define the range for average human height in meters, roughly between 1.2m and 2.2m\n    min_height = 1.2\n    max_height = 2.2\n\n    # Check which estimations might be correct\n    ans = []\n    if min_height <= height_m <= max_height:\n        ans.append('5m')\n    if min_height <= height_cm <= max_height:\n        ans.append('120cm')\n    if min_height <= height_mm <= max_height:\n        ans.append('50mm')\n    if min_height <= height_ft <= max_height:\n        ans.append('8 feet')\n\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be x\n    # Therefore, the number of girls is 3x\n    # Each girl took 2 paintbrushes, and each boy took 3 paintbrushes\n    # Total number of paintbrushes is 99\n    # Equation: 2*(3x) + 3*x = 99 => 6x + 3x = 99 => 9x = 99\n    # Solve for x\n    x = 99 // 9  # Number of boys\n    \n    # Number of girls\n    num_girls = 3 * x\n    \n    return num_girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 16\n    students_C = 20\n\n    # Compute greatest common divisor (GCD) between three numbers\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_all = 82\n    \n    total_score_boys = total_boys * average_boys\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_girls = total_score_all - total_score_boys\n    \n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2,3,5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    nth_term = first_term + (15 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate the total population\n    # N: total number of fish in the pond\n    # n1: number of fish caught the first time (marked ones)\n    # n2: number of fish caught the second time\n    # m: number of marked fish caught the second time\n    \n    n1 = 100\n    n2 = 200\n    m = 25\n    \n    # Using the Lincoln-Petersen estimator N = (n1 * n2) / m\n    N = (n1 * n2) / m\n    \n    return int(N)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    # Calculate total food required for 12 rabbits for 15 days\n    total_food = rabbits_initial * days_initial\n\n    # Calculate how many days 20 rabbits would be fed with the same total food\n    days_final = total_food / rabbits_final\n\n    return days_final\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of sweets\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chloe + maggie + lily, 187)       # Chloe, Maggie, and Lily have 187 sweets\n    equation2 = Eq(maggie + lily + george, 327)      # Maggie, Lily, and George have 327 sweets\n    equation3 = Eq(george, 5 * chloe)                # George has 5 times as many sweets as Chloe\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    # Calculate the total number of sweets all four of them have\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes from 1 to 20\n    sum_cubes_20 = (sum(range(1, 21)))**2\n    \n    # Calculate the sum of cubes from 1 to 9\n    sum_cubes_9 = (sum(range(1, 10)))**2\n    \n    # The result is the difference between the two sums\n    ans = sum_cubes_20 - sum_cubes_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2\n    fraction = 1 / 2\n    total_dollars = whole_number + fraction\n\n    quarters_in_one_dollar = 4\n    total_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    # Total score for 5 assignments with an average of 90\n    total_score = 5 * 90\n    \n    # Sum of scores in the first 4 assignments\n    sum_of_first_four = 96 + 85 + 89 + 92\n    \n    # Score of the fifth assignment\n    fifth_score = total_score - sum_of_first_four\n    \n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    n = 1\n    while True:\n        if n % 4 == 3 and n % 5 == 4 and n % 7 == 6:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Initial time when Abigail gets up\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # Time taken for subsequent activities\n    breakfast_time = timedelta(minutes=25)\n    eating_time = timedelta(minutes=10)\n    journey_time = timedelta(minutes=35)\n    late_time = timedelta(minutes=5)\n    \n    # Calculate the total time until she arrives (including being late)\n    arrival_time = get_up_time + breakfast_time + eating_time + journey_time + late_time\n    \n    # Registration time is the time of arrival minus the late time\n    registration_time = arrival_time - late_time\n    \n    # Formatting the result\n    ans = registration_time.strftime(\"%H:%M\")\n    \n    return ans\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To guarantee 5 different colors with at least 10 pencils for each color,\n    # we can draw the worst-case scenario:\n    # 1. Draw 10 pencils from 4 different colors -> 4 * 10\n    # 2. The next color must have at least 10 pencils to fulfill the condition.\n    # So we take 9 pencils from each of the remaining 5 colours and then any 1 more pencil.\n    \n    min_pencils = 4 * 10 + (5 * 9) + 1\n    return min_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    coaches_needed = (pupils + coach_capacity - 1) // coach_capacity\n    return coaches_needed\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = (144 + 204) * 2\n    count_wheats = 116\n    # Subtracting the 4 corner wheats as they are already accounted in the perimeter\n    spaces = count_wheats - 4\n    distance_between_wheats = perimeter / spaces\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5_power_20 = (5 ** 20) % 10\n    last_digit_7_power_30 = (7 ** 30) % 10\n    last_digit_expression = (last_digit_5_power_20 * last_digit_7_power_30) % 10\n    return last_digit_expression\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    length1 = 39\n    length2 = 52\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of girls who can swim (g_swim), \n    # girls who cannot swim (g_cant_swim), boys who can swim (b_swim), \n    # and boys who cannot swim (b_cant_swim)\n    g_swim, g_cant_swim, b_swim, b_cant_swim = symbols('g_swim g_cant_swim b_swim b_cant_swim')\n\n    # The number of girls in total (g_total)\n    g_total = g_swim + g_cant_swim\n\n    # The number of boys in total (b_total)\n    b_total = b_swim + b_cant_swim\n\n    # Given relations\n    equation1 = Eq(g_total + 90, b_total)                    # There are 90 more boys than girls\n    equation2 = Eq(g_swim / g_cant_swim, 31 / 49)            # The ratio of the number of girls who can swim to cannot\n    equation3 = Eq(b_swim, b_cant_swim - 120)                # The number of boys who can swim is 120 less than cannot\n    equation4 = Eq(g_total + b_total, 1690)                  # Total number of pupils\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (g_swim, g_cant_swim, b_swim, b_cant_swim))\n\n    # Calculate the number of pupils who cannot swim\n    non_swimmers = solutions[g_cant_swim] + solutions[b_cant_swim]\n\n    return non_swimmers\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote \"a\" as the score for an A grade and \"b\" as the score for a B grade.\n    a, b = symbols('a b')\n\n    # We have two equations based on Simon and Peter's score\n    equation1 = Eq(4*a + 4*b, 36)  # Simon's score equation\n    equation2 = Eq(2*a + 3*b, 22)  # Peter's score equation\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the score for three A grades and five B grades using the solved scores for A and B.\n    score = 3*solutions[a] + 5*solutions[b]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # The problem does not specify if Joe gives away any squares.\n    # Assuming Joe does not give away any squares, he still has all of them.\n\n    total_squares = 16  # Total number of squares in the chocolate bar\n    return total_squares\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Original ratio\n    equation1 = Eq(pip/bud, 4/7)\n    \n    # Ratio after Santa gave Bud five sweets\n    equation2 = Eq((pip)/(bud + 5), 8/15)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n    \n    total_children = laura_position + children_between + amanda_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from itertools import permutations\n\n    # Check if the number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(46) if is_prime(i)]\n\n    # Generate all permutations of three different prime numbers\n    for perm in permutations(primes, 3):\n        a, b, c = perm\n\n        # Check the conditions given by A, B, and C\n        if not (a + b == c or a + c == b or b + c == a):  # A's statement\n            if b - 1 == 7:  # B's statement\n                # Teacher conformation about forming a correct addition equation with 2*C\n                if any(x + y == 2 * c for x, y in permutations([a, b, c], 2)):\n                    return a + b + c\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Original ratio between Mary and Alexis\n    ratio_marry_alexis = Eq(marry / alexis, 7 / 5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = marry * 0.2\n    alexis_gave = alexis * 0.2\n\n    # Charlotte's stickers increased by 80%\n    charlotte_new = charlotte * 1.8\n\n    # After giving away stickers, Mary has 20 stickers more than Charlotte\n    final_marry = marry - marry_gave\n    final_alexis = alexis - alexis_gave\n    condition_marry_charlotte = Eq(final_marry - (charlotte_new - marry_gave - alexis_gave), 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_marry_alexis, condition_marry_charlotte), (marry, alexis, charlotte))\n\n    # Return the initial number of stickers Alexis had\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n\n    return people_on_train_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_in_seconds = 24 * 60 * 60  # 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute\n    part_of_day = (1/4) * (1/6) * (1/8)\n    seconds = day_in_seconds * part_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime, composite, nor zero (assuming number is positive)\n    D = 0  # 2 less than the smallest prime number (A = 2, D = A - 2)\n    E = 9  # largest composite number up to 10\n    F = 5  # only factors are 1 and 5 (prime number, but follows the specific rule given)\n    G = 4  # largest factor of 8 that is not 8 itself\n    H = 6  # lowest multiple of 6 that is not 0\n\n    phone_number = f'{A}{B}{C}{D}{E}{F}{G}{H}'\n    return phone_number\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            for z in range(10):\n                pip_number = int(f\"{x}{y}{z}{x}\")\n                bud_number = int(f\"{x}{z}{y}{x}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let's use the relationship: Grass per day * Number of cows * Number of days = Constant\n    # From the problem we have two equations:\n    # 1. 25 cows * 10 days = Constant (K)\n    # 2. 15 cows * 20 days = Constant (K)\n    # We also want to find:\n    # How many cows (C) * 50 days = Constant (K)\n    \n    # Get the constant using either of the provided scenarios (let's use the first one)\n    K = 25 * 10  # This is our constant amount of grass\n    \n    # Now we can solve for C in the equation C * 50 = K\n    C = K / 50\n    \n    return C\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    n = 1\n    while n * (n + 1) // 2 <= 95:\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of oranges as 'o' and the number of lemons as 'l'\n    o, l = symbols('o l')\n\n    # Initial ratio of oranges to lemons is 3:5\n    # After selling 48 oranges, the ratio becomes 1:2\n    # We can form the following equations based on the problem statement\n    equation1 = Eq(o / l, 3/5)\n    equation2 = Eq((o - 48) / l, 1/2)\n\n    # Now we can solve these equations to find the original number of lemons\n    solutions = solve((equation1, equation2), (o, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n\n    # Total number of people including Eddie, mom, and dad\n    total_people = 3\n\n    # Eddie, mom, and dad can be arranged among themselves in 3! ways\n    family_arrangements = math.factorial(total_people)\n\n    # Since the family wants to stand together, treat them as a single unit.\n    # Now consider the family as one unit. The number of ways to arrange this\n    # unit with respect to the other people is the number of different places\n    # the family can be placed in line.\n\n    # If there are no other people, there would be just 1 way to place the family.\n    # But since the family is together, we consider that there might be other people\n    # in line. \n\n    # For simplicity, though, since no other people count was specified,\n    # and the family must stand together, we consider the positions the family\n    # can stand in relative to imaginary people. This would just be 1 since\n    # they want to be next to each other, and their relative positions would\n    # not matter with no other people. Hence, 1 way to place this unit.\n\n    # If n is the number of other people, there would be (n+1) places where\n    # the family could stand.\n\n    # No other people information is given, so we assume the number of ways\n    # to place the family (as a single unit) in line with or without considering\n    # other people is just 1.\n\n    # Principle of multiplication for these two independent situations\n    ways_to_place_family_with_other_people = 1\n\n    # Total ways\n    total_ways = family_arrangements * ways_to_place_family_with_other_people\n\n    return total_ways\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = (5/3) * second_day\n    \n    total_sold = first_day + second_day + third_day\n    \n    return int(total_sold)\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits (three 2s and two 3s)\n    repeating_2 = 3   # Number of repetitions for digit 2\n    repeating_3 = 2   # Number of repetitions for digit 3\n    # Calculate permutations considering repetitions\n    permutations = factorial(total_digits) // (factorial(repeating_2) * factorial(repeating_3))\n    # Since the first digit cannot be zero, all permutations are valid four-digit numbers\n    return permutations\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # We're treating the maths books and English books as single units initially\n    # because they have to be lined up together. So we have 3 units (3 maths books, \n    # 2 English books, and 3 other books) plus 1 unit for the English books.\n    total_units = 4 \n\n    # We first calculate the permutations of these 4 units\n    unit_permutations = factorial(total_units)\n    \n    # Within those units, we can have 3! permutations of the maths books\n    # and 2! permutations of the English books themselves.\n    maths_permutations = factorial(3)\n    english_permutations = factorial(2)\n\n    # The total permutations are the permutations of the units times the permutations\n    # within the maths and English units.\n    total_permutations = unit_permutations * maths_permutations * english_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_percent = 30\n    member_discount = 100\n    sales_tax_percent = 10\n    \n    price_after_discount = original_price * (1 - discount_percent / 100)\n    price_after_member_discount = price_after_discount - member_discount\n    \n    final_price = price_after_member_discount * (1 + sales_tax_percent / 100)\n    \n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_needed_per_cake = 200 / 12\n    cakes_possible_with_flour = 250 / flour_needed_per_cake\n    return int(cakes_possible_with_flour)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_days = 12\n    work_done = 0\n\n    # Calculate work done by both until the midpoint (when Kevin takes off)\n    mid_point = total_days / 2\n    work_done_by_both = (ivy_rate + kevin_rate) * mid_point\n\n    # After midpoint, only Ivy works\n    remaining_work = 1 - work_done_by_both\n    days_ivy_alone = remaining_work / ivy_rate\n\n    # Total days when Kevin was on leave \n    kevin_leave_days = total_days - days_ivy_alone\n\n    return kevin_leave_days\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Original relationship Ophelia had 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After Penelope bought 21 more, she had 5/8 of the diamonds Ophelia had\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    # Given 20:32 = x:8\n    \n    # Cross multiply to find x\n    x = (20 * 8) / 32\n\n    return int(x)\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    ans = kilograms * grams_per_kilogram\n    return ans\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to ensure that at least one pair of the same color socks is selected\n    # In the worst case, she chooses a sock of each color first, which will be 2 socks (1 black and 1 red)\n    # The next sock she picks has to match one of the ones she's already picked\n    # Therefore, it's the number of initial choices (2 socks of different colors) plus 1 more to ensure a pair\n    \n    initial_choices = 2\n    return initial_choices + 1\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n\n    arrangements = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n    \n    return arrangements\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 0.10\n    new_price = 1.00\n    \n    percentage_increase = ((new_price - original_price) / original_price) * 100\n    \n    return round(percentage_increase, 2)\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # let divisor be x, then dividend = quotient * divisor + remainder\n    # since we need minimum dividend, we should have minimum divisor, which is remainder + 1\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = (2015 * 2015) - (2016 * 2014)\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_no_foil = 9\n\n    not_foil_wrappers = total_biscuits - foil_wrappers\n    chocolate_biscuits = chocolate_with_foil + not_chocolate_no_foil - not_foil_wrappers\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # we know that b + t = 300\n    equation1 = Eq(b + t, 300)\n\n    # Also, each tricycle has 3 wheels and each bicycle has 2 wheels\n    # The total number of tricycle wheels is 180 more than the total number of bicycle wheels.\n    # which translates to 3 * t = 2 * b + 180\n    equation2 = Eq(3 * t, 2 * b + 180)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Since there are 2 grey rabbits for every pattern\n    # and we have 14 grey rabbits, we have 14 / 2 = 7 patterns\n    patterns = 14 // 2\n    \n    # Each pattern consists of 1 black, 2 white, and 2 grey rabbits\n    # So, we multiply the number of patterns by the total rabbits in one pattern\n    rabbits_per_pattern = 1 + 2 + 2\n    total_rabbits = patterns * rabbits_per_pattern\n\n    # We also must account for the possibility of an additional incomplete pattern\n    # Since a complete pattern ends with 2 grey rabbits, any additional rabbits\n    # would start with a black rabbit, followed by 2 white, and finally grey rabbits.\n    # We already have 14 grey rabbits, which accounts for full patterns, hence\n    # there can only be at most 1 additional black and 2 additional white rabbits\n    # for a total of at most 3 additional rabbits to the total count.\n    max_additional_rabbits = 3\n    \n    return total_rabbits + max_additional_rabbits\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    # Define the number based on the description\n    number = 4 + 0.6 + 0.07 + 0.009\n    \n    # Round off the number to one decimal place\n    rounded_number = round(number, 1)\n    \n    # Check if Tongtong's answer is correct\n    is_tongtong_correct = rounded_number == 9764.0\n    \n    # Return the correct answer\n    return rounded_number if not is_tongtong_correct else 'Tongtong is correct'\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    quarter_of_398 = 398 / 4\n    return quarter_of_398\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of crystals Jason had at first\n    x = symbols('x')\n\n    # Jason sold half of his crystals plus 10 to Yvonne\n    sold_to_yvonne = (x / 2) + 10\n\n    # After mining more crystals in Singapore, his total is x - sold_to_yvonne + 20\n    after_mining = x - sold_to_yvonne + 20\n\n    # After selling 14 crystals to Cherlyn, he has 35 crystals left\n    # So, we set up the equation as: after_mining - 14 = 35\n    equation = Eq(after_mining - 14, 35)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Since there's only one solution, we take the first element [0]\n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Count how many 5s are in the factorization\n    fives_count = 15\n    # Count how many 2s are in the factorization\n    twos_count = 10\n    \n    # The number of zeros at the end of A is determined by the number of pairs of 5*2\n    zeros_count = min(fives_count, twos_count)\n    \n    return zeros_count\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    count = 0\n    # Generate all permutations of the digits\n    for perm in permutations(digits):\n        # For each permutation, there are 4 possible positions for the decimal point\n        count += 4\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_and_Bala = 2 # because Bala is directly behind Ali\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_of_Bala\n    return total_people\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be v (metres per minute), original time be t (minutes)\n    # Let the distance be d (metres), which is the same in both cases\n    v, t, d = symbols('v t d')\n\n    # When speed increases by 25%, time decreases by 20 minutes\n    equation1 = Eq(d, v * (t - 20))\n    # New speed is 1.25 times the original speed\n    new_speed1 = 1.25 * v\n\n    # Equation with new speed and decreased time\n    equation2 = Eq(new_speed1 * (t - 20), d)\n\n    # When speed decreases by 45 metres/minute, time increases by 75%\n    new_speed2 = v - 45\n    # New time is 1.75 times the original time\n    new_time = 1.75 * t\n\n    # Equation with decreased speed and increased time\n    equation3 = Eq(new_speed2 * new_time, d)\n\n    # Now we have 3 equations and 3 unknowns (v, t, d)\n    # We can solve these equations simultaneously to find the values\n    solutions = solve((equation1, equation2, equation3), (v, t, d))\n\n    # We need the distance d\n    return solutions[d]\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Cars can either be black or blue, so the number of black cars equals total minus the blue ones.\n    black_cars = total_cars - blue_cars\n    \n    # Since the Fords can either be black or blue as well, and we know the number of black Dodges,\n    # the number of black Fords is the number of black cars minus the number of black Dodges.\n    black_fords = black_cars - black_dodges\n\n    # As the total number of Fords is known, the number of blue Fords is the total number of Fords\n    # minus the number of black Fords.\n    blue_fords = fords - black_fords\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    cost_per_plant_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # convert pounds to pence to match units with cost_per_plant\n\n    number_of_plants = budget_pence // cost_per_plant_pence  # use floor division to get the number of plants\n\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # Start from the smallest composite number after 1, which is 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n\n        # Check if all four numbers A, B, C, D are composite\n        if (any(A % i == 0 for i in range(2, A)) and\n            any(B % i == 0 for i in range(2, B)) and\n            any(C % i == 0 for i in range(2, C)) and\n            any(D % i == 0 for i in range(2, D))):\n            return A + B + C + D\n        A += 1\n        \nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # The magician must pick all balls of one color and one additional ball\n    # to ensure at least one of each color is picked.\n\n    # Number of balls of each color\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Calculate the minimum number of balls needed to pick\n    # We use the Pigeonhole Principle by considering the worst-case scenario:\n    # picking all balls of the largest group (green balls) plus one more\n    min_picks = green_balls + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    number = 0\n    while True:\n        if number % 11 == 5 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_of_work = 5  # Monday to Friday\n\n    total_earnings = daily_earnings * days_of_work\n\n    return total_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = 2\n    total_score = 125\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = (correct * correct_mark) - (wrong * wrong_mark)\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    return math.gcd(math.gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # The total number of hours on the clock is 12 (1 to 12)\n    clock_hours = 12\n    \n    # Eddie counts to 30, and this should loop on the clock\n    # Find the remainder when dividing the count number by clock_hours\n    counted_hours_remainder = 30 % clock_hours\n    \n    # Since he stops at 10, we can count backwards to find the starting point\n    # We subtract the remainder from 10\n    # If the result is <= 0, we need to add 12 to get the correct hour on the clock\n    starting_hour = 10 - counted_hours_remainder\n    if starting_hour <= 0:\n        starting_hour += clock_hours\n    \n    return starting_hour\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    # According to the problem, we need to find the least number of apples the kid with the most can get\n    # while each of the 8 children gets at least one apple.\n    # We can approach this problem using the pigeonhole principle.\n    \n    total_apples = 50\n    children_count = 8\n    \n    # Since each child needs to get at least one apple,\n    # we distribute one apple to each of the children first.\n    distributed_apples = children_count\n    \n    # Now we subtract the distributed apples from the total,\n    # and try to find out how many apples are left to distribute.\n    apples_left = total_apples - distributed_apples\n    \n    # According to the pigeonhole principle, if we distribute the remaining apples evenly among the children,\n    # the kid who gets the most apples will have the remaining apples divided by the number of children plus one\n    # (since we already gave each child one apple).\n    # However, the question asks for the least number, so we want to give out the remaining apples such that\n    # seven of the children get as few as possible (in this case, one each), leaving the most for the eighth child.\n    # So, we divide the remaining apples by the number of children minus one (since one child will get the most).\n    \n    apples_to_most_kid = (apples_left // (children_count - 1)) + 1\n    return apples_to_most_kid\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for i in range(10):\n        if (2 + 9 + 6 + i + 1 + 2) % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for _ in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    return sequence[-1]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    base_number = (two_thirds * 3) / 2\n    three_quarters = (base_number * 3) / 4\n\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        total = sum(range(23, 2 * k, 2))\n        if (total ** 0.5).is_integer():\n            return int(total ** 0.5)\n        k += 1\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'alan' be the number of cards Alan has and 'bob' be the number of cards Bob has originally\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan, so we have bob = alan + 15\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards, so now Bob has (bob + 25) cards\n    # After Colin gives Bob the cards, Bob has 3 times as many as Alan, so we have bob + 25 = 3 * alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_1 = 423 % 4\n    remainder_2 = 326 % 4\n    remainder_product = (remainder_1 * remainder_2) % 4\n    return remainder_product\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = original_amount + (saved_per_day * days_saved) - lent_to_brother - spent_on_snacks\n\n    return total_saved\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_cow_per_day = 1\n\n    total_parts_eaten = cows * days * parts_per_cow_per_day\n\n    return total_parts_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote b as the cost of a banana and a as the cost of an apple\n    b, a = symbols('b a')\n\n    # Ellie's transaction gives us the first equation: 2b + 3a = 3 dollars\n    equation1 = Eq(2 * b + 3 * a, 3)\n\n    # Beth's transaction gives us the second equation: 3b + 2a = 4 dollars\n    equation2 = Eq(3 * b + 2 * a, 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Annabella's cost for 10 bananas and 10 apples\n    cost = 10 * solutions[b] + 10 * solutions[a]\n\n    return cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbols\n    big, small, amount = symbols('big small amount')\n    \n    # equations\n    equation1 = Eq(big - amount, 12 * (small - amount))\n    equation2 = Eq(big, 89)\n    equation3 = Eq(small, 45)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (big, small, amount))\n    \n    return solutions[amount]\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Linda's speed for the first 2 hours\n    speed_first_part = 40  # km/h\n    \n    # Distance Linda drove at the first speed\n    distance_first_part = speed_first_part * 2  # 2 hours * 40 km/h\n    \n    # Distance for the remaining part of the trip\n    distance_remaining_part = 280  # km\n    \n    # Linda's speed for the remaining part of the trip\n    speed_remaining_part = 70  # km/h\n\n    # Time taken to cover the remaining distance\n    time_remaining_part = distance_remaining_part / speed_remaining_part  # 280 km / 70 km/h\n    \n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining_part  # 2 hours + time for remaining part\n    \n    # Total distance driven\n    total_distance = distance_first_part + distance_remaining_part\n    \n    # Average speed calculation\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that both trains are not late\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability that at least one train is late is 1 minus the probability that both trains are not late\n    prob_at_least_one_late = 1 - prob_both_not_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    men_percentage = 37\n    women_to_children_ratio = 4 / 5\n    men_to_children_difference = 12\n\n    # If x is the total number of visitors, then 0.37x is the number of men.\n    # Let the children be c, then men = c + 12.\n    # Hence, 0.37x = c + 12.\n    # Women are in the ratio of 4 to 5 with children.\n    # Total = Men + Women + Children = x = 37% of x + 4(k) + 5(k) where k is the ratio multiple for women.\n    # Solving for x, we can express women as 4(k) and children as 5(k).\n\n    # From men percentage and men_to_children_difference, we get:\n    # 0.37x = 5k + 12 - (1)\n    # We know that the rest 63% are women and children:\n    # 0.63x = 9k - (2)\n    # Dividing (1) by (2), we obtain:\n    # (5k + 12) / 9k = 37 / 63\n    # After solving for k, we can find the number of women using 4k.\n\n    # Solve for k:\n    k = (37 / 63) / ((5 / 9) + (12 / (9 * men_to_children_difference)))\n\n    # Now find the number of women:\n    women = 4 * k\n\n    return int(women)\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_2_digit_numbers = 90  # 2-digit numbers: 10-99\n    without_six = 8 * 8  # Excluding 6 from tens and ones place\n    \n    \n    numbers_with_at_least_one_six = total_2_digit_numbers - without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    difference = end_date - start_date\n    return difference.days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def last_digit(n):\n    return n % 10\n\ndef solution():\n    last_digit_2023_squared = last_digit(2023**2)\n    last_digit_2_pow_2023 = last_digit(2**2023)\n\n    ans = last_digit((last_digit_2023_squared + last_digit_2_pow_2023)**3)\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_A = 48\n    speed_B = 72\n    combined_speed = speed_A + speed_B\n    time_to_meet = distance / combined_speed\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "from math import comb\n\ndef solution():\n    num_lines = 13\n    max_intersections = comb(num_lines, 2)\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # The last digit of a number after multiplication only depends on the last digits\n    # of the numbers being multiplied.\n    last_digit_5s = 5 # The last digit of any power of 5 is always 5\n    last_digit_7s = pow(7, 20, 10) # The last digit of 7 raised to any power can be \n                                   # found using modular exponentiation\n\n    last_digit = (last_digit_5s * last_digit_7s) % 10 # Multiply the last digits \n                                                      # and take the modulo to find the last digit\n    return last_digit\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Since AB = CD = 14 cm, they are the diameters of the semicircles and quadrants\n    # The radius r for both the semicircles and quadrants is half the diameter, r = 7 cm\n    radius = 14 / 2\n\n    # The perimeter of a semicircle with radius r is πr + diameter\n    # Since we have 2 semicircles, their combined perimeter is 2(πr)\n    semicircles_perimeter = 2 * (22/7) * radius\n\n    # The perimeter of a quadrant with radius r is (πr/2) + 2r (because it's a quarter of a circle)\n    # Since we have 2 quadrants, their combined perimeter is 2((πr/2) + 2r)\n    quadrants_perimeter = 2 * ((22/7) * radius / 2 + 2 * radius)\n\n    # Adding up the perimeters of the semicircles and quadrants gives us the total perimeter\n    total_perimeter = semicircles_perimeter + quadrants_perimeter\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n    \n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    sold_first_day = total / 3\n    remaining_after_first_day = total - sold_first_day\n    sold_second_day = 3 / 5 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - sold_second_day\n\n    equation = Eq(remaining_after_second_day, 48)\n    solution = solve(equation, total)\n\n    return solution[0]\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n    \n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n    \n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknowns\n    pasta_price = 95  # in pence\n    rice_price = symbols('rice_price')\n    \n    # 6 packets of pasta plus 5 packets of rice equals 1170 pence (£11.70)\n    total_cost_equation = Eq(6 * pasta_price + 5 * rice_price, 1170)\n    \n    # Solve for the price of one packet of rice\n    solutions = solve(total_cost_equation, (rice_price))\n    \n    # Get the price of the rice (converted from pence to pounds)\n    rice_price_pence = solutions[rice_price]\n    \n    return rice_price_pence\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    # Calculate Least Common Multiple (LCM) of 3, 5 and 7 to find the smallest number\n    # that is divisible by all three numbers.\n    lcm = 3 * 5 * 7  # LCM(3,5,7)\n\n    # Since the hundred's digit is already 6, we should find the smallest multiple of the LCM\n    # greater than 600 but less than 700, because it's a three-digit number starting with 6.\n    # The LCM is 105, so we add multiples of 105 to 600 until we find a valid number\n    # within the specified range.\n    number = 600\n    while number % lcm != 0 or number < 600 or number > 699:\n        number += 105\n\n    # Return the resulting three digit number divisible by 3, 5 and 7\n    return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1 / 20  # energetic decorates 1 house in 20 days\n    lazy_rate = symbols('lazy_rate')  # we don't know the lazy rate yet\n\n    combined_rate = 1 / 12  # together they decorate 1 house in 12 days\n\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    solutions = solve(equation, lazy_rate)\n\n    lazy_days = 1 / solutions[0]  # reciprocal of lazy_rate to find the days\n\n    return lazy_days\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    num_numbers = 15\n\n    average = total_sum / num_numbers\n    smallest_number = average - (num_numbers - 1) / 2\n    largest_number = average + (num_numbers - 1) / 2\n\n    return smallest_number + largest_number\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1  # Start with the smallest possible number of pies\n    while not (num_pies % 4 == 0 and num_pies % 6 == 0):\n        num_pies += 1\n    return num_pies\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start with the given fraction\n    fraction = 13 / 10\n\n    # Calculate 'a' by subtracting 1 from the fraction and taking its reciprocal\n    a = int(1 / (fraction - 1))\n\n    # Subtract a from (fraction - 1) to find the fraction corresponding to 1/(b + 1/c)\n    fraction_bc = (fraction - 1) - 1/a\n\n    # Calculate 'b' by taking the reciprocal of fraction_bc and converting to int\n    b = int(1 / fraction_bc)\n\n    # Calculate 'c' by handling the fraction 1 / (fraction_bc - 1/b)\n    c = int(1 / (fraction_bc - 1/b))\n\n    # Return the value of a + 2b + 3c\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def count_digit_occurrences(n, digit):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count(str(digit))\n    return count\n\ndef solution():\n    total_pages = 200\n    digit_to_count = 4\n    return count_digit_occurrences(total_pages, digit_to_count)\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)  \n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        oddtastic = all(int(digit) % 2 != 0 for digit in str(i))\n        if oddtastic:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # a when divided by 8 gives a remainder of 6 can be represented as a = 8k + 6\n    # b when divided by 8 gives a remainder of 7 can be represented as b = 8l + 7\n    # When adding a and b, we get (a + b) = 8k + 6 + 8l + 7 = 8(k + l) + 13\n    # Dividing (a+b) by 8 will give a remainder of 13 % 8, as 8(k + l) is divisible by 8\n    remainder = (13 % 8)\n    \n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / num_blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_length = 0\n    digit = 1\n    target = 2019\n    \n    while current_length < target:\n        current_length += len(str(digit))\n        if current_length < target:\n            digit += 1\n    \n    position = current_length - target\n    return int(str(digit)[len(str(digit)) - position - 1])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Maximum number of tries = Sum of attempts for each key starting from the last key\n    # For the last key 1 try, second last key 2 tries, ... , first key 11 tries\n    # This forms an arithmetic series with first term = 1, last term = 11, and number of terms = 11\n    first_term = 1\n    last_term = 11\n    num_keys = 11\n    \n    # Sum of arithmetic series formula: sum = (n/2) * (first_term + last_term)\n    max_tries = (num_keys / 2) * (first_term + last_term)\n    \n    return int(max_tries)\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits we have\n    identical_twos = 3  # Number of 2's we have\n    identical_threes = 2 # Number of 3's we have\n\n    # Calculate the total permutations for the four-digit numbers\n    # Using the formula for permutations with identical items: n! / (n1! * n2! * ...)\n    total_permutations = factorial(total_digits) // (factorial(identical_twos) * factorial(identical_threes))\n\n    # Subtract the permutations where all 3 '2's are used because we only forming four-digit numbers\n    permutations_with_all_twos = factorial(total_digits - 1) // (factorial(identical_twos - 1) * factorial(identical_threes))\n\n    # The answer is total permutations minus the permutations with all '2's\n    ans = total_permutations - permutations_with_all_twos\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # basket mass converted to kilograms from grams\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4  # number of kittens\n\n    kittens_total_mass = kitten_mass_kg * number_of_kittens\n    cat_mass = total_mass_kg - basket_mass_kg - kittens_total_mass\n\n    return cat_mass\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n\n    new_price = original_price * (1 + increase_percentage / 100)\n\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # 3 brothers, 4 sisters, and Mary herself\n    eggs_bought = family_members * (family_members - 1)  # each buys an egg for every other member\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime('7:50', '%H:%M')\n    arrival_time = datetime.strptime('8:40', '%H:%M')\n\n    journey_duration = arrival_time - departure_time\n\n    ans = journey_duration.seconds // 60\n    return ans\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b = symbols('a b')\n    equation1 = Eq(3*a + b, 32)\n    equation2 = Eq(6*a + b, 53)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # This is a sequence of sum of n numbers starting from 1, i.e., the nth triangle number\n    # The pattern is n(n+1)/2 for n = 2, 3, 4, 5, ...\n    # The sequence given is 3, 6, 10, 15, which corresponds to triangle numbers for n = 2, 3, 4, 5\n    # Therefore, we need to find the next triangle number for n = 6\n    n = 6\n    missing_number = n * (n + 1) // 2\n    return missing_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the total amount of money Samuel had originally\n    x = symbols('x')\n    \n    # After spending 1/6 of his money and $5 on a DVD, he has (5/6)x - 5 left\n    money_after_dvd = (5/6) * x - 5\n    \n    # Then, he spends 2/5 of the remaining money and $12 on magazines, leaving $24\n    money_after_magazines = (3/5) * money_after_dvd - 12\n\n    # We know he has $24 left, setting up the equation\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve for 'x'\n    solution = solve(equation, x)\n    \n    # Since we are expecting a single solution for the money, take the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    # Let's assume Joanne initially had `initial_money`\n    # She spends 1/5 of her money on a handbag, so she is left with 4/5 of her money.\n    # She then spends 3/5 of the remaining money on a dress, leaving her with 2/5 of the 4/5 of her money.\n    # We know that 2/5 of 4/5 of her initial money is $80.\n    # (2/5) * (4/5) * initial_money = 80\n    # (8/25) * initial_money = 80\n    # initial_money = (80 * 25) / 8\n    \n    initial_money = (80 * 25) / 8\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured = 5\n    remaining_oil = total_oil - oil_poured\n    tanks = 6\n    volume_per_tank = remaining_oil / tanks\n    \n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of years in the future (n) when the condition is met\n    n = symbols('n')\n\n    # Grandpa's age equation: 72 + n\n    # Johnny's age equation: 8 + n\n    # Grandpa's age will be 5 times Johnny's age: 72 + n = 5 * (8 + n)\n    equation = Eq(72 + n, 5 * (8 + n))\n\n    # Solve the equation for n\n    solution = solve(equation, n)\n\n    # Return the number of years in the future when the condition is met\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Let's denote:\n    # P as the position of Pip from the front (which is given to be 8)\n    # B as the position of Bud from the back (which is given to be 10)\n    # C as the number of children between them (which is given to be 4)\n    # T as the total number of children in the queue\n\n    # We can represent the total number of children as:\n    # T = P + C + (B - 1), as Bud is the 10th from the end, \n    # so we have to subtract 1 to get the number of children behind Bud \n\n    P = 8\n    B = 10\n    C = 4\n\n    T = P + C + (B - 1)\n\n    return T\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has $15 more Match Dfex cards than Alan.\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: Bob now has $3 times as many as Alan after getting 25 cards from Colin.\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    P = 2000 # principal amount (initial loan)\n    F = 2519.42 # future amount (after 3 years)\n    n = 3 # number of years compounded annually\n    \n    r = symbols('r', real=True, positive=True) # interest rate as a symbolic variable\n    \n    # The formula for compound interest is F = P*(1+r)**n\n    # We have to find the interest rate r that satisfies this equation\n    equation = Eq(P * (1 + r)**n, F)\n    \n    # Now solve the equation for r\n    r_value = solve(equation, r)\n    \n    # Get the first (and supposedly only) solution, convert it to percentage and round to one decimal place\n    interest_rate = round(r_value[0]*100, 1)\n    \n    return interest_rate\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of odd numbers from 1 to 50\n    sum_melvin = sum(range(1, 51, 2))\n    \n    # Sum of even numbers from 1 to 50\n    sum_monica = sum(range(2, 51, 2))\n    \n    # Difference between Monica's and Melvin's sums\n    difference = sum_monica - sum_melvin\n    \n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Each box contains 2 dozen oranges, which means each box has 24 oranges.\n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack 25 boxes.\n    # Therefore, the total number of oranges is 25 boxes * 24 oranges per box.\n    total_oranges = 25 * 24\n\n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges.\n    # Therefore, we can calculate the number of elderly she originally planned to give oranges to.\n    # This is the same as the total number of oranges divided by 20, plus the 10 elderly who didn't receive any.\n    total_elderly = (total_oranges // 20) + 10\n\n    # To give out all her oranges, we need to find a divisor of the total number of oranges\n    # that is less than or equal to 20 (since 20 elderly already won't receive oranges if she gives 20 each)\n    # and is the maximum such divisor. This will ensure that she doesn't have any oranges left over.\n    for oranges_per_elderly in range(20, 0, -1):\n        if total_oranges % oranges_per_elderly == 0:\n            break\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # From the given operation definition and the first expression, we know that:\n    # m ~Δ~ n = 5m + 3n, so let's use this to find out what x ~Δ~ 9 equals to\n\n    # Now we're given the second expression which is: x ~Δ~ 9 = 37\n    # Similarly, the operation should hold: x ~Δ~ 9 = 5x + 3*9\n\n    # We set up the equation with the given value of the operation\n    x = symbols('x')\n    equation = Eq(5*x + 3*9, 37)\n\n    # Now, we solve for x\n    solution = solve(equation, x)\n\n    return solution[0] # since solve returns a list of solutions and we have a single solution for linear equation.\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario to not get 4 balls of the same color:\n    # Take 3 blue, then 3 orange, then 2 yellow.\n    # After this point, the next ball she takes out must be the 4th of one of these colors.\n    balls_needed = 3 + 3 + 2 + 1  # +1 is the next ball ensuring 4 of the same color\n    return balls_needed\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n\n    departure_time = arrival_time - travel_time\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, (tyler - 96) * 9)\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    return solutions[tim] + solutions[tyler]\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # setting up equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate - chocolate / 6 + vanilla - 2 * vanilla / 3 + blueberry - 7 * blueberry / 9, 427)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n\n    # calculating the number of chocolate cupcakes sold\n    chocolate_sold = chocolate_cupcakes / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    minutes_platform1 = 24\n    minutes_platform2 = 30\n\n    # Find least common multiple to get the interval at which trains leave both platforms at the same time\n    interval = lcm(minutes_platform1, minutes_platform2)\n\n    # Find the next time by adding the interval to the start time (9 a.m.)\n    hours_passed = interval // 60\n    minutes_passed = interval % 60\n\n    # 9 a.m. in minutes\n    start_time_in_minutes = 9 * 60\n\n    next_time_in_minutes = start_time_in_minutes + hours_passed * 60 + minutes_passed\n\n    # Convert back to hours and minutes\n    next_time_hours = next_time_in_minutes // 60\n    next_time_minutes = next_time_in_minutes % 60\n\n    return f\"{next_time_hours}:{str(next_time_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    marks_scored = 136\n    marks_missed = total_marks - marks_scored\n    return marks_missed\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    three_quarters_tank = 24\n    full_tank = three_quarters_tank * (4/3)\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Given remainders for 'a' and 'b' when divided by 8\n    remainder_a = 6\n    remainder_b = 7\n    # Compute the remainder of (a+b) when divided by 8\n    remainder_ab = (remainder_a + remainder_b) % 8\n    \n    return remainder_ab\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # Since Jessica sits in front of Judy, the number of desks between them is 0\n    desks_between_jessica_and_judy = 1  # counting Judy's desk\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of red and white marbles be 3x and 2x respectively\n    red_original, white_original = symbols('red_original white_original')\n    pip_r, bud_w = symbols('pip_r bud_w')  # The number of balls Pip and Bud put in \n    \n    # Set up the equations based on the information given\n    equation1 = Eq(red_original / white_original, 3/2)\n    equation2 = Eq((red_original + pip_r) / white_original, 5/3)\n    equation3 = Eq((red_original + pip_r) / (white_original + bud_w), 5/4)\n    equation4 = Eq(bud_w - pip_r, 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), \n                      (red_original, white_original, pip_r, bud_w))\n    \n    # Return the number of white balls at first\n    return solutions[white_original]\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_white = 1991\n    total_black = 1000\n\n    for _ in range(2989):\n        # Take out two balls, possibilities are WW, BB or WB/BW\n        if total_white > 1:  # At least 2 white balls to take out WW\n            total_white -= 2  # Take out 2 white balls\n            total_black += 1  # Add 1 black ball due to WW combination\n        elif total_black > 1:  # At least 2 black balls to take out BB\n            total_black -= 1  # No need to add a white ball because it's not mentioned in conditions\n        else:  # Only possibility is WB/BW since there's always at least one white ball\n            total_white -= 1  # Put back 1 white ball\n    \n    # Determine the color of the remaining balls\n    # Since total_white never goes to zero, and total_black only decreases when BB is taken or when\n    # white ball is put back due to WB/BW, the remaining balls must be white\n    remaining_color = \"white\" if total_white > 0 else \"black\"\n    remaining_balls = total_white if remaining_color == \"white\" else total_black\n\n    return remaining_balls, remaining_color\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 5):\n        a, b, c, d, e = p\n        x = int(a+b)  # assume the number formed by the 1st and 2nd digit\n        y = int(c+d+e)  # assume the number formed by the 3rd, 4th, and 5th digit\n        product = x * y\n        if len(str(product)) == 4 and set(str(product)) & set(p) == set():  # no digit is repeated\n            return product\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let's denote x as the initial average weight of the group and n as the number of people in the group. \n    # Before Aaron joined the group, the total weight of the group was n * x.\n    # After Aaron joined, the total weight became n * x + 45, and the average became 61, \n    # and the number of people became n + 1.\n    # So we can write the first equation: (n * x + 45) / (n + 1) = 61\n\n    # After Ben joined, the total weight became n * x + 45 (Aaron's weight) + 71 (Ben's weight), \n    # and the average became 62, and the number of people became n + 2.\n    # The second equation is: (n * x + 45 + 71) / (n + 2) = 62\n\n    # Now we have two equations:\n    # n * x + 45 = 61 * (n + 1)\n    # n * x + 45 + 71 = 62 * (n + 2)\n\n    # Let's solve these two equations for x and n.\n    from sympy import symbols, Eq, solve\n\n    n, x = symbols('n x', real=True, positive=True)\n    equation1 = Eq(n * x + 45, 61 * (n + 1))\n    equation2 = Eq(n * x + 45 + 71, 62 * (n + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, x))\n\n    # We are interested in the x value, which represents the original average weight.\n    return solutions[x]\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    # Number of people-hours needed to build the bridge\n    total_people_hours = 6 * 15\n\n    # Number of people needed to build the bridge in 2 hours\n    people_needed = total_people_hours / 2\n\n    return people_needed\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_weight = (1/5) * full_weight\n    weight_after_removal = 27\n    empty_weight = weight_after_removal - removed_soil_weight\n\n    return empty_weight\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # As there are 100 centimeters in a meter\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_money = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    total_spent = sweets + magazine + stickers + pizza + orange_juice\n    change_left = initial_money - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    return count // 2  # Dividing by 2 to account for permutations of the same combination\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Iterate through all 3-digit numbers\n        hundreds = i // 100\n        tens = (i // 10) % 10\n        units = i % 10\n        if units - hundreds == 2: # Check if the hundreds digit is two less than the units digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    daughter_mass = symbols('daughter_mass')\n    mr_han_mass = 3 * daughter_mass\n    total_mass = mr_han_mass + daughter_mass\n\n    mass_equation = Eq(total_mass, 91.2)\n    solution = solve(mass_equation, daughter_mass)\n    mr_han_mass_value = 3 * solution[0]\n\n    return mr_han_mass_value\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    final_chocolates = 108\n    remaining_after_students = final_chocolates / (2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum([(2 * i + 1) for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has more votes than anyone else, she must have at least one more vote than\n    # the average number of votes per person. The average is 25 votes / 3 people.\n    average_votes = 25 // 3  # Integer division to get the floor value\n    \n    # Samantha must have at least one more vote than the average.\n    samantha_votes = average_votes + 1\n    \n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_types = [1, 2, 5]\n    totals = set()\n\n    for c1 in coin_types:\n        for c2 in coin_types:\n            for c3 in coin_types:\n                totals.add(c1 + c2 + c3)\n                \n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    principal = 6000\n    final_amount = 8029.35\n    years = 5\n\n    x = symbols('x')\n    equation = Eq(principal * (1 + x/100)**years, final_amount)\n    \n    interest_rate = solve(equation, x)\n    \n    return interest_rate[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n    while True:\n        pages += 1\n        digits += len(str(pages))\n        if digits == 291:\n            return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    return 13 / 25 * 100\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g_conversion_factor = 1000\n    mass_in_kg = 2.4\n    mass_in_g = mass_in_kg * kg_to_g_conversion_factor\n    return mass_in_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the total number of pages, and r be the number of pages read initially\n    t, r = symbols('t r')\n    \n    # Equations based on the given conditions\n    equation1 = Eq(r, t / 6)  # Since the ratio of read to unread is 1:5\n    equation2 = Eq(r + 80, 0.7 * t)  # After reading 80 more pages, it becomes 70% of total\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, r))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of questions CC answered correctly\n    # Then Vivi would have answered x + 1.5 questions correctly (since Vivi got 15 more points, and the difference in points for each correct answer is 10)\n    # Each incorrect or skipped answer leads to a loss of 5 points, so we treat those as \"negative\" correct answers for the purpose of calculating points\n    # The equation representing the total score is: 10*(x + 1.5) + 10*x = 95\n    # Solving for x gives us the number of questions CC answered correctly\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x + 1.5) + 10*x, 95)\n    correct_cc = solve(equation, x)[0]\n    \n    return correct_cc\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    girls_rooms = girls // girls_per_room\n    teachers_rooms = teachers // teachers_per_room\n    \n    if girls % girls_per_room != 0:\n        girls_rooms += 1\n\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    flour_final = (flour_initial * people_final) / people_initial\n\n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    number_of_adults = 2\n    number_of_children = 3\n\n    total_cost = (adult_ticket_price * number_of_adults) + (child_ticket_price * number_of_children)\n    return total_cost\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    # x + y = 11.63\n    equation1 = Eq(x + y, 11.63)\n    # x + (y/10) = 5.87\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = abs(solutions[x] - solutions[y])\n    \n    return int(difference * 100)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # To ensure 3 marbles of the same color, we consider the worst case scenario.\n    # Take all blue marbles: we have 4 blue marbles.\n    # Take all yellow marbles: we add 3 yellow marbles, now total marbles we have is 4 (blue) + 3 (yellow) = 7.\n    # Now, taking one more marble of any color will guarantee 3 of the same color.\n    # So, we need 1 more marble, total marbles taken out will be 7 (previous) + 1 = 8.\n    \n    ans = 7 + 1\n    return ans\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa, mother = symbols('melissa mother')\n    \n    # When Melissa was 8, her mother was 32.\n    equation1 = Eq(mother - melissa, 32 - 8)\n\n    # Now, Melissa's mother is three times as old as Melissa.\n    equation2 = Eq(mother, 3 * melissa)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n    \n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    # Subtracting the corners because they are counted twice, once for each side\n    flowers_per_side_without_corners = flowers_per_side - 1\n    total_flowers_without_corners = flowers_per_side_without_corners * 4\n    # Adding the corner flowers (counted only once)\n    total_flowers = total_flowers_without_corners + corners\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    \n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count, factors\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut1 = 4.8\n    cut2 = 2.73\n    remaining_length = original_length - (cut1 + cut2)\n    \n    longest_piece = max(cut1, cut2, remaining_length)\n    shortest_piece = min(cut1, cut2, remaining_length)\n    \n    difference = longest_piece - shortest_piece\n    \n    return difference\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n\n    # Given ratios\n    ratio_science_literature = 9 / 10\n    ratio_literature_math = 5 / 7\n\n    # Compute the effective ratio for science, literature, and math\n    # We multiply the ratios to get the total ratio sc:lit:math\n    # sc:lit = 9:10 and lit:math = 5:7 gives sc:lit:math = 9*5 : 10*5 : 10*7\n    effective_ratio_science = 9 * 5\n    effective_ratio_literature = 10 * 5\n    effective_ratio_math = 10 * 7\n\n    # Calculate the sum of the effective ratios\n    sum_ratios = effective_ratio_science + effective_ratio_literature + effective_ratio_math\n\n    # Calculate the number of members in the literature and math clubs\n    members_literature = (effective_ratio_literature / sum_ratios) * total_members\n    members_math = (effective_ratio_math / sum_ratios) * total_members\n\n    # Calculate the difference\n    more_members_in_math = int(members_math - members_literature)\n\n    return more_members_in_math\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # Let the initial amount of money be x\n    # She spent 1/3 on a book, so she spent x/3 on the book\n    # The remainder is x - x/3 = 2x/3\n    # She spent half of the remainder on a bag, so she spent (1/2) * (2x/3) = x/3 on the bag\n    # Since both the book and the bag cost $132 together, we have:\n    # x/3 (cost of the book) + x/3 (cost of the bag) = 132\n    \n    # From above we get 2 * x/3 = 132\n    # Hence, x = 132 * (3/2)\n    \n    initial_money = total_cost * (3/2)\n\n    return initial_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # Equation representing the total cost of basketballs and volleyballs\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    \n    # Equation representing the cost difference between a basketball and a volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n    \n    # Solving the system of equations for the price of a basketball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    pattern_length = len(pattern)\n    total_digits = 47\n\n    full_patterns = total_digits // pattern_length\n    partial_pattern_length = total_digits % pattern_length\n\n    full_pattern_sum = sum(int(digit) for digit in pattern) * full_patterns\n    partial_pattern_sum = sum(int(pattern[i]) for i in range(partial_pattern_length))\n\n    return full_pattern_sum + partial_pattern_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    total_cost_for_nine = cost_per_bottle * 9\n    return total_cost_for_nine\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_students = 40\n    average_pencils = 35\n\n    # Let the number of boys be b and number of girls be g\n    # b + g = total_students => g = total_students - b\n    # (20 * b + 60 * (total_students - b)) / total_students = average_pencils\n    # 20b + 60g - 60b = average_pencils * total_students\n    # -40b + 60 * total_students = average_pencils * total_students\n    # 40b = total_students * (60 - average_pencils)\n    # b = total_students * (60 - average_pencils) / 40\n\n    b = total_students * (60 - average_pencils) // 40\n    return b\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_points = 61\n    total_problems = 25\n\n    # Let x be the number of problems Jack got correct, y the ones he got wrong.\n    # Then, (25-x-y) will be the number of problems Jack did not answer.\n    # Since Jack has more correct answers, we'll start with the maximum number he could have gotten right.\n    for correct in range(total_problems, -1, -1):\n        wrong = total_problems - correct  # Assuming he answered all questions\n        points = 4 * correct - wrong\n        if points == total_points:\n            return total_problems - correct - wrong  # Number of questions Jack did not answer\n\n        # If he got too many points by answering all questions, he must have left some unanswered.\n        if points > total_points:\n            unanswered = (points - total_points) // 3  # Calculate the number of unanswered questions\n            correct -= unanswered\n            wrong -= unanswered\n            if 4 * correct - wrong == total_points:  # Check if the score corresponds to the total points\n                return unanswered\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):      # 'a' cannot be 0 because it's a 2-digit number.\n        for b in range(0, 10):  # 'b' can be 0.\n            ab = 10*a + b       # Construct the number 'ab'.\n            ba = 10*b + a       # Construct the number 'ba'.\n            if 8*ab == 3*ba:    # Check the given condition.\n                return ab       # Return the value of 'ab' if condition is satisfied.\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    base_price_per_cupcake = 4.50\n    discount_rate = 0.20\n    shipping_handling = 12\n    total_bill = 120\n\n    # Calculate the cost for 20 cupcakes\n    cost_for_20 = 20 * base_price_per_cupcake + shipping_handling\n    \n    if total_bill <= cost_for_20:\n        # All cupcakes ordered are at the base price\n        cupcakes_ordered = (total_bill - shipping_handling) // base_price_per_cupcake\n    else:\n        # Calculate additional cupcakes with discount\n        discount_cupcakes_cost = total_bill - cost_for_20\n        discounted_cupcake_cost = base_price_per_cupcake * (1 - discount_rate)\n        additional_cupcakes = discount_cupcakes_cost / discounted_cupcake_cost\n        \n        # Total cupcakes ordered is 20 + additional cupcakes\n        cupcakes_ordered = 20 + additional_cupcakes\n    \n    return int(cupcakes_ordered)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n    total_pounds = pounds + pence / 100\n    return total_pounds\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    fraction_value = 1/3\n    ans = 15 / fraction_value\n    return ans\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    num_str = '2581953752'\n    minimum_sum = float('inf')\n\n    for cut1, cut2 in combinations(range(1, len(num_str)), 2):\n        part1 = int(num_str[:cut1])\n        part2 = int(num_str[cut1:cut2])\n        part3 = int(num_str[cut2:])\n        s = part1 + part2 + part3\n        minimum_sum = min(minimum_sum, s)\n\n    return minimum_sum\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    A = symbols('A')\n\n    # Write down the equation\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    # Solve the equation\n    solution = solve(equation, A)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_behind_rose = 12 - 1  # Subtract Rose from the count\n    people_in_front_of_rose = 9\n    total_people = people_behind_rose + people_in_front_of_rose + 1  # Add Rose to the total count\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let the total work required to paint the house be W (W is the number of work units)\n    # Let the energetic decorator's work rate be E (work units per day)\n    # Let the lazy decorator's work rate be L (work units per day)\n\n    # The energetic decorator can complete the work in 10 days:\n    W = E = 10  # He completes W (10 units of work) in 10 days, so his work rate is E = 1 unit per day\n    \n    # Together, they complete the work in 6 days, so their combined work rate is W/6 units per day\n    # E + L = W/6  # Combined work rate of both decorators\n    L = (W / 6) - E  # L = (10 / 6) - 1 = 5/3 - 1 = 2/3 (lazy decorator's work rate)\n\n    # The number of days it would take the lazy one to paint the house on his own is W/L\n    days_for_lazy = W / L  # days_for_lazy = 10 / (2/3) = 10 * 3/2 = 15\n\n    return days_for_lazy\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_difference = 42\n    years_later = 2\n    \n    john_age_then = john_age_now + years_later\n    grandmother_age_now = john_age_now + grandmother_age_difference\n    grandmother_age_then = grandmother_age_now + years_later\n    \n    total_age_then = john_age_then + grandmother_age_then\n    \n    return total_age_then\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Because each of them has at least two books, start with giving each brother 2 books,\n    # then distribute the remaining 4 books among them.\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            if x1 + x2 <= 10:  # Ensuring the total doesn't exceed 10 books\n                x3 = 10 - (x1 + x2)\n                if x3 >= 2:  # The third brother should have at least 2 books\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure 4 marbles of different colours, we first consider the worst case scenario,\n    # which is that we could pick all marbles of the same color continuously until we are\n    # forced to pick a marble of a different color.\n    # So, we could draw all 12 red marbles, followed by all 9 blue marbles\n    # and we need to draw only 1 more marble to ensure the third color (yellow),\n    # however, we still need the fourth color (green) as well, which requires drawing another marble.\n    # Thus, we must draw at least 1 more marble to ensure having four different colors.\n    # In total, we must draw 12 (red) + 9 (blue) + 1 (yellow) + 1 (green) = 23 marbles.\n\n    ans = 12 + 9 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    num = int('5' * 19 + '9' * 19)\n    for digit in range(10):\n        current_num = int('5' * 19 + str(digit) + '9' * 19)\n        if current_num % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    last_child_height = 131\n    tom_position_from_last = 31 - 10\n\n    max_height_tom = last_child_height - tom_position_from_last\n\n    return max_height_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            tens = 2 * hundreds\n            if hundreds + tens + ones == 15 and hundreds == ones + 1:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if number % 10 == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    more_from_last_time = 14.4\n    last_purchase = current_purchase - more_from_last_time\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has\n    # After Jason gives Anthea 4 storybooks, they have an equal number, so:\n    # Jason's books after giving = Anthea's books after receiving\n    # (30 - 4) = (x + 4)\n    # Solve for x:\n    x = 30 - 4 - 4\n\n    # The difference between Jason and Anthea at first is:\n    difference = 30 - x\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for i in range(3, 2023):\n        a, b = b, a + b\n        a, b = a % 3, b % 3   # Reduce the numbers modulo 3\n    return b % 3\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let the number of students be n\n    # Let the number of small gifts be g\n    # We have two conditions:\n    # g = 5n + 3 (if each student is given 5, there are 3 left)\n    # g = 4n + 9 (if each student is given 4, there are 9 left)\n    # This implies that:\n    # 5n + 3 = 4n + 9\n    # Subtract 4n from both sides:\n    # n = 9 - 3\n    # n = 6\n    n = 6\n    return n\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan, (4/3) * bella)\n    equation2 = Eq(alan - 20, chloe)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_cost = 7.85\n    bar_cost = 1.83 * 2\n    total_cost = box_cost + bar_cost\n    paid_amount = 20\n    change = paid_amount - total_cost\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    # Lily is fixed on the left, and her mother is fixed on the right.\n    # Therefore, we have 3 spots left for the remaining family members.\n    num_spots = 3\n\n    # Calculate the number of permutations for the 3 remaining spots.\n    permutations = math.factorial(num_spots)\n    \n    return permutations\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_row_seats = 7\n    last_row_seats = 99\n    difference = 4\n\n    # Calculate total number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (num_rows - 1) * difference\n    num_rows = ((last_row_seats - first_row_seats) // difference) + 1\n\n    # Calculate the sum using the formula for the sum of n terms of an arithmetic sequence:\n    # sum = (num_rows / 2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    children_fraction = 3/5\n    men_fraction = 1/2\n    more_children = 140\n    \n    # Let x be the total number of visitors\n    # number of children = (3/5)*x\n    # number of remaining visitors = x - (3/5)*x = (2/5)*x\n    # number of men = (1/2) * number of remaining visitors = (1/2)*(2/5)*x = (1/5)*x\n    # children - men = 140\n    # (3/5)*x - (1/5)*x = 140\n    # (2/5)*x = 140\n    # x = 140 / (2/5)\n    # x = 140 * (5/2)\n    # x = 70 * 5\n    x = 140 * (5/2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all unique 2-digit permutations from 1 to 8\n    perm = permutations(range(1, 9), 2)\n    numbers = []\n    \n    for p in perm:\n        # Convert the tuples into numbers\n        num = p[0] * 10 + p[1]\n        # Skip numbers not fitting the criteria of the question\n        if p[1] != 2 * p[0] and p[0] + p[1] != 9 and p[0] != p[1] + 5 and (num % 2 == 0 or num == 8):\n            numbers.append(num)\n\n    # Sort the numbers\n    numbers.sort()\n\n    # Applying the hints\n    # In the smallest number, the ones digit is twice the tens digit.\n    smallest = next(num for num in numbers if num % 10 == 2 * (num // 10))\n\n    # In the largest number, the sum of the ones and tens digits is 9.\n    largest = next(num for num in reversed(numbers) if (num // 10) + (num % 10) == 9)\n\n    # In the second largest number, the tens digit is 5 more than the ones digit.\n    second_largest = next(num for num in reversed(numbers) if (num // 10) == (num % 10) + 5)\n\n    # Remove the smallest and largest numbers to find the second smallest\n    numbers.remove(smallest)\n    numbers.remove(largest)\n    numbers.remove(second_largest)\n\n    # The second smallest number after applying all the hints is the answer\n    second_smallest = numbers[0]\n\n    return second_smallest\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each of them originally had\n    sam, peter = symbols('sam peter')\n\n    # Create equations based on the problem description\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    equation2 = Eq(sam - 0.20 * sam, sam - sam / 5)\n\n    # In return, Peter gave 25% of his stickers (after receiving Sam's 20%) to Sam\n    equation3 = Eq(peter + sam / 5 - 0.25 * (peter + sam / 5), peter + sam / 5 - (peter + sam / 5) / 4)\n\n    # In the end, Sam has 96 stickers more than Peter\n    equation4 = Eq(sam - sam / 5 + (peter + sam / 5) / 4, peter + sam / 5 - (peter + sam / 5) / 4 + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter))\n\n    # We're interested in the original number of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_numbers_initial = 3\n\n    # Calculate the total of the initial three numbers\n    total_initial = average_initial * num_numbers_initial\n\n    # Calculate the total of the four numbers using the final average\n    total_final = average_final * (num_numbers_initial + 1)\n\n    # The fourth number is the difference between the final total and the initial total\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    start = 5\n    sum_of_squares = (n*(n+1)*(2*n+1)//6) - ((start-1)*start*(2*(start-1)+1)//6)\n    kimmy_answer = 1240\n    return sum_of_squares == kimmy_answer, sum_of_squares\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of incorrect answers.\n    # Each correct answer gives 5 points, each incorrect answer subtracts 2 points.\n    # The total number of questions is the sum of correct and incorrect answers, which is 20.\n    # The total points are the sum of points from correct and incorrect answers, which is 51.\n\n    # We now have a system of equations:\n    # x + y = 20   ...(1)\n    # 5x - 2y = 51 ...(2)\n\n    # We can solve this system using substitution or elimination. Here we will use elimination.\n    # Multiply equation (1) by 2 and add it to equation (2) to eliminate y:\n    # 2x + 2y = 40   (after multiplying by 2)\n    # +\n    # 5x - 2y = 51\n    # -------------\n    # 7x = 91\n\n    # Now solve for x:\n    x = 91 // 7\n\n    return x\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbolic variable for Amy's initial amount of money\n    initial_money = symbols('initial_money')\n\n    # After spending 6/11 of her money and additional $5, the remaining amount is (5/11) * initial_money - 5\n    remaining_after_highlighters = (5/11) * initial_money - 5\n\n    # After spending 3/10 of the remainder and additional $12, she has $30 left\n    remaining_after_pens = (7/10) * remaining_after_highlighters - 12\n\n    # Set up the equation based on the above value and solve it\n    equation = Eq(remaining_after_pens, 30)\n    solution = solve(equation, initial_money)\n\n    # Since we know that the initial amount of money should be a positive value\n    # We can further deduce the final answer\n    ans = solution[0]\n\n    return ans\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    actual_subtrahend = 75\n    actual_result = mistaken_result + (actual_subtrahend - mistaken_subtrahend)\n\n    return actual_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = (3 * 4) // math.gcd(3, 4)  # Least common multiple of 3 and 4\n    count = 40 // lcm  # Number of customers who received both a pen and a file\n    return count\n\nimport math\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9  # 9 apples have a mass of 1 kg\n    total_apples = 8 * apples_per_kg  # Total apples used is 8 kg worth of apples\n    apples_for_one_cake = 4  # 4 apples are used for one cake\n\n    number_of_cakes = total_apples // apples_for_one_cake  # Find how many cakes can be made\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    return 35 / (45 / 9)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n\n    circumference = distance_between_seeds * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3 / 8) * 32\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_pieces = final_pieces - initial_pieces\n\n    return cut_pieces // 2\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    # Number of boys and girls\n    boys = 12\n    girls = 8\n\n    # Average scores\n    avg_boys = 10\n    avg_all = 14\n\n    # Total participants\n    total_participants = boys + girls\n\n    # Total score for all participants\n    total_score_all = avg_all * total_participants\n\n    # Total score for boys\n    total_score_boys = avg_boys * boys\n\n    # Total score for girls (Total score for all - Total score for boys)\n    total_score_girls = total_score_all - total_score_boys\n\n    # Average score for girls\n    avg_girls = total_score_girls / girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Initialize the variable to represent the side length of the initial square\n    side_length = 0\n    \n    while True:\n        # Calculate the total number of students in the initial square array\n        initial_students = side_length**2 + 9\n        \n        # Calculate the total number of students in the larger square array\n        larger_students = (side_length + 1)**2\n        \n        # Check if the difference between the larger array and initial array is 16\n        if larger_students - initial_students == 16:\n            # If it is, we found the solution and can break out of the loop\n            break\n        \n        # If not, increment the side length and check again\n        side_length += 1\n    \n    # Calculate and return the total number of students in Year 3 (initial square array)\n    return initial_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # We know that initially, 50 postcards are divided into 5 envelopes, so each envelope has 10 postcards.\n    postcards_per_envelope = 50 // 5\n\n    # We then find that the new postcards are divided into 2 envelopes with the same number of postcards. \n    # Since we already know each envelope initially had 10 postcards, then the new postcards must also be split into sets of 10.\n    # This means that the 2 new envelopes must have 10 postcards each.\n    new_envelopes_postcards = 2 * postcards_per_envelope\n\n    # The total number of postcards is the original 50 plus the additional postcards given in the 2 new envelopes.\n    total_postcards = 50 + new_envelopes_postcards\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    possible_coins = [200, 100, 50, 20, 10, 5, 2, 1] # pence\n    change = 250 # pence\n\n    for coin in possible_coins:\n        if change % (2*coin) == 0:\n            return coin / 100 # Convert pence back to pounds\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of cookies baked by Jolie be x.\n    x = symbols('x')\n\n    # Calculate the number of burnt cookies.\n    burnt_cookies = (3/5) * x\n\n    # Calculate the number of remaining cookies.\n    remaining_cookies = x - burnt_cookies\n\n    # Calculate the number of sold cookies.\n    sold_cookies = (3/4) * remaining_cookies\n\n    # Create an equation based on the condition given.\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    # Solve the equation to find the number of cookies Jolie baked at first.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_in_grams = 250\n    cost_for_250g = (cost_per_100g / 100) * weight_in_grams\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2)-(0.2)**2)/(-1.8) - (41.08 - (-2/5)**2)/(3+(-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    per_container = 4\n\n    num_containers = (total_apples + per_container - 1) // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**6):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (int(f\"107{y}\") % 6 == 0):\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    factorial = lambda x: 1 if x == 0 else x * factorial(x-1)\n    \n    # Laura takes the first spot, so we have 5 spots left\n    # Rita cannot be at the end, so she has 4 options for her position\n    rita_options = 4\n    \n    # There are 4 students left for 4 spots\n    other_students_permutations = factorial(4)\n    \n    # The total number of ways is Rita's options times the permutations of the other students\n    total_ways = rita_options * other_students_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let the total length of the road be d miles.\n    # According to the problem, Jerry travels three-sevenths of the distance, so Kevin travels four-sevenths of it.\n    # Since they are traveling towards each other and meet at some point, the ratio of their speeds will be\n    # the inverse ratio of the distance they traveled when they meet.\n    kevin_speed = 80  # Kevin travels at 80 mph\n    jerry_travel_fraction = 3 / 7\n    kevin_travel_fraction = 4 / 7\n    jerry_speed = kevin_speed * (jerry_travel_fraction / kevin_travel_fraction)  # the speed of Jerry\n    # We're also given that Jerry travels (2/5) of the road length in one hour, which is Jerry's speed.\n    road_length = jerry_speed * (5 / 2)  # road length is twice the distance Jerry travels in one hour\n    return road_length\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    return (a + b) * a\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    initial_discount = 0.5  # 50% discount\n    additional_discount = 0.2  # additional 20% discount\n\n    discounted_price = regular_total_price * (1 - initial_discount)\n    final_price = discounted_price * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4 / 7\n\n    total_apples = sold_apples / fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Parse times\n    singapore_takeoff = datetime.strptime(\"24/08 05:00\", \"%d/%m %H:%M\")\n    london_landing = datetime.strptime(\"24/08 11:00\", \"%d/%m %H:%M\")\n    \n    # Calculate the time difference\n    time_diff = london_landing - singapore_takeoff\n    \n    # Since Singapore is 7 hours ahead, subtract that from the time difference\n    flight_duration = time_diff - timedelta(hours=7)\n    \n    # Get the total duration in hours\n    hours = flight_duration.seconds // 3600\n    return hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    \n    # Total pencils for boys and girls are 35 * 40\n    total_pencils = 35 * 40\n\n    # Total pencils by boys is 20 * boys\n    # Total pencils by girls is 60 * (40 - boys), since the number of girls is 40-boys\n    equation = Eq(20 * boys + 60 * (40 - boys), total_pencils)\n    \n    boys_count = solve(equation, boys)[0]\n    \n    return boys_count\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    probability_win = 0.3\n    probability_draw = 0.1\n    probability_lose = 1 - probability_win - probability_draw\n\n    # Probability of winning one game and losing the other \n    win_lose = probability_win * probability_lose\n\n    # Probability of losing one game and winning the other\n    lose_win = probability_lose * probability_win\n\n    # Probability of winning exactly one game\n    probability_exactly_one_win = win_lose + lose_win\n\n    return probability_exactly_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # When putting 4 lollipops into each box, he has 32 left over.\n    # This means that the total number of lollipops is 32 more than a multiple of 4.\n    # Let's try multiples of 4 starting from 32 and add 4 each time.\n    \n    lollipops = 32\n    while True:\n        # Check if the number of lollipops minus 3 (the last box having 3 lollipops when divided by 7)\n        # is a multiple of 7. If it is, that number of lollipops meets the condition.\n        if (lollipops - 3) % 7 == 0:\n            break\n        # We then try the next number that gives 32 lollipops left over when divided by 4.\n        lollipops += 4\n        \n    return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # We want to find the highest common factor (HCF) of the differences between the numbers\n    # This will be our D. Then we can find the remainder by subtracting this from one of the numbers.\n\n    # Calculate differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Define a function for calculating the greatest common divisor (GCD)\n    def gcd(x, y):\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    # Calculate GCD of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # Calculate the remainder by taking one of the numbers modulo the GCD of differences\n    R = 2010 % gcd_diff\n    D = gcd_diff\n\n    # The largest possible value of D + R is the answer we seek\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    fraction = 1 / 13\n    decimal_str = format(fraction, '.3012f')\n    ans = decimal_str[2012 + 1]  # Adding 1 to skip the '0.'\n\n    return int(ans)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop over all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Check if the sum of the digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi / wiya, 8/7)\n    equation2 = Eq((eddi - 4) / (wiya + 4), 18/17)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5/6) * blue_marbles\n    green_marbles = red_marbles / 2\n\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Transform mixed numbers to improper fractions using Fraction\n    from fractions import Fraction\n    \n    # Create the improper fractions by converting the mixed numbers\n    num1 = 2017 + Fraction(7, 8)\n    num2 = 3 + Fraction(2, 3)\n    num3 = Fraction(11, 3)\n    num4 = Fraction(23, 32)\n    num5 = 2017 + Fraction(1, 3)\n    \n    # Calculate the numerator and denominator of the complex fraction\n    numerator = (num1 * num2) - (2016.875 * num3)\n    denominator = (num5 - 2016.875) * 17\n    \n    # Divide the numerator by the denominator and then multiply by the mixed number 3 23/32\n    result = (numerator / denominator) * (3 + num4)\n    \n    # Return the final result as a float\n    ans = float(result)\n    \n    return ans\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variable for class A and B students\n    A, B = symbols('A B')\n    \n    # Class A has 47 more students than class B\n    equation1 = Eq(A, B + 47)\n    \n    # Class A will give 'x' students to class B\n    x = symbols('x')\n    \n    # New equations after transfer\n    equation2 = Eq(A - x, B + x + 9)\n    \n    # Solve for 'x'\n    solutions = solve((equation1, equation2), (A, B, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31):\n            C = 31 - A - B\n            if C > 0:\n                product = A * B * C\n                max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    num1, num2 = symbols('num1 num2')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(num1 - num2, 57)  # The difference between two numbers is 57\n    equation2 = Eq(num1 + num2, 77)  # The sum of the numbers is 77\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (num1, num2))\n\n    # Get the smaller number\n    smaller_number = min(solutions[num1], solutions[num2])\n\n    return smaller_number\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    ans = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit numbers.\n    for i in range(100, 1000):\n        if i % 2 != 0:  # Check if the number is odd.\n            # Sum the digits of the number.\n            digits_sum = sum(int(digit) for digit in str(i))\n            if digits_sum == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_cost_pence = 24 * 100\n    number_of_pairs = 16\n    number_of_avocados = number_of_pairs * 2\n    cost_of_one_avocado = total_cost_pence / number_of_avocados\n\n    return cost_of_one_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # roll results for 1 die\n    die = [1, 2, 3, 4, 5, 6]\n    # counter for each possible total score\n    score_counter = Counter()\n\n    # nested loops to consider all possible outcomes when rolling 2 dice\n    for die1 in die:\n        for die2 in die:\n            total_score = die1 + die2\n            score_counter[total_score] += 1\n\n    # get the most common score\n    most_common_score = score_counter.most_common(1)[0][0]\n\n    return most_common_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    # Define the equations based on the problem\n    total_average_eq = Eq(girls * 88 + boys * 91, 36 * 89)\n    \n    # Solve the equations\n    num_girls = solve(total_average_eq, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rhinos, deer, ostriches = symbols('rhinos deer ostriches')\n\n    # 1 rhino = 1 deer in numbers\n    equation1 = Eq(rhinos, deer)\n    # rhinos + deer + ostriches have 28 heads in total\n    equation2 = Eq(rhinos + deer + ostriches, 28)\n    # rhinos and deer have 4 legs each, ostriches have 2 legs each\n    equation3 = Eq(4 * rhinos + 4 * deer + 2 * ostriches, 88)\n\n    solutions = solve((equation1, equation2, equation3), (rhinos, deer, ostriches))\n\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Define speeds\n    rabbit_speed = 330  # in m/min\n    turtle_speed = 30   # in m/min\n    \n    # Define the sleep time of the rabbit\n    sleep_time = 215  # in minutes\n    \n    # Calculate the distance covered by the rabbit in the first 10 minutes\n    rabbit_distance_before_sleep = rabbit_speed * 10  # in meters\n    \n    # Calculate the time taken by the turtle to finish the race\n    turtle_race_time = 6990 / turtle_speed  # in minutes\n\n    # Calculate the distance covered by the turtle during the rabbit's sleep\n    turtle_distance_during_rabbit_sleep = turtle_speed * (10 + sleep_time)  # in meters\n\n    if turtle_distance_during_rabbit_sleep >= 6990:\n        # The turtle reaches the finish line before the rabbit wakes up\n        winner = 'turtle'\n        winning_time = turtle_race_time\n        # The distance between them is the remaining distance for the rabbit\n        distance_between = 6990 - rabbit_distance_before_sleep\n    else:\n        # Calculate the remaining distance for the rabbit after it wakes up\n        rabbit_remaining_distance_after_sleep = 6990 - rabbit_distance_before_sleep\n        # Calculate the time taken by the rabbit to finish the remaining distance\n        rabbit_time_after_sleep = rabbit_remaining_distance_after_sleep / rabbit_speed\n        # Calculate the total time taken by the rabbit to finish the race\n        rabbit_total_time = 10 + sleep_time + rabbit_time_after_sleep\n\n        if rabbit_total_time < turtle_race_time:\n            # The rabbit reaches the finish line first\n            winner = 'rabbit'\n            winning_time = rabbit_total_time\n            # The distance between them is the remaining distance for the turtle\n            distance_between = 6990 - (turtle_speed * rabbit_total_time)\n        else:\n            # The turtle reaches the finish line first\n            winner = 'turtle'\n            winning_time = turtle_race_time\n            # The rabbit didn't finish the race when the turtle did\n            rabbit_distance_at_turtle_finish = rabbit_distance_before_sleep + (rabbit_speed * (turtle_race_time - 10 - sleep_time))\n            distance_between = 6990 - rabbit_distance_at_turtle_finish\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table has 12/4 = 3 people on each side.\n    # When we put 8 tables in a row, we add new seats for all except the 2 end-tables, which keep all their seats.\n    # Tables in the middle have 2 sides merged, so they contribute 2 less seats each.\n    people_per_table = 12\n    num_tables = 8\n    max_people = (people_per_table * num_tables) - 2 * (num_tables - 1)\n    \n    return max_people\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    quotient = 9786 // 7\n    return quotient\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits = 339\n    total_pages = 0\n    pages_with_n_digits = 9\n    \n    for n in range(1, 10):  # The maximum number of digits a page number can have is 9\n        if digits > n * pages_with_n_digits:\n            digits -= n * pages_with_n_digits\n            total_pages += pages_with_n_digits\n            pages_with_n_digits *= 10\n        else:\n            total_pages += digits // n\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primerange\n    \n    def num_factors(n):\n        factors = divisors(n)\n        return len(factors)\n    \n    count = 0\n    for i in range(15, 150001, 15):  # Check multiples of 15 up to a reasonable upper bound\n        if num_factors(i) == 15:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time_delta = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time_delta\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit of each term individually using modulo 10\n    ones_digit_1 = (32**33) % 10\n    ones_digit_2 = (22**29) % 10\n\n    # Subtract the ones digits and take modulo 10 to get the final ones digit\n    ans = (ones_digit_1 - ones_digit_2) % 10\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize the difference between students and teachers\n    diff = 52\n    num_people = 0\n\n    # Start with the minimum possible square (3x3) and increase the size\n    side_length = 3\n    while True:\n        # Calculate the number of students (outermost layer)\n        students = side_length**2 - (side_length - 2)**2\n        # Calculate the number of teachers (inner layers)\n        if side_length - 2 <= 0:\n            teachers = 0\n        else:\n            teachers = (side_length - 2)**2 - (side_length - 4)**2\n\n        # If the difference matches, calculate the total number of people\n        if students - teachers == diff:\n            num_people = side_length**2\n            break\n        \n        # Increase side length for the next iteration\n        side_length += 2\n    \n    # Return the total number of people\n    return num_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(xavier, 3 * andrew)\n    equation2 = Eq(andrew, ((boris + jeffery + xavier) / 3) - 30)\n    equations = (equation1, equation2)\n\n    solutions = solve(equations, (andrew, boris, jeffery, xavier))\n    \n    jeffery_boris = solutions[boris] + solutions[jeffery]\n\n    return jeffery_boris\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    \n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial relationship between apples and oranges\n    equation1 = Eq(apples, (5/7) * oranges)\n\n    # After buying 12 more oranges, the new relationship\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Return the number of apples\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # To complete the expression 8 * 80 * 100 = 8^2 * boxed{}, we want to extract the factor that\n    # complements 8^2 to equal the original expression.\n    # The original expression can be simplified as follows:\n    # 8 * 80 * 100 = 8 * (8 * 10) * (10 * 10) = 8^2 * 10^2 * 10 = 8^2 * 1000\n    # Therefore, the boxed number is 1000.\n\n    # Assigning the boxed number to a variable for clarity.\n    boxed_number = 8 * 80 * 100 / 8**2\n\n    return boxed_number\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # Let's calculate the continued fraction representation of 2014/37\n    from fractions import Fraction\n\n    # Given fraction\n    frac = Fraction(2014, 37)\n    # Subtract the whole number part (54)\n    frac -= 54\n\n    # Find the continued fractions for the remaining fraction (1/(frac))\n    # This will give us the next numbers for 'x', 'y', and 'z'\n    x = frac.denominator\n    frac = 1 / (frac - x)\n    y = int(frac)\n    frac = 1 / (frac - y)\n    z = int(frac)\n\n    # The answer is the sum of x, y, and z\n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    endpoint = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    # Calculate the starting point by going counter-clockwise the amount of counts from the endpoint\n    start_number = (endpoint - (total_counts % clock_numbers)) % clock_numbers\n    if start_number == 0:\n        start_number = clock_numbers  # If start_number is 0, then it should be 12 (on the clock face)\n\n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation based on the given condition\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    # Solving for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    share = jackpot // winners\n    \n    return share\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = snake_hibernation * (2/3)\n    frog_hibernation = bear_hibernation * (5/4)\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    num_aliens = 1 + 5  # himself and his 5 brothers\n    num_legs_per_alien = 5\n    total_legs = num_legs_per_alien * num_aliens\n\n    price_per_5_shoes = 78\n    price_per_pair_socks = 12\n\n    # Since shoes are sold in 5s, each alien requires one set of shoes\n    total_cost_shoes = num_aliens * price_per_5_shoes\n\n    # Socks are sold in pairs (2 socks), need to calculate pairs of socks for all legs\n    total_pairs_socks = total_legs // 2\n    total_cost_socks = total_pairs_socks * price_per_pair_socks\n\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for num in range(100, 1000):\n        if all(num % div == 1 for div in [5, 6, 7]):\n            return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Define the equations based on the information given\n    a = 31 - 26  # a = 5\n    b = 26 - 20  # b = 6, but as b needs to be prime, we look for the next prime number\n    c = b  # c = 6, as c also should be prime, we look for the next prime number after b\n\n    # As b and c should be prime and the initial value 6 is not a prime number,\n    # we find the next prime numbers for b and c.\n    primes = list(primerange(1, 31))  # list of prime numbers less than 31\n    b = next(p for p in primes if p > b)\n    c = next(p for p in primes if p > c)\n    \n    # Calculate the product of a, b, and c\n    ans = a * b * c\n    \n    return ans\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n    \n    # Joleen baked 5 more pies than Rennie\n    equation1 = Eq(joleen, rennie + 5)\n    # 3/4 of the number of pies Rennie baked was equal to 2/3 of the number of pies Joleen baked\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    # Calculate the total number of pies\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x.\n    # Then the number of girls will be x + 8.\n    # Their total gives the number of pupils in the class:\n    # x (boys) + (x + 8) (girls) = 26 (total pupils)\n    # This simplifies to:\n    # 2x + 8 = 26\n    # Now, we solve for x:\n    x = (26 - 8) / 2\n    # The number of girls will be:\n    girls = x + 8\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    both = symbols('both')\n    apples = 3 * both\n    bananas = 5 * both\n    \n    equation = Eq(apples + bananas - both, 35)\n    solution = solve(equation, both)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_for_pie_kg = 550 / 1000  # converting grams to kilograms\n    oranges_for_juice_kg = 1050 / 1000  # converting grams to kilograms\n\n    oranges_left_kg = total_oranges_kg - (oranges_for_pie_kg + oranges_for_juice_kg)\n\n    return oranges_left_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # Convert minutes to hours\n    \n    # Let d be the distance to the park, hence time taken to go to the park is d/5\n    # and time taken to come back is d/4. The total time is the sum of both times.\n    \n    # average speed = total distance / total time, \n    # hence total distance = average speed * total time.\n    # When going to the park, the average speed is 5 km/h, and coming back it's 4 km/h.\n    # So we have two equations: d/5 + d/4 = total_time\n\n    # Multiplying both sides by the product of the two denominators (20) to clear the fractions gives:\n    # 4d + 5d = total_time * 20\n\n    # Solve for d:\n    d = (total_time * 20) / 9\n\n    return d\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    total_days = 5\n    difference = 3\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of n terms, a is the first term, and d is the common difference\n    total_chairs = total_days / 2 * (2 * first_day_chairs + (total_days - 1) * difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be time Nancy takes to finish the job alone\n    n = symbols('n')\n    \n    # The work done by Nancy in one hour is 1/n\n    # The work done by Lee in one hour is 1/(n-14)\n    lee_working_hours = 6\n    combined_hours = 10\n\n    # Equation for when they work together\n    equation1 = Eq((1/n + 1/(n - 14)) * combined_hours, 1)\n\n    # Equation for when Nancy works for 20 hours and Lee for 6 hours\n    equation2 = Eq((1/n * 20) + (1/(n - 14)) * lee_working_hours, 1)\n\n    # Solving the equations\n    solution = solve((equation1, equation2), (n))\n    nancy_time = solution[n]\n\n    return nancy_time\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n    \n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # John's assumption 60x + 6y + 25 = 200 + 10x + y\n    # Let's write this as: 6A + 25 = B, where A = 10x + y and B = 200 + 10x + y\n    # By substituting A = 45 into the equation, we get the following:\n    A = 45\n    B = 6 * A + 25\n\n    # Now calculate the value of B using A = 45\n    B_calculated = 200 + (10 * (A // 10) + (A % 10))\n    \n    # Compare the calculated B to the B from John's assumption\n    if B_calculated == B:\n        return True  # John is right\n    else:\n        return False  # John is wrong\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n    \n    total_spent = book_price + tshirt_price + pen_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let m represent Mary's current age and s represent her son's current age.\n    # We are given that the sum of their current ages is 45, so m + s = 45\n    \n    # In 5 years' time, Mary's age will be m + 5 and her son's age will be s + 5\n    # We are asked to find the sum of their ages in 5 years, so the sum will be (m + 5) + (s + 5)\n    \n    # Now we can calculate the sum of their ages in 5 years by simply adding 5 to each of their current ages and then summing them.\n    sum_current_ages = 45\n    sum_in_5_years = sum_current_ages + 5 + 5  # Adding 5 years to each person's age and summing\n    \n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # cost in pence\n    amount_paid = 100  # amount paid in pence (£1 = 100p)\n    change = amount_paid - total_cost  # change in pence\n    return change\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Initialize the count of marbles taken out to reach the condition\n    count = 0\n    # Add the maximum possible number of marbles without obtaining 3 of the same color\n    # We can take out 2 blue, 2 yellow and 1 red (which is the maximum without getting 3 of the same color)\n    count += 2  # Blue\n    count += 2  # Yellow\n    count += 1  # Red\n    # The next marble we take out must give us 3 of the same colour\n    count += 1  # One more marble to ensure 3 of the same color\n    return count\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The children must satisfy the conditions:\n    # n % 4 = 3 (3 children sitting out when divided by 4)\n    # n % 13 = 12 (1 child sitting out when divided by 13)\n\n    # And we are looking for a number between 100 and 190:\n    congruences = ((3, 4), (12, 13))\n    n = solve_congruence(*congruences)\n\n    # Since the range is within 100 and 190, filter the result to that range\n    ans = next(num for num in n if 100 <= num <= 190)\n\n    return ans\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sebastian and Garrett's current ages\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(sebastian_age, garrett_age - 24)    # Sebastian is 24 years younger than Garrett\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))  # In 10 years, Garrett will be thrice as old as Sebastian\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n\n    # Return Garrett's current age\n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Original numbers\n    original_equation = Eq(girls, boys + 65)\n\n    # After leaving the hall\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n    after_leaving_equation = Eq(boys_left, girls_left)\n\n    # Solving the equations\n    solutions = solve((original_equation, after_leaving_equation), (boys, girls))\n    boys_value = solutions[boys]\n    girls_value = solutions[girls]\n\n    # Remaining students in the hall\n    remaining_boys = boys_value - (2/5) * boys_value\n    remaining_girls = girls_value - (3/7) * girls_value\n    total_remaining = remaining_boys + remaining_girls\n\n    return int(total_remaining)\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    tax_paid = 90\n\n    sofa_price = tax_paid / tax_rate\n\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = number_of_people * travel_cost_per_person\n    total_hotel_cost = number_of_days * hotel_cost_per_day_per_person * number_of_people\n    total_spending_money = number_of_people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # There will be 4 \"groups\": M, C, P, and B (Math, Chemistry, Physics, Biology)\n    # Calculate all the ways we can arrange these 4 groups.\n    group_permutations = factorial(4)\n    \n    # Calculate all the ways we can arrange the books within their respective groups.\n    math_book_permutations = factorial(4)\n    chemistry_book_permutations = factorial(3)\n    physics_book_permutations = factorial(2)\n    biology_book_permutations = factorial(1)  # Only one way to arrange a single book\n    \n    # Multiply the number of permutations of each group with the permutations of the groups themselves.\n    total_permutations = group_permutations * math_book_permutations * chemistry_book_permutations * physics_book_permutations * biology_book_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from itertools import permutations\n\ndef solution():\n    total_permutations = len(set(permutations('ORANGES')))\n    vowels_permutations = len(set(permutations('OAE')))\n    consonants_permutations = len(set(permutations('RNGS')))\n    \n    # All permutations where vowels are together:\n    # Treat the three vowels as one single unit plus the four consonants,\n    # so we have 5 \"items\" to permute. Then, permute the vowels among themselves.\n    vowels_together = 5 * vowels_permutations * consonants_permutations\n\n    # Subtract permutations where vowels are together from total permutations\n    ans = total_permutations - vowels_together\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    apples = oranges + 150\n    bananas = oranges + 50\n    equation = Eq(apples + oranges + bananas, 1400)\n\n    solution = solve(equation, oranges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_000_000 + 17_000 + 7\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    metres_to_kilometres = 1000\n    height_in_kilometres = height_in_metres / metres_to_kilometres\n    return height_in_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n    ans = category1 * category2 * category3\n    return ans\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for side1 in range(1, 12):\n        for side2 in range(side1, 12): # isosceles triangle has at least 2 sides equal.\n            side3 = 12 - (side1 + side2) # calculate the third side based on the perimeter.\n            if side1 <= side2 <= side3: # triangle inequality theorem.\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # There is a winning strategy called the \"Nim Sum\" which is applicable here.\n    # We calculate the Nim Sum by XOR'ing the number of matches in both piles.\n    nim_sum = 35 ^ 24\n\n    # If the Nim Sum is 0, it means the second player has the winning strategy.\n    # If the Nim Sum is not 0, the first player has the winning strategy.\n    if nim_sum == 0:\n        return \"Wei'er\"\n    else:\n        return \"Eddie\", nim_sum\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # There are 8 seats but we are only placing 6 people\n    num_people = 6\n    num_seats = 8\n\n    # 1 person can be fixed due to circular arrangements to remove rotational duplicates\n    # So, we arrange the other (num_people - 1) people in the remaining seats\n    ans = factorial(num_people - 1) * factorial(num_seats - 1) // factorial(num_seats - num_people)\n    \n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: equal number of boys and girls\n    eq1 = Eq(boys, girls)\n\n    # After 12 boys join and 8 girls leave\n    eq2 = Eq(boys + 12, 2 * (girls - 8))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (boys, girls))\n    \n    # The initial total number of students is boys + girls\n    initial_total_students = solutions[boys] + solutions[girls]\n\n    return initial_total_students\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    # System of equations based on problem statement\n    # Assume initial counts for Eugene, Melvin, and David are e, m, and d respectively\n    # After transactions, the counts became\n    # Eugene: e - 2m + d\n    # Melvin: m + 2m - d = 3m - d\n    # David:  d + d = 2d\n    # Their final ratios are 46:12:7\n\n    from sympy import symbols, Eq, solve\n\n    e, m, d = symbols('e m d')\n\n    # Equations based on the problem\n    equation1 = Eq(e + m + d, 260) # Initially, they had a total of 260 stickers\n    equation2 = Eq((e - 2*m + d) / (3*m - d), 46/12) # Ratio of Eugene's to Melvin's after transactions\n    equation3 = Eq((3*m - d) / (2*d), 12/7) # Ratio of Melvin's to David's after transactions\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2, equation3), (e, m, d))\n\n    # Get the solution which makes sense for initial count (positive number of stickers)\n    for sol in solutions:\n        if all(val > 0 and val.is_real for val in sol):\n            return sol[0]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    \n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primerange\n\n    # It's given that 31 + a = 26 + b = 20 + c.\n    # Therefore, a - b = 5 and b - c = 6.\n\n    # We can use the smallest prime numbers.\n    # Let's deduce the other prime numbers from the smallest prime,\n    # which is 2.\n    a = 2\n    value = 31 + a\n    \n    # Find b such that 26 + b = value, and b is a prime\n    b = value - 26\n    \n    # Find c such that 20 + c = value, and c is a prime\n    c = value - 20\n\n    # Check if b and c are prime, if not iterate through the prime numbers\n    primes = list(primerange(1, value + 1))\n    \n    while b not in primes or c not in primes:\n        a = primes[primes.index(a) + 1]  # get the next prime number\n        value = 31 + a\n        b = value - 26\n        c = value - 20\n    \n    return a * b * c\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([80, 76, 72, 68, 64, 60, 56] - [78, 74, 70, 66, 62, 58])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # First segment at 7 m/s for 280 m\n    time1 = 280 / 7\n    \n    # Second segment at 5 m/s for 400 m\n    time2 = 400 / 5\n    \n    # Remaining distance for the third segment\n    remaining_distance = 800 - (280 + 400)\n    \n    # Third segment at 8 m/s\n    time3 = remaining_distance / 8\n    \n    # Total time for the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 7]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if isprime(25 - prime):\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    ribbon1 = 15\n    ribbon2 = 45\n    ans = gcd(ribbon1, ribbon2)\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Convert start time 6:52pm to minutes\n    end_time = (8 * 60) + 24    # Convert end time 8:24pm to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamps = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between_lamps\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    num_students = 6\n\n    max_peaches = (total_peaches - 1) // num_students + 1\n\n    return max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    ans = (18 + 52) / 2\n    return ans\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    n = 7\n    # Since the numbers are consecutive, the middle number is the average\n    # The middle number times the number of terms should equal the total sum\n    middle_number = total_sum // n\n    # The smallest number is three steps away from the middle number in a sequence of 7 consecutive numbers\n    smallest_number = middle_number - (n // 2)\n    return smallest_number\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2 / 9) * 36\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of vanilla cupcakes as 'v'\n    # So the number of chocolate cupcakes is 'v + 72'\n    # And the number of blueberry cupcakes is 'v - 36'\n    v = symbols('v')\n    \n    # Now, we write the equations based on the problem statement\n    # After selling some cupcakes, Sally had 427 cupcakes left altogether\n    # Therefore, (1 - 1/6) of chocolate, (1 - 2/3) of vanilla, and (1 - 7/9) of blueberry cupcakes are left\n    equation = Eq((5/6) * (v + 72) + (1/3) * v + (2/9) * (v - 36), 427)\n    \n    # Solve the equation\n    sold_cupcakes = solve(equation, v)\n    \n    # Calculate the number of chocolate cupcakes Sally sold\n    # She sold 1/6 of the chocolate cupcakes\n    chocolate_sold = (1/6) * (sold_cupcakes[0] + 72)\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The first congruence is x ≡ -3 (mod 4)\n    # The second congruence is x ≡ -1 (mod 7)\n    # The third congruence is x ≡ -3 (mod 9)\n    congruences = [(-3, 4), (-1, 7), (-3, 9)]\n    \n    # Using the Chinese Remainder Theorem to find a solution to the system of congruences\n    _, ans = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost = 45  # in pence\n    stamp_cost = 27      # in pence\n    post_cards_bought = 10\n    stamps_bought = 10\n    total_cost_in_pence = (post_card_cost * post_cards_bought) + (stamp_cost * stamps_bought)\n    note_value_pounds = 10  # £10 note\n    total_cost_pounds = total_cost_in_pence / 100  # convert pence to pounds\n    change = note_value_pounds - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # With Claire's seat fixed, there are 3 seats to arrange for Chantel, Tony, and Cale.\n    # Total arrangements without restriction: 3! (3 factorial)\n\n    total_arrangements = 3 * 2 * 1\n\n    # Since Claire and Tony cannot sit face to face, we can count the restricted arrangements.\n    # With Claire's position fixed, if Tony sits opposite, there are 2 positions for Tony.\n    # Since this is not allowed, we subtract these 2 restricted arrangements.\n\n    restricted_arrangements = 2\n\n    # The number of valid arrangements is the total arrangements minus restricted arrangements.\n    valid_arrangements = total_arrangements - restricted_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate_per_day = 180 / 10\n    \n    # Ryan's rate of making tables per day\n    ryan_rate_per_day = 180 / 15\n    \n    # The difference in the number of tables made per day\n    difference = frank_rate_per_day - ryan_rate_per_day\n    \n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let total questions be q, and time be t when marking 4 questions a minute\n    # Thus when marking 6 questions a minute, time spent is (t - 10), given 5 minutes late and 5 minutes early\n    # Equations based on rate*time=work => 4t=q and 6(t-10)=q\n    # Now, solving these equations will give us the value of q and t.\n\n    from sympy import symbols, Eq, solve\n\n    q, t = symbols('q t')\n    equation1 = Eq(4 * t, q)\n    equation2 = Eq(6 * (t - 10), q)\n\n    solutions = solve((equation1, equation2), (q, t))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # When rounded to 1 decimal place, the smallest possible mass\n    # would be anything that rounds up to 7.4\n    # So it could be anywhere from 7.35 and upward, but not reaching 7.45\n    # 7.35 would round up to 7.4, but 7.45 would round to 7.5\n    smallest_mass = 7.35\n    # return the smallest possible mass\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        nums = [i, i+1, i+2, i+3, i+4]\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    sum1 = nums[j] + nums[k] + nums[l]\n                    if sum1 % 37 == 0:\n                        for m in range(5):\n                            for n in range(m+1, 5):\n                                for o in range(n+1, 5):\n                                    if m != j or n != k or o != l:\n                                        sum2 = nums[m] + nums[n] + nums[o]\n                                        if sum2 % 60 == 0:\n                                            return max(nums)\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * 5) - (wrong_answers * 2)\n        if score == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # 75 pence, which is 0.75 pounds\n\n    number_of_cakes_sold = total_money_raised / price_per_cake\n\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_money = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remaining_money\n    money_left = remaining_money - spent_on_fees\n\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    \n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    \n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(1, 1)  # Example usage with x=1 and y=1; replace x and y with actual prices to get the correct cost"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Calculate the work done by P in one hour\n    p_work_per_hour = 1 / (12 * 8)\n    # Calculate the work done by Q in one hour\n    q_work_per_hour = 1 / (8 * 10)\n    \n    # Calculate the combined work per hour when P and Q work together\n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n    \n    # Calculate total hours needed to complete the job\n    total_hours = 1 / combined_work_per_hour\n    \n    # Since they are working 8 hours a day, calculate days needed\n    days_needed = total_hours / 8\n    \n    # Return the smallest integer greater than or equal to days_needed (ceiling)\n    import math\n    return math.ceil(days_needed)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    difference_in_centimetres = (3.2 * 100) - 30  # Convert 3.2 meters to centimeters and subtract 30 centimeters\n    return difference_in_centimetres\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    sum_of_squares = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for page in range(1, 41):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    total_cost = 5 * 56  # cost in pence\n    amount_paid = 1000  # amount paid in pence (since £10 is 1000 pence)\n\n    change = amount_paid - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    import sympy\n\n    num_factors = sympy.divisor_count(120)\n    \n    return num_factors\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Time between each chime is the same, regardless of the hour.\n    # For 3 chimes at 3 pm, there are 2 intervals between chimes.\n    intervals_for_3_chimes = 3 - 1\n    time_for_3_chimes = 6  # seconds\n    \n    # Time between two chimes is constant\n    time_per_interval = time_for_3_chimes / intervals_for_3_chimes\n\n    # For 6 chimes at 6 pm, there are 5 intervals between chimes.\n    intervals_for_6_chimes = 6 - 1\n    time_for_6_chimes = time_per_interval * intervals_for_6_chimes\n\n    return time_for_6_chimes\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    factors = [(i, product // i) for i in range(1, int(product**0.5) + 1) if product % i == 0]\n    min_diff = min(abs(pair[0] - pair[1]) for pair in factors)\n    return min_diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 15):\n        if num % 3 == 0 and 27 % num == 0:\n            ans = num\n            return ans\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    number_of_people = 85\n    price_per_person = 1.30\n    \n    total_money_collected = number_of_people * price_per_person\n    \n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_weight_durian + total_weight_watermelon\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Given values\n    total_questions = 40\n    marks_correct = 2\n    marks_wrong = -1\n    total_score = 71\n    \n    # Let x be the number of correct answers and (total_questions - x) be wrong answers\n    for x in range(total_questions + 1):\n        score = x * marks_correct + (total_questions - x) * marks_wrong\n        if score == total_score:\n            # If the calculated score matches the total_score, we have found the correct answer\n            correct_answers = x\n            wrong_answers = total_questions - x\n            break\n\n    return wrong_answers\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Ratio of speeds is 2:3, then Luca's time taken will be the inverse of that, 3:2\n    # Let x be the time taken by Max, so Luca takes x + 10 minutes\n    # The ratio of Luca's usual time to the time taken if he doubles his speed is 2:1\n\n    # Set up the equation based on the ratio of their times\n    # (Luca's time) / (Max's time) = (3/2)\n    # (x + 10) / x = 3/2\n\n    # Solve for x (Max's time)\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 10) / x, 3/2)\n    max_time = solve(equation, x)[0]\n\n    # Luca's usual time\n    luca_usual_time = max_time + 10\n    \n    # If Luca walked at double his usual speed, the time would be halved\n    luca_double_speed_time = luca_usual_time / 2\n\n    return luca_double_speed_time\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    less_than_million = 1000000 - number\n    return less_than_million\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = symbols('pens')\n    # Original count of pens and pencils is the same\n    pencils = pens - 5  # After giving away 5 pencils\n\n    # After giving away pencils, she has twice as many pens as pencils\n    equation = Eq(pens, 2 * pencils)\n\n    # Solve the equation to find the initial number of pens\n    initial_pens = solve(equation, pens)[0]\n\n    # After buying another 18 pens\n    final_pens = initial_pens + 18\n\n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Speed of jogging\n    jogging_speed = 6.5  # miles per hour\n\n    # Speed of walking\n    walking_speed = 4.5  # miles per hour\n\n    # Time spent jogging (from 6:30 AM to 7:30 AM)\n    jogging_time = 1  # hour\n\n    # Time spent walking (from 7:30 AM to 9:30 AM)\n    walking_time = 2  # hours\n\n    # Total distance covered jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Total distance covered walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 52 cards and every 13 cards form the same pattern.\n    # We need to ensure we draw at least one \"A\" card.\n    # According to the Pigeonhole Principle, we have to account for the worst-case scenario\n    # where we might draw every other pattern before we draw an \"A\".\n    # Since there are 4 patterns, drawing one from each (13 * 4) guarantees to draw one \"A\".\n\n    cards_drawn = 13 * 4 - 3  # Subtract 3 because we are looking for the case just before the guarantee.\n\n    return cards_drawn\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 7\n    downstream_speed = speed_in_still_water + speed_of_current\n    distance = 320\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    \n    total_sweets = ben_sweets + bob_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    length_per_piece = 40\n    num_pieces = remaining_length // length_per_piece\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_that_play_tennis = 1 / 10\n    fraction_of_girls_that_are_left_handed = 0.25\n\n    # calculate the total number of left handed students\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_that_play_tennis\n\n    # calculate the total number of students\n    total_students = total_left_handed / fraction_of_girls_that_are_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    butter_for_100_cookies = 100 / cookies_per_gram\n    return butter_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35', '%H:%M')\n    duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + duration\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # We have three choices for each of the three digits in the number.\n    choices_per_digit = 3\n\n    # Since we can use each digit more than once,\n    # the number of different three-digit numbers is simply:\n    total_combinations = choices_per_digit ** 3\n\n    return total_combinations\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    # A single digit number has no zeros (1-9)\n    # Double digit numbers have one zero each (10-99): 90 numbers, 9 zeros\n    # Triple digits: Each hundred (100-199) has 10 zeros, so 9 * 10 zeros total in range (100-999)\n    count_zero = 9 * 10  # Count of zeros in range 100-999\n    number = 99  # Last number with less than 3 digits\n\n    while count_zero < 100:  # Go up until reaching at least 100 zeros\n        number += 1  # Check the next number\n        str_number = str(number)  # Convert the number to string to count zeros\n        count_zero += str_number.count('0')  # Count the zeros in the current number\n    \n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank_per_week = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank_per_week\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n    interest = principal * rate * time\n    \n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # meters per minute\n    speed_slow = 120  # meters per minute\n    time_fast = 6     # minutes\n    time_slow = 8     # minutes\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    \n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    elias_position_from_front = 25 + 1  # Elias is directly behind Danya, add 1 for Danya\n    danya_position_from_back = 14\n    total_people = elias_position_from_front + danya_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # In an arithmetic sequence of 8 consecutive numbers,\n    # let's denote the first term as 'a' and the common\n    # difference as 'd' (which is 1 for consecutive numbers).\n    # The sum S of n terms in an arithmetic sequence is:\n    # S = n/2 * (2a + (n-1)d),\n    # where n is the number of terms, which is 8\n    n = 8\n    total_sum = 2012\n    # For consecutive numbers, the common difference 'd' is 1\n    d = 1\n    \n    # Hence, we can rewrite the sum equation for consecutive numbers as:\n    # 2012 = 8/2 * (2a + (8-1))\n    # Simplifying this, we can find 'a':\n    # 2012 = 4 * (2a + 7)\n    # 2012 = 8a + 28\n    # 1984 = 8a\n    # 248 = a\n    a = (total_sum - n * (n - 1) // 2) // n\n    \n    # The largest number in the sequence is the last one,\n    # which is 'a' + (n - 1) * d\n    largest_number = a + (n - 1) * d\n    \n    return largest_number\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # Every time Faye swaps, she effectively loses 2 bottles (3 go out, 1 comes in)\n    # She swapped 5 times, so she lost 2 * 5 = 10 bottles\n    # If she had gotten 4 - 1 = 3 bottles (which was expected), she would have had 10 bottles after swapping.\n    # Therefore, to calculate the initial number of bottles (x), we set up the equation:\n    # x - 10 = 3\n    # Solving for x, we get:\n    x = 3 + 10\n    return x\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's denote the side of the initial square array of boys as x.\n    # Then the number of boys in the choir is x^2.\n    # After adding 17 girls, the array forms a new square with the side (x+1),\n    # and thus the total number of children in the choir is (x+1)^2.\n    # The difference between these two squares is equal to the number of girls, which is 17.\n    # So, the equation to solve is: (x+1)^2 - x^2 = 17\n    \n    # Let's solve this equation.\n    x = 1\n    while True:\n        if (x+1)**2 - x**2 == 17:\n            break\n        x += 1\n    total_boys = x**2\n    return total_boys\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A, and let b be the number of students in class B\n    a, b = symbols('a b')\n\n    # Original ratio: a = 5/7 * b\n    equation1 = Eq(a, 5/7 * b)\n\n    # After transfer: a + 3 = 4/5 * (b - 3)\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n\n    # Solve the system of equations\n    sol = solve((equation1, equation2), (a, b))\n\n    # We want the number of students in class A before the transfer\n    return sol[a]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_millilitres = 125\n    litres_to_millilitres = 1000\n\n    total_millilitres = total_litres * litres_to_millilitres\n    time_seconds = total_millilitres / flow_rate_millilitres\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 0\n    page_number = 0\n    while total_digits < 237:\n        page_number += 1\n        total_digits += len(str(page_number))\n\n    return page_number - 1\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Incorrect average and correct average difference\n    incorrect_avg = 1468\n    correct_avg = 1462\n    avg_diff = incorrect_avg - correct_avg\n\n    # The incorrectly recorded savings and the correct savings difference\n    incorrect_savings = 1268\n    correct_savings = 1082\n    savings_diff = incorrect_savings - correct_savings\n\n    # The number of days can be found by dividing the total savings difference by the average difference\n    num_days = savings_diff / avg_diff\n\n    return num_days\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr Tung can cut a rope into 4 pieces in 12 minutes,\n    # which means he makes 3 cuts (since 4 pieces mean 3 cuts).\n    # So, time taken for each cut is 12 minutes / 3 cuts.\n    time_per_cut = 12 / 3\n\n    # For 12 pieces, he needs to make 11 cuts.\n    # So total time to make 11 cuts is time per cut * number of cuts.\n    total_time = time_per_cut * 11\n\n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_tree = current_year - birth_year\n\n    return age_of_tree\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let's denote the usual speed as s km/h, and the distance as d km.\n    # According to the problem, if Ivy travels at speed (s + 2) km/h,\n    # she will take one hour less time to travel the same distance d km.\n    \n    # Using the formula time = distance / speed, we have:\n    # 6 hours = d / s (for the usual trip from 1 PM to 7 PM)\n    # 5 hours = d / (s + 2) (for the faster trip where she arrives an hour earlier)\n    \n    # Now let's solve the equations\n    # 6s = d\n    # 5s + 10 = d\n    \n    # Both equations equal d, so we can set them equal to each other and solve for s:\n    # 6s = 5s + 10\n    # s = 10 (Ivy's usual speed is 10 km/h)\n    \n    # Now we can find d\n    # d = 6s\n    # d = 6 * 10\n    # d = 60 km\n    \n    d = 6 * 10  # distance in kilometers\n    return d\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    common_difference = 28 - 25\n    \n    first_term = term_value - (term_position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    total_product = 2240 // 4  # Dividing the total product by 4 to get the product of ages\n    for lily_age in range(1, total_product):\n        marry_age = lily_age + 1\n        carol_age = marry_age + 2\n        if lily_age * marry_age * carol_age == total_product:\n            return carol_age\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Chewy's equation\n    chewy_equation = ((8 * x + 8) / 2) - 3 * (x + 6)\n\n    # Simplify Chewy's equation\n    correct_equation = simplify(chewy_equation)\n\n    return correct_equation\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the first term and the common difference\n    a, d = symbols('a d')\n\n    # The 9th term is a + 8d\n    ninth_term = a + 8*d\n    # The 15th term is a + 14d\n    fifteenth_term = a + 14*d\n\n    # First equation: 9th term is 18 more than 15th term\n    equation1 = Eq(ninth_term, fifteenth_term + 18)\n\n    # The 20th term is a + 19d\n    twentieth_term = a + 19*d\n    # The 12th term is a + 11d\n    twelfth_term = a + 11*d\n\n    # Second equation: sum of the 20th term and the 12th term is 88\n    equation2 = Eq(twentieth_term + twelfth_term, 88)\n\n    # Solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the value of the first term and common difference\n    a_value = solutions[a]\n    d_value = solutions[d]\n\n    # Calculate the 32nd term, which is a + 31d\n    thirty_second_term = a_value + 31*d_value\n\n    return thirty_second_term\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2*x), 8 + 10*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2/5) * total_flowers\n    purple_flowers = (1/8) * total_flowers\n\n    ans = red_flowers + purple_flowers\n    return int(ans)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since we're distributing 10 identical marbles into 2 distinct piles,\n    # we consider the problem as finding the number of partitions of 10\n    # that consists of 2 parts.\n    # The distributions can be (1,9), (2,8), ..., (9,1), plus the cases (0,10) and (10,0),\n    # totaling to 11 possible ways to distribute the marbles.\n    \n    ans = 10 + 1  # We include the (0,10) and (10,0) scenarios\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # 1 liter is approximately 1.056688 quarts\n    liters_to_quarts = 2.5 * 1.056688\n    # Cup has a capacity of 0.5 quarts\n    cup_capacity = 0.5\n    # Calculate the number of cups\n    num_cups = liters_to_quarts / cup_capacity\n    # Round to the nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    max_pick_without_3_same = (5 - 1) + (9 - 1) + (4 - 1)\n    return max_pick_without_3_same + 1\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert everything to metres\n    wood1 = 85 / 100\n    wood2 = 2 * 100 / 100\n    wood3 = 147 / 100\n\n    # Calculate total length in metres\n    total_length = wood1 + wood2 + wood3\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    # Two and thirty-four hundredths as a decimal is simply 2.34\n    ans = 2.34\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    total_legs = 64\n    ant_legs = 6\n    spider_legs = 8\n    \n    for ants in range(total_legs // ant_legs + 1):\n        spiders = (total_legs - ants * ant_legs) / spider_legs\n        if spiders.is_integer():\n            max_ants = max(max_ants, ants)\n            \n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_after_giving = 34 + 2  # Used 2 stamps, add them back to get a count before using\n    stamps_after_buying = stamps_after_giving - 11  # Bought 11 stamps, subtract them to get a count before buying\n    stamps_initial = stamps_after_buying + 14  # Gave 14 stamps away, add them back to find the initial number of stamps\n    return stamps_initial\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    volume_litres = 7.5\n    volume_millilitres = volume_litres * litres_to_millilitres\n    return volume_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')  # Define the variable\n    # Perform operations in reverse order starting from 6\n    expr = ((number - 6) * 6 + 6) / 6\n\n    equation = Eq(expr, 6)  # Set the final expression equal to 6\n    solved_number = solve(equation, number)  # Solve the equation\n\n    return solved_number[0]  # Return the solution\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    fourth_bounce_height = 36\n    # For the following bounces, it bounced half of the height from which it dropped:\n    third_bounce_drop_height = fourth_bounce_height * 2\n    # For the first two bounces, it bounced three times as high as the height from which it was dropped:\n    first_bounce_height = third_bounce_drop_height / 3\n\n    # The height from which the ball was dropped originally:\n    initial_drop_height = first_bounce_height / 3\n\n    return initial_drop_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Original equation where sum of x and y is 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # Erroneous calculation where one number is divided by 10 incorrectly\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The difference multiplied by 100\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent_amount = initial_amount / 2\n    remaining_amount = initial_amount - spent_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679'):  # 8 is already used, so we replace the range with remaining digits.\n        num_str = '8' + ''.join(perm)\n        num = int(num_str)\n        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence\n\n    total_cost_individual_songs = 12 * cost_per_song\n    savings = total_cost_individual_songs - cost_whole_cd\n\n    return savings / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays_bought = 40\n\n    total_eggs = eggs_per_tray * trays_bought\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    differences = set()\n    for i in range(10, 100): # Loop through all 2-digit numbers\n        original = str(i)\n        reversed_num = original[::-1]  # Reverse the digits\n        difference = abs(i - int(reversed_num))  # Compute the absolute difference\n        differences.add(difference)  # Add the difference to the set\n\n    # Analyze the set to see if there's a pattern.\n    # We expect to find that all differences are multiples of 9.\n    # This can be proved using algebra on the general two-digit number (10a + b)\n    ans = all(difference % 9 == 0 for difference in differences)\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    payment = 20\n    change = payment - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_permutations = set(permutations(digits, 2))\n    ans = len(two_digit_permutations)\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # The smallest difference would be achieved by arranging the numbers \n    # such that the larger number has the largest possible digits in the \n    # highest places and the smaller number has the smallest possible \n    # digits in the highest places.\n\n    # Using 0,1,2,3,4 in ascending order for smaller number\n    smaller_number = int('01234')\n\n    # Using 9,8,7,6,5 in descending order for larger number\n    larger_number = int('98765')\n\n    # Calculating the smallest possible difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_in_seconds = 15\n    length_in_meters = 450\n    \n    speed_in_meters_per_second = length_in_meters / time_in_seconds\n    return speed_in_meters_per_second\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration_percent = (salt / total_solution) * 100\n    return concentration_percent\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    percentage = 70\n    number = 40\n\n    ans = (percentage / 100) * number\n\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote p as the number of stickers Peter originally had\n    # Sam had p + 40 stickers.\n    # After Sam gave 20% of his stickers to Peter, Sam had 0.8(p + 40).\n    # At the same time, Peter had p + 0.2(p + 40).\n    # Then Peter gave 25% of his stickers to Sam, which is 0.25(p + 0.2(p + 40)).\n    # So in the end, Sam had 0.8(p + 40) + 0.25(p + 0.2(p + 40)).\n    # And Peter had 0.75(p + 0.2(p + 40)).\n    # Sam then had 96 more stickers than Peter, which gives us the equation:\n    # 0.8(p + 40) + 0.25(p + 0.2(p + 40)) - 0.75(p + 0.2(p + 40)) = 96\n\n    p = symbols('p')\n    equation = Eq(0.8 * (p + 40) + 0.25 * (p + 0.2 * (p + 40)) - 0.75 * (p + 0.2 * (p + 40)), 96)\n\n    # Solve the equation to find the number of stickers Peter originally had\n    peter_stickers = solve(equation, p)[0]\n\n    return peter_stickers\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to each of the other friends\n    cards_sent_by_each = friends - 1\n    # Total cards sent is the number of friends times cards sent by each\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    return sum(i * (i + 1) for i in range(1, 102))\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    # cost of a pencil\n    pencil_cost = 2\n    \n    # cost of a pen\n    pen_cost = 4\n    \n    # The number of pencils should equal the cost of a pen if Owen wants to trade for a pen\n    pencils_for_a_pen = pen_cost / pencil_cost\n    \n    return int(pencils_for_a_pen)\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Calculate the total number of cookies eaten in each period\n    first_period_cookies = 9 * 3\n    second_period_cookies = 15 * 2\n    last_period_cookies = 10 * 2\n    \n    # Calculate the total number of cookies eaten\n    total_cookies = first_period_cookies + second_period_cookies + last_period_cookies\n    \n    # Calculate the number of days\n    total_days = 3 + 2 + 2\n    \n    # Calculate the average number of cookies eaten per day\n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book, also known as the normal force,\n    # is equal in magnitude and opposite in direction to the weight of the book.\n    # Since the book's weight (force due to gravity) is given as 20N,\n    # the normal force exerted by the table will also be 20N.\n    \n    normal_force = 20  # in newtons\n    return normal_force\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable T as a symbol\n    T = symbols('T')\n\n    # Amount on which different tax rates are applied\n    first_50k = 50000\n    above_50k = 140000 - 50000\n\n    # Tax equations based on the given information\n    tax_first_50k = 0.05 * first_50k\n    tax_above_50k = (0.08 + T) * above_50k\n\n    # Total tax paid is the sum of both tax amounts\n    total_tax_paid = tax_first_50k + tax_above_50k\n\n    # Equation representing the situation where total tax paid equals the amount the lawyer noticed\n    eq = Eq(total_tax_paid, 15100)\n\n    # Solve the equation for T\n    solution = solve(eq, T)\n\n    # Return the solution for T\n    return solution[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guys_age = y - 3\n    return guys_age\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # We use the Pigeonhole Principle to solve this problem.\n    # In the worst case, Lily could take out all the basketballs and volleyballs before she starts taking out the footballs.\n    # Number of basketballs + number of volleyballs + 1 ball (to guarantee 6 footballs)\n    num_balls_needed = 9 + 3 + 1\n\n    return num_balls_needed\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0   # height in meters\n\n    # Using the kinematic equation v^2 = u^2 + 2gh\n    # where u(initial velocity) = 0 (since the ball is gently pushed)\n    u = 0\n    # we want to find v (final velocity)\n\n    # Sympy symbols\n    v = symbols('v')\n    \n    # Kinematic equation\n    equation = Eq(v**2, u**2 + 2*g*h)\n    \n    # Solving for v will return two values; we take the positive root because speed is a scalar quantity\n    solutions = solve(equation, v)\n    v_final = max(solutions)\n    \n    return v_final\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes_made_initially = 6\n    desired_cakes = 10\n    \n    time_per_cake = time_for_6_cakes / cakes_made_initially\n    total_time_for_desired_cakes = time_per_cake * desired_cakes\n    \n    return total_time_for_desired_cakes\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # work per day for Candy and David\n    candy_work_per_day = 1 / 20\n    david_work_per_day = 1 / 25\n\n    # total work done by both when working together without any days off for David\n    total_work_without_days_off = (candy_work_per_day + david_work_per_day) * 12\n\n    # since the job is finished by the end of the 12th day, the total work required is equal to\n    # the total work done by Candy and David without any days off\n    total_work_required = total_work_without_days_off\n\n    # Let's assume David takes 'x' days off.\n    # Thus, total work by Candy when David takes days off is candy's work per day * 12\n    # Total work by David when he takes 'x' days off is david's work per day * (12 - x)\n    # This sum should also be equal to the total work required to finish the job\n    # So we get the equation: candy_work_per_day*12 + david_work_per_day*(12 - x) = total_work_required\n\n    # Now we solve this equation for 'x'\n\n    # days David takes off\n    x = symbols('x')\n\n    # equation for the work done when David takes x days off\n    equation = Eq(candy_work_per_day * 12 + david_work_per_day * (12 - x), total_work_required)\n\n    # solving for day 'x'\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # Equation 1: stickers - 13*pupils = 190\n    equation1 = Eq(stickers - 13*pupils, 190)\n    # Equation 2: stickers - 17*pupils = 50\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the total number of fruits, apples, and pears\n    total_fruits, apples, pears = symbols('total_fruits apples pears')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(apples, 4/5 * total_fruits)             # There are 4/5 apples of the total fruits at first\n    equation2 = Eq(pears, total_fruits - apples)           # The rest of the fruits are pears\n    equation3 = Eq(apples - 1/8 * apples, 3/4 * total_fruits - 30) # After removing 3/4 of the fruits, 1/8 of the apples are left WITH 30 pears\n    equation4 = Eq(pears - 30, 1/4 * total_fruits - 1/8 * apples) # The remaining pears are subtracted by the 30 pears left\n    \n    # Solve the equations to find the total number of fruits\n    solutions = solve((equation1, equation2, equation3, equation4), (total_fruits, apples, pears))\n\n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Start at the lowest two digit number that has a digit sum of 20 which is 299\n    # Increment by 11 (since the number must be divisible by 11) and check if the digit sum is still 20\n    num = 299\n    while True:\n        if sum(int(digit) for digit in str(num)) == 20:\n            return num\n        num += 11\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if sasmo * 4 == ogams and s != '0' and o != '0':\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    # Using the principle of multiplication\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_from_A_to_B = equal_volume - 28\n\n    return transfer_from_A_to_B\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Total number of oranges\n    total_oranges = 13\n    # Total number of kids\n    kids = 3\n    \n    # Since each kid gets at least one orange, we distribute one to each first\n    remaining_oranges = total_oranges - kids\n    \n    # Now we distribute the remaining oranges to 3 kids, which is equivalent to\n    # putting two dividers between oranges to divide them into 3 parts\n    # This is a combinations problem with repetition, also known as \"stars and bars\" problem\n    # We have to choose 2 positions to put dividers among the remaining oranges + dividers\n    # Number of positions = remaining oranges + (dividers - 1 because the last position is fixed)\n    positions = remaining_oranges + (kids - 1)\n    \n    # Number of ways to choose 2 positions out of the total positions\n    ans = comb(positions, kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal_amount = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    # Let r be the interest rate\n    r = symbols('r')\n    \n    # The formula for compound interest is\n    # A = P * (1 + r)^n, where A is the amount after n years, P is the principal amount,\n    # r is the annual interest rate (as a decimal), and n is the number of years.\n    \n    equation = Eq(principal_amount * (1 + r)**years, final_amount)\n    \n    # Solve for the interest rate r\n    solution = solve(equation, r)\n\n    # Since it's an annual interest rate and it's usually expressed in percentage, we multiply by 100\n    interest_rate = solution[0] * 100\n    \n    return interest_rate.evalf()\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.50\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n    \n    # Given that the price of each box of lychees is $6 less than 2 times the price\n    # of each box of mangoes, we can write this as an equation\n    price_relation = Eq(lychee_price, 2 * mango_price - 6)\n    \n    # Given that the fruit market bought 24 cases of mangoes and 20 cases of lychees\n    # at a cost of $1160, we can write this as another equation\n    total_cost = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    \n    # Solve the system of equations\n    solutions = solve((price_relation, total_cost), (mango_price, lychee_price))\n    \n    # Return the price per box of lychees\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percent = 60 / 100\n    fraction = 2 / 5\n    whole_number = 75\n\n    ans = percent * fraction * whole_number\n\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18 / 100\n    tax_percent = 10 / 100\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 5  # m/s\n    angle_degrees = 45\n    height = 30  # meters\n    \n    # Convert angle to radians\n    angle_radians = math.radians(angle_degrees)\n    \n    # Split initial velocity into horizontal and vertical components\n    initial_velocity_horizontal = initial_speed * math.cos(angle_radians)\n    initial_velocity_vertical = initial_speed * math.sin(angle_radians)\n    \n    # Calculate time of flight until it reaches ground level\n    # Using the equation y = v0y * t + (1/2) * a * t^2\n    # Since the final position (y) is where the arrow hits the ground, it would be -height (considering downward as negative)\n    # Acceleration (a) is due to gravity, which is -9.81 m/s^2 (negative as it's downwards)\n    # Rearranging the equation for t gives the quadratic equation: (1/2) * a * t^2 + v0y * t + y = 0\n    # We only consider the positive value of t since time cannot be negative\n    \n    # Coefficients for the quadratic equation at^2 + bt + c = 0\n    a = -9.81 / 2\n    b = initial_velocity_vertical\n    c = height\n    \n    # Using the quadratic formula to find the time of flight\n    discriminant = b**2 - 4*a*c\n    t1 = (-b + math.sqrt(discriminant)) / (2*a)\n    t2 = (-b - math.sqrt(discriminant)) / (2*a)\n    time_of_flight = max(t1, t2)  # we take the positive root as time cannot be negative\n    \n    # The horizontal velocity remains constant, so only the vertical velocity changes\n    # Final vertical velocity (using the equation v = u + at)\n    final_velocity_vertical = initial_velocity_vertical - 9.81 * time_of_flight  # 'g' is negative as it's acting downwards\n    \n    # The final velocity is the hypotenuse of the triangle with sides final_velocity_horizontal and final_velocity_vertical\n    final_velocity = math.sqrt(final_velocity_horizontal**2 + final_velocity_vertical**2)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    # Let's denote the weight of one elephant, cow, horse, and pig as E, C, H, and P respectively.\n    # According to the problem:\n    # 2E = 5C  => E = (5/2)*C\n    # 4C = 3H  => C = (3/4)*H\n    # 3H = 5P  => H = (5/3)*P\n    \n    # We want to find the number of pigs that weigh as much as 8 elephants.\n    # So, we need the weight of 8 elephants in terms of pigs.\n\n    # Weight of 8 elephants (in terms of cows):\n    # 8E = 8*(5/2)*C\n    # Weight of 8 elephants (in terms of horses):\n    # 8*(5/2)*C = 8*(5/2)*(3/4)*H\n    # Weight of 8 elephants (in terms of pigs):\n    # 8*(5/2)*(3/4)*H = 8*(5/2)*(3/4)*(5/3)*P\n    # Simplifying it, we get:\n    # 8*(5/2)*(3/4)*(5/3)*P = 10*5*P\n    # So, 8 elephants weigh as much as 50 pigs.\n\n    return 50\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # There are 5 slots between the dance performances and 2 on the edges\n    # where singing performances can be placed. Between each pair of dance \n    # performances, there must be at least one singing performance, placing\n    # 3 singing performances. This leaves 6 - 3 = 3 singing performances to arrange freely.\n    # These can be arranged in the 7 slots (5 between dances and 2 edges).\n    # We first choose the 3 slots out of 7 for the singing performances.\n    # This can be done in C(7,3) ways.\n    \n    sing_free_slots = factorial(7) // (factorial(3) * factorial(7 - 3))\n    \n    # Now, the 6 singing performances and 4 dancing performances can be arranged\n    # independently in their selected slots in 6! and 4! ways respectively.\n    \n    sing_permutations = factorial(6)\n    dance_permutations = factorial(4)\n\n    # Multiplying the separate arrangements gives the total arrangements\n    total_arrangements = sing_free_slots * sing_permutations * dance_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # There are 2 groups: comics and fictions\n    # We can arrange these 2 groups in 2! ways\n    group_arrangements = factorial(2)\n    \n    # Within the comic group, there are 4 comics which can be arranged in 4! ways\n    comic_arrangements = factorial(4)\n    \n    # Within the fiction group, there are 6 fictions which can be arranged in 6! ways\n    fiction_arrangements = factorial(6)\n    \n    # The total number of arrangements is the product of the arrangements of the groups\n    # and the arrangements within each group\n    total_arrangements = group_arrangements * comic_arrangements * fiction_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let the number of correct answers for Dora be x.\n    # Then the number of correct answers for Justin will be x + 3 given the point difference.\n    # Total points for Dora will be 10x - 5(10 - x)\n    # Total points for Justin will be 10(x + 3) - 5(10 - (x + 3))\n\n    for x in range(11):  # Dora can answer from 0 to 10 questions correctly.\n        points_for_dora = 10 * x - 5 * (10 - x)\n        points_for_justin = 10 * (x + 3) - 5 * (10 - (x + 3))\n        \n        if points_for_dora + points_for_justin == 155 and points_for_justin == points_for_dora + 15:\n            return x  # Return the number of correct answers for Dora.\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Class A has 3 groups, so they sold a total of 3 * 12 candies\n    # Total groups of Class A and Class B together is 3 + 4 = 7 groups\n    # Average number of candies sold by the 7 groups is 8 candies per group\n\n    # Total candies sold by Class A and Class B\n    total_candies_A_B = 7 * 8\n    # Total candies sold by Class A\n    total_candies_A = 3 * 12\n\n    # Let total_candies_B be the total number of candies sold by Class B\n    # From the total, subtract candies sold by Class A to get candies sold by Class B\n    total_candies_B = total_candies_A_B - total_candies_A\n\n    # Find the average sold by each group in Class B by dividing by the number of groups in Class B\n    avg_candies_B = total_candies_B / 4\n\n    return avg_candies_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for rates of work per hour.\n    # r_l = rate at which Lee types per hour\n    # r_n = rate at which Nancy types per hour\n    r_l, r_n = symbols('r_l r_n')\n\n    # Equation 1: If they work together, they will finish the job in 10 hours.\n    # Their combined work for 10 hours equals 1 job.\n    equation1 = Eq(r_l + r_n, 1/10)\n\n    # Equation 2: Lee types for 6 hours then Nancy types for 20 hours to finish 1 job.\n    equation2 = Eq(6 * r_l + 20 * r_n, 1)\n\n    # Solve the equations for rates of Lee and Nancy\n    solutions = solve((equation1, equation2), (r_l, r_n))\n\n    # Calculate how long it will take for Nancy to finish the job by herself.\n    # 1 job / rate of Nancy = time taken by Nancy to finish the job\n    time_nancy = 1 / solutions[r_n]\n\n    return time_nancy\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n\n    coffee_litres = 6\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string = total_string_length - used_string_length\n    number_of_pieces = 10\n    length_of_each_piece = remaining_string / number_of_pieces\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let x be the initial number of passengers\n    remaining_after_first_stop = 3 / 5\n    remaining_after_second_stop = 2 / 3\n    # After both stops, 22 people are left\n    final_passengers = 22\n\n    # Calculate the number of passengers at the start (before any stops)\n    initial_passengers = final_passengers / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return initial_passengers\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    result = 45 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n    ans = comb(flavours, doughnuts)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n    \n    ans = gcd(gcd(6, 9), 18)\n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    handshakes = comb(num_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the different types of chocolates\n    white, milk, dark = symbols('white milk dark')\n\n    # Given ratio of white to milk to dark chocolates is 3 : 7 : 5\n    equation1 = Eq(white / milk, 3 / 7)\n    equation2 = Eq(milk / dark, 7 / 5)\n\n    # There are 8 more dark chocolates than white chocolates\n    equation3 = Eq(dark, white + 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    num_squares = (large_square_side // small_square_side) ** 2\n    return num_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spend = 5  # 5p spent by Avril, which is one-quarter of her money\n    total_money = spend * 4  # Since 5p is one-quarter, multiply by 4 to find the total\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the stickers that Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n\n    # Set up the equation according to the problem statement\n    # Sam originally had 40 more stickers than Peter\n    original_condition = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_gives = 0.25 * (peter + sam_gives)\n    \n    # Sam and Peter's new amounts after the exchange\n    sam_new = sam - sam_gives + peter_gives\n    peter_new = peter + sam_gives - peter_gives\n    \n    # Sam has 96 more stickers than Peter after the exchange\n    final_condition = Eq(sam_new - peter_new, 96)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, final_condition), (sam, peter))\n\n    # Return the number of stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    # Equation representing the number of students who like badminton (1/4 of total + 3)\n    badminton_students = (1/4) * total_students + 3\n\n    # Equation representing the number of students who like table tennis (1/3 of the remaining students - 3)\n    table_tennis_students = (1/3) * (total_students - badminton_students) - 3\n\n    # Equation representing the number of students who like football (rest of the students)\n    football_students = 25\n\n    # Total students is equal to the sum of students liking badminton, table tennis, and football\n    total_equation = Eq(badminton_students + table_tennis_students + football_students, total_students)\n\n    # Solving for the total number of students\n    total_students_solution = solve(total_equation, total_students)\n    \n    # Return the first (and only) solution\n    return total_students_solution[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Probability of getting a green ball is given as 1/3\n    # Let x be the number of red balls to be added\n    \n    # Before adding, total balls = 5 red + 10 green = 15 balls\n    # After adding, total balls = 5+x red + 10 green\n    \n    # Probability of getting a green ball after adding x red balls\n    # P(green_ball) = number_of_green_balls / total_number_of_balls\n    # 1/3 = 10 / (5+x+10)\n    \n    # Solving for x\n    x = (10 * 3) - 15  # Multiply both sides by (5+x+10) and simplify\n    \n    return x\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    amount_given = 50\n    change = amount_given - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a number is determined by the ones digit of the base raised \n    # to the power of the exponent modulus 10.\n    \n    # One's digit of 32^33\n    # Since the powers of 2 cycle every 4 steps: 2, 4, 8, 6, the one's digit of \n    # 32^33 is the same as 2^(33 mod 4), which is 2^1 = 2.\n    ones_digit_32_33 = (2 ** (33 % 4)) % 10\n    \n    # One's digit of 22^29\n    # Similarly, the powers of 2 cycle every 4 steps, so the one's digit of \n    # 22^29 is the same as 2^(29 mod 4), which is 2^1 = 2.\n    ones_digit_22_29 = (2 ** (29 % 4)) % 10\n    \n    # The difference of the ones digit 32^33 - 22^29\n    difference_ones_digit = (ones_digit_32_33 - ones_digit_22_29) % 10\n    \n    return difference_ones_digit\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n    \n    # Use binary search to find the page number\n    low, high = 1, 1000  # start with a reasonable upper bound\n    while low < high:\n        mid = (low + high) // 2\n        if count_sixes(mid) < 18:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return high - 1 # since high is the first page to have 18 '6's, high - 1 will be the last page to have less than 18 '6's\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 + d2 + d3 == 12 and len({d1, d2, d3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # From the ratio 4:9 and the given 81, we find the corresponding number for 4 in the ratio\n    ratio_part = 81 / 9\n\n    # Now we use the ratio 4:9 to find the missing number corresponding to 4 in the ratio\n    missing_number = ratio_part * 4\n\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slip_down = 3\n    effective_jump = (jump_up * 2) - slip_down\n    jumps_to_reach_top = (height - jump_up) // effective_jump * 2 + 1\n\n    # Check if an additional jump is needed to reach the top\n    if (height - jump_up) % effective_jump != 0:\n        jumps_to_reach_top += 2\n\n    return jumps_to_reach_top\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = 0\n    for i in range(1, 4027, 2):\n        ans += ((i ** 3) / (i * (i + 1) * (i + 2)))\n    ans += 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and num % 5 == 4:\n            if int(num ** 0.5) ** 2 == num:\n                return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    # This is an arithmetic sequence where each term increases by 6\n    common_difference = 6\n    # The last known value in the sequence is 39\n    last_term = 39\n    # The next term is last_term + common_difference\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    incorrect_deduction = -2\n    \n    # Let x be the number of questions answered correctly\n    # Then (total_questions - x) is the number of incorrect or unanswered questions\n    # total_marks = correct_mark*x + incorrect_deduction*(total_questions - x)\n    \n    # Set up the equation\n    # 4*x - 2*(80 - x) = 152\n    \n    for x in range(total_questions + 1):\n        if correct_mark * x + incorrect_deduction * (total_questions - x) == 152:\n            return x\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(7)\n    vowels_permutations = factorial(4) * len(set(permutations('AIO', 3)))\n    consonants_permutations = factorial(4)\n    arrangements_with_vowels_together = vowels_permutations * consonants_permutations\n    return total_permutations - arrangements_with_vowels_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (1/4) * (wendy - 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the amount of water in Container A\n    A = symbols('A')\n    \n    # The equation based on the problem statement\n    equation = Eq(2 * (A - 500), A + 350)\n    \n    # Solve the equation\n    solution = solve(equation, A)\n    \n    # Assuming there is exactly one solution, return that solution\n    return solution[0]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    difference_1 = 51 - 39  # Difference between the first two numbers\n    difference_2 = 147 - 51 # Difference between the last two numbers\n    \n    # The greatest common divisor of the differences will be the integer we're looking for\n    ans = gcd(difference_1, difference_2)\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle and 5 other team members spoke 3 sentences each to each other\n    # So, there are 6 members (including Lovelle) who are interacting.\n    # Since every member says 3 sentences to each of the other 5 members, \n    # we have a total of 6 * 5 * 3 sentences being said.\n\n    # 12 team members did not speak to Lovelle, so they are not included in the interaction above.\n    # Hence, the total number of team members is the 6 members who interacted plus the 12 who didn't.\n\n    total_members = 6 + 12\n    return total_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    for i in range(1, 326):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To share 16 sausages equally among 24 people,\n    # each person should get 16/24 of a sausage.\n    # Simplifying 16/24, we get 2/3 of a sausage per person.\n    \n    # To find the least number of cuts to create pieces that\n    # are a fraction 2/3 of the whole, we need to find the \n    # smallest number of sausages that can be divided into\n    # pieces of 2/3 without leaving any remainder.\n    \n    # For each sausage, we need 3 cuts to divide it into 2/3 pieces,\n    # because 1 whole sausage is divided into thirds, and we combine\n    # two of the thirds from different sausages. This would mean we\n    # can serve three people with two sausages, and thus we make \n    # 3 cuts for three people.\n    \n    # Hence, for 24 people, the number of cuts needed can be calculated as:\n    cuts_per_group_of_three = 3\n    groups_of_three = 24 // 3\n    \n    total_cuts = cuts_per_group_of_three * groups_of_three\n\n    return total_cuts\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets_sold = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets_sold\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return int(ans)\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 100):\n        remaining_after_eaten = gums - 2\n        if remaining_after_eaten % 3 == 0:\n            shared = remaining_after_eaten // 3\n            remaining_after_shared = remaining_after_eaten - shared\n            if remaining_after_shared % 4 == 0:\n                return gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah_before, mark = symbols('sarah_before mark')\n\n    equation1 = Eq(sarah_before, mark + 20)\n    equation2 = Eq(sarah_before + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah_before, mark))\n\n    return solutions[sarah_before]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    nearest_10 = round(number, -1)\n    return nearest_10\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_no_adjacent(word, char):\n    num_char = word.count(char)\n    arrangements = set(permutations(word))\n    valid_arrangements = {arr for arr in arrangements if not any(arr[i] == arr[i + 1] == char for i in range(len(arr) - 1))}\n    return len(valid_arrangements)\n\ndef solution():\n    word = \"STATISTIC\"\n    num_t = word.count('T')\n    num_s = word.count('S')\n    num_i = word.count('I')\n    num_a = word.count('A')\n    num_c = word.count('C')\n    \n    # Total permutations ignoring 'T' restriction\n    total_permutations = factorial(len(word)) // (factorial(num_t) * factorial(num_s) * factorial(num_i) * factorial(num_a) * factorial(num_c))\n    \n    # Now we place the 'T's such that they are not next to each other\n    # For n slots, we have n + 1 places to put the 'T's (between and around slots)\n    non_t_letters = len(word) - num_t\n    places_to_put_t = non_t_letters + 1\n    \n    # Out of these places, choose num_t places to put 'T's\n    valid_places_for_t = factorial(places_to_put_t) // (factorial(num_t) * factorial(places_to_put_t - num_t))\n    \n    # Multiply the choices for placing 'T's with the permutations of other letters\n    valid_permutations = total_permutations * valid_places_for_t\n    \n    return valid_permutations // factorial(num_t) # Divide by num_t! because 'T's are indistinguishable\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    ans = 527 * 8\n    return ans\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern_diff = [3445 - 2945, 3245 - 3445, 3745 - 3245]\n\n    missing_number = 3745 + pattern_diff[1]  # following the up-down pattern\n\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    # This uses the formula for the sum of squares of the first n odd numbers:\n    # sum = n * (2n - 1) * (2n + 1) / 3\n    n = (25 + 1) // 2  # There are (25-1)/2 + 1 odd numbers between 1 and 25, inclusive\n    sum_of_squares = n * (2 * n - 1) * (2 * n + 1) / 3\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 * 7\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # since each chest can only be opened by 1 key,\n    # the maximum number of attempts will occur when the last key the explorer tries is the correct one for each chest.\n    \n    # For the first chest, the explorer may need to try up to all 9 keys.\n    attempts_for_first_chest = 9\n    # For the second chest, the explorer may need to try up to the remaining 8 keys.\n    attempts_for_second_chest = 8\n    # For the third chest, the explorer may need to try up to the remaining 7 keys.\n    attempts_for_third_chest = 7\n    # For the last chest, the explorer may need to try up to the remaining 6 keys.\n    attempts_for_fourth_chest = 6\n    \n    # The total maximum number of attempts will be the sum of attempts needed for each chest.\n    total_attempts = (attempts_for_first_chest + \n                      attempts_for_second_chest + \n                      attempts_for_third_chest + \n                      attempts_for_fourth_chest)\n    \n    return total_attempts\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    extra_mushrooms_if_same = 26\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # Then the number of mushrooms gathered in the second hour is (total_mushrooms - x)\n    # According to the condition: x + extra_mushrooms_if_same = total_mushrooms - x\n    # We solve for x as follows\n    mushrooms_first_hour = (total_mushrooms + extra_mushrooms_if_same) // 2\n    mushrooms_second_hour = total_mushrooms - mushrooms_first_hour\n\n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    w, m = symbols('w m')\n    equation1 = Eq(w, 4 * m)\n    equation2 = Eq(2 * w + 5 * m, 182)\n\n    solutions = solve((equation1, equation2), (w, m))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    diameter = 1.85  # diameter of each coin in cm\n    number_of_coins = 11  # total number of coins\n\n    # The total length is 10 times the diameter plus 1 diameter,\n    # as there are 10 gaps between the coins and each gap is 1 diameter wide.\n    total_length = (number_of_coins - 1) * diameter + diameter\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    third_term = 11\n    num_terms = 14\n\n    common_difference = second_term - first_term\n\n    last_term = first_term + (num_terms - 1) * common_difference\n\n    sum_of_sequence = (first_term + last_term) * num_terms / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    round_nearest = round(number, -2)\n    return round_nearest\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    # Each participant will shake hands with (participants - 1) others\n    # However, this count each handshake twice (A with B, and B with A)\n    # So we divide by 2 to get the unique handshakes\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    # For circular permutations, we use the formula (n-1)!\n    # where n is the number of people to sit around the table\n    num_people = 8\n    num_ways = factorial(num_people - 1)\n    return num_ways\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    diff = night_temp - morning_temp\n    return diff\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of powers of 2 cycle every 4: 2, 4, 8, 6\n    # 2017 modulo 4 is 1\n    last_digit_2 = 2\n\n    # The last digit of powers of 3 cycle every 4: 3, 9, 7, 1\n    # 2017 modulo 4 is 1\n    last_digit_3 = 3\n\n    # The last digit of the expression is the last digit of the product of the last digits\n    last_digit_expression = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit_expression\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ants_initial = symbols('ants_initial')\n\n    # Jerome sweeps 3/4 of the ants, remaining 1/4\n    ants_after_sweep = ants_initial * 1/4\n\n    # 2/5 of the remaining ants ran out, remaining 3/5\n    ants_after_flee = ants_after_sweep * 3/5\n\n    # 185 hungry ants crawl back into the kitchen\n    ants_final = ants_after_flee + 185\n\n    # Twice the initial number of ants\n    equation = Eq(ants_final, 2 * ants_initial)\n\n    # Solve for the initial number of ants\n    solutions = solve(equation, ants_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n\n    total_cost = book_cost * (books_first_day + books_second_day)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the first term be 'a' and the common difference be 'd'\n    a, d = symbols('a d')\n    \n    # Sum of the first four terms: a + (a+d) + (a+2d) + (a+3d)\n    sum_first_four = a + (a + d) + (a + 2*d) + (a + 3*d)\n    \n    # Sum of the last four terms: (a+4d) + (a+5d) + (a+6d) + (a+7d)\n    sum_last_four = (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d)\n    \n    # The sum of the first four terms is 32 less than the sum of the last four terms\n    equation = Eq(sum_first_four, sum_last_four - 32)\n    \n    # Solve the equation\n    solution = solve(equation, d)\n    \n    # Return the common difference 'd'\n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # Given sequence is a square number sequence where each number is the square of its position: n^2\n    # The sequence provided is: 1^2, 2^2, 3^2, 4^2, 5^2, 6^2, 7^2\n    # So the next number in the sequence will be the square of the next position, which is 8^2\n\n    next_position = 8\n    next_number = next_position ** 2\n\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    current_number = 1\n    for _ in range(2022 - 1):\n        next_number = current_number * 2 + 4\n        if next_number >= 100:\n            next_number %= 100\n        current_number = next_number\n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Find the least common multiple (LCM) of the two frequencies\n    # The LCM represents how often in a minute both lights flash at the same time\n    from math import gcd\n\n    red_flash_per_minute = 4\n    green_flash_per_minute = 6\n    \n    lcm = (red_flash_per_minute * green_flash_per_minute) // gcd(red_flash_per_minute, green_flash_per_minute)\n    \n    # Since the LCM is in terms of per minute, multiply by the number of minutes in an hour\n    flashes_in_an_hour = 60 // lcm\n    \n    # Include the first and the last time\n    ans = flashes_in_an_hour + 1\n\n    return ans\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 14):  # 3a must be less than 41, and a prime number\n        if isprime(a):\n            b = (41 - 3*a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    halfway = (4.5 + 10.3) / 2\n    return halfway\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    cost_price = selling_price / (1 + profit_percentage / 100)\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percentage = (new_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Given values\n    total_volume_per_bottle = 120  # ml of juice per bottle\n    water_fraction = 3/5\n\n    # Calculate the total volume per bottle (both juice and water)\n    total_volume_per_bottle /= (1 - water_fraction)\n\n    # Calculate the amount of water per bottle\n    water_volume_per_bottle = total_volume_per_bottle * water_fraction\n\n    # Calculate the amount of water needed for 6 bottles\n    total_water_for_six_bottles = water_volume_per_bottle * 6\n\n    return total_water_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g_conversion_factor = 1000\n    n = 8.2 * kg_to_g_conversion_factor\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    num_ways = factorial(len(letters))\n\n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's original speed\n    simon_speed = 150\n    # Friend's speed\n    friend_speed = 200\n    \n    # They walk for 10 minutes\n    time_walked = 10\n    \n    # Simon's distance from the school after walking for 10 minutes\n    simon_distance_walked = simon_speed * time_walked\n    # Friend's distance from the school after walking for 10 minutes\n    friend_distance_walked = friend_speed * time_walked\n    \n    # Simon runs back to school at twice of his original speed\n    simon_run_speed = 2 * simon_speed\n    # Time Simon takes to run back to school\n    time_simon_runs = simon_distance_walked / simon_run_speed\n    \n    # Distance the friend walks during the time Simon runs back\n    friend_distance_walked_during_run = friend_speed * time_simon_runs\n    \n    # Total distance the friend is from the school\n    total_friend_distance = friend_distance_walked + friend_distance_walked_during_run\n    \n    return total_friend_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm, 0\n        send = s*1000 + e*100 + n*10 + d\n        more = m*1000 + o*100 + r*10 + e\n        money = m*10000 + o*1000 + n*100 + e*10 + y\n        if send + more == money and s != 0 and m != 0:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_decorations = 7 # 2 bells + 2 stars + 2 red balls + 1 green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    ways = factorial(total_decorations) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    return ways\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # The strategy is to minimize the time taken by the slowest people by ensuring they are accompanied by the fastest.\n    # The sequence of events is:\n    # 1. Eddie and Jack cross the bridge (2 minutes, since we take the time of the slower person)\n    # 2. Eddie goes back with the flashlight (1 minute)\n    # 3. Rose and Mary cross the bridge (10 minutes)\n    # 4. Jack goes back with the flashlight (2 minutes)\n    # 5. Eddie and Jack cross the bridge (2 minutes)\n\n    # Total time taken:\n    total_time = 2 + 1 + 10 + 2 + 2\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    dispenser_capacity_l = 5\n    container_ratio = 0.25\n    cup_volume_ml = 150\n    number_of_cups = 14\n    ml_to_l = 1 / 1000\n\n    container_volume_l = dispenser_capacity_l * container_ratio\n    cups_volume_l = cup_volume_ml * number_of_cups * ml_to_l\n\n    remaining_water_l = dispenser_capacity_l - (container_volume_l + cups_volume_l)\n\n    return remaining_water_l\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    ans = count_derangements(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # A number is divisible by 99 if it is divisible by both 9 and 11.\n    # Divisibility rule for 9: The sum of the digits must be a multiple of 9.\n    # Divisibility rule for 11: The difference between the sum of the digits in the odd positions and the sum of the digits in the even positions must be a multiple of 11 (or zero).\n    \n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = 2000335 + digit1 * 10000 + digit2 * 1000\n            # Check divisibility by 9\n            if sum(int(digit) for digit in str(number)) % 9 == 0:\n                # Check divisibility by 11\n                if ((2 + digit2 + 3) - (digit1 + 3 + 5)) % 11 == 0:\n                    return number\n\n    return None\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 0\n    for i in range(1, 100):\n        if i % 7 == 0:\n            n = i\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # in minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pages Anny writes per day at her original rate\n    x = symbols('x')\n    \n    # Original rate: she can finish her homework in 8 days\n    # Pages per day multiplied by number of days equals total number of pages\n    original_days = 8\n    # original_pages_per_day * original_days = total_pages\n\n    # Increased rate: she can finish 2 days earlier, which means in 6 days\n    # Pages per day at increased rate equals original pages per day plus 2\n    increased_days = original_days - 2\n    # (original_pages_per_day + 2) * increased_days = total_pages\n\n    # Set up the two equations based on the above relationships\n    eq1 = Eq(x * original_days, (x + 2) * increased_days)\n\n    # Solve the system of equations for x\n    pages_per_day = solve(eq1, x)\n    total_pages = pages_per_day[0] * original_days\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate: 5 loaves in 20 minutes means (5 / 20) loaves per minute\n    # Bud's rate: 3 loaves in 15 minutes means (3 / 15) loaves per minute\n    pip_rate = 5 / 20\n    bud_rate = 3 / 15\n    \n    # Calculate the number of loaves in 40 minutes for each\n    pip_loaves = pip_rate * 40\n    bud_loaves = bud_rate * 40\n    \n    # Combined loaves baked in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The value was £11,000 after the first year (10% increase)\n    first_year_value = 11000\n    # The original price can be calculated from this 10% increase\n    original_price = first_year_value / 1.1\n    \n    # This year (second year) the house loses 10% of its value\n    second_year_value = first_year_value * (1 - 0.1)\n    \n    # Calculate the profit or loss by comparing the second year value with the original price\n    profit_or_loss = second_year_value - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Taking the worst-case scenario to ensure getting a pair of white socks,\n    # Yohan would pick 10 red and 10 black socks without getting any white. \n    # The next two socks he picks, no matter the color, will guarantee a pair of either white, red, or black.\n    # To ensure a white pair, we take one more sock, which must be white.\n\n    max_socks = 10 + 10 + 1  # 10 red, 10 black, and 1 white to guarantee a pair of white socks.\n\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # You can substitute any non-zero value for a\n    result = (12 * a) / 4 + (2 * a) * 5\n\n    return result / a  # Simplified result without 'a'\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    equation = Eq(cookies - (3/8)*cookies - (1/6)*cookies, 33)\n\n    initial_cookies = solve(equation, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    total_numbers = sum(range(3, 13))  # Sum of 3+4+...+12, since 10 is the first skipped number with 3 ones, 4 twos... \n    midpoint = total_numbers // 2 if total_numbers % 2 == 0 else total_numbers // 2 + 1\n\n    count, num = 0, 1\n    while count < midpoint:\n        count += num + 2  # Since we are writing 3 ones, 4 twos, we continue with num+2 each time\n        num += 1\n    \n    median = num - 1  # We subtract one because we added one extra in the last iteration of the loop\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let's denote Jemma's number as x.\n    # According to the problem, we have the equation:\n    # (x + 3) * 5 = 35\n    # We can solve for x by performing the inverse operations.\n    \n    # First, we divide both sides by 5 to undo the multiplication.\n    result_after_adding = 35 / 5\n    \n    # Then, we subtract 3 from both sides to undo the addition.\n    jemma_number = result_after_adding - 3\n    \n    return jemma_number\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    # May has 31 days. So from May 5th to May 31st, there are 31 - 5 = 26 days.\n    days_in_may_after_5th = 26\n    # June 7th is included, so there are 7 days in June to consider.\n    days_in_june_until_7th = 7\n    \n    # Total days between 5th May and 7th June\n    total_days = days_in_may_after_5th + days_in_june_until_7th\n    \n    # Since May 5th is a Monday, May 11th is the first Sunday after 5th May.\n    # Thus, we need to calculate Sundays starting from May 11th to June 7th.\n    # May 11th is the 6th day of May, and since we start counting from zero,\n    # we subtract 1 to align with Python's 0-indexing.\n    first_sunday = 11 - 5  \n    \n    # We now need to calculate how many Sundays fall within the range.\n    # We do this by counting the number of 7 day periods from the first Sunday.\n    number_of_sundays = (total_days - first_sunday) // 7 + 1\n    \n    return number_of_sundays\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    num_buckets = total_litres // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1 / 4\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg of flour\n    packets = 25  # number of packets\n\n    flour_per_packet = total_flour / packets\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # To be divisible by 3, the sum of the digits must be divisible by 3\n    # 5 + K + 2 + 7 + K = 14 + 2K must be divisible by 3\n    # Possible values for K: 0, 1, 2, ...\n\n    for K in range(10):\n        if (14 + 2*K) % 3 == 0:\n            # To be divisible by 4, the last two digits of the number must be divisible by 4\n            # For the number 5K27K, the last two digits are 2K\n            # Possible values for K when 20, 21, 22, ..., 29 need to be checked for divisibility by 4\n            last_two_digits = 20 + K\n            if last_two_digits % 4 == 0:\n                return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "from sympy import symbols, solve\n\ndef solution():\n    cookies, brownies = symbols('cookies brownies', integer=True)\n\n    # Original ratio 4:3\n    equation1 = cookies / brownies - 4/3\n\n    # New ratio after giving away 6 brownies 12:7\n    equation2 = cookies / (brownies - 6) - 12/7\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (cookies, brownies))\n\n    total_baked = solution[cookies] + solution[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Work done by 4 companies in 1 day\n    work_per_day_per_4_companies = 900 / 5\n\n    # Work done by 1 company in 1 day\n    work_per_day_per_company = work_per_day_per_4_companies / 4\n\n    # Work done by 6 companies in 1 day\n    work_per_day_per_6_companies = work_per_day_per_company * 6\n\n    # Number of days it takes for 6 companies to build a 5400 m expressway\n    days_for_6_companies = 5400 / work_per_day_per_6_companies\n    \n    return days_for_6_companies\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Buy at 10, sell at 20 -> profit: 20 - 10\n    first_transaction_profit = 20 - 10\n    \n    # Buy back at 30, sell at 40 -> profit: 40 - 30\n    second_transaction_profit = 40 - 30\n    \n    # Total profit is the sum of both transactions\n    total_profit = first_transaction_profit + second_transaction_profit\n    \n    return total_profit\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the initial red marbles, w be the initial white marbles\n    # Let x be the red marbles added by Pip, y be the white marbles added by Bud\n    r, w, x, y = symbols('r w x y', integer=True)\n    \n    # Initial ratio of red to white marbles: r/w = 3/2\n    initial_ratio = Eq(r/w, 3/2)\n    \n    # After Pip adds red marbles, the ratio becomes: (r+x)/w = 5/3\n    pip_ratio = Eq((r+x)/w, 5/3)\n    \n    # After Bud adds white marbles, the ratio becomes: (r+x)/(w+y) = 5/4\n    bud_ratio = Eq((r+x)/(w+y), 5/4)\n    \n    # Bud puts 100 more marbles than Pip: y = x + 100\n    bud_pip_difference = Eq(y, x + 100)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, pip_ratio, bud_ratio, bud_pip_difference), (r, w, x, y))\n    \n    # We are interested in the initial number of white marbles\n    return solutions[w]\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam's spending per ticket\n    adam_per_ticket = 93 / 6\n    \n    # Claire's spending per ticket\n    claire_tickets = 124 / adam_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25  # This is the sequence step (difference between terms)\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    total_sum = sum(range(1, 9))  # The sum of numbers from 1 to 8\n    player_one_sum = 23\n    player_two_sum = total_sum - player_one_sum  # The sum of Player Two's cards\n\n    cards = [1, 2, 3, 4, 5, 6, 7, 8]\n    max_card = 0\n\n    # Find the highest possible card for Player Two\n    for card in cards:\n        # Check if the remaining cards' sum equals Player Two's sum\n        remaining_cards = cards.copy()\n        remaining_cards.remove(card)\n\n        if sum(remaining_cards) - min(remaining_cards) == player_two_sum:\n            max_card = card\n            break\n\n    return max_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, 2 shoes per pair\n    time_per_shoe = 2  # time taken to clean one shoe in minutes\n    cobblers = 2  # number of cobblers\n\n    # Each cobbler cleans shoes at the same rate, so the work is divided equally\n    # Total time is calculated by the total amount of shoes,\n    # divided by the number of cobblers, multiplied by the time per shoe\n    total_time = (total_shoes / cobblers) * time_per_shoe\n\n    return int(total_time)\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(1, 21))\n    ans = sum(sum(j**2 for j in range(1, i + 1)) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    # Simplify the fraction by realizing 2019 is common and factor it out\n    numerator_simplified = 1 + 2018\n    denominator_simplified = 2019 * 2020 - 1\n\n    # Recognize that (2019 - 1) * (2020) is one less than 2019 * 2020\n    ans = numerator_simplified / denominator_simplified\n\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    score = 168\n    attempted_questions = total_questions - not_attempted\n\n    # Let x be the number of correct answers\n    # The number of wrong answers will be (attempted_questions - x)\n    # Based on the scoring rules, the total score is 4x - (attempted_questions - x)\n    # Set up the equation 4x - (attempted_questions - x) = score\n\n    correct_answers = (score + attempted_questions) // 5\n\n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    total_players = 6\n    # Choose 2 out of 6 for a handshake\n    num_handshakes = comb(total_players, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    dumplings_to_be_given = (luna_dumplings - lucy_dumplings) // 2\n    return dumplings_to_be_given\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    full_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (full_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the digits\n    B, C, D, E = symbols('B C D E', integer=True)\n\n    # Set the constraints for the digits: they must be between 0 and 9,\n    # and all different\n    constraints = [Eq(B, i) for i in range(10)] + \\\n                  [Eq(C, i) for i in range(10)] + \\\n                  [Eq(D, i) for i in range(10)] + \\\n                  [Eq(E, i) for i in range(10)] + \\\n                  [B != C, B != D, B != E, C != D, C != E, D != E]\n\n    # Formulate the equation based on the problem\n    # Remember that CBCD = C*1001 + B*100 + D, similarly for CDBC and BDEC\n    equation = Eq(C*1001 + B*100 + D + B*1001 + D*100 + C, B*1000 + D*100 + E*10 + C)\n\n    # Solve the equation with the given constraints\n    solutions = solve([equation] + constraints)\n\n    for solution in solutions:\n        # Construct the number from the solution\n        ans = solution[B]*1000 + solution[D]*100 + solution[E]*10 + solution[C]\n        return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "from math import lcm\n\ndef solution():\n    # Least common multiple of pack sizes\n    # We use lcm to ensure that he buys an equal number of each type of pack\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Number of packs needed to reach at least 1000 markers\n    num_packs = -(-1000 // pack_lcm)  # Ceiling division\n\n    # Minimum number of markers purchased\n    min_markers = num_packs * pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # CHLLNG are considered individual characters\n    consonants_count = factorial(6) # 6 consonants\n\n    # Treat AEE as a single entity AEEx\n    vowels_count = factorial(3) # There are 3 vowels but we need to count the permutations of E and E\n    \n    # +1 because AEEx is considered one entity, so we have 6+1 = 7 entities to arrange\n    all_letters_count = factorial(7)\n\n    # Total number of arrangements\n    total_combinations = all_letters_count * vowels_count // factorial(2) # AEEx has a repetition of E to be divided\n\n    return total_combinations\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3  # 3 months\n    apr_to_jul = 350 * 4  # 4 months\n    aug_to_oct = 1250  # sum for 3 months\n    nov_to_dec = 400 * 2  # 2 months\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    total_months = 12  # total months in a year\n\n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 52\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Let's denote the divisor (which is also the quotient) as 'n'.\n    # The least dividend that satisfies the condition \"dividend = n * n + remainder\"\n    # would simply be when n = 1 (since n * 0 wouldn't satisfy the remainder condition),\n    # so the minimum dividend is calculated as:\n    divisor_quotient = remainder + 1  # n must be at least one more than the remainder\n    dividend = divisor_quotient * divisor_quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    \n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + 1/4 * lorries)\n    equation3 = Eq(cars + bikes + lorries % 2, 0)\n    equation4 = Eq(cars + bikes + lorries, '<100')\n\n    solutions = solve((equation1, equation2, equation3, equation4), (cars, bikes, lorries))\n    for sol in solutions:\n        total = sum(sol)\n        if total % 2 == 0 and total < 100:\n            return sol\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    row_difference = 2\n    row_number = 12\n\n    # Each row has 2 more seats than the previous row\n    # So we calculate the number of seats in the 12th row using the formula for arithmetic progression: a + (n-1)d\n    seats_in_12th_row = first_row_seats + (row_number - 1) * row_difference\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_min = 10\n    entrance_capacity = 25\n    \n    # If there is one entrance, there will be no one waiting in the line in 16 min.\n    # visitors_joined = visitors_per_min * time_with_one_entrance\n    # visitors_checked_in = entrance_capacity * time_with_one_entrance\n    # visitors_joined = visitors_checked_in\n    # Solve for the time_with_one_entrance = 16 min\n    \n    # With two entrances, the total capacity is doubled\n    total_entrance_capacity = 2 * entrance_capacity\n    \n    # Time for no one waiting with two entrances:\n    # visitors_per_min * time_with_two_entrances = total_entrance_capacity * time_with_two_entrances\n    # Solve for time_with_two_entrances\n    \n    # Since the number of visitors that join the line each minute is constant (10 visitors),\n    # and the total number of visitors processed in 16 mins with one entrance is equal to the visitors joined,\n    # for two entrances, we can directly calculate the time it would take to clear the same number of visitors\n    time_with_one_entrance = 16\n    visitors_processed_by_one_entrance = entrance_capacity * time_with_one_entrance\n    time_with_two_entrances = visitors_processed_by_one_entrance // total_entrance_capacity\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    cube_root = int((245 * p) ** (1/3))\n    \n    while cube_root ** 3 != 245 * p:\n        p += 1\n        cube_root = int((245 * p) ** (1/3))\n\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_spent = total_pages / pages_per_day\n\n    return int(days_spent)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    \n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    money_after_book = initial_money - spent_on_book\n    spent_on_dvd = money_after_book * 0.20\n    remaining_money = money_after_book - spent_on_dvd\n    return remaining_money\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # The decimal part of 1/3 is a recurring decimal which is 0.333...\n    # The first 1000 digits in the decimal part are all 3's\n    sum_of_digits = 3 * 1000\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_day = 5\n    slide_night = 3\n    net_distance_per_day = climb_day - slide_night\n\n    # The snail reaches or exceeds the total distance before sliding back on the last day\n    days = (total_distance - climb_day) // net_distance_per_day + 1\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    subtracted_number = final_number - 12\n    original_number = subtracted_number / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    return sum(scores) / len(scores)\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, lemons = symbols('oranges lemons')\n    \n    original_ratio = Eq(oranges / lemons, 3/5)\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n    \n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits, so there are 2^3 - 1 ways to choose fruits\n    # The minus 1 accounts for the option where no fruit is chosen.\n    ways_to_choose = (2 ** 3) - 1\n    # By the Pigeonhole Principle, to ensure at least two students choose the same combination,\n    # we need one more student than the number of ways to choose.\n    students_needed = ways_to_choose + 1\n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    christmas_price = original_price - discount_amount\n    return christmas_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    # Number of choices for each category\n    burgers = 2\n    sides = 3\n    drinks = 5\n    \n    # Using the principle of multiplication to determine the number of different combos\n    combos = burgers * sides * drinks\n    \n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    amount_spent = 10\n    fraction_of_total = 1/4\n    initial_amount = amount_spent / fraction_of_total\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    ducks_legs = ducks * 2\n    parrots_legs = parrots * 2\n    rabbit_legs = rabbit * 4\n    cats_legs = 4\n\n    total_legs = 32\n    legs_without_cats = ducks_legs + parrots_legs + rabbit_legs\n    cats = (total_legs - legs_without_cats) // cats_legs\n\n    return cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    class_a = 45\n    class_b = 75\n    class_c = 210\n\n    # Calculating the greatest common divisor of the three classes\n    greatest_common_factor = gcd(class_a, gcd(class_b, class_c))\n    return greatest_common_factor\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    \n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(father_age + judy_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(x-1), 9-2*(x+1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b*b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n\n    multiples = [6, 8, 9, 15]\n\n    # Least common multiple (LCM) of the given multiples\n    min_common_multiple = lcm(*multiples)\n\n    # Find the smallest number greater than or equal to 1000 that is a multiple of LCM\n    min_markers = (1000 // min_common_multiple) * min_common_multiple\n    if min_markers < 1000:\n        min_markers += min_common_multiple\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of rooms\n    x = symbols('x')\n    \n    # When 4 people per room, 40 students don't have dormitories\n    eq1 = Eq(4*x + 40, 6*x - 24)\n    \n    # Solve the equation\n    rooms = solve(eq1, x)[0]\n    \n    return rooms\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values in the problem\n    term_10 = 23\n    term_15 = 38\n    term_10_index = 10\n    term_15_index = 15\n    term_requested_index = 102\n\n    # Calculate the common difference using the given terms\n    common_difference = (term_15 - term_10) / (term_15_index - term_10_index)\n\n    # Calculate the first term (a1)\n    first_term = term_10 - (term_10_index - 1) * common_difference\n\n    # Calculate the requested term using the arithmetic sequence formula\n    requested_term = first_term + (term_requested_index - 1) * common_difference\n\n    return requested_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3/5\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_age_future = 15\n\n    john_age_future = john_age_now + (jane_age_future - jane_age_now)\n\n    return john_age_future\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # When the older brother was the same age as the younger brother's current age,\n    # the younger brother was 12.\n    # This means older_current - x = younger_current,\n    # and younger_current - x = 12, leading to older_current - younger_current = x.\n\n    # When the younger brother becomes the same age as the older brother's current age (in x years),\n    # the older brother will be 27. So younger_current + x = older_current,\n    # and older_current + x = 27.\n\n    # We have two equations from the conditions:\n    # older_current - younger_current = younger_current - 12\n    # older_current + x = 27\n\n    # Solving the system of equations\n    eq1 = Eq(older_current - younger_current, younger_current - 12)\n    eq2 = Eq(older_current + (older_current - younger_current), 27)\n\n    solutions = solve((eq1, eq2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq((13 - x)**2, 25)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Since we're dealing with whole number coefficients, we choose the whole number solution\n    ans = [s for s in solutions if s.is_integer][0]\n\n    return ans\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')  # Define the cost price as a symbol\n\n    # List the equation based on the problem statement\n    marked_price = 1.20 * cost_price  # Marked at 20% above the cost price\n    selling_price = 0.80 * marked_price  # Sold at 80% of the selling price\n    loss = 40  # The loss was $40\n\n    # Loss is cost price - selling price\n    equation = Eq(cost_price - selling_price, loss)\n\n    # Solve for the cost price\n    solutions = solve(equation, cost_price)\n\n    return solutions[0]  # Extract the solution from the list\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = 7 + (3 * 11)\n    part2 = (7 + 3) * 11\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate of Tap X and Tap Y together\n    combined_rate = 1 / 6\n    # Rate of Tap X alone\n    rate_x = 1 / 10\n    # Using inclusion-exclusion principle to find the rate of Tap Y alone\n    rate_y = combined_rate - rate_x\n    # Time taken by Tap Y alone is the inverse of its rate\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')  # x and y represent the number of markers Xuanrui and Yaokuan had, respectively\n    total_markers = 708\n    xuanrui_gave = 532\n    yaokuan_sold_fraction = 3/7\n\n    # Equation representing the total number of markers initially\n    eq1 = Eq(x + y, total_markers)\n    # Equation representing the relationship after Xuanrui gave away markers and Yaokuan sold some\n    eq2 = Eq(x - xuanrui_gave, y - yaokuan_sold_fraction * y)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_percentage = 12\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n    total_points = 44\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * points_correct + wrong_answers * points_wrong == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial = 1\n    sum_factorials = 0\n    for i in range(1, 9):\n        factorial *= i\n        sum_factorials += factorial\n    return sum_factorials % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the total amount of sugar in each cup\n    sugar_in_A = 300 * 0.20\n    sugar_in_B = 300 * 0.30\n\n    # Calculate the total volume of the mixture\n    total_volume = 300 + 300\n\n    # Calculate the total amount of sugar\n    total_sugar = sugar_in_A + sugar_in_B\n\n    # Calculate the sugar concentration in the mixture\n    concentration = (total_sugar / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    rate = 1 / 2.5\n\n    pounds = dollars * rate\n\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes at first\n    # Let y be the number of $10-notes at first\n    # We have two equations:\n    # x + y = 95 (Total notes)\n    # x + 5y = 175 (After exchanging $10 notes for $2 notes)\n    # We can solve these simultaneous equations to find the value of x\n\n    # Subtract the first equation from the second one\n    y = 175 - 95\n\n    # Solve for x using the first equation\n    x = 95 - y\n\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    train_length = 540\n    head_length = 10\n    carriage_length = 27\n    distance_between = 1\n\n    # The total length includes the head of the train, the carriages, and the distances between them.\n    num_carriages = (train_length - head_length) // (carriage_length + distance_between)\n\n    # Including the head of the train\n    return num_carriages + 1\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Counting for the digit '8' in the ones place\n    ones_count = (288 // 10) + 1  # Every x8 page from 8 to 288 (inclusive)\n\n    # Counting for the digit '8' in the tens place\n    tens_count = (28 // 10) * 10  # Every page from 80 to 89, ten times from 80 to 280\n    \n    # Counting for the digit '8' in the hundreds place\n    # Since the book has only 288 pages, we do not need to consider the hundreds place.\n\n    # Correct calculation for the total count (Bobby's mistake was that he counted 30 twice for tens place)\n    total_count = ones_count + tens_count\n    \n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = 1442\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Equation representing the total number of marbles\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    # Equation representing Ahmad's marbles as 6 times Ryan's marbles\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # Solving the equations to find the number of marbles Ahmad and Ryan have\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    # Number of marbles Ahmad and Ryan currently have\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    # Calculating the number of marbles Ahmad needs to give to Ryan for them to have an equal amount\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining the symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # equations based on the given information\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # number of triangles equal to a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_score = 82\n    total_questions = 50\n    points_correct = 2\n    points_wrong = -1\n\n    # Initialize the number of correct answers according to her statement\n    correct_answers = 32\n    # Calculate the number of wrong answers based on the correct ones\n    wrong_answers = total_questions - correct_answers\n    # Calculate the score based on correct and wrong answers\n    score = correct_answers * points_correct + wrong_answers * points_wrong\n    \n    while score != total_score and correct_answers <= 50:\n        correct_answers += 1\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * points_correct + wrong_answers * points_wrong\n\n    # Return the correct number only when Shenjia's score matches the calculated score\n    if score == total_score:\n        ans = correct_answers\n    else:\n        ans = \"Shenjia's statement was incorrect and the correct number could not be determined under the given constraints\"\n\n    return ans\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 25  # Start with a value of x that is guaranteed to be larger than the smallest solution\n    y = 0   # Initializing y\n\n    # We know that 24x must end with a digit of 8 for the entire expression to hold true, \n    # the smallest such x that is a whole number would be when 24x = 8 mod 25, \n    # because 25y will always be a multiple of 25 and hence not affect the last digit.\n    while (24 * x - 8) % 25 != 0:\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"2{x}{y}\")\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = original_price * 0.15\n    discounted_price = original_price - discount\n    increase = discounted_price * 0.15\n    final_price = discounted_price + increase\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for each bag\n    price_per_kg_first_bag = 5 / 2.5\n    price_per_kg_second_bag = 7.70 / 4\n\n    # Compare the price per kg to find out which is the better value\n    if price_per_kg_first_bag < price_per_kg_second_bag:\n        return \"2.5 kg bag\"\n    else:\n        return \"4 kg bag\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarter_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarter_full) / 2\n    mass_empty_jar = 2 * mass_quarter_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Calculate the number of trees on one side, including both ends.\n    trees_per_side = (road_length // interval) + 1\n\n    # Calculate the total number of trees for both sides.\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    wrong_calculation = Eq(x / 4 - 25, 2021)\n    wrong_solution = solve(wrong_calculation, x)\n\n    correct_answer = wrong_solution[0] * 4 + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    # Calculate the height of one block\n    height_of_one_block = 182 / 28\n    # Calculate the height of 42 blocks\n    height_of_42_blocks = height_of_one_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1  # Increment is 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must be a multiple of 9.\n    for E in range(10):\n        # Construct the number with the current value of E\n        number = int(f\"2{E}3{E}2\")\n        # Check if the sum of digits is divisible by 9\n        if sum(int(digit) for digit in str(number)) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # x:5 = y:3 is a direct proportional relationship\n    relationship = 'direct'\n    \n    # To find the value of y when x=5, we use the ratio and cross-multiply\n    x = 5\n    y = (3/5) * x\n    \n    return relationship, y\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discounted_price = selling_price * 0.90  # 10% Christmas discount\n    profit = discounted_price - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m, n = 1, 1\n\n    while True:\n        original_students = m * m + 5\n        new_students = original_students + 18\n        n = int(new_students**0.5)\n        if n * n == new_students:\n            break\n        m += 1\n    \n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solved = solve(equation, x)\n    return solved[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    a_students = 12\n    b_students = 15\n    c_students = 18\n\n    ab_gcd = gcd(a_students, b_students)\n    abc_gcd = gcd(ab_gcd, c_students)\n\n    return abc_gcd\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # We need to find out the first two numbers of the sequence,\n    # so we can use them to find out the rest of the sequence up to the seventh number.\n\n    # Let's denote the first number as a and the second number as b.\n    # We then have the following sequence based on the description:\n    # a, b, a+b, a+2b, 2a+3b, 3a+5b, 5a+8b, ...\n\n    # We know that the fourth number is 6 and the sixth number is 15. So we get:\n    # a + 2b = 6      (1)\n    # 3a + 5b = 15    (2)\n\n    # Now we can solve this system of equations to find a and b.\n    # Multiply the first equation by 3, and subtract the second equation from the result:\n    # 3a + 6b = 18\n    # Subtract (2) from this result:\n    # (3a + 6b) - (3a + 5b) = 18 - 15\n    # b = 3\n\n    # Now substitute b into equation (1):\n    # a + 2 * 3 = 6\n    # a + 6 = 6\n    # a = 0\n\n    # Now we know a = 0 and b = 3, so we can find the seventh number.\n    # Seventh number is 5a + 8b = 5*0 + 8*3 = 24\n\n    return 24\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    end_time = start_time + timedelta(minutes=45 + 30)\n    return end_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average before changing a number\n    initial_average = 25\n    \n    # Sum of the original 3 numbers\n    initial_sum = 3 * initial_average\n    \n    # New average after one number is changed to 16\n    new_average = 22\n    \n    # Sum of the numbers after changing one to 16\n    new_sum = 3 * new_average\n    \n    # Calculate the change in sum after altering one number to 16\n    difference = initial_sum - new_sum\n    \n    # The original value of the altered number\n    original_number = 16 + difference\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 3 and number % 6 == 5:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls\n    g = symbols('g')\n    b = 36 - g  # Then the number of boys is b = 36 - g\n\n    # Set up the equations based on the average scores and total number of students\n    total_score = 36 * 89\n    girls_score = 88 * g\n    boys_score = 91 * (36 - g)\n\n    # Equation based on the total score from both girls and boys\n    equation = Eq(girls_score + boys_score, total_score)\n\n    # Solve the equation for g\n    solutions = solve(equation, g)\n\n    # Return the number of girls\n    return solutions[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    unanswered = 1\n    total_score = 66\n\n    # Since Rex answered all but one, the number of incorrect answers can be found by:\n    for correct_answers in range(total_questions):\n        incorrect_answers = (total_questions - unanswered) - correct_answers\n        if correct_answers * points_correct + incorrect_answers * points_incorrect == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Define the number of vertices (V), edges (E), and faces (F) for a 3D cube\n    V = 8  # A cube has 8 vertices\n    E = 12  # A cube has 12 edges\n    F = 6  # A cube has 6 faces\n    \n    # According to Euler's formula for polyhedra: V - E + F = 2\n    # In this case, we just confirm it for a cube.\n    ans = V - E + F\n    \n    return ans == 2\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Calculate the total amount of sugar David has\n    sugar_david = 800 * 0.05\n    # Calculate the total amount of sugar Eugene has\n    sugar_eugene = 200 * 0.30\n    # Calculate the total amount of sugar Felix has\n    sugar_felix = 300 * 0.10\n    \n    # Calculate the total amount of solution\n    total_solution = 800 + 200 + 300\n    \n    # Calculate the total amount of sugar\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n    \n    # Calculate the concentration of the resulting solution\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_from_first_punch = 20 * 0.35\n    fruit_juice_from_second_punch = 30 * 0.60\n    total_fruit_juice = fruit_juice_from_first_punch + fruit_juice_from_second_punch\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_badges = symbols('original_badges', real=True, positive=True)\n    # Sold 5/7 of the badges on the first day, remaining badges are 2/7\n    remaining_after_first_day = original_badges * (2/7)\n     # Sold 1/3 of the remaining badges on the second day\n    sold_on_second_day = remaining_after_first_day / 3 \n    # Remaining badges after the second day\n    remaining_after_second_day = remaining_after_first_day - sold_on_second_day\n    # After making an additional 354 badges\n    total_badges = remaining_after_second_day + 354\n    # She had 3 times the number of badges\n    equation = Eq(total_badges, 3 * original_badges)\n\n    # Solve the equation\n    solution = solve(equation, original_badges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize a list to collect possible three-digit numbers\n    possible_numbers = []\n    \n    # Iterate over all possible 3-digit numbers\n    for i in range(100, 1000):\n        num_str = str(i)\n        digits = [int(ch) for ch in num_str]\n        \n        # Check if one of the digits is 7\n        if 7 in digits:\n            # Calculate the differences between the pairs of digits\n            diffs = [abs(d1 - d2) for d1 in digits for d2 in digits if d1 != d2]\n            \n            # Check if all differences are 4 or less\n            if all(d <= 4 for d in diffs):\n                possible_numbers.append(i)\n    \n    # Find the smallest number in the list of possible numbers\n    return min(possible_numbers)\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    from collections import Counter\n\n    # Original password representation ('Angel')\n    original = '0141705021'\n    \n    # Andy's attempt ('Devil')\n    attempt = '4005220912'\n    \n    # Counter objects to count occurrences of each digit\n    original_counter = Counter(original)\n    attempt_counter = Counter(attempt)\n    \n    # Check if Andy's attempt has the same digit counts as the original password\n    if original_counter == attempt_counter:\n        return \"Yes\"\n    else:\n        # Create a list of the original counter keys sorted by the value they map to (descending)\n        sorted_original = sorted(original_counter.keys(), key=lambda x: original_counter[x], reverse=True)\n        # Create the correct password by concatenating the sorted digits\n        correct_password = ''.join(sorted_original)\n        return correct_password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    num_people = 4\n    # In a knockout tournament, each round eliminates half of the competitors.\n    # Hence, we continue until 1 winner remains.\n    rounds = 0\n    while num_people > 1:\n        rounds += 1\n        num_people /= 2  # Each round half of the competitors are knocked out.\n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):  # 100 pages, so loop from 1 to 100 inclusive\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n    \n    both_A_and_B = total_exhibits - not_by_A - not_by_B\n    \n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    initial_temp = 4  # The initial temperature at noon in degree Celsius\n    temp_drop = 10    # The temperature drop by midnight in degree Celsius\n\n    midnight_temp = initial_temp - temp_drop  # The temperature at midnight in degree Celsius\n\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Pigeonhole Principle:\n    # In the worst-case scenario, the magician could pick all balls of one color and then all of another color before\n    # getting at least one ball of the third color. Therefore, to ensure getting at least one ball of each color,\n    # he needs to pick one more than all balls of the first color, all balls of the second color, and none of the third.\n    \n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # Worst-case scenario: all blue, all red, plus one (which will be green in the worst case)\n    balls_needed = blue_balls + red_balls + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    skirt, blouse = symbols('skirt blouse')\n    \n    # Equation for total cost of 3 skirts and 2 blouses\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    # Equation for the cost difference between a skirt and a blouse\n    equation2 = Eq(skirt, blouse + 14)\n    \n    solutions = solve((equation1, equation2), (skirt, blouse))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since A and B are primes and 8A - 3B is a multiple of 3,\n    # we consider the smallest primes and check for the condition.\n    \n    # Start at the smallest prime 2 and check onwards.\n    A = 2\n    while True:\n        if ((8 * A) % 3) == 0:\n            # When 8A is a multiple of 3, 3B must also be a multiple of 3.\n            # The smallest B such that B is prime and 3B is a multiple of 3 is 3 itself.\n            # So we can stop and return A.\n            return A\n        else:\n            # If A is not fitting the condition, try the next prime.\n            # Since primes are odd except 2, we can increment by 1 to check only odd numbers.\n            A += 1\n            \n            # check if the new A is a prime\n            for i in range(2, A):\n                if (A % i) == 0:\n                    break\n            else:\n                continue  # Not a prime, keep searching\n            # Found a prime, now loop will check if it satisfies the given condition\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    final_value_last_year = 110000\n    # since the value increased by 10% in the first year, reverse calculate the original price\n    original_price = final_value_last_year / 1.1\n    # calculate the decrease of 10% in the second year\n    second_year_value = final_value_last_year * 0.9\n    # calculate the profit or loss by subtracting the original price from the second year value\n    profit_or_loss = second_year_value - original_price\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    roses = 3\n    jasmines = 4\n    daisy = 1\n\n    # Calculate permutations for each flower group\n    perm_roses = factorial(roses)\n    perm_jasmines = factorial(jasmines)\n\n    # Since daisy is just 1, no permutations are needed\n\n    # Calculate permutations for the arrangement of the groups\n    groups = 3  # one group for each type of flower\n    perm_groups = factorial(groups)\n\n    # Total arrangements is product of permutations within groups and arrangement of groups\n    total_permutations = perm_roses * perm_jasmines * perm_groups\n\n    return total_permutations\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    \n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils / 2\n    \n    return int(pupils_each_room)\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    small_num = 1*2*3*4*5*6\n    large_num = 1*2*3*4*5*6*7*8\n\n    # Calculate the count of numbers between small_num and large_num which are multiples of small_num\n    count = large_num // small_num\n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    total_sum = 60\n    count = 0\n    current_sum = 0\n    next_number = 1\n    \n    # Iterate until the current_sum exceeds or equals the total_sum\n    while current_sum < total_sum:\n        current_sum += next_number\n        next_number += 1\n        count += 1\n        if current_sum + next_number > total_sum:\n            break\n        \n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):  # assume a reasonable upper limit for this problem\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml per min\n    minutes_in_one_hour = 60\n    total_leakage_in_ml = leak_rate_per_minute * minutes_in_one_hour\n    total_leakage_in_liters = total_leakage_in_ml / 1000  # Since 1 liter = 1000 ml\n\n    return total_leakage_in_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        s, e, x = perm\n        if s == 0:\n            continue\n        see = s * 100 + e * 10 + e\n        eee = e * 111\n        xee = x * 100 + e * 10 + e\n        if see + eee + eee == xee:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders when divided by each number are all 1.\n    # When divided by 7, the remainder is 0, which means the age is a multiple of 7.\n    # Using the Chinese Remainder Theorem to find the smallest positive solution.\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    \n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # cm\n    height_difference = 30  # cm\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 different colors of socks, \n    # so to guarantee a pair of the same color,\n    # Cindy needs to take out 1 sock of each color + 1.\n    # This is the worst case scenario using the pigeonhole principle.\n    \n    num_colors = 3\n    socks_needed_for_pair = num_colors + 1\n    \n    return socks_needed_for_pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Original pieces of paper\n    original_pieces = 10\n    \n    # Final pieces of paper\n    final_pieces = 16\n    \n    # Each cut of paper increases the total count by 2 pieces (as 1 piece becomes 3 pieces)\n    # Let x be the number of pieces cut into three parts\n    # We can set up the following equation: original_pieces + 2*x = final_pieces\n    \n    # Solve for x\n    x = (final_pieces - original_pieces) / 2\n\n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario using the pigeonhole principle:\n    # Take 1 red apple -> If next is green, continue\n    # Take 1 green apple -> If next is red, continue\n    # Take another apple (either red or green)\n    # Now you must have 2 apples of the same colour\n    # So you need to take 1 red + 1 green + 1 more apple = 3 apples\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    total_water = (pails_filled * water_per_pail) + water_left\n    return total_water\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We can express 243 as a power of 3 since 243 is 3^5\n    # Meaning (x^4 * y^3 * z)^5 = 3^5\n    # Hence x^4 * y^3 * z = 3\n    # We want to find the value of x^8 * y^6 * z^2\n    # We can square the found value of x^4 * y^3 * z to get x^8 * y^6 * z^2\n    base_value = 3  # value of x^4 * y^3 * z\n    desired_value = base_value ** 2  # squaring to get x^8 * y^6 * z^2\n\n    return desired_value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pencil_box = symbols('book pencil_box')\n    \n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    solutions = solve((equation1, equation2), (book, pencil_box))\n    \n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    # Initialize variables\n    A, trailing_zeros = 1, 0\n    \n    # Calculate A and count trailing zeros\n    for i in range(1, 2011):\n        A *= i\n        while A % 10 == 0:\n            trailing_zeros += 1\n            A //= 10\n    \n    # Return the first non-zero digit from the right\n    return A % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Calculate the total number of terms up to the number 8\n    # There will be two 1's, three 2's, ..., and nine 8's.\n    total_terms = sum(range(2, 10))\n    \n    # Determine the middle position of the sequence\n    # Since the number of terms is even, the median will be the average of the two middle terms\n    middle_position = total_terms / 2\n    \n    # Find the two middle terms in the sequence\n    count = 0\n    for i in range(1, 9):\n        count += i + 1  # The number of times we write the current number i\n        if count >= middle_position:\n            first_middle = i\n            if count >= middle_position + 1:\n                second_middle = i\n            else:\n                second_middle = i + 1\n            break\n    \n    # Calculate the median, which is the average of the two middle terms\n    median = (first_middle + second_middle) / 2\n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150  # Total height of six players\n    average_height_of_four = 150 - 2  # Average height of four players\n    total_height_for_four = 4 * average_height_of_four  # Total height of four players\n    total_height_for_other_two = total_height_for_six - total_height_for_four  # Total height of the other two players\n    average_height_for_other_two = total_height_for_other_two / 2  # Average height of the other two players\n    return average_height_for_other_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    ans = comb(participants, 2)\n    return ans\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paved_length = 50\n\n    days_needed = total_length / daily_paved_length\n\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    x = 42  # To make the product of 42 and x equal to 42 squared, x must be 42.\n\n    # To find y, we want the product of 42 * y to have all factors' exponents equal to 1\n    # Start with y = 1, and keep incrementing until the condition is met\n    y = 1\n    while True:\n        factors = factorint(42 * y)\n        if all(exponent == 1 for exponent in factors.values()):\n            break\n        y += 1\n\n    # Return the sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle = 8\n    days = 4\n    daily_fodder_per_cattle = 10\n\n    total_fodder = cattle * days * daily_fodder_per_cattle\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight = 8\n    rabbit_to_chicken_weight = 2\n    \n    # The weight of one dog is equal to the weight of 8 rabbits,\n    # and one rabbit is equal to the weight of 2 chickens.\n    # Therefore, one dog is equal to the weight of 8 * 2 chickens.\n    dog_to_chicken_weight = dog_to_rabbit_weight * rabbit_to_chicken_weight\n\n    return dog_to_chicken_weight\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the total number of marbles Larry had originally\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation representing the situation\n    equation = Eq(x - (5/12)*x - 30 - 26, 35)\n\n    # Solve the equation for x\n    total_marbles = solve(equation, x)\n\n    return total_marbles[0]\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of sweets Jill and Jess have\n    jill, jess = symbols('jill jess')\n    \n    # Create equations based on the problem statement\n    # Originally, Jill has 6 sweets for every 5 sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # After giving 8 sweets to Jess, Jill now has 4 sweets for every 7 sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (jill, jess))\n    \n    # Sum the number of sweets Jill and Jess have originally to find the total\n    total_sweets = solutions[jill] + solutions[jess]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution in grams\n    concentration = 0.22  # Sugar concentration (22%)\n\n    # Calculate the weight of the sugar based on the concentration\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        for digit in str(number):\n            total += int(digit)\n    return total\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # p = price of a pie\n    # c = price of a cake\n    # n_pies = number of pies sold\n    # 15p = amount earned from pies\n    # 7c = amount earned from cakes\n    p, c, n_pies, n_cakes = symbols('p c n_pies n_cakes')\n\n    # We have the following system of equations based on the problem statement:\n    # 15p = 7c (money ratio)\n    # p = c - 13 (cost difference)\n    # n_pies = 4n_cakes (pie to cake ratio)\n    # total amount collected: p*n_pies + c*n_cakes = 1848 \n    equation1 = Eq(15*p, 7*c)\n    equation2 = Eq(p, c - 13)\n    equation3 = Eq(n_pies, 4*n_cakes)\n    equation4 = Eq(p*n_pies + c*n_cakes, 1848)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (p, c, n_pies, n_cakes))\n\n    return solutions[n_cakes]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    jane_money = 4.44\n    given_away = jane_money * (1/4)\n    return given_away\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import date, timedelta\n\ndef solution():\n    today = date.today()\n    fred_age_years = 38\n    fred_age_months = 6\n\n    # Convert Fred's age to days (approximation: 1 month = 30 days)\n    fred_lifetime_days = fred_age_years * 365 + fred_age_months * 30\n\n    # Calculate date of birth by subtracting the age from today's date\n    birth_date = today - timedelta(days=fred_lifetime_days)\n\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h be the initial amount of Hanson's money\n    h = symbols('h')\n\n    # After spending 1/4 of money and $3, Hanson's remaining money is 3/4 of original and minus $3\n    remaining_after_CDs = (3 / 4) * h - 3\n\n    # Then Hanson spent 3/5 of the remaining money and $6 on batteries,\n    # and was left with $24 finally\n    remaining_after_batteries = (2 / 5) * remaining_after_CDs - 6\n\n    # Set up the equation based on the remaining money, which is $24\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation for h\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    even_digits = [d for d in digits if d % 2 == 0]\n    four_digit_even_numbers = set()\n\n    for last_digit in even_digits:\n        for perm in permutations([d for d in digits if d != last_digit], 3):\n            if perm[0] != 0: # the number should not start with 0\n                four_digit_even_numbers.add(int(\"\".join(map(str, perm)) + str(last_digit)))\n\n    return len(four_digit_even_numbers)\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    return beads[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n\n    # Let t be the time in minutes Qiqi takes to reach the school after Weiling starts walking.\n    # Weiling starts 2 minutes after Qiqi, so Qiqi has already walked for t + 2 minutes.\n    # Weiling arrives 4 minutes before Qiqi, so Weiling walks for t - 4 minutes.\n\n    # Distance covered by Qiqi is distance covered by Weiling\n    # (t + 2) * qiqi_speed = (t - 4) * weiling_speed\n    # Solve for t to find the time Weiling takes and use it to calculate the distance.\n\n    # (t + 2)*60 = (t - 4)*72\n    t = (2 * qiqi_speed + 4 * weiling_speed) / (weiling_speed - qiqi_speed)\n    distance = (t - 4) * weiling_speed  # because this is the time Weiling walked\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Observation: The units digit in the powers of 9 follows a pattern.\n    # 9^1 = 9        -> units digit is 9\n    # 9^2 = 81       -> units digit is 1\n    # 9^3 = 729      -> units digit is 9\n    # 9^4 = 6561     -> units digit is 1\n    # So, the pattern of units digit is 9, 1, 9, 1, ... repeating every 2 powers.\n\n    # Given the pattern, the units digits of both 9^2015 and 9^2016 can be determined.\n    # 9^2015 has a units digit of 9 (since it's an odd power of 9).\n    # 9^2016 has a units digit of 1 (since it's the next even power of 9).\n\n    # Sum of the units digits:\n    units_digit_2015 = 9\n    units_digit_2016 = 1\n    sum_units_digit = (units_digit_2015 + units_digit_2016) % 10  # Units digit of the sum\n\n    return sum_units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Arrange men first - which can be done in 5! ways\n    men_ways = factorial(5)\n    \n    # Now place women in the gaps between men (including the ends), which is 6 positions\n    # Since we can't have two women standing together, treat women as distinct, so arrange in 6P3 ways\n    women_ways = factorial(6) // factorial(6 - 3)\n    \n    # Multiply the number of ways to arrange men and women\n    return men_ways * women_ways\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Marc's watch time\n    marcs_time = datetime.strptime('11:50', '%H:%M')\n    \n    # Correct Marc's watch to the actual time by adding 15 minutes\n    actual_time = marcs_time + timedelta(minutes=15)\n    \n    # Add half an hour to the actual time to get the time half an hour later\n    half_hour_later = actual_time + timedelta(minutes=30)\n    \n    # George's watch is 7 minutes fast\n    georges_time = half_hour_later - timedelta(minutes=7)\n\n    # Answer has to be in datetime.time format (hours, minutes)\n    return georges_time.time()\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # Tax on first 30000\n    tax_on_first_30k = 0.01 * T * 30000\n\n    # Tax on the rest (above 30000)\n    tax_on_rest = 0.01 * (T + 3) * (income - 30000)\n\n    # Total income tax paid\n    total_tax_paid = 0.01 * (T + 1) * income\n\n    # Equations based on the description\n    equation1 = Eq(tax_on_first_30k + tax_on_rest, total_tax_paid)\n    equation2 = Eq(income - 30000, income - 30000)  # This equation acts as a placeholder for positive income above 30000\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (T, income))\n\n    # Assuming we want the positive income solution\n    valid_solution = [sol for sol in solutions if sol[income] > 30000]\n\n    return valid_solution[0][income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n    return h_value[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up * 3 - fall_down * 2  # every 3 jumps\n    \n    # Since the squirrel falls down after every 3 jumps, consider the height it reaches before the last jump.\n    # Calculate the number of complete cycles (of 3 jumps) it takes to get to or exceed the height\n    # where the last jump will take the squirrel to the top without falling below the top of the tree.\n    height_before_last_jump = total_height - jump_up\n    cycles_needed = height_before_last_jump // effective_jump\n    jumps_needed = cycles_needed * 3\n    \n    # After those complete cycles, calculate the remaining height to be climbed.\n    remaining_height = height_before_last_jump - cycles_needed * effective_jump\n    \n    # Check if additional jumps are needed to reach or surpass the height_before_last_jump.\n    while remaining_height > 0:\n        jumps_needed += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        remaining_height += fall_down\n    \n    # Add one last jump to reach the top.\n    jumps_needed += 1\n    \n    return jumps_needed\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_mark = 5\n    wrong_mark = -1\n    total_score = 90\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    combined_rate = a_rate + b_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We have 4 colors, so to ensure we have marbles of 4 different colors, we need to consider the worst case scenario.\n    # Worst case: We pick all marbles of a single color first before getting to a different color.\n    # The first color we could pick all is red (12 marbles),\n    # then we could pick all the blue ones (9 marbles),\n    # and then pick all yellow ones (8 marbles).\n    # At this point, we have 12 + 9 + 8 = 29 marbles drawn with 3 colors only.\n    # Now if we draw just 1 more, we are guaranteed to have the 4th color (since only red marbles are left).\n    # So, we need at least 29 + 1 marbles to ensure we have 4 different colors.\n    ans = 29 + 1\n    return ans\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(0, 101):\n        if number % 3 == 0 and number % 7 == 0 and (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_age_in_2002 = 45\n    jenny_age_in_1995 = 22\n    year_difference = 2002 - 1995\n    gigi_age_when_jenny_was_22 = gigi_age_in_2002 - year_difference\n    jenny_age_when_gigi_was_22 = jenny_age_in_1995 - (gigi_age_when_jenny_was_22 - 22)\n\n    return jenny_age_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    n = 0\n    \n    while term > 0:\n        term += difference\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum([int(digit) for digit in \"20190406\"])\n    A = (9 - (digits_sum % 9)) % 9\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1000, 10000):  # Check numbers up to enough large to find a correct answer\n        if i % 3 == 0 and i % 8 == 0 and str(i).endswith('2'):\n            return i\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 1 + 2/3)\n\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    # Since each group must have different number of apples and at least 1 apple,\n    # we can simply choose how many apples the smaller group will have, and the\n    # rest will go to the larger group automatically. We can choose from 1 to\n    # total_apples - 1 for the smaller group.\n    num_ways = total_apples - 1\n    \n    return num_ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    ship_speed_in_still_water = 25  # km/h\n    current_speed = 3  # km/h\n    downstream_speed = ship_speed_in_still_water + current_speed  # km/h\n    distance = 140  # km\n\n    time = distance / downstream_speed  # hours\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15 / 100\n    discount_amount = original_price * discount_percent\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    cupcake_cost = 3.25\n    total_cost = 12.15\n    total_cupcake_cost = 3 * cupcake_cost\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    \n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly\n    # Let y be the number of questions Olivia answered incorrectly\n    # We know that x + y = 20 (since there are 20 questions) and 5x - 2y = 51 (according to the score rule)\n    # Now we need to solve this system of equations\n    \n    for x in range(21): # Since she can at most answer 20 questions correctly (0 to 20)\n        y = 20 - x\n        if 5*x - 2*y == 51:\n            return x # We return x because we need the number of questions she answered correctly\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for the first two traffic lights\n    first_light_interval = 0.5 * 60  # half a minute in seconds\n    second_light_interval = 0.75 * 60  # 0.75 minute in seconds\n    third_light_interval_lower_bound = 30  # 30 seconds\n    three_lights_interval = 9 * 60  # 9 minutes in seconds\n\n    # The LCM of the first two lights intervals has to evenly divide the total interval\n    # and the third light interval has to be at least 30 seconds.\n    lcm_first_second = lcm(first_light_interval, second_light_interval)\n    third_light_interval = lcm_first_second\n\n    while third_light_interval < third_light_interval_lower_bound or \\\n            three_lights_interval % third_light_interval != 0:\n        third_light_interval += lcm_first_second\n\n    return third_light_interval\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assuming there are x members in group A and y members in group B\n    # After seating in (x//36) buses for A and (y//36) buses for B, we have:\n    # x % 36 + y % 36 = 36, because they fill the last bus exactly\n    # And we know that x % 36 = 11, since 11 members from A combined with\n    # the remaining members from B to fill a bus\n    # From the above, we find that y % 36 = 25 (i.e., 36 - 11)\n    \n    # The total number of photographs is the product of the number of members\n    # in group A and group B, i.e., x * y\n    # Since each roll can take 36 pictures, we are looking for the remainder\n    # when the total number of photographs is divided by 36, which will give us\n    # how many more pictures can the last roll of film take\n    # We use the fact that (x * y) % 36 = [(x % 36) * (y % 36)] % 36\n    # Hence, we calculate (11 * 25) % 36\n    \n    more_pictures = (11 * 25) % 36\n    \n    return more_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Find the difference between the consecutive numbers in sequence\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n\n    # Determine the second difference between the differences\n    second_differences = [j - i for i, j in zip(differences[:-1], differences[1:])]\n\n    # Since it's a Double Arithmetic Sequence, the second differences should be constant\n    # Calculate the next difference based on constant second difference\n    next_difference = differences[-1] + second_differences[0] \n\n    # The next number in the sequence is the last number plus the next difference\n    next_number = 50 + next_difference \n\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_sum = 9 + 1 + 7 + 4 + 3 + 6 + 8\n    total_numbers = 8\n    mean_value = 5\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since there are 4 individuals, let's name them A, B, C, D for simplicity.\n    # A starts with the ball and needs to get it back after 3 passes.\n    # This means that the ball cannot be passed to A until the last pass.\n    # Let's find the possible passing scenarios:\n    # A -> B -> C -> A\n    # A -> B -> D -> A\n    # A -> C -> B -> A\n    # A -> C -> D -> A\n    # A -> D -> B -> A\n    # A -> D -> C -> A\n    # The first pass can be to B, C, or D (3 options).\n    # The second pass must be to one of the remaining two individuals (2 options).\n    # The third pass must be to A from the last person with the ball (1 option).\n    # The number of different methods is the product of these options.\n    ans = 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Daniel and Ming's current ages\n    daniel, ming = symbols('daniel ming')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(daniel, 4 * ming)          # Daniel is 4 times older than Ming\n    equation2 = Eq(daniel + 6 + ming + 6, 62)  # Six years later, their ages sum up to 62\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_grams = 25\n    num_students = 250\n    total_weight_grams = paper_weight_grams * num_students\n    grams_to_kilograms = 1000\n\n    total_weight_kilograms = total_weight_grams / grams_to_kilograms\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # speed of the line = distance / time\n    # line crosses the first bridge entirely in 8 seconds\n    speed_of_line_first_bridge = 9 / 8\n    \n    # It takes an additional 2 seconds to cross the second bridge\n    extra_time_for_second_bridge = 10 - 8  # 2 seconds\n    \n    # The length of the part of the line on the second bridge during the extra time is the speed of the line times the extra time\n    length_of_line_on_second_bridge = speed_of_line_first_bridge * extra_time_for_second_bridge\n    \n    # The total length of the second bridge is the length of the line plus the part of the line on the bridge during the extra time\n    total_length_second_bridge = 3 + length_of_line_on_second_bridge\n    \n    return total_length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum(((2 * i + 2) ** 2 - (2 * i) ** 2) for i in range(0, 500))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    x = symbols('x')\n    # x: smallest even number, so the consecutive even numbers are x, x+2, x+4\n    equation = Eq(x * (x + 2) * (x + 4), 2688)\n    solutions = solve(equation)\n\n    # Filter out the even solution since we're dealing with consecutive even numbers\n    x_value = max(filter(lambda s: s.is_even, solutions))\n\n    # The largest number will be x + 4\n    largest_number = x_value + 4\n    return largest_number\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time_hours = 11\n    start_time_minutes = 55\n\n    end_time_hours = 13  # 1 pm is 13 in 24-hour format\n    end_time_minutes = 40\n\n    start_time_in_minutes = (start_time_hours * 60) + start_time_minutes\n    end_time_in_minutes = (end_time_hours * 60) + end_time_minutes\n\n    duration = end_time_in_minutes - start_time_in_minutes\n\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_left = 11\n    people_right = 7\n    crystal = 1  # include Crystal herself\n    \n    # people in front of or behind Crystal in her row are not counted\n    people_in_row = people_left + people_right + crystal\n    # since there are 2 rows and Crystal is only in 1 of them\n    total_people = people_in_row * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 3 == 0 and number % 11 == 0:\n            if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    count = 0\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1  # since group2 is the rest of the cupcakes\n        # the groups must have different amounts, thus we only count if group1 is less than group2\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors_dict = factorint(224)\n    num_factors = 1\n    for exponent in factors_dict.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    start_time = 8 * 60 + 30  # convert start time to minutes past midnight\n    lesson_duration = 3 * 45  # 3 lessons of 45 minutes\n    moving_periods = 2 * 5    # 2 moving periods of 5 minutes each\n\n    break_start_time_minutes = start_time + lesson_duration + moving_periods\n    break_start_hour = break_start_time_minutes // 60\n    break_start_minutes = break_start_time_minutes % 60\n\n    return f\"{break_start_hour:02d}:{break_start_minutes:02d}\"\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit cannot be zero\n        for b in range(0, 10):  # tens digit can be zero to nine\n            for c in range(0, 10):  # ones digit can be zero to nine\n                if b == (a + 5) and c == (b - 2) and b == (a + b + c) // 2:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fives, tens = symbols('fives tens')\n    total_notes = fives + tens - 57\n    spent_tens = 0.60 * tens\n    spent_fives = 0.25 * fives\n    remaining_tens = tens - spent_tens\n    remaining_fives = fives - spent_fives\n    double_cond = Eq(remaining_tens, 2 * remaining_fives)\n    cost_of_bag = spent_tens * 10 + spent_fives * 5\n\n    solutions = solve((total_notes, double_cond), (fives, tens))\n    fives_solution = solutions[fives]\n    tens_solution = solutions[tens]\n\n    bag_cost = cost_of_bag.subs({fives: fives_solution, tens: tens_solution})\n    return bag_cost\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    troy, adam = symbols('troy adam')\n\n    # Troy had 5 times as many coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n\n    # After taking 24 more coins, Adam had 1/3 as many coins as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n    \n    # Calculate the total number of coins they had at first\n    total_coins_at_first = solutions[troy] + solutions[adam]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    final_remaining = 24\n    portion_remaining_after_batteries = 1 - (3/5)\n    remaining_after_cds = (final_remaining + 6) / portion_remaining_after_batteries\n    portion_remaining_after_cds = 1 - (1/4)\n    initial_money = (remaining_after_cds + 3) / portion_remaining_after_cds\n    return initial_money\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Loop through all 4-digit numbers from 1000 to 9999\n    for number in range(1000, 10000):\n        # Calculate the product of the digits\n        product_of_digits = 1\n        for digit in str(number):\n            product_of_digits *= int(digit)\n        # If the product is 8, increment the count\n        if product_of_digits == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # Hundreds digit can't be zero\n        for tens in range(10): # Tens digit can range from 0 to 9\n            for ones in range(10): # Ones digit can range from 0 to 9\n                # Check if digits are different, the sum is 8, and it's an even number\n                if (hundreds != tens) and (tens != ones) and (ones != hundreds) and \\\n                (hundreds + tens + ones == 8) and (ones % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst case scenario to not get 5 green beads:\n    # Darrell draws all blue and white beads first.\n    blue_beads = 5\n    white_beads = 6\n    beads_without_green = blue_beads + white_beads\n    \n    # Now, draw one by one the green beads until we get 5 green beads.\n    green_beads_to_draw = 5\n    total_beads_to_draw = beads_without_green + green_beads_to_draw\n    \n    return total_beads_to_draw\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    # Let's denote the missing number with x\n    # According to the equation, 1/4 of 16 should be equal to 1/2 of x\n    # Expressing the equation: (1/4) * 16 = (1/2) * x\n    # We can solve for x now: x = (1/4) * 16 / (1/2)\n    \n    x = (1 / 4) * 16 / (1 / 2)\n    \n    return x\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Games within each group during the round-robin tournament\n    # Each person plays with every other person in the group once\n    group_size = 4\n    games_per_group = group_size * (group_size - 1) // 2\n    \n    # Total games during the group stage for 4 groups\n    total_group_games = games_per_group * 4\n\n    # Games during the knockout rounds\n    # Top 8 round: 4 games, Top 4 round: 2 games, Top 2 round: 1 game\n    # Additionally, one game for third place\n    total_knockout_games = 8 - 1 + 1 \n\n    # Total games throughout the contest\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the job\n    x = symbols('x')\n    \n    # A is twice as good a workman as B, so A takes x/2 days to finish the job\n    # A finishes in 12 days less than B, so we get the equation: x/2 = x - 12\n\n    # Set up the equation and solve for x\n    equation = Eq(x/2, x - 12)\n    days_B = solve(equation, x)[0]\n    \n    # A's work rate is 1 / (days_B / 2) jobs per day\n    # B's work rate is 1 / days_B jobs per day\n    # Together their work rate is the sum of their individual rates\n    rate_A = 1 / (days_B / 2)\n    rate_B = 1 / days_B\n    combined_rate = rate_A + rate_B\n    \n    # The time it takes to complete the job working together is 1 / combined_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            break\n    return num\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of different potted plants\n    r = 4  # number of potted plants to be arranged in a row\n    # Calculation for Permutation P(n, r) = n! / (n-r)!\n    return factorial(n) // factorial(n - r)\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_banana = 18\n    likes_apple = 12\n\n    likes_both = likes_banana + likes_apple - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    initial_stickers = final_stickers - stickers_bought + stickers_given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weights of pineapple and apple\n    pineapple, apple = symbols('pineapple apple')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n    \n    # Get the weight of a pineapple\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n    return smallest_number\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import gcd\n    # Given factors\n    factor1 = 15\n    factor2 = 21\n\n    # Calculate lcm of 15 and 21\n    lcm_15_21 = (factor1 * factor2) // gcd(factor1, factor2)\n\n    # Since 15 and 21 are factors and we need a number with exactly 8 factors,\n    # the number must be lcm(15, 21) * some square of prime number p\n    # let's find the prime numbers up to sqrt of the lcm\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # find the smallest prime factor p of the lcm such that lcm * p**2 has exactly 8 factors\n    # this will give us the number we are looking for\n    # since 15 has factors 1, 3, 5, 15, and 21 has factors 1, 3, 7, 21, their lcm has 1, 3, 5, 7, 15, 21, lcm\n    # We need two more factors\n    candidate_prime = 2\n    while True:\n        if is_prime(candidate_prime) and lcm_15_21 % candidate_prime != 0:\n            num = lcm_15_21 * candidate_prime ** 2\n            break\n        candidate_prime += 1\n\n    # Now find all factors of num\n    all_factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            all_factors.add(i)\n            all_factors.add(num // i)\n    \n    return sum(all_factors)\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "def solution():\n    from itertools import permutations\n\n    # Iterate through all permutations of the numbers 0-9 (excluding 8, which is fixed at start)\n    for perm in permutations('0123456789', 9):\n        perm = ''.join(perm)\n        # Place 8 at the beginning of the permutation to make it a ten-digit number\n        number = \"8\" + perm\n        divisible = True\n        for i in range(2, 11):  # Check divisibility from 2 to 10\n            # In each iteration check if the number formed by the first i digits is divisible by i\n            if int(number[:i]) % i != 0:\n                divisible = False\n                break\n        # If the number satisfies all divisibility conditions, return this number\n        if divisible:\n            return int(number)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_tomatoes_after_giving = belinda_tomatoes - 7\n    matthew_tomatoes = belinda_tomatoes_after_giving\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_efficiency = 0.5\n    new_rate = original_rate * (1 + increased_efficiency)\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    diff = abs(2012 - 1274)\n    D_minus_R = diff\n    for odd_divisor in range(3, diff + 1, 2):\n        if diff % odd_divisor == 0:\n            D_minus_R = odd_divisor\n    return D_minus_R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Define total numbers and strategy set\n    total_numbers = 52\n    strategy_set = {1, 3, 4, 6}\n    winning_numbers = []\n\n    # A list to hold the losing positions for the current player\n    losing_positions = [False] * (total_numbers + 1)\n\n    # Calculate the losing positions for the current player\n    for i in range(1, total_numbers + 1):\n        # Check if any move leads to a losing position for the other player\n        if not any(losing_positions[i - move] for move in strategy_set if i - move >= 0):\n            losing_positions[i] = True\n            winning_numbers.append(i)\n\n    # If 1 is not a winning position, Betty should go second\n    if not losing_positions[1]:\n        result = ('second', winning_numbers)\n    else:\n        # Otherwise, Betty should go first and follow the strategy of playing to the next winning position\n        result = ('first', winning_numbers)\n\n    return result\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 5 == 1) and (i % 6 == 1) and (i % 7 == 1):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_quantity = 630\n    given_to_grace = 5/7 * initial_quantity\n    remaining_after_grace = initial_quantity - given_to_grace\n    given_to_evelyn = 1/9 * remaining_after_grace\n    remaining_juice = remaining_after_grace - given_to_evelyn\n\n    return remaining_juice\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Find the last digit of each term independently\n    last_digit_4_power = pow(4, 2009, 10)\n    last_digit_6_power = pow(6, 2010, 10)\n\n    # Sum the last digits and find the last digit of the sum\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    total_grams = 63\n    ways = 0\n    for two_gram_weights in range(0, total_grams // 2 + 1):\n        remaining_weight = total_grams - (two_gram_weights * 2)\n        if remaining_weight % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Total height of six players\n    total_height_6 = 6 * 150\n    \n    # Average height of four of them is 2 cm lower\n    average_height_4 = 150 - 2\n    \n    # Total height of the four players\n    total_height_4 = 4 * average_height_4\n    \n    # Total height of the remaining two players\n    total_height_2 = total_height_6 - total_height_4\n    \n    # Average height of the remaining two players\n    average_height_2 = total_height_2 / 2\n    \n    return average_height_2\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    # Assume all the questions Rex didn't answer were correct ones\n    # Then calculate the score if all those were correct\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    questions_answered = 24\n    rex_score = 66\n\n    # Maximum possible score for Rex if all answered questions were correct\n    max_score = questions_answered * points_correct\n\n    # Difference between maximum score and actual score,\n    # divided by point difference when one correct question being incorrect\n    incorrect_answers = (max_score - rex_score) // (points_correct - abs(points_incorrect))\n\n    # Calculate the correct answers by subtracting incorrect from total attempted questions\n    correct_answers = questions_answered - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Sum of the sequence 1 to 20\n    sum_to_20 = (20 * (20 + 1)) // 2\n    # Sum of the sequence 1 to 19\n    sum_to_19 = (19 * (19 + 1)) // 2\n    # Total sum of the pattern\n    total_sum = sum_to_20 + sum_to_19\n\n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from itertools import permutations\n\n    # There are 5 options for the first letter,\n    # 4 remaining options for the second letter,\n    # 3 for the third, and 2 for the last.\n    # This is equivalent to 5P4 (Permutation of 5 items taken 4 at a time)\n    total_ways = len(list(permutations(['red', 'yellow', 'blue', 'green', 'purple'], 4)))\n    return total_ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1])\n        if reversed_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Initialize the number of meatballs left when a new student is not present and is present\n    meatballs_without_new_student = 20\n    meatballs_with_new_student = 10\n\n    # Since each student gets the same number of meatballs both before and after the new student arrives,\n    # the difference in the number of meatballs left implies that this difference must be equal to the number\n    # of meatballs each student gets. Thus, we can calculate the number of meatballs each student gets\n    # by finding the difference.\n    meatballs_per_student = meatballs_without_new_student - meatballs_with_new_student\n\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_amount * increase_fraction\n    final_amount = original_amount + increase_amount\n    return final_amount\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the flow rates of A, B, and C\n    rate_A, rate_B, rate_C = symbols('rate_A rate_B rate_C')\n    \n    # Given equations\n    # rate_A + rate_C = total water when A and C are on, and A contributes 18 tons\n    # rate_B + rate_C = total water when B and C are on, and B contributes 27 tons\n    # rate_B = 2 * rate_A (given B's rate is twice that of A's)\n    \n    # Since A contributes 18 tons when A and C fill the pool,\n    # that means the total water would be rate_A + rate_C. We get our first equation:\n    equation1 = Eq(rate_A + rate_C, 18)\n    \n    # Similarly, since B contributes 27 tons when B and C fill the pool,\n    # the total water would be rate_B + rate_C, hence our second equation:\n    equation2 = Eq(rate_B + rate_C, 27)\n    \n    # Given that B's rate is twice A's rate:\n    equation3 = Eq(rate_B, 2 * rate_A)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rate_A, rate_B, rate_C))\n    \n    # Now we know the rate of A, B, and C. To find the total water capacity,\n    # we can add the rate of A, B, and C. Because A and B combined (without C)\n    # would also fill the pool to its total water capacity.\n    pool_capacity = solutions[rate_A] + solutions[rate_B]\n    \n    return pool_capacity\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    first_day = total_questions / 2 + 7\n    second_day = (total_questions - first_day) / 2 - 5\n    third_day = 23\n\n    # Equation representing the sum of questions done each day is equal to the total number of questions\n    equation = Eq(first_day + second_day + third_day, total_questions)\n\n    solution = solve(equation, total_questions)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if (fraction_value > decimal_value):\n        return \"4/25\"\n    else:\n        return \"0.17\"\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # Milliliters (1 litre)\n    cup_volume = 200       # Milliliters\n    number_of_cups = 3\n\n    poured_out = cup_volume * number_of_cups\n    remaining_water = initial_volume - poured_out\n\n    return remaining_water\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the original numbers of roses and daisies\n    roses_original, daisies_original, months = symbols('roses_original daisies_original months', integer=True)\n\n    # We have two equations based on the problem statement\n    # Total number of flowers originally\n    total_original = Eq(roses_original + daisies_original, 300)\n    # Total number of flowers after few months\n    total_after_months = Eq(roses_original + months + daisies_original + months, 280 + 180)\n\n    # Since the planter plants the same number of roses and daisies every month\n    # we can set up the following equations\n    roses_after_months = Eq(roses_original + months, 280)\n    daisies_after_months = Eq(daisies_original + months, 180)\n\n    # Solving the system of equations\n    solutions = solve((total_original, total_after_months, roses_after_months, daisies_after_months), (roses_original, daisies_original, months))\n\n    return solutions[roses_original]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Given values: 10th term is 23 and the 15th term is 38\n    term_10 = 23\n    term_15 = 38\n    \n    # The difference between the terms is the common difference (d)\n    # (15th term - 10th term) / (15 - 10) = d\n    common_difference = (term_15 - term_10) / (15 - 10)\n    \n    # To find the 12th term, we calculate:\n    # term_12 = term_10 + (12 - 10) * d\n    term_12 = term_10 + (12 - 10) * common_difference\n    \n    return int(term_12)\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Use the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, a is the first term, and d is the common difference.\n    # We have two equations based on the given sums:\n    # S_8 = 8/2 * (2a + (8 - 1)d) = 32\n    # S_22 = 22/2 * (2a + (22 - 1)d) = 44\n\n    # From S_8, we can simplify to 4 * (2a + 7d) = 32, which simplifies to 2a + 7d = 8\n    # From S_22, we can simplify to 11 * (2a + 21d) = 44, which simplifies to 2a + 21d = 4\n\n    # Now we solve the system of equations:\n    # 2a + 7d = 8  --- (1)\n    # 2a + 21d = 4 --- (2)\n    \n    # Subtract equation (1) from equation (2):\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 14d = -4\n    # d = -4 / 14\n    d = -4 / 14\n    \n    # Now, find 'a' using equation (1):\n    # 2a + 7 * (-4 / 14) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 10 / 2\n    a = 10 / 2\n    \n    # Finally, find S_15 using the values of 'a' and 'd':\n    # S_15 = 15/2 * (2a + (15 - 1)d)\n    S_15 = 15 / 2 * (2 * a + (15 - 1) * d)\n    \n    return S_15\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # A light will be toggled every time the number of the light has a factor.\n    # Each pair of factors toggles the light twice which will end up being off.\n    # Thus, a light will remain on if and only if it has an odd number of factors\n    # which occurs if the number is a perfect square.\n    \n    # We find how many perfect squares are less than or equal to 250.\n    # That's equivalent to finding the square root of 250 and taking floor of it.\n    \n    from math import sqrt, floor\n    \n    ans = floor(sqrt(250))\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    correct_problems = (10 * 0.2) + (20 * 0.8) + (30 * 0.9)\n    overall_percentage = (correct_problems / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Size of the larger brick in cm^2 (since 1 decimeter = 10 centimeters)\n    large_brick_size = (6 * 10) ** 2  # converting from decimeters to centimeters\n    \n    # Total area to be covered in cm^2\n    total_area = large_brick_size * 80  # using 80 large bricks\n    \n    # Size of the smaller brick in cm^2 (given)\n    small_brick_size = 64\n    \n    # Number of smaller bricks needed to cover the total area\n    required_small_bricks = total_area / small_brick_size\n    \n    return required_small_bricks\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fruit, water = symbols('fruit water')\n\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (fruit, water))\n\n    return float(solutions[fruit])\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '134578'\n    max_number = 0\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number ** 0.5) + 1):\n        if (number % i) == 0:\n            ans = (i, number // i)\n            return ans\n    ans = ('prime',)\n    return ans\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # Power of 4 is raised to 2018 times\n    power_of_4 = 4 ** 2018\n\n    # Power of 25 is raised to 2018 times\n    power_of_25 = 25 ** 2018\n\n    # Calculate A\n    A = power_of_4 * power_of_25\n\n    # Find the number of digits of A by taking the logarithm base 10 and adding 1\n    num_of_digits = int(log10(A)) + 1\n\n    return num_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    num_ways = comb(total_players, team_size)\n\n    return num_ways\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    \n    # Calculate cost price based on profit percentage\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    # Alternative scenario with profit of $5000\n    new_selling_price = cost_price + 5000\n    new_profit_percent = (new_selling_price - cost_price) / cost_price * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_apples = symbols('initial_apples')\n\n    equation = Eq(1/5 * initial_apples + 80, initial_apples - initial_apples * 30 / 100)\n\n    apples_left = solve(equation, initial_apples)\n\n    return 0.3 * apples_left[0]\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let g be the number of girls and b be the number of boys.\n    # According to the problem we have two equations:\n    # g + b = 500 and g = b + 30\n    # We can solve for b using the second equation:\n    # b = g - 30\n    # Now we substitute b in the first equation:\n    # g + (g - 30) = 500\n    # 2g - 30 = 500\n    # 2g = 500 + 30\n    # 2g = 530\n    # g = 530 / 2\n    # g = 265\n    # There are 265 girls.\n    girls = (total_pupils + 30) // 2\n\n    return girls\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            if x1 != x2 and x1 + x2 < 10:\n                x3 = 10 - x1 - x2\n                if x3 not in (x1, x2):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Let n represent the number of layers with boys and m represent the number of layers with girls.\n    # Total number of students can be expressed as S = (2n + 1)^2 + (2m)^2 with n = m + 1.\n    # There are 31 more boys than girls which can be expressed as (2n + 1)^2 - (2m)^2 = 31\n    # Simplifying this we get 4nm + 4n + 1 = 31\n    # Hence, n(m + 1) = 15/2, this does not give an integer solution for n and m\n    # Instead rearranging terms (2n + 1 + 2m)(2n + 1 - 2m) = 31\n    # As 31 is a prime number, we have (2n + 1 + 2m) = 31 and (2n + 1 - 2m) = 1\n    # Solving these two equations we get n = 7 and m = 6\n    # Total students S = (2*7 + 1)^2 + (2*6)^2\n    \n    n = 7\n    m = 6\n    total_students = (2*n + 1)**2 + (2*m)**2\n    return total_students\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n    \n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n    \n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first number be x\n    # Then the consecutive even numbers will be x, x+2, x+4, ..., x+12\n    # The fourth number is therefore x+6\n    # And the seventh number is x+12\n    # According to the condition given in the problem, we have the following equation:\n    # x+6 = (1/3)*(x + x+12) + 6\n    # Simplifying the equation will give us x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 6, (1/3)*(x + x + 12) + 6)\n    \n    first_number = solve(equation, x)[0]\n    \n    # Calculate the sum of seven consecutive even numbers\n    sum_of_numbers = sum(first_number + 2*i for i in range(7))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n\n    length_each_piece = total_length / number_of_pieces\n\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    meters = km * 1000\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the number of orchids\n    purple, yellow, white, red = symbols('purple yellow white red')\n    total_orchids = symbols('total_orchids')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    # Calculating the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n        \n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total = red + blue + green\n    return total\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends and on both sides, we have one additional tree\n    # per side than the number of intervals between trees.\n    trees_per_side = (highway_length // distance_between_trees) + 1\n\n    # Multiply by 2 because there are trees on both sides of the highway.\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    n = 20\n\n    nth_odd = first_odd + (n - 1) * difference\n    return nth_odd\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n    \n    initial_rings = johnny_rings + amber_rings + remaining_rings\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    interior_angle = ((sides - 2) * 180) / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_ = sum(int('5' * i) for i in range(1, 21))\n    ans = sum_ % 10000\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    men = 2\n    days_for_one_wall = 3\n    # x walls, y men\n    x, y = symbols('x y')\n    \n    # Unitary method: If 2 men take 3 days to build 1 wall,\n    # 1 man will take 2 * 3 days to build 1 wall,\n    # so, y men will take (2 * 3) / y days to build 1 wall,\n    # and to build x walls, it will take ((2 * 3) / y) * x days.\n    \n    time_for_x_walls_by_y_men = ((men * days_for_one_wall) / y) * x\n    \n    return time_for_x_walls_by_y_men\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1/5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place,\n    # and overtook 5 cars, there must have been at least\n    # 1 (second place) + 5 (overtaken cars) = 6 cars ahead of him initially.\n    # Considering the driver's own car, there must have been at least 7 cars in the race.\n    # However, because the driver started in the last place and finished second,\n    # there must also be one more car behind him, which is the car in the last place now.\n    # Therefore, the total number of cars in the race is 7 (ahead) + 1 (behind) = 8 cars.\n\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, checked_shirts = symbols('white_shirts checked_shirts')\n\n    equation1 = Eq(white_shirts, 7 * checked_shirts)\n    equation2 = Eq(white_shirts + checked_shirts, 72)\n\n    solutions = solve((equation1, equation2), (white_shirts, checked_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    max_number = 0\n    for number in range(100, 1000):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                max_number = max(max_number, number)\n    return max_number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    return 72 + 60 + 48 + 36 + 24 + 12\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Unfortunately, since the pattern is not provided and there is no picture to analyze,\n    # I cannot offer a precise solution. A pattern question would typically require an\n    # analysis of how the pattern grows or changes, which we cannot do in this case.\n    # If you could provide the pattern or explain it in text, I would be able to help.\n    return None\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # In the worst case, we have to consider drawing one of each color to start with.\n    num_draws = 3  # One of each color.\n    \n    # Now, no matter what color of the ball we draw, we will have two of the same color.\n    num_draws += 1  # One more to guarantee the second ball of the same color.\n\n    return num_draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    # Since the number produces a remainder of 2 when divided by 3,\n    # a remainder of 3 when divided by 4 and a remainder of 4 when\n    # divided by 5, we can express the number as:\n    # number = 3k + 2 = 4l + 3 = 5m + 4\n    # Where k, l, and m are integers.\n    \n    # To solve this system, we use the Chinese Remainder Theorem\n    # to find the smallest positive number that satisfies all conditions.\n    # This theorem can be solved iteratively for our conditions.\n\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the remainders and the divisors\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    # Solve the system of congruences\n    num, _ = solve_congruence(*congruences)\n\n    # Find the smallest positive number less than 100 that satisfies the conditions\n    while num < 100:\n        if num > 0:\n            break\n        num += 3 * 4 * 5  # Increase by the product of the divisors since the solution repeats every 3*4*5\n\n    return num\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    # The equation based on the problem statement\n    equation1 = Eq(girls/3, boys/2)\n    # Total number of children is given as 390\n    equation2 = Eq(girls + boys, 390)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(1, 60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Calculating the total expenditure for each period\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    # Calculating the total amount spent throughout the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Calculating the average spent per month over the entire year\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    whole_number = (three_quarters_of_number * 4) / 3\n    return whole_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    total_kg_per_5_days = 24\n    kg_per_day = total_kg_per_5_days / 5\n    total_kg_for_8_5_days = kg_per_day * 8.5\n\n    return total_kg_for_8_5_days\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    start_temp = 17\n    end_temp = -2\n    temp_drop = start_temp - end_temp\n    return temp_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n    years_till_tom_reaches_fathers_age = father_age_future - tom_age_now\n    father_age_now = tom_age_now + years_till_tom_reaches_fathers_age\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    fraction_men = 9 / 20\n    percent_women = 30 / 100\n    \n    men = total_passengers * fraction_men\n    women = total_passengers * percent_women\n    children = total_passengers - men - women\n    \n    return int(children)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of votes each candidate received\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    # Solve the equations for the number of votes each candidate received\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime.strptime(\"07:35\", \"%H:%M\")\n    travel_time = timedelta(hours=1, minutes=35)\n    walk_time = timedelta(minutes=40)\n\n    arrival_time = departure + travel_time + walk_time\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    # Check all natural numbers less than 200\n    for N in range(1, 200):\n        # Check if the sum of digits when written in base 4 equals 5\n        if sum(int(digit) for digit in format(N, 'b4')) == 5:\n            # Check if the sum of digits when written in base 6 equals 8\n            if sum(int(digit) for digit in format(N, 'b6')) == 8:\n                # Check if the sum of digits when written in base 8 equals 9\n                if sum(int(digit) for digit in format(N, 'b8')) == 9:\n                    ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the first digit (2 or 3), since it cannot be 0\n    first_digit_choices = 2\n    \n    # There are 3 choices for the second and third digits (0, 2, or 3)\n    second_digit_choices = 3\n    third_digit_choices = 3\n    \n    # The total number of different numbers is the product of the choices\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16\n    total_pence = 200  # Convert £2 into pence\n\n    num_bags = total_pence // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let's denote the initial number of acorns Chip had as x.\n    # Dale had total_acorns - x acorns initially.\n    # After giving away 14 acorns, Chip had x - 14 acorns.\n    # Chip and Dale then had the same number, which means:\n    # x - 14 = total_acorns - x\n    # Solving this equation for x, we get:\n    x = (total_acorns + 14) // 2\n    return x\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    ways = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ways\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(2, 100, 2):  # Check only even numbers\n        if number % 4 == 0 and number % 3 == 0:  # Must be multiple of 4 and 3\n            if (number ** 0.5).is_integer():  # Must be a square number\n                return number\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "网络故障，请重试"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    # Let x be the cost of one CD\n    # Darren buys 8 CDs\n    # Total cost for 8 CDs is 8 times the cost of one CD\n    total_cost = 8 * 'x'  # x is a symbol here since we want an expression\n\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n    \n    total_eggs = eggs_per_tray * num_trays\n    \n    return total_eggs\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Get all prime numbers less than 51.\n    primes = list(primerange(1, 52))\n\n    # Initialize the minimum count to a high number\n    min_count = float('inf')\n\n    # Go through all primes to sum up to 51\n    for prime in primes:\n        # Check if the current prime is smaller than or equal to the sum\n        if prime <= 51:\n            count = 0\n            sum_primes = 51\n            # Loop until the sum is greater than 0\n            while sum_primes > 0:\n                # If prime number is 2 or the sum of primes is an even number\n                if prime == 2 or sum_primes % 2 == 0:\n                    # Use the current prime to see how many times it fits into the sum\n                    quotient = sum_primes // prime\n                    count += quotient\n                    sum_primes -= (quotient * prime)\n                else:\n                    # If not, test the next smallest prime\n                    primes.remove(prime)  # Remove the prime that didn't work\n                    if primes:  # Check if there are still primes left\n                        prime = primes[-1]  # Take the next smallest prime\n                    else:\n                        break\n            # If at the end, we reached exactly 0, consider it as a possible answer\n            if sum_primes == 0:\n                min_count = min(min_count, count)\n\n    # If no count has been set, return 0. Otherwise, return the min count\n    return min_count if min_count != float('inf') else 0\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum(-1 if i % 2 else 1 for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    three_page_letters = 0\n\n    while total_penpals * 4 - three_page_letters * 1 != total_pages:\n        three_page_letters += 1\n\n    return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    result = 36 * 24\n    return result\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight_kg = 2.5\n    apple_pie_weight_kg = 750 / 1000\n    apple_juice_weight_kg = 1025 / 1000\n\n    remaining_weight_kg = initial_weight_kg - (apple_pie_weight_kg + apple_juice_weight_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    total_people = people_in_front_of_amy + amy_position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n    growth_per_week = (final_height - initial_height) / weeks\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # If we draw one color completely, we have 5 balls. \n    # Drawing another single ball (the 6th) could be of the same color,\n    # so we need to draw one more to ensure we have 3 different colors.\n    ans = 5 + 2\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece\n    x = symbols('x')\n    \n    # The length of the longer piece is twice that of the shorter\n    # The total length is the sum of the longer piece and the shorter piece\n    equation = Eq(x + 2*x, 12.75)\n\n    # Solve for x\n    shorter_piece = solve(equation, x)[0]\n    longer_piece = 2 * shorter_piece\n\n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    favorite_position_from_left = 14\n    books_on_right = 6\n\n    total_books = favorite_position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    # If each dimension is halved, the new volume is (1/2)^3 = 1/8 of the original volume\n    new_volume = original_volume * (1/2) ** 3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gigi_start = 120\n    lily_start = 24\n    coins_received = symbols('coins_received')\n    \n    equation = Eq(gigi_start + coins_received, 3 * (lily_start + coins_received))\n    \n    solution = solve(equation, coins_received)\n    return solution[0]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count_not_prime = sum(1 for i in range(1, 21) if not isprime(i))\n\n    return count_not_prime\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Difference between Brian and his father's age\n    age_difference = 41 - 14\n   \n    for i in range(1, 100):\n        brian_age = 14 + i\n        father_age = 41 + i\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit numbers\n    for i in range(100, 1000):\n        # Ensure the number is odd\n        if i % 2 == 1:\n            # Calculate the sum of the digits\n            digits_sum = sum([int(digit) for digit in str(i)])\n            # Check if the sum of the digits is 11\n            if digits_sum == 11:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since boiling one egg takes the same time as boiling multiple eggs,\n    # the answer is simply the time it takes to boil an egg.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    cabin_capacity = 6\n\n    min_cabins = (total_students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_g = 11160  # Convert 11.16 kg to grams\n    dough_per_cookie_g = 45\n    dough_per_brownie_g = 150\n    total_cookies = 240\n    total_brownies = 2\n\n    dough_used_for_cookies = dough_per_cookie_g * total_cookies\n    dough_used_for_brownies = dough_per_brownie_g * total_brownies\n\n    dough_used_total = dough_used_for_cookies + dough_used_for_brownies\n    dough_left_g = total_dough_g - dough_used_total\n\n    dough_left_kg = dough_left_g / 1000  # Convert grams back to kilograms\n\n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Dan wants to intake less calories than yesterday\n    calories_today = symbols('calories_today')\n    inequality = calories_today < calories_yesterday\n    \n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Apply the inverse operations of what Pip did\n    # Add 2 to compensate for \"2 less\" and then double the amount\n    day_before = (remaining_biscuits + 2) * 2\n\n    # Add 4 to compensate for \"4 more\" and then double the amount\n    initial_biscuits = (day_before + 4) * 2\n\n    return initial_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    days = 15\n    money = 100\n    for day in range(1, days + 1):\n        if day % 2 != 0: # Deposit day\n            money += 5\n        else: # Spending day\n            money -= 8\n            \n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    \n    index = (1004 - 1) % pattern_length\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n    wine_gums_per_child = total_wine_gums / number_of_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d, n = symbols('a d n')\n\n    # Sum of an arithmetic sequence: S_n = n/2 * (2*a + (n-1)*d)\n    \n    # Equation for the sum of the first 4 terms\n    equation1 = Eq((4 / 2) * (2 * a + (4 - 1) * d), 124)\n\n    # Equation for the sum of the last 4 terms\n    # Replace a with (a + (n-1)d) to get the first term of the last 4 terms\n    equation2 = Eq((4 / 2) * (2 * (a + (n - 1) * d) - 3 * d), 156)\n\n    # Equation for the sum of all terms\n    equation3 = Eq((n / 2) * (2 * a + (n - 1) * d), 210)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n\n    # Find the number of terms, making sure it's a positive integer\n    num_terms = next(s for s in solutions[n] if s.is_real and s > 0)\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (12345678987654321 + 11 - 12345678987654321)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    equation1 = Eq(total_chocolates - 18*friends, 41)\n    equation2 = Eq(23*friends - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    remaining_chocolates = solutions[total_chocolates] - 20*solutions[friends]\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def is_multiple_of_27(num):\n    return num % 27 == 0\n\ndef is_multiple_of_7(num):\n    return num % 7 == 0\n\ndef sum_of_digits_is_17(num):\n    return sum(map(int, str(num))) == 17\n\ndef is_perfect_square(num):\n    return int(num**0.5) ** 2 == num\n\ndef is_factor_of_89100(num):\n    return 89100 % num == 0\n\ndef solution():\n    for num in range(100, 1000):\n        conditions = [\n            is_multiple_of_27(num),\n            is_multiple_of_7(num),\n            sum_of_digits_is_17(num),\n            is_perfect_square(num),\n            is_factor_of_89100(num)\n        ]\n        if conditions.count(True) == 3:\n            return num\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    spent_on_book = initial_amount * book_percentage\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * dvd_percentage\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    best_boy_pushups = 50\n    mulan_pushups = best_boy_pushups + 1\n    return mulan_pushups\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    balloons_blown_up = 22\n    balloons_burst = 3\n    balloons_needed = 40\n\n    balloons_still_needed = balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    total_teams = 32\n    total_games = total_teams - 1  # In a single-elimination tournament, one team is out after each game\n    games_played = 24\n    games_remaining = total_games - games_played\n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    total_candies = 88\n    children = 8\n    min_candies = 1\n    # To make the most candies the child gets the least, distribute candies to others first.\n    candies_distributed = sum(range(min_candies, min_candies + children - 1))\n    # The rest are for the last child, who gets the most.\n    most_candies = total_candies - candies_distributed\n    return most_candies\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from stack B, the stacks are:\n    # A: 20 stones, B: 16 stones\n    # Jerry must create a situation where both stacks have the same number\n    # of stones, because then, whatever move Tom makes, Jerry can mirror\n    # and ensure that he takes the last stone.\n    # Jerry should take from stack A.\n    stones_to_take = 20 - 16\n    \n    return stones_to_take, 'A'\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = pails_filled * water_per_pail + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(1 + 3 * i for i in range(37))\n    mistake_difference = correct_sum - 2011\n    wrong_number = mistake_difference // 2\n    mistake_position = wrong_number // 3 + 1\n\n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    cakes_made = 25 / milk_per_cake\n    return int(cakes_made)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):  # Hundreds place cannot be 0\n        for units in range(10):    # Units place can be from 0 to 9\n            M = hundreds*100 + units  # Constructing M with 0 in the tens place\n            S = hundreds + units  # Sum of the digits of M\n            if M == 67 * S:\n                # Reversing the digits of M to get the reversed number\n                reversed_M = units * 100 + hundreds\n                # Dividing reversed_M by S and returning the result\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters in cm\n    piece_length_cm = 6\n    complete_pieces = stick_length_cm // piece_length_cm\n    return complete_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let's denote the number of girls as g and boys as b\n    # According to the problem, the ratio of girls to boys is 7:9\n    # This gives us two equations:\n    # 1) b = g + 16 (There are 16 more boys than girls)\n    # 2) g/b = 7/9 (The ratio of girls to boys)\n    \n    # We can express the number of boys b in terms of the number of girls g using equation 1:\n    # b = g + 16\n    \n    # Substituting b from equation 1 into equation 2:\n    # g/(g+16) = 7/9\n    # Cross-multiplying gives us:\n    # 9g = 7(g + 16)\n    # 9g = 7g + 112\n    # 2g = 112\n    # g = 56 (number of girls)\n    \n    # Now we find the number of boys using equation 1:\n    # b = 56 + 16\n    # b = 72 (number of boys)\n    \n    # The total number of pupils in class 1A is the sum of the number of girls and boys:\n    # Total = g + b\n    \n    g = 56\n    b = 72\n    total = g + b\n    \n    return total\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    selected_balls = 7\n    return comb(total_balls, selected_balls)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Initialize variables a, b, c\n    a, b, c = 0, 0, 0 \n    # Since 'a' is in denominator, it must start from 1 to avoid division by zero\n    for a in range(1, 100):\n        for b in range(1, 100):\n            for c in range(1, 100):\n                # Recreate the given expression using a, b, and c\n                expression = 1 + 1 / (a + 1 / (b + 1 / c))\n                # Check if this matches 13/10\n                if expression == 13/10:\n                    # Return the required result\n                    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # If there are 5 consecutive natural numbers, let's assume the middle one is 'x'.\n    # Therefore, the numbers will be x-2, x-1, x, x+1, x+2\n    # The sum of these numbers will be: (x-2) + (x-1) + x + (x+1) + (x+2) = 5x\n    # They sum up to 160, so we can set up the equation: 5x = 160\n\n    x = 160 // 5  # Find the middle number\n    max_balls = x + 2  # The student with the most balls has the largest number, which is 2 more than the middle number.\n\n    return max_balls\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    # Define the total number of questions and the final score\n    total_questions = 20\n    final_score = 52\n    \n    # Let the number of correct answers be x\n    # Then, the number of wrong answers is total_questions - x\n    # Points for correct answers: 5x\n    # Points lost for wrong answers: 3(total_questions - x)\n    # Equation: 5x - 3(total_questions - x) = final_score\n    # Solve for x\n    \n    # Implement the equation and solve for x\n    for x in range(total_questions + 1):\n        if 5 * x - 3 * (total_questions - x) == final_score:\n            return x\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while days * (days + 1) / 2 <= 100:\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Finding the ones digit of a number base 8 raised to the 30th power\n    # follows a repeating pattern every 4 powers due to the nature of exponents\n    # and base 10 number system\n    \n    # Only the last digit of base affects the last digit of the result.\n    base_last_digit = 8\n    # The pattern of the last digits for powers of 8 is: 8, 4, 2, 6\n    # and repeats every 4 powers (8^1, 8^2, 8^3, 8^4).\n    # So we can find the cycle position using modulo 4\n    cycle_position = 30 % 4\n\n    # Create the repeating pattern\n    pattern = [8, 4, 2, 6]\n    \n    # If the cycle_position is 0, it means it's the last element of the pattern\n    if cycle_position == 0:\n        last_digit = pattern[-1]\n    else:\n        # Otherwise it's (cycle_position - 1) because of zero-indexing\n        last_digit = pattern[cycle_position - 1]\n    \n    return last_digit\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_sugar = 600 * 0.48  # total amount of sugar in the solution\n    total_solution = 600  # total amount of the solution\n\n    # The amount of water is the total solution weight minus the sugar weight\n    water_weight = total_solution - total_sugar\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    result = 9 + 9 + 9 + 9 + 9\n    return result\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Since the dwarfs were born in seven consecutive years, their ages will form\n    # an arithmetic sequence with a common difference of 1 year.\n    \n    # Let 'a' be the age of the youngest dwarf. Then the ages of the youngest three\n    # dwarfs will be a, a+1, and a+2. According to the question, their sum is 42.\n    # a + (a+1) + (a+2) = 42\n    # 3a + 3 = 42\n    # 3a = 39\n    a = 39 // 3\n    \n    # Since there are seven dwarfs with ages in consecutive years,\n    # the age of the oldest dwarf will be a + 6.\n    # Then the ages of the oldest three will be (a+4), (a+5), and (a+6).\n    # We need to find the sum of these three ages.\n    \n    # Sum of ages of oldest three dwarfs:\n    sum_oldest_three = (a+4) + (a+5) + (a+6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if 1000 * a + 100 * b + 10 * c + d + 100 * a + 10 * b + c + 10 * a + b + a == 1370:\n                        return 1000 * a + 100 * b + 10 * c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Calculate the fractional part separately: 4/5 * 5 times\n    fractional_part = (4/5) * 5\n    \n    # Calculate the sum of the integer parts\n    integer_part = 19 + 199 + 1999 + 19999 + 199999\n    \n    # The sum of the total\n    total = fractional_part + integer_part\n    \n    return total\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_amount = 408\n    fraction = 5 / 8\n    result = total_amount * fraction\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age_now = 11\n    sister_age_now = janice_age_now + 5\n    total_age_desired = 35\n\n    years_later = (total_age_desired - (janice_age_now + sister_age_now)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dad_current, son_current = symbols('dad_current son_current')\n    \n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum([1] + [(i/j + (j-i)/j) for j in range(2, 9) for i in range(1, j)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    solutions = solve((equation1, equation2), (terry, gerald))\n    \n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n    # Let's denote the number of milk chocolates as mc and fruit drops as fd\n    fd = 6\n    mc = symbols('mc')\n\n    # fd = 2/7 * mc\n    equation1 = Eq(fd, 2/7 * mc)\n    \n    # mc = 3/4 * total_sweets\n    equation2 = Eq(mc, 3/4 * total_sweets)\n    \n    # Solve the system of equations for total_sweets\n    solutions = solve((equation1, equation2), (mc, total_sweets))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    football, volleyball = symbols('football volleyball')\n\n    equation1 = Eq(football + 2 * volleyball, 60)\n    equation2 = Eq(2 * football, 60 - 16)\n\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    num = 1000 - 630\n    return num\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_n = n * (n + 1) // 2\n    ans = sum_n ** 2\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = num_terms * (first_term + last_term) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "from math import factorial\n\ndef solution():\n    num_books = 3\n    arrangements = factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "import math\n\ndef solution():\n    # A can stand in one of the 3 middle positions\n    positions_for_a = 3\n    # The other 4 people can be arranged in 4! ways\n    permutation_of_others = math.factorial(4)\n    # Total number of ways = positions for A * permutations of the other 4\n    total_ways = positions_for_a * permutation_of_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n\n    num_people = 16\n    ans = math.ceil(math.log2(num_people))\n\n    return ans\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let the number of yellow flowers be y\n    # The number of red flowers is then 3 * y\n    # The number of pink flowers is y - 7\n\n    # From the problem, it is given that there are 3 pink flowers.\n    pink_flowers = 3\n\n    # calculate the number of yellow flowers\n    yellow_flowers = pink_flowers + 7\n\n    # calculate the number of red flowers\n    red_flowers = 3 * yellow_flowers\n\n    # calculate the total number of red and yellow flowers\n    total_red_yellow_flowers = red_flowers + yellow_flowers\n\n    return total_red_yellow_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay_time = timedelta(minutes=30)\n\n    arrival_time = scheduled_time + delay_time\n\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio_eq = Eq(apples / oranges, 3 / 8)\n    new_ratio_eq = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio_eq, new_ratio_eq), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the ages of the five students\n    a1, a2, a3, a4, a5 = symbols('a1 a2 a3 a4 a5')\n\n    # Given mode is 7, so at least two of the ages must be 7\n    # One of them should be the middle number (median), so a3 is 7 for sure\n\n    # Constraints based on the given problem statement\n    equation1 = Eq((a1 + a2 + a3 + a4 + a5) / 5, 9)  # The mean age is 9\n    equation2 = Eq(a3, 7)  # The median age is 7\n    equation3 = Eq(a5 - a1, 6)  # The range of their ages is 6\n\n    # List of equations\n    equations = [equation1, equation2, equation3]\n\n    # Since we know the mode and median are 7, two students are definitely 7 years old\n    # We can replace a1 or a2 with a3 (7), but let's consider different ages for now\n    # Let's assume a5 is the oldest and a1 is the youngest\n    # We can now sort the rest of the ages a2, a4 around the median (a3)\n\n    # We will use a loop to substitute values for a2 and a4 in range(7, 7+6)\n    # The second oldest is the fourth in the sorted list a1, a2, a3, a4, a5\n    second_oldest = None\n    for age in range(7, 7 + 6):\n        # Assuming that a2 is 7 and a4 is the variable 'age'\n        try:\n            solutions = solve((equations[0], equations[1], Eq(a4, age), Eq(a2, 7)), (a1, a2, a3, a4, a5))\n            # If the solutions are valid (positive ages) and in ascending order, we found the answer\n            if all(val.is_real and val >= 1 for val in solutions.values()) and \\\n                    solutions[a1] < solutions[a2] and solutions[a2] < solutions[a3] and \\\n                    solutions[a3] < solutions[a4] and solutions[a4] < solutions[a5]:\n                second_oldest = solutions[a4]\n                break\n        except:\n            continue  # If a solution is not found, continue the loop\n\n    # Return the age of the second oldest member if found\n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From the first hint, we identify two correct digits in their correct places.\n    # We initialize an empty list with four None values to represent unknown digits.\n    number = [None, None, None, None]  \n    \n    # Let's analyze the clues given by John:\n    # Clue 1 (1703): Two of these digits are correct and in their correct positions.\n    # Clue 2 (2745): Two of these digits are correct but all are in wrong positions.\n    # Clue 3 (3541): All digits are correct but all are in wrong positions.\n    \n    # Since in the third clue all digits are correct but in wrong positions, \n    # we can start by assigning these digits to potential positions.\n    # We create a list with sets that represent possible positions for each digit.\n    # Initially, any digit from the third clue can be in any position except its own:\n    possible_positions = [{0, 1, 2, 3} - {i} for i in range(4)]\n    \n    # Remove positions of digits from clue 1 that are in the correct position (1 and 0)\n    possible_positions[3].discard(0)\n    possible_positions[5].discard(2)\n    \n    # Remove positions of digits from clue 2 since none are in the correct position\n    possible_positions[2].discard(0)\n    possible_positions[7].discard(1)\n    possible_positions[4].discard(2)\n    possible_positions[5].discard(3)\n    \n    # Since all digits are unique and by clue 3, all digits are in wrong positions,\n    # we find that the digit 3 from '3541' cannot be in position 0 or 2,\n    # hence it must be in position 1.\n    # Similarly, 5 cannot be in position 3, and not in position 1 (occupied by 3),\n    # which leaves position 0 for digit 5.\n    # This also means that the position for digit 4 is 2, and the position for 1 is 3. \n    number[1] = '3'\n    number[0] = '5'\n    number[2] = '4'\n    number[3] = '1'\n\n    # Combine digits to form the actual number John wrote.\n    final_number = \"\".join(number)\n    return final_number\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit: 1-9 (can't be 0)\n        for tens in range(0, 10):  # tens digit: 0-9\n            for units in range(0, 10):  # units digit: 0-9\n                if hundreds > tens and units > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of girls be g, and boys will be b = 1.5g\n    g, b = symbols('g b')\n    original_boys_to_girls = Eq(b, 1.5 * g)\n\n    # After adding 12 to both, the ratio becomes 19:14\n    new_boys_to_girls = Eq((b + 12) / (g + 12), 19 / 14)\n\n    # Solve the system of equations\n    solutions = solve((original_boys_to_girls, new_boys_to_girls), (g, b))\n\n    # The total number of children after 12 boys and 12 girls joined\n    total_children_afternoon = solutions[g] + solutions[b] + 12 + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    total_classmates = 10\n    notebook_price = 3\n    colour_pencil_price = 9\n\n    # let x be the number of colour pencils and y be the number of notebooks\n    for x in range(total_classmates + 1):\n        y = total_classmates - x\n        if (notebook_price * y) + (colour_pencil_price * x) == total_money:\n            return x  # We return x because we need to find out the number of boxes of colour pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_capacity = 9*36\n    total_students = 500\n    second_floor_students = total_students - first_floor_capacity\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    last_term = 56\n    ratio = 2\n\n    next_term = last_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (31 - i) for i in range(31))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    prime_factors_2 = 0\n    prime_factors_5 = 0\n    \n    for i in range(1, 51):\n        while i % 2 == 0:\n            prime_factors_2 += 1\n            i /= 2\n        \n        while i % 5 == 0:\n            prime_factors_5 += 1\n            i /= 5\n    \n    return min(prime_factors_2, prime_factors_5)\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):  # Loop through numbers 3 to 47 inclusive\n        count += str(i).count('7') # Increment count for each occurrence of digit '7'\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of rounds played\n    x = symbols('x')\n\n    # Original numbers of cards\n    helen_original = 18\n    oliver_original = 22\n\n    # After x rounds, Helen and Oliver's cards\n    helen_after = helen_original + x\n    oliver_after = oliver_original - x\n\n    # The equation representing the 10 more cards than Oliver\n    equation = Eq(helen_after, oliver_after + 10)\n\n    # Solve the equation to find the number of rounds\n    rounds_played = solve(equation, x)\n\n    # Calculate Helen's cards now\n    helen_now = helen_original + rounds_played[0]\n\n    return helen_now\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 65 / 100\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first number in the sequence be x.\n    # Then the six consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10\n    # Their sum is 6x + (2+4+6+8+10) = 6x + 30\n    # We know the sum of these numbers is 510\n    \n    sum_of_six_numbers = 510\n    sum_of_increments = 2 + 4 + 6 + 8 + 10\n    sum_x = sum_of_six_numbers - sum_of_increments\n    \n    # To find x, we divide the remaining sum by 6\n    x = sum_x / 6\n    \n    # The mean of these numbers is the sum divided by the number of numbers\n    mean = sum_of_six_numbers / 6\n    \n    # The median of a sequence of consecutive even numbers is the average of the third and fourth numbers\n    median = (x + 4 + x + 6) / 2\n    \n    # The difference between the mean and the median\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n\n    final_height = start_height + climb_up_1 - climb_down + climb_up_2\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of strawberries\n    x = symbols('x')\n\n    # Equation: x + 448 (\"more mangoes than strawberries\") - 900 (\"mangoes given away\") = 2 * x (\"the mass of strawberries was twice as much as the mass of mangoes\")\n    equation = Eq(x + 448 - 900, 2 * x)\n\n    # Solve the equation\n    mass_of_strawberries = solve(equation, x)[0]\n\n    return mass_of_strawberries\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x. Then the consecutive numbers are x, x+1, x+2, x+3, x+4.\n    # Their sum is 5x + (1+2+3+4) = 5x + 10.\n    # This sum is equal to 40.\n    # So, we can write the equation: 5x + 10 = 40\n    # Solving for x gives us the smallest number.\n    \n    total_sum = 40\n    extra_sum = 10  # This is the sum of 1+2+3+4.\n    x = (total_sum - extra_sum) / 5\n    \n    return int(x)\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(3 * number - 8, 4)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 for the number '1', which is neither\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Given the terms in an arithmetic sequence\n    a4 = 39  # the fourth number\n    a12 = 57  # the twelfth number\n\n    # The difference (d) between each term in an arithmetic sequence is constant\n    # We can find this difference by using the formula: d = (a12 - a4) / (12 - 4)\n    d = (a12 - a4) / (12 - 4)\n\n    # The nth term of an arithmetic sequence is given by the formula: an = a1 + (n - 1) * d\n    # We can find the first term (a1) by rearranging this formula:\n    # a1 = a4 - (4 - 1) * d\n    a1 = a4 - (4 - 1) * d\n\n    return a1\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    max_num = int(''.join(sorted(digits, reverse=True)))\n    return max_num\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20  # Total salt from both solutions\n    target_concentration = 0.10  # Desired concentration of final solution\n\n    # Let x be the amount of water to add\n    # (Total salt) / (total grams of mixture + x) = target concentration\n    # Solve the equation for x to find the amount of water needed\n    x = total_salt / target_concentration - (30 + 20)\n\n    return x\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    correct_sum = incorrect_sum - incorrect_addend + correct_addend\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbol for the unknown integer\n    x = symbols('x')\n    # Create the equation based on the problem statement\n    equation = Eq(x**2 + x, 380)\n    # Solve the equation\n    solutions = solve(equation, x)\n    # Since we are looking for the integer solution\n    # Filter out the non-integer solutions\n    integer_solution = [s for s in solutions if s.is_integer]\n    # Return the integer solution if there is any\n    return integer_solution[0] if integer_solution else None\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n    # Possible digits are 0,1,3,4,6,8,9\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    \n    # Generate all 5-digit numbers without repetition from the given digits\n    all_numbers = [''.join(map(str, p)) for p in permutations(digits, 5) if p[0] != 0]\n    \n    # Filter numbers that are multiples of 9\n    multiples_of_9 = [int(num) for num in all_numbers if int(num) % 9 == 0]\n    \n    # Sort the numbers to find the maximum and minimum\n    multiples_of_9.sort()\n    \n    # Since we want the largest possible value of (M-N)/9, we take the largest number M\n    # and the smallest N\n    M = multiples_of_9[-1]\n    N = multiples_of_9[0]\n    \n    # Compute (M-N)/9\n    ans = (M - N) // 9\n    return ans\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # meters per minute\n    vicky_speed = 250    # meters per minute\n    race_distance = 3000 # meters\n\n    johnson_time = race_distance / johnson_speed  # minutes\n    vicky_time = race_distance / vicky_speed      # minutes\n\n    time_difference = vicky_time - johnson_time   # minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To be sure about having 29 balls of one color:\n    must_pick_for_29 = 28*3 + 1 # other colors + 1\n    # To be sure about having 28 balls of another color:\n    must_pick_for_28 = must_pick_for_29 + 27*2 + 1 # the last two colors + 1\n    # To be sure about having 10 balls of the last color:\n    must_pick_for_10 = must_pick_for_28 + 9 + 1 # finally to guarantee 10 of the last + 1\n\n    return must_pick_for_10\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Worst case scenario for every distinct number is 2 cards\n    # In order to guarantee at least 3 cards with the same number\n    # We have to draw 2 cards for each of the 13 numbers (worst case scenario)\n    # And then draw one more card which will be the 3rd card with the same number\n    cards_drawn = (2 * 13) + 1\n\n    return cards_drawn\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = \"four million four hundred and four\"\n    conversion = {\n        \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\n        \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n        \"zero\": 0, \"ten\": 10, \"eleven\": 11, \"twelve\": 12,\n        \"thirteen\": 13, \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16,\n        \"seventeen\": 17, \"eighteen\": 18, \"nineteen\": 19,\n        \"twenty\": 20, \"thirty\": 30, \"forty\": 40, \"fifty\": 50,\n        \"sixty\": 60, \"seventy\": 70, \"eighty\": 80, \"ninety\": 90,\n        \"hundred\": 100, \"thousand\": 1000, \"million\": 1000000\n    }\n    \n    words = number.replace(\" and\", \"\").split()\n    total = 0\n    current = 0\n    \n    for word in words:\n        if word in conversion:\n            value = conversion[word]\n            if value >= 1000:\n                current *= value\n                total += current\n                current = 0\n            elif word == \"hundred\":\n                current *= value\n            else:\n                current += value\n                total += current\n                current = 0\n    total += current\n    return total\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    total_cards = 20\n\n    prime_numbers = list(primerange(1, total_cards + 1))\n\n    num_prime_cards = len(prime_numbers)\n\n    proportion_prime = num_prime_cards / total_cards\n\n    return round(proportion_prime, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_known_sum = sum(known_numbers)\n    mean_value = 8\n    total_numbers = 8\n\n    total_sum = total_numbers * mean_value\n    missing_number = total_sum - total_known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51  # Subtracting 1 and adding 51 to shift the range\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = 'ABCDEFGH'\n    for perm in permutations(students):\n        if perm.index('C') > perm.index('A') and perm.index('C') < perm.index('B') or \\\n           perm.index('C') < perm.index('A') and perm.index('C') > perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1 and \\\n               abs(perm.index('F') - perm.index('G')) == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    unique_prices = set()\n\n    for notebook_price in notebook_prices:\n        for calendar_price in calendar_prices:\n            total_price = notebook_price + calendar_price\n            unique_prices.add(total_price)\n\n    return len(unique_prices)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    original_length = 90\n    lego_length = original_length - 70.5\n    length_ratio = 5\n    breadth_ratio = 2\n\n    max_breadth = (lego_length / length_ratio) * breadth_ratio\n\n    return max_breadth\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume of the solution transferred from each container\n    x = symbols('x')\n    \n    # Before transfer: Bottle A has 5L of 10%, Bottle B has 3L of 20%\n    # After transfer: Bottle A will have (5-x) of its original solution + x of Bottle B's solution\n    # And Bottle B will have (3-x) of its original solution + x of Bottle A's solution\n    \n    # Equation for the final concentration in Bottle A being equal to the final concentration in Bottle B\n    equation = Eq(0.1 * (5 - x) + 0.2 * x, 0.2 * (3 - x) + 0.1 * x)\n\n    # Solve the equation for x\n    solution_volumes = solve(equation, x)\n    \n    # We can expect one solution and that will be the volume transferred from each container\n    return solution_volumes[0]\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = [total_amount - coin for coin in [50, 20, 10, 5]]\n    for amount in brother_amount:\n        if total_amount - amount == amount / 2:\n            ans = total_amount - amount\n            break\n    return ans\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n    \n    likes_both = (likes_bananas + likes_apples) - total_people\n    return likes_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200\n    kane_distance = 200 - 12.5\n    jaan_speed = 8  # m/s\n    jaan_time = jaan_distance / jaan_speed  # time taken by Jaan to finish the race\n    kane_speed = kane_distance / jaan_time  # speed of Kane\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher_value = 110 / 100  # Converting pence to pounds\n\n    total_price = cake_price + milk_price\n    amount_to_pay = total_price - voucher_value\n\n    return amount_to_pay\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j, r, p be the rates at which John, Raj, and Pete work per minute, respectively\n    j, r, p = symbols('j r p')\n\n    # Combined rate of John, Raj, and Pete to finish the job in 60 minutes: 1 job / 60 min = j + r + p\n    equation1 = Eq(j + r + p, 1/60)\n\n    # Combined rate of John and Raj to finish the job in 72 minutes: 1 job / 72 min = j + r\n    equation2 = Eq(j + r, 1/72)\n\n    # Combined rate of Raj and Pete to finish the job in 90 minutes: 1 job / 90 min = r + p\n    equation3 = Eq(r + p, 1/90)\n\n    # Solve the system of equations for j, r, p\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n\n    # Raj's rate is 'r' in jobs per minute. We want to find the time in minutes (t = 1/r) \n    raj_time_minutes = 1 / solutions[r]\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    result = 0\n    multiplier = 123\n    \n    # Adding each term while also incrementing both the multiplier and the count\n    # on each iteration by appending the digit '1' on the right.\n    for i in range(1, 124):\n        result += int(str(multiplier) * i)\n        \n    # Converting to string to easily extract the hundreds digit\n    result_str = str(result)\n    \n    if len(result_str) < 3:\n        # If the result is less than 3 digits long, there is no hundreds digit.\n        hundreds_digit = 0\n    else:\n        # Get the hundreds place from the end of the string representation of the result\n        hundreds_digit = int(result_str[-3])\n    \n    return hundreds_digit\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    normal_hours = 8\n    overtime_rate = normal_rate * 1.25\n    overtime_hours = 10 - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percent = 35\n    total = 60\n\n    ans = (percent / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current ages of the elder and younger brothers\n    elder, younger = symbols('elder younger')\n\n    # Equation 1: Sum of the current ages\n    equation1 = Eq(elder + younger, 42)\n\n    # Equation 2: Relationship of their ages a few years ago\n    equation2 = Eq(younger - (elder - younger), (elder / 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # Return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure we have at least three balls of the same color, we have to consider the worst-case scenario.\n    # We could take 2 white, 2 blue, 2 green, and 2 orange balls (2 from each color) without having three of the same color.\n    # To make sure we get three of the same color, the next ball we take out, no matter what color it is,\n    # will give us 3 balls of at least one color.\n    \n    # 2 balls from each of the 4 colors = 2 * 4\n    worst_case_balls = 2 * 4\n    \n    # 1 more ball to ensure we have three of the same color\n    balls_for_three_same_color = 1\n    \n    return worst_case_balls + balls_for_three_same_color\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):  # The tens digit must be from 1 to 9\n        for ones in range(10):  # The ones digit must be from 0 to 9\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams\n    n = symbols('n')\n    # Each team plays n-1 other teams twice\n    # The total number of matches is (n(n-1))/2, and each of these matches is played twice\n    equation = Eq((n * (n - 1)), 60)\n\n    # Solve for n\n    solutions = solve(equation, n)\n    # Since the number of teams cannot be negative, choose the positive solution.\n    ans = [sol for sol in solutions if sol.is_real and sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_for_66_5kg = (total_kg * boxes_for_14kg) / 14\n\n    return int(boxes_for_66_5kg)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let's denote x as the number of years later the sum of their ages will be 40\n    # If currently the sum of their ages is 34, after x years, each will be x years older\n    # So the sum of their ages will be 34 + 2x\n    # According to the question, this sum after x years should be 40\n    # Therefore, we have the equation 34 + 2x = 40\n    \n    # Solve for x\n    x = (40 - 34) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Number is repeated sequence of '928'\n    sequence = '928'\n    \n    # Length of sequence\n    seq_len = len(sequence)\n    \n    # Remainder of 99 divided by the length of sequence (3) to find out partial sequence\n    remainder_len = 99 % seq_len\n    \n    # Full sequence repetitions count\n    full_reps = 99 // seq_len\n    \n    # Concatenated string of full sequence repeats\n    full_sequence = sequence * full_reps\n    \n    # Partial sequence (if any) from the remainder of dividing 99 by length of sequence\n    partial_sequence = sequence[:remainder_len]\n    \n    # Combined full sequence with the partial one\n    combined_sequence = full_sequence + partial_sequence\n    \n    # Convert the combined sequence to an integer and find the remainder when divided by 9\n    num_remainder = int(combined_sequence) % 9\n    \n    return num_remainder\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x, y, z = solutions[x], solutions[y], solutions[z]\n\n    return x + y + z\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "def solution():\n    from itertools import permutations\n\n    # Iterate through all the permutations of the digits 0-9\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n\n        # Ensure that A is not zero (since it's a digit for a hundreds place)\n        if A == 0:\n            continue\n\n        # Convert tuples to number\n        num1 = A * 100 + B * 10 + C  # ABC\n        num2 = A * 100 + C * 10 + C  # ACC\n        num3 = D * 1000 + B * 100 + B * 10 + C  # DBBC\n\n        # Check the condition given in the puzzle\n        if num1 + num2 == num3:\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kitty, nora = symbols('kitty nora')\n    \n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n    \n    return solutions[kitty]\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Number of different countries\n    countries = 11\n    # To ensure that at least one country has 5 participants\n    # we attempt to distribute 4 participants to each of the others\n    participants_per_country_to_avoid_5 = 4\n    \n    # Calculate the maximum number of participants to have at most\n    # 4 participants from each country.\n    \n    # If we have countries * participants_per_country_to_avoid_5 participants,\n    # then each country could have 4 participants without having 5 from any country.\n    \n    # To ensure that we have 5 participants from the same country,\n    # we add one more participant to this product.\n    total_participants = (countries * participants_per_country_to_avoid_5) + 1\n    \n    return total_participants\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total be the total amount of money\n    total = symbols('total')\n    \n    # 3/7 of the total amount is spent on the bag\n    spent = (3/7) * total\n    \n    # Not spent amount\n    not_spent = total - spent\n    \n    # The difference between the spent and not spent is 12\n    equation = Eq(spent - not_spent, 12)\n\n    # Solve for total\n    total_money = solve(equation, total)[0]\n    \n    # Calculate the amount spent on the bag\n    amount_spent = (3/7) * total_money\n\n    return amount_spent\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    doubled_number = final_number - 6\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 8):\n        result -= i\n    return result\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the length of the rope as 'r' and the circumference of the tree as 'c'.\n    r, c = symbols('r c')\n\n    # From the problem, we can write two equations:\n    # When the rope makes 10 turns, 10c = r + 3\n    # When the rope makes 12 turns, 12c = r - 3\n    equation1 = Eq(10 * c, r + 3)\n    equation2 = Eq(12 * c, r - 3)\n\n    # Solve the two equations for 'r' and 'c'.\n    solutions = solve((equation1, equation2), (r, c))\n\n    # After solving these equations, we'll have the values for 'r' and 'c'.\n    # We need to find how many meters are left after 8 turns.\n    # So, the equation for 8 turns would be 8c = r + left_meters\n    c_value = solutions[c]\n    left_meters = 8 * c_value - solutions[r]\n\n    return left_meters\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # Since we are taking steps of 5, divide by 5 to get the 'n' for the formula.\n    total_sum = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)  # Apply the formula given, multiplied by 5^2 for each term\n    return int(total_sum)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt_in_bitcoins = 5.04\n    \n    months_needed = debt_in_bitcoins / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Given that the ages of the youngest three dwarfs add up to 42 years,\n    # and their ages form an arithmetic sequence with a common difference of 1 (consecutive years),\n    # we can calculate the middle term (age of the second youngest dwarf).\n    \n    # Let the age of the youngest dwarf be x.\n    # Therefore, the age of the second youngest dwarf would be x + 1\n    # and the age of the third youngest dwarf would be x + 2.\n\n    # The sum of their ages is 42:\n    # x + (x + 1) + (x + 2) = 42\n\n    # Simplify the equation:\n    # 3x + 3 = 42\n\n    # Solve for x:\n    x = (42 - 3) / 3\n\n    # Now we can find the ages of the oldest three dwarfs.\n    # The fourth dwarf (middle term) would be two years older than the third youngest:\n    fourth_dwarf_age = x + 2 + 1\n\n    # Using the property of the arithmetic sequence that the sum of equidistant terms from\n    # the middle term is constant, we can find the sum of ages of the oldest three dwarfs.\n    # If the age of the fourth dwarf is 'x + 3', the sum of the oldest three dwarfs' ages\n    # will be three times the fourth dwarf's age.\n\n    sum_oldest_three = 3 * fourth_dwarf_age\n\n    return int(sum_oldest_three)\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n            \n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    # Let's denote the number of boys as x.\n    # Then the number of girls will be x + 30.\n    # Given that the total number of pupils is 500, we can write the equation:\n    # x + (x + 30) = 500\n\n    # Solving the equation for x gives us the number of boys,\n    # and x + 30 gives us the number of girls.\n\n    x = (500 - 30) // 2\n    girls = x + 30\n\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n    \n    # Set up the equations based on the problem\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n    \n    # Calculate the cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray_sausages = 21\n    new_tray_count = initial_trays + 1\n\n    total_initial_sausages = initial_trays * initial_mean\n    total_sausages_with_additional = total_initial_sausages + additional_tray_sausages\n\n    new_mean = total_sausages_with_additional / new_tray_count\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    sum_of_numbers = 1.99 + 2.99 + 3.99 + 4.99\n    return sum_of_numbers\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit can be from 1 to 9\n        for tens in range(0, 10):  # Tens digit can be from 0 to 9\n            for ones in range(1, 10):  # Ones digit can be from 1 to 9\n                # V-number condition: tens digit smaller than hundreds and ones\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    mixed_number = 3 + 1/2\n    divisor = 1/4\n    ans = mixed_number / divisor\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # speed of the train (m/s)\n    second_bridge_length = speed * 27 - 137  # total distance covered in 27s minus train length\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total_money = rani + brenda\n\n    # After Brenda gives some money to Rani, they'll have the same amount:\n    # (rani + x) = (brenda - x)\n    # Solve for x gives the money Brenda needs to give to Rani.\n\n    equal_amount = total_money // 2\n    money_to_give = brenda - equal_amount\n\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    # Let the number of blue balls be b and the number of red balls be r.\n    # According to the problem, we have the following equations:\n    # b + r = 125\n    # (2/5)*b = (3/5)*r\n    # We can use algebra to solve these equations\n\n    # (2/5)*b = (3/5)*r => 2*b = 3*r => b = (3/2)*r\n    # Now we can substitute b in the first equation:\n    # (3/2)*r + r = 125 => (5/2)*r = 125 => r = (125*2)/5\n\n    r = (125 * 2) // 5\n    b = (3 * r) // 2\n    \n    # The solution asks for how many more blue balls there are than red balls\n    ans = b - r\n    return ans\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    ans = (2022 + 4567 * 7890) / (4568 * 7890 - 5778)\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Choose a book for each student first\n    ways_to_choose_first_books = factorial(7) / factorial(4)\n\n    # Since order matters in lending different books to students (permutations),\n    # the remaining four books can be distributed in 3^4 ways.\n    ways_to_distribute_remaining_books = 3 ** 4\n\n    # Multiply both to get the total ways\n    total_ways = ways_to_choose_first_books * ways_to_distribute_remaining_books\n    return int(total_ways)\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    # Given equations\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate cost of 2 watches and 2 handbags\n    cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Initialize the number of candies and children\n    candies = 88\n    children = 8\n\n    # Find the minimum number of candies that can be given following the conditions\n    # Start by giving out one candy to each child, except the last who will get the remaining\n    # Then, to ensure each child has a different number, iteratively add one piece to the count\n    # of every other child until reaching the one with the most pieces.\n    min_candies = [1] * (children - 1)  # Give one piece to everyone except the last child\n    remaining_candies = candies - sum(min_candies)\n\n    # Give the remaining candies to the last child\n    min_candies.append(remaining_candies)\n\n    # To get the least amount for the child with the most pieces,\n    # we increment the other children's candies by 1 until they are all different,\n    # starting with the child that has the least candies.\n    for i in range(children - 2, -1, -1):\n        # The increment process ensures that the last child always has the most\n        min_candies[i] += 1\n        \n        # Redistribute the remaining candies\n        remaining_candies -= 1\n    \n    # The last child has the most pieces\n    most_pieces = min_candies[-1]\n\n    return most_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Year when grandmother was 80\n    year_grandmother_80 = 2008\n    \n    # Year when daughter was 40\n    year_daughter_40 = 1996\n    \n    # Age of grandmother in 1996\n    age_grandmother_in_1996 = 80 - (2008 - 1996)\n    \n    # Age of daughter when she was born (0 years old)\n    age_daughter_when_born = 40 - (1996 - year_daughter_40)\n    \n    # Age of grandmother when her daughter was born\n    grandmother_age_when_daughter_born = age_grandmother_in_1996 - age_daughter_when_born\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # A can pass the ball to B, C, or D, three options for the first pass\n    first_pass_options = 3\n    \n    # After the first pass, the receiver has 2 options to pass the ball (not back to A and not to themselves)\n    second_pass_options = 2\n    \n    # After the second pass, the receiver can only pass the ball back to A to complete the scenario\n    third_pass_options = 1\n\n    # Total methods = options for first pass * options for second pass * options for third pass\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1.0\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Amount of salt in Leroy's solution\n    leroy_salt = 200 * 0.35\n    \n    # Amount of salt in Lenny's solution\n    lenny_salt = 300 * 0.50\n    \n    # Total amount of salt\n    total_salt = leroy_salt + lenny_salt\n    \n    # Total amount of solution\n    total_solution = 200 + 300\n    \n    # Concentration of the resulting solution\n    concentration = (total_salt / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, valeria = symbols('mike valeria')\n    \n    # Equation for total candy\n    equation1 = Eq(mike + valeria, 36)\n    \n    # Equation after eating the same amount\n    equation2 = Eq(mike - valeria, 6 - 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike, valeria))\n    \n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_percent = 0.35\n    sugar_weight = total_weight * sugar_percent\n    water_weight = total_weight - sugar_weight\n    \n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Calculate 12 to the power of 50\n    left_side = 12**50\n\n    # Since we need k^75 < 12^50,\n    # We can take the 75th root of 12^50 to find k\n    k = left_side ** (1/75)\n\n    # The largest whole number k would then be the floor of this result\n    ans = int(k) - 1 if k % 1 == 0 else int(k)\n\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_count = 133\n    thrown_away = 34\n    bought = 25\n\n    initial_count = final_count - bought + thrown_away\n\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    temp_result = psi_operation(14, 13)\n    ans = psi_operation(temp_result, 12)\n\n    return ans\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n    # Total permutations without any restriction is 8!\n    total_permutations = math.factorial(8)\n\n    # When A and B are always together, we can consider them as a single entity AB.\n    # So, we have 7 entities to arrange, which is 7! permutations.\n    together_permutations = math.factorial(7) * 2 # AB can be BA as well.\n\n    # When C and D are always together, we have 7 entities (considering CD as one)\n    # But we need to subtract the scenarios where they are together\n    # This is an application of the inclusion-exclusion principle\n    together_cd_permutations = math.factorial(7) * 2  # CD can also be DC.\n\n    # To calculate cases where C and D are never together,\n    # we subtract cases where they are together from the total permutations\n    never_together_cd_permutations = total_permutations - together_cd_permutations\n\n    # Finally, we combine the restrictions:\n    # When A and B are together, but C and D are not, we multiply the possible \n    # permutations of A and B together with the permutations of C and D never together\n    restricted_permutations = together_permutations * (never_together_cd_permutations / total_permutations)\n\n    return int(restricted_permutations)\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Define the number of legs each animal has\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Calculate the total number of legs for the cats, dogs, and rabbit\n    total_legs_without_birds = (2 * legs_per_cat) + (2 * legs_per_dog) + (1 * legs_per_rabbit)\n\n    # Calculate the remaining legs that must belong to the birds\n    remaining_legs_for_birds = 28 - total_legs_without_birds\n\n    # Divide the remaining legs by the number of legs per bird to find the number of birds\n    num_birds = remaining_legs_for_birds // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # It takes 5 people 6 hours to paint the fence\n    people = 5\n    hours = 6\n\n    # Total man-hours required to paint the initial fence\n    initial_man_hours = people * hours\n\n    # Neighbour's fence is twice as long, so it requires twice the man-hours\n    required_man_hours = 2 * initial_man_hours\n\n    # She wants it done in less than 5 hours, so we calculate for 4 hours\n    max_hours = 5\n    people_required = required_man_hours / (max_hours - 1)\n\n    # Return the ceiling of the number of people (since we can't have a fraction of a person)\n    from math import ceil\n    return ceil(people_required)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    minutes_per_floor = 12 / 4\n    num_floors_in_30_minutes = 30 / minutes_per_floor\n    return int(num_floors_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_given_butter = cookies_per_gram * 21.6\n    return cookies_with_given_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int('12345654321', 8)\n    # Calculate the remainders of N divided by 7 and by 9\n    remainder7 = N % 7\n    remainder9 = N % 9\n    # Sum the two remainders\n    ans = remainder7 + remainder9\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    handbag, wallet, belt = symbols('handbag wallet belt')\n\n    # Equations based on the problem statement\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    # Return the value spent on the belt\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    # Each cat ages 3 years until the present, and will age 4 more years in the future\n    # so we add (3+4) years for each cat\n    combined_age_in_four_years = combined_age_three_years_ago + 2 * (3 + 4)\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (1/6)*n*(n+1)*(n+2)\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy.ntheory import factorint\n\n    # Factorize 2016 into its prime factors\n    factors = factorint(2016)\n    \n    # Calculate the number of divisors that are perfect squares\n    num_divisors_square = 1\n    for exponent in factors.values():\n        # Add 1 to exponent, divide by 2 and floor it to get number of even powers\n        num_divisors_square *= (exponent // 2) + 1\n\n    return num_divisors_square\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Since they are consecutive, we can represent them as n, n+1, and n+2\n    # Their sum is 60, so we get the equation n + (n+1) + (n+2) = 60\n    # Simplify the equation to 3n + 3 = 60\n    # Solve for n: 3n = 60 - 3\n    n = (60 - 3) // 3\n\n    # The largest number is n+2\n    largest_number = n + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Create a symbol for x\n    x = symbols('x')\n    \n    # Define the equation\n    equation = 7*x - 3*x + 2 - 22\n    \n    # Solve the equation\n    ans = solve(equation, x)\n    \n    # Extract the solution\n    return ans[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the volume of big pail (b) and small pail (s)\n    b, s = symbols('b s')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(3 * b + 4 * s, 68)\n    equation2 = Eq(4 * b + 2 * s, 64)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, s))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if len({A, B, C, D}) == 4:  # all digits are different\n                        if 101 * A + 10 * B + 101 * C + 10 * D == 726:\n                            return A + B + C + D\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # equation representing the total for 2 books and 3 magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # equation representing the total for 1 book and 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # solving the equations to find the cost of 1 book and 1 magazine\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # The worst case scenario is when Annabella takes out every shirt that is not yellow,\n    # so she will take each orange, pink and brown shirt before she gets to a yellow one.\n\n    # Number of orange shirts\n    orange = 6\n    # Number of pink shirts\n    pink = 4\n    # Number of brown shirts\n    brown = 12\n\n    # The total number of shirts to take out to be sure to get a yellow one is\n    # the sum of all other shirts plus one (for the yellow shirt).\n    total_shirts_to_take_out = orange + pink + brown + 1\n\n    # Returning the result.\n    return total_shirts_to_take_out\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "import math\n\ndef solution():\n    total_pens_needed = 70 * 3\n    packs_needed = math.ceil(total_pens_needed / 8)\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    ans = 9.8 + 99.8 + 199.8 + 2999.8 + 39999.8 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Given sequence: 94, ?, 80, 73, 66\n    # Calculate differences between known terms\n    difference_1 = 80 - 73  # Difference between third and fourth term\n    difference_2 = 73 - 66  # Difference between fourth and fifth term\n    \n    # Assuming uniform second differences, find the second difference\n    second_difference = difference_2 - difference_1  # Getting second difference\n    \n    # Calculate first difference (between second and third term)\n    difference_0 = difference_1 + second_difference\n    \n    # Find the missing term (second term)\n    missing_term = 80 + difference_0\n    \n    return missing_term\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The given problem can be written in the following modular congruences:\n    # age ≡ 1 (mod 2)\n    # age ≡ 1 (mod 3)\n    # age ≡ 1 (mod 4)\n    # age ≡ 1 (mod 6)\n    # age ≡ 0 (mod 7)\n    # We convert them into congruences as required by the solve_congruence function\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Using Chinese Remainder Theorem to get the least positive solution\n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_back = total_people - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of powers of 2 follows a cycle: 2, 4, 8, 6\n    # Thus, the pattern repeats every 4 cycles\n    \n    # Calculate the position in the cycle for the 859433rd power of 2\n    cycle_position = 859433 % 4\n    \n    # If the cycle_position is 0, this means we are at the end of the cycle (last digit is 6)\n    # Otherwise, we'll use the cycle_position to get the last digit from the cycle\n    cycle = [6, 2, 4, 8]\n    \n    # Calculate last digit\n    last_digit = cycle[cycle_position - 1]\n    \n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    multiple_of_3 = set(range(3, 61, 3))\n    multiple_of_5 = set(range(5, 61, 5))\n    turned_around_once = multiple_of_3.symmetric_difference(multiple_of_5)\n    not_turned_around = 60 - len(turned_around_once)\n    return not_turned_around\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a, p, l = symbols('a p l')\n\n    # Given ratios\n    ratio_avocados_to_peaches_to_lemons = Eq(a/p, 2/9)\n    ratio_peaches_to_lemons_after_selling = Eq((p-12)/(l-60), 6/5)\n\n    # Since the ratios of avocados to lemons stay the same, we have:\n    ratio_avocados_to_lemons = Eq(a/l, 2/8)\n\n    # Equations based on the remaining fruit after selling\n    remaining_avocados = Eq(a - 52)\n    remaining_peaches = Eq(p - 12)\n    remaining_lemons = Eq(l - 60)\n\n    # Solve the system of equations\n    solutions = solve((ratio_avocados_to_peaches_to_lemons, ratio_avocados_to_lemons, \n                       ratio_peaches_to_lemons_after_selling), (a, p, l))\n\n    # Calculate the total number of fruits left by summing the remaining quantities\n    total_fruits_left = solutions[a] - 52 + solutions[p] - 12 + solutions[l] - 60\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let jess_sweets be the number of sweets Jess has initially\n    # Let jill_sweets be the number of sweets Jill has initially\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n    \n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n    \n    # After Jill gives eight sweets to Jess\n    # Jill now has (jill_sweets - 8) sweets\n    # Jess now has (jess_sweets + 8) sweets\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n    \n    # Calculate the total number of sweets\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n    \n    return total_sweets.evalf()\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    max_number = 0\n    # Check all permutations of the digits 1 to 7\n    for i in range(1, 8):\n        for perm in permutations(range(1, 8), i):\n            num = int(''.join(map(str, perm)))\n            # Check if the number is divisible by all its digits\n            if all(num % p == 0 for p in perm):\n                max_number = max(max_number, num)\n    return max_number\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a, b, c be the weights of Adam, Ben, and Carl respectively.\n    # We have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    \n    # Adding all the equations, we get:\n    # 2a + 2b + 2c = 102 + 97 + 93\n    # Dividing both sides by 2 to get the total weight.\n    total_weight = (102 + 97 + 93) // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import symbols, lcm, solve\n\n    # Define the variable for Peter's age\n    peter_age = symbols('peter_age')\n    \n    # Calculate the least common multiple of 2, 4, and 6\n    lcm_2_4_6 = lcm(2, 4, 6)\n    \n    # Set up the equation based on the problem statement\n    equations = [\n        (peter_age % 2 == 1),\n        (peter_age % 4 == 1),\n        (peter_age % 6 == 1),\n        (peter_age % 7 == 5)\n    ]\n    \n    # Since the remainders upon dividing by 2, 4 and 6 are the same,\n    # Peter's age must be 1 more than a multiple of the LCM of 2, 4, and 6.\n    # We start checking from lcm_2_4_6 + 1 and continue in steps of lcm_2_4_6\n    # until we find a number which also leaves a remainder of 5 when divided by 7.\n    age = lcm_2_4_6 + 1\n    while age % 7 != 5:\n        age += lcm_2_4_6\n\n    return age\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    number = 120 + 1  # Start checking from number just above 120\n    while True:\n        if number % 53 == 2:  # Check remainder when divided by 53\n            return number\n        number += 1  # Increment number and check again\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    # We check for the maximum length of consecutive odd numbers that sum up to 900.\n    # An arithmetic sequence of odd numbers has a common difference of 2.\n    # Let the first term be a, and the number of terms be n.\n    # The sum of the sequence can be found by the formula: S = n/2 * (2a + (n-1)d),\n    # where d is the common difference.\n    # So the sum can be simplified for odd numbers (d=2) to: S = n/2 * (2a + 2n - 2),\n    # and further simplified to: S = n * (a + n - 1)\n    # Since S is given to be 900, we have: n * (a + n - 1) = 900\n\n    max_length = 0\n    for n in range(1, int(900**0.5)+1):  # n cannot exceed the square root of 900\n        # Since n*(a + n - 1) = 900, we rewrite it as:\n        # a = (900/n) - n + 1\n        # a has to be a positive integer, so 900/n should be an integer and greater than n\n        if 900 % n == 0:\n            a = (900 // n) - n + 1\n            if a > 0 and a % 2 == 1:  # a has to be a positive odd number\n                max_length = max(max_length, n)\n                \n    return max_length\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_number = min(numbers)\n    return smallest_number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm_to_m = 2 / 100\n\n    ans = height_m + height_cm_to_m\n    return ans\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * (1 + 25/100)\n    third_test_score = second_test_score * (1 - 20/100)\n    \n    total_score = first_test_score + second_test_score + third_test_score\n    \n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    interest_rate = 0.03\n    years = 2\n\n    amount = principal * ((1 + interest_rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    \n    mean_savings = (january_savings + february_savings + march_savings) / 3\n    \n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = \"{:02d}{:02d}\".format(hour, minute)\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(7, 106, 7))\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n    prime_numbers = list(primerange(130, 151))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else (56 // 4) + 1\n    last_multiple = 92 // 4\n    num_multiples = last_multiple - first_multiple + 1  # +1 because the range is inclusive\n\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Speed of the ship in still water\n    speed_ship = 15 # in km/h\n    \n    # Distance between Magic Town and Super Town\n    distance = 144 # in km\n    \n    # Time taken to travel downstream\n    time_downstream = 8 # in hours\n    \n    # Speed of the current\n    # Using the downstream time to find the actual downstream speed\n    speed_downstream = distance / time_downstream\n    \n    # Now, we find the speed of the current by subtracting the speed of the ship in still water from the downstream speed\n    speed_current = speed_downstream - speed_ship\n    \n    # Speed of the ship when it travels upstream (against the current)\n    speed_upstream = speed_ship - speed_current\n    \n    # Time taken to travel upstream\n    time_upstream = distance / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    number_of_students = 15\n    number_to_select = 2\n    return comb(number_of_students, number_to_select)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hippo, kangaroo = symbols('hippo kangaroo')\n    \n    equation1 = Eq(hippo, kangaroo + 45)\n    equation2 = Eq(20 * hippo, 10 * (20 * kangaroo))\n    \n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n    \n    return solutions[hippo] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_waited_at = datetime.strptime(\"3:15 PM\", \"%I:%M %p\")\n    meet_time = john_waited_at + wait_time\n    return meet_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Setting up the congruences based on the problem statement\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n    ]\n\n    # Using Chinese Remainder Theorem to find the smallest number\n    ans = solve_congruence(*congruences)\n\n    # Return the minimum positive solution\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            ans += i/j\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rate of worker A and B\n    rate_a = 1 / 15\n    rate_b = 1 / 20\n    \n    # Combined work for 2 days\n    combined_work = 2 * (rate_a + rate_b)\n    \n    # Remaining work\n    remaining_work = 1 - combined_work\n\n    # Number of days for worker A to finish the remaining work\n    days_a = remaining_work / rate_a\n\n    return days_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure that you have at least two balls of the same colour,\n    # you might end up picking each color once before getting a pair.\n    # Therefore, you must take 1 green + 1 blue + 1 more ball to ensure a pair.\n    num_balls = 1 + 1 + 1\n    return num_balls\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # We have 12 zodiac signs (the \"pigeonholes\")\n    # To guarantee that there are at least 11 students who share the same zodiac sign,\n    # we have to take the worst case scenario where each of the 12 zodiac signs has \n    # 10 students (which is just below our target of 11). This gives us 12*10 students.\n    # We then add one more student to ensure that this 13th student will result in\n    # at least one zodiac sign having 11 students.\n    num_zodiac_signs = 12\n    students_per_sign_to_guarantee_10 = 10\n\n    # Calculate the minimum number of students needed\n    min_students_needed = num_zodiac_signs * students_per_sign_to_guarantee_10 + 1\n\n    return min_students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(6):\n        # Conditions for F and G not to stand together\n        if perm[i] == 'F' and perm[i + 1] == 'G': return 0\n        if perm[i] == 'G' and perm[i + 1] == 'F': return 0\n\n    # Conditions for A to stand between B and C (not necessarily next to each other)\n    B_index = perm.index('B')\n    C_index = perm.index('C')\n    A_index = perm.index('A')\n    if not (B_index < A_index < C_index or C_index < A_index < B_index): return 0\n\n    # Conditions for D and E to stand together\n    D_index = perm.index('D')\n    E_index = perm.index('E')\n    if abs(D_index - E_index) != 1: return 0\n\n    return 1\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    count = 0\n    for perm in permutations(students):\n        count += count_valid_permutations(perm)\n    \n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using the Pigeonhole Principle in the worst case scenario:\n    # One must consider taking out the maximum number of balls from each color category \n    # without reaching a count of 10 for any. Once we have taken one less than 10 from all color categories, \n    # the next ball must guarantee us 10 of the same color.\n\n    # Maximum balls that can be taken out without guaranteeing 10 of the same color:\n    # 9 yellow + 9 white + 9 black = 27\n    \n    # The least number of balls she has to take out to ensure 10 of the same color\n    # is one more than 27, to satisfy the Pigeonhole Principle:\n\n    balls_needed = 27 + 1  # The next ball after 27 guarantees 10 of the same color\n\n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n    return last_child if last_child != 0 else total_children  # Adjust for 0 index\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a1 + an)\n    # where S_n is the sum of n terms, a1 is the first term, and an is the nth term.\n    # an is computed with the formula a1 + (n-1)d, where d is the common difference.\n    \n    nth_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = num_terms / 2 * (first_term + nth_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    days_for_spaghetti = 7\n    days_for_apple_pie = 3\n    least_common_multiple = lcm(days_for_spaghetti, days_for_apple_pie)\n\n    return least_common_multiple\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    min_both = (children_with_dogs + children_with_cats) - total_children\n\n    return min_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming it's an arithmetic sequence with unknown terms\n    # Number of terms (n), first term (a1), last term (an), and sum (S) are unknown\n    \n    # The formula to find the sum of an arithmetic sequence is S = n/2 * (a1 + an)\n    # Since the question does not specify the sequence, we can't compute it.\n    # Let's assume it's from the previous example which was 2 to 240 with a difference of 2\n\n    first_term = 2\n    last_term = 240\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of arithmetic sequence formula\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    shirts, skirts = symbols('shirts skirts')\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3)*shirts + (5/6)*skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    number_of_months = 3\n    total_saving = monthly_saving * number_of_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance to the place\n    distance = 120\n    # Speed going to the place\n    speed_to = 20\n    # Expected average round trip speed\n    average_speed = 30\n    \n    # Time taken to go to the place\n    time_to = distance / speed_to\n    \n    # Total round trip distance\n    total_distance = 2 * distance\n    # Total time for the round trip at the expected average speed\n    total_time = total_distance / average_speed\n    \n    # Time taken to return is total time minus time to go to the place\n    time_back = total_time - time_to\n    # The speed to return is the distance divided by the time to return\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Represent the problem's conditions with congruences\n    # biscuit_count % 5 = 1\n    # biscuit_count % 6 = 2\n    # biscuit_count % 11 = 7\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Use Chinese Remainder Theorem to solve the congruences\n    biscuit_count, _ = solve_congruence(*congruences)\n\n    # Since we want a packet size between 400 and 800, we loop through\n    # multiples of the least common multiple until we find the correct count.\n    lcm = 5 * 6 * 11  # because 5, 6, and 11 are pairwise coprime\n    while not (400 <= biscuit_count <= 800):\n        biscuit_count += lcm\n\n    return biscuit_count\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    \n    total_ratio = nell_ratio + joe_ratio\n    nell_sweets = 24\n    \n    total_sweets = (nell_sweets * total_ratio) // nell_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 35):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make a single cut, dividing a rod into two pieces.\n    # To divide the rod into 5 pieces, 4 cuts are required, because each cut creates one additional piece.\n    number_of_cuts_needed = 5 - 1\n    time_per_cut = 2  # in minutes\n    total_time = number_of_cuts_needed * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # Given that the average of three numbers is 120\n    initial_average = 120\n    new_average = 110\n    number_of_initial_numbers = 3\n\n    # Calculate the total sum of the initial three numbers\n    initial_sum = initial_average * number_of_initial_numbers\n\n    # In order to find the new average, we need the total sum with the new number\n    new_number_of_numbers = number_of_initial_numbers + 1  # One number is added\n    new_total = new_average * new_number_of_numbers\n\n    # The number that must be added is the difference between the new total and the old total\n    number_to_add = new_total - initial_sum\n\n    return number_to_add\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(0, 10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay_for_one_horse = 12 * 15  # Total hay quantity required for one horse\n    days_for_20_horses = total_hay_for_one_horse / 20\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    a, b, c = 6, 9, 12\n    g = gcd(a, b)\n    ans = gcd(g, c)\n    return ans\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)  # Jovan has twice as many marbles as Sean\n    equation2 = Eq(heman, 3 * jovan)  # Heman has 3 times as many marbles as Jovan\n    equation3 = Eq(jovan, heman - 240)  # Jovan has 240 fewer marbles than Herman\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    # Calculate the total number of marbles for Sean, Jovan, and Heman\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each person's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(john + andy, 105)      # Total mass of John and Andy\n    equation2 = Eq(charles + john, 67)    # Total mass of Charles and John\n    equation3 = Eq(andy, 3 * charles)     # Andy's mass is 3 times Charles's mass\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900  # Total length of the expressway in meters\n    days = 5  # Time taken by 4 companies to build the expressway\n    companies = 4  # Number of construction companies\n\n    # Calculate length built by one company in one day\n    length_per_company_per_day = total_length / (companies * days)\n    \n    return length_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    price_shoes = 78\n    price_socks = 12\n    aliens = 1 + 5  # the alien himself and his 5 brothers\n    legs_each_alien = 5\n    \n    total_legs = aliens * legs_each_alien\n    total_cost_shoes = total_legs * price_shoes\n    total_cost_socks = total_legs * price_socks\n\n    total_cost = total_cost_shoes + total_cost_socks\n    \n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from sympy import binomial\n    # Considering we can have a combination of oranges with indistinguishable items\n    # where each kid is treated as an indistinguishable container, we can use the\n    # \"stars and bars\" method to find the number of ways to distribute k indistinguishable items\n    # into n distinguishable containers, which can be calculated by binomial(k+n-1, n-1).\n    \n    oranges = 13\n    kids = 3\n    \n    # Apply the stars and bars formula\n    ans = binomial(oranges + kids - 1, kids - 1)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        modified = original[-1] + original[1:3] + original[0]\n        if int(modified) - int(original) == 5877:\n            return int(original)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    # Define the number of 0.50 cookies as c and 0.10 cookies as t\n    from sympy import symbols, Eq, solve\n\n    c, t = symbols('c t')\n\n    # David's cookies were thrice as much as Jeremy's cookies\n    david_cookies_cost = 0.50 * c\n\n    # Jeremy had 3/5 as many 0.50 cookies as 0.10 cookies\n    jeremy_cookies_50 = (3/5) * t\n\n    # The cost of Jeremy's cookies\n    jeremy_cookies_cost = 0.50 * jeremy_cookies_50\n\n    # There were 60 fewer 0.10 cookies than 0.50 cookies\n    equation1 = Eq(t + 60, c)\n\n    # David had only 0.50 cookies\n    equation2 = Eq(david_cookies_cost, jeremy_cookies_cost * 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (c, t))\n\n    # David had only 0.50 cent cookies, meaning he had 1 such cookie\n    david_cookies_number = 1\n\n    # Therefore, Jeremy had 3/5 as many 0.50 cent cookies as 0.10 cent cookies\n    jeremy_cookies_50 = (3/5) * solutions[t]\n\n    # Calculate the value of Jeremy's cookies\n    jeremy_cookies_value = 0.50 * jeremy_cookies_50\n\n    return jeremy_cookies_value\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    two_card_combinations = list(combinations(numbers, 2))\n    three_card_combinations = list(combinations(numbers, 3))\n\n    products_two = {a * b for a, b in two_card_combinations}\n    products_three = {a * b * c for a, b, c in three_card_combinations}\n\n    common_product = products_two.intersection(products_three).pop()\n    picked_numbers = set()\n\n    for combo in two_card_combinations:\n        if combo[0] * combo[1] == common_product:\n            picked_numbers.update(combo)\n\n    for combo in three_card_combinations:\n        if combo[0] * combo[1] * combo[2] == common_product:\n            picked_numbers.update(combo)\n\n    not_picked_number = set(numbers) - picked_numbers\n\n    return not_picked_number.pop()\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [total for total in possible_totals if (total - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between first and fifth tree is the same as four intervals\n    interval = 20 / (5 - 1)  # There are 4 intervals between 5 trees\n    # Since the trees are planted at regular intervals, find the number of intervals in 200m\n    # Plus 1 because we count the first tree which is not an interval\n    num_trees = (200 / interval) + 1\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_B = 1 / 8   # Tap B fills the tank in 8 minutes\n\n    combined_rate = rate_A + rate_B  # Rate at which both taps fill the tank together\n\n    time_to_fill_half = (1/2) / combined_rate  # Time to fill half of the tank\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Perform the operations step by step according to the given sequence\n    step1 = (36 * 21) / (6 * 7)\n    step2 = 36 * 21 / 6 * 7\n    step3 = (36 / 6) * 21 * 7\n    step4 = 6 * 7 * 21\n\n    # Check where the mistake happened\n    if step1 != step2:\n        circle = \"2nd step\"\n    elif step2 != step3:\n        circle = \"3rd step\"\n    elif step3 != step4:\n        circle = \"4th step\"\n    else:\n        circle = \"correct\"\n\n    # Circle out the mistake and provide the correct answer\n    if circle != \"correct\":\n        correct_answer = step1\n    else:\n        correct_answer = step4\n\n    return circle, correct_answer\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    apples = (5 / 8) * total_fruit\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    # Let the side of the initial square formed by the boys be x\n    # After adding the girls, the side becomes (x + 1)\n    # Hence the number of boys is x^2\n    # And the total number of students after adding the girls is (x + 1)^2\n    # From the question, the girls form an extra row and a column, i.e., 2x + 1 = 17\n    # Therefore we have the equation 2x + 1 = girls\n    boys_side = (girls - 1) // 2\n    boys = boys_side ** 2\n\n    return boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person in the queue\n    position_ann = 8\n    # There are 3 people between Ann and David\n    people_between = 3\n    # David is the second last person, so there's 1 person behind David\n    people_behind_david = 1\n    # To get David's position, we add Ann's position, people between them, and 1 (for David himself)\n    position_david = position_ann + people_between + 1\n    # The total number of people in the queue is David's position plus the people behind David\n    total_people = position_david + people_behind_david\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    pages = 0\n    occurrences_of_8 = 0\n    \n    while occurrences_of_8 < 22:\n        pages += 1\n        occurrences_of_8 += str(pages).count('8')\n        \n    return pages\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (9 / 12) * 8\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure one color has 29 balls,\n    # we need to consider the worst case scenario where we pick the most without getting 29 of one color.\n    # We can pick all 30 white balls, then we can pick 28 red balls and 28 blue balls to make sure we don't have 29 of them.\n    # So we have 30 (white) + 28 (red) + 28 (blue) = 86 balls picked without having 29 of one color.\n    # To ensure we have 29 of at least one color, we need to pick one more ball.\n    # Therefore, the minimum number of balls we need to pick is 86 + 1 = 87.\n    \n    # In addition, one more ball could ensure we have 28 of another color.\n    # After that, we're guaranteed to pick 10 balls of the last color until we run out one of the first two colors.\n    # So it is 87 + 1 (to guarantee the second color) + 9 (to guarantee the third color) in total.\n\n    min_balls = 87 + 1 + 9\n\n    return min_balls\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal_amount = 800\n    annual_interest_rate = 0.08\n    time_in_years = 3\n\n    simple_interest = principal_amount * annual_interest_rate * time_in_years\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n    height_difference = height_mountain_world - height_mountain_england\n    return height_difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n    \nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Alicia spent 1/2 of her money, so she has 1/2 left\n    # Beth spent $60, so beth - 60\n    # Casey spent 3 times as much money as Alicia did, so casey - 3 * alicia / 2\n    # They all had the same amount of money left, so: alicia / 2 = beth - 60 = casey - 3 * alicia / 2\n    # They had $900 altogether at first: alicia + beth + casey = 900\n\n    equation1 = Eq(alicia / 2, beth - 60)\n    equation2 = Eq(alicia / 2, casey - 3 * alicia / 2)\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    ans = 0  # The last digit of a factorial greater than 4! is always 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2 * 2 * 3 * 8 * 5 * 5 * 5\n    zero_count = 0\n    \n    while product % 10 == 0:\n        zero_count += 1\n        product //= 10\n    \n    return zero_count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    target_numerator = 30\n    \n    target_denominator = denominator / numerator * target_numerator\n    return int(target_denominator)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    final_answer = 1\n    add_back_8 = final_answer + 8\n    multiply_by_8 = add_back_8 * 8\n    divide_by_3 = multiply_by_8 / 3\n    original_number = divide_by_3 - 6\n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n    solution = solve(equation, original_number)\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Total sum of the arithmetic sequence\n    total_cookies = 100\n    # Number of terms in the sequence\n    n = 5\n    # Common difference of the arithmetic sequence\n    d = 6\n    # Using the sum of an arithmetic sequence formula: S_n = n/2 * (2a + (n - 1)d)\n    # Here, S_n = total_cookies, d = 6, n = 5 and we need to find the first term a\n    # 100 = 5/2 * (2a + (5 - 1)*6)\n    # 100 = 5/2 * (2a + 24)\n    # 40 = 2a + 24\n    # 2a = 16\n    # a = 8\n    a = (total_cookies - (n * (n - 1) / 2 * d)) / n\n    return int(a)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0 and is_prime(num + 1):\n            return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for each student\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    # Cayden completed 6 more questions than Sicheng\n    equation1 = Eq(cayden, sicheng + 6)\n    \n    # Yixuan completed 2 times as many questions as Cayden\n    equation2 = Eq(yixuan, 2 * cayden)\n    \n    # Yixuan completed 22 more questions than Sicheng\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    # Calculate the total number of questions by summing the solutions\n    total_questions = sum(solutions.values())\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    \n    # There are 4 men and 4 women, we need to line up as MWMWMWMW or WMWMWMWM\n    # First, decide the order for men (4 possible positions, 4 men)\n    men_arrangements = factorial(4)\n    # Then, decide the order for women (4 possible positions, 4 women)\n    women_arrangements = factorial(4)\n    \n    # Finally, there are two ways to arrange: starting with a man or starting with a woman\n    total_ways = men_arrangements * women_arrangements * 2\n    \n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    word = \"HAPPY\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    return ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_pack_mya = cost_per_roll_mya * 3\n    return cost_pack_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ashley, crystal, justin = symbols('ashley crystal justin')\n    \n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n    \n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    # Let x be the total number of children in the class\n    # Since 2/5 of the class are boys, then 3/5 of the class are girls\n    # If there are 12 girls, that represents 3/5 of the class\n    # Therefore, x * (3/5) = 12\n    # Solving for x gives x = 12 / (3/5) = 12 * (5/3) = 20\n    # The total number of children in the class is 20\n    # Hence, the number of boys, which is 2/5 of the total, will be 20 * (2/5)\n    total_children = 12 * (5/3)\n    boys = total_children * (2/5)\n    \n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    num = 96\n    factors_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # Peter and John themselves\n\n    total_people = people_in_front_of_peter + people_behind_john + peter_and_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12 # since the time is 12 no need to specify AM or PM\n    flight_duration = 4\n    time_difference = 3 # St Petersburg is 3 hours ahead of England\n\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    withdrawal_amount = 870\n    annual_interest_rate = 0.09\n    number_of_years = 5\n\n    present_value = withdrawal_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return present_value\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    # Starting from 90 to 10 because we are looking for a two-digit number NO\n    # and we want to find the largest possible valid number based on the constraints given.\n    for NO in range(90, 9, -1):\n        # Convert NO to a string to check each digit\n        str_NO = str(NO)\n        # Check if N and O are different digits\n        if str_NO[0] != str_NO[1]:\n            # Check if it satisfies the condition that all digits (1 to 9) are different\n            digits = set(str_NO)\n            if len(digits) == len(str_NO):\n                return NO  # Return the first two-digit number found that satisfies the condition\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(25, 51):\n        if i % 2 == 0:\n            ans -= i\n        else:\n            ans += i\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    socks_to_pick = 4 + 1  # One more than the number of colors to ensure a pair\n    return socks_to_pick\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000  # 1 kg = 1000 grams\n    kg_amount = 2.5\n    grams_amount = kg_amount * kg_to_grams\n    return grams_amount\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let's find the number of boys\n    total_children = total_sweets // (fraction_boys * sweets_per_boy + (1 - fraction_boys) * sweets_per_girl)\n    boys = total_children * fraction_boys\n    girls = total_children - boys\n\n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km on the ground is represented by 5 cm on the map.\n    distance_on_map_cm = 12  # distance between two villages on the map in cm.\n    \n    # Convert map distance to ground distance using the scale ratio\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n    \n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(102-i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    number = 0\n    while True:\n        if number % 7 == 5 and number % 8 == 6 and number % 10 == 6:\n            quotient_sum = number // 6 + number // 7 + number // 8\n            if quotient_sum == 265:\n                return number\n        number += 1\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    time_seconds = 24\n    speed_mps = speed_kmh * (1000 / 3600)  # Convert speed from km/h to m/s\n    distance_meters = speed_mps * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # 1 is neither prime nor composite, so the statement needs clarification.\n    # Composite numbers are positive integers greater than one that are not prime.\n    # A more precise statement would be:\n    # \"A positive integer greater than one which is not a prime number is called a composite number.\"\n    is_correct = False\n    return is_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    foreign_language_students = 54\n\n    both_classes = maths_students + foreign_language_students - total_students\n    only_maths = maths_students - both_classes\n\n    return only_maths\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    ans = Fraction(3, 2)\n    for i in range(3, 10):\n        ans *= Fraction(i, i + 1)\n\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Convert percentages to decimal form for calculation: 25% is 0.25\n    equation = Eq((1/3 - 0.25) * x, 36)\n    \n    answer = solve(equation, x)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    if x1 + x2 + x3 + x4 == 12 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    initial = 40309\n    while True:\n        initial += 1\n        if str(initial) == str(initial)[::-1]:\n            return initial - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    sweets_total = 42\n    sweets_kasia = 13\n    sweets_remaining = sweets_total - sweets_kasia\n    # share the remaining sweets between Maya and Lucie\n    sweets_maya_lucie_each = sweets_remaining // 2\n    # Lucie gives 2/7 of her sweets to Joan\n    sweets_lucie_to_joan = (2 / 7) * sweets_maya_lucie_each\n    # Lucie keeps the rest\n    sweets_lucie_keeps = sweets_maya_lucie_each - sweets_lucie_to_joan\n    \n    return int(sweets_lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_diff = 52\n    boys_extra_per_layer = 4\n    layer_diff = 0\n    total_layers = 0\n\n    while layer_diff < total_diff:\n        total_layers += 1\n        layer_diff += boys_extra_per_layer\n\n    side_length = (total_layers * 2) - 1\n    total_students = side_length ** 2\n    \n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    remaining_after_friday = 1 - 1/4  # Spent 1/4, so remains 3/4 of his pension\n    spent_on_saturday = remaining_after_friday * (1/3)  # Spends 1/3 of the remaining on Saturday\n    remaining_after_saturday = remaining_after_friday - spent_on_saturday  # What remains after Saturday night\n\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the total volume of the fish tank.\n    # From the first condition: x - 5 = -4 (4 litres overflow when he uses a 5-litre pail)\n    # From the second condition: x - 3*(1+4) = 0 (He needs another 4 pails after the first 3-litre pail)\n    \n    # We solve the equations:\n    # x = 5 - 4\n    # x = 3*(1+4)\n    \n    total_volume = 3 * (1 + 4)\n    return total_volume\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (ratio_adults * total_people) / total_ratio\n\n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    num_combinations = num_school_bags * num_pencil_boxes\n    return num_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of apples (a) and pears (p)\n    a, p = symbols('a p')\n    \n    # The original ratio of apples to pears - equation 1\n    equation1 = Eq(a/p, 3/4)\n    \n    # After replacing 36 pears with apples - equation 2\n    equation2 = Eq((a + 36)/(p - 36), 1.5)\n\n    # Solve the system of equations\n    result = solve((equation1, equation2), (a, p))\n\n    # We only need the number of apples at first which is 'a'\n    return result[a]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    total_sum = 0\n    sequence_length = len(recurring_sequence)\n    \n    for i in range(212):\n        total_sum += int(recurring_sequence[i % sequence_length])\n        \n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for i in range(1, 100):\n        # Pre-joining number of soldiers forming a square\n        initial_soldiers = i**2\n        # Post-joining number of soldiers \n        new_soldiers = (i+1)**2\n        \n        # If the difference between the post-joining and pre-joining number\n        # of soldiers is 31 then we found the solution.\n        if new_soldiers - initial_soldiers == 31:\n            ans = new_soldiers\n            return ans\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_needed = ginkgo_trees - 1\n    return willow_trees_needed\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 * 50 / 100\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n    while factorial_zeros < 28:\n        n += 1\n        m = n\n        tmp_zeros = 0\n        while m % 5 == 0:\n            tmp_zeros += 1\n            m //= 5\n        factorial_zeros += tmp_zeros\n    \n    return n-1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n = 12\n    total_handshakes = n * (n - 1) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # The worst scenario to get at least two pairs of matching socks is\n    # when Daniel picks one sock of each available color first.\n    # After picking one of each, the next sock he picks must form a pair,\n    # but to ensure two pairs, we need to consider the worst sequence.\n    \n    # Start with picking one of each color:\n    yellow, green, white, red, black = 1, 1, 1, 1, 1\n    \n    # Yellow socks are the most numerous, so they are picked last in the worst case.\n    # Pick the rest of the colors to ensure one pair:\n    green += 1  # 1 pair of green\n    white += 1  # 1 pair of white\n    red += 1    # 1 pair of red\n    \n    # Now one more of any color will guarantee a second pair:\n    # Use yellow as it is the most numerous (worst case scenario).\n    yellow += 1\n    \n    # Sum up all picked socks:\n    total_picked = yellow + green + white + red + black\n    \n    return total_picked\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = (5 * 1.09) + (6 * 0.55)\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define Sam's current age as a variable\n    sam = symbols('sam')\n\n    # Now, formulating the equation based on the problem statement:\n    # In four years, Sam's age will be sam + 4\n    # Four years ago, Sam's age was sam - 4\n    # According to the problem, sam + 4 is twice the age of Sam four years ago (sam - 4)\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    # Solve the equation to find the value of 'sam', which is Sam's current age.\n    solution = solve(equation, sam)\n\n    # Return the solution as an integer\n    return solution[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    vowels_count = 3 # A, I, O\n    consonants_count = 4 # R, N, B, W\n    total_letters = vowels_count + consonants_count\n    \n    # First, find the total number of ways to arrange all the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Then, find the number of ways that all vowels could be together.\n    # Treat all vowels as a single entity and find the arrangements of that entity plus consonants.\n    vowels_as_one = factorial(consonants_count + 1)\n    # Multiply by possible arrangements of vowels among themselves.\n    vowels_as_one *= factorial(vowels_count)\n    \n    # The difference will give us the number of ways where vowels are never together.\n    arrangements_with_vowels_never_together = total_arrangements - vowels_as_one\n    \n    return arrangements_with_vowels_never_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '3728'\n    # generate all permutations of the digits\n    perms = [''.join(p) for p in permutations(digits)]\n    # filter for odd numbers and convert to integers\n    odd_numbers = [int(p) for p in perms if int(p) % 2 != 0]\n    # find the smallest odd number\n    n = min(odd_numbers)\n\n    return n\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Formula to calculate the sum of an arithmetic progression:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is the sum of the first n terms, a is the first term, and d is the common difference.\n    # Given S_10 = 20 and S_30 = 90, we have two equations:\n    # 20 = 10/2 * (2a + (10 - 1)d)\n    # 90 = 30/2 * (2a + (30 - 1)d)\n    # Simplifying these equations gives:\n    # 20 = 5 * (2a + 9d) => 4 = 2a + 9d ------------(1)\n    # 90 = 15 * (2a + 29d) => 6 = 2a + 29d ----------(2)\n    # Now we subtract equation (1) from equation (2) to solve for d:\n    # (6 - 4) = (2a + 29d) - (2a + 9d)\n    # 2 = 20d\n    # d = 2 / 20\n    d = (2 / 20)\n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n\n    stickers_penny = (total_stickers * ratio_penny) / total_ratio\n\n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in km/h\n    time_seconds = 300  # Time in seconds\n\n    speed_m_per_s = (speed_kmh * 1000) / (60 * 60)  # Convert km/h to m/s\n    distance_meters = speed_m_per_s * time_seconds  # Calculate distance in meters\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from fractions import Fraction\n\n    # Jack sold 40 apples which is 4/7 of the apples he brought yesterday\n    fraction_sold = Fraction(4, 7)\n    apples_brought_yesterday = 40 / fraction_sold\n\n    # Yesterday he brought 1/2 of all apples he has\n    fraction_brought = Fraction(1, 2)\n    total_apples = apples_brought_yesterday / fraction_brought\n\n    return total_apples\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    # Ronald McDonald has 40 chickens and goats combined.\n    equation1 = Eq(chickens + goats, 40)\n\n    # 3 times the number of his chickens is 5 times the number of his cows.\n    equation2 = Eq(3 * chickens, 5 * cows)\n\n    # 2 times the number of goats is 10 times the number of his cows.\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Calculate the total number of animal feet:\n    # Chickens have 2 feet, goats have 4 feet, and cows have 4 feet.\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n\n    return total_feet\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # x1 + x2 = first two numbers sum\n    # x3 + x4 = last two numbers sum\n    # x1 + x4 = sum of first and last\n    # We need (x2 + x3) / 2\n\n    # From the problem statement, we can form the following equations:\n    # (x1 + x2) / 2 = 10 ==> x1 + x2 = 20\n    # (x3 + x4) / 2 = 22 ==> x3 + x4 = 44\n    # (x1 + x4) / 2 = 14 ==> x1 + x4 = 28\n\n    # To find x2 + x3, we can sum up x1 + x2 and x3 + x4 and then subtract x1 + x4\n    sum_first_two = 20\n    sum_last_two = 44\n    sum_first_last = 28\n\n    # Find sum of the two middle numbers\n    sum_middle_two = (sum_first_two + sum_last_two) - sum_first_last\n    \n    # Average of the two middle numbers\n    average_middle_two = sum_middle_two / 2\n    \n    return average_middle_two\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    numbers = [200, 202, 204, 206, 208]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    target = 2978\n    min_diff = float('inf')\n    closest_num = None\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(target - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    # The maximum number of regions formed by n lines can be found by the formula\n    # regions = n*(n-1)/2 + 1\n    # To find the answer inductively for 10 lines, we need to add the new parts formed by adding each new line\n    regions = 1  # The plane itself with no lines\n    for i in range(1, lines + 1):\n        regions += i\n        \n    return regions\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    # First term of the arithmetic sequence is the number of seats in the first row\n    first_term = 48\n    # Difference between the terms of the sequence is 4 (as every row has 4 more seats than the row in front)\n    difference = 4\n    # Last term of the arithmetic sequence is the number of seats in the last row\n    last_term = 80\n    \n    # Using the formula for finding the number of terms in an arithmetic sequence: n = (l - a)/d + 1, where\n    # l is the last term, a is the first term, d is the common difference\n    num_terms = (last_term - first_term) // difference + 1\n    \n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a + l), where\n    # S_n is the sum of the n terms, a is the first term, l is the last term, n is the number of terms\n    total_seats = num_terms / 2 * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for num in range(200, 501):\n        if '3' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        if n == 1:\n            break\n    # Find the two 2-digit multiples of 7\n    for i in range(len(prime_factors)):\n        for j in range(i+1, len(prime_factors)):\n            num1 = prime_factors[i] * prime_factors[j]\n            num2 = 7007 // num1\n            if num1 != num2 and 10 <= num1 < 100 and 10 <= num2 < 100:\n                return num1 + num2\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    return (result + 10) / 2\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_and_B_average = 22\n    C = 19\n    \n    # Since the average of A and B is 22, we can calculate the sum of A and B\n    sum_A_and_B = 2 * A_and_B_average\n    \n    # To find the average of A, B, and C, we find the total sum and divide by 3\n    sum_A_and_B_and_C = sum_A_and_B + C\n    average_A_and_B_and_C = sum_A_and_B_and_C / 3\n    \n    return average_A_and_B_and_C\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    \n    days_lived = (death_date - birth_date).days\n    years_lived, days_remainder = divmod(days_lived, 365)\n    ans = years_lived\n    # Check if the last year was a leap year and she lived beyond February 28\n    if death_date.year % 4 == 0 and (death_date.month, death_date.day) > (2, 28):\n        ans -= 1  # Adjust the age because she didn't live throughout the leap day in her last year\n    \n    return ans\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # The pigeonhole principle states that if n items are put into m containers, \n    # with n > m, then at least one container must contain more than n / m items.\n    max_cakes_in_a_layer = (total_cakes + layers - 1) // layers\n\n    return max_cakes_in_a_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    # Largest square side will be the largest integer less than the square root of 23 (since the side must be an integer)\n    import math\n    max_square_side = int(math.sqrt(23))\n    \n    # Calculate the area of the largest possible square\n    max_square_area = max_square_side ** 2\n    \n    # Calculate the length of the rope that must be cut\n    rope_to_cut = 23 - max_square_area\n    \n    return rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = (21 + 1) * 7\n    part2 = 20 + (1 * 7)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        value = (2018 + i) / 5\n        frac_part = value - int(value)\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    first_term = 11\n    num_terms = 10\n    total_cookies = 425\n\n    # Formula to calculate the sum of an arithmetic sequence: \n    # total = (n/2) * (2*a + (n - 1)*d)\n    # where a is the first term, n is the number of terms, and d is the common difference\n    # We solve for the common difference 'd' here\n\n    # Rearranging the formula to get the expression for 'd'\n    # 2*total = n*(2*a + (n - 1)*d)\n    # (2*total)/n - 2*a = (n - 1)*d\n    # d = ((2*total)/n - 2*a) / (n - 1)\n\n    common_difference = ((2 * total_cookies) / num_terms - 2 * first_term) / (num_terms - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let C, E, and M be the total ages for Chinese, English, and Mathematics teachers respectively\n    # Given that the average age for Chinese and English teachers is 34, we have (C + E) / 2 = 34 -> C + E = 68\n    # Given that the average age for English and Mathematics teachers is 36, we have (E + M) / 2 = 36 -> E + M = 72\n    # Given that the average age for Chinese and Mathematics teachers is 44, we have (C + M) / 2 = 44 -> C + M = 88\n    \n    # Using the Inclusion-Exclusion Principle, we can find the total combined age of the teachers:\n    # Total combined age T = C + E + M - (average age of the trio)\n    # We know that 2T = C + E + E + M + C + M (since each pair's sum is counted twice)\n    # So we have 2T = (C + E) + (E + M) + (C + M)\n    # Plugging in the values gives us 2T = 68 + 72 + 88\n    \n    total_combined = 68 + 72 + 88\n    T = total_combined / 2  # Since we need to divide by 2 to get the actual total\n    \n    # The average age of the three subject teachers is then T / 3\n    average_age = T / 3\n    \n    return average_age\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # If the sum of seven consecutive odd numbers is 357,\n    # then the average of these numbers is 357 / 7.\n    average = 357 // 7\n\n    # The average of an odd number of consecutive odd numbers\n    # is always an odd number which is the middle number in the sequence.\n    # The smallest number will be three steps away from the average (middle number)\n    # since the sequence contains 7 numbers and the average is in the middle.\n    smallest_number = average - (3 * 2)  # step by 2 since they are consecutive odd numbers\n    \n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repeat_1 = 2  # The digit 1 is repeated twice\n\n    # Calculate the total permutations without considering repetitions\n    total_permutations = factorial(total_digits)\n\n    # Divide total permutations by the factorial of the number of repetitions for the digit 1\n    different_numbers = total_permutations // factorial(repeat_1)\n\n    return different_numbers\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1/i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one chair and one table\n    chair, table = symbols('chair table')\n    \n    # Each table costs $25 more than each chair\n    equation1 = Eq(table, chair + 25)\n    \n    # 5 tables and 12 chairs cost $720\n    equation2 = Eq(5 * table + 12 * chair, 720)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (chair, table))\n    \n    # Return the cost of one table\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all(num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # 2 is the only even prime number\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Let George's time to paint the room alone be g hours\n    # Fred's rate of work is 1/9 room per hour\n    # George's rate of work is 1/g room per hour\n    \n    # Working together, their combined rate is 1/6 room per hour\n    # So combined rate is Fred's rate + George's rate: 1/9 + 1/g = 1/6\n    \n    # Solve for g\n    g = symbols('g')\n    equation = Eq(1/9 + 1/g, 1/6)\n    george_time = solve(equation, g)\n\n    return george_time[0]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    x = symbols('x')\n    original_cloth = 18\n    remaining_cloth = original_cloth - x\n    return remaining_cloth\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Martin and Carter's speeds\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Given ratio of time taken by Martin to Carter\n    time_ratio_martin = 9\n    time_ratio_carter = 13\n\n    # Martin's speed is 20 m/min faster than Carter's speed\n    equation_speed_difference = Eq(martin_speed, carter_speed + 20)\n\n    # Martin's time is shorter in the ratio of 9:13, thus his speed should be greater\n    # in the inverse ratio of time, i.e., 13:9\n    equation_speed_ratio = Eq(martin_speed / carter_speed, time_ratio_carter / time_ratio_martin)\n\n    # Solve the system of equations\n    solutions = solve((equation_speed_difference, equation_speed_ratio), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    total_apples = red_apples + yellow_apples\n\n    # Pigeonhole Principle\n    # If there's one more apple than the total number of distinct color apples,\n    # we are sure to have at least two apples of the same color.\n    ans = max(red_apples, yellow_apples) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the original number of red pens be 3x and black pens be 7x\n    # An equal number y of red and black pens were sold\n    # Finally, there are 20 red pens and the ratio of red pens to black pens is 5:13\n\n    # Set up the equations according to the ratio information given\n    # (3x - y) / (7x - y) = 5 / 13 and (3x - y) = 20\n    # We have two equations and two unknowns (x and y)\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((3*x - y) / (7*x - y), 5/13)\n    equation2 = Eq(3*x - y, 20)\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of red pens sold, which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # number of legs for each type of animal\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # given total number of legs\n    total_legs = 28\n\n    # total number of legs for cats, dogs, and rabbit\n    legs_for_other_pets = legs_per_cat * 2 + legs_per_dog * 2 + legs_per_rabbit * 1\n\n    # remaining legs for birds\n    legs_for_birds = total_legs - legs_for_other_pets\n\n    # number of birds\n    number_of_birds = legs_for_birds // legs_per_bird\n\n    return number_of_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # There are 5 different entrances, and each of the 4 people can choose any of them.\n    # Since the order in which they enter the zoo matters (permutations), we use the permutations formula.\n    # However, since they can also choose the same entrance, it's simply 5 choices for each person.\n\n    possible_ways = 5**4  # Each person has 5 choices, so 5 * 5 * 5 * 5\n\n    return possible_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # After the first year, the house value increased by 5%\n    # So, the initial value can be calculated by reversing the percentage increase\n    value_after_first_year = 10500\n    initial_value = value_after_first_year / 1.05\n\n    # Now the house loses 5% of its value in the second year\n    value_after_second_year = initial_value * (1 - 0.05)\n\n    # The profit or loss is the final value minus the initial value\n    profit_or_loss = value_after_second_year - initial_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    number = 27 * 3\n    return number\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for number in factors_of_42:\n        if number > 10 and number < 20:\n            return number\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers_sum = 6 * 4\n    existing_sum = 8 + 3 + 9\n    missing_number = numbers_sum - existing_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler, pen = symbols('ruler pen')\n\n    # Equation 1: Chuck's total purchase\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    # Equation 2: Price relationship between ruler and pen\n    equation2 = Eq(ruler, pen + 0.90)\n\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    bag_weight = 12\n\n    num_bags = total_gravel / bag_weight\n    \n    # If the number of bags is not integer, we round up because we cannot buy a fraction of a bag\n    if not num_bags.is_integer():\n        num_bags = int(num_bags) + 1\n    else:\n        num_bags = int(num_bags)\n\n    return num_bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    # Leon gets 1126 after all the operations.\n    # We have to reverse the operations to get the original month and day of birth.\n    result = 1126\n    \n    # Reverse operation of step 8: add 50\n    result += 50\n    \n    # Reverse operation of step 7: subtract the day of birth\n    # Since we don't know the day of birth yet, let's call it 'day'\n    # Result now equals 'month_calculation' + day, where month_calculation comes from steps 1 to 6\n    # month_calculation * 5 = result - day (after step 7)\n    # We'll calculate day later.\n    \n    # Reverse operation of step 6: divide by 5\n    month_calculation = result / 5\n    \n    # Reverse operation of step 5: add 20\n    month_calculation += 20\n    \n    # Reverse operation of step 4: divide by 5\n    month_calculation /= 5\n    \n    # Reverse operation of step 3: subtract 6\n    month_calculation -= 6\n    \n    # Reverse operation of step 2: divide by 4\n    month = month_calculation / 4\n    \n    # Now we calculate the day: day = result - (month_calculation * 5)\n    # We know the final month, and we have already reversed the steps for month_calculation\n    day = result - (month_calculation * 5)\n    \n    # Both the day and month should be integers if the arithmetic is correct\n    day = int(day)\n    month = int(month)\n    \n    # Return the birthday as (month, day)\n    return month, day\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_num = int(''.join(perm[:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n    return None\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # The series is symmetric around the mid-point, so we find the sum of half the series and multiply by 2.\n\n    # Finding the number of terms in the sequence from 4 to 400, with common difference 4\n    first_term = 4\n    last_term = 400\n    difference = 4\n    \n    # Using the formula for the sum of an arithmetic series: n/2 * (first_term + last_term)\n    num_terms = (last_term - first_term) // difference + 1\n    sum_half_sequence = num_terms / 2 * (first_term + last_term)\n    \n    # Multiply by 2 for the sum of both halves of the sequence\n    total_sum = 2 * sum_half_sequence\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the initial cup\n    cups = 1\n    remaining_money = total_money - initial_cup_price\n\n    # Buy as many refills as possible\n    refills = remaining_money // refill_price\n\n    # Total number of cups of coke\n    total_cups = cups + refills\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # First, find the amount of peaches one monkey eats in one day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # Then, calculate the amount of peaches 5 monkeys eat in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n\n    # There are 3 groups of books and they can be arranged in 3! ways.\n    group_arrangements = permutations(3, 3)\n\n    # Each group of books can be arranged among themselves in n! ways.\n    story_book_arrangements = factorial(2)\n    comic_book_arrangements = factorial(3)\n    science_book_arrangements = factorial(4)\n\n    total_arrangements = (group_arrangements * story_book_arrangements *\n                          comic_book_arrangements * science_book_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    tax_paid = 10000\n    first_50k_taxed = 0.06 * 50000\n    remaining_income = income - 50000\n    remaining_taxed = (0.06 + T / 100) * remaining_income\n    total_tax = first_50k_taxed + remaining_taxed\n\n    equation = Eq(total_tax, tax_paid)\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # Give one ice-cream to each friend first, 3 ice-creams will be left\n    remaining_ice_creams = 5 - 3\n\n    # The problem then becomes finding the number of solutions to the equation\n    # z + x + s = remaining_ice_creams\n    # where z, x, and s are non-negative integers (Zyan, Xuan Ying, and SiCheng's share of remaining ice creams)\n\n    # We can use stars and bars method, which gives us the formula:\n    # (n+k-1) choose (k-1) where n is the number of items to be distributed\n    # and k is the number of containers (friends in this case)\n\n    # Apply stars and bars method\n    ans = comb(remaining_ice_creams + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # from January to March (3 months)\n    jan_to_mar = 450 * 3\n    \n    # from April to July (4 months)\n    apr_to_jul = 350 * 4\n    \n    # from August to October (3 months)\n    aug_to_oct = 1250\n    \n    # from November to December (2 months)\n    nov_to_dec = 400 * 2\n    \n    # total expenditures\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # total months\n    total_months = 12\n    \n    # find the average per month\n    average_per_month = total_spent / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # meters per minute\n    cycling_speed = 60  # meters per minute\n\n    # The distance is the same each way, so we will call it 'd'.\n    # Time taken to walk to the library: d / walking_speed\n    # Time taken to cycle back from the library: d / cycling_speed\n\n    # Average speed is total distance divided by total time.\n    # Total distance for round trip is 2d (d to and d from), where 'd' is the distance one way.\n    # Total time is the sum of time taken to walk and cycle, which are d/walking_speed and d/cycling_speed respectively.\n\n    average_speed = (2 * d) / (d / walking_speed + d / cycling_speed)\n\n    # Simplifying (as 'd' cancels out):\n    average_speed = 2 / (1/walking_speed + 1/cycling_speed)\n\n    # Calculating the average speed:\n    average_speed = 2 / ((1/40) + (1/60))\n\n    # Further simplifying the expression:\n    average_speed = 2 / (3/120 + 2/120)\n    average_speed = 2 / (5/120)\n    average_speed = 2 * (120/5)\n\n    # Final average speed calculation:\n    average_speed = 48  # meters per minute\n\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her.\n    # The cost of one serving of ice cream is equal to (x + 2.30) / 5.\n    # The cost for 3 servings is 3 times the cost of one, so we have:\n    # 3 * ((x + 2.30) / 5) = x - 0.30\n    # Solving for x gives us the amount of money Sophie's mother gave her.\n\n    # We can simplify the equation to solve for x:\n    # (3x + 6.90) / 5 = x - 0.30\n    # Multiply both sides by 5 to get rid of the fraction:\n    # 3x + 6.90 = 5x - 1.50\n    # Now, we isolate x:\n    # 6.90 + 1.50 = 5x - 3x\n    # 8.40 = 2x\n    # x = 8.40 / 2\n    x = 8.40 / 2\n    \n    return x\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(3.5 / (3*x + 2) + 2 / (1.5*x + 1), 4.5 / (5 - 6*x) - 3 / (2.5 - 3*x))\n    sol = solve(equation, x)\n    return sol\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Since it's given that each bag has the same number of sweets\n    # We need to divide the total sweets by the number of bags\n\n    # Initialize variables\n    total_sweets = 1270  # Smallest value of M to be a digit (minimum sweets)\n\n    while str(total_sweets)[3] != '0':  # Check for the fourth digit to be 'M'\n        total_sweets += 1  # Increment until the fourth digit is zero\n\n    # Divide total sweets by number of bags\n    sweets_per_bag = total_sweets // 25\n\n    return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n\n    y_val = solve(equation.subs(x, 3), y)\n\n    return 'inverse', y_val[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits\n    perms = permutations(['2', '3', '5', '6'])\n\n    # Initialize an empty list to store odd numbers\n    odd_numbers = []\n\n    for perm in perms:\n        # Join the digits to form a number\n        num = int(''.join(perm))\n        # Check if the number is odd and add it to the list\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    # Find the smallest odd number\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # Since there are only two colors, the worst-case scenario is grabbing a sequence of green and blue balls alternatively,\n    # until we get the two balls of the same color. We have to assume the worst case to be sure we have two balls of the same color.\n    \n    # So, we take 1 green ball and continue taking 1 blue ball, and repeat this process:\n    # After taking 1 green and 1 blue, we are not sure if we have two balls of the same color.\n    # Hence, we take another ball. This third ball must be either green or blue,\n    # so it will match one of the balls we have already taken out.\n    # Thus, we need 3 tries to make sure we have removed at least two balls of the same color.\n    \n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    x = symbols('x') # Let x be the number we think of \n    expression = ((x + 3) * 2 - 2 + 10) / 2 - x\n    ans = expression.simplify()\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    \n    ans = round(numerator / denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_science_fiction_cost = 20 * 4\n    total_comic_books_cost = 10 * 5\n    total_novel_cost = 20 * 6\n    total_books = 20 + 10 + 20\n    total_cost = total_science_fiction_cost + total_comic_books_cost + total_novel_cost\n\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    prime_list = list(primerange(50, 100))\n    return len(prime_list)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    \n    no_sevens = 8 * 9 * 9\n    \n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Jack had $5 times as much money as Kyle.\n    equation1 = Eq(jack, 5*kyle)\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack.\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Calculate the worst case scenario before Annabella can be sure \n    # to get 1 yellow shirt. We consider the worst case being when \n    # she takes out all shirts that are not yellow.\n    \n    # Number of non-yellow shirts\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown\n    \n    # To guarantee getting 1 yellow shirt, she has to take out all non-yellow shirts\n    # plus one more, which will then surely be yellow.\n    shirts_needed = non_yellow_shirts + 1\n\n    return shirts_needed\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let F be the initial number of Felicia's bracelets\n    # Let J be the initial number of Janice's bracelets, which is given as 96\n    # F_sold is the number of bracelets Felicia sold\n    # J_bought is the number of bracelets Janice bought from Felicia\n\n    # Given that J_bought = 2/5 of the bracelets Felicia sold\n    # Felicia now has F - F_sold bracelets, and Janice now has J + J_bought bracelets\n    # The new ratio of Felicia's to Janice's bracelets is 5:7\n\n    # From the given ratio, we can form the equation:\n    # (F - F_sold) / (J + J_bought) = 5/7\n\n    # We also know that Felicia sold 3/5 of her bracelets, so:\n    # F_sold = 3/5 * F\n\n    # And Janice bought 2/5 of the bracelets Felicia sold, so:\n    # J_bought = 2/5 * F_sold\n\n    # Let's put it all together:\n    J = 96\n    # Substitute the F_sold in the J_bought expression:\n    # J_bought = 2/5 * (3/5 * F) = (2/5) * (3/5) * F = 6/25 * F\n\n    # Substitute J_bought in the final ratio expression:\n    # (F - 3/5 * F) / (96 + 6/25 * F) = 5/7\n\n    # Now solve for F:\n    # (2/5 * F) / (96 + 6/25 * F) = 5/7\n    # Cross multiply to remove the fraction\n    # 7 * (2/5 * F) = 5 * (96 + 6/25 * F)\n    # 14/5 * F = 480 + 30/25 * F\n    # Multiply both sides by 25 to get rid of the denominator\n    # 14 * 5 * F = 25 * 480 + 30 * F\n    # Simplify further\n    # 70 * F - 30 * F = 25 * 480\n    # 40 * F = 25 * 480\n    # F = (25 * 480) / 40\n    F = (25 * 480) / 40\n\n    # Calculate J_bought now that we know F\n    J_bought = (6/25) * F\n\n    return int(J_bought)\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n    \n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    \n    ans = reduce(lcm, [9, 10, 15])\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_price = 3.90\n    single_packet_price = 0.35\n    individual_price = single_packet_price * 15\n    savings = individual_price - multipack_price\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20            # Number of terms\n    S_n = 560         # Sum of the arithmetic progression\n    d = 2             # Common difference\n\n    # Sum of an arithmetic progression formula: S_n = n/2 * (2a1 + (n - 1) * d)\n    # We are solving for a1, the first term.\n    \n    # S_n = n/2 * ((2 * a1) + (n - 1) * d)\n    # 560 = 20/2 * ((2 * a1) + (20 - 1) * 2)\n    # 560 = 10 * (2 * a1 + 38)\n    # 56 = 2 * a1 + 38\n    # 18 = 2 * a1\n    # 9 = a1\n    \n    a1 = (S_n / n - (d * (n - 1) / 2))\n\n    return a1\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_distance = 3\n    night_distance = 2\n    distance_per_day = day_distance - night_distance\n    days_to_reach_top = (total_distance - day_distance) / distance_per_day + 1\n\n    return int(days_to_reach_top)\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_period_days = 4\n    second_period_days = 6\n    third_period_days = 5\n    \n    first_period_pages_per_day = 25\n    second_period_pages_per_day = 40\n    third_period_total_pages = 80\n    \n    total_days = first_period_days + second_period_days + third_period_days\n    total_pages = (first_period_days * first_period_pages_per_day) + \\\n                  (second_period_days * second_period_pages_per_day) + \\\n                  third_period_total_pages\n    \n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    brother_final = 12\n    penny_final = 14\n    difference = penny_final - brother_final\n\n    brother_original = brother_final - difference - 10\n\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Calculate the product out of the multiplication table\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "网络故障，请重试"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50  # Number of terms in the series\n    sum_of_series = (n * (n + 1)) // 2  # Formula for the sum of the first n natural numbers\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Since there are 4 suits, the worst case scenario for drawing cards without getting 4 of the same suit\n    # would be drawing 3 cards from each suit, which totals 3 * 4 = 12 cards.\n    # Drawing one more card after these 12 would guarantee getting 4 cards of the same suit.\n    worst_case_same_suit = 3\n    num_suits = 4\n    cards_to_draw = (worst_case_same_suit * num_suits) + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percentage_sold = 0.60\n    remaining_tickets = 28\n    total_capacity = remaining_tickets / (1 - percentage_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hayden, mitchell, spending = symbols('hayden mitchell spending')\n    \n    equation1 = Eq(hayden - spending, 4 * (mitchell - spending))\n    equation2 = Eq(hayden, 1420)\n    equation3 = Eq(mitchell, 505)\n    \n    solutions = solve((equation1, equation2, equation3), (hayden, mitchell, spending))\n    \n    return solutions[spending]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (2/3) * number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    adults = 3 / 7 * total_people\n    children = total_people - adults\n    boys = 3 / 8 * children\n    girls = children - boys\n    \n    equation = Eq(girls, 45)\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    total_two_dollar_notes = two_dollar_notes * 2\n    total_fifty_cent_coins = fifty_cent_coins * 0.50\n\n    total_money = total_two_dollar_notes + total_fifty_cent_coins\n    money_left = total_money - file_cost\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days_to_reach_top = (total_distance - climb_per_day) / net_distance_per_day + 1\n\n    return int(days_to_reach_top)\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated in a row\n    ans = permutations(n, r)\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees_between = 2\n\n    # Two willow trees between every two ginkgo trees means a total of (ginko_trees - 1) intervals\n    total_willow_trees = willow_trees_between * (ginko_trees - 1)\n    \n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship = 28\n    speed_current = 3\n    distance = 150\n\n    upstream_speed = speed_ship - speed_current\n    time = distance / upstream_speed\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let a be the weight of Adam, b be the weight of Ben, and c be the weight of Carl.\n    a_plus_b = 102\n    b_plus_c = 97\n    a_plus_c = 93\n\n    # The total weight of Adam, Ben, and Carl is the sum of the weight of Adam and Ben, \n    # plus the weight of Ben and Carl, minus the weight of Ben (since Ben is counted twice).\n    total_weight = a_plus_b + b_plus_c - (b_plus_c - a_plus_c)\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    return (26 + 4) / 5\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost = 7.48 * (500 / 1000)\n    apple_cost = 8 * 0.12\n    yoghurt_cost = 2 * 0.46\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Zack's rate of selling aircrafts per hour\n    zack_rate = 150\n\n    # Total aircrafts to be sold by Andy and Zack together\n    total_aircrafts = 1200\n\n    # Time taken by Andy and Zack to sell all the aircrafts together\n    total_time_together = 6\n\n    # Total rate of selling aircrafts per hour when Andy and Zack work together\n    total_rate_together = total_aircrafts / total_time_together\n\n    # Andy's rate of selling aircrafts per hour\n    andy_rate = total_rate_together - zack_rate\n\n    # Time taken for Andy to sell all the aircrafts by himself\n    time_andy_alone = total_aircrafts / andy_rate\n\n    return time_andy_alone\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    person = 0 \n    diff = 80\n    for n in range(1, 100):\n        student = (2*n+1)**2\n        teacher = (2*n)**2\n        if student - teacher == diff: \n            person = student + teacher\n            break\n    return person\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's amount\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    \n    # Given amounts for Alan and Bilal\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    \n    # Chloe collects twice as much as David\n    equation3 = Eq(chloe, 2 * david)\n    \n    # David raises three times as much as Emily\n    equation4 = Eq(david, 3 * emily)\n    \n    # Sum of all the amounts collected\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    money_saved = 1 * 7  # $1 every day for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    money_left = original_amount + money_saved - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    repaid_mum = 10.50\n    remaining_money = total_money - repaid_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # We are looking for q such that 44000/q is a cube number\n    # Let's find the prime factorization of 44000\n    from sympy import factorint\n    factors = factorint(44000)\n\n    # Now we have the factors, we need to ensure that 44000/q is a cube by making\n    # each prime factor's power a multiple of 3.\n    q = 1\n    for prime, power in factors.items():\n        if power % 3 != 0:\n            q *= prime**(3 - (power % 3))\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    length, width = symbols('length width')\n    eq1 = Eq(length, 2 * width)\n    eq2 = Eq(2 * length + 2 * width, 72)\n\n    solutions = solve((eq1, eq2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors_count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kilograms\n    coefficient_of_static_friction = 0.4  # static friction coefficient\n    force_applied = 250  # force applied in Newtons\n\n    # Force of static friction = (coefficient of static friction) * (normal force)\n    # Normal force (weight of the crate) = mass * acceleration due to gravity\n    # Assuming acceleration due to gravity is 9.8 m/s^2\n    gravity = 9.8\n    normal_force = mass * gravity\n    \n    # Maximum static friction force before the object starts to move\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # If the force applied is greater than the maximum static friction, the static friction force equals the maximum static friction.\n    # Otherwise, it's equal to the force applied.\n    force_of_static_friction = min(force_applied, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    total_salt_nick = 0.12 * 300\n    total_salt_nicole = 0.28 * 500\n\n    total_salt = total_salt_nick + total_salt_nicole\n    total_solution = 300 + 500\n\n    concentration = (total_salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    # Given terms of an arithmetic sequence\n    third_term = 23\n    fifteenth_term = 155\n    \n    # Number of terms between the 3rd and the 15th term\n    n = 15 - 3\n    \n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # We can find the common difference 'd' by rearranging the formula to solve for 'd'\n    common_difference = (fifteenth_term - third_term) / n\n\n    return common_difference\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the amounts Steve, Mark, and Ryan have\n    s, m, r = symbols('s m r', real=True, positive=True)\n    \n    # Set up the ratios as equations based on the problem statement\n    # Steve has $40 more than Mark, therefore s = m + 40\n    eq1 = Eq(s, m + 40)\n\n    # If Steve paid, the remaining amounts are in the ratio 3:8:9\n    eq2 = Eq(s/r, 3/9)\n    eq3 = Eq(m/r, 8/9)\n\n    # If Ryan paid, the amounts are in the ratio 5:4:1\n    eq4 = Eq(s/m, 5/4)\n    eq5 = Eq(s/r, 5/1)\n\n    # If Mark paid, the amounts are in the ratio 10:1:9\n    eq6 = Eq(s/r, 10/9)\n    eq7 = Eq(m/r, 1/9)\n\n    # Solve the system of equations for s, m, and r\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (s, m, r))\n\n    # Calculate the cost of the meal based on the ratio differences when Steve paid vs. when Ryan paid\n    meal_cost = (solutions[s] / 3 + solutions[m] / 8 + solutions[r] / 9 - solutions[s] / 5 - solutions[m] / 4 - solutions[r] / 1)\n\n    # Solved meal cost\n    return meal_cost\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the two students' scores\n    A_score, B_score = symbols('A_score B_score')\n    \n    # Equation 1: B said to A \"I scored 50 points less than you\"\n    equation1 = Eq(B_score, A_score - 50)\n    \n    # Equation 2: A said to B \"if you gave me 25 points, then my score would be 5 times that of yours\"\n    equation2 = Eq(A_score + 25, 5 * (B_score - 25))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A_score, B_score))\n    \n    return solutions[A_score]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = (cube + 1) ** 0.5\n        if square.is_integer():\n            return int(square) ** 2\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Symbols to represent the number of buttons James and Nina have originally\n    from sympy import symbols, Eq, solve\n    \n    james, nina = symbols('james nina')\n    \n    # Create two equations based on the given information\n    # Equation 1: The total number of buttons is 24\n    equation1 = Eq(james + nina, 24)\n    \n    # Equation 2: When Nina gives James 6 buttons, they have the same amount\n    equation2 = Eq(nina - 6, james + 6)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (james, nina))\n    \n    # Nina's original number of buttons is the value of 'nina' from the solution\n    return solution[nina]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11 / 30) - (9 / 20) + (7 / 12) - (1 / 3)) * 6 * (7 / 13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_hours * total_workers)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    net_progress = day_distance - night_distance\n    day_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Based on the math question, no specific numbers are provided for the relationship between\n    # the bags used (x) and the tax charged (y). Therefore, the equation can only be expressed\n    # in terms of x and y. Assuming the relationship is linear and direct, we can represent it as:\n    # y = m*x + b\n    # Where m represents the tax per bag, and b represents a base tax or initial amount charged.\n    # Since we don't have exact values, we can't determine m and b explicitly. However, a general\n    # linear equation in terms of x and y would be the solution we return.\n\n    # We return a string representation of the equation as we're not finding numerical values.\n    return \"y = m*x + b\"  # This represents a linear equation in the form y = mx + b.\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 5 == 3 and num % 7 == 3 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n    \n    ans = decimal if decimal > fraction else fraction\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4,5) * Fraction(10,9) * Fraction(11,2) * Fraction(3,11)\n    return result.numerator if result.denominator == 1 else float(result)\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_paid = 275\n\n    # Calculate the maximum days he could keep the car if the daily fee remained $25\n    max_short_term_days = (total_paid - flat_fee) // daily_fee_short\n\n    if max_short_term_days <= 5:\n        # If the max days is 5 or less, then he rented the car for the max days\n        days_rented = max_short_term_days\n    else:\n        # Calculate how much paid after the initial 5 days\n        additional_paid = total_paid - flat_fee - (5 * daily_fee_short)\n\n        # Calculate additional days with the reduced daily fee\n        additional_days = additional_paid // daily_fee_long\n\n        # Total days rented is 5 days at $25/day plus additional days at $20/day\n        days_rented = 5 + additional_days\n\n    return days_rented\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit_ratio = 8\n    rabbit_to_chicken_ratio = 2\n\n    chickens_per_dog = dog_to_rabbit_ratio * rabbit_to_chicken_ratio\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= ((1/i) - (1/(100-i)))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    \n    total_distance = initial_height\n    current_height = initial_height\n    \n    while current_height > 0:\n        current_height *= rebound_ratio\n        total_distance += current_height * 2  # Up and down before next bounce\n        \n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # A single sheet contributes to 4 page numbers when folded in half.\n    # 2 pages on the front and 2 pages on the back.\n    # The smallest number on the front will be 'n' and 'n+1' on the back.\n    # The largest number on the front will be 'n+2' and 'n+3' on the back.\n    # Thus, the sum of the numbers on one sheet will be n + (n+1) + (n+2) + (n+3).\n\n    # We need to find 'n' such that the sum is 58. That is:\n    # n + (n+1) + (n+2) + (n+3) = 4n + 6 = 58\n    # 4n = 58 - 6\n    # 4n = 52\n    # n = 13\n\n    # Since the smallest number is 13, it's the first page of a sheet.\n    # Page number 13 is sheet number 7 when counting the sheets (since two page numbers per sheet)\n    # Page 1-2 is sheet 1, 3-4 is sheet 2, ..., 13-14 is sheet 7.\n    # Therefore, we have already used 7 sheets. \n    # Because the pages are consecutive and our calculation starts with the page number 13,\n    # 13 can't be the first number of the booklet. It should start from page number 1.\n    # Therefore, 'n' can't be 13, it should at least be 2 * 13 = 26 to be on the second half of the booklet.\n\n    # Iterate through possible 'n' values, checking the condition that the sum is 58\n    # and that 'n' is an even number since it's on the right side page.\n    for n in range(2, 58 // 4, 2):  # We start at 2 because 'n' must be even\n        if 4 * n + 6 == 58:\n            # Since we are looking at the smaller even number 'n' on one of the right-side pages,\n            # the total number of pages is n + 3 (the last page number on the sheet with sum 58).\n            total_pages = n + 3\n            # Now we find how many sheets are there at the start.\n            sheets = total_pages // 4\n            return sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n    \n    # Initial condition: equal number of green and yellow toy cars\n    equation1 = Eq(green, yellow)\n    \n    # After giving away cars, he had thrice as many yellow as green\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Number of green toy cars he had in the end\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n    race_distance = 3000  # meters\n\n    buck_time = race_distance / buck_speed  # time for buck to finish the race\n    elephant_time = race_distance / elephant_speed  # time for elephant to finish the race\n\n    time_difference = elephant_time - buck_time  # difference in time between elephant and buck\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the first half of the series: 4 + 8 + ... + 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms_half = ((last_term - first_term) // difference) + 1\n    sum_first_half = (num_terms_half * (first_term + last_term)) // 2\n    \n    # The series is symmetric, so the sum of the second half is equal to the sum of the first half\n    sum_second_half = sum_first_half\n\n    # The sum of the full series is the sum of both halves\n    total_sum = sum_first_half + sum_second_half\n\n    return total_sum\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Average speeds in km/h\n    speed_simon = 80\n    speed_wife = 60\n\n    # Distance between the offices in km\n    distance_between_offices = 15\n\n    # Time when they left\n    start_time = datetime.strptime(\"18:10\", \"%H:%M\")\n\n    # Time taken by Simon to cover the distance between offices at his speed\n    time_to_catch_up = distance_between_offices / (speed_simon - speed_wife)  # hours\n\n    # Convert hours to minutes for timedelta\n    time_to_catch_up_minutes = time_to_catch_up * 60\n\n    # Calculate the overtaking time\n    overtaking_time = start_time + timedelta(minutes=time_to_catch_up_minutes)\n\n    # Format the overtaking time in HH:MM\n    ans = overtaking_time.strftime(\"%H:%M\")\n\n    return ans\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # ratio of the cost of a pen to the cost of a pencil is 7 : 3\n    # => cost_of_1_pen : cost_of_1_pencil = 7 : 3\n    # => cost_of_1_pen / cost_of_1_pencil = 7 / 3\n    # => cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    # Work out the cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_1_pen\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    series_sum = num_terms * (first_term + last_term) // 2\n\n    return series_sum\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    num_drinks = 2\n\n    # Number of choices for one food item (hamburger, burritos, bagels)\n    num_food_items = 3\n\n    # Total number of combinations using the principle of multiplication\n    total_combinations = num_drinks * num_food_items\n\n    return total_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            unlocked_lockers += 1\n        if i % 5 == 0:\n            unlocked_lockers -= 1 if unlocked_lockers > 0 else -1\n\n    ans = 100 - unlocked_lockers\n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500  # total length of road in meters\n    total_days = 5    # total days to pave the road\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    return (8 * 18) + 1\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Given mistake 88 / A = 22\n    A = 88 / 22\n    \n    # Correct calculation 98 / A\n    correct_answer = 98 / A\n    \n    return A, correct_answer\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Ways to reach the 5th step\n    ways_to_5th = [0] * 6\n    ways_to_5th[1] = 1  # Reaching step 1 in 1 way\n    ways_to_5th[2] = 2  # Reaching step 2 in 2 ways\n\n    for i in range(3, 6):\n        ways_to_5th[i] = ways_to_5th[i-1] + ways_to_5th[i-2]\n\n    # Ways to reach the 10th step from the 5th\n    ways_from_5th_to_10th = [0] * (10 - 5 + 1)\n    ways_from_5th_to_10th[5] = 1  # He is already on 5th step\n    ways_from_5th_to_10th[6] = 1  # Only one way: from 5th to 6th\n\n    for i in range(7, 11):\n        ways_from_5th_to_10th[i - 5] = (ways_from_5th_to_10th[i - 6] +\n                                         ways_from_5th_to_10th[i - 5 - 1])\n\n    # Total ways to 10th step is the product of two parts\n    ans = ways_to_5th[5] * ways_from_5th_to_10th[10 - 5]\n\n    return ans\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    price_for_four = 32\n    price_for_one = price_for_four / 4\n    price_for_twelve = price_for_one * 12\n    return price_for_twelve\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Jason: 5, Chi Yew: 5, Wei Jie: 9, Michael: 7 (in mins)\n    # Two people cross at a time and the quicker person will return with the boat.\n\n    # Strategy: Start with the two quickest to save overall time.\n    # 1. Jason and Chi Yew cross (5 mins), Jason returns (5 mins)\n    # 2. Michael and Wei Jie cross (9 mins, because Wei Jie is the slowest), Chi Yew returns (5 mins)\n    # 3. Jason and Chi Yew cross again (5 mins)\n    # Total time = 5 (cross) + 5 (return) + 9 (cross) + 5 (return) + 5 (cross) = 29 minutes\n    # This arrangement ensures that the return trips are always done by the quicker people.\n\n    total_time = 5 + 5 + 9 + 5 + 5\n    \n    return total_time\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Speed of Lucas\n    speed_lucas = 5 / 6  # laps per minute\n    # Speed of Miller\n    speed_miller = 5 / 10  # laps per minute\n\n    # Relative speed\n    relative_speed = speed_lucas - speed_miller  # laps per minute\n\n    # Time to complete 1 lap difference\n    time_for_lap_difference = 1 / relative_speed\n\n    return time_for_lap_difference\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # If $1670 is the rounded figure to the nearest $10, the greatest amount\n    # Rachel could have saved is just one unit less than the next multiple of 10.\n    rounded_figure = 1670\n    greatest_possible_amount = rounded_figure + 9\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic sequence is given by: sum = n/2 * (first_term + last_term)\n    # Rearranging the formula to find the last term (largest number) we get:\n    # last_term = (2*sum/n) - first_term\n    \n    # n is the number of terms, which is 53 for the given problem\n    n = 53\n    # sum is the total sum of the sequence, which is 2014 for the given problem\n    total_sum = 2014\n    \n    # To find the first term, we need to recognize that for 53 consecutive whole numbers,\n    # If the middle number is 'm', then the first term is 'm - (n-1)/2'\n    # Since the sum of the sequence is the sum of an arithmetic sequence, the middle number 'm'\n    # Will be equal to the average of the first term and the last term (sum/n).\n    # Therefore: first_term = (sum/n) - (n-1)/2\n    middle_number = total_sum / n\n    first_term = middle_number - (n - 1) / 2\n    \n    # Now we can find the largest number using the rearranged sum formula\n    last_term = (2*total_sum/n) - first_term\n    \n    return int(last_term)\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    children_fraction = 3/5\n    men_fraction = 1/4\n    \n    children = children_fraction * total_visitors\n    remaining_visitors = total_visitors - children\n    men = men_fraction * remaining_visitors\n    \n    equation = Eq(children, men + 120)\n    \n    sol = solve(equation.subs(children, children_fraction * total_visitors).subs(men, men_fraction * (1 - children_fraction) * total_visitors), total_visitors)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    years_diff = 54 - tim_age_now\n    mother_age_now = tim_age_now + years_diff\n\n    return mother_age_now\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Assuming each letter represents a unique digit in a cryptarithmetic puzzle\n    # where each letter in the vertical form stands for a unique digit.\n    # The only possible solution to the equation A + A = 2A (each letter being a digit)\n    # is when A = 0, because it's the only digit that when doubled does not change.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    counter = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            counter += 1\n    return counter\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    kevin_days_off = symbols('kevin_days_off')\n\n    # Work rate of Ivy and Kevin\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n\n    # Equation based on the total amount of work completed\n    equation = Eq(18 * ivy_rate + (18 - kevin_days_off) * kevin_rate, 1)\n\n    # Solving the equation\n    kevin_days_off_solution = solve(equation, kevin_days_off)\n\n    return kevin_days_off_solution[0]\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the length of the shorter piece\n    x = symbols('x')\n    # the longer piece is 5 times of x\n    equation = Eq(x + 5*x, 49.5)\n\n    # Solve the equation\n    sol = solve(equation, x)\n\n    # Calculate the length of the longer piece and round to 1 decimal place\n    longer_piece_length = round(sol[0]*5, 1)\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60  # 60p from mum\n    money_from_dad = 40  # 40p from dad\n\n    # Given the same amount on Tuesday and Wednesday\n    total_money = (money_from_mum + money_from_dad) * 3  # 3 days\n\n    return total_money\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    # Cost in cents for clearer calculations\n    base_rate = 80  # cost of call up to 15 minutes\n    additional_rate = 5  # cost per additional minute\n    total_cost = 140  # total cost in cents for Ryan\n\n    # If the cost is equal to the base rate, then the call lasted 15 minutes\n    if total_cost == base_rate:\n        return 15\n\n    # If the cost is more than the base rate, calculate the additional minutes\n    additional_minutes_cost = total_cost - base_rate\n    additional_minutes = additional_minutes_cost / additional_rate\n\n    # Total call duration is the base 15 minutes plus additional minutes\n    call_duration = 15 + additional_minutes\n\n    return call_duration\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_litres = 36\n    apple_ratio = 4\n    orange_ratio = 5\n\n    total_ratio = apple_ratio + orange_ratio\n    apple_juice = total_litres * (apple_ratio / total_ratio)\n\n    return int(apple_juice)\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Given: orange string is 5.52 m long\n    orange_length_m = 5.52\n    \n    # Convert the orange string length to cm\n    orange_length_cm = orange_length_m * 100\n    \n    # Given: orange string is 9.2 times as long as the purple string\n    # So, purple_length_cm = orange_length_cm / 9.2\n    purple_length_cm = orange_length_cm / 9.2\n    \n    # Given: green string is 24.9 cm longer than the purple string\n    # So, green_length_cm = purple_length_cm + 24.9 cm\n    green_length_cm = purple_length_cm + 24.9\n    \n    # Convert the green string length to meters\n    green_length_m = green_length_cm / 100\n    \n    return green_length_m\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    distance_per_day = 4\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of working per day\n    nancy_rate = 1 / 6\n    \n    # Combined rate of Nancy and Tim\n    combined_rate = 1 / 4\n    \n    # Tim's rate of working per day\n    tim_rate = combined_rate - nancy_rate\n    \n    # Time taken for Tim to complete the work by himself\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    total_money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 0:  # spends on even days\n            total_money -= 8\n        else:             # deposits on odd days\n            total_money += 5\n    return total_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_jumps = 0\n    current_height = 0\n    while current_height < 31:\n        for _ in range(3):\n            if current_height < 31:\n                current_height += 3\n                total_jumps += 1\n        if current_height < 31:\n            current_height -= 2\n\n    return total_jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    def term(n):\n        if n == 0:\n            return 1/22\n        else:\n            numerator = n\n            denominator = (n * (n - 1) // 2) * ((n * (n - 1) // 2) + 3)\n            return numerator / denominator\n\n    ans = sum(term(i) for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7, so 0.20 * x are Year 7 pupils normally\n    # After some Year 7 girls miss school, the total left is 400\n    # 10% of the 400 pupils left are Year 7, so 0.10 * 400 are Year 7 pupils left\n    # The number of Year 7 pupils who miss school is 0.20 * x - 0.10 * 400\n    # Since those are the missing Year 7 girls, we have:\n    # x - (0.20 * x - 0.10 * 400) = 400\n    # This simplifies to:\n    # x - 0.20 * x + 40 = 400\n    # 0.80 * x = 360\n    # x = 360 / 0.80\n    x = 360 / 0.80\n    return int(x)\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let's denote Helen's initial amount of money as x.\n    # After spending one-third on a dress, she is left with 2/3 of her money.\n    # Then, she spends 3/5 of the remaining amount on shoes.\n    # Finally, she is left with 40 pounds.\n\n    # We can set up the equation:\n    # (2/3 * x) * (2/5) = 40\n    # Then solve for x.\n    \n    x = 40 / (2 / 5) / (2 / 3)\n    \n    return x\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while (n // i >= 1):\n            count += n // i\n            i *= 5\n        return count\n\n    num_zeros_999 = count_trailing_zeros(999)\n    num_zeros_300 = count_trailing_zeros(300)\n\n    ans = num_zeros_999 - num_zeros_300\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    outer_students_per_side = 60 // 4\n    total_students_per_side = outer_students_per_side * 2 - 1\n    total_students = total_students_per_side ** 2\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    total_vehicles_expr = cars + bikes + lorries\n    car_expr = Eq(cars, bikes + 1/3 * bikes)\n    bike_expr = Eq(bikes, lorries + 1/4 * lorries)\n\n    # Since the total number is even and less than 100, loop through even numbers\n    for total_vehicles in range(2, 100, 2):\n        total_vehicles_eq = Eq(total_vehicles_expr, total_vehicles)\n        solutions = solve((car_expr, bike_expr, total_vehicles_eq), (cars, bikes, lorries))\n        cars_value, bikes_value, lorries_value = solutions[cars], solutions[bikes], solutions[lorries]\n        if cars_value.is_Integer and bikes_value.is_Integer and lorries_value.is_Integer:\n            return (cars_value, bikes_value, lorries_value)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    # Symbols for the number of buttons\n    from sympy import symbols, Eq, solve\n\n    A_initial, B_initial, A_added = symbols('A_initial B_initial A_added')\n\n    # Initial condition equations based on the problem statement\n    equation1 = Eq(A_initial, B_initial + 64)\n    \n    # Ken added A_added buttons to box A and removed 2 * A_added from box B\n    equation2 = Eq(B_initial - 2 * A_added, B_initial - 28)\n\n    # The ratio of the total number of buttons in both boxes to the number left in box B is 4:1\n    equation3 = Eq((A_initial + A_added + (B_initial - 28)), 4 * (B_initial - 28))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (A_initial, B_initial, A_added))\n\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = (18 * 20132013) - (2013 * 180018)\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 1  # Start searching from the minimum value of n\n    while True:\n        number_str = f\"26{'2011' * n}7\"\n        number = int(number_str)\n        if number % 33 == 0:  # Check if number is divisible by 33\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour = flour_per_cake * number_of_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # starting coins for players X, Y, Z\n    discard = 0           # coins in the discard pile\n    rounds = 0            # number of completed rounds\n\n    # run the game until one player runs out of coins\n    while min(x, y, z) > 0:\n        rounds += 1\n\n        # find the player with the most coins\n        if x >= max(y, z):\n            x -= 3\n            y += 1\n            z += 1\n        elif y >= max(x, z):\n            y -= 3\n            x += 1\n            z += 1\n        else:  # z has the most coins\n            z -= 3\n            x += 1\n            y += 1\n\n        discard += 1  # put one coin in the discard pile every round\n\n    return rounds\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    total_layers = 0\n    \n    # Calculate how many layers there are\n    while total_tiles > 0:\n        layer += 1\n        tiles_in_layer = (layer * 2 + 1)**2 - (layer * 2 - 1)**2 if layer > 0 else 1\n        total_tiles -= tiles_in_layer\n        total_layers += 1\n    \n    # Since layers are added from outside and we might count one extra, we need to adjust total_layers if total_tiles went negative\n    if total_tiles < 0:\n        total_layers -= 1\n    \n    # Calculate the number of red and green tiles\n    red_tiles = sum([(2*i + 1)**2 for i in range(0, total_layers, 2)])\n    green_tiles = sum([(2*i + 1)**2 for i in range(1, total_layers, 2)])\n\n    if red_tiles > green_tiles:\n        more_color = 'red'\n        difference = red_tiles - green_tiles\n    else:\n        more_color = 'green'\n        difference = green_tiles - red_tiles\n    \n    return more_color, difference\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    # We use x1, x2, and x3 to represent the number of lollipops on plate 1, 2 and 3, respectively.\n    for x1 in range(0, 8):  # from 0 to 7 lollipops for the first plate\n        for x2 in range(x1, 8):  # the second plate has at least as many lollipops as the first\n            for x3 in range(x2, 8):  # the third plate has at least as many lollipops as the second\n                if x1 + x2 + x3 == 7:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes 3 minutes to cut a log into 4 pieces, Bob makes 3 cuts.\n    # Each cut takes 3 / 3 = 1 minute.\n    cut_time = 3 / 3\n\n    # To cut a log into 8 pieces, Bob needs to make 7 cuts.\n    # Total time needed = number of cuts * time per cut.\n    total_time = 7 * cut_time\n\n    return total_time\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    total_rounds = 12\n\n    # Let x be the number of rounds she won, then (total_rounds - x) is the number of rounds she lost.\n    # 4x - 2(total_rounds - x) = total_cards\n    # Solving for x gives us the number of rounds she won. We are interested in the number of rounds she lost.\n\n    # 4x - 2(total_rounds - x) = total_cards\n    # 4x - 2*total_rounds + 2x = total_cards\n    # 6x = total_cards + 2*total_rounds\n    # x = (total_cards + 2*total_rounds) / 6\n    x = (total_cards + 2 * total_rounds) / 6\n\n    lost_rounds = total_rounds - x\n    return int(lost_rounds)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # Since bins are placed at both ends, we subtract the interval from the \n    # boulevard length and then divide by the interval to find the number of bins \n    # in between the ends. Then we add the two bins at the ends.\n    num_bins = ((boulevard_length - interval) // interval) + 2\n\n    return num_bins\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    cards_after_selling = initial_cards - duplicates\n    final_collection = cards_after_selling + new_cards\n\n    return final_collection\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single entity, so now we have 7 entities to arrange around the table\n    entities = 7\n    # The number of ways to arrange n entities around a circle is (n - 1)!\n    arrangements = factorial(entities - 1)\n    # Amy and Judy can arrange themselves in 2! ways (Amy first or Judy first)\n    amy_judy_arrangements = factorial(2)\n    # Multiply the arrangements of entities with the internal arrangements of Amy and Judy\n    total_arrangements = arrangements * amy_judy_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_sum = sum(1/i for i in range(1, 8))\n    return int(total_sum)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    \n    # The formula to calculate the amount in the bank after t years with annual interest is:\n    # A = P * ((1 + r) ^ t)\n    # where A = final amount, P = principal, r = interest rate, t = time in years\n    \n    # Rearrange the formula to solve for t: t = log(A/P) / log(1 + r)\n    # import math library for logarithmic calculations\n    from math import log\n\n    years = log(final_amount / principal) / log(1 + interest_rate)\n    \n    # Check if the calculated number of years is approximately equal to 5\n    if abs(years - 5) < 0.01:  # Allowing a small error margin\n        return 5  # She is correct\n    else:\n        return round(years)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    pencils = 56\n    pens = 60\n    \n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Rasidah and Chai Seng's initial amounts of money.\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Write system of equations based on the problem statement.\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(chai_seng, rasidah + 48)\n    # Rasidah spent 3/5 of her money\n    rasidah_spent = rasidah * (3/5)\n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = chai_seng * (6/7)\n    # Rasidah's remaining money\n    rasidah_remaining = rasidah - rasidah_spent\n    # Chai Seng's remaining money\n    chai_seng_remaining = chai_seng - chai_seng_spent\n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_remaining, rasidah_remaining / 2)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the original number of Andy's cookies, and b be the original number of Ben's cookies\n    a, b = symbols('a b')\n\n    # Equation 1: Andy had 84 fewer cookies than Ben at first\n    equation1 = Eq(a + 84, b)\n\n    # Equation 2: After purchasing, Andy had 1/3 as many cookies as Ben\n    equation2 = Eq((a + a / 3), b + (b / 5) / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the number of Andy's cookies in the end\n    andy_end = solutions[a] + solutions[a] / 3\n\n    return andy_end\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Divisible numbers by 24 in the given two-digit range (10-99)\n    divisible_by_24 = [i for i in range(10,100) if i % 24 == 0]\n    \n    # The set of all possible two-digit numbers that could be on the hats.\n    all_possible_numbers = set(range(10,100))\n    \n    # These 4 students knows for certain their status regarding the unknown number\n    # which means the number can have at most 4 multiples in the range of 10-99.\n    \n    # find the common divisors of all these numbers below 100, and keep those\n    # with precisely 4 two-digit multiples\n    potential_divisors = []\n    for num in range(2, 10):\n        multiples = [i for i in range(10,100) if i % num == 0]\n        if len(multiples) == 4:\n            potential_divisors.append(num)\n    \n    # as Tom raised his hand both times, his number must be a multiple of 24.\n    # Remove such numbers from consideration\n    remaining_numbers = all_possible_numbers - set(divisible_by_24)\n    \n    # Similarly with the second requirement of 6 multiples, \n    # remove divisors that don't satisfy this\n    divisors_with_6_multiples = {div for div in potential_divisors if len([i for i in remaining_numbers if i % div == 0]) == 6}\n\n    # Looking at all 4-raised-hand scenarios and 6-raised-hand scenarios\n    # for potential divisors and filtering possibilities\n    possible_numbers_after_hands_raised = set()\n    for divisor in divisors_with_6_multiples:\n        these_multiples = set(i for i in remaining_numbers if i % divisor == 0)\n\n        # Remove the hand raised cases for further filtering\n        if len(these_multiples) == 6:\n            possible_numbers_after_hands_raised.update(these_multiples)\n    \n    # The numbers that Tom has seen on his friends' hats are the remaining numbers\n    saw_by_tom = remaining_numbers - possible_numbers_after_hands_raised\n\n    return sum(saw_by_tom)\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    # fraction equivalent 6/20\n    equivalent_fraction = 6 / 20\n    # numerator is 12\n    numerator = 12\n    # find the denominator\n    denominator = numerator / equivalent_fraction\n    return int(denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of pupils who passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Pupils who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Maximum possible number of pupils who passed all three tests\n    # It is calculated by assuming that the intersection of each pair of test passers\n    # is equal to the minimum of the two numbers of passers, and subtracting the sum of\n    # individual numbers of passers from the total number of at least one passer\n    max_passed_all_three = (passed_math + passed_science + passed_english) - total_passed_at_least_one\n    \n    # Since we cannot have negative pupils, the answer must be at least 0.\n    ans = max(0, max_passed_all_three)\n    \n    return ans\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    d = symbols('d')  # distance between the school and their home\n    \n    # When Ahmad meets his younger brother, Ahmad has traveled to the school and back for a \n    # distance of d + 210 meters. His younger brother has only traveled distance of d - 210 meters.\n    # Since both Ahmad and his younger brother started walking at the same time, we can create \n    # an equation for the time it took each of them to reach the meeting point. \n    # Ahmad's time to travel d + 210 meters at 80 m/min will be equal to \n    # his brother's time to travel d - 210 meters at 50 m/min.\n    equation = Eq((d + 210) / 80, (d - 210) / 50)\n    \n    # Solve the equation for d\n    distance = solve(equation, d)\n    \n    return distance[0]  # return the solution\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical and we need to distribute into 3 different pencil cases,\n    # we can approach this problem as finding the number of integer solutions to the equation:\n    # x1 + x2 + x3 = 6 where x1, x2, x3 > 0.\n\n    # Initial count of ways is set to 0.\n    count = 0\n\n    # We iterate over all possible distributions where x1, x2, and x3 are greater than 0\n    # and their sum equals to 6.\n    for x1 in range(1, 6):\n        for x2 in range(1, 6 - x1):\n            x3 = 6 - x1 - x2\n            if x3 > 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Based on the sequence, two patterns alternate:\n    # 1) Increasing odd numbers starting from 18: 18, 19, 20, ...\n    # 2) Decreasing even numbers starting from -16: -16, -15, ...\n\n    # The sequence of increasing odd numbers has elements at positions: 1, 3, 5, ...\n    # The sequence of decreasing even numbers has elements at positions: 2, 4, 6, ...\n\n    # To find the next number, we need to determine its position in the sequence:\n    # The current sequence has 5 elements, so the next one has position 6.\n\n    # Now, check if the position is even or odd to determine which pattern to use.\n    next_position = 6\n\n    # Since 6 is even, use the decreasing even numbers pattern.\n    # The first decreasing even number is -16 at position 2,\n    # so each step decreases the number by 1 and moves 2 positions forward.\n    # To find the number at position 6, we need to decrease -16 by (6/2 - 1 = 2):\n    n = -16 - (next_position // 2 - 1)\n\n    return n\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n    \n    # Complex fraction evaluation\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator_1 = Fraction(2, 25)\n    fraction_1 = numerator_1 / denominator_1\n    \n    numerator_2 = 2 - Fraction(2, 3)\n    denominator_2 = Fraction(8, 3)\n    fraction_2 = numerator_2 / denominator_2\n    \n    ans = fraction_1 + fraction_2\n    \n    # Simplifying and returning the answer\n    return ans\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d in descending order (a > b > c > d)\n    # Sum of the smallest number and average of other three numbers is 39.\n    # Thus, d + (a + b + c) / 3 = 39 => a + b + c + 3d = 117\n\n    # Sum of the largest number and average of other three numbers is 51.\n    # Thus, a + (b + c + d) / 3 = 51 => a + b + c + d = 153\n\n    # By substituting the first equation (a + b + c + 3d = 117) into the second (a + b + c + d = 153),\n    # we get 2d = 36 => d = 18\n\n    # We substitute d = 18 back into the second equation to find the sum of a, b, and c.\n    # a + b + c + 18 = 153 => a + b + c = 135\n\n    # As we are looking for the largest possible value of a, let's assume b and c are as small as possible (i.e., b = c = 19).\n    # Thus, the largest possible value for a is given by the equation: a + 19 + 19 + 18 = 153 => a = 97\n\n    # Return the largest possible value of a\n    return 97\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num_str = str(8844)\n    place_value_1 = 8 * 1000\n    place_value_2 = 8 * 10\n    ans = place_value_1 - place_value_2\n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # Since the number must be divisible by 5, A must be either 0 or 5.\n\n    # To be divisible by 4, the last two digits of the number must be divisible by 4.\n    # If A is 0, the last two digits are 20, which is divisible by 4.\n    # If A is 5, the last two digits are 25, which is not divisible by 4.\n    # So A must be 0 to satisfy both conditions.\n    \n    return 0\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    i = 0\n    while not is_palindrome(40309 + i):\n        i += 1\n    return i\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n\n    ans = gcd(length_ribbon1, length_ribbon2)\n\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the mean score of all 10 students\n    mean_all = symbols('mean_all')\n\n    # Mean score of the top 3 students is 92\n    total_top_3 = 3 * 92\n\n    # Mean score of the last 7 students is 6 less than the mean score of all 10 students\n    mean_last_7 = mean_all - 6\n    total_last_7 = 7 * mean_last_7\n\n    # Total score of all 10 students is the sum of the total scores of the top 3 and last 7 students\n    total_all = total_top_3 + total_last_7\n\n    # The mean score of all 10 students is the total score divided by 10\n    equation = Eq(total_all, 10 * mean_all)\n\n    # Solve for the mean score of all 10 students\n    mean_score = solve(equation, mean_all)\n\n    return mean_score[0]\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    largest_palindrome = 0\n    smallest_palindrome = 99999\n    \n    for x in range(9, 0, -1):  # First digit must be from 9 to 1\n        for y in range(10):    # Second and fourth digits could be from 0 to 9\n            for z in range(10):  # Third digit could also be from 0 to 9\n                palindrome = int(f\"{x}{y}{z}{y}{x}\")\n                if palindrome % 45 == 0:\n                    largest_palindrome = max(largest_palindrome, palindrome)\n                    smallest_palindrome = min(smallest_palindrome, palindrome)\n                    \n    ans = largest_palindrome - smallest_palindrome\n    return ans\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy import lcm\n\n    # Step 1: Find the common supplement\n    # In this case, the common supplement is not explicitly needed.\n\n    # Step 2: Find the LCM of all the divisors\n    divisors = [5, 6, 11]\n    lcm_divisors = lcm(divisors[0], lcm(divisors[1], divisors[2]))\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    \n    # The solution to the congruences x ≡ 1 mod 5, x ≡ 2 mod 6, x ≡ 7 mod 11 can be\n    # found by iterating over multiples of the LCM and checking for the remainders\n\n    for i in range(lcm_divisors, 500, lcm_divisors):\n        if i % 5 == 1 and i % 6 == 2 and i % 11 == 7:\n            return i  # The unknown number of biscuits\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    \n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = set(year_str)\n        \n        if len(digits) == 4:\n            year_digits_sort = sorted(list(year_str))\n            for perm in permutations(year_digits_sort):\n                if ''.join(perm) == year_str:\n                    lucky_years += 1\n                    break\n    \n    return lucky_years\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    total_sweets_before = Eq(andre + beth, 24)\n    total_sweets_after = Eq(andre + 4 - (beth + 4), 6)\n    \n    solutions = solve((total_sweets_before, total_sweets_after), (andre, beth))\n    \n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest number be x. Then the sequence is:\n    # x, x+2, x+4, x+6, x+8\n    # The sum is 5x + 20 = 100\n    # Solving for x gives us x = (100 - 20) / 5\n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550\n    time_taken = 5\n    speed = distance / time_taken\n    travel_time = 3\n    distance_traveled = speed * travel_time\n    return distance_traveled\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    apples_left = 150\n    fraction_sold = 2/5\n    fraction_left = 1 - fraction_sold\n    total_apples = apples_left / fraction_left\n    \n    return int(total_apples)\n\nans = solution() "
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    num_jumps = 14  # From post 1 to post 15, the frog makes one less jump than the number of posts counted\n    jump_length = 3  # Each jump is 3 inches long\n\n    total_distance = num_jumps * jump_length\n\n    return total_distance\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    red_marbles = None  # Variable to store the number of red marbles\n\n    # All possible combinations of choosing 3 bags for Jaslin out of 5 (leaving out the red marbles bag).\n    from itertools import combinations\n    for bags in combinations([19, 21, 27, 32, 37], 3):\n        Jaslin_marbles = sum(bags)\n        George_marbles = sum([19, 21, 27, 32, 37]) - Jaslin_marbles\n        # Checking if Jaslin got twice as many marbles as George.\n        if Jaslin_marbles == 2 * George_marbles:\n            red_marbles = 19 + 21 + 27 + 32 + 37 + 40 - Jaslin_marbles - George_marbles\n            break\n\n    return red_marbles\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    apples = 36\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries + apples\n\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'alan' be the time Alan takes to paint the room on his own\n    alan = symbols('alan')\n\n    # 1/alan is Alan's work rate, 1/6 is Bob's work rate\n    # So, their combined work rate is 1/4 (since they can complete the work together in 4 hours)\n    equation = Eq(1/alan + 1/6, 1/4)\n\n    # Solve the equation for Alan's time\n    alan_time = solve(equation, alan)\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability it rains on Saturday\n    p_saturday = 0.7\n    # Probability it rains on Sunday\n    p_sunday = 0.5\n    # Probability it does not rain on Saturday\n    p_not_saturday = 1 - p_saturday\n    # Probability it does not rain on Sunday\n    p_not_sunday = 1 - p_sunday\n    \n    # Probability it does not rain on both days (independent events)\n    p_neither_days = p_not_saturday * p_not_sunday\n    \n    # Probability it rains on at least one day\n    p_at_least_one_day = 1 - p_neither_days\n\n    return p_at_least_one_day\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\n\ndef is_even(arrangement):\n    # Check for each color whether it satisfies the even condition\n    for color in 'RBGYOP':\n        indices = [i for i, block in enumerate(arrangement) if block == color]\n        if (indices[1] - indices[0]) % 2 == 1:  # check if the number of blocks between same color is even\n            return False\n    return True\n\ndef solution():\n    blocks = 'RRBBYYGGOOPP'\n    total_even = 0\n    total_permutations = 0\n\n    # Generate permutations for half the blocks since the problem symmetry\n    # and count the total and even permutations\n    for perm in set(permutations(blocks, len(blocks) // 2)):\n        if is_even(perm):\n            total_even += 1\n        total_permutations += 1\n    \n    # Multiply by the fact that each unique half can be mirrored to make a \n    # full arrangement\n    total_even *= 2\n    total_permutations *= 2\n \n    # Simplify the fraction to get m and n as coprime integers\n    from math import gcd\n    divisor = gcd(total_even, total_permutations)\n    m = total_even // divisor\n    n = total_permutations // divisor\n    \n    return m + n\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7*3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n    \n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_per_correct + incorrect * points_per_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n    while factorial_zeros < 28:\n        n += 1\n        temp_n = n\n        count_fives = 0\n        while temp_n % 5 == 0:\n            temp_n //= 5\n            count_fives += 1\n        factorial_zeros += count_fives\n    return n - 1\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    a_rate = 1 / 36\n    b_rate = 1 / 48\n    a_time = 0\n    b_time = 0\n    total_fill = 0\n    time = 0\n\n    while total_fill < 1:\n        if time % 4 == 0:\n            a_time = 1\n            b_time = 0\n        elif time % 4 == 1:\n            a_time = 0\n            b_time = 2\n        elif time % 4 == 2:\n            a_time = 2\n            b_time = 0\n        else:\n            a_time = 0\n            b_time = 1\n\n        total_fill += a_time * a_rate + b_time * b_rate\n        time += a_time + b_time\n\n    return time\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n    \n    # equations based on the problem statement\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n    \n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas initially buys 10 bottles of mineral water\n    current_bottles = 10\n    \n    # The shop owner lends him 1 empty bottle\n    empty_bottles = 1\n    \n    # Total drinkable bottles including the lent one\n    total_drinked = current_bottles\n    \n    while current_bottles + empty_bottles >= 2:\n        # Combine empty bottles with the ones Lucas has just drunk\n        exchangeable = (current_bottles + empty_bottles) // 2\n        \n        # Remaining empty bottles\n        empty_bottles = (current_bottles + empty_bottles) % 2\n        current_bottles = exchangeable\n        \n        # Add the exchanged bottles to total drinked\n        total_drinked += exchangeable\n        \n    return total_drinked\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_initial = 320\n    sweets_final = 348\n    weeks = 7\n    sweets_bought_per_week = 30\n\n    sweets_eaten_per_week = ((sweets_initial + sweets_bought_per_week * weeks) - sweets_final) / weeks\n\n    return int(sweets_eaten_per_week)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(\"281\" + str(digit))\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    a_drain_rate = 1 / 10  # Rate at which pool A drains per minute\n    b_drain_rate = 1 / 6   # Rate at which pool B drains per minute\n\n    # Let t be the time in minutes after which A's waterline height is 3 times that of B's\n    # The initial water volume is the same for both, so we can compare the rates directly\n    # When A's height is 3 times B's, A has drained 1/4 of its water, and B has drained 3/4 of its water.\n    # The respective drained volumes as a function of time are a_drain_rate * t for A, and b_drain_rate * t for B.\n    \n    # Set up the equation relating the drained amounts:\n    # a_drain_rate * t / b_drain_rate * t = 1/4 / 3/4\n    # Simplify the equation:\n    # a_drain_rate * t = b_drain_rate * t * (1/4) / (3/4)\n    # Solve for t:\n    t = (1/4) / (3/4) * (b_drain_rate / a_drain_rate)\n\n    return t\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Chenxi and Yue Ying have initially\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n\n    # Define the equation based on the problem statement\n    equation1 = Eq(chenxi, yue_ying + 5)\n    # Define the equation after Chenxi gives Yue Ying 10 sweets\n    equation2 = Eq((chenxi - 10) - (yue_ying + 10), chenxi - yue_ying)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (chenxi, yue_ying))\n\n    # The difference in the number of sweets after Chenxi gives Yue Ying 10 sweets\n    difference_after = solutions[chenxi] - 10 - (solutions[yue_ying] + 10)\n\n    return difference_after\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # The question provides no details on what \"Time Problem\" means in this context.\n    # Given the number \"1\" and no further instructions, the only reasonable solution\n    # with the provided information is to return 1.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    ans = 0.35 * 200\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(2, 69):\n        if isprime(i) and isprime(69 - i):\n            return 69 - 2 * i\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = (4 * goats) - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let x be the original number of students in school A\n    # Let y be the original number of students in school B\n    # Therefore, we have the following equations:\n    # x + y = 1050 (total number of students)\n    # x - 20 = y + 10 (school A has 10 more students than school B after the transfer)\n\n    # We can solve the two equations to find x and y\n    # x + y = 1050 -> x = 1050 - y\n    # Replacing x in the second equation we get (1050 - y) - 20 = y + 10\n    # 1030 - y = y + 10\n    # 1030 - 10 = y + y\n    # 1020 = 2y\n    # y = 1020 / 2\n    y = 1020 // 2  # Using integer division for the number of students\n\n    # Now that we have y, we can find x\n    x = 1050 - y\n\n    return x\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_score = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * correct_points + incorrect * incorrect_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Speeds in km/h\n    speed1 = 3\n    speed2 = 7\n\n    # Time differences in minutes converted to hours\n    time_diff1 = 12 / 60\n    time_diff2 = -8 / 60\n\n    # Using the formula: distance = speed * time\n    # Let the actual time taken at the speed of 3 km/h be t hours\n    # Therefore, at 3 km/h the time taken is t + 12/60 hours\n    # At 7 km/h the time taken is t - 8/60 hours\n    # Thus, the distance should be the same for both scenarios, so we have the equation:\n    # 3 * (t + 12/60) = 7 * (t - 8/60)\n    # Solving the linear equation for t\n\n    # Coefficients for t\n    coeff_t_speed1 = 3\n    coeff_t_speed2 = 7\n\n    # Constant terms\n    const_speed1 = 3 * (12 / 60)\n    const_speed2 = 7 * (8 / 60)\n\n    # Bringing terms involving t to one side and constants to the other side\n    t = (const_speed2 - const_speed1) / (coeff_t_speed1 - coeff_t_speed2)\n\n    # Calculate the distance using either of the two speed-time relationships\n    distance = speed1 * (t + time_diff1)\n\n    return distance\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_classes = 10\n    \n    # Writing class students including those taking both classes\n    writing_and_math_students = total_students - neither_classes \n    \n    # Writing class only students\n    writing_only_students = writing_and_math_students - math_students\n\n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    digits = ['2', '0', '0', '3', '8', '7']\n    max_prime = None\n    \n    for number in range(50, 1, -1):\n        if isprime(number):\n            num_str = str(number)\n            if all(num_str.count(digit) <= digits.count(digit) for digit in num_str):\n                max_prime = number\n                break\n\n    return max_prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_sum = 54 * 5  # Total sum of the 5 numbers\n    first_two_sum = 48 * 2  # Sum of the first two numbers\n    last_three_sum = total_sum - first_two_sum  # Sum of the last three numbers\n    average_of_last_three = last_three_sum / 3  # Average of the last three numbers\n    \n    return average_of_last_three\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy, father = symbols('teddy father')\n\n    # When Teddy was 5, his father's age was 7 times Teddy's age\n    equation1 = Eq(father, 7 * 5)\n    \n    # Find how much older father is than Teddy\n    age_difference = father - 5\n\n    # Father will be 40 years old\n    teddy_age_when_father_40 = 40 - age_difference\n\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # The max number of slices is obtained when each new cut crosses all previous cuts.\n    # The first cut gives 2 slices.\n    # Each subsequent cut can create at most n new slices, where n is the number of the cut.\n\n    slices = 0\n    for i in range(1, 5):  # We perform 4 cuts\n        slices += i\n        \n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n    \n    # Find rabbit's position from the left\n    rabbit_position_from_left = elephant_position_from_left + toys_between_rabbit_and_elephant + 1\n    \n    # Find rabbit's position from the right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 110):  # Pages 1 to 109\n        digits = [int(digit) for digit in str(page)]\n        total_sum += sum(digits)\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = symbols('pink_dolphins')\n    equation = Eq(11 * pink_dolphins + pink_dolphins, 48)\n    solution = solve(equation, pink_dolphins)\n    return solution[0]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # Area of a triangle = (1/2) * base * height\n    # height = (Area * 2) / base\n    height = (area * 2) / base\n    return height\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    expression = \"15+5*5+15-6+7\"\n    # Since we want to maximize the result, we want to multiply the largest numbers\n    # and sum the rest. One way to maximize would be to ensure 5*5 is calculated first,\n    # then add the large numbers: (15+((5*5)+15)-6)+7\n    # The additions and subtractions can be adjusted accordingly, but the core maximization\n    # is to multiply 5 by 5 before adding other numbers.\n    # The following uses Python's eval to test different bracket placements.\n    \n    # Generate multiple expressions with different bracket pair placements\n    expressions = [\n        f\"({expression[:6]}){expression[6:]}\",\n        f\"{expression[:4]}({expression[4:]})\",\n        f\"{expression[:8]}({expression[8:]})\",\n        f\"({expression[:2]}){expression[2:]}\",\n        f\"{expression[:6]}({expression[6:]})\",\n        f\"{expression[:11]}({expression[11:]})\",\n        f\"{expression[:9]}({expression[9:]})\",\n        f\"{expression[:13]}({expression[13:]})\",\n        f\"({expression[:11]}){expression[11:]}\",\n        f\"({expression[:13]}){expression[13:]}\"\n    ]\n    \n    # Evaluate each expression and keep track of the maximum result\n    max_value = None\n    for expr in expressions:\n        parts = expr.split(')')\n        for i in range(len(parts) - 1):\n            for j in range(i+1, len(parts)):\n                new_expr = parts[i] + \")\" + parts[j] + \")\"\n                # Add opening brackets at the starting of parts that were split\n                new_expr = \"(\"*(new_expr.count(\")\") - new_expr.count(\"(\")) + new_expr\n                try:\n                    # Calculate the expression and update the maximum value\n                    value = eval(new_expr)\n                    if max_value is None or value > max_value:\n                        max_value = value\n                except SyntaxError:\n                    continue\n    \n    return max_value\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # \"there were equal number of tables and chairs\"\n    equation1 = Eq(tables, chairs)\n\n    # \"After selling away $42 tables...\n    # ...bringing in $24 chairs, the number of chairs will be 4 times as many as tables\"\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 700 * 0.35\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = left_of_candy + right_of_candy + candy_cabinet\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit even numbers.\n    for i in range(100, 1000):\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]  # Split the number into its digits\n            if sum(digits) == 7:  # Check if the sum of digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    numerator = 2**2019\n    denominator = 4**982 - 2**1963\n    \n    # Since 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    # We reframe the denominator as 2^1964 - 2^1963\n    denominator_simplified = 2**1963 * (2 - 1)\n    \n    # Now we take the remainder of the numerator divided by the denominator\n    remainder = numerator % denominator_simplified\n    \n    # Finally, we find the remainder of the previous result divided by 5\n    ans = remainder % 5\n    \n    return ans\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n\n    total_boxes = boxes_per_class * number_of_classes\n\n    return total_boxes\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    equation3 = Eq(cars, lorries)\n\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) / 2) ** 2\n    sum_of_numbers = n * (n + 1) / 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let's denote the mass of the empty jar as j and the mass of one chocolate as c.\n    # From the given information, we can form two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n    \n    # We can solve these two equations to find j (mass of the jar) and c (mass of one chocolate).\n    # Subtracting the first equation from the second gives us:\n    # 12c = 317 - 185\n    # Thus, c = (317 - 185) / 12\n\n    c = (317 - 185) / 12\n    # Now we can use c to find j using the first equation:\n    # j = 185 - 5c\n    j = 185 - 5 * c\n    \n    # To find the mass of the jar with 10 chocolates, we would calculate:\n    # mass_with_10_chocolates = j + 10c\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, kristoff, olaf = symbols('ana kristoff olaf')\n\n    equation1 = Eq(ana - olaf, 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, kristoff, olaf))\n\n    return solutions[kristoff] - solutions[ana]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # Initialize the highest possible value\n    max_val = 0\n\n    # From the divisibility rules, we know:\n    # Divisible by 2: The last digit must be 0, 2, 4, 6 or 8\n    # Divisible by 5: The last digit must be 0 or 5\n    # Divisible by 3: The sum of the digits must be divisible by 3\n\n    # Since it must be divisible by 2 and 5, the last digit must be 0\n    # Iterate over possible third digits (0-9)\n    for third_digit in range(0, 10):\n        # Form the number with the current third digit and last digit as 0\n        number = int(f\"49{third_digit}0\")\n\n        # Check divisibility by 3 by summing the digits and checking if the sum is divisible by 3\n        if sum(int(d) for d in str(number)) % 3 == 0:\n            # Update max_val if this number is larger\n            max_val = max(max_val, number)\n\n    return max_val\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700 # total weight of the sugar solution in grams\n    sugar_concentration = 0.32 # concentration of sugar in the sugar solution\n\n    sugar_weight = total_weight * sugar_concentration \n    water_weight = total_weight - sugar_weight # weight of the water is the total weight minus the weight of the sugar\n    \n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Initialize the smallest possible seven-digit number given the constraints\n    smallest_num = 1992000\n    while True:\n        # We check only numbers ending in 0 or 5 for divisibility by 5\n        # Since the number have to end with 0 to also be divisible by 2\n        # Check divisibility by 2, 3, 5, and 11\n        if smallest_num % 2 == 0 and smallest_num % 3 == 0 and smallest_num % 5 == 0 and smallest_num % 11 == 0:\n            return smallest_num\n        smallest_num += 10  # Increment by 10, since the last digit must be 0\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n    distance_between_trees = total_length / (number_of_trees - 1)\n    return distance_between_trees\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    apples, pears, mangoes, total_cost = symbols('apples pears mangoes total_cost')\n    \n    # Given ratios and cost information\n    cost_per_apple = 0.6\n    total_cost = 150\n    ratio_apples_pears = 3 / 2\n    ratio_pears_mangoes = 1 / 5\n    \n    # Equation 1: John bought 4/5 as many pears as apples\n    equation1 = Eq(pears, (4/5) * apples)\n    # Equation 2: John bought 2/5 as many mangoes as apples\n    equation2 = Eq(mangoes, (2/5) * apples)\n    # Equation 3: The amount of money spent on apples is to pears as 3:2\n    equation3 = Eq(cost_per_apple * apples, ratio_apples_pears * (total_cost / (ratio_apples_pears + ratio_pears_mangoes + ratio_apples_pears * ratio_pears_mangoes)))\n    # Equation 4: The total cost is 150\n    equation4 = Eq(cost_per_apple * apples + (total_cost / (ratio_apples_pears + ratio_pears_mangoes + ratio_apples_pears * ratio_pears_mangoes)) + (total_cost / (ratio_apples_pears + ratio_pears_mangoes + ratio_apples_pears * ratio_pears_mangoes)) * ratio_pears_mangoes, total_cost)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apples, pears, mangoes))\n    \n    # Calculate and return the total number of fruits\n    total_number_of_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    return total_number_of_fruits\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age after 3 years is 9.\n    hazel_age_in_3_years = 9\n    # Jessica is 3 years younger than Hazel.\n    jessica_age_in_3_years = hazel_age_in_3_years - 3\n    \n    # Hazel's age next year.\n    hazel_age_next_year = hazel_age_in_3_years - 2\n    # Jessica's age next year.\n    jessica_age_next_year = jessica_age_in_3_years - 2\n\n    # Total age next year.\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_total = 366\n    second_half_avg_per_month = 65\n    months_in_half_year = 6\n\n    second_half_total = second_half_avg_per_month * months_in_half_year\n    total_for_year = first_half_total + second_half_total\n    months_in_year = 12\n\n    avg_per_month_last_year = total_for_year / months_in_year\n\n    return avg_per_month_last_year\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from fractions import Fraction\n\n    # Correcting the mistake in Adriana's workings.\n    # Girls part is calculated incorrectly. Should be calculated from the remaining part, not total.\n    girls_part_of_remaining = Fraction(1, 5)\n    \n    # Adults part is correct.\n    adults_part = Fraction(2, 7)\n    \n    # Remaining part after taking out adults.\n    remaining_part = Fraction(1) - adults_part\n    \n    # Girls part of the total audience.\n    girls_part = girls_part_of_remaining * remaining_part\n    \n    # Difference in Adriana's workings should be the difference in total parts, not the difference in people.\n    difference_in_parts = adults_part - girls_part\n    \n    # 80 more adults than girls is the difference, calculate total parts based on the correct difference.\n    one_part_in_people = 80 / difference_in_parts\n    \n    # Calculate total people at the play.\n    total_people = one_part_in_people * Fraction(1)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\nfrom collections import Counter\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = Counter(word)\n    total_letters = len(word)\n    ways = factorial(total_letters)\n    \n    for count in letter_counts.values():\n        ways //= factorial(count)\n    \n    return ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # average score of 6 assignments\n    average_6 = 92\n    # total score for 6 assignments\n    total_6 = average_6 * 6\n    \n    # average score of first 5 assignments\n    average_5 = 94\n    # total score for first 5 assignments\n    total_5 = average_5 * 5\n    \n    # score of the sixth assignment\n    score_6 = total_6 - total_5\n\n    return score_6\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_now = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_initial = cars_now - cars_entered + cars_exited\n    return cars_initial\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Given equation: (((x * 2) / 4) ** 2 - 4) / 10 = 6\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    water_per_day = 10\n    leak_per_night = 3\n    days_passed = 0\n    current_water = 3\n\n    while current_water < total_water_needed:\n        days_passed += 1\n        current_water += water_per_day\n        if current_water >= total_water_needed:\n            break\n        current_water -= leak_per_night\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    # days between visits for Amy and Ginny\n    amy_interval = 24\n    ginny_interval = 36\n\n    # calculate the least common multiple (LCM) of their visit intervals\n    lcm = (amy_interval * ginny_interval) // gcd(amy_interval, ginny_interval)\n\n    return lcm\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    # cost price per pair of shoes is $65\n    cost_price_per_pair = 65\n    # selling price per pair of shoes is $74\n    selling_price_per_pair = 74\n    # profit earned from sale\n    total_profit = 440\n    # remaining pairs of shoes\n    remaining_pairs = 5\n    \n    # Profit for each pair of shoes sold\n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n    \n    # Total pairs sold to earn total profit\n    total_pairs_sold = total_profit // profit_per_pair\n    \n    # Initial pairs of shoes purchased before sale\n    initial_pairs_purchased = total_pairs_sold + remaining_pairs\n    \n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_number = len(str(current_number))\n        if digits_written + digits_in_number > total_seconds:\n            break\n        digits_written += digits_in_number\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    ans = max(amounts) - min(amounts)\n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell might pick all other colored marbles before picking a green one.\n    # Therefore, we calculate the total number of non-green marbles.\n    blue = 5\n    white = 9\n    black = 2\n    # The worst-case scenario is picking all non-green marbles first\n    non_green_marbles = blue + white + black\n    \n    # To guarantee a green marble, Darrell must draw one more than the number of non-green marbles.\n    darrell_must_draw = non_green_marbles + 1\n    \n    return darrell_must_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    climbed_distance = 6 * 6 + 2  # 6 days of 6 metres, 7th day 2 metres\n    sliding_distance = 0\n    remaining_distance = 20 - climbed_distance\n\n    # Snail must slide down such that, the day after the 7th day it reaches the top but doesn't exceed it.\n    while climbed_distance + 6 - sliding_distance < 20:\n        sliding_distance += 1\n\n    return sliding_distance\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    growth_rate = 3\n    death_rate = 0.5\n\n    rabbits = initial_rabbits\n    for _ in range(years):\n        rabbits = rabbits * growth_rate * death_rate\n\n    return int(rabbits)\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # There are 8 players in a single round-robin tournament\n    # In a round-robin tournament, each player plays every other player once.\n    # Hence, each player will play 7 games (since there are 8 players).\n    \n    # Now, since each player has a different number of wins,\n    # and the question asks for the number of wins the champion has,\n    # we can deduce that they must have won all their matches\n    # because if they had lost any match, there would have been another\n    # player with the same number of wins.\n    \n    # Thus, the champion must have won 7 matches.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight1 = 6\n    nickel1 = 45 / 100\n    weight2 = 14\n    nickel2 = 60 / 100\n\n    total_weight = weight1 + weight2\n    total_nickel = (weight1 * nickel1) + (weight2 * nickel2)\n\n    percent_nickel = (total_nickel / total_weight) * 100\n\n    return percent_nickel\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13 - x1):\n            for x3 in range(1, 13 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                max_product = max(max_product, x1 * x2 * x3 * x4)\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = symbols('years')\n\n    equation = Eq(mother_age + years, 3 * (edward_age + years))\n    ans = solve(equation, years)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # 1 cm to 6 m\n    plan_length_cm = 5  # Playground length on the plan in cm\n    real_length_m = plan_length_cm / scale_ratio  # Real length in meters\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):  # Iterate over 2-digit numbers\n        if num % 3 == 1 and num % 5 == 1:  # Check the remainders\n            return num  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let the walking speed of Candy be x meters per minute\n    # Then the walking speed of Ivy is x + 20 meters per minute\n    \n    # Since Candy started 6 minutes late, Ivy walked for a total of 6 + 12 = 18 minutes\n    # Candy walked for 12 minutes\n    \n    # We can then set up the following equation to find the distance each person walked\n    # Ivy's distance + Candy's distance = 1200 meters\n    \n    # Ivy's distance: (x + 20) * 18 because Ivy walked for 18 minutes\n    # Candy's distance: x * 12 because Candy walked for 12 minutes\n    \n    # The equation becomes: (x + 20) * 18 + x * 12 = 1200\n    # Solve for x to find Candy's walking speed\n    \n    # Rearrange the equation:\n    # 18x + 20*18 + 12x = 1200\n    # 30x + 20*18 = 1200\n    # 30x = 1200 - 20*18\n    # x = (1200 - 20*18) / 30\n    \n    speed_candy = (1200 - 20*18) / 30\n    return speed_candy\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    num_students = 0\n    while True:\n        # Let's consider the initial square array has side 's' \n        # and the total students form s^2 + 11\n        # When we add one row and one column, the new square has side (s+1)\n        # and needs s^2 + 11 + 12 students in total\n        # So our equation is (s+1)^2 = s^2 + 23\n        # which simplifies to s^2 + 2s + 1 = s^2 + 23 => 2s + 1 = 23 => s = 11\n        \n        s = num_students ** 0.5 # square root to get side length\n        if s.is_integer() and ((s+1)**2 == num_students + 23):\n            break\n        num_students += 1\n\n    return num_students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    ans = total_money // cost_per_box\n\n    return ans\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_average = 30\n    overall_average = 26\n\n    # Let x be the number of girls\n    girls_average = 20\n\n    # Equation: (boys_average * boys + girls_average * x) / (boys + x) = overall_average\n    # Solve for x: overall_average * (boys + x) = boys_average * boys + girls_average * x\n\n    # Rearrange the equation:\n    # overall_average * boys + overall_average * x = boys_average * boys + girls_average * x\n    # overall_average * x - girls_average * x = boys_average * boys - overall_average * boys\n    # x * (overall_average - girls_average) = boys * (boys_average - overall_average)\n\n    girls = (boys * (boys_average - overall_average)) // (overall_average - girls_average)\n\n    return girls\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    equation = Eq(pen + pencil, 4.5)\n\n    pen_price = solve(equation, pen)[0]\n    \n    return pen_price\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_tank_A = 673\n    difference = 56\n    oil_tank_B = oil_tank_A + difference\n    return oil_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_balls = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_balls + 1):\n        volleyballs = total_balls - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    to_lily = (3/4) * total_candy\n    remaining_after_lily = total_candy - to_lily\n    to_brother = (1/3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - to_brother\n\n    return remaining_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(n/d for d in range(2, 61) for n in range(1, d))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_used = 0\n    last_page = 0\n    while digits_used < 300:\n        last_page += 1\n        digits_used += len(str(last_page))\n    if digits_used > 300:\n        last_page -= 1\n    return last_page\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknowns: mass of the candies for each flavor in one container\n    strawberry, chocolate, mint = symbols('strawberry chocolate mint')\n\n    # System of equations based on the problem description\n    equation1 = Eq(strawberry / (strawberry + chocolate + mint), 2/5)\n    equation2 = Eq(strawberry / (strawberry + chocolate + mint), 2/7)\n    equation3 = Eq(strawberry / (strawberry + chocolate + mint), 2/9)\n    equation4 = Eq(5*(strawberry + chocolate + mint), 1371)  # Total mass of all 3 containers\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (strawberry, chocolate, mint))\n\n    # Calculating the mass of all strawberry candies in all 3 containers\n    mass_of_strawberry = solutions[strawberry] * (5 + 7 + 9)\n\n    return mass_of_strawberry\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n    num_hoops = 6\n    \n    total_ball_cost = ball_cost * num_balls\n    total_hoop_cost = total_cost - total_ball_cost\n    hoop_cost = total_hoop_cost / num_hoops\n    \n    return hoop_cost\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variables for Roy's and Dennis' initial amounts\n    roy, dennis = symbols('roy dennis')\n    \n    # Equation 1: The sum of Roy's and Dennis' money is $340\n    equation1 = Eq(roy + dennis, 340)\n    # Equation 2: Dennis' remaining money (after spending 1/4) is twice of Roy's remaining money (after spending 2/3)\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2*roy / 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Dennis' money after spending 1/4 of it\n    dennis_remaining = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_remaining\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "import math\n\ndef solution():\n    # Factorize 693 into its prime factors\n    factors_693 = {3: 1, 7: 1, 11: 1}\n    \n    # For a number to be a perfect square, all its prime factors should have even powers.\n    # Determine the smallest number whose product with 693 will make all the prime powers even.\n    smallest_number = 1\n    for prime, power in factors_693.items():\n        if power % 2 != 0:  # If the power is odd\n            # Multiply by the prime factor to make the power even\n            smallest_number *= prime\n    \n    return smallest_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of each term\n    # The unit digit of 13^x follows a pattern: 3, 9, 7, 1, 3...\n    # The cycle length for 13 is 4\n    unit_digit_13 = (13 ** (242 % 4)) % 10\n    \n    # The unit digit of 17^x follows a pattern: 7, 9, 3, 1, 7...\n    # The cycle length for 17 is 4\n    unit_digit_17 = (17 ** (379 % 4)) % 10\n    \n    # The unit digit of 4^x is 4 if x is odd, and 6 if x is even (starting from 4^1)\n    unit_digit_4 = 6 if (2012 % 2 == 0) else 4\n\n    # Calculate the unit digit of the sum\n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n    container_volume = 5\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n    equation1 = Eq(marry, alexis * 7/5)\n    equation2 = Eq(charlotte_final, charlotte_initial + charlotte_initial * 80/100)\n    equation3 = Eq(charlotte_final, marry - 0.20 * marry + alexis - 0.20 * alexis)\n    equation4 = Eq(marry - 0.20 * marry, 20 + charlotte_final)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3 1/2 kg converted to 3.5 kg\n    cost_per_kg = 7.50\n    total_cost = steak_weight * cost_per_kg\n    money_in_hand = 20\n    extra_money_needed = total_cost - money_in_hand if total_cost > money_in_hand else 0\n    return extra_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n    \n    position_from_end = total_people - position_from_start + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n\n    # Equation representing the total mass\n    # 6 light balls + 12 (since heavy is twice) light balls = 65.7 kg\n    equation = Eq(6 * x + 6 * (2 * x), 65.7)\n\n    # Solve the equation for x\n    mass_light_bowling_ball = solve(equation, x)\n\n    # Return the mass of a light bowling ball to the nearest kg\n    ans = round(mass_light_bowling_ball[0])\n    \n    return ans\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be 1-9 (can't be 0)\n        for j in range(0, 10):  # The second digit can be 0-9\n            # As it is a palindromic number, the third digit is the same as the second and the fourth is the same as the first\n            # Hence no need to loop for third and fourth digits, it will be the same as the second and first respectively\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # Let's denote the following:\n    # (A + B) / 2 = 50 -> A + B = 100 (Equation 1)\n    # (B + C) / 2 = 43 -> B + C = 86 (Equation 2)\n    # (A + C) / 2 = 45 -> A + C = 90 (Equation 3)\n    \n    # Adding all three equations, we get:\n    # 2A + 2B + 2C = 276\n    # Dividing both sides by 2, we get:\n    # A + B + C = 138\n    \n    # Hence the average of A, B, and C is:\n    # (A + B + C) / 3 = 138 / 3\n    ans = 138 / 3\n    return ans\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    container_A = 42\n    container_B = 4 * container_A\n    container_C = 2 * container_B\n    \n    return container_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    jay_pens = 6 * denise_pens\n    total_pens = denise_pens + jay_pens\n\n    equation = Eq(total_pens, 126)\n    solutions = solve(equation, denise_pens)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n\n    # Benson bought a calculator for $34\n    # Clive bought a badminton racket for $63\n    # They then had the same amount of money left\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    # Return how much Clive had at first\n    return solutions[clive]\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # cost of 5 chocolate bars\n    chocolate_cost = 5 * 1.26\n\n    # total cost of 6 identical cookies\n    cookies_cost = chocolate_cost\n\n    # cost of one cookie\n    cookie_price = cookies_cost / 6\n\n    # cost of 4 cookies\n    cost_of_four_cookies = 4 * cookie_price\n\n    # initial amount of money\n    initial_money = 9.05\n\n    # calculate the remaining money after buying 4 cookies\n    remaining_money = initial_money - cost_of_four_cookies\n\n    return remaining_money\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys / 3 + girls / 2, 250)  # Total balls shared among children\n    equation2 = Eq(boys + girls, 650)  # Total number of children\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, original_total = symbols('girls boys original_total')\n\n    # After 25 girls went to play, the girls became 2/3 of the boys\n    equation1 = Eq(girls - 25, 2/3 * (boys))\n\n    # After that, 15 boys went to play soccer, and the number of boys and girls became equal\n    equation2 = Eq(boys - 15, girls - 25)\n\n    # Expressing the total number of students as the sum of boys and girls\n    equation3 = Eq(original_total, boys + girls)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (girls, boys, original_total))\n\n    return solutions[original_total]\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the value of all the 10-cent coins\n    # Let y be the value of all the 50-cent coins\n    # The ratio of the value of 10-cent coins to 50-cent coins is 8:3\n    # Therefore, x / y = 8 / 3\n    # The total value of all the coins is $75.90, which is 7590 cents\n    # So, x + y = 7590\n    \n    # From the equation x / y = 8 / 3, we get 3x = 8y\n    # We can also write y = (3/8) * x\n    # Substituting y in the second equation we get x + (3/8) * x = 7590 cents\n    # Combining like terms, we get (11/8) * x = 7590\n    # Solving for x, we have x = (8/11) * 7590\n    \n    x = (8/11) * 7590\n    y = 7590 - x\n\n    return y\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # 8 * 11 = X * 9 + 34\n    # Find X such that this equation holds true\n    left_hand_side = 8 * 11\n    for x in range(1, left_hand_side):\n        if x * 9 + 34 == left_hand_side:\n            return x\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n\n    midnight_temperature = midday_temperature - temperature_drop\n\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_rate = 0.80\n    savings = total_spent / (1 - discount_rate)\n    return savings - total_spent\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # area of the square base in cm^2\n    hole_area = 3 * 3  # area of the square hole in cm^2\n    effective_base_area = base_area - hole_area  # area of the base with hole cut out in cm^2\n\n    # volume of prism = base area * height\n    # given the volume and base area with hole cut out, solve for height\n    height = 320 / effective_base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as one unit, then there are 7 units to arrange around the table.\n    # The table is circular, so we fix one unit and arrange the rest which gives 6! arrangements.\n    units_arrangement = factorial(6)\n\n    # Amy and Judy can arrange within their unit in 2! ways.\n    amy_judy_arrangement = factorial(2)\n\n    # The total number of different orders is the product of the two arrangments.\n    total_arrangements = units_arrangement * amy_judy_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # Base case: with n cuts, we can divide into a maximum of n*(n+1)/2 + 1 pieces\n    # We need to solve for n*(n+1)/2 + 1 >= 46\n    # Solve for n using a basic loop since it's a small number\n    n = 0\n    while n * (n + 1) / 2 + 1 < 46:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize the count and current number\n    count = 0\n    current_number = 0\n    # Iterate until we reach the 2008th number in the sequence\n    while count < 2008:\n        current_number += 1  # Increase the current_number which represents the current block's max number\n        for i in range(1, current_number+1):  # Loop within this block\n            count += 1  # Increase the sequence count\n            if count == 2008:  # Check if the sequence count matches the 2008th element\n                return i  # If yes, return the current sequence element\n\n# Get the answer\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5  # weight of one x in grams\n    balance_equation = 3 * x_weight / 10  # 3x balance with 10y, so 1y is 3x/10\n    y_weight = balance_equation\n\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    return sum(sequence)\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cucumbers = symbols('cucumbers')\n    tomatoes = Eq(3 * cucumbers + 3, 27)\n    \n    number_of_cucumbers = solve(tomatoes, cucumbers)[0]\n\n    return number_of_cucumbers\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    \n    # There are 3 choices for the first digit, 2 for the second, and 1 for the third\n    count = len(digits) * (len(digits) - 1) * (len(digits) - 2)\n    \n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit should be from 1 to 9 for a three-digit number\n        for j in range(10):  # Second and third digits should be from 0 to 9\n            for k in range(10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    d = 6\n    a16 = 100\n    a1 = a16 - d * (16 - 1)\n    total_sum = (n * (2 * a1 + (n - 1) * d)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining_bags = total_bags - given_away\n    return remaining_bags\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris wants to leave 6 matches for Dylan initially,\n    # because no matter Dylan picks 1 or 2 matches next,\n    # Chris can always pick 1 or 2 matches in such a way\n    # to leave 4 matches for Dylan on his next turn\n    # and follow a winning strategy to always leave a \n    # non-winning position for Dylan.\n\n    # Chris can take away 1 match in the first turn,\n    # leaving Dylan with 6 matches, which is a non-winning position for Dylan.\n    \n    chris_first_move = 1\n    return chris_first_move\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for A, B, C in permutations(range(10), 3):\n        if A != 0:\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:  # A and D cannot be 0 as they are the 1st digit in a 4-digit number.\n            continue\n        ABAC = 1000*A + 100*B + 10*A + C\n        DBEC = 1000*D + 100*B + 10*E + C\n        ACEDC = 10000*A + 1000*C + 100*E + 10*D + C\n        \n        if ABAC + DBEC == ACEDC:\n            return DBEC\n    \nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time = (9 * 60) + 23  # convert 9.23am to minutes\n    end_time = (13 * 60) + 6  # convert 1.06pm to minutes (13 because 1pm is 13 in 24-hour format)\n\n    difference = end_time - start_time  # find the difference in minutes\n\n    return difference\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    # Using the difference of two squares formula a^2 - b^2 = (a+b)(a-b)\n    a = 64\n    b = 36\n    difference_of_squares = (a - b) * (a + b)\n    return difference_of_squares\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming the number of restaurants available to choose from is given as per the below variable.\n    number_of_restaurants = 10\n    return number_of_restaurants\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1,10)) + sum(range(1,9))\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50.\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    # A notebook and a pencil case cost $6.\n    equation2 = Eq(notebook + pencil_case, 6)\n    # A pencil case and an eraser cost $8.\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    # Calculating the given alternating series manually by summing up specific pairs:\n    # The series pairs elements (positive,negative) in the following way: (53,-50),(47,-44),(41,-38),(35,-32),(29,-26),(23,-0)\n    # For each paired elements we calculate the result then sum them up\n    ans = (53 - 50) + (47 - 44) + (41 - 38) + (35 - 32) + (29 - 26) + (23 - 0)\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8 \n    time_taken = distance / speed\n    \n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 3):\n        # Assign values from permutation\n        A, E, _ = p\n        # Ensure A is not zero and E not equal to A\n        if A == 0 or E == A:\n            continue\n\n        # Form the number based on the problem's pattern\n        value = A * 1000 + E * 100 + E * 10 + A\n        return value\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age_for_4people = 4 * 25\n    harry_age = 14\n    harrys_mom_age = 36\n    harrys_sister_age = 10\n\n    harrys_dad_age = total_age_for_4people - (harry_age + harrys_mom_age + harrys_sister_age)\n\n    return harrys_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Known typical height of classroom door\n    typical_height_cm = 200  # We assume 200 cm is the typical classroom door height.\n\n    # Convert other measurements to centimeters\n    m_to_cm = 100  # Conversion factor from meters to centimeters.\n\n    height_option_m = 83 * m_to_cm \n    height_option_cm = 200\n    height_option_small_cm = 8\n    height_option_half_m = 0.5 * m_to_cm\n\n    # Store the heights in a list\n    heights_cm = [height_option_m, height_option_cm, height_option_small_cm, height_option_half_m]\n\n    # Find the closest height to the typical height\n    closest_height = min(heights_cm, key=lambda x: abs(x - typical_height_cm))\n\n    return closest_height\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_number = 0\n\n    while total_digits < 450:\n        page_number += 1\n        if page_number >= 10 and page_number < 100:\n            digits_per_page = 2\n        elif page_number >= 100:\n            digits_per_page = 3\n        total_digits += digits_per_page\n\n    # Since we add digits for the last page even if it exceeds 450, \n    # we must check if the last page should be counted or not.\n    if total_digits > 450:\n        page_number -= 1\n\n    return page_number\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Let x be the total money Leonard had originally.\n    # Let y be the money left after purchasing lunch.\n  \n    # After spending (5/12) of his money on lunch, he is left with (7/12) of his original money.\n    # So we can set up the following relationship:\n    # y = x * (7/12)\n\n    # In the evening, he spent (2/7) of the remainder (y) on dinner, leaving him with (5/7) of y:\n    # 45 = y * (5/7)\n\n    # Now we can substitute the expression for y from the first equation into the second:\n    # 45 = (x * (7/12)) * (5/7)\n    \n    # Simplify the equation to solve for x:\n    # 45 = x * (7/12) * (5/7)\n    # 45 = x * (35/84)\n    # x = 45 / (35/84)\n    # x = 45 * (84/35)\n    # Calculate the value for x:\n    x = 45 * (84/35)\n\n    return x\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits_per_page = 1\n    page = 0\n    count = 0\n\n    while count < total_digits:\n        page += 1\n        page_number = page\n        while page_number > 0:\n            count += 1\n            page_number //= 10\n            if count == total_digits:\n                return page\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 10  # (5 choose 2)\n    wins_by_others = 2 + 1 + 4 + 3\n    wins_by_gina = total_games - wins_by_others\n    return wins_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    \n    return 2 * difference\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants\n    angle = math.radians(20)  # convert degrees to radians for trigonometric functions\n    distance = 400  # distance down the slope in meters\n    friction_coefficient = 0.2\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Forces acting on the skier\n    force_gravity_parallel = g * math.sin(angle)\n    force_friction = friction_coefficient * g * math.cos(angle)\n\n    # Net acceleration along the slope\n    net_acceleration = force_gravity_parallel - force_friction\n\n    # Final speed calculation using the equation v^2 = u^2 + 2as\n    # u = initial velocity = 0 (starts from rest)\n    # v = final velocity\n    # a = net acceleration\n    # s = distance\n    final_velocity = math.sqrt(2 * net_acceleration * distance)\n\n    return final_velocity\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'e' be the number of correct answers Eddie had, and 'a' Avril's correct answers\n    e, a = symbols('e a')\n\n    # Define the system of linear equations based on the problem statement\n    # Each correct answer gives 10 points, each wrong answer gives -5 points\n    # Total score for Eddie (10e - 5(10 - e)) and for Avril (10a - 5(10 - a))\n    # Eddie and Avril scored 155 points in total\n    # Eddie scored 15 more points than Avril\n\n    equation1 = Eq(10*e - 5*(10 - e) + 10*a - 5*(10 - a), 155)\n    equation2 = Eq(10*e - 5*(10 - e), 10*a - 5*(10 - a) + 15)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (e, a))\n\n    # Return the number of correct answers for Avril\n    return solutions[a]\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    group_cost = 5 * 4 + 10  # cost of 4 shirts and 1 bag\n    number_of_groups = 300 // group_cost  # total amount spent divided by the cost per group\n    shirts_bought = number_of_groups * 4  # number of groups multiplied by the number of shirts per group\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men complete the job in 5 days, so 1 man's work rate is 1/(6*5) job per day\n    # 5 women complete the job in 6 days, so 1 woman's work rate is 1/(5*6) job per day\n    \n    man_rate = 1 / (6 * 5)\n    woman_rate = 1 / (5 * 6)\n    \n    # Combined rate for 10 men and 5 women\n    combined_rate = 10 * man_rate + 5 * woman_rate\n    \n    # Time to complete 1 job with combined rate is 1 job / combined rate\n    time_to_complete = 1 / combined_rate\n    \n    return time_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # original situation, thrice as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    \n    # after the changes, equal number of boys and girls\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the coffee bean types in kg\n    type_a_weight = 56\n    type_b_weight = 96\n    type_c_weight = 120\n\n    # Calculate the greatest common divisor (GCD) of the weights\n    gcd_ab = gcd(type_a_weight, type_b_weight)\n    greatest_mass = gcd(gcd_ab, type_c_weight)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    factors = []\n    for i in range(1, 36):\n        if 35 % i == 0:\n            factors.append(i)\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Start by giving each child one apple to satisfy the condition.\n    apples = 30 - 6\n    \n    # The remaining apples can be distributed among the 6 children.\n    # To minimize the maximum number any child receives, distribute as evenly as possible.\n    # Since there are 5 children other than the one receiving the max, take the ceiling of the division.\n    apples_per_child = apples // 5\n    \n    # The child with the most will have the apples_per_child plus the remainder if any.\n    max_apples = apples_per_child + (apples % 5)\n    \n    # Add back the initial apple given to each child.\n    max_apples += 1\n    \n    return max_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let's denote the number of apples as 'a'.\n    # Then, the number of bananas would be '2a' and the number of oranges '3a'.\n    # According to the question, the total number of fruits is 24:\n    # a + 2a + 3a = 24\n    # 6a = 24\n    # a = 24 / 6\n    a = 24 / 6\n    \n    # Number of bananas used is 2 times the number of apples\n    bananas = 2 * a\n    return int(bananas)\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n\n    # Assume all animals are chickens (with 2 legs each)\n    chickens = total_animals\n    rabbits = 0\n    \n    # Calculate legs if all animals were chickens\n    legs_with_all_chickens = chickens * 2\n    \n    # Calulate the difference in number of legs\n    leg_difference = total_legs - legs_with_all_chickens\n\n    # Since rabbits have 2 more legs than chickens, divide the difference by 2 to find the number of rabbits\n    rabbits = leg_difference // 2\n    \n    # Calculate the actual number of chickens based on number of rabbits\n    chickens = total_animals - rabbits\n    \n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # Start from the largest two-digit number which is 99 and go backwards\n    for num in range(99, 9, -1):  # Starting from 99 to 10 as 9 would not be two-digit\n        if num % 4 == 3 and num % 5 == 3:  # Must leave a remainder of 3 when divided by both 4 and 5\n            ans = num  # Assign the number that satisfies the condition to ans\n            break  # Exit the loop as we found the largest number\n    return ans\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_paint_ratio = 3\n    total_paint = 1\n    \n    red_paint = (red_paint_ratio / total_ratio) * total_paint\n    \n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of years in the future and Anna's age in the future\n    years = symbols('years')\n\n    # Anna's age in the future\n    anna_future_age = 8 + years\n    # Mother's age in the future\n    mother_future_age = 44 + years\n\n    # Equation where mother is 3 times as old as Anna in the future\n    equation = Eq(mother_future_age, 3 * anna_future_age)\n\n    # Solving the equation\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    short_ribbon_length = 40  # cm\n    long_ribbon_length = 70  # cm\n    may_short_ribbon_count = 7\n    nancy_long_ribbon_count = 18\n\n    # Convert 2.4m to cm\n    length_difference = 240  # cm\n\n    # Nancy's total length in cm\n    nancy_total_length = nancy_long_ribbon_count * long_ribbon_length\n\n    # May's total length in cm is Nancy's total length + length_difference\n    may_total_length = nancy_total_length + length_difference\n\n    # Calculate May's long ribbon count given her total length and number of short ribbons\n    x = may_total_length - (may_short_ribbon_count * short_ribbon_length)\n    \n    # Assuming that the number of ribbons has to be an integer, we can find out the number of long ribbons May has\n    may_long_ribbon_count = x / long_ribbon_length\n\n    # Total pieces of ribbon May has is the sum of long and short ribbons\n    may_total_ribbon_count = may_short_ribbon_count + may_long_ribbon_count\n\n    return int(may_total_ribbon_count)\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_value = 6\n    total_numbers = 8\n    total_sum = total_numbers * mean_value\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    quarter_money = total_money / 4\n    remaining_money = total_money - quarter_money\n    return remaining_money\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, blue = symbols('red blue')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(red + blue, 18)\n\n    solutions = solve((equation1, equation2), (red, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # The number of apples that the child with the most can get is minimized\n    # when the other children get the smallest number of distinct apples each.\n    # Start with 1 apple for the first child, 2 for the second, and so on.\n    total_apples = 50\n    # We calculate the number of apples given to the first 7 children in ascending order\n    min_apples = sum(range(1, 8))\n    \n    # The least possible number for the kid who gets the most is the remainder,\n    # since 50 apples must be distributed and each child must get a different number of apples.\n    max_apples_for_last_child = total_apples - min_apples\n\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let G be the total amount of grass in the grassland\n    # 8 cows for 10 days: 8 cows * 10 days = 80 cow-days = G\n    # 4 cows for 15 days: 4 cows * 15 days = 60 cow-days = G\n    # G is the same in both cases, so:\n    # 80 cow-days = 60 cow-days\n    # Now we want to feed cows for 5 days: ? cows * 5 days = G\n    # Let x be the number of cows that can be fed for 5 days\n    # x cows * 5 days = 80 cow-days (from the equation above)\n    # x = 80 cow-days / 5 days\n    x = 80 / 5\n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # mass of 12 packets in kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Given values\n    total_cost = 83\n    num_tapes = 3\n    tape_cost = 9\n    num_cds = 4\n\n    # Calculate the total cost of the tapes\n    total_tape_cost = num_tapes * tape_cost\n\n    # Subtract the total tape cost from the total cost to find the total CD cost\n    total_cd_cost = total_cost - total_tape_cost\n\n    # Since CDs are identical, divide the total CD cost by the number of CDs to find the cost of each CD\n    cd_cost = total_cd_cost / num_cds\n\n    return cd_cost\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    mistaken_divisor = 122\n    mistaken_result_diff = 99.396\n    true_divisor = 1.22\n\n    # Calculate the value which was divided by the mistaken divisor\n    mistaken_value = mistaken_result_diff * mistaken_divisor\n\n    # Calculate the true result by dividing it by the true divisor\n    true_result = mistaken_value / true_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    # Let x be the number of cards Hisham has\n    # Then Melissa has 2x cards\n    # x + 2x = 876\n    # 3x = 876\n    # x = 876 / 3\n    # x = 292 (Hisham's cards)\n    hisham_cards = 876 // 3\n    melissa_cards = 876 - hisham_cards\n    \n    # After Melissa gives some cards to Hisham, they both have the same number of cards\n    # Let y be the number of cards Melissa gives to Hisham\n    # New number of cards Melissa has = melissa_cards - y\n    # New number of cards Hisham has = hisham_cards + y\n    # hisham_cards + y = melissa_cards - y\n    # 2y = melissa_cards - hisham_cards\n    # y = (melissa_cards - hisham_cards) / 2\n    cards_to_give = (melissa_cards - hisham_cards) // 2\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Placeholder for the sequence\n    sequence = [None, None, None, 6, None, 15]\n\n    # Calculate the third and second number using the fourth and sixth number\n    sequence[2] = sequence[4] - sequence[3]\n    sequence[1] = sequence[3] - sequence[2]\n\n    # Calculate the fifth number using the fourth and sixth number\n    sequence[4] = sequence[5] - sequence[3]\n\n    # Calculate the seventh number using the fifth and sixth number\n    sequence.append(sequence[5] + sequence[4])\n\n    # Return the seventh number\n    return sequence[6]\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(3 * number + 8, 35)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    \n    # Find the greatest common divisor to divide boys and girls into groups\n    greatest_num_of_groups = gcd(boys, girls)\n\n    return greatest_num_of_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * sum(1 / ((5 * i + 1) * (5 * i + 6)) for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    nums = permutations([4, 7, 5, 8, 3])\n    odd_numbers = [int(''.join(map(str, num))) for num in nums if num[-1] % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    men_rate = 1 / (24 * 16)\n    women_rate = 1 / (16 * 24)\n    \n    combined_rate = (10 * men_rate) + (6 * women_rate)\n    time_to_complete = 1 / combined_rate\n    \n    return time_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for num in range(41):\n        if '2' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # Number of rectangles\n    n = 4\n    \n    # Maximum number of regions created by n rectangles can be calculated using the formula:\n    # R(n) = n^2 + n + 1\n    ans = n**2 + n + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's earnings\n    julie = symbols('julie')\n    marion = 2 * julie  # Marion earns twice the amount Julie earns\n    ethan = 5 * julie   # Ethan earns 5 times the amount Julie earns\n\n    # Equation for the difference in pay between Marion and Ethan\n    equation = Eq(marion - ethan, -168)\n\n    # Solve the equation for Julie's earnings\n    julie_earnings = solve(equation, julie)[0]\n\n    # Calculate earnings for Marion and Ethan\n    marion_earnings = 2 * julie_earnings\n    ethan_earnings = 5 * julie_earnings\n\n    # Total earnings of all three\n    total_earnings = julie_earnings + marion_earnings + ethan_earnings\n    \n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    total_arrangements = factorial(total_people)\n    middle_position = 1\n    eddie_positions = total_people - middle_position\n\n    ways_for_eddie = eddie_positions * factorial(total_people - 1)\n\n    return ways_for_eddie\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Since this is a geometric sequence, we can relate the terms using the ratio r:\n    # a[n] = a[n-1] * r\n    # For this question, we have a sequence 96, n, 24, 12, 6.\n    # We can find the ratio by dividing the term after n by the term before n, in this case, 24 by 96.\n    r = 24 / 96\n    \n    # Now we can find n by multiplying the term before it by the ratio:\n    n = 96 * r\n\n    return n\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789'):\n        num = int(''.join(p))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed_m_per_s = 3\n    train_speed_m_per_s = 57\n    time_to_pass_seconds = 10\n    \n    # Relative speed w.r.t Eddie\n    relative_speed_m_per_s = train_speed_m_per_s + eddie_speed_m_per_s\n    \n    # Length of train = relative speed x time to pass\n    length_of_train = relative_speed_m_per_s * time_to_pass_seconds\n    \n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operations = ['+', '*']\n    max_value = 0\n    for signs in product(operations, repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    marks_correct = 8\n    marks_incorrect = -3\n    total_questions = 12\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * marks_correct) + (incorrect_answers * marks_incorrect) == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the sum of money Hamid had at first as 'x'.\n    x = symbols('x')\n\n    # According to the problem, after spending (1/3) of his money on a watch, he spent $56 on a tie\n    # and he was left with (3/8) of the sum of money he had at first.\n    # Our equation based on the problem statement is:\n    # x - (1/3)*x - 56 = (3/8)*x\n    equation = Eq(x - (1/3) * x - 56, (3/8) * x)\n\n    # Now, we solve the equation for x.\n    solution = solve(equation, x)\n\n    # Once we have the value of x, we need to calculate how much he spent altogether\n    # which is (1/3)*x for the watch + $56 for the tie.\n    total_spent = (1/3) * solution[0] + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, a + b\n        # As we only need the remainder when divided by 3, we can keep the numbers small\n        a %= 3\n        b %= 3\n    ans = a % 3\n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"p\" be the number of stickers Peter had originally, and \"s\" be the number Sam had.\n    p, s = symbols('p s')\n\n    # Sam had 40 stickers more than Peter initially.\n    original_condition = Eq(s, p + 40)\n\n    # Sam gives 20% of his stickers to Peter => Peter receives 0.20 * s stickers.\n    # Peter gives 25% of his stickers to Sam => Sam receives 0.25 * (p + 0.20 * s) stickers.\n    # After the exchange, Sam had 96 stickers more than Peter.\n    exchange_condition = Eq(s - 0.20 * s + 0.25 * (p + 0.20 * s), p + 0.20 * s - 0.25 * (p + 0.20 * s) + 96)\n\n    # Solve the system of equations.\n    solutions = solve((original_condition, exchange_condition), (p, s))\n\n    # Since we need the number of stickers Peter had originally, we return \"p\".\n    return solutions[p]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel, mom = symbols('hazel mom')\n\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel + 12, 3 * hazel)\n\n    # On Hazel's 18th birthday, her mom will be three times her age then.\n    equation2 = Eq(mom + (18 - hazel), 3 * 18)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (hazel, mom))\n\n    # Hazel's current age\n    current_age_hazel = solutions[hazel]\n\n    # Mom's current age\n    current_age_mom = solutions[mom]\n\n    return current_age_mom\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_n = sum(range(1, n+1))\n    ans = sum_n**2\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    #for an arithmetic sequence, the sum of the first 'n' elements can be calculated by:\n    #S_n = n/2 * (a_1 + a_n), where 'a_1' is the first element and 'a_n' is the nth element\n\n    #we have two equations:\n    #1. 5/2 * (a_1 + a_5) = 10\n    #2. 5/2 * (a_56 + a_60) = 120\n\n    #from the first equation, we can express a_5 in terms of a_1:\n    #a_5 = (20/5) - a_1, since 5/2 * (a_1 + a_5) = 10\n    #a_5 = 4 - a_1\n\n    #a_5 - a_1 = 4d, where 'd' is the common difference of the sequence\n    #thus, d = (a_5 - a_1) / 4\n\n    #substitute the value of a_5 in terms of a_1 into the equation for 'd':\n    d = (4 - a_1*2) / 4\n\n    #now, we express a_56 in terms of a_1 and d:\n    #a_56 = a_1 + 55d\n    #a_60 = a_1 + 59d\n\n    #now, we substitute a_56 and a_60, expressed in terms of a_1 and d, into the second equation:\n    #5/2 * ((a_1 + 55d) + (a_1 + 59d)) = 120\n    #5/2 * (2a_1 + 114d) = 120\n    #2a_1 + 114d = 48\n\n    #substitute the value of 'd' into the equation:\n    #2a_1 + 114 * ((4 - a_1*2) / 4) = 48\n    #2a_1 + 114 - 57a_1 = 48\n    #-55a_1 + 114 = 48\n    #a_1 = (114 - 48) / -55\n\n    a_1 = (114 - 48) / -55\n\n    #we also have the equation for the sum of the 60 numbers:\n    #S_60 = 60/2 * (a_1 + a_60)\n    #S_60 = 30 * (a_1 + (a_1 + 59d))\n\n    #substitute the values of a_1 and d:\n    S_60 = 30 * (a_1 + (a_1 + 59*((4 - a_1*2) / 4)))\n\n    return S_60\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible consecutive pairs (1-2, 2-3, ..., 12-13)\n    # Drawing one card from each group of non-consecutive cards cannot guarantee a consecutive pair.\n    # Therefore, one must draw at least one card from each of the possible 13 pairs plus one extra card\n    # to ensure at least one consecutive pair.\n    num_pairs = 13\n    cards_to_draw = num_pairs + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet of a newspaper has 4 page numbers (front and back on the left and right)\n    # If Vicky pulls out the fifth sheet, she will see two pages on the front \n    # and two pages on the back of the sheet. \n    # The page numbers on the back are in descending order.\n    \n    # The last page is 36, so it is on the right back side of the last sheet.\n    # Because there are 4 page numbers on each sheet, the fifth sheet's last page number \n    # can be calculated as follows: last_page_number - 4*(total_sheets - fifth_sheet_position)\n    # In this case, the fifth sheet from the end has the position (total_sheets - 5 + 1)\n    \n    back_page_number = 36\n    \n    # Calculate total sheets\n    total_sheets = back_page_number // 4\n    \n    # Calculate the back right page number of the fifth sheet\n    fifth_sheet_back_right_page_number = back_page_number - 4 * (total_sheets - 5 + 1)\n    \n    # The other pages on the sheet are consecutive numbers next to fifth_sheet_back_right_page_number\n    fifth_sheet_back_left_page_number = fifth_sheet_back_right_page_number - 1\n    fifth_sheet_front_right_page_number = fifth_sheet_back_right_page_number - 2\n    fifth_sheet_front_left_page_number = fifth_sheet_back_right_page_number - 3\n    \n    # Calculate the sum\n    sum_of_all_pages = (fifth_sheet_back_right_page_number + fifth_sheet_back_left_page_number +\n                        fifth_sheet_front_right_page_number + fifth_sheet_front_left_page_number)\n    \n    return sum_of_all_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of laptops (n) and original cost per laptop (c)\n    n, c = symbols('n c')\n\n    # The original total profit\n    original_profit = 60000\n\n    # The selling price per laptop\n    selling_price = 2000\n\n    # Original total cost is equal to the number of laptops (n) times the original cost (c)\n    original_total_cost = n * c\n\n    # The new cost per laptop is equal to the original cost minus 1/5 of the original cost\n    new_cost_per_laptop = c - (1/5) * c\n\n    # The new total cost is equal to the number of laptops (n) times the new cost per laptop\n    new_total_cost = n * new_cost_per_laptop\n\n    # Equation for the original situation: original total cost + original profit = total revenue\n    equation1 = Eq(original_total_cost + original_profit, n * selling_price)\n\n    # New profit is 30% more than the original profit\n    new_profit = original_profit * 1.3\n\n    # Equation for the modified situation: new total cost + new profit = total revenue\n    equation2 = Eq(new_total_cost + new_profit, n * selling_price)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, c))\n\n    # Return the number of laptops 'n'\n    return solutions[n]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    total_rows = ((last_term - first_term) // difference) + 1\n\n    sum_seats = ((first_term + last_term) * total_rows) // 2\n\n    return sum_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Numbers 1-9 have 1 digit each\n    one_digit_numbers = 9\n\n    # Numbers 10-99 have 2 digits each\n    two_digit_numbers = (99 - 10 + 1) * 2\n\n    # Numbers 100-129 have 3 digits each\n    three_digit_numbers = (129 - 100 + 1) * 3\n\n    total_digits = one_digit_numbers + two_digit_numbers + three_digit_numbers\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boy_diff = 36\n\n    # Starting with the minimum square that can have a difference in boys and girls\n    side_length = 3  # Minimum side length for an arrangement with boys on the outside\n    total_students = 0\n\n    while True:\n        boys = side_length**2 - (side_length - 2)**2\n        girls = (side_length - 2)**2 - (side_length - 4)**2\n\n        if boys - girls == boy_diff:\n            total_students = side_length**2\n            break\n        else:\n            side_length += 2  # we increase the square size by 2 to keep the cycle of boys and girls correct\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Calculate the work done by three men in one day\n    work_done_by_three_men_in_one_day = 120 / 2\n    \n    # Calculate the work done by one man in one day\n    work_done_by_one_man_in_one_day = work_done_by_three_men_in_one_day / 3\n    \n    # Calculate the work done by four men in one day\n    work_done_by_four_men_in_one_day = work_done_by_one_man_in_one_day * 4\n    \n    # Calculate how long it would take for four men to dig 880 metres long\n    time_for_four_men_to_dig_880_metres = 880 / work_done_by_four_men_in_one_day\n    \n    return time_for_four_men_to_dig_880_metres\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n    combined_rate = total_people / combined_time\n\n    gloria_rate = combined_rate - ellie_rate\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    ans = (2 / 5) * 15\n    return ans\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books to move from the first shelf to the second\n    # After moving x books, the first shelf will have (18 - x) books\n    # And the second shelf will have (24 + x) books\n    # We want the second shelf to have twice as many books as the first\n    # Therefore, we set up the equation: 2 * (18 - x) = (24 + x)\n\n    x = symbols('x')\n    equation = Eq(2 * (18 - x), (24 + x))\n\n    # Solve the equation for x\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = 285 + 6/7 + 181 + 10/11 + 153 + 12/13\n    denominator = 1/7 + 1/11 + 1/13\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # 5 pupils are in the school band\n    band_pupils = 5\n\n    # 3/4 of the remaining pupils are in the school choir\n    # remaining = x - band_pupils\n    # choir_pupils = 3/4 * (x - band_pupils)\n    choir_fraction = 3 / 4\n    choir_eq = Eq(choir_fraction * (x - band_pupils), x - band_pupils - (2/9) * x)\n\n    # 2/9 of the class are neither in the band nor the choir\n    # neither_pupils = (2/9) * x\n\n    # Solve for x, which must be an integer because it represents the number of pupils\n    solutions = solve(choir_eq, x)\n\n    # Filter out non-integer and negative solutions, since number of pupils must be a positive integer\n    filtered_solutions = [sol for sol in solutions if sol.is_integer and sol > 0]\n\n    # Assuming there is only one valid solution, as it is a real-world problem.\n    return filtered_solutions[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for lollipops in range(32, 32 + 7 * 4):  # Since the remainder is 32 when divided by 4,\n                                              # and is 3 when divided by 7, we start the range at 32\n                                              # and go up to 32 + (7-3) * 4 as an upper bound,\n                                              # as he can't put more than 7*4 (full boxes) additional lollipops\n                                              # before he would have more left over than just 3.\n        if lollipops % 4 == 32 % 4 and lollipops % 7 == 3:\n            return lollipops\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import symbols, Eq, solve, lcm\n    \n    a = symbols('a', integer=True, positive=True)\n    M = symbols('M', integer=True, positive=True)\n    \n    # Define common difference of the arithmetic sequence\n    d = symbols('d', integer=True, positive=True)\n    \n    # The remainders when M is divided by 7, 9, a, and 28 form an arithmetic sequence\n    # r1, r2, r3, r4 represent the remainders of M divided by 7, 9, a, and 28 respectively\n    r1, r2, r3, r4 = symbols('r1 r2 r3 r4', integer=True)\n\n    # Form the equations based on the problem statement\n    eq1 = Eq(r2, r1 + d)\n    eq2 = Eq(r3, r1 + 2*d)\n    eq3 = Eq(r4, r1 + 3*d)\n    \n    # Since r4 is a remainder of division by 28, the maximum r4 is 27\n    # Hence the r1, which is a remainder of division by 7, must range from 0 to 6\n    # We also know that remainders are less than divisors (r1 < 7, r2 < 9, r3 < a, r4 < 28)\n    \n    lcm_7_9_28 = lcm(7, 9, 28)  # Least common multiple of 7, 9 and 28\n    min_M = float(\"inf\")  # Initialize minimum M as infinity\n\n    for r1_value in range(7):  # r1 range based on divisor 7\n        # Try solving the system of equations for each value of r1\n        solutions = solve((eq1, eq2, eq3, r1-r1_value, r4-27), (r1, r2, r3, r4, d, a))\n        for sol in solutions:\n            r2_value, r3_value, r4_value, d_value, a_value = sol[1], sol[2], sol[3], sol[4], sol[5]\n            \n            # Check if all the conditions are satisfied:\n            # Remainders are within their respective ranges and form an increasing arithmetic pattern\n            if 0 <= r2_value < 9 and 0 <= r3_value < a_value and 0 <= r4_value < 28 and d_value > 0:\n                # Calculate M based on the pattern and make sure it's divisible by a to have remainder r3\n                current_M = lcm_7_9_28 * sol[4] + r1_value\n                if current_M % a_value == r3_value:\n                    min_M = min(min_M, current_M)  # Update minimum M if a smaller value is found\n                \n    return min_M\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of long tubes and y be the number of short tubes\n    x, y = symbols('x y')\n\n    # Each long tube holds 8 balls, and each short tube holds 5 balls\n    # The total number of balls is 47\n    equation1 = Eq(8*x + 5*y, 47)\n\n    # Since we need to find the number of long tubes,\n    # we consider the worst case where the number of long tubes is maximum\n    # and the number of short tubes is zero (or minimum)\n    equation2 = Eq(y, 0)\n\n    # Using sympy's solve method to solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the number of long tubes (x)\n    return solutions[x]\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # Calculate common difference (d)\n    d = (ninth_term - third_term) / (9 - 3)\n\n    # Calculate the first term (a1)\n    first_term = third_term - (2 * d)\n\n    # Calculate the 11th term using the formula: an = a1 + (n - 1) * d\n    eleventh_term = first_term + (n - 1) * d\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Janice's initial bracelets\n    janice_initial = 96\n    \n    # Let the amount Felicia had initially be x.\n    # If Felicia sold 3/5, she has 2/5 of x left.\n    # Felicia:Janice = 5:7 after the transaction and Janice initially has 96\n    # So, Felicia will have (5/7)*96 after the transaction.\n    # Setting up the equation: 2/5 * x = (5/7) * 96.\n    felicia_final = (5/7) * janice_initial\n\n    # Solve for x, the initial number of Felicia's bracelets\n    felicia_initial = (felicia_final * 5) / 2\n\n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = (3/5) * felicia_initial\n\n    # Janice bought 2/5 of the amount Felicia sold\n    janice_bought = (2/5) * felicia_sold\n\n    return janice_bought\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(x**3 for x in numbers)\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 0.15\n    discount_amount = original_price * discount\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the multiplier in Will's operation\n    # Since Will forgets to put down the decimal point, 4.32 becomes 432\n    # The incorrect result is 2138.4 greater than the true result\n    # So we have the equation: 432x = 4.32x + 2138.4\n    # Let's solve for x\n    \n    # Rearrange the equation to find x\n    # 432x - 4.32x = 2138.4\n    # (432 - 4.32)x = 2138.4\n    # 427.68x = 2138.4\n    x = 2138.4 / 427.68\n    \n    # Now we can find the true result\n    # True result = 4.32 * x\n    true_result = 4.32 * x\n    \n    return true_result\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum = 9 + 99 + 999 + 9999\n    return sum\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    equation2 = Eq(girls, boys + 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n    initial_ratio = Eq(milk / fruit, 7 / 9)\n    after_eating_ratio = Eq((milk - 8) / fruit, 2 / 3)\n\n    solutions = solve((initial_ratio, after_eating_ratio), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    for B in range(1, 3*5):\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # In 2008, grandmother was 80 years old.\n    grandmother_age_2008 = 80\n    # In 1996, mother was 40 years old.\n    mother_age_1996 = 40\n    \n    # Calculate the year when mother was born:\n    # 1996 - 40 = 1956 is the year when the mother was born.\n    \n    # Calculate the difference in years between 2008 and 1956\n    years_difference = 2008 - 1956\n    \n    # Now, we subtract the years difference from the grandmother's age in 2008\n    # to find out her age when the mother was born.\n    grandmother_age_when_mother_born = grandmother_age_2008 - years_difference\n    \n    return grandmother_age_when_mother_born\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    num1 = 2017\n    num2 = 2758\n    num3 = 3670\n    \n    # The remainders are the same, so the differences between the numbers\n    # should be divisible by A\n    diff1 = num2 - num1\n    diff2 = num3 - num2\n    diff3 = num3 - num1\n    \n    # Let's find the greatest common divisor of the differences\n    from math import gcd\n    temp_gcd = gcd(diff1, diff2)\n    final_gcd = gcd(temp_gcd, diff3)\n    \n    # The possible values of A would be all the positive divisors of final_gcd\n    # except 1 and itself (since the problem seems to imply at least two different piles)\n    possible_As = [i for i in range(2, final_gcd) if final_gcd % i == 0]\n    \n    # Return the sum of possible values\n    return sum(possible_As)\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            # We add 1 because we are considering '3' in '23' itself\n            position_of_three = count\n    return position_of_three\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    total_apples = 60\n    additional_apples_per_friend = 1\n\n    number_of_friends = total_apples // initial_apples_per_friend\n    total_apples_needed = total_apples + additional_apples_per_friend * number_of_friends\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Yohan could pick all red and black socks before getting a pair of white socks.\n    red_socks = 10\n    black_socks = 10\n\n    # He must then pick one more sock to make sure he has at least one pair of white socks.\n    white_socks_needed = 2\n\n    # At most, number of non-white socks plus one pair of white socks\n    max_socks_picked = red_socks + black_socks + white_socks_needed\n\n    return max_socks_picked\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    average_mark = sum(marks) / len(marks)\n    return average_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 4 pupils\n    # Let y be the number of groups with 6 pupils\n    # Then we have two equations based on the problem statement:\n    # 4x + 6y = 112 (total number of students)\n    # x + y = 24 (total number of groups)\n    \n    # We can solve the above system of equations for x and y\n    # From the second equation: x = 24 - y\n    # Substituting x in the first equation: 4(24 - y) + 6y = 112\n    # Simplifying: 96 - 4y + 6y = 112\n    # 2y = 112 - 96\n    # y = (112 - 96) / 2\n    # y = 16 / 2\n    y = (112 - 96) // 2\n    \n    return y\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # The average of the first three numbers\n    avg_first_three = 60\n    \n    # The sum of the first three numbers\n    sum_first_three = avg_first_three * 3\n    \n    # The new average after the fourth number is added\n    new_avg = 90\n    \n    # The new sum after the fourth number is added\n    new_sum = new_avg * 4\n    \n    # The fourth number\n    fourth_number = new_sum - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Variable to store minimum bottles of \"1000 Plus\" that could have been sold\n    min_bottles_1000_plus = None\n    \n    # For each possible number of lemonade bottles sold, calculate \"1000 Plus\" bottles sold\n    for lemonade_sold in range(351):\n        income_from_lemonade = lemonade_sold * 4\n        remaining_income = 2012 - income_from_lemonade\n        # If remaining income is divisible by 7, it's a valid scenario\n        if remaining_income % 7 == 0:\n            bottles_1000_plus = remaining_income // 7\n            # Since we want the minimum number of \"1000 Plus\" bottles sold\n            if min_bottles_1000_plus is None or bottles_1000_plus < min_bottles_1000_plus:\n                min_bottles_1000_plus = bottles_1000_plus\n                if bottles_1000_plus + lemonade_sold == 350:  # Once all bottles are accounted for, we can break\n                    break\n\n    return min_bottles_1000_plus\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from sympy import symbols, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n\n    # Equation that depicts that ABC is a 3 digit number\n    equation = Eq(100 * A + 10 * B + C, 3 * (A + B + C))\n\n    # the domain for each digit is from 1 to 9, because it's a non-zero digit number\n    possible_solutions = solve(equation, (A, B, C), dict=True)\n    \n    # Filter solutions to only include those where A, B, and C are different and are non-zero\n    for sol in possible_solutions:\n        A_val, B_val, C_val = sol[A], sol[B], sol[C]\n        if A_val != 0 and B_val != 0 and C_val != 0 and len({A_val, B_val, C_val}) == 3:\n            return 100 * A_val + 10 * B_val + C_val\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen traded 3 fish for 2 rabbits\n    fish_to_rabbit_ratio = 3 / 2\n\n    # Oscar traded 3 rabbits for 4 packs of wheat\n    rabbit_to_wheat_ratio = 3 / 4\n\n    # We need to find out how many fish Owen should give Dennis for 8 packs of wheat\n    wheat_amount = 8\n\n    # Calculate the ratio of fish to wheat by multiplying the two ratios\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Calculate the number of fish for 8 packs of wheat\n    fish_for_wheat = wheat_amount / fish_to_wheat_ratio\n\n    return int(fish_for_wheat)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the original price of the purse\n    p = symbols('p')\n\n    # Price of handbag after discount\n    handbag_price_after_discount = 428\n    # Handbag discount was 20%\n    handbag_discount = 0.20 * (handbag_price_after_discount / (1 - 0.20))\n    \n    # Total discount for both handbag and purse\n    total_discount = 121\n    # Purse discount (28% of original price)\n    purse_discount = 0.28 * p\n    \n    # Equation based on total discount\n    equation = Eq(handbag_discount + purse_discount, total_discount)\n\n    # Solve for original price of the purse (p)\n    original_price_purse = solve(equation, p)\n\n    return original_price_purse[0]\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import factorial, floor\n\n    factor_2 = 0\n    factor_5 = 0\n    n = 25\n\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            factor_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            factor_5 += 1\n            i //= 5\n\n    ans = min(factor_2, factor_5)\n\n    return ans\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The sequence with two digits in the recurring pattern is A and 2. \n    # Thus, the first 20 digits after the decimal point are A,2,A,2,... for 10 times.\n\n    # Since the sum of the first 20 digits is 80, we can set up an equation:\n    # 10 * A + 10 * 2 = 80\n    # 10 * A = 80 - 20\n    # 10 * A = 60\n    # A = 6\n\n    # Therefore, A is 6.\n    return 6\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    net_distance_per_day = climb_up - slide_down\n    distance_covered = 0\n    day = 0\n\n    while distance_covered < well_height:\n        day += 1\n        distance_covered += climb_up\n        if distance_covered >= well_height:\n            break\n        distance_covered -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dance_per_week = 2\n    weeks = 2\n\n    total_dance = dance_per_week * weeks\n\n    return total_dance\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Star's jogging time in hours from 6:30 AM to 7:00 AM is 0.5 hours (30 minutes)\n    jogging_time = 0.5\n    \n    # Star's walking time in hours from 7:00 AM to 8:00 AM is 1 hour\n    walking_time = 1\n\n    # Star's jogging speed in miles per hour\n    jogging_speed = 6 \n    \n    # Star's walking speed in miles per hour\n    walking_speed = 5\n\n    # Calculate the distance covered while jogging\n    distance_jogging = jogging_speed * jogging_time \n    \n    # Calculate the distance covered while walking\n    distance_walking = walking_speed * walking_time \n    \n    # Calculate the total distance\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    chair_cost = 120\n    equation1 = Eq(original_amount * 0.30, original_amount - (chair_cost + (original_amount - chair_cost) * 0.40))\n\n    solve_for_original_amount = solve(equation1, original_amount)\n\n    return solve_for_original_amount[0]\n\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Based on the Pigeonhole Principle, at least one layer must have at least ceil(total_books / layers) books\n    min_books_per_layer = -(-total_books // layers)  # ceil division in python\n    \n    return min_books_per_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books bought initially, and y be the total cost of these books.\n    x, y = symbols('x y')\n    # Average cost of the initial books is $3.50, so the total cost is 3.50 * number of books\n    equation1 = Eq(y, 3.50 * x)\n    # After buying 2 more books at $6 each, the total cost is the initial cost y plus $12\n    # And the total number of books is x + 2. The new average cost is $4.\n    equation2 = Eq(y + 12, 4 * (x + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Add 2 to the number of initially bought books to get the total amount of books\n    total_books = solutions[x] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in [1, 2, 3]:\n        for tens in [0, 1, 2, 3]:\n            for units in [0, 1, 2, 3]:\n                if hundreds != tens and hundreds != units and tens != units:\n                    if tens != 0 or (tens == 0 and units != 0):  # making sure we get a three-digit number\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # Find the term which will be first negative\n    # n * difference < -first_term where n is the number of terms before becoming negative\n    # (n-1) * difference >= -first_term\n    # Solve for n\n    n = (-first_term / difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Define the equation according to the given condition a + b + c = 31\n    sum_eq = Eq(a + b + c, 31)\n    \n    # We need to maximize a * b * c\n    # According to the AM-GM inequality, a * b * c is maximized when a = b = c.\n    # However, as we have integer solutions, we should consider the closest integers where a = b and c is as close as possible.\n    # Since 31 is not divisible by 3, the closest we can get is two numbers being equal and the third being one unit apart.\n    # So, we check for the two pairs of possible nearest values, which would be (10, 10, 11) or (10, 11, 10) or (11, 10, 10).\n    # All these three give the same product 10*10*11 = 1100\n    \n    return 10 * 10 * 11\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / (alice - 8), 3)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_in_grams = 1200  # 1.2 kg = 1200 g\n    piece_weight = 30  # 30 g per piece\n    num_pieces = total_weight_in_grams / piece_weight\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.056688\n    quarts_per_cup = 0.5\n    num_cups = liters_to_quarts / quarts_per_cup\n    return round(num_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(1, 10):  # E cannot be 0 because FACE is a four-digit number\n                for F in range(10):\n                    # Skip if any of the digits A, C, E, F are not unique\n                    if len({A, 2, 0, C, E, F}) != 6:\n                        continue\n                    \n                    # Construct the numbers\n                    ABCDEF = A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F\n                    EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n\n                    # Check if the equation holds\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return A * 1000 + C * 100 + E * 10 + F\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    jogging_time = 1  # 6:30 AM to 7:30 AM\n    walking_time = 2  # 7:30 AM to 9:30 AM\n\n    jogging_speed = 6  # miles per hour\n    walking_speed = 5  # miles per hour\n\n    # Distance = Speed * Time\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    equation1 = Eq(angel, (5/6)*belle)\n    equation2 = Eq(angel - 58, 0.75*belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n    \n    # dad's age six years ago was 5 times son's age at that time\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    # Sum of their ages this year is 78\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n    \n    return solutions[dad]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4 / 9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    children = symbols('children')\n\n    # Use the information given to form equations\n    # If each child was to receive 70p, it would require 20p more\n    equation1 = Eq(children * 70, 20 + children * 60)\n\n    # If each child was to receive 60p, 2.10 GBP would be left\n    # Convert 2.10 GBP to pence (1 GBP = 100 pence)\n    equation2 = Eq(children * 60 + 210, children * 70)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (children))\n\n    # Returning number of children\n    return solution[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6 # Divide by 6 to account for permutations of vase order\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    balance = -76.20\n    paid = 120.75\n    new_balance = balance + paid\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime.strptime(\"2023-03-02\", \"%Y-%m-%d\")\n    end_date = datetime.strptime(\"2023-04-15\", \"%Y-%m-%d\")\n\n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # Loop through all possible numbers with a 9 in the units column\n    for i in range(10, 10000):\n        if str(i)[-1] == '9':  # Check if last digit is 9\n            new_number = int(str(i)[-1] + str(i)[:-1])  # Move last digit to the front\n            if new_number == 4 * i:  # Check if the new number is four times the original\n                return i  # Return the special number when condition is met\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is on the left end, Avril is next to Eddie, so treat Eddie and Avril as one unit\n    # We now have 6 entities to arrange (5 students + 1 unit of Eddie and Avril)\n    arrangements_of_6 = factorial(6)\n    \n    # Avril can be on the immediate left or right of Eddie which gives us 2 possibilities\n    avril_possibilities = 2\n    \n    # Calculate the total number of different ways they can line up\n    total_ways = arrangements_of_6 * avril_possibilities\n\n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # There are 1 left blue, 2 left green, 3 right blue, and 4 right green gloves.\n    # To ensure we have a matching pair, we need to consider the worst case where\n    # Dilly picks gloves of different colors and hands each time.\n    # She could pick in the worst case: 1 left blue + 2 left green + 3 right blue = 6.\n    # To be certain the next glove creates a matching pair, she should pick one more glove.\n    # So, Dilly should pick 6 + 1 = 7 gloves to ensure a matching pair.\n\n    return 7\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    base_price = 200\n    increase_percentage = 45 / 100\n    new_price = base_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = len(numbers) + 1  # Including the missing number\n    total_sum_with_missing_number = 6 * total_numbers  # Mean times total numbers\n    current_sum = sum(numbers)\n    missing_number = total_sum_with_missing_number - current_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Given values\n    circumference = 300\n    first_interval = 3\n    second_interval = 5\n    holes_dug = 30\n\n    # Total number of holes when digging at every 3m\n    total_holes_first_interval = circumference // first_interval\n\n    # Remaining holes to dig at 5m intervals\n    remaining_holes = total_holes_first_interval - holes_dug\n\n    # Calculate position of the last hole dug\n    last_hole_position = holes_dug * first_interval\n\n    # Adjust the total number of holes for 5m intervals considering the last hole dug position\n    adjusted_remaining_holes = (circumference - last_hole_position) // second_interval\n\n    # Count the last hole if it aligns with the 5m interval\n    if (circumference - last_hole_position) % second_interval == 0:\n        adjusted_remaining_holes += 1\n\n    return adjusted_remaining_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Function to calculate combinations (n choose k)\n    def combination(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Calculate the number of ways to reach the 5th step\n    ways_to_5th_step = combination(4, 4) # 4 steps taken, with 4 being on exactly the 5th position\n    \n    # Calculate the number of ways to reach the 10th step from the 5th step\n    # This is equivalent to counting the number of combinations to distribute\n    # 5 steps (to reach from 5 to 10) where he can take either 1 or 2 steps at a time\n    # This is can be split into scenarios where he takes exactly 1, 2, 3, or 4 times two-steps\n    # after reaching the 5th step.\n    # For 1 two-steps (and thus 3 one-steps): C(4, 1)\n    # For 2 two-steps (and 1 one-step): C(3, 2)\n    # For 3 two-steps (and 0 one-steps): C(3, 3)\n    ways_from_5th_to_10th = combination(4, 1) + combination(3, 2) + combination(3, 3)\n    \n    # The total number of ways will be the ways to reach the 5th step times the ways to reach the 10th step from the 5th\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n    \n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq((number + 3) / 4, 12)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i*(16-i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    sum_of_erased = sum(page for page in range(1, 51) if '3' in str(page))\n    return sum_of_erased\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Initial equation: 15 + 5 * 5 + 15 - 6 + 7\n    # To maximize the result, we want to maximize the multiplication and the addition.\n    # Pair 1: (15 + 5) * 5 gives us 100\n    # Pair 2: Another one could be put around the remaining terms that we want to add, such as 15 - 6 + 7,\n    # but since all are additions and subtractions, it will not affect the output, so we can omit it.\n    # The equation with the biggest result will be: (15 + 5) * 5 + 15 - 6 + 7\n\n    result = (15 + 5) * 5 + 15 - 6 + 7\n    return result\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_used = 0\n    pages = 0\n    while digits_used < 792:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_first_four = 89\n    billy_target_average = ivan_average + 10\n    \n    total_points_ivan = ivan_average * 5\n    total_points_billy_first_four = billy_average_first_four * 4\n    \n    billy_fifth_assignment_score = (billy_target_average * 5) - total_points_billy_first_four\n    \n    return billy_fifth_assignment_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # since the order of the numbers matter, we just need to find all pairs (a, b) such that a + b = 1000\n    # a and b can vary from 1 to 999\n    count = 0\n    for a in range(1, 1000):\n        b = 1000 - a\n        if b > 0:\n            count += 1\n    # We also need to consider the case where both numbers are the same: (500, 500)\n    # Adding one to the count for this case\n    return count + 1\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    term_7 = 39 \n    term_8 = 44\n    common_difference = term_8 - term_7\n    first_term = term_7 - (7 - 1) * common_difference\n    term_100 = first_term + (100 - 1) * common_difference\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(1260)\n    m_factors = {}\n\n    # To make 1260m a perfect square, each prime factor must be raised to an even power.\n    for prime, power in factors.items():\n        required_power = (power % 2)  # If power is already even, no need to multiply by prime factor\n        if required_power == 1:\n            m_factors[prime] = 1\n\n    # Calculate m by multiplying all required prime factors\n    m = 1\n    for prime, power in m_factors.items():\n        m *= prime ** power\n    \n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(0, 28):\n        if (i + 3) % 4 == 0 and (i + 3) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of 8 and 11\n    lcm_of_8_and_11 = lcm(8, 11)\n    \n    # Initialize the number to the LCM plus remainder\n    num = lcm_of_8_and_11 + 6\n    \n    # Check for the first such number that is a two-digit number\n    while num < 10 or num >= 100:\n        num += lcm_of_8_and_11\n    \n    # Return the first two-digit number that satisfies the condition\n    return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    exponent = 99\n    ones_digit_sequence = [base**i % 10 for i in range(1, 5)]\n    ones_digit_index = exponent % len(ones_digit_sequence) - 1\n    ans = ones_digit_sequence[ones_digit_index]\n    return ans\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    each_pony_value = symbols('each_pony_value')\n\n    # The average value increase for five ponies in the large stable \n    equation1 = Eq((5*each_pony_value + 250000)/5, each_pony_value + 10000)\n    # And the average value decrease for one pony in the small stable\n    equation2 = Eq((2*each_pony_value + 250000)/2, each_pony_value - 10000)\n\n    # solve for the average value of the six other ponies\n    solutions = solve((equation1, equation2), (each_pony_value))\n\n    # calculate the total value of the six ponies\n    total_value = 6*solutions[each_pony_value] + 250000\n  \n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    \n    # Reverse Operation $5: Add 50 to the result\n    result += 50\n    \n    # Reverse Operation $4: Subtract the number of the day twice\n    # Since we don't know the number of the day, we cannot do the operation yet\n    \n    # Reverse Operation $3: Divide the result by 50\n    result /= 50\n    \n    # Reverse Operation $2: Subtract 1 from the result\n    result -= 1\n    \n    # Reverse Operation $1: Divide the result by 4\n    month = result // 4\n    \n    # Now let's find the number of the day. \n    # We reverse what was added from the day number to the intermediate result (after multiplication by 50). \n    # We should multiply the number of the month and the intermediate steps up until before adding the day number.\n    day = (1234 + 50 - (month * 4 + 1) * 50) / 2\n    \n    return (int(month), int(day))\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = pow(2, 2015, 3)\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # Considering the 4 pupils who insist on standing together as a single unit\n    # We have now 5 units to arrange (4 individual pupils + 1 group of 4 pupils)\n    arrangements_of_5_units = factorial(5)\n    \n    # The group of 4 pupils can be arranged among themselves in 4! ways\n    arrangements_within_group = factorial(4)\n\n    # Total different arrangements is the product of the two possibilities\n    total_arrangements = arrangements_of_5_units * arrangements_within_group\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n\n    percent_concentration = (sugar / total_mixture) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    n = 60 // 3    # Since the numbers are consecutive and their sum is 60, the middle number is 60/3\n    largest = n + 1 # The largest number is one more than the middle number\n    return largest\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's denote x as the number of gold medals and y as the number of silver medals.\n    # We then have the following system of equations:\n    # 5x + 4y = 331 (the total number of points)\n    # x + y = 80 (the total number of medals)\n    # We can solve this system of equations using either substitution or elimination method.\n    # Let's use substitution in this case.\n\n    # Rewrite the second equation to solve for y in terms of x: y = 80 - x\n    # Substitute y = 80 - x into the first equation: 5x + 4(80 - x) = 331\n    \n    # Now solve for x\n    for x in range(80 + 1):\n        y = 80 - x\n        if 5 * x + 4 * y == 331:\n            return x\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb_per_kg = 8.70\n    cost_beef_per_kg = 9.40\n    lamb_kg = 7\n    beef_kg = 30\n\n    total_cost = (cost_lamb_per_kg * lamb_kg) + (cost_beef_per_kg * beef_kg)\n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m represent the work done by a master in one day\n    # Let a represent the work done by an apprentice in one day\n    m, a = symbols('m a')\n    \n    # Equation representing the work done by 1 master and 3 apprentices in 4 days\n    equation1 = Eq(1*m + 3*a, 1/4)\n    \n    # Equation representing the work done by 2 masters and 1 apprentice in 3 days\n    equation2 = Eq(2*m + 1*a, 1/3)\n    \n    # We solve the system of equations to find m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # We now find how long it takes for 1 apprentice to complete the task alone\n    # Total work is 1 (for the whole task) and a is the work an apprentice does in a day\n    time_for_apprentice_alone = 1 / solutions[a]\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    fraction_men = 5/8\n    fraction_children = 1/3\n    \n    # Let x be the total number of spectators\n    # fraction_women = 1 - fraction_children - fraction_men * (1 - fraction_children)\n    # women = fraction_women * x\n    # Solve for x\n    \n    fraction_women = 1 - fraction_children - fraction_men * (1 - fraction_children)\n    total_spectators = women / fraction_women\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the examples provided, we can try to deduce the operation ★\n    # Looking at the pattern:\n    # 5★2 = 8 seems like (5 + 2 + 1)\n    # 2★5 = 5 seems like (2*2 + 1)\n    # 6★3 = 15 seems like (6 + 3 + 6)\n    # 8★2 = 14 seems like (8 + 2*2)\n    # Testing our hypothesis with given examples:\n    # If a ★ b = a*b if a < b else a+b+(a%b)\n    # Let's apply this to the asked question with a=11 and b=10\n\n    def star_op(a, b):\n        if a < b:\n            return a * b\n        else:\n            return a + b + (a % b)\n\n    return star_op(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Given that the elephant is the 10th from the left (E_pos),\n    # and the rabbit is the 9th from the right (R_pos), and there\n    # are 5 dolls between them, we can calculate as follows:\n    E_pos = 10\n    R_pos = 9  # position from right\n    dolls_between = 5\n\n    # total dolls = position of Elephant from the left + dolls between\n    # + position of Rabbit from the right - 1 (since the positions are inclusive)\n    total_dolls = E_pos + dolls_between + R_pos\n    \n    # We subtract 1 because we are counting the elephant doll twice\n    return total_dolls - 1\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    from fractions import Fraction\n\n    result = 0.4 * (Fraction(11, 52) / Fraction(11, 4) * (4.3 - 1.8)) * 26\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n    layer = 0\n    \n    # Since boys and girls are arranged in alternating layers, and there are 32 more boys,\n    # we increment the layers until the difference equals 32.\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = (layer * 2) ** 2\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    original_roses, planted_each_month = symbols('original_roses planted_each_month')\n    \n    # Sum of roses and daisies initially\n    equation1 = Eq(original_roses + (300 - original_roses), 300)\n    \n    # Total after a few months\n    equation2 = Eq(original_roses + planted_each_month, 280)\n    \n    # Total daisies after a few months\n    equation3 = Eq((300 - original_roses) + planted_each_month, 180)\n\n    # Solve\n    solutions = solve((equation1, equation2, equation3), (original_roses, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 61))  # 61 is exclusive\n    sum_of_primes = sum(primes)\n\n    return sum_of_primes\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # The 10th number is 23, and the 15th number is 38\n    # We know that the difference between consecutive terms is constant\n    # Let's find the common difference\n    common_difference = (38 - 23) / (15 - 10)  # Difference divided by the number of terms between them\n\n    # Now let's calculate the first term using the 10th term\n    # a_n = a_1 + (n - 1) * d\n    # 23 = a_1 + (10 - 1) * d\n    first_term = 23 - (10 - 1) * common_difference\n\n    # Now we can find the 102nd term using the first term and the common difference:\n    # a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (102 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    \n    non_english_books = total_books - english_books\n    comics = non_english_books // 3\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_litres = 6\n\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    \n    total_shots = accurate_shots + missed_shots\n    \n    average_score = total_accurate_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):  \n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # To find the least possible number of apples for the kid who gets the most,\n    # we need to distribute the apples as evenly as possible while maintaining different amounts.\n    # Start by giving each of the 8 children 1 apple. This uses 8 apples.\n    # Now we have 50 - 8 = 42 apples left to distribute.\n    \n    # Next, we give each of the remaining kids 1 more apple in sequence which \n    # uses another 7 apples. This ensures the one who gets the most still has the least possible.\n    # Now we have 42 - 7 = 35 apples left to distribute.\n    \n    # We know that the child who gets the most should get more than the others by the minimal amount.\n    # This means we must have gone over all other children with additional apples before giving the\n    # last one more apple. We distribute the apples in rounds, each round gives 7 apples to 7 children.\n    \n    rounds = 0\n    while 35 >= 7:\n        rounds += 1\n        # 7 children each get an apple, so we deduct 7 apples from the remaining amount.\n        35 -= 7\n    \n    # After completing the rounds, the child with the most apples will have\n    # the base amount of 1 (from the initial distribution to all children),\n    # plus the number of rounds (where they were skipped).\n    # We add the remaining apples to this child.\n    max_apples = 1 + rounds + 35\n    \n    return max_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculation of the complex fractions\n    numerator1 = (1/30) + (1/6)\n    denominator1 = 2/25\n    part1 = numerator1 / denominator1\n    \n    numerator2 = 2 - (2/3)\n    denominator2 = 8/3\n    part2 = numerator2 / denominator2\n    \n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    def partitions(n):\n        # Initialize a list to store the number of partitions for each number\n        dp = [0] * (n + 1)\n        dp[0] = 1  # There's one way to partition 0\n\n        for i in range(1, n):\n            for j in range(i, n + 1):\n                dp[j] += dp[j - i]\n\n        return dp[n] - 1  # Subtract the number itself as a partition\n\n    ans = partitions(8)\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Maximum men not wearing bow ties and not wearing spectacles\n    max_not_wearing_both = total_men - max(bow_ties, spectacles)\n\n    return max_not_wearing_both\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 350 * 0.20 * 0.50\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since we need to find the maximum apples for the child who gets the most,\n    # we should distribute the least amount of apples to the other children.\n    # Let's start with each of them getting 1 apple, then the next child getting\n    # 2 apples, and so on, to maximize the number for the last child.\n    \n    # Distribute 1, 2, 3, and 4 apples to the first four children respectively\n    distributed_apples = 1 + 2 + 3 + 4\n    \n    # Subtract the distributed apples from the total\n    remaining_apples = 19 - distributed_apples\n    \n    return remaining_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Ali and Bala are considered as a single unit for standing together, so we have 4 units in total (Ali-Bala, Charles, Dan, Ella)\n    # There are 3! ways to arrange these 4 units, because Dan's position is fixed at the furthest left\n    units_arrangement = factorial(3)\n    \n    # Ali and Bala can stand in 2! different ways within their unit\n    ali_bala_arrangement = factorial(2)\n    \n    # The total arrangements are product of the two possibilities\n    ans = units_arrangement * ali_bala_arrangement\n\n    return ans\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades: 3 fishes for 2 rabbits\n    # Oscar trades: 3 rabbits for 4 packs of wheat\n    # Find out how many fishes Owen should give for 8 packs of wheat.\n    \n    # Set the ratio fishes:rabbits:wheat with x being the number of fishes for one pack of wheat.\n    # Since 3 fishes is equal to 2 rabbits, which can be exchanged for 4 packs of wheat, we can write:\n    # (3 fishes / 2 rabbits) = (4 packs of wheat / 3 rabbits)\n    # To find out how many fishes for 1 pack of wheat: x = (3 fishes / 2 rabbits) * (3 rabbits / 4 packs of wheat)\n    # Simplifying the ratio to get the number of fishes for 1 pack of wheat\n    fishes_per_pack_wheat = (3 / 2) * (3 / 4)  # Fishes for one pack of wheat\n    \n    # Now, find out how many fishes for 8 packs of wheat\n    ans = fishes_per_pack_wheat * 8  # Fishes for eight packs of wheat\n    \n    return ans\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    digits_used = sum(1 for i in range(1, 10)) + sum(2 for i in range(10, 100)) + sum(3 for i in range(100, 141))\n    return digits_used\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Original incorrect subtrahend\n    incorrect_tens = 5\n    incorrect_ones = 3\n    incorrect_subtrahend = incorrect_tens * 10 + incorrect_ones\n    \n    # Corrected subtrahend\n    correct_tens = 3\n    correct_ones = 2\n    correct_subtrahend = correct_tens * 10 + correct_ones\n    \n    # Find the minuend by adding the incorrect difference to the incorrect subtrahend\n    difference = 36\n    minuend = incorrect_subtrahend + difference\n    \n    # Calculate the correct difference\n    correct_difference = minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # To ensure 3 different colored balls, first draw all of one color, then all of another color,\n    # then one more to guarantee the third color.\n    # Drawing worst case: 15 (all red) + 9 (all white) + 1 (to ensure a yellow).\n    return 15 + 9 + 1\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    average_students = total_students / number_of_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_length_fence = 3.2\n    used_length_wood = 6.5\n    remaining_length = total_length - (used_length_fence + used_length_wood)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen gives away 12 sweets\n    equation1 = Eq((ellen - 12), (13/24) * (ellen + lenny))\n    # Lenny gives away 12 sweets\n    equation2 = Eq((lenny - 12), (3/8) * (ellen + lenny))\n    \n    solutions = solve((equation1, equation2), (ellen, lenny))\n    \n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    initial_tax_rate = 0.06\n    initial_income = 50000\n    tax_paid = 10000\n\n    # Tax for the first $50000\n    initial_tax = initial_income * initial_tax_rate\n\n    # Tax for the remaining income\n    remaining_income = income - initial_income\n    remaining_tax = remaining_income * ((initial_tax_rate + T) / 100)\n\n    # Equation for the total tax paid\n    equation = Eq(initial_tax + remaining_tax, tax_paid)\n\n    # Solve for T\n    solution_T = solve(equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Arrange the digits to form the smallest and largest 5-digit number\n    # To minimize the difference, the smallest should start with 0 and the largest should start with 9\n    # Then, simply arrange the rest of the digits in ascending order for the smallest number\n    # And in descending order for the largest number\n    smallest = int('0' + ''.join(map(str, sorted(range(1, 10)))))\n    largest = int('9' + ''.join(map(str, sorted(range(1, 10), reverse=True))))\n    \n    # Compute the difference between the largest and smallest numbers\n    difference = largest - smallest\n    \n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    presents = ['toy_car', 'puzzle', 'calculator', 'p4', 'p5', 'p6', 'p7']\n    \n    for perm in permutations(presents, 5):\n        if ('toy_car' in perm[:2]) or ('puzzle' in perm[:1] and 'calculator' in perm[1:2]):\n            total_ways += 1\n    \n    return total_ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n\n    # Time = Distance / Speed\n    # Total distance is the length of the train plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_of_potatoes = 2\n    total_cost = cost_per_pound * pounds_of_potatoes\n    amount_paid = 100  # £1 is equal to 100p\n    change = amount_paid - total_cost\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1  # Starting from the smallest prime number\n    while True:\n        # Check if all numbers in the given form are prime\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            # If they are all prime, then we've found our n\n            return n\n        n += 1  # Increment n and check the next number\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n\n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.7)\n\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_mass = 200    # Total mass of the sugar solution in grams\n    concentration = 0.15  # Concentration of the sugar solution (15%)\n    \n    # The mass of sugar is equal to the concentration times the total mass\n    mass_sugar = total_mass * concentration\n    \n    return mass_sugar\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    time = 10  # hours\n\n    jack_distance = jack_speed * time\n    rose_distance = rose_speed * time\n\n    # Since they are traveling towards each other,\n    # the distance between A and B is their individual distances subtracted.\n    distance_between_A_and_B = jack_distance - rose_distance\n\n    return distance_between_A_and_B\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4 * i * i - (4 * i - 2) * (4 * i - 2) for i in range(1, 506)))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiples_of_7 = 5000 // 7\n    multiples_of_13 = 5000 // 13\n    multiples_of_7_and_13 = 5000 // (7*13)\n    \n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        return 0\n    else:\n        ans = 3 - remainder\n        return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_permutations_no_adjacent(word, letter):\n    total_permutations = set(permutations(word))\n    # Filter permutations where the specific letter is not adjacent\n    valid_permutations = [\n        p for p in total_permutations if not any(letter == p[i] == p[i+1] for i in range(len(p)-1))\n    ]\n    return len(valid_permutations)\n\ndef solution():\n    word = \"SUCCESS\"\n    letter = 'S'\n    ans = count_permutations_no_adjacent(word, letter)\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    shirts_bought = 138\n    money_left = 56\n    total_shirts = 145\n    \n    # Unit price of one T-shirt\n    unit_price = money_left / (total_shirts - shirts_bought)\n    \n    # Total money Josephine had at first\n    total_money = unit_price * total_shirts\n    \n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n+1)**2) // 4\n    sum_of_integers = (n * (n+1)) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # Average of 14 consecutive even numbers is 119\n    average = 119\n    total_numbers = 14\n    \n    # Sum of 14 consecutive even numbers = average * number of terms\n    total_sum = average * total_numbers\n    \n    # The sum of an even arithmetic sequence can be expressed as:\n    # total_sum = (first_term + last_term) * number_of_terms / 2\n    \n    # Since the numbers are consecutive and even, the common difference is 2\n    # Let's denote first_term as x, so last_term will be x + (total_numbers - 1)*2\n    # total_sum = (x + [x + (total_numbers - 1)*2]) * total_numbers / 2\n    # After simplifying this equation, we can find the first_term.\n    last_term = average * 2 + 2 * (total_numbers // 2 - 1)\n    first_term = last_term - (total_numbers - 1)*2\n\n    return first_term\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    difference = max_height - min_height\n    \n    # Applying the Pigeonhole Principle, where the number of \"holes\" is the difference + 1\n    # because the range is inclusive of both minimum and maximum heights.\n    # We require at least 4 students of the same height, so we multiply the number of holes by 3\n    # and add 1 (for the worst-case scenario where all previous heights have 3 students,\n    # it takes one more student to guarantee a height with 4 students).\n    class_size = (difference + 1) * 3 + 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    percentage_increase = 12\n    new_pay_per_hour = old_pay_per_hour * (1 + percentage_increase / 100)\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to cut a piece of wood into 5 sections\n    # This means she makes 4 cuts (since 5 sections require 4 cuts)\n    cuts_needed_for_one_section = 4\n    time_for_one_section = 12\n    \n    # To cut the piece of wood 5 times, she needs to make 5 cuts\n    cuts_needed_for_five_sections = 5\n    \n    # The time needed for 5 cuts is proportional to the time needed for 4 cuts\n    time_for_five_sections = (cuts_needed_for_five_sections / cuts_needed_for_one_section) * time_for_one_section\n    \n    return time_for_five_sections\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # let x be the number of days David worked\n    # David's work rate is 1/10 per day\n    # Emma's work rate is 1/18 per day\n    # The total work is 1 journal, so the equation is:\n    # David's work + Emma's work = 1\n    # (x/10) + ((14-x)/18) = 1\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq((x / 10) + ((14 - x) / 18), 1)\n    \n    # Solve the equation\n    days_david_worked = solve(equation, x)\n    \n    # Calculate the number of days Emma worked\n    days_emma_worked = 14 - days_david_worked[0]\n    \n    return days_emma_worked\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_money_pence = 126  # convert pounds to pence\n    \n    for number_of_coins in range(1, total_money_pence + 1):\n        if 2 * number_of_coins + 5 * number_of_coins == total_money_pence:\n            return number_of_coins * 2  # because we have equal number of 2p and 5p coins\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    # girls represent 1 - 5/9 of the remaining people, which is 4/9\n    people_without_adults = girls * (9/4)\n    # adults are 2/5 of the total, so the remaining are 3/5\n    total_people = people_without_adults * (5/3)\n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2\n    while True:\n        # Check if the number is a multiple of 5, an even number, and a perfect square\n        if num % 5 == 0 and num % 2 == 0 and (num ** 0.5).is_integer():\n            return num\n        num += 1\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    # Calculate the cost of an adult ticket\n    # If child's ticket is £30 with a 25% discount\n    # adult_ticket_cost = child_ticket_cost / (1 - discount_percentage)\n    child_ticket_cost = 30\n    child_discount_percentage = 0.25\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount_percentage)\n    \n    # Calculate the cost for a senior citizen\n    # If senior's ticket gets a 20% discount\n    # senior_ticket_cost = adult_ticket_cost * (1 - senior_discount_percentage)\n    senior_discount_percentage = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount_percentage)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_days = 3 * 30  # The total amount of man-days to build the house\n    days_for_2_people = men_days / 2  # The amount of days for 2 people to build the house\n    return days_for_2_people\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    number = 10\n    while not (number % 3 == 0 and number % 7 == 0):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_age_now = symbols('will_age_now')\n\n    equation = Eq(will_age_now + 8, 4 * (will_age_now - 4))\n\n    solutions = solve(equation, will_age_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we only care about the ones digit,\n    # we look at the pattern in the powers of 3.\n    # The pattern repeats every 4 powers: 3^1 = 3, 3^2 = 9, 3^3 = 27, 3^4 = 81.\n    # Thus, the ones digit cycles through 3, 9, 7, 1.\n    \n    # To find out which of these digits is the one for 3^2009,\n    # take the exponent 2009 modulo the length of the cycle, which is 4.\n    cycle_length = 4\n    pos_in_cycle = 2009 % cycle_length  # Get the position in the cycle\n\n    # Mapping the position to the ones digit\n    ones_digits = {1: 3, 2: 9, 3: 7, 0: 1}\n\n    # Get the ones digit for the position\n    ones_digit = ones_digits[pos_in_cycle]\n\n    return ones_digit\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Since you can choose exactly one mode of transportation from each category,\n    # the number of different ways to go from A to B is the sum of the individual options.\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    num_days = total_pages / pages_per_day\n    return int(num_days)\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # There are 20 books and 4 kids. We will model this problem as placing 3 dividers among 20 books\n    # The books will be represented by 20 '1's and the dividers by '0's\n    # For example, the combination '11101111100000111111' means:\n    #   - The first kid gets 3 books (before the first '0')\n    #   - The second kid gets 8 books (between the first and second '0')\n    #   - The third kid gets no books (between the second and third '0')\n    #   - The fourth kid gets 9 books (after the third '0')\n    # Since we have 20 books and 3 dividers, we are choosing 3 positions out of 23\n    total_positions = 20 + 4 - 1  # Number of books + number of kids - 1\n    dividers = 4 - 1  # Number of dividers (one less than the number of kids)\n\n    # Number of ways to distribute books is the same as choosing positions for dividers\n    ans = len(list(combinations_with_replacement(range(total_positions), dividers)))\n    return ans\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # The problem can be equated to finding the number of ways to partition 30 - 5*2 = 20 books\n    # among 5 kids, as each of them should get at least two books\n    remaining_books = 30 - (5 * 2)\n    partitions = 5 - 1  # 4 partitions to divide books into 5 parts\n    \n    # The number of ways to distribute 'remaining_books' into '5 kids' with no conditions\n    # is equivalent to finding the number of combinations of placing 'partitions' into\n    # 'remaining_books + partitions' slots.\n    ways = comb(remaining_books + partitions, partitions)\n\n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, chewy * 2 / 3)\n    equation2 = Eq(chewy, mike * 40 / 100)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    \n    return likes_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    max_sum = -float('inf')\n    second_largest_term = None\n    \n    for ops in permutations(operations):\n        term1 = eval(f\"Fraction(1, 2) {ops[0]} Fraction(1, 9)\")\n        term2 = eval(f\"Fraction(1, 3) {ops[1]} Fraction(1, 8)\")\n        term3 = eval(f\"Fraction(1, 4) {ops[2]} Fraction(1, 7)\")\n        term4 = eval(f\"Fraction(1, 5) {ops[3]} Fraction(1, 6)\")\n        current_sum = term1 + term2 + term3 + term4\n        terms = sorted([term1, term2, term3, term4])\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = terms[-2]  # second largest\n    \n    A = second_largest_term.numerator\n    B = second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one jug (j) and one cup (c)\n    j, c = symbols('j c')\n    \n    # Set the equations based on the given information\n    equation1 = Eq(4 * j + 5 * c, 85) \n    equation2 = Eq(2 * j + 2 * c, 40)\n    \n    # Solve the equations for j and c\n    solutions = solve((equation1, equation2), (j, c))\n    \n    # Get the cost of one cup\n    cup_cost = solutions[c]\n    \n    # Return the cost of the cup\n    return cup_cost\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    return classrooms * chairs_each\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    # inequality representing the win ratio after playing 5 more games\n    inequality = ((x + 3) / (2 * x + 5)) > 0.505\n\n    # Solving for the number of games won before the weekend\n    win_games_bound = solve(inequality, x)\n\n    # Since x represents the number of games, it must be an integer\n    # Therefore, we take the integer part of the upper bound (47.5) and subtract 1\n    largest_wins_before_weekend = int(win_games_bound[0].evalf()) - 1\n\n    return largest_wins_before_weekend\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n\n    initial_amount = spent + left\n\n    return initial_amount\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Coins in UK currency: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p)\n    # Susan's bus fare is 44p\n    # We want to minimize the number of coins, so we start from the largest denomination\n    # Let's assume Susan pays with a £1 coin (100p), which is the smallest coin larger than the fare\n    \n    amount_paid = 100  # Susan pays with a £1 coin\n    fare = 44  # Bus fare\n    change = amount_paid - fare  # Change to be given\n        \n    # Calculate the smallest number of coins for the given change\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Possible coin denominations\n    coin_count = 0  # The smallest number of coins\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            coin_count += 1\n            \n            # Early breakout if the remaining change is zero\n            if change == 0:\n                break\n        if change == 0:\n            break\n\n    # Total number of coins that change hands is 1 (Susan pays) + coin_count (Driver gives change)\n    total_coins = 1 + coin_count\n    return total_coins\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference / (15 - 10)\n\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [\n        (1, 1*2), (2, 2*4), (3, 4*7),\n        (4, 7*11), (5, 11*16), (6, 16*22),\n        (7, 22*29), (1, 29)\n    ]\n    sum_series = sum(numerator / denominator for numerator, denominator in terms)\n    return sum_series\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    students_class_A = 24\n    students_class_B = 36\n    students_class_C = 42\n\n    gcd_AB = gcd(students_class_A, students_class_B)\n    gcd_ABC = gcd(gcd_AB, students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum((-1)**(k//4) * (200 - k) for k in range(200))\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_cost * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n    \n    # Let x be the number of correct answers\n    # Therefore, 20 - x will be the number of incorrect answers\n    # We form the equation: 5x + (-3)(20 - x) = 76\n    \n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # Total number of ways to select 3 points out of 12 to form a triangle\n    total_triangles = (12 * 11 * 10) // (3 * 2 * 1)\n    \n    # Since the points are on a circle and the distances\n    # between adjacent points are equal, the right angle\n    # will always be at a point which is the vertex of an\n    # isosceles right-angled triangle where the equal sides\n    # are the adjacent points. This can occur only when the\n    # points are 3 (including the vertex) and 4 points apart.\n\n    # The number of right-angled triangles where the points are 3 and 4 apart\n    # (i.e., the sides of the right angle are 3 and 4 points apart)\n    # is 12 since there are 12 possible starting points for the hypotenuse.\n\n    right_angle_triangles = 12\n\n    return total_triangles - right_angle_triangles\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    cost_price = symbols('cost_price')\n    \n    # Calculate marked price which is 20% above the cost price\n    marked_price = cost_price * 1.20\n    \n    # Calculate the selling price which is 90% of the marked price\n    selling_price = marked_price * 0.90\n    \n    # Calculate the profit\n    profit = selling_price - cost_price\n    \n    # Create the equation using the given profit of $120\n    equation = Eq(profit, 120)\n    \n    # Solve the equation\n    solutions = solve(equation, cost_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    group_size = 38\n    total_cost = cost_per_person * group_size\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    # Define the symbol for the variable in the equation\n    x = symbols('x')\n\n    # Define the equation |x + 1| = 2x + 5\n    equation = Eq(Abs(x + 1), 2*x + 5)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Get the result\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # Four different colored socks in a row\n    ways_for_different_socks = factorial(4)  # 4! for different socks\n    # Two different colored pairs of socks in a row\n    ways_for_pairs = factorial(4) // (factorial(2) * factorial(2))  # 4! / (2! * 2!) for two pairs\n    ans = (ways_for_different_socks, ways_for_pairs)\n    return ans\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = (num_people * (num_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    # After both received 4 sweets, Andre now has `andre + 4`\n    # and beth has `beth + 4`\n    # Andre has 6 more sweets than Beth after receiving additional sweets\n    equation1 = Eq(andre + 4, beth + 4 + 6)\n    # Total sweets they originally had\n    equation2 = Eq(andre + beth, 24)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's current sweets include the 4 sweets given by the teacher\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    # Since it's a two digit and three digit number mixture, \n    # we don't need combinations or permutations to solve this.\n    # Iterate through the possible values of a and b (1-9 for a and 0-9 for b)\n    # since a leading digit cannot be 0.\n    for a in range(1, 10):\n        for b in range(0, 10):\n            # Construct the numbers using their digits.\n            ab = a * 10 + b\n            ba = b * 10 + a\n            aab = a * 100 + a * 10 + b\n            \n            # Check if the equation is satisfied.\n            if ab + ba + b == aab:\n                # If the condition is met, return the sum of a and b.\n                return a + b\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # Equation representing that 3 tables have the same mass as 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    # Equation representing that a table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Total number of people is Judy + 5 friends.\n    total_people = 1 + 5\n\n    # Judy can stand at either of the two ends.\n    judy_positions = 2\n\n    # The rest of the friends (5) can be arranged in any order.\n    friend_permutations = factorial(5)\n\n    # Total ways Judy and her friends can perform.\n    total_ways = judy_positions * friend_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4 # Beth's current sweets after getting 4 more sweets\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers_to_sum = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers_to_sum)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # Since the Ferrari driver finished in second place after overtaking 5 cars,\n    # it implies that originally he was in 7th place (5 cars + 1 car in first place + 1 Ferrari itself).\n    # So, we can conclude that there were 7 cars in the race including the Ferrari.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea should leave Ben with a number of apples\n    # that is a multiple of 4 at each turn.\n    # To achieve this, Anthea should take 2 apples in the first turn,\n    # leaving 16 apples on the table, which is a multiple of 4.\n    # This way, no matter how many apples Ben takes afterward (1, 2, or 3),\n    # Anthea can always take a number of apples to bring the total back to a multiple of 4.\n    # By following this strategy, Anthea will always be the one to take the last apple.\n    ans = 18 % 4\n    return ans\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Set up the equation: (x - 6) / 12 = 2\n    # Solve for x to find the original number\n    x = 2 * 12 + 6\n    return x\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    younger_maths, younger_english = symbols('younger_maths younger_english')\n    \n    elder_maths = younger_maths + 10\n    elder_english = younger_english - 4\n    \n    elder_total = elder_maths + elder_english\n    younger_maths = younger_english - 12\n\n    equations = (\n        Eq(elder_total, 88),\n        Eq(elder_maths, younger_maths + 10),\n        Eq(elder_english, younger_english - 4),\n        Eq(younger_maths, younger_english - 12),\n    )\n\n    solutions = solve(equations, (younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    sum_of_four = 130 * 4\n    sum_of_three = 110 * 3\n    removed_number = sum_of_four - sum_of_three\n    return removed_number\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    for first_move in range(1, 3):\n        apples_left = 14 - first_move\n        if apples_left % 3 == 0:\n            return first_move\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencils, markers = symbols('pencils markers')\n    \n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n    \n    solutions = solve((equation1, equation2), (pencils, markers))\n    \n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n    \n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    brush_cost = 1\n\n    # Assume all items are paintbrushes first\n    all_brush_cost = total_items * brush_cost\n    remaining_cost = total_cost - all_brush_cost\n\n    # Calculate the number of markers then\n    marker_count = remaining_cost // (marker_cost - brush_cost)\n\n    return marker_count\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n\n    # Average weight = (Total weight of males + Total weight of females) / (Number of males + Number of females)\n    # Total weight of males = average weight of males * number of males\n    total_male_weight = 75 * 3\n    \n    # Total weight of females = average weight of females * number of females\n    total_female_weight = 60 * f\n\n    # Total weight of all teachers = average weight of all teachers * total number of teachers\n    # total number of teachers = number of males + number of females\n    total_teachers_weight = 65 * (3 + f)\n\n    # Now we form an equation based on the information given\n    equation = Eq(total_male_weight + total_female_weight, total_teachers_weight)\n\n    # Solve the equation for f\n    solution = solve(equation, f)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_front = 5\n    from_back = 7\n    from_left = 2\n    from_right = 4\n\n    # Since Cora is 5th from the front and 7th from the back,\n    # there must be 4 students in front of her and 6 behind her.\n    # Therefore, the total number of rows is 5 + 6.\n    total_rows = from_front + from_back - 1\n\n    # Since Cora is 2nd from the left and 4th from the right,\n    # there must be 1 student to her left and 3 to her right.\n    # Therefore, the total number of columns is 2 + 3.\n    total_columns = from_left + from_right - 1\n\n    # The total number of students is the number of rows times columns.\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of 1 silver spoon be s and the value of 1 gold ring be g.\n    # According to the question, the value of 12 silver spoons is three quarters the value of 6 gold rings.\n    # Therefore, we have the equation: 12s = (3/4) * 6g\n    # We need to find the number of silver spoons that have the same value as 3 gold rings.\n    # So, we are looking for the number x such that x * s = 3 * g.\n\n    # We can solve the equation 12s = (3/4) * 6g for s in terms of g.\n    # s = (3/4) * 6g / 12\n    # s = (3/4) * g / 2\n    # s = (3/8) * g\n\n    # Now, we replace s in the equation x * s = 3 * g with (3/8) * g.\n    # x * (3/8) * g = 3 * g\n    # x * (3/8) = 3\n    # x = 3 / (3/8)\n    # x = 3 * (8/3)\n    # x = 8\n\n    # 8 silver spoons have the same value as 3 gold rings.\n    return 8\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Since the boys form the outermost layer and alternate with girls, the difference\n    # in boys and girls corresponds to exactly two layers (one boy layer and one girl layer).\n    # Therefore, the side of the square for boys will have two more units than that of girls.\n    \n    # If n = side of the square for girls, then (n + 2) = side of the square for boys.\n    # Total boys = (n + 2)^2\n    # Total girls = n^2\n    # The difference given is 55: (n + 2)^2 - n^2 = 55\n    # Solving the equation for n by expansion and simplification.\n    # n^2 + 4n + 4 - n^2 = 55 => 4n + 4 = 55 => 4n = 51 => n = 51 / 4\n    # Since n has to be an integer (it's the side of a square array), we find the\n    # smallest integer n such that 4n + 4 is at least 55.\n\n    n = 1\n    while 4*n + 4 < 55:\n        n += 1\n\n    # Now that we have n, calculate total students = total boys + total girls\n    total_boys = (n + 2) ** 2\n    total_girls = n ** 2\n    total_students = total_boys + total_girls\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(33*55)  # Factorize 33*55\n    for prime, exp in factors.items():\n        if exp % 2 != 0:  # If exponent is not even, we need to multiply by the prime to get an even exponent\n            factors[prime] += 1\n\n    m = 1\n    for prime, exp in factors.items():\n        m *= prime ** (exp // 2)  # Multiply prime factor raised to half its exponent for constructing the square number\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # There are 8 pieces of candy and each plate has at least 2 pieces.\n    # We can start by subtracting the minimum required for each plate.\n    candies = 8\n    min_candies_per_plate = 2\n    plates = 3\n    remaining_candies = candies - (min_candies_per_plate * plates)\n    \n    # After giving each plate 2 candies, we have a simpler problem:\n    # dividing the remaining candies among three plates without restriction.\n    # This is a problem of distributing 'remaining_candies' indistinguishable items into 'plates' distinguishable boxes.\n    \n    # This is equivalent to placing two dividers among the remaining candies to separate them into three parts.\n    # The formula for this is combinations of 'n+k-1' choose 'k-1' where n is the remaining candies and k is the number of plates.\n    \n    from math import comb\n    # The number of ways to place the dividers is the number of combinations of 'remaining_candies + plates - 1' choose 'plates - 1'.\n    # In this case, it's 'remaining_candies + 2' choose '2'.\n    num_ways = comb(remaining_candies + plates - 1, plates - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    # Star is the first runner so we only need to find the arrangements\n    # for the remaining four teammates.\n    num_ways = factorial(4)\n    \n    return num_ways\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n    \n    # Convert time to seconds for easier calculations\n    first_light_time = 1 * 60  # every minute\n    second_light_time = 1.5 * 60  # every 1.5 minutes\n    minimum_third_light_time = 30  # at least 30 seconds\n    \n    # Calculate Least Common Multiple (LCM) of the first two traffic lights\n    first_two_lcm = lcm(first_light_time, second_light_time)\n    \n    # Since all three lights are supposed to turn green every 9 minutes (540 seconds),\n    # we calculate LCM for 9 minutes with the LCM of first two lights.\n    target_lcm = lcm(first_two_lcm, 9 * 60)\n    \n    # Now, we need to find the smallest cycle time for the third light\n    # that makes the LCM of all three equal to the target_lcm\n    # and is greater than or equal to the minimum_third_light_time\n    third_light_time = minimum_third_light_time\n    while True:\n        if lcm(first_two_lcm, third_light_time) == target_lcm:\n            return third_light_time\n        third_light_time += 1\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Iterate over possible 4-digit increasing numbers\n    for i in range(1000, 10000):\n        digits = str(i)\n        # Ensure the number is increasing\n        if list(digits) == sorted(digits):\n            # Reverse the digits to get the decreasing number\n            decreasing = int(digits[::-1])\n            # Iterate over combinations of the digits\n            from itertools import permutations\n            for perm in permutations(digits):\n                third_number = int(''.join(perm))\n                # Check if the sum matches the given number and third number is different\n                if i + decreasing + third_number == 26352 and third_number not in [i, decreasing]:\n                    return min(i, decreasing, third_number)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        # Based on given examples, the pattern appears to be:\n        # (a * b) + (a + b)\n        return (a * b) + (a + b)\n\n    # Calculate 6 otimes 12 using the derived pattern\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans if ans < 200 else None\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(number - 0.30 * number, 210)\n    solution = solve(equation, number)\n    return solution[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of flowers Candy and Nancy have after exchange\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n\n    # Create equations based on the problem statement\n    # Candy had 11 flowers, and Nancy had 9 flowers.\n    # After exchanging, Nancy has 8 more flowers than Candy.\n    equation1 = Eq(nancy_now, candy_now + 8)\n    # The total number of flowers remains the same (11 + 9)\n    equation2 = Eq(candy_now + nancy_now, 11 + 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    a_count = 2\n    r_count = 2\n    n_count = 1 \n    g_count = 1 \n    e_count = 1\n\n    ways = factorial(total_letters) // (factorial(a_count) * factorial(r_count) * factorial(n_count) * factorial(g_count) * factorial(e_count))\n    \n    return ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 45\n    final_cost = initial_cost + (initial_cost * (increase_percentage / 100))\n    return final_cost\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # time taken to cut into 31 segments\n    time_for_31_segments = 60\n    \n    # each cut reduces the piece of wood by 1 segment, so 30 cuts are needed for 31 segments\n    cuts_for_31_segments = 31 - 1\n    \n    # hence, time per cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    \n    # for 50 segments, 49 cuts are needed\n    cuts_for_50_segments = 50 - 1\n    \n    # total time for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    daily_amount = 60 + 40  # total money received in one day\n    total_days = 3  # Monday, Tuesday, and Wednesday\n    total_amount = daily_amount * total_days  # total money received over all days\n    return total_amount\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    dividend = 36 * 24\n    return dividend\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_midnight_friday = -5\n    temperature_midday_saturday = 17\n\n    overall_temperature_change = temperature_midday_saturday - temperature_midnight_friday\n\n    return overall_temperature_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_pence = 43\n    booklet_cost_pounds = 1.85\n    total_budget_pounds = 10\n\n    total_cost_pounds = (3 * pen_cost_pence / 100) + (4 * booklet_cost_pounds)\n    change_pounds = total_budget_pounds - total_cost_pounds\n\n    return round(change_pounds, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    # Since Sibel is 14th from back, there must be 13 people behind her.\n    people_behind = position_from_back - 1\n    total_people = people_in_front + 1 + people_behind\n    \n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # As of my knowledge cutoff date in 2023, the population of St Petersburg is approximately 5.4 million.\n    # However, since the exact value might change and my data might be outdated, please input the latest figure.\n    # The following code assumes the population is 5.4 million, written in figures.\n    ans = 5400000\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Range of 3-digit numbers\n        digits = [int(d) for d in str(i)]  # Split number into list of digits\n        if abs(digits[0] - digits[1]) >= 7 and abs(digits[1] - digits[2]) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    # The thousands digit ranges from 5 to 9 because the number is larger than 5000\n    for thousands in range(5, 10):\n        # The other digits range from 0 to 9\n        for hundreds in range(10):\n            for tens in range(10):\n                for ones in range(10):\n                    if hundreds == 0 or thousands % hundreds == 0:\n                        if tens == 0 or thousands % tens == 0:\n                            if ones == 0 or thousands % ones == 0:\n                                count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the unknown\n    tilde = symbols('tilde')\n    \n    # Create the equation based on the given problem, where (~...~ + 7) / 9 = 9\n    equation = Eq((tilde + 7) / 9, 9)\n    \n    # Solve the equation and get the solution for the variable `tilde`\n    solutions = solve(equation, tilde)\n    \n    # Get the solution, which should be a list with a single value\n    return solutions[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # The 4th and 22nd child are opposite each other in a circle\n    # which means there must be an equal number of children between them\n    # on both sides of the circle. This distance is the half of the circle\n    # Because they are directly opposite, we can calculate the total number\n    # of children in the circle by summing the number of spaces from the 4th to\n    # the 22nd child, then doubling it (since the circle is symmetrical), and\n    # adding 2 to account for the 4th and 22nd children themselves.\n\n    spaces_between = 22 - 4\n    total_children = (spaces_between * 2) + 2\n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_of_weeks = 10\n\n    last_term = first_term + (num_of_weeks - 1) * difference\n    total_coins = (num_of_weeks * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses / 2\n    fiona_dresses = gina_dresses / 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return int(total_dresses)\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marks of A, B, C, D, and E\n    A, B, C, D = symbols('A B C D')\n\n    # Given conditions\n    avg_ABC = Eq((A + B + C) / 3, 95)\n    avg_BCD = Eq((B + C + D) / 3, 94)\n    # E has a score of 96 and is the second highest, implying A > E and B, C, D < E\n    # A has the highest score, B and D have the same score, and all marks are above 91\n    conditions = (A > 96, B < 96, C < 96, D < 96, A > B, A > C, A > D, B == D, B > 91, C > 91, D > 91)\n\n    # Solve the system of equations\n    solutions = solve((avg_ABC, avg_BCD) + conditions, (A, B, C, D))\n\n    # Since B and D have the same score, we return the value for D\n    return solutions[D]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Given information represented in sets where each set is an attempted combination\n    attempts = {\n        '5648': 2,\n        '3628': 2,\n        '3147': 2,\n        '5629': 2,\n        '1258': 0\n    }\n    \n    # Analyze attempts to deduce the correct combination\n    correct_digits = {}\n    wrong_digits = set()\n    \n    # Identify all wrong digits from the attempt where all digits are wrong\n    for digit in attempts['1258']:\n        wrong_digits.add(digit)\n    \n    # Iterate over each attempt and update the correct_digits dictionary\n    for attempt, correct_count in attempts.items():\n        for position, digit in enumerate(attempt):\n            if digit in wrong_digits:\n                continue  # Skip incorrect digits\n            # If digit is not known to be incorrect, check if it's already counted as correct\n            if digit not in correct_digits:\n                # Assume that the digit is correct and count it\n                correct_digits[digit] = 1\n            else:\n                # Increment the count of the digit being correct\n                correct_digits[digit] += 1\n\n    # Filter digits that were correct in exactly 3 attempts\n    correct_digits = {digit: count for digit, count in correct_digits.items() if count == 3}\n\n    # Knowing 2 digits are wrong in each attempt, find out the correct order\n    # All four attempts together contain every digit two times, except for the correct digits\n    final_combination = ''\n    for attempt in attempts.keys():\n        for digit in attempt:\n            if digit in correct_digits:\n                final_combination += digit\n                break  # Break to stop considering more digits in this attempt\n    \n    return final_combination\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let's denote the total number of teachers as T and female teachers as F.\n    # The total weight of all teachers in Star School is 65 * T.\n    # The total weight of 3 male teachers is 3 * 75.\n    # The total weight of female teachers is 60 * F.\n    # There are (T - 3) female teachers, and the sum of their weights plus the sum of male teachers' weights equal to the total weight.\n    # Hence, 60 * (T - 3) + 3 * 75 = 65 * T\n    # From this equation, we can express T in terms of F: T = F + 3\n    # So, 60 * F - 180 + 225 = 65 * F + 195\n    # Simplifying, we get 5 * F = 240 and therefore F = 48\n    # There are 48 female teachers.\n\n    from sympy import symbols, Eq, solve\n\n    F = symbols('F')\n    T = F + 3\n    equation = Eq(60 * (T - 3) + 3 * 75, 65 * T)\n    female_teachers = solve(equation, F)\n\n    return female_teachers[0]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarter_full = 350\n\n    mass_half_full = (mass_three_quarter_full - mass_quarter_full) / 2\n    mass_empty_jar = mass_quarter_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_fraction = 1/7\n    bottle_capacity_liters = 9.1\n    cup_capacity_ml = 350\n    cups_number = 4\n    ml_to_liters = 1e-3\n\n    soda_for_bottle = bottle_capacity_liters * bottle_fraction\n    soda_for_cups = cups_number * cup_capacity_ml * ml_to_liters\n\n    soda_left = total_soda_liters - (soda_for_bottle + soda_for_cups)\n\n    return soda_left\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    # Father's age 6 years ago is 5 times the son's age 6 years ago\n    equation1 = Eq(father - 6, 5 * (son - 6))\n\n    # Sum of their ages this year is 78\n    equation2 = Eq(father + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    # Given values\n    m = 2.0  # mass in kilograms\n    k = 500  # force constant in N/m\n    amplitude = 0.08  # amplitude in meters (converted from cm)\n    \n    x = 0.04  # position from equilibrium in meters (converted from cm)\n\n    # Total Energy (E) of the oscillator = (1/2) * k * amplitude^2\n    E = 0.5 * k * amplitude ** 2\n\n    # The speed (v) of the block when it's 4.0 cm from equilibrium can be determined by using energy conservation:\n    # Total Energy (E) = Kinetic Energy (KE) at x + Potential Energy (PE) at x\n    # E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # Solve for v: v = sqrt((E - (1/2) * k * x^2) * 2/m)\n    v = sqrt((E - 0.5 * k * x ** 2) * 2 / m)\n\n    return E, v\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_deposit = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100  # Convert percentage to decimal\n\n    # Calculate the number of years based on the compound interest formula\n    # final_amount = initial_deposit * (1 + interest_rate) ** years\n    # Solve for years: years = log(final_amount / initial_deposit) / log(1 + interest_rate)\n    from math import log\n\n    years = log(final_amount / initial_deposit) / log(1 + interest_rate)\n    years = round(years)  # Bella mentioned number of years, hence rounding it off\n\n    # Check if Bella's statement is correct\n    if years == 5:\n        return True  # Bella is right\n    else:\n        return years  # The actual number of years\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -2023**0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100 # converting pounds to pence\n    coin_value = 5 # value of each 5p coin in pence\n\n    num_coins = total_pence / coin_value\n\n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, b = symbols('p b')  # Represents the distance Pip and Bud run in one minute\n\n    # 3 minutes running\n    total_pip = 3 * p\n    total_bud = 3 * b\n\n    # Pip runs 20 meters more than Bud each minute\n    equation1 = Eq(p, b + 20)\n\n    # Total of 540 metres in 3 minutes\n    equation2 = Eq(total_pip + total_bud, 540)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, b))\n\n    # Distance Pip has run in 3 minutes\n    pip_3_minutes = solutions[p] * 3\n\n    return pip_3_minutes\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose wants to ensure her victory, she has to leave a situation after her first move where Kylie is forced into a losing position.\n    # The losing positions in this game are when the number of marbles left is a multiple of 3 (since no matter if Kylie picks 1 or 2 marbles on her turn,\n    # Rose can always pick 2 or 1 marbles respectively to make the total taken marbles in one full round 3).\n    # To force Kylie into a losing position right away, Rose must pick a certain number of marbles to make the remaining number a multiple of 3.\n\n    total_marbles = 14\n    # Check for the first turn how many marbles Rose should take, so that the remaining marbles are a multiple of 3\n    for marbles_taken_by_rose in range(1, 3):\n        if (total_marbles - marbles_taken_by_rose) % 3 == 0:\n            return marbles_taken_by_rose\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_sum = int('2A3', 16) + int('17B', 16)\n    ans = hex(hex_sum)[2:].upper()\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 0.25 * 0.30 * 0.40 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    red_flowers = 5\n    green_flowers = 2\n    white_flowers = 3\n\n    red_flower_price = 2\n    green_flower_price = 5\n    white_flower_price = 10\n\n    total_revenue = (red_flowers * red_flower_price +\n                     green_flowers * green_flower_price +\n                     white_flowers * white_flower_price)\n    \n    total_flowers = red_flowers + green_flowers + white_flowers\n    \n    average_price = total_revenue / total_flowers\n\n    return average_price\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let the original number of bottled drinks be x.\n    # Initially, 60% of x are coffee, so 40% are tea.\n    # Let y be the number of additional bottles of tea.\n    # Finally, 40% of (x + y) are coffee, which means 60% of (x + y) are tea.\n    # We set up the equation where the final number of tea bottles (original number + y) is \n    # equal to 60% of the total number of bottles (x + y).\n    # 0.4 * x + y = 0.6 * (x + y)\n    # We simplify the equation to find y in terms of x, which represents the increase in\n    # number of tea bottles.\n    # Since we know we're looking for a percentage, we can explicitly solve for y/x.\n    \n    # 0.4 * x + y = 0.6 * x + 0.6 * y\n    # 0.4 * y = 0.2 * x\n    # y = (0.2 * x) / 0.4\n    # y = 0.5 * x\n    \n    # The percentage increase in the number of bottles of tea is y\n    # divided by the initial amount of tea (0.4 * x) times 100.\n    # percentage_increase = (y / (0.4 * x)) * 100\n    # percentage_increase = ((0.5 * x) / (0.4 * x)) * 100\n    # percentage_increase = (0.5 / 0.4) * 100\n    # percentage_increase = 1.25 * 100\n    percentage_increase = 125\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    wheels_tricycle = 3\n\n    for tricycles in range(total_vehicles + 1):\n        cars = total_vehicles - tricycles\n        wheels = tricycles * wheels_tricycle + cars * 4\n        if wheels == total_wheels:\n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # Lewis's money in pence\n    james_money_p = 110  # James's money in pence (since £1.10 = 110p)\n\n    total_money_p = lewis_money_p + james_money_p  # total money in pence\n\n    # If needed to convert pence to pounds, use: total_money_pounds = total_money_p / 100\n    # However, the question does not ask for conversion to pounds, so returning in pence.\n\n    return total_money_p\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    w_count = 1\n    i_count = 2\n    n_count = 3\n    g_count = 1\n    \n    ans = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    \n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 >= 3 and x1 + x2 + x3 == 13:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    return derangement(6)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n\n    # Using the equation F = Δ(mv) / Δt which simplifies to F = m * (Δv / Δt)\n    initial_velocity = 0  # The object is stationary initially\n    acceleration = (final_velocity - initial_velocity) / time\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for number in range(101):\n        if number % 4 == 0 and number % 7 == 6 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Determine the largest number that cannot be obtained as a combination of 3 and 7\n    # This is an example of the Chicken McNugget Theorem or Frobenius Coin Problem.\n    # For two numbers a and b where gcd(a, b) = 1, the largest integer that cannot be\n    # expressed as a combination of multiples of a and b is a * b - a - b.\n\n    a = 3\n    b = 7\n    ans = a * b - a - b\n    \n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the number of lemonade bottles ($4 each), y be the number of \"1000 Plus\" bottles ($7 each)\n    x, y = symbols('x y', integer=True)\n\n    # Create equations based on the problem statement\n    # Ronald started with a total of 350 bottles\n    equation1 = x + y - 350\n\n    # His total income was $2012\n    equation2 = 4*x + 7*y - 2012\n\n    # Solve the system of equations for the number of bottles\n    # We're looking for the minimum y which maximizes x because each lemonade sold means less total income\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Get the y value from the solutions, which is the number of \"1000 Plus\" bottles\n    min_bottles_plus = solutions[y]\n\n    return min_bottles_plus\n  \nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial ratio values\n    ratio_blue = 3\n    ratio_red = 5\n    total_initial_pens = 96\n\n    # Calculate initial number of blue and red pens\n    initial_blue = (ratio_blue / (ratio_blue + ratio_red)) * total_initial_pens\n    initial_red = total_initial_pens - initial_blue\n\n    # Number of red pens added\n    red_added = 60\n\n    # After adding pens, calculate the total and the new number of red pens\n    final_red = initial_red + red_added\n    total_final_pens = initial_blue + final_red\n\n    # Calculate the percentage of blue pens after adding\n    blue_percentage_after = 40 / 100\n\n    # Calculate final number of blue pens using the percentage information\n    final_blue = blue_percentage_after * total_final_pens\n\n    # Blue pens added is the difference between final and initial number of blue pens\n    blue_added = final_blue - initial_blue\n\n    return int(blue_added)\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n\n    sum_dec = num1 + num2\n    ans = ''\n    \n    while sum_dec > 0:\n        ans = str(sum_dec % 7) + ans\n        sum_dec //= 7\n\n    return ans or '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n    \n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    \n    return wearing_neither\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import factorint\n\n    # Find numbers with unique counts of factors by counting the divisors (including 1 and the number itself)\n    unique_factors = {sum(factorint(i).values()) + 1 for i in range(1, 13+1)}\n    # Find which numbers have a unique number of factors\n    numbers_with_unique_factors = [i for i in range(1, 13+1) if sum(factorint(i).values()) + 1 in unique_factors]\n\n    # After the two students put their hands up, we know the numbers on their forehead \n    # have a unique count of factors. We remove these numbers and all multiples of them.\n    for n in numbers_with_unique_factors:\n        # Remove the number and its multiples from the unique_factors set\n        multiples = [n*i for i in range(1, 14//n+1)]\n        for m in multiples:\n            if m in numbers_with_unique_factors:\n                numbers_with_unique_factors.remove(m)\n\n        # After removing the multiples, if we are left with only 7 unique numbers with unique factors,\n        # we know that these two numbers were on the students' foreheads\n        if len(numbers_with_unique_factors) == 7:\n            numbers_on_forehead = n  # Both the number and its multiples\n            break\n\n    # From the students' conversation, we know that May's number is exactly 1 more than Mark's \n    # and 2 less than Alice's. Since May and Alice both have odd numbers, and all odd numbers are 2 apart, \n    # Mark's number must be even. Thus, we look for two consecutive odd numbers in the list such that there \n    # is an even number between them that is not in the unique_factors list\n    \n    # Filter out the numbers with unique factors from the remaining numbers\n    remaining_numbers = set(range(1, 14)) - set(numbers_with_unique_factors)\n    \n    # Find the numbers for Alice, May, and Mark\n    for number in remaining_numbers:\n        if number + 2 in remaining_numbers and number + 1 not in numbers_with_unique_factors:\n            mark_number = number + 1\n            may_number = number\n            alice_number = number + 2\n            break\n\n    # Remove these numbers from the remaining\n    remaining_numbers -= {mark_number, may_number, alice_number}\n\n    # Calculate the product of the remaining numbers\n    return eval('*'.join(map(str, remaining_numbers)))\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "from math import gcd\n\ndef solution():\n    for i in range(1, 20):\n        if gcd(i, i+1) == 1:\n            product = 1\n            for j in range(1, 21):\n                if j != i and j != i + 1:\n                    product *= j\n            if product % i != 0 and product % (i + 1) != 0:\n                return i + (i + 1)\n                \nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    # Let's denote x as the number of incorrect answers.\n    # The number of correct answers is 12 + 3x.\n    # Each correct answer is worth 5 points, each incorrect or unanswered is -2 points.\n    # The total number of points is 151.\n    # The equation would be: 5*(12 + 3x) - 2*x = 151\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (12 + 3 * x) - 2 * x, 151)\n    number_incorrect = solve(equation, x)\n    \n    # Since we need the number of correct answers.\n    number_correct = 12 + 3 * number_incorrect[0]\n    \n    return number_correct\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of coins in each box\n    a, b, c = symbols('a b c')\n    \n    # Multivariate linear equation system\n    equation1 = Eq(a, 4 * b)      # A has four times the coins in B\n    equation2 = Eq(c + 0.06 * a, 1220)   # After removing 6% in A and adding to C, C has 1220 coins\n    equation3 = Eq(c + 0.20 * b, 1220)   # After removing 20% in B and adding to C, C has 1220 coins\n    equation4 = Eq(c, 1.22 * (a / 4 + b / 5) - (0.06 * a + 0.20 * b)) # C is 22% more than its original amount\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie, natasha = symbols('jamie natasha')\n    equation1 = Eq(jamie, 5/3 * natasha)\n    equation2 = Eq(jamie - natasha, 18)\n\n    solutions = solve((equation1, equation2), (jamie, natasha))\n\n    total_stamps = solutions[jamie] + solutions[natasha]\n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum = 0\n    for i in range(161, 15*15): # The numbers are less than 15*15 because quotient and remainder are equal and less than 15\n        if i % 15 == i // 15:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = num_terms * (first_term + last_term) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's declare symbols for Cici's age when she was born and Linda's current age\n    cici_born_age, linda_current_age = symbols('cici_born_age linda_current_age')\n\n    # Cici's age when she was born is 0, and Linda was 11 years old then\n    equation1 = Eq(linda_current_age - cici_born_age, 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((linda_current_age + 4) + (cici_born_age + 4), 37)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cici_born_age, linda_current_age))\n\n    # Linda's age 3 years later would be her current age + 3\n    linda_age_3_years_later = solutions[linda_current_age] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    from math import factorial\n    \n    ways_for_entrances = 5 ** 4  # Each person can choose from 5 entrances\n    ways_for_order = factorial(4)  # There are 4! ways to arrange 4 people\n\n    ans = ways_for_entrances * ways_for_order\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    \n    num_bags = total_peaches // peaches_per_bag\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Given numbers of apples, pears, and oranges with leftovers\n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n\n    # Find the gcd of the three amounts\n    possible_students = gcd(apples, gcd(pears, oranges))\n\n    return possible_students\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial as fact\n\n    # Judy can stand either at the first or the last place, so we have 2 options for her position\n    judy_positions = 2\n\n    # The remaining 5 friends can be arranged in any order, so we have 5! permutations\n    friends_permutations = fact(5)\n\n    # Using the multiplication rule to find total ways\n    total_ways = judy_positions * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # The distance from home to school and back is 300 m each way for a total of 600 m\n    total_distance = 600 # m\n\n    # Speed going to school is 10 m/min (uphill)\n    speed_to_school = 10 # m/min\n\n    # Speed coming back home is 30 m/min (downhill)\n    speed_from_school = 30 # m/min\n\n    # Time to get to school is distance divided by speed\n    time_to_school = 300 / speed_to_school # min\n\n    # Time to come back home is distance divided by speed\n    time_from_school = 300 / speed_from_school # min\n\n    # Total time for the round trip is the sum of the times\n    total_time = time_to_school + time_from_school # min\n\n    # Average speed is the total distance divided by the total time\n    average_speed = total_distance / total_time # m/min\n\n    return average_speed\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number1 = 6\n    lcm = 12\n    \n    for number2 in range(1, lcm + 1):\n        if lcm % number2 == 0 and number1 % number2 in (1, 2):\n            return number2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    count = 1\n    number = 1\n    while count < 200:\n        number += 1\n        count += len(str(number))\n    # We might have stepped over the 200th digit, so let's go back until we're right before it\n    while count > 200:\n        count -= 1\n        number -= 1\n    # Now, retrieve the 200th digit\n    return int(str(number)[200 - count - 1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Assume that all products are qualified, which is the theoretical maximum point\n    max_points_per_day = 500 * 5\n    total_max_points = max_points_per_day * 4\n\n    # The actual points are less than the maximum points by:\n    points_difference = total_max_points - 9931\n\n    # Since 18 points are lost for every unqualified product, the number of unqualified products is:\n    unqualified_products = points_difference / 18\n\n    # The number of qualified products is the total produced minus unqualified products:\n    total_products = 500 * 4\n    qualified_products = total_products - unqualified_products\n\n    return int(qualified_products)\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # In a chess match, each player plays each other player once.\n    # So if there are n students, there will be n*(n-1)/2 matches in total.\n    # We are given the number of matches played by A, B, C, D, E, and G.\n    # Let's denote the total number of matches by M.\n    # Then we have M = 4 + 6 + 2 + 1 + 3 + 5 + F (as F is the number of matches played by student F).\n    \n    # The total number of matches between 7 students.\n    total_students = 7\n    total_matches = total_students * (total_students - 1) // 2\n    \n    # Sum of matches played by A, B, C, D, E, and G.\n    matches_played = 4 + 6 + 2 + 1 + 3 + 5  # F is not included yet.\n    \n    # Since each match involves two players, we count each match twice in the sum of individual matches played.\n    # So, the total sum of individual matches played should be twice the total matches.\n    # Hence, 2 * M should be equal to the sum of matches played by all students (including F) twice.\n    total_matches_played_double = total_matches * 2\n    \n    # Now, we can calculate the number of matches played by F.\n    matches_played_by_F = total_matches_played_double - matches_played\n    \n    return matches_played_by_F\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    original_price = cost + 40\n    sale_price = original_price * 0.8\n    profit = sale_price - cost\n\n    equation = Eq(profit, 12)\n\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    part1 = 6.25 * 8.27 * 16\n    part2 = 1.25 * 0.827 * 8\n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original ratio of hens to roosters\n    original_ratio = Eq(hens, 6 * roosters)\n\n    # After increase, the ratio of hens to roosters\n    increased_ratio = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, increased_ratio), (hens, roosters))\n\n    # The total number of chickens before the increase\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven = 7 * 12\n    total_for_eight = 8 * 11\n    eighth_number = total_for_eight - total_for_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # The given sequence is symmetric around the middle 8\n    # Calculate the sum of numbers from 1 to 8\n    sum_to_eight = sum(range(1, 9))\n    \n    # Double the sum to account for the symmetric part, and subtract 8 because it's included twice\n    symmetric_sum = 2 * sum_to_eight - 8\n    \n    # Add the remaining 1 and 2 at the end of the sequence\n    ans = symmetric_sum + 1 + 2\n\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    length_of_sequence = len(recurring_sequence)\n    position = 2021\n    digit_index = (position - 1) % length_of_sequence\n    ans = int(recurring_sequence[digit_index])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = sum(str(i).count('9') for i in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let d represent Daniel's current age and x represent his daughter's current age\n    d, x = symbols('d x')\n\n    # Two years ago, Daniel's age was 6 times his daughter's age: d - 2 = 6 * (x - 2)\n    equation1 = Eq(d - 2, 6 * (x - 2))\n\n    # Two years from now, Daniel's age will be 4 times his daughter's age: (d + 2) = 4 * (x + 2)\n    equation2 = Eq(d + 2, 4 * (x + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, x))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    distance_pq = 1800\n    meet_point_from_q = 800\n    remaining_distance_for_baye = distance_pq - meet_point_from_q\n\n    # Let's say April's speed is A and Baye's speed is B, we have distance_baye_walked / B = distance_april_walked / A\n    # When they first meet, time taken for both is the same, so we let the distance covered be x for Baye.\n    # Therefore, distance for April is 1800 - x when they meet.\n    # The remaining distance for April back to P is x.\n    # Since April runs at 4 times her speed back, the time taken from meeting point back to P is x/(4A)\n    # In the same time, Baye has walked x/B = x/(4A) * 4 = x * (A/B)\n    # Which means the ratio of April's speed to Baye's speed is A/B = distance_baye_walked / x\n    # So distance covered by Baye when April reaches P is x + remaining_distance_for_baye / 4\n\n    # We have two distances for Baye: x when meeting and x + (remaining_distance_for_baye / 4) when April reaches P\n    # Since the two distances must be the same, we can solve for x:\n    # x = x + (remaining_distance_for_baye / 4)\n    # 3x = remaining_distance_for_baye\n    # x = remaining_distance_for_baye / 3\n\n    distance_baye_walked_when_april_reach_p = remaining_distance_for_baye / 3\n    distance_baye_away_from_q = distance_pq - distance_baye_walked_when_april_reach_p\n    return distance_baye_away_from_q\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # Double-digit palindromes: 11 to 99\n    for i in range(1, 10):\n        count += 1  # the numbers 11, 22, ..., 99\n\n    # Triple-digit palindromes: 101 to 999\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # the numbers 101, 111, ..., 191, 202, ..., 292, ..., 909, 919, ..., 999\n\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of money Bud had be x\n    initial_money = symbols('initial_money')\n\n    # The cost of the book is 1/3 of the initial money\n    cost_book = (1/3) * initial_money\n\n    # The cost of the bag is 2/5 of the initial money\n    cost_bag = (2/5) * initial_money\n\n    # Equation representing the total cost of the book and the bag\n    total_cost_eq = Eq(cost_book + cost_bag, 132)\n\n    # Solve the equation to find the initial amount of money Bud had\n    initial_amount_solution = solve(total_cost_eq, initial_money)\n\n    # Return the initial amount Bud had\n    return initial_amount_solution[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    \n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(c, b - 75)\n    equation3 = Eq(a + b + c, 835)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case for drawing green beads:\n    # Darrell draws all the blue and white beads first before getting any green beads\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n    \n    # Calculate the minimum number of draws to ensure 5 green beads\n    min_draws = blue_beads + white_beads + green_beads_needed\n\n    return min_draws\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_5 = 105 // 5\n    count_7 = 105 // 7\n    count_5_and_7 = 105 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 216):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    # Iterate over the possible 5-digit numbers\n    for number in range(10000, 100000):\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    # Each page has a page number and page numbers consist of digits.\n    # Scenario 1: For page numbers 1-9, each page takes 1 digit, total 9 digits\n    # Scenario 2: For page numbers 10-99, each page takes 2 digits, total 90*2 digits\n    # Scenario 3: For page numbers 100-999, each page takes 3 digits, so we need\n    # to find out how many pages fall into this category in the notebook. \n    # In this case, it's from page 100 to the last page 81, so 81 - 100 + 1 = 0 pages here.\n\n    # Total number of digits is the sum of digits from each scenario.\n    digits = (9 * 1) + (81 - 10 + 1) * 2 \n    \n    return digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Time taken to walk from the first to fourth floor\n    time_first_to_fourth = 12\n    \n    # Floors involved from first to fourth is 3 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals_first_to_fourth = 4 - 1\n    \n    # Floors involved from first to eighth is 7 intervals (1st to 2nd, 2nd to 3rd, ..., 7th to 8th)\n    intervals_first_to_eighth = 8 - 1\n    \n    # Since John walks at a constant speed, the time taken is directly proportional to the number of intervals\n    # Calculate the time taken for each interval from first to fourth floor\n    time_per_interval = time_first_to_fourth / intervals_first_to_fourth\n    \n    # Calculate total time taken for walking from the first to eighth floor\n    time_first_to_eighth = time_per_interval * intervals_first_to_eighth\n    \n    return time_first_to_eighth\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for basket1 in range(7):  # The first basket can have 0 to 6 apples\n        for basket2 in range(7 - basket1):  # The second basket can have 0 to (6 - apples in the first basket)\n            # The third basket's apples are determined by the first two baskets.\n            basket3 = 6 - basket1 - basket2  \n            count += 1  # Every valid combination is a possible way\n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Original ratio of birds to squirrels\n    ratio_birds_to_squirrels = 8 / 5\n    \n    # suppose the original number of birds and squirrels are 8k and 5k respectively\n    # then the original total number of birds and squirrels is 13k\n    # After one year, the number of squirrels increased by 20%\n    # Hence, the new number of squirrels is 5k * 1.2 = 6k\n    # Since the total does not change, the new total number of birds and squirrels remains 13k\n    # Therefore, the new number of birds is 13k - 6k = 7k\n    # The percentage of birds that flew away is ((8k - 7k) / 8k) * 100%\n    birds_flew_away_percentage = ((8 - 7) / 8) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n    for divisor in range(1, 40-remainder):\n        for quotient in range(1, (40-remainder-divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    avg_pizza_per_month = 15\n    num_months = 5  # March to July inclusive\n\n    total_pizzas = avg_pizza_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_days = ((last_term - first_term) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 3 + b % 3) + (a // 3 + b // 3) * 3\n    \n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drunk = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    term_position = 5  # We need to find the 5th term\n\n    next_term = first_term + (term_position - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    return sum(range(1, 51))\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # As 9/A < 1, A must be less than 9.\n        if (5/9) < (9/A):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend will send a card to all other friends.\n    # Since each friend can't send a card to themselves, it's (friends - 1) cards each friend sends.\n    cards_sent_by_one_friend = friends - 1\n    # Total cards sent is then:\n    total_cards_sent = friends * cards_sent_by_one_friend\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    total_students = 39\n    equation1 = Eq(boys + girls, total_students)\n    equation2 = Eq(boys / 4, 2 * girls / 5)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    more_boys_than_girls = solutions[boys] - solutions[girls]\n\n    return more_boys_than_girls\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    tanya_left = 3\n    tanya_right = 5\n    tanya = 1  # including Tanya herself\n\n    total_members = tanya_left + tanya + tanya_right\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    number = 87878\n    primes = list(primerange(1000, 10000))  # all four-digit prime numbers\n    \n    for prime in reversed(primes):  # start from the largest prime\n        if number % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    D, A, R, T, C = symbols('D A R T C')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n\n    # Since each letter represents a different integer,\n    # and none can be zero, they must be from the set {1, 2, ... , 9}\n    possible_values = set(range(1, 10))\n\n    # Look for all combinations for A, R, and T\n    max_ART = 0\n    for A_val in possible_values:\n        for R_val in possible_values - {A_val}:\n            for T_val in possible_values - {A_val, R_val}:\n                # Calculate D and C based on the current A, R, and T\n                D_val = 11 - (A_val + R_val + T_val)\n                C_val = 13 - (A_val + R_val + T_val)\n\n                # Check if the calculated D and C are valid\n                if D_val in possible_values - {A_val, R_val, T_val} and \\\n                   C_val in possible_values - {A_val, R_val, T_val, D_val}:\n                    # Check if D_val + A_val + R_val + T_val == 11\n                    if D_val + A_val + R_val + T_val == 11:\n                        # Check if T_val + A_val + R_val + T_val == 12\n                        if T_val + A_val + R_val + T_val == 12:\n                            # Check if C_val + A_val + R_val + T_val == 13\n                            if C_val + A_val + R_val + T_val == 13:\n                                # Update max_ART if current A, R, T sum is greater\n                                max_ART = max(max_ART, A_val + R_val + T_val)\n\n    return max_ART\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 280 / 7\n    time_middle_segment = 400 / 5\n    time_last_segment = (800 - 280 - 400) / 8\n\n    # Sum the times to get the total time\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    total_crates = 24\n    van_capacity = 12\n\n    total_weight = crate_weight * total_crates\n    vans_needed = total_weight // van_capacity\n    if total_weight % van_capacity != 0:\n        vans_needed += 1\n    \n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the quantities we need to find\n    daniel_initial, patrick_initial, daniel_final, patrick_final = symbols('daniel_initial patrick_initial daniel_final patrick_final')\n    \n    # Create equations based on the problem statement\n    # Daniel and Patrick had an equal number of stickers at first\n    equation1 = Eq(daniel_initial, patrick_initial)\n    # Daniel gave away 24 stickers\n    equation2 = Eq(daniel_final, daniel_initial - 24)\n    # Patrick bought another 10 stickers\n    equation3 = Eq(patrick_final, patrick_initial + 10)\n    # In the end, Patrick had twice as many stickers as Daniel\n    equation4 = Eq(patrick_final, 2 * daniel_final)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (daniel_initial, patrick_initial, daniel_final, patrick_final))\n\n    return solutions[daniel_initial]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def partition(n, max_part):\n        if n == 0:\n            return 1\n        if max_part == 0 or n < 0:\n            return 0\n        return partition(n, max_part - 1) + partition(n - max_part, max_part)\n\n    ans = partition(5, 5) - 1 # Subtract one to exclude the number itself, which is not considered a split\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + (3 * henry_situps)\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea_level = -82\n    plane_height_above_sea_level = 569\n\n    vertical_distance = plane_height_above_sea_level - whale_depth_below_sea_level\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n    \n    # Since we want the smallest number of right-handed girls, \n    # we should first assume that all non-right-handed pupils are girls.\n    # This is the worst-case scenario for the number of right-handed girls.\n    non_right_handed = total_pupils - right_handed\n    right_handed_girls_minimum = max(0, total_girls - non_right_handed)\n\n    return right_handed_girls_minimum\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # The smallest difference will occur when the numbers are consecutively arranged in ascending and descending order\n    min_number = int(''.join(map(str, range(1, 10))))\n    max_number = int(''.join(map(str, range(9, 0, -1))))\n    \n    # Compute the absolute difference between the two numbers\n    ans = max_number - min_number\n    return ans\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - apples_fraction - bananas_fraction\n\n    equation = Eq(apples_fraction * total_fruits - lemons_fraction * total_fruits, 12)\n    total_fruits_solution = solve(equation, total_fruits)\n\n    lemons = lemons_fraction * total_fruits_solution[0]\n\n    return int(lemons)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    days = 9\n    # The number of skirts is calculated as a sum of an arithmetic sequence with\n    # the common difference being the number of skirts per worker per day.\n    total_skirts = sum(skirts_per_day * (day + 1) for day in range(days))\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    result = 234000 // 520\n    return result\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # Use conditional probability formula P(B|A) = P(A and B) / P(A)\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # 5 taps fill 1 litre in 2 minutes.\n    # Therefore, 1 tap will fill 1 litre in 5 times the time it takes 5 taps to fill it.\n    one_tap_time_for_one_litre = 5 * 2  # minutes\n\n    # We need to find the time it takes for 1 tap to fill a 500ml jug.\n    # Since 1 litre is twice 500ml, the time needed for 500 ml would be half the time needed for 1 litre.\n    one_tap_time_for_half_litre = one_tap_time_for_one_litre / 2\n\n    return one_tap_time_for_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    \n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n    \n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n    \n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n    equation = Eq(children - men, 140)\n    \n    total_visitors = solve(equation, visitors)\n    \n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n\n    for perm in permutations(digits, 3):\n        number1 = perm[0]*100 + perm[1]*10 + perm[2]\n        remaining_digits = set(digits) - set(perm)\n        for perm2 in permutations(remaining_digits, 3):\n            number2 = perm2[0]*100 + perm2[1]*10 + perm2[2]\n            current_sum = number1 + number2\n            max_sum = max(max_sum, current_sum)\n            \n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume_ml = 2000  # 2 liters in millilitres\n    volume_drank_ml = 350\n    volume_left_ml = initial_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    result = 3280 * 40 / 100\n    return result\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    pattern = [1, 8, 16, 23, 46, 53]\n    differences = [pattern[i + 1] - pattern[i] for i in range(len(pattern) - 1)]\n    next_difference = differences[-2] * 2 if len(pattern) % 2 == 0 else differences[-2] // 2\n    next_number = pattern[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the capacities of A, B and C as a, b and c respectively.\n    capacity = symbols('capacity')\n    \n    # According to the problem, we have two equations:\n    # When A and C are turned on, the water from A is 18 tons and the total water is the pool capacity\n    # Equation: 18 + c = capacity\n    # When B and C are turned on, the water from B is 27 tons and the total water is the pool capacity\n    # Equation: 27 + c = capacity\n    # We know that the flow rate of B is twice that of A, therefore, b = 2a\n    # Since 18 tons is from A with flow rate a, then 27 tons is from B with flow rate b = 2a\n    # Taking the ratios of the amounts gives us another equation:\n    # 18/a = 27/(2a)\n    \n    # Solving the equation for a gives us:\n    a = 18 / (27 / 2)\n\n    # Since B's flow rate is twice that of A, we get the capacity contributed by B:\n    b = 2 * a\n\n    # Now we can find out the capacity of the pool:\n    pool_capacity = b + c\n\n    # To find c, we can substitute the value of b in the second equation:\n    # 27 + c = capacity\n    # Since b = 2a and 27 tons is from B, we get:\n    c = pool_capacity - 27\n\n    # We have two expressions for capacity based on A & C and B & C. We equate them to find the capacity.\n    # pool_capacity = 18 + c and pool_capacity = 27 + c\n    # Solving for c in terms of capacity.\n    equation = Eq(18 + c, 27 + c)\n\n    solution = solve(equation, (capacity, c))\n\n    # The pool can be filled with the solution for capacity.\n    return solution[capacity]\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    avg_goals_per_match = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals_per_match * num_matches)\n    \n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # M and H cannot be zero as they are the first digits\n            continue\n        MATH = M * 1000 + A * 100 + T * 10 + H\n        HTAM = H * 1000 + T * 100 + A * 10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    end = 10\n    sum_result = sum(range(start, start + end * 2, 2))\n    return sum_result\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let x be the amount of grass grown per day\n    # Let H be the amount of grass one horse eats per day\n    # Let S be the amount of grass one sheep eats per day\n\n    # According to the problem, we have:\n    # 20H * 12 = x * 12\n    # 60S * 24 = x * 24\n    # H = 4S\n\n    # Therefore:\n    # 20H = x (Equation 1)\n    # 60S = x/2 (Equation 2, because it takes twice as long for sheep)\n\n    # Simplify Equation 2 by dividing both sides by 60:\n    # S = x/(2*60) (Equation 3)\n\n    # From H = 4S and Equation 3:\n    # H = 4 * (x/(2*60))\n    \n    # Therefore:\n    # 20H = 20 * 4 * (x/(2*60))\n    # x = 20 * 4 * (x/(2*60)) (From Equation 1)\n\n    # Simplify the equation:\n    # x = 20 * 4 * x / (2 * 60)\n    # x = x (Cancel out x from both sides, the equation holds true)\n\n    # Now, we can use the relationship to figure out the days it takes\n    # for 12 horses and 88 sheep to finish the grass:\n    # 12H + 88S = x\n\n    # Replacing H and S with the equivalent (H = 4S)\n    # 12H + 88S = 12 * 4S + 88S\n    #           = 48S + 88S\n    #           = 136S\n\n    # Now, replace S using Equation 3:\n    # 136S = 136 * (x/(2*60))\n\n    # Total amount of grass is x days' growth (as all grass would be eaten)\n    # Let's denote d as the number of days to eat all grass\n    # We have:\n    # 136S * d = x (Entire grassland)\n    # Plugging in the value of S:\n    # 136 * (x/(2*60)) * d = x\n\n    # We can cancel out x:\n    # 136 * d / (2*60) = 1\n    # d = (2*60) / 136\n    # The final division gives us the days:\n    d = (2*60) / 136\n\n    return round(d)\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_numbers = 0\n    # build numbers with exactly two sevens\n    for i in range(10):\n        if i != 7:\n            total_numbers += 2  # two positions for the non-seven digit\n    \n    # build numbers with three sevens\n    total_numbers += 1  # there's exactly one case of three sevens\n    \n    # subtract cases where the first digit is zero because it's not a 3-digit number\n    total_numbers -= 1\n    \n    return total_numbers\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    num_balls = 16\n    cost_per_ball = total_cost / num_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n    \n    # Mr Spencer (S) and his two children (C1, C2) will occupy 3 seats with S in the middle\n    # Treat the three as one unit (U) for now, so we have U, P1, P2, P3 (3 other people)\n    # Calculate the number of permutations for the 4 units (U, P1, P2, P3)\n    unit_permutations = factorial(4)\n\n    # Children (C1 and C2) can be arranged in 2! ways\n    children_permutations = factorial(2)\n    \n    # Total arrangements = Permutations of units * Permutations of children\n    total_arrangements = unit_permutations * children_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n\n    # Bill eats half of the sweets\n    sweets_after_eating = total_sweets / 2\n\n    # Bill gives away a third of the remaining sweets\n    sweets_after_giving = sweets_after_eating - (sweets_after_eating / 3)\n\n    return sweets_after_giving\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_score = 23\n    score_correct = 5\n    score_wrong = -2\n\n    for correct_answers in range(7):\n        wrong_answers = 6 - correct_answers\n        if (correct_answers * score_correct) + (wrong_answers * score_wrong) == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_of_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_of_52 = [i for i in range(1, 53) if 52 % i == 0]\n\n    # Find the common factor which will be B\n    common_factors = set(factors_of_24).intersection(factors_of_52)\n    minimum_A_plus_C = float('inf')\n\n    for B in common_factors:\n        A = 24 // B\n        C = 52 // B\n        A_plus_C = A + C\n        if A_plus_C < minimum_A_plus_C:\n            minimum_A_plus_C = A_plus_C\n\n    return minimum_A_plus_C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7  # in meters per minute\n\n    time_taken = distance / speed  # time = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of 2 dollar notes and y be the original number of 5 dollar notes\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 notes, so x + y = 55\n    equation1 = Eq(x + y, 55)\n    \n    # She spent 1/3 of the 2 dollar notes\n    spent_2_notes = x / 3\n\n    # After spending, she had x - spent_2_notes left\n    remaining_2_notes = x - spent_2_notes\n\n    # She received another 8 pieces of 5 dollar notes\n    new_5_notes_count = y + 8\n\n    # After that, the number of 5 dollar notes she had was 3/7 of the remaining number of notes\n    total_remaining_notes = remaining_2_notes + new_5_notes_count\n    equation2 = Eq(new_5_notes_count, 3 / 7 * total_remaining_notes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of money Cindy had at first\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # Consider A, B, C as one unit X, and E, F as one unit Y\n    # There are now 6 units to arrange: (X, D, G, H, I, Y)\n    num_ways_six_units = factorial(6)\n    \n    # A, B, C can be arranged among themselves in 3! ways\n    num_ways_abc = factorial(3)\n    \n    # E and F can be arranged in 2! ways\n    num_ways_ef = factorial(2)\n    \n    # The total number of arrangements would be the product of the three possibilities\n    total_arrangements = num_ways_six_units * num_ways_abc * num_ways_ef\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Let the number we think of be x\n    # According to the problem, we have:\n    # (x / 3) + 7 = 18\n    # Now we perform inverse operations to solve for x\n    # Subtract 7 from both sides:\n    # (x / 3) = 18 - 7\n    # Multiply both sides by 3:\n    # x = (18 - 7) * 3\n    x = (18 - 7) * 3\n\n    return x\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    term_index = 20\n    first_odd_number = 1\n    common_difference = 2\n    \n    nth_odd_number = first_odd_number + (term_index - 1) * common_difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n    \n    # Equation based on original plan\n    equation1 = Eq(scarfs_per_day * 6, total_scarfs)\n    # Equation based on increased production plan\n    equation2 = Eq((scarfs_per_day + 24) * (6 - 2), total_scarfs)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n    \n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students be s and the total number of sweets be n\n    s, n = symbols('s n')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq((6 * s - n), 26)  # He's short of 26 sweets if he gives each 6 sweets\n    equation2 = Eq((5 * s - n), 5)   # He's short of 5 sweets if he gives each 5 sweets\n    \n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2), (s, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    initial_ratio = Eq(boys / girls, 5/3)\n    new_ratio = Eq((boys - 15) / girls, 5/6)\n    \n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    return solutions[boys] + solutions[girls]\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):\n            for x3 in range(x2+1, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15 + 1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factor the given number 675\n    factors = factorint(675)\n    \n    # To make a square, all prime factors should have an even power\n    b = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            b *= prime\n            \n    return b\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    individual_cans_price = 12 * single_can_price_pence\n    savings = individual_cans_price - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n    \n    # Count numbers with 4 digits\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    # Only use the allowed digits\n                    if i in [3, 4, 5, 6] and j in [1, 2, 3, 4, 5, 6] and \\\n                    k in [1, 2, 3, 4, 5, 6] and l in [1, 2, 3, 4, 5, 6] and \\\n                    len({i, j, k, l}) == 4:\n                        number = int(f\"{i}{j}{k}{l}\")\n                        # Ensure the number is within the bounds\n                        if 3267 <= number <= 5120:\n                            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    amount = 21.40\n    quarter_of_amount = amount / 4\n    return quarter_of_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let a be Adam's weight, b be Ben's weight, and c be Carl's weight.\n    # We have the following equations based on the given data:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    # To find the total weight of Adam, Ben, and Carl together, we sum up these equations:\n    # (a + b) + (b + c) + (a + c) = 102 + 97 + 93\n    # This gives us 2(a + b + c) because each name appears exactly twice in the sum.\n    # Then, to find a + b + c (the total weight), we can divide the sum by 2.\n\n    total_double = 102 + 97 + 93\n    total_weight = total_double / 2\n    return int(total_weight)\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the cost of one apple and b be the cost of one banana.\n    a, b = symbols('a b')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * a + b, 32)\n    equation2 = Eq(6 * a + b, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Get the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Total work can be considered as 1 (painting the whole room)\n    total_work = 1 \n\n    # Alan and Bob together finish 1/4 of the work in 1 hour\n    # Bob alone finishes 1/6 of the work in 1 hour\n    rate_alan_bob = 1 / 4\n    rate_bob = 1 / 6\n\n    # The rate at which Alan works can be found by subtracting Bob's rate from their combined rate\n    rate_alan = rate_alan_bob - rate_bob\n\n    # The time it takes for Alan to do the work alone is the total work divided by his rate\n    time_alan = total_work / rate_alan\n\n    return time_alan\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    ans = 55 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    compounded_amount = principal * (1 + rate)**time\n\n    return compounded_amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24   # ten thousand and twenty four\n    num2 = 3000 + 968   # three thousand nine hundred and sixty eight\n    ans = num1 + num2   # Adding the two numbers together\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    highest_common_factor = gcd(84, 108)\n    return highest_common_factor\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    weeks = 26\n    total_food = weekly_food * weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_so_far = 22 + 27 + 35\n    remaining_votes = total_votes - votes_so_far\n    \n    # For Peter to win without fail, he must secure one more than half of the total votes\n    votes_needed_for_majority = total_votes // 2 + 1\n    \n    # Since Peter has got some votes already, we subtract them to know how many more he needs\n    additional_votes_needed = votes_needed_for_majority - 35\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n    equation2 = Eq(alex, nicholas)\n\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    return solutions[alex] + solutions[nicholas]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for i in range(1, 30):\n        if (i % 3 == 0) and (i % 2 == 1) and (i % 4 == 1) and (i % 5 == 1):\n            return i\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    result = 250 - (6*6) - (8*6)\n    return result\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n\n    used_flour = initial_flour - remaining_flour\n\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6 = 6 * 10**-3\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    number_of_poles = (road_length - interval) / interval\n\n    return int(number_of_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let the number of rulers be x\n    # Then the number of pencils will be x+10\n    # The total is the sum of pencils and rulers: x + (x+10) = 52\n\n    # Now we solve the equation for x\n    x = (total_items - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    # Starting on the 6th of February, which is a Monday (codenamed: 0001)\n    days_later = 28\n    weekdays = 7  # Total number of days in a week\n\n    # Find the remainder when days_later is divided by weekdays\n    remainder = days_later % weekdays\n\n    # Since we are starting on Monday, adding the remainder will give us the new weekday\n    # But as Monday itself is coded as 0001, the result should be adjusted to be in the format given.\n    # If remainder is 0, it is still Monday\n    if remainder == 0:\n        return '0001'  # Monday\n    elif remainder == 1:\n        return '0002'  # Tuesday\n    elif remainder == 2:\n        return '0003'  # Wednesday\n    elif remainder == 3:\n        return '0004'  # Thursday\n    elif remainder == 4:\n        return '0005'  # Friday\n    elif remainder == 5:\n        return '0006'  # Saturday\n    else:  # remainder == 6\n        return '0007'  # Sunday\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    data_set = [11, 13, 17, 12]\n    mean_value = 11\n    total_count = len(data_set) + 1  # +1 for the missing x value\n    sum_values = sum(data_set)\n    x = mean_value * total_count - sum_values\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_seven_value = 7 * 10**3  # The value of the first 7 in the ten thousands place\n    second_seven_value = 7 * 10**1  # The value of the second 7 in the tens place\n    \n    difference = first_seven_value - second_seven_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red + (blue + 2.40), 65.40)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Worst case scenario without having 4 of the same color:\n    # Take 3 of each color (3 red, 3 yellow, 3 blue)\n    worst_case_without_4_same_color = 3 * 3\n    \n    # Next marble guarantees 4 of the same color\n    return worst_case_without_4_same_color + 1\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_to_girls_ratio = 5 / 6\n    number_of_boys = 200\n\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 6 / 5\n\n    return int(number_of_girls)\n    \nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 is a recurring decimal, the digits will repeat '3'\n    # Thus, the sum of the first 1000 digits to the right of the decimal point will be 3 * 1000\n    return 3 * 1000\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 0.15 * 29\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Since Sophia is counting by twos from 2 to 100,\n    # she simply crosses out every number that is a multiple of 2 in that range.\n    # To find the total number of such numbers,\n    # we can simply take the range (2 to 100) and divide by 2.\n\n    start = 2\n    end = 100\n    step = 2\n\n    # The count of multiples from start to end inclusive is given by:\n    # (end - start) / step + 1\n    count = (end - start) // step + 1\n    return count\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n    \n    # Consider the pair of people who want to stand next to each other as one unit.\n    # Then we have 4 \"units\" to arrange in a line, which can be done in 4! ways.\n    units_arrangement = factorial(4)\n\n    # The pair can be arranged among themselves in 2! ways.\n    pair_arrangement = factorial(2)\n\n    # The total number of ways is the product of the two possibilities.\n    total_arrangements = units_arrangement * pair_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    first_three_days_total = 33\n    last_four_days_average = 18\n\n    last_four_days_total = last_four_days_average * 4\n    total_for_week = first_three_days_total + last_four_days_total\n    average_per_day = total_for_week / 7\n\n    return average_per_day\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the original concentration in percentage\n    x = symbols('x')\n\n    # Calculate the concentration after each step\n    A_initial = x * 0.10  # Initial concentration in A\n    A_final = (A_initial * 30 + 10) / 40\n    B_final = (A_final * 40 + 10) / 50  # Final concentration in B after transfer from A\n    C_final = (B_final * 50 + 10) / 60  # Final concentration in C after transfer from B\n\n    # Set up equation based on the fact that final concentration in container C is 0.5%\n    equation = Eq(C_final, 0.005)\n\n    # Solve for original concentration x\n    solution = solve(equation, x)\n\n    # Return the original concentration in percentage\n    return solution[0]\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    # Calculate the amount of nickel in each metal\n    nickel_in_first_metal = 12 * 0.40\n    nickel_in_second_metal = 13 * 0.60\n    \n    # Calculate the total amount of nickel and the total weight of the new metal\n    total_nickel = nickel_in_first_metal + nickel_in_second_metal\n    total_weight = 12 + 13\n    \n    # Calculate the percent concentration of nickel in the new metal\n    percent_nickel = (total_nickel / total_weight) * 100\n    \n    return percent_nickel\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    num1 = -3\n    num2 = 8\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round robin tournament, each player plays against every other player once.\n    # As there are 8 players, each player will play 7 games.\n    \n    # For the champion to record a unique number of wins, they will have to win all their games\n    # because if they lose one game they will not have a unique win count.\n    # Thus, the champion will have to win 7 games.\n    \n    ans = 7  # Number of wins for the champion\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # We know that a * b * c = 2016\n    # And that the product of their ages last year was (a-1) * (b-1) * (c-1) = 1377\n    # Let's find the prime factorization of both 2016 and 1377\n    from sympy import factorint\n\n    factors_2016 = factorint(2016)  # {2: 5, 3: 2, 7: 1}\n    factors_1377 = factorint(1377)  # {3: 1, 7: 1, 11: 1, 19: 1}\n\n    # Next, we need to find three numbers where the product of the current ages is 2016\n    # And the product if we subtract 1 from each is 1377.\n\n    # Easily, we can see if we add 1 to the prime factors of 1377 we get a set of possible current ages:\n    # We will add one to the factors of 1377 that are not shared with 2016 (11 and 19).\n\n    # In order to find the ages 2 years ago:\n    # The factors of 1377 help us to know two of the cousin's ages from last year(3, 7)\n    # and we already added 1 to the other two factors (11 and 19) to get two current ages(12, 20)\n    # We can deduce that the third cousin's age last year was 1377 / (3 * 7) = 196 / 3 (it's not exact so we need to adjust)\n\n    # Let's iterate through factors to check which match:\n    for i in range(1, 100):\n        if 2016 % i == 0:\n            possible_third_age = 2016 // i\n            if (possible_third_age - 1) * 3 * 7 == 1377:\n                # Now find the age 2 years ago:\n                two_years_ago_product = (possible_third_age - 2) * (12 - 2) * (20 - 2)\n                return two_years_ago_product\n    return None\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # The sum of first n natural numbers is given by n(n+1)/2\n    # Let's assume that John added 'k' twice, then the equation becomes n(n+1)/2 + k = 3405\n    # Since 'k' is one of the natural numbers from 1 to n, we can try all values of 'k' from 1 to n where n(n+1)/2 is less than 3405\n    # And check for which 'k', the left hand side of the equation is equal to 3405\n    \n    n = 1\n    while (n*(n+1))//2 < 3405:\n        n += 1\n    \n    # When the loop exits, n is the first natural number for which the sum exceeds 3405\n    # We need to check for all values of n below this value\n    for k in range(1, n):\n        if (k + (n * (n - 1)) // 2) == 3405:\n            return k\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given sum of first 6 terms (S6) and sum of first 12 terms (S12)\n    S6 = 64\n    S12 = 156\n\n    # Sum of the first n terms of an arithmetic sequence: Sn = n/2 * (a1 + an)\n    # Where a1 is the first term, an is the nth term\n    \n    # The sum of the first 12 terms is twice the sum of the first 6 terms\n    # Plus 6 times the common difference (d)\n    # S12 = 2 * S6 + 6 * d\n    \n    # Common difference (d) can be calculated as follows\n    d = (S12 - 2 * S6) / 6\n    \n    # To find the first term (a1), use S6\n    # S6 = 6/2 * (2 * a1 + (6 - 1) * d)\n    # a1 can be calculated as follows\n    a1 = (S6 - 15 * d) / 3\n    \n    # Now we have the first term (a1) and the common difference (d),\n    # we can find the sum of the first 18 terms (S18)\n    # S18 = 18/2 * (2 * a1 + (18 - 1) * d)\n    \n    S18 = 9 * (2 * a1 + 17 * d)\n    return S18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the number of chickens in each pen before adding more pens\n    # Let y be the total number of chickens\n    # Initially, there are 24 pens, so the total number of chickens is 24 * x\n    # After building 6 more pens, the number of chickens per pen reduces by 6, so there are now (x - 6) chickens in each of the 30 pens\n    # The total number of chickens remains the same, so we get the equation 24 * x = 30 * (x - 6)\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(24 * x, 30 * (x - 6))\n    solutions = solve(equation, x)\n\n    # Since we're talking about pens of chickens, x must be a positive integer\n    solution_x = [sol for sol in solutions if sol > 0 and sol.is_integer][0]\n\n    # Now calculate the total number of chickens y based on the number of chickens per pen (solution_x) before the pens were added\n    y = 24 * solution_x\n\n    return y\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    num_possible_values = 0\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                num_possible_values += 1\n    return num_possible_values\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history_club = ratio_history_to_math * total_math_club\n    return int(total_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # First, reverse the numbers from Zog's format to Earth's format\n    first_number = int(str(729)[::-1])\n    second_number = int(str(26)[::-1])\n\n    # Perform the subtraction on Earth\n    result = first_number - second_number\n\n    # Convert the result back to Zog's format\n    zog_result = int(str(result)[::-1])\n\n    return zog_result\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    return math.gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    difference_in_age = 2\n    brother_age = (ashley_age - 3) - difference_in_age\n    return brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    speed = 20\n    time = 30\n    \n    # Total distance covered by the train to pass the bridge completely\n    total_distance = time * speed\n    \n    # Length of the bridge is total distance minus the length of the train\n    bridge_length = total_distance - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n\n    return int(more_marks)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Calculate the time spent jogging (from 6:30 am to 7:00 am)\n    jogging_time_hours = (7 * 60 - 6 * 60 - 30) / 60  # time in hours\n\n    # Calculate the distance traveled while jogging\n    jogging_speed_kmph = 9  # speed in km per hour\n    distance_jogging_km = jogging_time_hours * jogging_speed_kmph\n\n    # Calculate the time spent walking (from 7:00 am to 8:00 am)\n    walking_time_hours = (8 * 60 - 7 * 60) / 60  # time in hours\n\n    # Calculate the distance traveled while walking\n    walking_speed_kmph = 7.5  # speed in km per hour\n    distance_walking_km = walking_time_hours * walking_speed_kmph\n\n    # Calculate total distance traveled\n    total_distance_km = distance_jogging_km + distance_walking_km\n\n    return total_distance_km\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are two options for the first digit (3 or 4)\n    first_digit_options = 2\n\n    # There are three options for the second and third digits (0, 3, or 4)\n    second_digit_options = 3\n    third_digit_options = 3\n    \n    # The total number of combinations is the product of the options\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n\n    # Equation for the total number of games played\n    total_games_eq = Eq(wins + losses, 63)\n    # Equation representing the fact that they won twice as many as they lost\n    win_loss_ratio_eq = Eq(wins, 2 * losses)\n\n    # Solve the system of equations\n    solutions = solve((total_games_eq, win_loss_ratio_eq), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    number1 = 55\n    number2 = 44\n    ans = common_factor * (number1 - number2)\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of animals originally in the farm be 'total'\n    # Let the number of goats originally be 'goats'\n    cows, total = symbols('cows total', real=True)\n    equation_original_cows = Eq(cows, 0.65 * total)\n    \n    # After 240 animals are added, the number of cows becomes 65% + 20% = 85% of the new total\n    # The new total is: original total + 240\n    # The number of goats is doubled\n    new_total = total + 240\n    new_cows = Eq(cows + 240, 0.85 * new_total)\n    new_goats = total - cows\n    doubled_goats = Eq(2 * new_goats, new_total - (cows + 240))\n\n    solutions = solve((equation_original_cows, new_cows, doubled_goats), (cows, total))\n    goats = solutions[total] - solutions[cows]\n    \n    return goats\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is (sqrt(3)/4) * side^2\n    from math import sqrt\n\n    # Area of Triangle X with each side 3 cm\n    area_x = (sqrt(3) / 4) * (3 ** 2)\n    # Area of Triangle Y with each side 9 cm\n    area_y = (sqrt(3) / 4) * (9 ** 2)\n\n    # Number of times Triangle X fits into Triangle Y is the ratio of areas\n    num_times = area_y / area_x\n\n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    pens_cost = 5 * x * 12\n    pencils_cost = 3 * x * 5\n    total_cost = 120\n\n    equation = Eq(pens_cost + pencils_cost, total_cost)\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    return comb(total_students, students_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    return (8 * 9 * 10) - (1 * 2 * 3)\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 1 + 1  # 1 soup + the option not to choose any soup\n    desserts = 2 + 1  # 2 desserts + the option not to choose any dessert\n\n    combinations = appetisers * main_courses * soups * desserts\n    \n    return combinations\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Calculate number of ways to arrange 3 girls together as a single unit\n    # There are factorial(3) ways to arrange the girls among themselves.\n    girls_arrangements = factorial(3)\n\n    # Since we have 3 teachers and 1 \"unit\" of girls, there are 4 \"units\" to arrange.\n    # Additionally, we will arrange boys in the spaces between those units.\n    units_arrangements = factorial(4)\n\n    # Number of spaces between units = number of units + 1\n    # We have 5 spaces (left of unit 1, between units 1 and 2, between units 2 and 3,\n    # between units 3 and 4, and right of unit 4)\n    spaces = 5\n\n    # Calculate number of permutations with the boys in those spaces\n    # We have 3 boys to place in 5 spots, without any two being adjacent.\n    boys_arrangements = 0\n    for boys_spot_1 in range(1, spaces + 1):\n        for boys_spot_2 in range(boys_spot_1 + 1, spaces + 1):\n            for boys_spot_3 in range(boys_spot_2 + 1, spaces + 1):\n                boys_arrangements += 1\n\n    # Total arrangements is the product of all possible arrangements\n    total_arrangements = girls_arrangements * units_arrangements * boys_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The children were divided into groups of 8 with 3 remaining\n    # For groups of 9, 1 child was left out\n    congruences = [(3, 8), (1, 9)]\n    ans = solve_congruence(*congruences)\n\n    # Ensure the solution is within the given range [100, 200]\n    while ans[0] < 100:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0] if ans[0] <= 200 else None\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    red_balls = 4\n    # The probability of both balls being red is 2/7\n    # Probability formula for 2 reds: (red_balls/total_balls) * ((red_balls-1)/(total_balls-1)) = 2/7\n    # Solve for blue_balls in the equation using the total number of balls (red_balls + blue_balls)\n    \n    total_probability = 2/7\n    # Let b be the number of blue balls\n    for blue_balls in range(1, 100):  # Reasonable upper limit to prevent infinite loop\n        total_balls = red_balls + blue_balls\n        probability = (red_balls / total_balls) * ((red_balls - 1) / (total_balls - 1))\n        \n        if probability == total_probability:\n            return blue_balls\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence where the common difference (d) is 5,\n    # the first term (a1) is 6, and the last term (an) is 41.\n  \n    a1 = 6\n    an = 41\n    d = 5\n\n    # The number of terms (n) can be found by rearranging the formula:\n    # an = a1 + (n - 1) * d => n = ((an - a1) / d) + 1\n    n = int((an - a1) / d + 1)\n\n    # The sum (S) of an arithmetic sequence can be found with the formula:\n    # S = n * (a1 + an) / 2\n    S = n * (a1 + an) / 2\n\n    return int(S)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Let's assign weights to our animals where the chicken's weight is the base.\n    chicken_weight = 1\n    rabbit_weight = 2 * chicken_weight  # since 1 rabbit = 2 chickens\n    dog_weight = 8 * rabbit_weight     # since 1 dog = 8 rabbits\n\n    # Now we can find how many chickens weigh as much as 1 dog\n    num_chickens = dog_weight // chicken_weight\n\n    return num_chickens\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial as f\n\ndef count_ways_to_distribute(powers_of_two_count, positions):\n    if positions == 0:\n        if powers_of_two_count == 0:\n            return 1\n        else:\n            return 0\n    if powers_of_two_count == 0:\n        return 1\n    ways = 0\n    for power in range(powers_of_two_count + 1):\n        ways += count_ways_to_distribute(powers_of_two_count - power, positions - 1)\n    return ways\n\ndef solution():\n    ans = 0\n    digits_factorial = [f(i) for i in range(10)]\n\n    # This accounts for the distribution of the powers of 2 among the digits\n    # excluding the digit 0, as the 10-digit numbers cannot start with 0\n    for i in range(27 + 1):  # i represents the exponent for the first digit\n        for j in range(27 + 1 - i):  # j represents the exponent for the second digit\n            ways = count_ways_to_distribute(27 - i - j, 8)\n            ans += ways\n    \n    # Adjusting for the permutation of the digits besides the leading digit\n    for i in range(10):\n        ans *= digits_factorial[i]\n\n    # Division by factorial of powers as they can be in any order\n    ans //= digits_factorial[27]\n\n    return ans\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices\n    # 3/5 of the cake was eaten: (3/5) * x\n    # 2 slices were given to friends.\n    # 4 slices were left.\n    # So, the equation is: (3/5) * x + 2 + 4 = x\n    # Simplify the equation to find x.\n    # (3/5) * x + 6 = x\n    # 6 = x - (3/5) * x\n    # 6 = (2/5) * x\n    # x = 6 / (2/5)\n    # x = 6 * (5/2)\n    x = 6 * (5/2)\n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the time it takes Mike to finish the job by himself\n    # Let d be the time it takes Danny to finish the job by himself\n    m, d = symbols('m d')\n    \n    # Equation 1: If they work together, they finish in 10 hours\n    # Their combined work rate is 1 job per 10 hours\n    equation1 = Eq(1/m + 1/d, 1/10)\n    \n    # Equation 2: Mike types for 8 hours, then Danny types for 13 hours to finish the job\n    # Mike does 8/m part of the job, and Danny does 13/d part of the job\n    equation2 = Eq(8/m + 13/d, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n    \n    # We want the time it takes Danny, which is d\n    return solutions[d]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    return 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # Place value of the 3 in hundreds\n    place_value_2 = 3 * 10**5  # Place value of the 3 in hundred thousands\n\n    difference = place_value_2 - place_value_1  # Difference in place values\n\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    min_pencils_in_case = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils_in_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # Define the custom operation based on the definition given\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n    \n    # Since we know the result of the operation with 10 (m ⊕ 10 = 66), we can derive the formula for m\n    # and then solve for m by trying different values or using algebraic manipulation.\n    \n    # Algebraically, m ⊕ 10 = m + (m + 1) + (m + 2) + ... + (m + 10)\n    # This is an arithmetic series with the first term m and the last term m + 10, having 11 terms in total.\n    # Sum of arithmetic series S_n = n/2 * (first_term + last_term), where n is the number of terms\n    # S_11 = 11/2 * (m + (m + 10))\n    # 66 = 11/2 * (2m + 10)\n    # 66 * 2 = 11 * (2m + 10)\n    # 132 = 22m + 110\n    # 22m = 132 - 110\n    # 22m = 22\n    # m = 22 / 22\n    # m = 1\n    \n    # We could also use the custom operation to solve: custom_op(m, 10) == 66, but we solved it algebraically above.\n    \n    # Assign the calculated value of m to m\n    m = 1\n    \n    # Return the solution for m\n    return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n    # Number of chess pieces per side is side_length divided by spacing plus 1 for the corner\n    # But since each corner is counted twice (once for each side), we subtract 4 and add 1 back for one complete corner count\n    pieces_per_side = (side_length // spacing) + 1\n    total_pieces = (pieces_per_side * 4) - 4 + 1\n    return total_pieces\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    min_red_squares = float('inf')\n    \n    # Each digit can appear from 0 to 4 times to avoid painting red\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                for l in range(5):\n                    for m in range(5):\n                        for n in range(5):\n                            for o in range(5):\n                                for p in range(5):\n                                    for q in range(5):\n                                        for r in range(5):\n                                            # The sum of digits used i to r times should be 100 \n                                            # to fill all the squares\n                                            if i + j + k + l + m + n + o + p + q + r == 100:\n                                                num_red_squares = i + j + k + l + m + n + o + p + q + r\n                                                min_red_squares = min(min_red_squares, num_red_squares)\n    return min_red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # The common difference of the arithmetic sequence\n\n    # The n-th term of an arithmetic sequence can be expressed as: a + (n-1)*d\n    # We want to find the smallest n such that a + (n-1)*d < 0\n    # => 50 + (n-1)*(-4) < 0\n    # => -4n + 54 < 0\n    # => n > 13.5\n    # Since n must be an integer, we take the ceiling of 13.5, which is 14\n\n    # However, we need to find the last non-negative term (not the first negative one)\n    # so we subtract one to get the last non-negative term's index\n    n = 14 - 1\n\n    return n\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4/5\n\n    remaining_money = initial_money - spent_money + father_gave\n\n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # Start at 32, since 31^2 is less than 1000 and 100^2 is greater than 9999\n        number = i**2\n        str_number = str(number)\n        if len(str_number) == 4 and str_number[:2] == str_number[2:]:\n            return number\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # Initialize the count of zeros to 0, which corresponds to the factor 10\n    zeros = 0\n    n = 1\n    while zeros < 28:\n        # Find the number of 5s in the prime factorization of n\n        temp = n\n        while temp % 5 == 0:\n            zeros += 1\n            temp //= 5\n        # We need 28 zeros, which means we need 28 factors of 5\n        # (since 2s are more frequent than 5s in factorization)\n        if zeros < 28:\n            n += 1\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m) - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "# Total Distance Covered by Tim per hour and Bob per hour\ndef solution():\n    distance_apart_initially = 780\n    distance_remaining = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # They are closing in at a rate of tim_speed + bob_speed per hour\n    closing_speed = tim_speed + bob_speed\n\n    # Distance covered until they are 130km apart\n    distance_covered = distance_apart_initially - distance_remaining\n    \n    # Time taken for them to be 130 km apart\n    time_taken = distance_covered / closing_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    day_distance = 3\n    night_distance = 1\n    total_distance = 11\n\n    days_passed = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days_passed += 1\n        distance_climbed += day_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_distance\n    \n    return days_passed\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    num_numbers = 5\n    known_numbers = [3, 4, 6, 10]\n\n    sum_known_numbers = sum(known_numbers)\n    total_sum = mean_value * num_numbers\n    fifth_number = total_sum - sum_known_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    # Akon, Ben, and Cris go to the bookstore every 4, 7, and 8 days respectively.\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n    \n    # The least number of days they will all meet again is the least common multiple of their cycles.\n    return lcm(akon_cycle, ben_cycle, cris_cycle)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            if all(int(b) - int(a) == 1 for a, b in zip(sorted(digits), sorted(digits)[1:])):\n                lucky_years += len(set(permutations(digits)))\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    repeating_sequence = [8, 3, 5, 4]\n    sequence_length = len(repeating_sequence)\n    digits_sum = 0\n\n    for i in range(84):\n        digits_sum += repeating_sequence[i % sequence_length]\n\n    return digits_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Time taken between strikes is total time minus the time sound lasts for all strikes\n    # t = total duration - number_of_strikes * sound_duration\n    time_between_strikes = 43 - 6 * 3\n    \n    # Since there are (n-1) intervals between n strikes:\n    # Time for 12 strikes = sound_duration * 12 + time_between_strikes * (12-1)\n    total_time_for_12_strikes = 3 * 12 + time_between_strikes * (12 - 1)\n    \n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # We first subtract the 6 pens given one to each kid\n    remaining_pens = 20 - 6\n    # This leaves us with 14 pens to divide to 6 kids\n    # We need to use stars and bars method to find the combinations\n    # Stars and Bars: (n+k-1) choose (k-1) where n is items and k is bins\n    # Formula to find combinations C(n+k-1, k-1)\n    num_ways = factorial(remaining_pens + 6 - 1) // (factorial(remaining_pens) * factorial(6 - 1))\n    return num_ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students = 1\n    while True:\n        if (students - 5) ** 0.5 % 1 == 0 and (students + 18) ** 0.5 % 1 == 0:\n            break\n        students += 1\n    return students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    original_hours = 15\n    target_hours = 2\n    original_people = 6\n    \n    # Assuming all people build at the same rate, the work done is directly proportional\n    # to the product of the number of people and the number of hours. Therefore:\n    # original_people * original_hours = target_people * target_hours\n    # Hence, we can solve for target_people:\n    target_people = (original_people * original_hours) / target_hours\n    return int(target_people)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    \n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Number of 3-digit numbers without restriction\n    without_zero = 9 * 9 * 8  # Number of 3-digit numbers without any zeros (1-9 for first digit, 1-9 for second and 1-8 for third to avoid previous digits)\n    \n    with_at_least_one_zero = total_three_digit_numbers - without_zero\n    return with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kg\n    speed = 30   # speed of the ball in m/s\n    kinetic_energy = 0.5 * mass * speed ** 2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for ans in range(100, 201):\n        if all([ans % 3 == 1, ans % 4 == 1, ans % 5 == 1, ans % 7 == 2]):\n            return ans\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Assignment of the greatest odd number to the one's place\n    ones_place = 9\n\n    # Find hundreds and tens place digits that add up to 13 with different digits\n    for hundreds_place in range(1, 10):\n        for tens_place in range(0, 10):\n            if hundreds_place != tens_place and hundreds_place + tens_place == 13:\n                # Thousands place is the smallest non-zero number not used yet\n                for thousands_place in range(1, 10):\n                    if (thousands_place != ones_place and \n                        thousands_place != tens_place and \n                        thousands_place != hundreds_place):\n                        return int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n    space_needed_for_pictures = picture_width * number_of_pictures\n    space_between_pictures = (total_width - space_needed_for_pictures) // (number_of_pictures - 1)\n    \n    # Calculate the centre of the wall\n    centre_of_wall = total_width // 2\n    \n    # Calculate the position of the third picture\n    # 1st picture is at position 0, we need the position of the 3rd picture (index 2)\n    centre_of_third_picture = picture_width + 1 * (picture_width + space_between_pictures)\n    \n    # Calculate the distance of the centre of the third picture from the centre of the wall\n    distance_from_centre = centre_of_third_picture - centre_of_wall\n    \n    return distance_from_centre\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    bounce_height = 1  # Let's start with 100% of the initial height as 1 for simplicity.\n    bounce_count = 0\n    while bounce_height >= 0.25:  # While the height is at least 25% of the original height\n        bounce_height *= 0.75  # Each bounce reaches 75% of the previous height\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n\n    # Let's assume uncle's age is x\n    # When Doris reaches uncle's age (which is x years old), her uncle will be 40 years old.\n    # Doris needs to age (x - doris_age) years to reach her uncle's age\n    # Hence, uncle will age the same amount of years and become 40 years old.\n    # So, we get the equation: x + (x - doris_age) = 40\n\n    # Solving for x gives us uncle's current age:\n    uncle_age = (40 + doris_age) // 2\n\n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_pay = solutions[banana] + solutions[apple]\n\n    return annabella_pay\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    speed_ratio = 1.5  # Kevin's speed is 1.5 times Jerry's speed\n    \n    # Let's assume Jerry's speed is 'j' and Kevin's speed is 'k'.\n    # k = 1.5j\n    # j + k = total_distance\n    # Replacing k gives us: j + 1.5j = total_distance\n    # Solving for j gives us: 2.5j = total_distance\n    # Thus, j = total_distance / 2.5\n    \n    jerry_distance = total_distance / (1 + speed_ratio)\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # The number of pieces is one more than the number of cuts\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest_amount = 225\n    interest_rate = 2.25 / 100\n    principal_amount = interest_amount / interest_rate\n    return principal_amount\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # given that 5 is smaller than 8, so regrouping must have taken place.\n    regrouping_value = 10 # This is because we are in base 10 number system and regrouping implies carrying over\n    \n    # So, we need to add this regrouping_value to 5\n    actual_value = 5 + regrouping_value\n    \n    # and check if the sum of this actual_value and the second row's digit results in 15, as per the riddle.\n    for i in range(10):\n        if actual_value + i == 15:\n            return i  # This would be the answer to the riddle if it matches 15 correctly\n\n    return \"Not found\"  # If no value from 0 to 9 satisfies the condition, return \"Not found\"\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    # After spending $200 on a watch\n    remaining_after_watch = original_money - 200\n    \n    # Spending 2/7 of the remaining on a shirt\n    remaining_after_shirt = remaining_after_watch - (2/7) * remaining_after_watch\n    \n    # He had 1/3 of the original amount left\n    equation = Eq(remaining_after_shirt, original_money / 3)\n    \n    # Solve for the original amount of money\n    original_amount = solve(equation, original_money)\n    \n    return original_amount[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "from math import factorial\n\ndef solution():\n    # Tom and Harry are considered as a single entity, \"TH\"\n    # Ronda is fixed at the furthest right.\n    # We have 5 \"entities\" to arrange: TH, Ronda, and the other 4 students\n    \n    # The number of ways to arrange these 5 \"entities\" is 5! (factorial 5)\n    arrangements_entities = factorial(5)\n    \n    # We also need to consider that Tom and Harry can switch their positions within their \"TH\" entity\n    arrangements_tom_harry = factorial(2)\n    \n    # Multiply the arrangements of the entities by the arrangements of Tom and Harry\n    total_arrangements = arrangements_entities * arrangements_tom_harry\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 1.05\n    second_interest_rate = 1.08\n    \n    # Calculate the total amount after the first three years\n    amount_after_three_years = initial_investment * (first_interest_rate ** 3)\n    \n    # Calculate the final amount after the next two years\n    final_amount = amount_after_three_years * (second_interest_rate ** 2)\n    \n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    # The lowest possible price is just one dollar less than the value that, when rounded, will go to the next hundred.\n    lowest_possible_price = rounded_price - 99\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the usual speed, t be the usual time, and d be the distance between P and Q.\n    v, t, d = symbols('v t d')\n\n    # Eq (1): v * t = d (distance is the product of speed and time)\n    equation1 = Eq(v * t, d)\n\n    # Eq (2): (v + 0.2v) * (t - 1) = d\n    # If the speed is increased by 20%, it will reach 1 hour earlier.\n    equation2 = Eq((v * 1.2) * (t - 1), d)\n\n    # Eq (3): 200 + (v + 0.25v) * (t - 200/v - 1/5) = d\n    # Car travels first 200 km at usual speed, then increases speed by 25%, reaching 12 minutes (1/5 hour) earlier.\n    equation3 = Eq(200 + (v * 1.25) * (t - 200/v - 1/5), d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (v, t, d))\n\n    # Extract the distance d from the solutions.\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 89 * 4\n    target_average = 95\n    num_tests_taken = 4\n    additional_tests = 0\n\n    while True:\n        additional_tests += 1\n        new_total = current_total + 100 * additional_tests\n        new_average = new_total / (num_tests_taken + additional_tests)\n        if new_average >= target_average:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate the time taken for each section of the race\n    time_540_metres = 540 / 9  # Time = Distance / Speed\n    time_300_metres = 300 / 6  # Time = Distance / Speed\n    distance_last_section = 1000 - 540 - 300  # Total distance - distance of first two sections\n    time_last_section = distance_last_section / 10  # Time = Distance / Speed\n    \n    # Total time taken for the race\n    total_time = time_540_metres + time_300_metres + time_last_section\n    \n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doris_age = 10\n    uncle_age = symbols('uncle_age')\n\n    # Equation representing the uncle's statement\n    # When Doris reaches her uncle's current age, her uncle will be 40\n    equation = Eq(doris_age + (uncle_age - doris_age), 40)\n\n    solution = solve(equation, uncle_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    performances_by_classes = 18\n    extra_performances = 2  # Lia and Liz both prepare an extra performance\n    total_performances = performances_by_classes + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # m/s\n\n    # Total distance the train needs to cover to cross the bridge completely\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_begin, cows_begin = symbols('sheep_begin cows_begin', integer=True)\n    \n    # Initially, sheep were 5/7 the number of cows\n    initial_condition = Eq(sheep_begin, (5/7) * cows_begin)\n    \n    # 21 new sheep were brought in and 7 cows were removed \n    sheep_end = sheep_begin + 21\n    cows_end = cows_begin - 7\n    \n    # The number of cows becomes 3/4 the number of sheep\n    final_condition = Eq(cows_end, (3/4) * sheep_end)\n\n    # Solve the simultaneous equations\n    solution = solve((initial_condition, final_condition), (sheep_begin, cows_begin))\n\n    return solution[sheep_begin]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the cost of one book and 'p' be the cost of one pencil box.\n    b, p = symbols('b p')\n\n    # Two similar books and three identical pencil boxes cost $42.\n    equation1 = Eq(2 * b + 3 * p, 42)\n\n    # Two similar books and six identical pencil boxes cost $60.\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # Solving the system of equations for 'b' and 'p'.\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    hours_diff = 9 - 8\n    minutes_diff = 25 - 30\n\n    total_minutes_diff = (hours_diff * 60) + minutes_diff\n\n    return total_minutes_diff\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 2\n    B_efficiency = 1\n\n    A_time = 6\n    A_work_per_day = A_efficiency / A_time\n\n    B_work_per_day = B_efficiency / (A_time * 2)  # because A's efficiency is twice B's\n\n    total_work_per_day = A_work_per_day + B_work_per_day\n\n    total_time = 1 / total_work_per_day\n    return total_time\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum = 22\n    target_sum = 30\n    years_until_target = target_sum - current_sum\n    return years_until_target\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cost in cents\n    mamee_cost = haribo_cost - 30  # cost in cents\n    big_jelly_cost = 6 * mamee_cost  # cost in cents\n    return big_jelly_cost / 100  # convert cost to dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    # Anna received 3/8 of total_candies\n    anna_candies = 3/8 * total_candies\n    # Belle received 1/4 of total_candies\n    belle_candies = 1/4 * total_candies\n    # Cathy and Dawn received the rest of the candies\n    cathy_dawn_candies = total_candies - anna_candies - belle_candies\n\n    # Anna and Belle received 90 more candies than Cathy and Dawn\n    equation = Eq(anna_candies + belle_candies, cathy_dawn_candies + 90)\n    \n    # Solve the equation\n    result = solve(equation, total_candies)\n\n    return result[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    reduced_fraction_val = 18 / 36\n    ans = reduced_fraction_val * 32\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    # Let x be the number of plants initially\n    # After Ethan removes, (x/2) - 1 plants are left\n    # After Valerie removes, [(x/2 - 1)/2] - 3 plants are left\n    # After Joel removes, {[(x/2 - 1)/2] - 3}/2 - 2 plants are left\n    # According to the problem, {[(x/2 - 1)/2] - 3}/2 - 2 = 4\n    \n    # We will solve this equation step by step.\n    # First, we resolve that last removal step to figure out the plants left before Joel removed his part.\n    plants_after_joel = 4 + 2  # Joel removes 2 less, so we add 2 back\n    # Now we resolve the plants before Valerie removed hers.\n    plants_after_valerie = (plants_after_joel * 2) + 3  # Valerie removes 3 less, we add 3 after multiplying by 2\n    # Now we resolve the plants before Ethan removed.\n    plants_initial = (plants_after_valerie * 2) + 1  # Ethan removes 1 less, so we add 1\n    \n    return plants_initial\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fish_balls = symbols('initial_fish_balls', integer=True)\n    \n    # After selling 3/4 in the morning, he has 1/4 left\n    remaining_after_morning = initial_fish_balls * (1 - 3/4)\n\n    # After selling 1/3 of the remaining in the afternoon, he has 2/3 left\n    remaining_after_afternoon = remaining_after_morning * (2/3)\n\n    # He made another 506 fish balls and had twice the number he made at first\n    total_after_additional = remaining_after_afternoon + 506\n\n    # total_after_additional should be twice the initial fish balls\n    equation = Eq(total_after_additional, 2 * initial_fish_balls)\n\n    # Solving for the initial number of fish balls\n    solution = solve(equation, initial_fish_balls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Chocolate has 72 more than Vanilla\n    equation1 = Eq(chocolate, vanilla + 72)\n\n    # Blueberry has 36 less than Vanilla\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling some of them, she had 427 cupcakes left altogether\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - vanilla * 2 / 3) + (blueberry - blueberry * 7 / 9), 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    total_price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return total_price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    num_pigs = 8\n    green_apples = num_pigs  # one green apple per pig\n    red_apples = num_pigs // 2  # one red apple for every two pigs\n\n    total_apples = green_apples + red_apples\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    grown_sunflowers = total_seeds - died_seeds\n    return int(grown_sunflowers)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one shirt (s) and the price of one pair of pants (p)\n    s, p = symbols('s p')\n\n    # Equation 1: 3 shirts + 2 pants = $81\n    equation1 = Eq(3 * s + 2 * p, 81)\n    \n    # Equation 2: 5 shirts + 4 pants = $147\n    equation2 = Eq(5 * s + 4 * p, 147)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, p))\n    \n    # Calculate the price for 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    deposit = 10\n    spend = 8\n\n    for day in range(1, total_days + 1):\n        if day % 2 != 0:  # Odd day: deposit\n            pocket_money += deposit\n        else:  # Even day: spend\n            pocket_money -= spend\n\n    return pocket_money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    durians_total = 90\n    durians_sold_fraction = 4 / 6\n    durians_sold = durians_total * durians_sold_fraction\n    durians_left = durians_total - durians_sold\n    \n    return durians_left\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the number Michael thinks of\n    number = symbols('number')\n    \n    # Create the equation based on the problem description\n    equation = Eq(((number * 2) + 178) / 4, 54)\n    \n    # Solve the equation\n    solution = solve(equation, number)\n    \n    # There should be only one solution\n    return solution[0]\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n\n    average_apples = total_apples / num_students\n\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of stickers Charlotte initially had\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Given that Marry and Alexis had stickers in the ratio 7 : 5\n    # Therefore, we can assume that Marry had 7k stickers and Alexis had 5k stickers, where k is a constant multiplier\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Charlotte's stickers increased by 80%\n    # marry - 20% of marry = marry - 0.2 * 7k\n    # alexis - 20% of alexis = alexis - 0.2 * 5k\n    # charlotte + 20% of marry + 20% of alexis = charlotte + 0.2 * 7k + 0.2 * 5k\n    # Marry had 20 stickers more than Charlotte in the end\n    # marry - 0.2 * 7k = charlotte + 0.8 * charlotte + 20\n\n    equation1 = Eq(charlotte + 0.2 * 7 * marry + 0.2 * 5 * alexis, charlotte * 1.8)\n    equation2 = Eq(marry, 7/5 * alexis)\n    equation3 = Eq(marry - 0.2 * 7 * marry, charlotte * 1.8 + 20)\n\n    # Solving the three equations for marry, alexis, and charlotte\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    # Alexis's initial number of stickers is given by the 'alexis' symbol\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let d be the distance, v be the original speed\n    d, v = symbols('d v')\n\n    # create equations based on the problem description\n    equation1 = Eq(d / v, 8)        # if she keeps her original speed, she will arrive at the destination in 8 hours\n    equation2 = Eq(d / (v + 5), 7)  # if she travels 5 km/h faster, she will arrive one hour earlier\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (d, v))\n\n    # return the value of distance\n    return solutions[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # Total ways to arrange 4 people\n    opposite_ways = 2! * 2!  # Ways for Claire and Tony to sit opposite each other\n\n    # Total arrangements - unwanted arrangements\n    return total_ways - opposite_ways\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    perm = sorted(permutations(digits))\n    fifth_number = int(''.join(perm[4]))\n    return fifth_number\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    bottles = 1000\n    test_tubes = math.ceil(math.log(bottles, 2))\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    removed_chairs = 3\n    total_distance = 36\n    \n    # Calculate the total intervals between chairs when 10 chairs are placed\n    intervals_initial = total_chairs - 1\n    \n    # Calculate the distance between every two chairs for 10 chairs\n    distance_between_two_chairs_initial = total_distance / intervals_initial\n    \n    # Calculate the new total number of chairs after removing 3 chairs\n    new_total_chairs = total_chairs - removed_chairs\n    \n    # Calculate the total intervals between chairs when chairs are reduced\n    intervals_after_removal = new_total_chairs - 1\n    \n    # Calculate the new distance between every two chairs after removal\n    distance_between_two_chairs_after_removal = distance_between_two_chairs_initial * (intervals_initial / intervals_after_removal)\n    \n    return distance_between_two_chairs_after_removal\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    total_books = 10\n    count = 0\n    for brother1 in range(2, total_books - 3):\n        for brother2 in range(2, total_books - brother1 - 1):\n            brother3 = total_books - brother1 - brother2\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle4, angle3 = symbols('angle4 angle3')\n\n    # Two angles are right angles, hence 90 degrees each.\n    right_angle1 = 90\n    right_angle2 = 90\n\n    # One of the angles is five times larger than the fourth angle.\n    equation = Eq(angle3, 5 * angle4)\n\n    # The sum of the angles in a quadrilateral is 360 degrees.\n    sum_equation = Eq(right_angle1 + right_angle2 + angle3 + angle4, 360)\n\n    # Solve the system of equations.\n    solutions = solve((equation, sum_equation), (angle3, angle4))\n\n    # Return the size of the largest angle.\n    return max(solutions[angle3], solutions[angle4], right_angle1, right_angle2)\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Dynamic programming approach to solve the problem with restrictions.\n    # The number of ways jw can reach step i is dp[i]\n\n    dp = [0] * 11  # We need 10 steps plus step 0. Initializing with 0.\n    dp[0] = 1  # Base case: there's 1 way to stand at the start.\n\n    # Calculate the number of ways to reach each step.\n    for i in range(1, 11):\n        # He can reach step i from i-1, i-2 or i-3 steps if they are not muddy.\n        if i-1 >= 0 and i != 5:\n            dp[i] += dp[i-1]\n        if i-2 >= 0 and (i-1) != 5:  # Can't step on 5.\n            dp[i] += dp[i-2]\n        if i-3 >= 0 and (i-2) != 5:  # Can't step on 5.\n            dp[i] += dp[i-3]\n\n    # The answer is the number of ways to reach the 10th step.\n    ans = dp[10]\n    return ans\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # We need to find the combination of small, medium, and large boxes such that:\n    # 5 * small + 7 * medium + 10 * large = 54\n    # and minimize (small + medium + large)\n    \n    min_boxes = float('inf')\n    \n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    \n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    num = 7007\n    factor_pairs = []\n\n    for i in range(10, 100):\n        if num % i == 0:\n            j = num // i\n            if j >= 10 and j < 100 and i % 7 == 0 and j % 7 == 0:\n                factor_pairs.append((i, j))\n\n    if factor_pairs:\n        return factor_pairs[0][0] + factor_pairs[0][1]\n    else:\n        return None\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n\n    median = sequence[len(sequence) // 2]\n\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_find = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_to_find\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    one_entrance_time = 16  # minutes for one entrance\n    total_visitors = one_entrance_time * visitors_per_minute\n\n    check_in_rate_with_two_entrances = check_in_per_entrance * 2  # two entrances\n    time_with_two_entrances = total_visitors / check_in_rate_with_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    speed_mph = 65  # speed in miles per hour\n    time_hours = 15 / 60  # time in hours (15 minutes)\n    distance_miles = speed_mph * time_hours  # distance in miles\n    km_per_mile = 1.60934  # conversion factor from miles to kilometers\n    distance_km = distance_miles * km_per_mile  # distance in kilometers\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    # Equation based on the initial count difference\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n\n    # Total frogs and dragonflies after the magic show\n    total_frogs_after = 11\n    total_dragonflies_after = 10\n\n    # Equations based on the total count after the magic show\n    equation2 = Eq(frogs_initial + (total_dragonflies_after - dragonflies_initial), total_frogs_after)\n    equation3 = Eq(dragonflies_initial + (total_frogs_after - frogs_initial), total_dragonflies_after)\n\n    # Solve the system for the initial counts\n    solutions = solve((equation1, equation2, equation3), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_climbed_day = 5\n    distance_slid_night = 3\n    net_distance_per_day = distance_climbed_day - distance_slid_night\n    burrow_depth = 16\n    days = 0\n\n    while True:\n        days += 1\n        burrow_depth -= distance_climbed_day\n        if burrow_depth <= 0:\n            break\n        burrow_depth += distance_slid_night\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n    remaining_cookies = total_cookies - given_away\n    bottles_used = remaining_cookies // cookies_per_bottle\n    \n    return bottles_used\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq((3/4)*muffins + (5/8)*cookies, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for i in range(999, 100 - 1, -1):\n        if i % 25 == 0:\n            return i\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming constants for the cost of a ticket, a cup of coffee and the metro both ways.\n    # Since the costs are not provided in the question, I'm assuming arbitrary values for them.\n    # If you have the actual costs, please replace these values with the actual ones.\n    \n    ticket_price = 10  # Placeholder value\n    coffee_price = 3    # Placeholder value\n    metro_fare = 2      # Placeholder value\n    \n    # Richard's total expenses\n    richard_expenses = ticket_price + coffee_price + metro_fare\n    \n    # Remaining money after Richard's expenses\n    remaining_money = 40 - richard_expenses\n    \n    # Cost per friend which includes ticket, coffee, and metro fare\n    cost_per_friend = ticket_price + coffee_price + metro_fare\n    \n    # Number of friends Richard can treat\n    friends = remaining_money // cost_per_friend\n    \n    return friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number_string = f'123{A}456{A}789{A}0'  # Last digit is 0 to ensure the number is even\n        number = int(number_string)\n        if number % 9 == 0 and number % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let t be the time in minutes that the driver takes\n    # Since the ratio of their speeds is 13 to 2, the time taken by the cyclist is 13/2 times the driver's time\n    # The difference in time is 143 minutes\n    # Hence we get the equation (13/2)t - t = 143, which simplifies to 11/2 t = 143\n    # Solving for t, we have t = (2 * 143) / 11\n\n    t = (2 * 143) / 11\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_squares = sum([i for i in range(1, n + 1)]) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    return 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Hypothetical reasoning\n    # If (1) is correct, this infers that all statements are correct, which contradicts the premise. So (1) cannot be correct.\n    # If (2) is correct, this means (1) and (3) are incorrect, contradicting with the fact that only one statement is correct. So (2) cannot be correct.\n    # If (3) is correct, this would mean one of (1) or (2) is also correct, which would contradict the premise. Therefore, (3) cannot be correct.\n    # If (4) is correct, then all previous statements are correct, which is not possible as per the given premise. So (4) cannot be correct.\n    # Now, considering if (5) is true, it means none of the statements above is correct. This does not contradict the premise.\n    # Hence, statement (5) is the only one that can be correct.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n    equation = Eq(1/4 * coins + 2, 1/3 * coins)\n\n    solution = solve(equation, coins)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange 5 singing (S) shows.\n    # There are 6 slots around the 5 singing shows (like this: _ S _ S _ S _ S _ S _)\n    # to insert 3 comedy (C) shows in such a way that they are not consecutive.\n    slots = 6\n    comedy_shows = 3\n\n    # Choose 3 slots from the available 6 to place the comedy shows\n    ways_to_place_comedy = factorial(slots) // (factorial(comedy_shows) * factorial(slots - comedy_shows))\n\n    # Now, multiply by the ways to arrange the singing shows and the comedy shows\n    ans = ways_to_place_comedy * factorial(5) * factorial(3)\n\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways_to_choose = trains + cars + flights\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    days_to_pave = 5\n    meters_per_day = total_length / days_to_pave\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    recurring_sequence = \"23456789\" * 233 + \"2345678\"\n    sum_of_digits = sum(int(digit) for digit in recurring_sequence[:2100])\n    return sum_of_digits\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert all numbers into decimals\n    decimals = [2/5, 1/4, 0.45, 0.35, 7/20]\n    \n    # Sort the decimals in ascending order\n    sorted_decimals = sorted(decimals)\n    \n    # Find the middle value (the median)\n    middle_index = len(sorted_decimals) // 2\n    ans = sorted_decimals[middle_index]\n\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the number initially thought of.\n    x = symbols('x')\n\n    # Set up the equation according to the problem.\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    # Solve the equation for 'x'.\n    solution = solve(equation, x)\n\n    # Return the solution as the original number thought of.\n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    final_number = 12\n    original_number = (final_number + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, we fix one person and arrange the rest.\n    num_people = 6\n    num_seats = 8\n\n    # Calculate the number of ways to arrange the (num_people - 1) around the table\n    # since we are fixing one person's seat.\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [d for d in digits if d % 2 == 0]\n    \n    smallest_even_number = float('inf')\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits: # the last digit should be even\n            number = int(''.join(map(str, perm)))\n            smallest_even_number = min(smallest_even_number, number)\n    \n    return smallest_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let's say the number of steps of the escalator is 'n' and the speed of the escalator is 's' steps per second.\n    # When Peter walks at 1 step/sec, he takes 10 seconds to reach the top. Therefore, the escalator covers 's * 10' steps in that time.\n    # The total distance covered by Peter and the escalator is 'n = 10 + s * 10'.\n    \n    # When Peter walks at 2 steps/sec, he takes 8 seconds to reach the top. Therefore, the escalator covers 's * 8' steps in that time.\n    # The total distance covered by Peter and the escalator in this case is 'n = 16 + s * 8'.\n    \n    # We can create two equations based on the above information:\n    # n = 10 + s * 10  (1)\n    # n = 16 + s * 8   (2)\n    \n    # Now we can solve these two equations to find 'n' (the number of steps of the escalator). We can do this by equating the right hand sides of both equations.\n    # 10 + s * 10 = 16 + s * 8\n    # Simplify the equation\n    # 2 * s = 16 - 10\n    # Solve for 's'\n    s = (16 - 10) / 2\n    \n    # Now we can substitute the value of 's' in either equation (1) or (2) to find 'n'.\n    n = 10 + s * 10\n    \n    return int(n)\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Calculate the total cost\n    total_cost_p = (10 * 100) - (3.88 * 100)  # Convert pounds to pence\n    chocolate_cost_p = 72  # The cost of the chocolate bar in pence\n    \n    # Subtract the cost of the chocolate from the total cost\n    remaining_cost_p = total_cost_p - chocolate_cost_p\n    \n    # Calculate the number of balloons bought\n    balloon_cost_p = 20  # The cost of one balloon in pence\n    num_balloons = remaining_cost_p // balloon_cost_p\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    import math\n    return math.lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_distance = 2000\n\n    ans = (percentage / 100) * total_distance\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    max_students_per_kayak = 4\n\n    kayaks_needed = (students + max_students_per_kayak - 1) // max_students_per_kayak\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n    \n    cupcakes_cost = (money_spent / 5) * 2\n    pizza_cost = (money_spent / 6) * 3\n    \n    cupcake_price = cupcakes_cost / 2\n    pizza_price = pizza_cost / 3\n    \n    if cupcake_price != pizza_price:\n        return \"Error: Prices do not match.\"\n    \n    max_cupcakes = money_left // cupcake_price\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, x = symbols('a x')\n    a_value = 4 * (3**0.5)\n\n    equation = Eq(3 * a_value, (3 * x)**0.5)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    result = (4 + 2) * 13 - (4 + (2 * 13))\n    return result\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the youngest dwarf's age be x.\n    # Then, the next two dwarf's ages will be x+1 and x+2.\n    # Therefore, (x) + (x+1) + (x+2) = 42\n    # Solving this equation gives x = 13 (the youngest dwarf's age).\n    x = (42 - 3) // 3  # since they are 3 in number and they are consecutive years\n  \n    # Now to find the sum of the ages of the oldest three:\n    # We will use their ages which are x+4, x+5, and x+6.\n  \n    oldest_three_sum = (x+4) + (x+5) + (x+6)\n    return oldest_three_sum\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n    \n    count = 0\n    for i in range(2, 7):\n        number = int('2' + '5' * (i - 1))\n        if math.sqrt(number).is_integer():\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_pieces = 10\n    total_pieces = 16\n    \n    # Let x be the number of papers cut into three parts\n    # Each paper that is cut adds 2 more pieces to the total (since it is divided into 3 parts)\n    # Therefore, the equation to solve is: original_pieces + 2*x = total_pieces\n    # We solve for x to find the number of papers cut into three parts\n    \n    x = (total_pieces - original_pieces) // 2\n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Calculate the production rate per worker per minute\n    rate_per_worker_per_minute = (120 / 6) / 4\n    \n    # Calculate the total number of parts produced by 3 workers in 10 minutes\n    parts_by_3_workers = rate_per_worker_per_minute * 3 * 10\n\n    return parts_by_3_workers\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original = 98\n    new = 44.1\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Iterate through the divisors to find which one makes 2240/n a perfect square\n    for d in divs:\n        # Check if 2240/d is a perfect square by taking its square root and checking if it's an integer\n        if (2240 // d)**0.5 % 1 == 0:\n            ans = d\n            break\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 70 / 100\n    swimming_girls = 200\n    \n    # Let x be the number of boys\n    # Then (total_pupils - x) is the number of girls\n    # 40% of boys cannot swim, so 60% of the boys can swim\n    # x * 60/100 + swimming_girls = swimming_pupils\n    \n    x = symbols('x')\n    equation = Eq(x * 60/100 + swimming_girls, swimming_pupils)\n    boys = solve(equation, x)[0]\n    \n    girls = total_pupils - boys\n    \n    return girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_ratio = 1 / 4\n    non_rotten_apples = total_apples * (1 - rotten_ratio)\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n\n    increase = final_value - initial_value\n    percent_increase = (increase / initial_value) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n\n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    A = sum(i for i in range(1, n + 1)) ** 2\n    return A\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the amount of 10% sugar water needed\n    x = symbols('x')\n    \n    # Equation represents the final concentration of the mixture\n    # 0.3 * 4: the amount of sugar in the 4 kg of 30% sugar water\n    # 0.1 * x: the amount of sugar in the x kg of 10% sugar water\n    # (4 + x): the total weight of the mixture\n    # 0.26 * (4 + x): the amount of sugar in the final mixture with 26% concentration\n    equation = Eq(0.3 * 4 + 0.1 * x, 0.26 * (4 + x))\n\n    # Solve the equation for x\n    x_val = solve(equation, x)\n\n    return x_val[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let the mass of the empty jar be 'j' and the mass of one chocolate be 'c'.\n    # According to the problem, we have:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # Subtract the first equation from the second to isolate 'c':\n    # (j + 17c) - (j + 5c) = 317 - 185\n    # 12c = 132\n    # c = 132 / 12\n    c = 132 / 12\n\n    # Now, we use 'c' to solve for 'j' using the first equation:\n    # j + 5c = 185\n    # j = 185 - 5c\n    j = 185 - 5 * c\n\n    # Finally, we find the mass of the jar with 10 chocolates:\n    # mass of jar with 10 chocolates = j + 10c\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    # Number to be divided into equal parts\n    num = 200\n    # Count number of ways to divide 200 into equal parts\n    count = 0\n    # Loop through all possible divisors\n    for i in range(1, num // 2 + 1):\n        # Since num is even, skip odd divisors\n        if i % 2 == 1:\n            continue\n        # If i is a divisor, then we can write num as a sum of equal parts i\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def operation(a, b):\n    return a * b - a - b + 1\n\ndef solution():\n    return operation(operation(2, 3), 4)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    field_length = 144  # length of the rectangular field in meters\n    field_width = 204   # width of the rectangular field in meters\n    total_wheat = 116   # total number of wheat\n\n    # Since every corner of the field is planted with a wheat, we have to subtract\n    # 4 from the total wheat count to properly calculate the number of intervals\n    # on each side.\n    intervals = total_wheat - 4\n\n    # The number of intervals is divided equally between the length and the width.\n    # Half the intervals go on the length and half go on the width.\n    total_length_intervals = interval_length = field_length - 1\n    total_width_intervals = interval_width = field_width - 1\n\n    # Dividing the sum of intervals on the length and width by half the number of intervals,\n    # to get the distance between each 2 wheat.\n    distance = (total_length_intervals + total_width_intervals) / intervals\n\n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n    total_sweets = 674\n\n    # After Lana gave away 1/3 of her sweets and Mark ate 34 sweets\n    equation = Eq(lana - lana / 3, mark - 34)\n\n    # Total number of sweets they originally had\n    equation_total = Eq(lana + mark, total_sweets)\n\n    # Solving the equations\n    solutions = solve((equation, equation_total), (lana, mark))\n\n    # Number of sweets Lana had more than Mark\n    more_sweets = solutions[lana] - solutions[mark]\n\n    return more_sweets\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    dorothy = 96\n    timmy = dorothy // 8\n    kevin = timmy + 45\n    return kevin\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    total_days = 4  # days spent at a friend's house\n    remaining_after_friend = 2 * 7  # 2 weeks left for summer camp, in days\n    total_days += remaining_after_friend\n    reading_relaxing_days = 2 * total_days  # half of the remaining time before friend's house\n    total_days += reading_relaxing_days\n    working_days = 2 * total_days  # half of the holiday spent working\n    total_days += working_days\n    return total_days\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    minutes_per_cat_per_fish = 10\n    number_of_cats = 5\n    number_of_fish = 5\n    \n    # Since all cats catch fish simultaneously, the time to catch one fish per cat remains constant\n    minutes_to_catch_all_fish = minutes_per_cat_per_fish\n    \n    return minutes_to_catch_all_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, pineapple = symbols('watermelon pineapple')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Calculate the perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # There are 4 corners, but we count each corner just once\n    # Hence we subtract 4 from the total wheat to get the number of intervals\n    intervals = 116 - 4\n\n    # The distance between every 2 wheat is the perimeter divided by the number of intervals\n    distance_between_wheat = perimeter / intervals\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Ellie's rate of interviewing per week\n    ellie_rate = 40\n    \n    # Combined rate of interviewing per week (Ellie and Gloria)\n    combined_rate = 200 / 4\n    \n    # Gloria's rate of interviewing per week\n    gloria_rate = combined_rate - ellie_rate\n    \n    # Time it takes Gloria alone to interview 200 people\n    gloria_time = 200 / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        if '2' in perm or '0' in perm:  # B=2 and D=0 cannot be in the permutation\n            continue\n\n        A, C, E, F = perm\n        ABCDEF = int(f'2{A}0{C}E{F}')\n        EFABCD = int(f'E{F}2A0C')\n\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f'{F}{A}{C}{E}')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * x  # x is the percentage of rice in dogfood B\n    rice_percent_mixture = 0.28\n\n    # Setting the equation for total rice in the mixture to be 28% of the total weight\n    equation = total_rice == total_weight * rice_percent_mixture\n    # Solve for x\n    x = (total_weight * rice_percent_mixture - 15 * 0.40) / 60\n\n    return int(x * 100)  # Convert the decimal fraction to percentage\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the four numbers\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Given conditions\n    eq1 = Eq((a + (b + c + d) / 3), 39)\n    eq2 = Eq((d + (a + b + c) / 3), 51)\n\n    # Since the numbers are in descending order, d > c > b > a\n    # We are looking for the largest value of d, which means we are looking for the smallest values of a, b, and c\n    # Let's solve the system first and find the relations\n    solutions = solve((eq1, eq2), (a, d))\n\n    # The solutions are in terms of b and c: {a: 39 - (b + c)/3, d: 51 - (a + b + c)/3}\n    # Let's find the possible values that satisfy the descending order\n    max_d = float('-inf')\n    for b_val in range(1, 38):\n        for c_val in range(b_val + 1, 39):\n            a_val = 39 - (b_val + c_val) / 3\n            d_val = 51 - (a_val + b_val + c_val) / 3\n            # Check if a, b, c, d are distinct positive whole numbers and in descending order\n            if a_val.is_integer and d_val.is_integer and a_val > 0 and d_val > c_val > b_val > a_val:\n                max_d = max(max_d, d_val)\n\n    return max_d\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # water leaks at 15ml per minute\n    minutes_in_hour = 60  # number of minutes in an hour\n    hours = 2  # time duration in hours\n\n    # calculate the total amount leaked in 2 hours\n    total_leaked_ml = rate_per_minute * minutes_in_hour * hours\n\n    # convert milliliters to liters (1000 ml = 1 L)\n    total_leaked_liters = total_leaked_ml / 1000\n\n    return total_leaked_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    # Calculate the number of trees. Include both ends.\n    ans = (road_length // tree_distance) + 1\n\n    return ans\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's walking speed in meters per minute\n    speed_barbara = 60\n    # Catherine's walking speed in meters per minute\n    speed_catherine = 45\n\n    # When Barbara reaches the mall, Catherine still has to walk 60 meters\n    distance_remaining_for_catherine = 60\n\n    # Let's denote the time taken by Barbara to reach the shopping mall as 't' minutes.\n    # Since Barbara and Catherine start at the same time, 't' is also the time that Catherine has been walking.\n    # Therefore, the distance covered by Barbara is 'speed_barbara * t' meters.\n    # And the distance covered by Catherine is 'speed_catherine * t' meters.\n    # According to the problem statement, the distance covered by Barbara is 60 meters more than the distance covered by Catherine.\n    # So, we have the equation: speed_barbara * t = speed_catherine * t + 60\n\n    # Rearrange the equation to solve for 't'\n    t = distance_remaining_for_catherine / (speed_barbara - speed_catherine)\n\n    # Now, find the distance to the shopping mall by finding the distance Barbara walked\n    distance_to_mall = speed_barbara * t\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n    \n    total_change = (ten_dollar_notes * 10) + (five_dollar_notes * 5) + (twenty_cent_coins * 0.20)\n    money_spent = 100 - total_change\n    \n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    total_money = 200\n    \n    # A's total to B's total is 4:3\n    equation1 = Eq(A/B, 4/3)\n    \n    # A has £20 more than C\n    equation2 = Eq(A, C + 20)\n    \n    # Total money\n    equation3 = Eq(A + B + C, total_money)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    solution = solve(equation, x)\n    return solution[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes\n    total_time = 18  # minutes\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if (i % 4 == 0) == (i % 6 == 0):  # True if multiples of both 4 and 6, or neither\n            count += 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 / 5\n    remaining = total_pears - sold_first_day\n    sold_second_day = remaining * 7 / 9\n    \n    return int(sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    total_apples = 29\n    min_apples_to_one_student = 3\n    \n    # Assuming at least one student gets at least 3 apples,\n    # we must subtract these 3 apples.\n    remaining_apples = total_apples - min_apples_to_one_student\n    \n    # Since the remaining apples are to be distributed such that\n    # every student gets at least 1 apple, we apply the principle\n    # where the number of pigeons (apples) is one more than the\n    # number of pigeonholes (students) for everyone to get at least one.\n    # The class size would then be the remaining apples, as the\n    # minimum one student already received their apples.\n    class_size = remaining_apples\n    \n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n\n    ways_to_pick_lead_singers = num_boys * num_girls\n\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(10, 100):\n        if isprime(number):\n            reversed_number = int(str(number)[::-1])\n            if number != reversed_number and isprime(reversed_number):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    for blue_balls_initial in range(1, 140):\n        green_balls_initial = 140 - blue_balls_initial\n        blue_balls_removed = (2/5) * blue_balls_initial\n        green_balls_removed = 28\n        blue_balls_remaining = blue_balls_initial - blue_balls_removed\n        green_balls_remaining = green_balls_initial - green_balls_removed\n\n        if blue_balls_remaining == green_balls_remaining:\n            return blue_balls_initial\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # The probability of the alcoholic not in the first and the second bar.\n    # If he visits bars randomly, then each bar has equal probability 1/3 to be visited.\n    # The probability of not being in a particular bar is thus 1 - 1/3 = 2/3.\n    # Since he is not in two of the bars independently, we multiply the probabilities:\n    # (2/3 for the first bar) * (2/3 for the second bar) = (4/9).\n    \n    # Therefore, the probability of being in the third bar is:\n    # 1 - Probability(Not in the third bar)\n    # = 1 - (4/9)\n\n    probability = 1 - (2/3) * (2/3)\n\n    return probability\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    return solutions[cousin] + 4\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    average = (first_number + second_number) / 2\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_first_catch = 100  # The number of fish marked in the first catch\n    caught_second_time = 100  # The number of fish caught in the second catch\n    marked_second_catch = 16  # The number of fish marked in the second catch\n\n    # Estimate the total number of fish in the pond using the capture-recapture method\n    population_estimate = (marked_first_catch * caught_second_time) / marked_second_catch\n\n    return int(population_estimate)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # For every 2 meters that Nancy walks, Randy walks 3 meters\n    # Randy walks 10 meters more than Nancy when they meet\n    # Let n be the distance Nancy walks, r be the distance Randy walks\n    # We can set up the proportion r / n = 3 / 2\n    # We can also set up the equation for the extra distance Randy walks: r = n + 10\n    # Replacing r in the proportion with n + 10, we get (n + 10) / n = 3 / 2\n    # Cross-multiply to solve for n:\n    # 2n + 20 = 3n\n    # n = 20\n    # Now we find r using r = n + 10\n    r = 20 + 10\n    # The total distance between them when they set off is the sum of distances each walked\n    total_distance = 20 + r\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_age_now = 6\n    mandy_age_now = 35\n    age_difference = mandy_age_now - elaine_age_now\n    elaine_age_future = 12\n    mandy_age_future = elaine_age_future + age_difference\n    return mandy_age_future\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = (1*99 + 3) / 99\n    num2 = (3*33 + 3) / 33\n    num3 = (9*11 + 3) / 11\n\n    den1 = (1*99 + 1) / 99\n    den2 = (3*33 + 1) / 33\n    den3 = (9*11 + 1) / 11\n\n    # Calculate the sums of the numerators and denominators\n    numerator = num1 + num2 + num3\n    denominator = den1 + den2 + den3\n\n    # Perform the division\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    equation1 = Eq(ali + 5, (bronson + charlie)/2)\n    equation2 = Eq(bronson, 2 * ali)\n    \n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    even_digits = [0, 2, 4, 6, 8] # Possible even digits for the last place\n    count = 0\n    \n    for last_digit in even_digits:\n        for first_digit in range(1, 10): # First digit cannot be 0\n            second_digit = 8 - first_digit - last_digit\n            # Second digit must be a digit, not equal to the last and first digit, and within 0-9\n            if 0 <= second_digit <= 9 and second_digit != first_digit and second_digit != last_digit:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if num % 3 == 0:\n            rotated_num = int(f'2{str(num)[:-1]}')\n            if rotated_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Using the Inclusion-Exclusion Principle\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # (remainder, modulo)\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    return number\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # The repeating decimal can be represented as 0.2014(14)\n    # First, we express this repeating decimal as a geometric series\n    # 0.2014(14) = 0.2014 + 0.000014 + 0.00000014 + ...\n    # We can write it as the sum of 0.2014 and 0.000014 * (1 / (1 - 0.01))\n    \n    non_repeating = 2014 / 10000 # This is the non-repeating part\n    repeating_decimal = 14 / 9900  # This is the repeating part\n    \n    # Use the formula for the sum of an infinite geometric series:\n    # S = a / (1 - r), where a is the first term and r is the common ratio\n    sum_geometric_series = repeating_decimal / (1 - 0.01)\n\n    # The total value of the infinite recurring decimal is the sum of\n    # non-recurrent part and the recurrent part\n    total_value = non_repeating + sum_geometric_series\n    \n    # To find x, we equate to the description given in the problem and solve for x:\n    # x / 9900 = total_value\n    x = total_value * 9900\n    \n    return int(x)  # Convert to whole number because x is stated to be a whole number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n\n    remainder = total_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # There are 6 permutations of abc making three digit numbers: \n    # abc, acb, bac, bca, cab, cba.\n    # Each digit appears twice in hundreds, tens and ones places.\n    # Therefore, the sum S is given by:\n    \n    sum_hundreds = (a + b + c) * 100 * 2\n    sum_tens = (a + b + c) * 10 * 2\n    sum_ones = (a + b + c) * 2\n    \n    # The total sum\n    S = sum_hundreds + sum_tens + sum_ones\n    return S\n\n# Assuming a, b, and c are already defined in the context\n# Otherwise, you can uncomment and set a, b, c as desired values\n# a, b, c = 1, 2, 3\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if str(ab * ba)[1:-1] == \"00\":\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbolic variables for the number of potatoes in small and large sacks.\n    small_sack, large_sack = symbols('small_sack large_sack')\n    \n    # Equation representing 20% more potatoes in the large sack than in the small sack.\n    equation1 = Eq(large_sack, small_sack * 1.20)\n    \n    # Equation representing the total number of potatoes when combining both sacks.\n    equation2 = Eq(small_sack + large_sack, 77)\n    \n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n    \n    # Getting the number of potatoes in the large sack from the solutions.\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let 'o' be the number of oranges and 'a' the number of apples Mrs Lee had at first\n    o = Symbol('o')\n    a = Symbol('a')\n\n    # According to the problem, the total number of oranges and apples is 125\n    total_fruits_eq = o + a - 125\n\n    # She sold half of the apples and 35 oranges\n    # In the end, she had an equal number of oranges and apples left: o - 35 = a / 2\n    left_fruits_eq = o - 35 - a / 2\n\n    # Now we solve the two equations\n    solutions = solve((total_fruits_eq, left_fruits_eq), (o, a))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999\n    greatest_6_digit_palindrome = 999999\n    \n    # The difference between the greatest 6-digit palindrome and the least 5-digit palindrome\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n    \n    # Calculate the minimum number of cabins needed, using ceiling division\n    min_cabins = -(-total_students // capacity_per_cabin)\n\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 59))\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    digits_count = 0  # Total number of digits starting from the right\n    current_number = 1200  # Starting from 1200 for rightmost digits\n\n    # Count digits by number size\n    while digits_count < 2011:  \n        digits_count += len(str(current_number))  \n        if digits_count < 2011:  # Only decrement if the goal hasn't been reached\n            current_number -= 1\n\n    # Get the digit that represents the 2011th position from the right\n    digit_from_right = str(current_number)[-(2011 - (digits_count - len(str(current_number))))]\n\n    return int(digit_from_right)\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins as x.\n    coins = symbols('coins')\n\n    # One quarter of them are showing heads\n    heads_initial = coins / 4\n\n    # If I turn over two more coins to show heads then one third of the coins now show heads\n    heads_after = (heads_initial + 2) / coins\n\n    # Setting the equation according to the problem\n    equation = Eq(heads_after, 1/3)\n\n    # solving the problem\n    solution = solve(equation, coins)\n\n    # Returning the solution\n    return solution[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # Number of books to the right of the picture book\n    books_right_of_picture = 6 \n    \n    # Position of the picture book from the left\n    position_from_left = 14 \n    \n    # Total number of books is the position of the picture book plus\n    # the books to the right of it\n    total_books = position_from_left + books_right_of_picture \n    \n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_term = (50 // 5) * 5\n    number_of_terms = last_term // 5\n    sum_of_multiples = 5 * number_of_terms * (number_of_terms + 1) // 2\n    return sum_of_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet_1 = 30  # km per minute\n    speed_planet_2 = 40  # km per minute\n    time = 5  # minutes ago\n\n    # Calculate the distance each planet has travelled in 5 minutes\n    distance_planet_1 = speed_planet_1 * time\n    distance_planet_2 = speed_planet_2 * time\n\n    # The total distance between the two planets 5 minutes ago\n    total_distance = distance_planet_1 + distance_planet_2\n\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c, and the number of motorbikes be m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # 1) c + m = 140  (total number of vehicles)\n    # 2) 4c + 2m = 490 (total number of tyres)\n\n    # We can solve these equations for c and m.\n    # Multiplying the first equation by 2 gives us: \n    # 2c + 2m = 280\n    # Now we can subtract this equation from the second equation to find c.\n    # (4c + 2m) - (2c + 2m) = 490 - 280\n    # 2c = 210\n    # c = 105\n\n    c = (490 - 2 * 140) // 2\n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    first_digit_options = 5  # options for the first digit (1-5)\n    second_digit_options = 6  # options for the second digit (0-5)\n    total_combinations = first_digit_options * second_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_quantity = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    liters_of_apple_juice = (apple_juice_ratio / ratio_sum) * total_quantity\n\n    return liters_of_apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    n = symbols('n')\n\n    # Setting up equations based on the remainders given\n    equation1 = Eq(190 % n, a)\n    equation2 = Eq(137 % n, a + 4)\n    equation3 = Eq(101 % n, a + 6)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, n))\n\n    # Finding the valid n which is the divisor we are looking for\n    for sol in solutions:\n        if sol[n] > 0 and isinstance(sol[n], int):\n            divisor = sol[n]\n            break\n\n    # Getting the remainder when 299 is divided by the divisor\n    remainder = 299 % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    progress_per_day = day_distance - night_distance\n    day = 0\n\n    while total_distance > 0:\n        day += 1\n        total_distance -= day_distance\n\n        if total_distance <= 0:\n            break\n\n        total_distance += night_distance\n\n    return day\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    rounded_number = round(number, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kg = 960\n    per_box_kg = 8\n    return total_kg // per_box_kg\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    number_doubled_plus_12 = result\n    number_doubled = number_doubled_plus_12 - 12\n    original_number = number_doubled / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    # Starting from the smallest number that fits the condition for division by 2,\n    # which is 3 (as 3 divided by 2 leaves a remainder of 1),\n    # we look for a number that also fits the condition for division by 13.\n    # We increment by 2 each time to maintain the condition of remainder 1 when divided by 2.\n    num = 3\n    while True:\n        if num % 13 == 1:\n            return num\n        num += 2\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9 / 5) * (25 / 100) + (1 / 4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n    total_donation = num_classes * students_per_class * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import isprime\n\ndef solution():\n    max_sum = 0\n    for x in range(2, 200):\n        if isprime(x):\n            y = 200 - x * 2\n            if y > 1 and isprime(y) and x != y:\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repeats_2 = 2\n    repeats_3 = 2\n    \n    # The number of permutations for the digits with the repetitions is the total factorial\n    # divided by the product of factorials of repetitions for each number that repeats\n    division_factor = factorial(repeats_2) * factorial(repeats_3)\n    permutations = factorial(total_digits) // division_factor\n    \n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction_of_total = 1/4\n    initial_amount = spent / fraction_of_total\n    return initial_amount\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # create symbols for the dwarfs\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # create the equations based on the problem description\n    equation1 = Eq(doc, happy + 10)         # Doc is 10 cm taller than Happy\n    equation2 = Eq(happy, dopey + 10)       # Happy is 10 cm taller than Dopey\n    equation3 = Eq(sneezy, dopey)           # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation4 = Eq(bashful, dopey)          # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation5 = Eq(grumpy, dopey)           # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation6 = Eq(sleepy, 80)              # Sleepy is 80cm tall\n    equation7 = Eq(doc + sleepy, dopey + sneezy)  # Doc and Sleepy have the same combined height as Dopey and Sneezy\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n    \n    # calculate the total height of the seven dwarfs\n    total_height = sum(solutions.values())\n    \n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    games_per_team = teams - 1  \n    total_games = (games_per_team * teams) // 2\n    return total_games\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 5 + 1/6\n    num2 = 6 + 1/5\n    denominator = 1/6 + 1/5\n    \n    # Adding the improper fractions and calculating the result\n    result = (num1 + num2) / denominator\n\n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    perm = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = perm[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate_per_day = 1000 / 5\n    days_to_construct_2600m = 2600 / rate_per_day\n    return days_to_construct_2600m\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed = 250 / 5\n    distance_in_3_hours = speed * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Initialize the first and last values of the series\n    first_value = 12\n    last_value = 90\n    \n    # The count of numbers in the series\n    count = last_value - first_value + 1\n    \n    # If the count of numbers is odd, the sum will be either odd or even\n    # depending on whether the first number is odd or even.\n    # If the count is even, the sum will always be even.\n    if count % 2 == 0:\n        ans = \"even\"\n    else:\n        if first_value % 2 == 0:\n            ans = \"even\"\n        else:\n            ans = \"odd\"\n    \n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for each person's hat number\n    qiang, rory, sophia = symbols('qiang rory sophia')\n\n    # Equations based on the problem statement\n    equation1 = qiang + rory == 22\n    equation2 = qiang + sophia == 17\n    equation3 = rory + sophia == 11\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n\n    # Return the largest number\n    ans = max(solutions[qiang], solutions[rory], solutions[sophia])\n    return ans\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_between_trees = 5\n    length_of_road = (number_of_trees - 1) * distance_between_trees\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    # Calculate the product of fractions step by step\n    product = (3/2) * (4/3) * (5/4) * (6/5) * (7/6) * (8/7) * (9/8) * (10/9)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime):\n            if isprime(prime + 6) or isprime(prime - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the average speed during the first 30 minutes\n    x = symbols('x')\n\n    # Calculate the distance covered in each time period\n    # Speed = distance/time, so distance = speed * time\n    # Time is in hours, so 30 minutes is 0.5 hours\n    distance_first_30 = x * 0.5\n    distance_second_30 = (x - 20) * 0.5\n    distance_last_30 = (x + 10) * 0.5\n\n    # The total distance covered is the sum of distances in all time periods\n    total_distance = distance_first_30 + distance_second_30 + distance_last_30\n\n    # Set up equation based on total distance\n    equation = Eq(total_distance, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 346):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = (total_people + bus_capacity - 1) // bus_capacity\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    denise_total = 360\n    total_prize_money = symbols('total_prize_money')\n\n    # Denise got 1/5 of the total prize money from the singles competition.\n    singles_competition = (1/5) * total_prize_money\n    # Denise got 1/15 of the total prize money from the doubles competition.\n    doubles_competition = (1/15) * total_prize_money\n\n    # Equation representing Denise's total earnings from both competitions\n    equation = Eq(singles_competition + doubles_competition, denise_total)\n    \n    # Solve for the total prize money\n    total_prize_money_solution = solve(equation, total_prize_money)\n\n    return total_prize_money_solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Total players excluding the coach\n    total_players = 6\n    \n    # The coach has a fixed position in the middle, so we don't consider the coach's position in the permutations.\n    # The captain has 2 choices to stand next to the coach.\n    captain_choices = 2\n    \n    # The remaining players (excluding coach and captain) can be arranged in any order.\n    # This means we need to perform a permutation on (total_players - 1) players.\n    remaining_permutations = factorial(total_players - 1)\n    \n    # Apply the principle of multiplication\n    total_arrangements = captain_choices * remaining_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n\n    # Assume that the layers of boys and girls form concentric squares\n    # Increase the layer count and calculate the number of boys and girls\n    # until the difference is 20\n    while True:\n        # Boys occupy the outer layer, girls occupy the inner layer\n        \n        # increment boys by the perimeter of the current layer minus the 4 corners (already counted)\n        if layer == 0:  # first layer, no need to subtract corners\n            boys += 4 * (layer * 2 + 1)\n        else:  # subtract the corners (counted in previous layers)\n            boys += 4 * (layer * 2 + 1) - 4\n\n        # Move to the next layer (inner layer for girls)\n        layer += 1\n        # increment girls by the perimeter of the current layer minus the 4 corners (already counted)\n        if layer > 1:\n            girls += 4 * (layer * 2 + 1) - 4\n\n        # Calculate the difference. If we reach a surplus of 20 boys, break.\n        if (boys - girls) == 20:\n            break\n\n    # Calculate the total number of students\n    total_students = boys + girls\n\n    # Return the total number of students\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    fish_left_3 = 25\n    fish_for_1 = 1\n\n    # Let the number of penguins be 'p' and the total amount of fish be 'f'\n    # Equations based on the problem statement:\n    # f = 3p + 25 (if 3 fish per penguin, 25 fish left)\n    # f = 6p + 1 - 5 (if 6 fish per penguin, but one penguin gets only 1 fish)\n    # Both equations equal 'f', so we can equate them:\n    # 3p + 25 = 6p + 1 - 5\n    # Simplifying the equation:\n    # 3p - 6p = 1 - 5 - 25\n    # -3p = -29\n    # p = 29/3\n    # p must be a whole number, so the only number of penguins that satisfies this condition is 9\n    # (because 3*9 + 25 = 27 + 25 = 52 fish, and 6*9 + 1 = 54 + 1 = 55 fish)\n    penguins = 29 // 3\n\n    return penguins\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    return cube_root + square\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    current = 1\n    i = 1\n    while i <= 30:\n        for _ in range(current):\n            if i > 30:\n                break\n            sum_terms += current\n            i += 1\n        current += 1\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = (25/100) * 20 + (1/5) * 30 + (2/3) * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n    votes_needed = max(alice_votes, betty_votes) - cindy_votes + 1\n\n    if votes_needed <= remaining_votes:\n        return votes_needed\n    else:\n        return \"Cindy cannot ensure a win with the remaining votes\"\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Evaluate the first part of the expression\n    first_expr_num = 7 / -3.3333333333333333  # approximating the repeating decimal\n    first_expr_denom = (-0.027) ** (1/3)\n    first_expr = first_expr_num / first_expr_denom\n\n    # Evaluate the second part of the expression\n    second_expr_num = (2 ** 3) / (4 ** 2)\n    second_expr_denom = 0.125 * (1.8 - (0.2 * 7))\n    second_expr = second_expr_num / second_expr_denom\n\n    # Evaluate the third part of the expression, accounting for repeating decimal\n    third_expr_num = 0.1\n    third_expr_denom = 1 / 7  # 0.142857 is the repeating part for 1/7\n    third_expr = third_expr_num / third_expr_denom + (2 * 0.3)\n\n    # Calculate the final answer by combining all expressions\n    ans = first_expr + second_expr - third_expr\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_2005 = 50\n    james_1997 = 20\n    years_difference = 2005 - 1997\n    james_birth_year = 1997 - james_1997\n    gina_birth_year = 2005 - gina_2005\n    gina_age_at_james_birth = james_birth_year - gina_birth_year\n    return gina_age_at_james_birth\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for total sales\n    sales = symbols('sales')\n\n    # Equation based on the commission structure\n    equation = Eq(2500 + 0.02 * sales, 3300)\n\n    # Solve for the lower sales bracket, where commission is 2% of sales\n    solutions = solve(equation, sales)\n\n    # If sales are above 25000, we need to account for the extra 5% commission\n    # If the sales figure from the above solution is greater than 25000,\n    # calculate the sales figure with the new commission structure\n    if solutions[0] > 25000:\n        excess_sales = solutions[0] - 25000\n        # Adjust the equation for the amount of sales over $25000 with 5% commission\n        equation = Eq(2500 + (0.02 * 25000) + (0.05 * (sales - 25000)), 3300)\n        solutions = solve(equation, sales)\n\n    # The correct sales figure is the one that fits the commission structure\n    return solutions[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # After buying and giving away\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_two = total_height_of_six - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n\n    return average_height_of_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n\n    # Probability of failing the first and passing the second\n    p_second = (1 - p_first) * 0.5\n    \n    # Probability of failing the first two and passing the third\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n    \n    # Total probability of passing before the fourth attempt\n    p_pass_before_fourth = p_first + p_second + p_third\n    \n    return p_pass_before_fourth\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    number_of_terms = 30\n    common_difference = -1  # Since the sequence is decreasing\n\n    sum_of_terms = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_to_complete = total_pieces / pieces_per_hour\n    \n    return hours_to_complete\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial_product = 1\n    for i in range(1, 16):\n        factorial_product *= i\n\n    zero_count = 0\n    while factorial_product % 10 == 0:\n        factorial_product //= 10\n        zero_count += 1\n\n    return zero_count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    sol = solve(equation, age)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    # Loop through the number of digits required by each page number length\n    for pages_with_n_digits in range(1, 5):  # Assume pages numbers do not exceed 4 digits\n        digits_this_round = pages_with_n_digits * 9 * (10 ** (pages_with_n_digits - 1))\n        if digits + digits_this_round >= 1014:\n            # Solve for the exact number of pages where the total digits will reach 1014\n            pages_needed = (1014 - digits) // pages_with_n_digits\n            digits = digits + (pages_needed * pages_with_n_digits)\n            pages += pages_needed\n            break\n        digits += digits_this_round\n        pages += 9 * (10 ** (pages_with_n_digits - 1))\n\n    # If there are any remaining digits to be accounted for, add one page\n    if digits < 1014:\n        pages += 1\n\n    return pages\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = (5 * 7) + 3    # Total climbed in 6 days\n    total_height = 18               # Burrow height\n    slide_down = total_climbed - total_height  # Slide down distance\n    \n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # To minimize the apples given to others\n    # we need to maximize the ones given to the second student.\n    # We need to avoid 0 as stated 'positive integer'\n    \n    # Start assigning 1 apple to the first, third and fourth students.\n    # The remaining apples will be given to the second student.\n    \n    total_apples = 48\n    apples_for_others = 1 + 1 + 1 # since they must get a positive integer number\n    second_student_apples = total_apples - apples_for_others\n    \n    return second_student_apples\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # time taken by each person\n    times = [1, 2, 5, 10]\n    \n    # The strategy for minimum time is as follows:\n    # 1. The fastest two people go across first (Eddie and Jack, 1 + 2 = 2 minutes)\n    # 2. The fastest person comes back with the boat (Eddie, 1 minute)\n    # 3. The slowest two people go across the river (Rose and Mary, 10 minutes)\n    # 4. The second fastest person comes back with the boat (Jack, 2 minutes)\n    # 5. The fastest two people go across again (Eddie and Jack, 2 minutes)\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n\n    return 17\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length of the rectangle be L\n    # Let the width of the rectangle be W\n    # The perimeter P of a rectangle is given by P = 2L + 2W\n    # If you increase the length of the rectangle by 12 cm, the new length is L + 12\n    # The new perimeter is given as P_new = 38 cm, so P_new = 2(L + 12) + 2W\n    \n    # From the new perimeter we can find the relationship between L and W\n    # 38 = 2(L + 12) + 2W\n    # From this equation, we can solve for W in terms of L as follows:\n    # 38 = 2L + 24 + 2W\n    # 14 = 2L + 2W\n    # 7 = L + W\n    \n    # Now we need to find the original perimeter, so we use the relationship we just found:\n    # Original perimeter P = 2L + 2W\n    # Substitute W = 7 - L into the perimeter equation:\n    # P = 2L + 2(7 - L)\n    # P = 2L + 14 - 2L\n    # P = 14\n    # Therefore, the perimeter of the original rectangle is 14 cm.\n    \n    return 14\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((i**2 - (i+1)**2) for i in range(1, 90, 2))\n    return ans\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_diff_girls = 44\n    total_students = 0\n    side = 1  # starting with the smallest possible square size\n    \n    while True:\n        # Each layer alternates between boys and girls\n        # Outermost layer: Boys; second layer: Girls; etc.\n        # Boys: side^2 - (side-2)^2 when side > 1, otherwise just 1^2 for side 1\n        # Girls: (side - 2)^2 - (side-4)^2 when side > 3, 0 for side 1 or 2\n        boys = side**2 if side == 1 else side**2 - (side - 2)**2\n        girls = 0 if side < 3 else (side - 2)**2 - (side - 4)**2\n        \n        # Calculation of the difference by subtracting girls from boys\n        if side > 1:\n            diff = boys - girls\n        else:\n            diff = 1  # When side is 1, we have only 1 boy\n        \n        # Check if the current difference matches the required difference\n        if diff == boys_diff_girls:\n            total_students = side**2\n            break\n        \n        # If the difference exceeds the required difference, no valid square exists\n        if diff > boys_diff_girls:\n            return None\n        \n        # Go to the next potential square size\n        side += 2\n    \n    return total_students\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 1 and number % 4 == 1:\n            return number\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    num_students = 4  # Number of students\n    num_ways = factorial(num_students) # Since we are arranging all students without repetition, it's a permutation problem\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # possibilities for the second day, given chocolate on the first day: peaches (P), strawberries (S)\n    # possibilities for the third day after eating peaches: chocolate (C), strawberries (S)\n    # possibilities for the third day after eating strawberries: chocolate (C), peaches (P)\n    # Therefore, we have four combinations: CP, CS, SP, SC\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    half_value = 8 // 2\n    num_ways = half_value\n    return num_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    money_left = 160\n    fraction_table = 3 / 4\n    fraction_television = 5 / 9\n\n    money_after_tv = money_left / (1 - fraction_table)\n    full_salary = money_after_tv / (1 - fraction_television)\n    cost_television = full_salary * fraction_television\n    \n    return cost_television\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    num_people = 7\n    num_seats = 8\n\n    # The number of different orders in a circular table is given by (n-1)! \n    # because one person can be fixed and the rest (n-1) people can be arranged.\n    # As there is one empty seat, arrangements are the same as for (num_seats - 1) seats.\n    ans = factorial(num_seats - 1)\n\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, emma = symbols('john emma')\n\n    equation1 = Eq(john + emma, 27 - 3 * 2)  # After 3 years time, they would be 3 years older each\n    equation2 = Eq(emma, john - emma)\n\n    solutions = solve((equation1, equation2), (john, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    num_days_worked = 6\n\n    total_earnings = average_daily_earnings * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "def solution():\n    from math import comb\n    n = 15  # Total number of points\n    k = 3   # Number of points to form a triangle\n\n    ans = comb(n, k)\n    \n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed (km/h)\n    speed_tom = 48\n    # Jack's speed (km/h)\n    speed_jack = 50\n    # Time difference of their departure (hours)\n    time_diff = 3\n    # Time after Jack's departure when they are 15 km apart (hours)\n    time_after_jack_depart = 5\n\n    # Total distance Tom has driven when they are 15 km apart\n    distance_tom = speed_tom * (time_diff + time_after_jack_depart)\n    # Total distance Jack has driven when they are 15 km apart\n    distance_jack = speed_jack * time_after_jack_depart\n\n    # Total distance between A and B\n    distance_ab = distance_tom + distance_jack + 15  # 15 km is the remaining distance between them\n\n    return distance_ab\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    children, dogs = symbols('children dogs')\n    # Each child has 2 legs, each dog has 4 legs\n    # The total number of legs is 56 (2*children + 4*dogs = 56)\n    # There are 3 times as many dogs as children (dogs = 3*children)\n    eq1 = Eq(2 * children + 4 * dogs, 56)\n    eq2 = Eq(dogs, 3 * children)\n  \n    solutions = solve((eq1, eq2), (children, dogs))\n  \n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 3/5\n    pupils_present = 18\n\n    total_pupils = pupils_present / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)  # Using the distributive property of multiplication over addition\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # The angle corresponding to the water section in the pie chart\n    water_angle = 36\n    \n    # Each full circle is 360 degrees, so the water section corresponds to 36/360 of the pie\n    water_fraction = water_angle / 360\n    \n    # Since 1/4 chose tea and 30% (which is 3/10) chose cola, we can calculate the fraction of people choosing coffee as:\n    # 1 (whole) - 1/4 (tea) - 3/10 (cola) - water_fraction (water)\n    coffee_fraction = 1 - 1/4 - 3/10 - water_fraction\n    \n    # As 7 people chose coffee, we can calculate the total number of people surveyed by dividing the number of people choosing coffee by the fraction that represents\n    total_people = 7 / coffee_fraction\n\n    return round(total_people)\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Subtract the corners since they are counted twice when calculating length and width perimeters\n    perimeter = (2 * length + 2 * width) - (4 * distance)\n    \n    # Calculate number of trees needed\n    num_trees = perimeter // distance\n\n    return num_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36  # Katie's height in meters\n    height_cm = height_m * 100  # Convert meters to centimeters\n\n    return int(height_cm)\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax = income * tax_rate\n    final_income = income - tax\n\n    return final_income\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    num_people = 3\n    sweets_each = total_sweets // num_people\n    \n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(10, 10000):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    squash_amount_ml = 750\n    total_parts = 1 + 9\n    total_mixture_ml = squash_amount_ml * total_parts\n    bottle_capacity_ml = 1000\n\n    full_bottles = total_mixture_ml // bottle_capacity_ml\n    return int(full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # cost of the book and bag together\n    total_cost = 132\n\n    # 1 unit in Thomas' solution is actually referring to half of the remainder, not the original total\n    # so we need to calculate the cost of the book and bag based on the correct interpretation\n    one_unit_cost = total_cost / (1/2 + 1/3)\n\n    # now find the original total\n    original_total = one_unit_cost * 3  # since she spent 1/3 on a book, we multiply by 3 to find the original total\n\n    return original_total\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    # Compute the remainder using modular exponentiation\n    remainder = pow(base, exponent, divisor)\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculate each term modulo 100 to find the last two digits\n    term1 = pow(6, 2015, 100)  # Last 2 digits of 6^2015\n    term2 = (2015 * 6) % 100   # Last 2 digits of 2015 * 6\n    term3 = pow(2015, 6, 100)  # Last 2 digits of 2015^6\n\n    # Sum the last two digits of each term and get the last two digits of the sum\n    ans = (term1 + term2 + term3) % 100\n    return ans\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Define the prices for adults and children\n    adult_price = 20\n    children_price = 15\n    total_charge = 110\n\n    # Initialize the count of possible ways\n    children_count = 0\n\n    # Since there must be at least two adults, we start counting from 2 adults\n    for adults in range(2, total_charge // adult_price + 1):\n        # Calculate the remaining amount after subtracting the cost of adult tickets\n        remaining = total_charge - (adults * adult_price)\n        # If the remaining amount divided by the children ticket price is an integer,\n        # it means we found a possible combination\n        if remaining % children_price == 0:\n            children_count = remaining // children_price\n            break  # Since only the number of children is asked, we break after finding the first valid combination\n\n    return children_count\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        # B=2 and D=0 are given\n        A, F, E, C = perm\n        num1 = int(f'2{A}0{C}{E}{F}')\n        num2 = int(f'{E}{F}2{A}0{C}')\n        if 5 * num1 == 6 * num2:\n            # Convert tuple to string and then to int to get FACE\n            FACE = int(f'{F}{A}{C}{E}')\n            return FACE\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and g be the number of goats initially.\n    c, g = symbols('c g')\n\n    # 65% of the animals were cows initially.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 more animals, cows formed (65% + 20%) = 85% of the total.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Number of goats doubled.\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the total number of cookies in each box\n    # James sold 1680 cookies in the first month and kept (x - 1680)\n    # In the second month, James sold 7/20 more cookies than the first month, which is equal to 1680 + (7/20) * 1680\n    # The number of cookies kept decreased by 3/20, which means James kept (x - 1680) - (3/20) * x in the second month\n\n    # Let's calculate the number of cookies sold in the second month\n    cookies_sold_second_month = 1680 + (7/20) * 1680\n\n    # Now we can write the equation for the number of cookies kept in the second month:\n    # (x - 1680) - (3/20) * x = x - cookies_sold_second_month\n\n    # We can simplify the equation and solve for x\n    x = symbols('x')\n    equation = Eq((x - 1680) - (3/20) * x, x - cookies_sold_second_month)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the total number of cookies in the box\n    return solution[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n    total_children = jolene_position + (amy_position - 1)\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < total_height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= total_height:\n            break\n        if jumps % 2 == 0:\n            current_height -= fall_down\n            \n    return jumps\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since we have 8 factors and the first five factors are 1, 2, 4, 7, 8,\n    # the number must be a multiple of the least common multiple (LCM) of these factors.\n    num = 1 * 2 * 4 * 7 * 8\n    # Since 1, 2, 4, and 8 are multiples of 2 (which is prime),\n    # 7 is prime and all other factors are multiples of these, the LCM is 2^3 * 7 = 56.\n    lcm = 56\n\n    # The factors include 1 and the number itself. If the number has 8 factors,\n    # it can either be a perfect cube (a^3), or a product of two different primes (a*b),\n    # where a and b are primes and the factors are:\n    # 1, a, b, a^2, b^2, a*b, a^2*b, a*b^2.\n    # LCM of 1, 2, 4, 7, 8 is 56, so number could be 56 * b or 56 * b^2 where b is a prime.\n    # We need to find a prime 'b' such that 56 * b or 56 * b^2 has exactly 8 factors.\n    # We know that one of the factors must be 7 (56 = 2^3 * 7), and the number is a multiple of 56.\n    # So, the number is the LCM times another factor, which must be another prime.\n    \n    # Since the number has 8 factors, it is not a cube (a^3 has only 4 factors),\n    # so it must be in the form of a^1 * b^1, a and b being unique primes.\n    # Therefore, the number should be 56 * a prime number. \n    # Now, 56 * 7 is not the complete number. We need to find the other prime (b).\n    # b cannot be 2, 4, or 8 because they are not primes and are already prime factors of 56,\n    # so we are looking for the 6th factor which is a prime number greater than 7.\n    # Since 7 is already a factor and given as the 4th factor, the factor after 8 must be 14 (2*7).\n\n    # The number is then 56 * 14 = 784, which has eight factors: \n    # 1, 2, 4, 7, 8, 14, 28, 56, 98, 196, 392, 784\n    # 56 (factors 1, 2, 4, 7, 8, 14, 28, 56) and \n    # 14 (factors 1, 2, 7, 14), resulting in 56 * 14 = 784 having 8 unique factors.\n    \n    return 784\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    spacing = 4\n\n    # Calculating the number of sunflowers on one side, minus the corner sunflower\n    sunflowers_per_side = (side_length // spacing) - 1\n    \n    # There are 5 sides in a pentagon and 5 corner sunflowers\n    total_sunflowers = (sunflowers_per_side * 5) + 5\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    budget_pounds = 3\n    budget_pence = budget_pounds * 100  # convert pounds to pence\n    num_stamps = budget_pence // stamp_cost_pence\n    return num_stamps\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Ryan drives at his usual speed\n    t = symbols('t')\n\n    # Distance = Speed * Time\n    # Distance covered at usual speed = 45 * t\n    # Distance covered at reduced speed = 30 * (t + 2) (since he is 2 hours late)\n\n    # Since the distance is the same for both cases, we can set the two equations equal to each other\n    equation = Eq(45 * t, 30 * (t + 2))\n\n    # Solving for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    ans = 58 * 36\n    return ans\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # The sequence forms an arithmetic sequence with two pyramids\n    # The first pyramid goes from 3 to 10, and the second goes from 10 back to 3\n   \n    # Sum of the first pyramid:\n    # S = n/2 * (a1 + an)\n    # a1 is the first term, an is the last term, and n is the number of terms\n    n_first_pyramid = 10 - 3 + 1\n    sum_first_pyramid = n_first_pyramid / 2 * (3 + 10)\n    \n    # Sum of the second pyramid:\n    # We exclude the top of the pyramid since we've already counted it in the first one\n    n_second_pyramid = 10 - 3\n    sum_second_pyramid = n_second_pyramid / 2 * (3 + 10 - 1)  # Subtract 1 because we exclude 10\n\n    # Total sum of both pyramids\n    total_sum = sum_first_pyramid + sum_second_pyramid\n    return int(total_sum)\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def ways_to_split(n, max_val):\n        if n == 0:\n            return 1  # There's one way to split 0.\n        ways = 0\n        for i in range(1, min(n+1, max_val+1)):\n            ways += ways_to_split(n - i, i)\n        return ways\n\n    # Subtract 1 because the number itself is not considered a split.\n    ans = ways_to_split(5, 5) - 1\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    # Since the sequence cycles in terms of remainders when divided by 3,\n    # we find the cycle length\n    seq = [3 % 3, 10 % 3]  # Starting values\n    for i in range(2, 1997):\n        next_val = (seq[-1] + seq[-2]) % 3  # Calculate next value mod 3\n        seq.append(next_val)\n        if len(seq) >= 4 and seq[-1] == 1 and seq[-2] == 1 and seq[-3] == 0:\n            # Found the cycle (0, 1, 1), which repeats every 3 numbers\n            cycle_length = i - 2\n            break\n\n    remainder_index = (1997 - 1) % cycle_length  # Get the index at 1997th term\n    ans = seq[remainder_index]  # Get the value of that index\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_adventurers = 39\n    boat_capacity = 7\n    trip_time = 2  # minutes per trip\n\n    # It takes one trip to ferry boat_capacity people across.\n    # To bring the boat back for the next group (except the last trip), another trip is needed.\n    # So, each round trip takes 2 * trip_time minutes.\n\n    # Calculate the number of full boat trips (taking exactly boat_capacity people).\n    full_trips = total_adventurers // boat_capacity\n\n    # Calculate if there is a partial trip needed for any remaining adventurers.\n    partial_trip = total_adventurers % boat_capacity\n\n    # Total trips needed including the return trips, subtracting one as no return is needed\n    # after the last trip across: full_trips (across) + (full_trips - 1) (return) + partial_trip (if any).\n    if partial_trip > 0:\n        total_trips = full_trips + (full_trips - 1) + 1\n    else:\n        total_trips = full_trips + (full_trips - 1)\n\n    # Calculate the total time.\n    total_time = total_trips * trip_time\n\n    return total_time\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let the number of students be n and the total number of sweets be s\n    from sympy import symbols, Eq, solve\n  \n    n, s = symbols('n s')\n  \n    # If he gives each student 6 sweets, he is short of 26 sweets: 6n + 26 = s\n    # If he gives each student 5 sweets, he is short of 5 sweets: 5n + 5 = s\n    equation1 = Eq(6 * n + 26, s)\n    equation2 = Eq(5 * n + 5, s)\n  \n    # Solve the system of equations for n and s\n    solutions = solve((equation1, equation2), (n, s))\n  \n    # The answer is the total number of sweets, thus we return s\n    ans = solutions[s]\n  \n    return ans\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If the difference between neighboring trees is always 1, the trees are in an arithmetic sequence.\n    # The sum S of an arithmetic sequence with n terms is given by S = n/2 * (first_term + last_term).\n    # Since the number of trees is 8, we can rewrite the sum formula with n = 8:\n    # S = 8/2 * (first_term + last_term) -> S = 4 * (first_term + last_term).\n    # The sum of the fruits is given as 225, so we can equate this to find the last and first term:\n    # 225 = 4 * (first_term + last_term).\n    # This simplifies to (first_term + last_term) = 225 / 4 = 56.25.\n   \n    # Now, first_term and last_term are integers, so their sum must be an integer.\n    # However, 56.25 is not an integer, and therefore it is impossible for their sum to be 225.\n    # The sum of the number of fruits cannot be 225 based on the conditions given.\n    return False, \"It is not possible for the sum of the number of fruits to be 225 due to the properties of an arithmetic sequence.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n\n    return mary\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n    equation1 = Eq(white, 6 * blue)\n    equation2 = Eq(white + blue, 63)\n\n    solutions = solve((equation1, equation2), (white, blue))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')\n\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(leo + (leo - son), 70)\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "def solution():\n    from math import factorial\n    # Calculate the number of ways to arrange singing performances\n    # There are 4 singing performances (S): SSSS\n    ways_sing = factorial(4)\n\n    # Calculate the number of slots available for dancing performances\n    # There are 5 slots between and around the singing performances: _S_S_S_S_\n    slots = 5\n\n    # We need to arrange 3 dancing performances (D) in these 5 slots\n    # The number of ways to choose 3 slots out of 5 for the dancing performances\n    ways_dance_slots = factorial(slots) // (factorial(3) * factorial(slots - 3))\n\n    # Calculate the number of ways to arrange dance performances in the chosen slots\n    # The dances can be arranged in any order within the chosen slots, so 3! ways\n    ways_dance_order = factorial(3)\n\n    # Multiply the numbers together to get the total number of arrangements\n    total_ways = ways_sing * ways_dance_slots * ways_dance_order\n\n    return total_ways\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    for years_later in range(1, 100):\n        heidi_age_then = 8 + years_later\n        dad_age_then = 50 + years_later\n        if dad_age_then == 4 * heidi_age_then:\n            return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n    \n    return count_trailing_zeros(factorial(60))\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers\n    average_three_numbers = 120\n    # Sum of three numbers\n    sum_three_numbers = average_three_numbers * 3\n    \n    # New average when the fourth number is added\n    new_average = 150\n    # Sum of four numbers\n    sum_four_numbers = new_average * 4\n    \n    # The fourth number is the difference between the sum of four and three numbers\n    fourth_number = sum_four_numbers - sum_three_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    # Using simple algebra, we can isolate the variable in the box (let's call it x)\n    # x * 15 = 11 * 14 + 26\n    # To find the number that goes into the box, we simply need to solve for x.\n    x = (11 * 14 + 26) / 15\n\n    return x\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    factors_of_216 = []\n    r = 1\n    n = 216 * r\n\n    # Finding the prime factors of 216\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors_of_216.append(i)\n\n    if n > 1:\n        factors_of_216.append(n)\n\n    # Since 216 = 2^3 * 3^3, we need to factor in r such that 216*r is a square.\n    for factor in set(factors_of_216):\n        necessary_multiplicity = (factors_of_216.count(factor) + 1) // 2\n        r *= factor ** necessary_multiplicity\n\n    return r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3 / 13) * 52\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_climb = daily_climb - nightly_slip\n    days_to_climb = 9\n    final_day_climb = daily_climb\n\n    # On the last day, the snail reaches the top without slipping back down\n    # So for the remaining days, we use net_climb\n    total_climb_except_last_day = net_climb * (days_to_climb - 1)\n\n    well_depth = total_climb_except_last_day + final_day_climb\n\n    return well_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1  # Since we need the smallest possible dividend, start with the smallest non-zero divisor\n\n    # The formula for the dividend is: dividend = divisor * quotient + remainder\n    dividend = smallest_divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one bag of sweets (s) and one can of drink (d)\n    s, d = symbols('s d')\n\n    # Set up the equations based on the problem statement\n    # Rachel's purchase: 3 bags of sweets + 5 cans of drink = £4.90\n    eq1 = Eq(3 * s + 5 * d, 4.90)\n    # Rosie's purchase: 1 bag of sweets + 3 cans of drink = £2.70\n    eq2 = Eq(s + 3 * d, 2.70)\n\n    # Solve the system of equations for the cost of one bag of sweets and one can of drink\n    solutions = solve((eq1, eq2), (s, d))\n\n    # Return the cost of a bag of sweets\n    return solutions[s]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    # Total arrangements without any restrictions\n    total_arrangements = factorial(6)\n\n    # Arrangements with Teddy on the furthest left\n    arrangements_with_teddy_left = factorial(5)\n\n    # Subtracting the restricted arrangements from the total\n    result = total_arrangements - arrangements_with_teddy_left\n\n    return result\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    \n    # Find the term just before it becomes negative\n    n = 1\n    while first_term + (n - 1) * common_difference >= 0:\n        n += 1\n\n    return n - 1\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    return (4/9) * 963\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for num in range(10, 100):\n        if (num // 10 + num % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since the numbers are consecutive, their average is the sum divided by the number of terms.\n    average = 280 // 7\n    \n    # The largest number is three more than the average (since it is the fourth number after the average):\n    largest_number = average + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000 ** 2 - 990 ** 2) + (980 ** 2 - 970 ** 2) + (20 ** 2 - 10 ** 2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x and y represent the two numbers\n\n    equation1 = Eq(x + y, 49)  # The sum of the two numbers is 49\n    equation2 = Eq(x - y, 9)   # The difference of the two numbers is 9\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]  # Return the bigger number x\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    factors_of_75 = [75, 150, 225, 300, 375, 450, 525, 600, 675, 750, 825, 900]\n    \n    def has_two_equal_digits(number):\n        str_num = str(number)\n        return any(str_num.count(digit) >= 2 for digit in str_num)\n\n    max_sum = 0\n    for a in factors_of_75:\n        if a > 999:\n            break\n        if not has_two_equal_digits(a):\n            continue\n        for b in factors_of_75:\n            if b > 999 or a == b:\n                break\n            if not has_two_equal_digits(b):\n                continue\n            if a != b and has_two_equal_digits(a) and has_two_equal_digits(b):\n                max_sum = max(max_sum, a + b)\n\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum((-1)**(i%2) * (20 - i*2) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations for the magazines (M's) with one M between each storybook (S's)\n    # Number of S's is 5, thus create 4 slots between them (_S_S_S_S_S_), plus one slot at each end = 6\n    # Number of M's is 5, choose any 5 slots from these 6 to place M's\n    slots_for_m = 6\n    magazines = 5\n\n    # Ways to choose where to put M's is combinations: C(6, 5)\n    ways_to_place_m = factorial(slots_for_m) // (factorial(magazines) * factorial(slots_for_m - magazines))\n    \n    # Then, permute these magazines M within these 5 slots\n    # And permute the story books, since all are distinct\n    total_permutations = ways_to_place_m * factorial(magazines) * factorial(magazines)\n\n    return total_permutations\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    throw_back = False  # Indicates if the next throw will result in moving back\n\n    for throw in throws:\n        if throw_back:\n            position -= throw\n            throw_back = False\n        elif throw != 6:\n            position += throw\n        else:\n            throw_back = True\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Let's start with a reasonable range\n        remaining_after_music_lesson = gums - 2\n        shared_with_friends = remaining_after_music_lesson // 3\n        remaining_after_friends = remaining_after_music_lesson - shared_with_friends\n        if remaining_after_friends % 4 == 0:  # Can be eaten in equal amounts in the next 4 lessons\n            return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    # After James gives Kate x amount of money, they both should have the same amount:\n    # (kate + x) = (james - x)\n    # 2x = james - kate\n    # x = (james - kate) / 2\n    x = (james - kate) / 2\n\n    return x\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            # Check divisibility by 99 (divisible by both 9 and 11)\n            if number % 9 == 0 and number % 11 == 0:\n                return 10 * A + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total = 10 * 10\n    remaining_total = 9 * 9\n    removed_number = total - remaining_total\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # convert speed to meters per second\n    time_seconds = 300  # time in seconds\n\n    distance_meters = speed_mps * time_seconds  # distance = speed * time\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the amount each person receives when all four siblings share the money\n    x = symbols('x')\n\n    # When three brothers share the money, each receives x + 20\n    # The total money shared among the three brothers would then be 3 * (x + 20)\n    \n    # This total must be equal to the original sum of money, which is 4 * x\n    equation = Eq(3 * (x + 20), 4 * x)\n    \n    # Solving for x gives us the amount each sibling got originally\n    solution = solve(equation, x)\n    \n    # The total original sum of money is 4 times the amount each person received\n    total_money = 4 * solution[0]\n\n    return total_money\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Use the formula for the sum of cubes: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    # First, we find the sum 1+2+3+...+n for n being the number of odd terms up to 21\n    n = (21 + 1) // 2  # Since the progression is odd numbers only, there are (21+1)/2 terms\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_n = (n * (n + 1)) // 2\n\n    # Use the formula to find the sum of the cubes\n    sum_of_cubes = sum_of_n**2\n\n    return sum_of_cubes\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of red, green, and blue beads initially\n    red, green, blue = symbols('red green blue')\n    \n    # Create equations based on the problem statement\n    total_beads_left = Eq(red + green + blue, 350 + 112)\n    red_green_ratio = Eq(red, 2 * green)\n    blue_red_difference = Eq(blue, red - 50)\n    \n    # As Lauren had the same number of red, green, and blue beads initially,\n    # We create an equation stating that initially green = blue, and also red = blue (transitive property of equality)\n    initial_condition = Eq(red, blue)\n    \n    # Solve the system of equations\n    solutions = solve((total_beads_left, red_green_ratio, blue_red_difference, initial_condition), (red, green, blue))\n    \n    # Return the initial number of blue beads\n    return solutions[blue]\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Calculate the sum of those 4 numbers for each given average\n    sum1 = 4 * 36\n    sum2 = 4 * 38\n    sum3 = 4 * 39\n    sum4 = 4 * 45\n    sum5 = 4 * 49\n\n    # Calculate the total sum of all 5 numbers using the fact that each number is part of 4 of these sums\n    total_sum = (sum1 + sum2 + sum3 + sum4 + sum5) // 4\n\n    # The largest number can be found by subtracting the smallest sum from the total sum\n    largest_number = total_sum - min(sum1, sum2, sum3, sum4, sum5)\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    # 1/3 of art books is equal to 4/5 of science books\n    # So we have (1/3) * 360 = (4/5) * science_books\n    one_third_of_art_books = (1/3) * 360\n    science_books = (5/4) * one_third_of_art_books\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Katelyn and Jared's stickers\n    katelyn, jared = symbols('katelyn jared')\n    \n    # Equation based on the ratio given 2:5\n    ratio_eq = Eq(katelyn / jared, 2/5)\n    \n    # Jared has 60 more stickers than Katelyn\n    difference_eq = Eq(jared - katelyn, 60)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (katelyn, jared))\n    \n    # Calculate the total number of stickers\n    total_stickers = solutions[katelyn] + solutions[jared]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_amount = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n\n    amount_after_three_years = initial_amount * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n    \n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    ans = sum(rounded_numbers)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # 16 sausages shared among 24 people means each person gets 16/24 of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    # We need to find the number of cuts that will allow us to create pieces that are 2/3 in size.\n    # Since we want to share them equally, we look for the smallest number that is divisible by both\n    # the number of sausages (16) and the number of people (24).\n    # This is the least common multiple (LCM) of 16 and 3 (since 2/3 is the fraction each person gets).\n\n    # Now, we calculate the LCM of 16 and 3\n    from math import gcd\n    lcm = (16 * 3) // gcd(16, 3)\n\n    # The number of cuts required is one less than the number of pieces.\n    # The total number of pieces needed is the LCM divided by the fraction each person gets (2/3),\n    # because the LCM gives us the number of pieces that are 1/1 of a sausage size.\n    # We multiply by the denominator of the fraction (3) to get the total number of pieces.\n    num_pieces = lcm * 3 // 2\n    num_cuts = num_pieces - 16  # We subtract the original number of sausages because we start with 16 whole ones.\n\n    return num_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    num_chinese = 42\n    num_math = 63\n    num_nature = 28\n\n    ans = gcd(gcd(num_chinese, num_math), num_nature)\n\n    return ans\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed in m/min\n    speed_qiqi = 60\n    # Weiling's speed in m/min\n    speed_weiling = 72\n    # Weiling starts 2 minutes after Qiqi\n    start_delay_weiling = 2\n    # Weiling arrives 4 minutes before Qiqi\n    arrive_early_weiling = 4\n\n    # Let t be the time taken by Qiqi to reach school in minutes\n    # Then, Weiling took t - 2 (start delay) - 4 (arrive early) = t - 6 minutes to reach school\n\n    # The distance covered by Qiqi is equal to the distance covered by Weiling\n    # So, Qiqi's distance = Weiling's distance\n    # speed_qiqi * t = speed_weiling * (t - 6)\n\n    # Solve for t\n    t = (speed_weiling * 6) / (speed_weiling - speed_qiqi) # Rearranged the equation to solve for t\n\n    # Now calculate the distance using Qiqi's time and speed\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    eq1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    eq2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    rates = solve((eq1, eq2), (star_rate, nini_rate))\n    \n    nini_time_to_complete = 1 / rates[nini_rate]  # Time for Nini to complete the job alone\n    \n    return nini_time_to_complete\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Number of construction companies for the 900m expressway\n    companies = 4\n    # Time taken by 4 construction companies to build 900m expressway\n    time_4_companies = 5\n    # Total work done is equivalent to the product of number of companies and time\n    total_work = companies * time_4_companies\n    # Calculate how much one company can build in one day (work capacity of one company)\n    one_company_work_capacity = 900 / total_work\n    # Total length of the expressway to be built by one company\n    expressway_length = 2700\n    # Time for 1 construction company to build 2700m expressway\n    time_1_company = expressway_length / one_company_work_capacity\n    \n    return time_1_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # St. Petersburg is GMT+3 and Manchester is GMT+0, so there is a 3-hour difference\n    time_difference = timedelta(hours=3)\n    \n    # Richard meets the plane at 12 noon St. Petersburg time\n    st_petersburg_time = datetime.strptime(\"12:00\", \"%H:%M\")\n    \n    # Calculate the time the plane left Manchester by subtracting the time difference\n    manchester_departure_time = st_petersburg_time - time_difference\n    \n    return manchester_departure_time.time()\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    weight_kg = 5\n    weight_lbs = weight_kg * kg_to_lbs\n    return weight_lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Assuming Ben's answer is correct and there are 27 people in total\n    total_people = 27\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n\n    # to calculate Frank's position from the front\n    frank_position_from_front = total_people - frank_position_from_back + 1\n\n    # to calculate the number of people between Ben and Frank\n    people_between_ben_and_frank = frank_position_from_front - ben_position_from_front - 1\n\n    # verifying if there are 10 people between Ben and Frank\n    if people_between_ben_and_frank != 10:\n        # if not, find the correct number of people in the queue\n        total_people = ben_position_from_front + 10 + frank_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6\n\n    total_amount = coffee_amount * total_ratio / coffee_ratio\n\n    return total_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(102, 1000, 8):  # start from the smallest 3-digit number with remainder 2 when divided by 8\n        if num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    for i in range(1, 17):\n        if i % 2 == 0:  # even index, subtract the number\n            sum -= (2 * i)\n        else:  # odd index, add the number\n            sum += (2 * i)\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    return 72 / 100 * 140\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of marbles in the jar.\n    x = symbols('x')\n    \n    # Equation representing the marbles in the jar.\n    equation = Eq((2/5)*x + (1/3)*x + 96, x)\n    \n    # Solve the equation for x.\n    total_marbles = solve(equation, x)[0]\n    return total_marbles\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    num = 42663\n    remainder = num % 9\n    ans = (remainder ** 2) % 9\n    return ans\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    # Initialize sum\n    total_sum = 0\n    # Compute sum from 1 to 2015 times the digit '1'\n    for i in range(1, 2016):\n        total_sum += int('1' * i)\n    # Extract the last 4 digits\n    ans = total_sum % 10000\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit: 1-9 (can't be 0)\n        for tens in range(10):      # Tens digit: 0-9\n            for ones in range(10):  # Ones digit: 0-9\n                if hundreds + tens + ones == 8 and ones % 2 == 0:  # sum to 8 and even\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # As the question only asks for the unit digit, we only need to consider\n    # the unit digit of each individual term.\n    # For 13^242, the unit digit cycles every 4 powers: 3, 9, 7, 1...\n    # Since 242 % 4 == 2, the unit digit for 13^242 will be the second in the cycle: 9\n\n    # For 17^379, the unit digit also cycles every 4 powers: 7, 9, 3, 1...\n    # Since 379 % 4 == 3, the unit digit for 17^379 will be the third in the cycle: 3\n\n    # For 4^2012, the unit digit is always 6 (after the first power), because 4^2 = 16 and then it cycles with unit digit 6\n\n    # Now, calculate the unit digit of each term\n    unit_digit_13 = 9\n    unit_digit_17_times_4 = (3 * 6) % 10  # The unit digit of 17^379 * 4^2012 before addition\n\n    # Finally, calculate the unit digit of the sum\n    unit_digit_sum = (unit_digit_13 + unit_digit_17_times_4) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If there are 2 blue marbles and 2 yellow marbles,\n    # to be sure to get 2 marbles of the same colour, we\n    # have to account for the worst case scenario.\n\n    # Worst case scenario:\n    # 1. You pick 1 blue marble.\n    # 2. You pick 1 yellow marble.\n    # The next marble you pick must be of the same colour as one of\n    # the two marbles you already have (either blue or yellow).\n    \n    # So, at least 3 marbles must be taken from the bag to be\n    # sure that 2 marbles of the same colour are picked.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_age = 100  # reasonable assumption, no person is older than 100\n    for john_age in range(1, max_age):\n        mary_age = john_age - 1\n        if john_age * mary_age >= 2019:\n            break\n        for child1_age in range(1, max_age):\n            for child2_age in range(child1_age + 2, max_age, 2):\n                child3_age = child2_age + 2\n                if child1_age * child2_age * child3_age >= 2019:\n                    break\n                total_product_this_year = john_age * mary_age * child1_age * child2_age * child3_age\n                total_product_next_year = (john_age + 1) * (mary_age + 1) * (child1_age + 1) * \\\n                                          (child2_age + 1) * (child3_age + 1)\n                if total_product_this_year < 2019 and total_product_next_year > 2020:\n                    sum_ages = john_age + mary_age + child1_age + child2_age + child3_age\n                    return sum_ages\n    return None\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    term_number = 7\n\n    # nth term of an arithmetic sequence: a_n = a_1 + (n - 1)*d\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Since Mrs. Chen had 1/6 of the original sum left\n    # It means she spent 5/6 of the original sum on plates and cups\n    # Since 3/4 of the remaining money (after buying plates) was spent on cups\n    # It means 1 - 3/4 = 1/4 of the money spent (5/6 of total) was on plates\n    \n    # Let x be the original sum of money\n    # (1/4) * (5/6) * x = amount spent on plates = $36\n    # x = $36 / ((1/4) * (5/6))\n    x = 36 / ((1/4) * (5/6))\n\n    return x\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        # Extract overlapping 3-digit numbers from the permutation\n        abc = perm[0] * 100 + perm[1] * 10 + perm[2]\n        bcd = perm[1] * 100 + perm[2] * 10 + perm[3]\n        cde = perm[2] * 100 + perm[3] * 10 + perm[4]\n        defg = perm[3] * 100 + perm[4] * 10 + perm[5]\n        efg = perm[4] * 100 + perm[5] * 10 + perm[6]\n        fgh = perm[5] * 100 + perm[6] * 10 + perm[7]\n        ghi = perm[6] * 100 + perm[7] * 10 + perm[8]\n        \n        # Calculate A for the current permutation\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        # Update max_A if the current A is the largest found so far\n        if A > max_A:\n            max_A = A\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30 / 60  # 2 minutes and 30 seconds per mile\n    hours_to_minutes = 1 * 60  # 1 hour to minutes\n    miles_in_1_hour = hours_to_minutes / time_per_mile_minutes\n    return miles_in_1_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    base = 8 * 10**0  # starting with the first number 8\n\n    # keep track of the number of counted integers and current power of 10\n    count = 1\n    power = 0\n    \n    while count < 2012:\n        for i in range(10):\n            for j in range(10**power):\n                count += 1\n                if count == 2012:\n                    return base * 10**power + i * 10**power + j\n        base += 1  # move to the next base at the end of each power\n        power += 1  # increase the power of 10\n    \nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    # Let the middle number of the sequence be m\n    # The sum of a sequence of 5 consecutive numbers centered around m is 5m\n    # We solve the equation 5m = 160 to find the middle number m\n    m = total_balls // 5\n    \n    # Since m is the middle number, the largest number will be m + 2\n    max_balls = m + 2\n\n    return max_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations\n\n    # Since A needs at least 2, B needs at least 4, and C needs at least 3,\n    # we pre-fill these envelopes, leaving us with 15 - (2 + 4 + 3) = 6 envelopes to distribute\n    remaining_envelopes = 15 - (2 + 4 + 3)\n\n    # We have 4 mailboxes (A, B, C, D), and need to distribute the remaining 6 envelopes\n    # among them. This can be thought of as placing 3 (remaining + mailboxes - 1) dividers\n    # among the 6 envelopes to divide them into 4 groups.\n    # The number of ways to do this is given by the combination C(n + k - 1, k - 1)\n    # where n is the remaining number of envelopes and k is the number of mailboxes.\n    total_ways = len(list(combinations(range(remaining_envelopes + 4 - 1), 4 - 1)))\n\n    return total_ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the individual's income\n    income = symbols('income')\n\n    # Define the equation based on the tax rates and income segments\n    tax_equation = Eq(20000 * 0.15 + (income - 20000) * 0.20, 7000)\n\n    # Solve the equation to find the income\n    income_solution = solve(tax_equation, income)\n\n    return income_solution[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    remainder = 10**(2022) % 13  # Get the remainder of 10^2022 divided by 13\n    # Now cycle through repeating segment to find the 2022th digit\n    for i in range(1, 13):\n        # Multiply remainder by 10 and get new digit\n        digit = (remainder * 10) // 13\n        remainder = (remainder * 10) % 13\n        if remainder == 1:\n            return digit  # When remainder becomes 1, we found our position in the repeating cycle\n    return -1  # If we do not find it, return -1 (should never happen)\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the Greatest Common Divisor (GCD) of the three rope lengths\n    greatest_common_divisor = gcd(gcd(rope1, rope2), rope3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    \n    for chickens in range(total_animals + 1):  # chickens can range from 0 to 40\n        rabbits = total_animals - chickens     # the rest will be rabbits\n        if (2 * chickens + 4 * rabbits) == total_legs:  # each chicken has 2 legs, each rabbit has 4 legs\n            return chickens    # returns the number of chickens when the total legs match\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation = Eq(B, 3 * (A - 290))\n\n    # Since the number of chips in A and B were equal initially, we can equate A to B\n    solutions = solve((equation, Eq(A, B)), (A, B))\n\n    initial_chips = solutions[A] * 2  # Total initial packs are A + B, which is 2 * A\n\n    return initial_chips\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n\n    girls = total_students - total_boys\n    girls_packed_lunch = total_students - girls_school_lunch - boys_packed_lunch - students_home_lunch\n    \n    return girls_packed_lunch + boys_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    # Calculate the total cost of each type of chocolate\n    dark_total = 20 * 6\n    milk_total = 20 * 5\n    strawberry_total = 20 * 4\n\n    # Calculate the total cost of all chocolates\n    total_cost = dark_total + milk_total + strawberry_total\n\n    # Calculate the total number of chocolates\n    total_chocolates = 20 + 20 + 20\n\n    # Calculate the average cost per blended chocolate\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_in_first_days = 720\n    total_days_spent = 5\n    total_sets_to_make = 3600\n\n    # Calculate rate of making uniforms per day\n    rate_per_day = sets_in_first_days / total_days_spent\n\n    # Calculate total days needed to make 3600 sets\n    total_days_needed = total_sets_to_make / rate_per_day\n\n    return int(total_days_needed)\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    num = 36\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    max_number = 100\n    divisor = 12\n    ans = (max_number - 1) // divisor\n    return ans\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time in seconds\n\n    # The length of the train can be found by multiplying the speed by the time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let the total work be the capacity of the barrel, which can be 1 unit\n    # Let the man's work rate be m per day\n    # Let the wife's work rate be w per day\n\n    # According to the problem,\n    # m * 15 = 1 (The man can finish the barrel in 15 days)\n    m = 1 / 15\n\n    # (m + w) * 12 = 1 (Together they can finish in 12 days)\n    # From this, we can find w\n    w = (1 / 12) - m\n\n    # Now we need to find out how many days the wife will take to finish the barrel on her own\n    # Let the number of days the wife needs be d\n    # w * d = 1\n\n    d = 1 / w\n\n    return d\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = result\n    return int(ans)\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30\n    num_friends = 6\n    fruits_per_friend = total_fruits // num_friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    books_to_get_free_offer = 3\n    num_books_to_buy = 5\n\n    free_books = num_books_to_buy // books_to_get_free_offer\n    total_books_with_free = num_books_to_buy + free_books\n\n    books_to_pay_for = total_books_with_free - free_books\n    total_cost = books_to_pay_for * book_price\n\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of men, women, and children\n    women, men, children = symbols('women men children')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(women, 2/5*(women + men + children))  # Women are 2/5 of total people\n    equation2 = Eq(men, 3 * children)  # Men are three times the number of children\n    equation3 = Eq(women, children + 190)  # Women are 190 more than children\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (women, men, children))\n\n    # Total number of people\n    total_people = solutions[women] + solutions[men] + solutions[children]\n\n    return total_people\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the number Sam is thinking of\n    n = symbols('n')\n\n    # Equation based on the given conditions\n    equation = Eq(2 * n + 6, 3 * n - 3)\n    \n    # Solve for the number\n    sol = solve(equation, n)\n\n    return sol[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    # Let's denote the number of boys as 'b' and the number of girls as 'g'.\n    # According to the problem, the total number of students is 40.\n    # Therefore, g = 40 - b\n    \n    # The total pencils owned by boys and girls are 20*b and 60*g respectively.\n    # The average number of pencils owned by the class is 35.\n    # Therefore, the total pencils is 35*40.\n    \n    # The equation is: 20*b + 60*g = 35*40\n    # We can use this equation to solve for 'b'.\n    \n    total_students = 40\n    total_pencils = 35 * total_students\n    average_boys = 20\n    average_girls = 60\n    \n    # Substitute g with (40 - b) and solve for b. \n    # The equation becomes: 20*b + 60*(40 - b) = total_pencils\n    \n    # Solving for 'b':\n    b = (total_pencils - average_girls * total_students) / (average_boys - average_girls)\n    \n    return int(b)\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        return 0\n    else:\n        ans = 4 - remainder\n        return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    ans = total % 100  # Find the last two digits\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for price per apple and per banana\n    a, b = symbols('a b')\n    \n    # Define equations based on given conditions\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n    \n    # Solve for one variable in terms of the other\n    solutions = solve((equation1), (a, b))\n\n    # Use the relationship found to express the total cost for 8 apples and 4 bananas\n    cost = 8 * a + 4 * b\n\n    # Find the number of bananas he could buy with the same amount of money\n    num_bananas = cost / solutions[b]\n\n    return num_bananas\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from math import comb\n\ndef solution():\n    # Subtract the minimum required envelopes for A, B, and C from the total.\n    remaining_envelopes = 15 - (2 + 4 + 3)\n\n    # The number of ways to arrange remaining envelopes in 4 mailboxes\n    ways = 0\n    for envelopes_in_D in range(0, remaining_envelopes + 1):\n        ways += comb(remaining_envelopes, envelopes_in_D)\n\n    return ways\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    true_result = symbols('true_result')\n    divisor_without_decimal = 211\n    incorrect_result = true_result - 98.01\n\n    # Given the incorrect division, we setup an equation\n    # As Leo forgets to put the decimal point to 2.11 it becomes 211.\n    # correct division would be dividend = true_result * 2.11\n    # incorrect division is dividend = incorrect_result * 211\n    # both should be equal hence the equation\n    equation = Eq(true_result * 2.11, incorrect_result * 211)\n    \n    # Solve the equation\n    true_result_value = solve(equation, true_result)\n    \n    return true_result_value[0]\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using Inclusion-Exclusion Principle to find the number of students participating in both competitions\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the amount of money John and Choon Mui each had originally\n    x = symbols('x')\n    equation = Eq((x - 30), 4 * (x - 150))\n    solution = solve(equation, x)\n    money_left_for_john = solution[0] - 30\n    \n    return money_left_for_john\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # On the second day, female visitors increased by 15%\n    female_second_day = female_first_day + female_first_day * 0.15\n\n    # On the second day, male visitors decreased by 18%\n    male_second_day = male_first_day - male_first_day * 0.18\n\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    # Let's add back the 4 eggs fewer than half he sold which would give us half the eggs before the second transaction.\n    half_after_first_sale = remaining_eggs + 4\n    # Double it to find the total number of eggs before the second transaction.\n    before_second_sale = 2 * half_after_first_sale\n    # Now add back the 5 more than half he sold in the first transaction which would give us half the original number of eggs.\n    half_initial_eggs = before_second_sale + 5\n    # Double it to find the initial total number of eggs.\n    initial_number_of_eggs = 2 * half_initial_eggs\n\n    return initial_number_of_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    miles = miles_per_hour * hours\n    \n    miles_to_km = 1.60934  # 1 mile is approximately 1.60934 kilometers\n    kilometers = miles * miles_to_km\n    \n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_value = 200\n    percentage_increase = 10\n    final_value = initial_value * (1 + (percentage_increase / 100))\n    return final_value\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    real_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = real_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    one_direction_fans = 20\n    the_vamps_fans = 17\n    both_fans = 15\n\n    neither_fans = total_girls - (one_direction_fans + the_vamps_fans - both_fans)\n\n    return neither_fans\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Calculating the derangement of 4 people\n    # Formula for derangement: !n = (n - 1) * (!(n - 1) + !(n - 2))\n    # Base cases: !1 = 0, !2 = 1\n    # We'll calculate up to !4\n\n    derangement_1 = 0\n    derangement_2 = 1\n    \n    # Since we want the derangement for 4 people, calculate !3 and then !4\n    derangement_3 = (2 * derangement_2) + (3 * derangement_1)\n    derangement_4 = (3 * derangement_3) + (4 * derangement_2)\n    \n    return derangement_4\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n\n    balloons_per_pupil = total_balloons // pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    results = []\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            if dice1 + dice2 == 8:\n                results.append((dice1, dice2))\n                count += 1\n    return count, results\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    distance_per_day = day_distance + night_distance\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = principal * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 0.95 * x - (2/5) * x - 55\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    ans = solve_congruence(*congruences)\n\n    # Ensuring the solution is less than 100\n    while ans[0] >= 100:\n        ans = (ans[0] - ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # John's hourly rate\n    hourly_rate = 78 / 6.5\n    \n    # Calculate total pay for working 8 hours a day for a week (7 days)\n    weekly_pay = hourly_rate * 8 * 7\n    \n    # If weekly pay is less than the debt, John cannot pay off his debt\n    can_pay_debt = weekly_pay >= 700\n    # Reason why he can't pay off his debt\n    reason = \"Short of money\" if not can_pay_debt else \"Able to pay off the debt\"\n    \n    return reason\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Given the number puzzle A with the clue that A is a number between 1 and 9, inclusive.\n    # We know that only numbers 1 through 9 can be used without repetition.\n    # The puzzle presents us with a vertical form where digits A add up to 10 (as A is repeated three times)\n    # And we know that any single digit number repeated three times and summed up, will give a multiple of 3.\n\n    # We can solve for A by recognizing that the sum of three identical digits is a multiple of 3\n    # and also it must be in this case less than 30 (since 3*9 is the max and gives 27)\n    # and greater than or equal to 10 (since the minimum is 3*1).\n    # The only possible candidate that would satisfy A + A + A = A0 is 10 (results in 30)\n    # So we need to find such A that when summed three times equals to a number with a 0 at the end.\n    # This means that A * 3 = 10n where n is an integer and A is a single digit from 1 to 9.\n\n    for A in range(1, 10):  # Single digits only\n        if A * 3 % 10 == 0:\n            return A  # Return the value of A that satisfies the condition\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    return round(14575, -2)\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        string_number = str(number)\n        if string_number.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n\n    # Arjun's haircut cycle in days (2 weeks => 14 days)\n    arjun_cycle = 14\n\n    # Yahya's haircut cycle in days\n    yahya_cycle = 10\n    \n    # Calculate least common multiple to find the next occurrence\n    days_until_next = lcm(arjun_cycle, yahya_cycle)\n\n    return days_until_next\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Define distances and respective speeds\n    distance_1, speed_1 = 280, 7\n    distance_2, speed_2 = 400, 5\n    distance_3 = 800 - (distance_1 + distance_2)  # Remaining distance\n    speed_3 = 8\n\n    # Calculate time spent on each part of the race\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Total time spent for the race\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for d1 in range(10):\n        for d2 in range(10):\n            number = int(f\"2{d1}9{d2}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_between_trees = 7\n    # Calculate the number of intervals between trees, subtract one since trees are not planted at ends\n    num_intervals = (highway_length - distance_between_trees) // distance_between_trees\n    # Number of trees is one more than the number of intervals\n    num_trees = num_intervals + 1\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_end = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    stamps_initial = stamps_end + stamps_used - stamps_bought + stamps_given\n\n    return stamps_initial\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note = 50\n    shoe_cost = 30\n    money_lost = fake_note + shoe_cost\n\n    return money_lost\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C as a single unit since they always have to be together.\n    # There are 10 students, so now there are 10 - 3 + 1 = 8 units.\n    units = 8\n\n    # These 8 units can be arranged in 8! ways.\n    units_permutation = factorial(units)\n\n    # A, B, C can be arranged among themselves in 3! ways.\n    abc_permutation = factorial(3)\n\n    # Multiply the permutations of the units with the permutations of A, B, C.\n    total_permutations = units_permutation * abc_permutation\n\n    return total_permutations\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    number_string = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number_string[46:]\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, we need to consider the worst-case scenario where we keep picking blue balls.\n    # Since there are 6 blue balls, in the worst case, we would pick all 6 blue balls first.\n    \n    # After taking all blue balls, the next ball we take must be white, since only white balls are left in the bag.\n    # Thus, we need to take 6 (all blue balls) + 1 (one white ball) to guarantee a white ball.\n    num_balls_needed = 6 + 1\n    \n    return num_balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james_marbles = 24\n    linda_marbles = james_marbles // 2\n    ben_marbles = linda_marbles // 4\n\n    total_marbles = james_marbles + linda_marbles + ben_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    # Compute the sum of the first group of numbers\n    sum_group1 = sum(range(1, 5))\n    \n    # Compute the sum of the second group of numbers\n    sum_group2 = sum(range(2018, 2021))\n    \n    # Calculate the final result using the given expression\n    ans = sum_group1 * 1 - sum_group2 * 0\n    \n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    total_length = (ruler_length * number_of_rulers) - (overlap_length * (number_of_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time durations in hours\n    jogging_duration = 1 # from 6:30 am to 7:30 am\n    walking_duration = 2 # from 7:30 am to 9:30 am\n    \n    # Speeds in miles per hour\n    jogging_speed = 6\n    walking_speed = 5\n    \n    # Total distances\n    jogging_distance = jogging_duration * jogging_speed\n    walking_distance = walking_duration * walking_speed\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0 \n    while used_cups >= 7:\n        # make new cups from used cups\n        new_cups_from_used = used_cups // 7\n        new_cups += new_cups_from_used\n        \n        # update the count of used cups\n        used_cups = used_cups_from_used + used_cups % 7\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing = 15\n    first_cauliflower_offset = 20\n    cauliflower_width = 45  # Not actually used in calculations since they are not spaced according to their width\n\n    # Calculate the usable length after placing the first cauliflower\n    usable_length = plot_length_cm - first_cauliflower_offset \n\n    # The number of cauliflowers is the usable length divided by the spacing between them\n    num_cauliflowers = usable_length // cauliflower_spacing \n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Number of pages used in the first 3 days\n    first_three_days = 14 * 3\n    # Number of pages used in the following 2 days\n    next_two_days = 9 * 2\n    # Number of pages used on the sixth day\n    sixth_day = 12\n    # Total number of pages used\n    total_pages = first_three_days + next_two_days + sixth_day\n    # Total days\n    days = 6\n    # Average pages used per day\n    average = total_pages / days\n    \n    return average\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    # Number of students in each class\n    class_A_students = 8\n    class_B_students = 12\n    class_C_students = 20\n    \n    # Calculate the greatest common divisor (GCD) of the three classes\n    gcd_AB = gcd(class_A_students, class_B_students)\n    gcd_ABC = gcd(gcd_AB, class_C_students)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n\n    equation1 = Eq(badminton - 36, bowling - 4)\n    equation2 = Eq(badminton, 3 * bowling)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    return solutions[badminton] - 36, solutions[bowling] - 4\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # Speed of sound in meters per second\n    distance = 1.5 * 10**3  # Distance in meters\n    time = distance / speed_of_sound  # Time in seconds\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    prime_factors = {}\n    factor = 2\n    while factor * factor <= number:\n        while number % factor == 0:\n            prime_factors[factor] = prime_factors.get(factor, 0) + 1\n            number //= factor\n        factor += 1\n\n    if number > 1:\n        prime_factors[number] = 1\n    \n    ans = 1\n    for exponent in prime_factors.values():\n        ans *= (exponent + 1)\n    \n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n\n    difference = num1 - num2\n\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    \n    number_of_cards = total_value // average_value\n    greatest_number = average_value + ((number_of_cards - 1) // 2) * 6\n    smallest_number = greatest_number - 6 * (number_of_cards - 1)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # 10 years ago, Vivien was 1/4 as old as Wendy\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    return solutions[wendy] + 5\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    from sympy import factorint\n\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, 1000):\n        factors = factorint(i)\n        count_2 += factors.get(2, 0)\n        count_5 += factors.get(5, 0)\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    ans = sum(1 / i for i in range(10, 20))\n    return int(ans)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3 * x - (2 * x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys in the school\n    g, b = symbols('g b')\n\n    # Equations based on the problem statement\n    equation1 = Eq(b, g + 90)                             # There are 90 more boys than girls\n    equation2 = Eq(g + b, 1690)                           # There are 1690 pupils in total\n\n    # Calculate the number of girls and boys\n    pupils = solve((equation1, equation2), (g, b))\n    girls = pupils[g]\n    boys = pupils[b]\n\n    # Ratios and relationship for girls and boys who can swim\n    girls_swim_ratio = 31 / (31 + 49)\n    girls_cannot_swim = girls - girls * girls_swim_ratio\n\n    boys_swim_ratio = (boys + 120) / (240)              # boys_who_can_swim / boys_who_cannot_swim = (b - 120) / b\n    boys_cannot_swim = boys - (boys - 120)              # boys_cannot_swim = boys - boys_who_can_swim\n\n    # The total number of pupils who cannot swim\n    cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(cannot_swim)\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330\n    turtle_speed = 30\n    race_distance = 6990\n    sleep_duration = 215\n    lag_time = 10\n    \n    # Calculate the distance covered by both before the rabbit sleeps\n    rabbit_covered_before_sleep = rabbit_speed * lag_time\n    turtle_covered_before_sleep = turtle_speed * lag_time\n    \n    # Calculate the distance covered by the turtle during the rabbit's sleep\n    turtle_covered_during_sleep = turtle_speed * (sleep_duration + lag_time)\n    \n    # Calculate the time it takes for the rabbit to finish the race\n    time_for_rabbit_to_finish = (race_distance - rabbit_covered_before_sleep) / rabbit_speed\n    \n    # Calculate the time it takes for the turtle to finish the race\n    time_for_turtle_to_finish = (race_distance - turtle_covered_before_sleep) / turtle_speed\n\n    # Determine the winner and the distance between them at the end\n    if time_for_rabbit_to_finish + lag_time + sleep_duration < time_for_turtle_to_finish:\n        winner = 'rabbit'\n        turtle_final_cover = turtle_covered_before_sleep + (time_for_rabbit_to_finish + sleep_duration) * turtle_speed\n        distance_between = race_distance - turtle_final_cover\n    else:\n        winner = 'turtle'\n        rabbit_final_cover = rabbit_covered_before_sleep + (time_for_turtle_to_finish - lag_time) * rabbit_speed\n        distance_between = race_distance - rabbit_final_cover\n    \n    return winner, distance_between\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n    equation1 = Eq(bolt - 1656, boris)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    return solutions[bolt] + solutions[boris]\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    # Using the Inclusion-Exclusion Principle\n    total_students = (english_classes + math_classes) - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    money_2020 = 484\n    rate = 1 + (10 / 100)  # 10% increase\n    # Compound for two years to find the money in 2018\n    money_2018 = money_2020 / (rate * rate)\n    return money_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total permutations of seven people\n    total_perm = factorial(7)\n    \n    # Permutations where the three specific people stand together (treated as one)\n    together_perm = factorial(5) * factorial(3)\n    \n    # Subtract permutations where the three specific people are together from the total\n    ans = total_perm - together_perm\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # common difference\n    difference = (fourth_term - first_term) / (4 - 1)\n\n    # sum of an arithmetic series formula: n/2 * (2a + (n-1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n\n    ans = int(total_students)\n    return ans\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    n = 789\n    count = 0\n    i = 5\n    while (n // i >= 1):\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term + 1)\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    average_a = 76\n    average_b = 67\n    average_combined = 70\n    num_students_a = 20\n\n    # Calculate the total score of team A\n    total_score_a = average_a * num_students_a\n\n    # Let x be the number of students in team B\n    # (total_score_a + average_b * x) / (num_students_a + x) = average_combined\n    # Solving for x gives us the number of students in team B\n    x = symbols('x')\n    equation = Eq((total_score_a + average_b * x), average_combined * (num_students_a + x))\n    \n    num_students_b = solve(equation, x)[0]\n\n    return num_students_b\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # To ensure that the most represented school has at least 4 participants,\n    # we apply the Pigeonhole Principle by dividing the total participants by 4\n    max_schools = participants // 4\n    \n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    occurrences = 0\n\n    for hour in range(24):\n        for minute in range(60):\n            hour_str = f'{hour:02d}'\n            minute_str = f'{minute:02d}'\n            time_str = hour_str + minute_str\n            if time_str.count('4') >= 2:\n                occurrences += 1\n\n    return occurrences\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    min_product = float('inf')\n    for perm in permutations(digits, 6):\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n    \n    # All possible permutations of the numbers 1 through 9, taken 7 at a time\n    for perm in permutations(range(1, 10), 7):\n        A, B, C, D, E, F, G = perm\n        number_ABCD = A*1000 + B*100 + C*10 + D\n        number_EFG = E*100 + F*10 + G\n        # Check the sum of the 4-digit and 3-digit numbers\n        if number_ABCD + number_EFG == 1993:\n            product = number_ABCD * number_EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    # The difference between the largest and smallest product\n    return max_product - min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_dice_val = 6\n    target_position = 25\n    min_rolls = (target_position - 1) // max_dice_val + 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -50  # we are counting backwards by 50 each time\n\n    # Number of terms in an arithmetic sequence formula n = ((l - a) / d) + 1\n    # Where l is the last term, a is the first term, and d is the difference.\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    # Sum of an arithmetic sequence formula S = n/2 * (a + l)\n    sum_seq = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_seq)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit must be at least 1 for a 2-digit number\n        ones_digit = 15 - tens_digit\n        if 0 <= ones_digit <= 9:  # The ones digit must be between 0 and 9\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    return 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    distance_to_climb = 220\n    climb_per_hour = 40\n    slip_per_rest = 10\n    net_climb_per_hour = climb_per_hour - slip_per_rest\n    hours = 0\n\n    while distance_to_climb > 0:\n        hours += 1\n        distance_to_climb -= climb_per_hour\n        if distance_to_climb <= 0:\n            break\n        distance_to_climb += slip_per_rest\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(29, -1, -1):  # Start at 29 and go downwards\n        if isprime(number):  # Check if the number is prime\n            return number  # Return the number if it is prime\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    initial_typists = 5\n    words_initial = 6000\n    time_initial = 20  # minutes\n\n    words_target = 9000\n    remaining_typists = initial_typists - 2\n\n    # Find the rate of typing per typist per minute\n    rate_per_typist = (words_initial / initial_typists) / time_initial\n\n    # Calculate the time needed with the remaining typists\n    total_time_needed = words_target / (rate_per_typist * remaining_typists)\n\n    return total_time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cost_per_cabbage = 0.96\n    total_cost = 8 * cost_per_cabbage\n    number_of_lettuces = 6\n    cost_per_lettuce = total_cost / number_of_lettuces\n    return cost_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30  # total distance between the first and the last plant\n\n    # original number of intervals is total number of plants minus 1\n    original_num_intervals = 11 - 1\n\n    # new number of intervals after removing 8 plants\n    new_num_intervals = 11 - 8 - 1\n\n    # new interval distance\n    new_interval_distance = total_distance / new_num_intervals\n\n    return new_interval_distance\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time 13:52 to total minutes past midnight\n    end_time = (14 * 60) + 5     # Convert end time 14:05 to total minutes past midnight\n    duration = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Define the cost per minute\n    total_cost = cost_per_minute * duration  # Calculate the total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n    \n    ans = sum(divisors(20))\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40\n    total_amount = 320\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # For a three-digit number containing only 2s and 3s:\n    # 1. None of the three digits can be neither 2 nor 3\n    # 2. At least one 2 and one 3 must be present\n\n    # There are two cases to consider:\n    # Case 1: Two of the same digit and one different -> (2, 2, 3) or (3, 3, 2)\n    # Case 2: One of each digit -> (2, 3, 3) or (3, 2, 2)\n\n    # For case 1 (e.g., (2, 2, 3)), the different digit can be in 3 different positions\n    # (2, 2, 3), (2, 3, 2), (3, 2, 2) -> 3 ways\n    # (3, 3, 2), (3, 2, 3), (2, 3, 3) -> 3 ways\n    # Total for case 1: 3 + 3 ways\n\n    # For case 2 (having one of each), it does not apply here since we need at least two of one digit\n    \n    count_case_1 = 3 + 3\n\n    return count_case_1\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17 Oct 2023', '%d %b %Y')\n    end_date = datetime.strptime('20 Dec 2023', '%d %b %Y')\n    \n    sundays_count = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 corresponds to Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_cost = 5.50\n    ruler_cost = 7.60\n    total_cost = pen_cost + ruler_cost\n    return total_cost\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a, s = symbols('a s') # a is for apple tarts, s is for strawberry tarts\n\n    # Equation 1: The lady bought twice as many apple tarts than strawberry tarts\n    eq1 = Eq(a, 2 * s)\n\n    # Equation 2: A strawberry tart costs $0.40 more than an apple tart\n    eq2 = Eq(s * (a / 2 + 0.40), a * (a / 2))\n\n    # Equation 3: She paid a total of $40\n    eq3 = Eq(a * (a / 2) + s * (a / 2 + 0.40), 40)\n\n    # Using sympy's solve function to solve for a and s\n    solutions = solve((eq1, eq2, eq3), (a, s))\n\n    # Return the total number of tarts, sum of apple and strawberry tarts\n    return sum(solutions[a])\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import lcm\n\ndef solution():\n    first_light = 0.5  # in minutes\n    second_light = 0.75  # in minutes\n    # Convert time of 3 lights turn green together into minutes\n    together_time = 9  # in minutes\n    \n    # Calculate the least common multiple of the first two lights\n    lcm_first_second = lcm(int(first_light * 2), int(second_light * 4)) / 4\n    \n    # Now, find the third light in such a way that the LCM of all three is 9 minutes\n    # Starting from 30 seconds (0.5 minutes) because it cannot be lesser\n    third_light = 0.5\n    while True:\n        if lcm(lcm_first_second, int(third_light * 2)) / 2 == together_time:\n            return third_light * 60  # return time in seconds\n        third_light += 0.5\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    return factorial(5)\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    first_day_pieces = 0.2 * total_pieces\n    second_day_pieces = 60\n\n    # After the second day, the fitted pieces is the first day pieces + second day pieces\n    # The unfitted pieces is total_pieces - fitted pieces\n    # The ratio of the fitted to unfitted is therefore:\n    # (first_day_pieces + second_day_pieces) / (total_pieces - (first_day_pieces + second_day_pieces)) = 2 / 5\n\n    ratio = Eq((first_day_pieces + second_day_pieces) / (total_pieces - (first_day_pieces + second_day_pieces)), 2/5)\n    \n    # Solve for the total number of pieces\n    total_pieces_value = solve(ratio, total_pieces)\n\n    return total_pieces_value[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18  # From left to right\n    tony_position = 17  # From right to left\n    \n    # Calculate number of children in between Henry and Tony\n    children_between_ht = total_children - (henry_position + tony_position)\n    \n    # Add Henry and Tony themselves to count\n    ans = children_between_ht + 2\n    \n    return ans\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimeters_in_a_meter = 1000\n    meters = 2\n    return meters * millimeters_in_a_meter\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_integers = 100\n    multiple_of_10_count = 0\n\n    for i in range(1, total_integers + 1):\n        if i % 10 == 0:\n            multiple_of_10_count += 1\n    \n    not_multiple_of_10_count = total_integers - multiple_of_10_count\n    percentage_not_multiple_of_10 = (not_multiple_of_10_count / total_integers) * 100\n    \n    return percentage_not_multiple_of_10\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    amount_borrowed = 4\n    percent_paid_back = 30\n    paid_back = (amount_borrowed * percent_paid_back) / 100\n    still_owed = amount_borrowed - paid_back\n    return still_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Define the number of legs for each animal category.\n    cats_legs = 4\n    dogs_legs = 4\n    rabbit_legs = 4\n    birds_legs = 2\n\n    # Number of each category (provided in the problem).\n    num_cats = 2\n    num_dogs = 2\n    num_rabbit = 1\n\n    # Calculate the total number of legs for the cats, dogs, and rabbit.\n    total_legs_known_animals = (num_cats * cats_legs) + (num_dogs * dogs_legs) + (num_rabbit * rabbit_legs)\n\n    # Calculate the total number of legs that birds could have.\n    birds_legs_total = 28 - total_legs_known_animals\n\n    # Calculate the number of birds based on their total number of legs.\n    num_birds = birds_legs_total // birds_legs\n\n    return num_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15\n    rose_speed = 10\n    time = 10\n\n    total_distance = (jack_speed + rose_speed) * time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Nelson's original number of cards\n    nelson_original = symbols('nelson_original')\n\n    # Calculate Melvin's increases and decreases\n    melvin_original = 40\n    melvin_gain_1 = melvin_original * (5/8)\n    melvin_loss = melvin_original * (1/4)\n    melvin_gain_final = melvin_original * (1/8)\n\n    # Calculate the final number of cards for Melvin, Nelson, and Oliver\n    melvin_final = melvin_original + melvin_gain_1 - melvin_loss + melvin_gain_final\n    nelson_final = nelson_original - melvin_gain_1 - melvin_loss + melvin_gain_final\n    oliver_final = melvin_loss * 2\n\n    # Set up the equation where all three have the same number of cards after the final round\n    equation = Eq(melvin_final, nelson_final)\n    equation = Eq(melvin_final, oliver_final)\n\n    # Solve the equation for Nelson's original number of cards\n    solutions = solve((equation,), (nelson_original,))\n\n    # Calculate the total number of cards they had originally\n    total_original_cards = melvin_original + solutions[nelson_original] + 0  # Oliver starts with 0 cards\n\n    return total_original_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Generate all possible combinations where Candy chooses 2 cards\n    candy_combinations = list(combinations(cards, 2))\n    # Generate all possible combinations where Candice chooses 3 cards\n    candice_combinations = list(combinations(cards, 3))\n\n    # Map each combination to their product\n    candy_products = {prod(combo): combo for combo in candy_combinations}\n    candice_products = {prod(combo): combo for combo in candice_combinations}\n\n    # Find common products\n    common_products = set(candy_products.keys()) & set(candice_products.keys())\n\n    # Assuming there is only one solution, find the two combinations with the same product\n    for product in common_products:\n        candy_combo = set(candy_products[product])\n        candice_combo = set(candice_products[product])\n\n        # Find the number not picked by checking the symmetric difference\n        not_picked = set(cards) - candy_combo - candice_combo\n        if not_picked:\n            return not_picked.pop()\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # Loop through only odd numbers up to 24\n        if 24 % i == 0:        # Check if i is a factor of 24\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly's age be x when the sum of her children's ages equals her age.\n    # Children's ages at that time would be (x - 20), (x - 22) and (x - 24)\n    # Setting up the equation: x = (x - 20) + (x - 22) + (x - 24)\n    # Simplifying the equation: x = 3x - 66\n    # Solving for x: 2x = 66\n    # Therefore, Polly's age would be 33\n    \n    polly_age = 66 / 2\n    return polly_age\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = 2 * 5 + 1 * 5\n    part2 = (2 + 1) * 5\n    ans = part1, part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n\n    total_sweets = initial_sweets + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    presents_weight = 20\n    total_weight = 5 * presents_weight\n    suitcase_weight = total_weight - presents_weight\n    return suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(50 // 6 + 1):\n        small_boxes = (50 - 6 * big_boxes) // 4\n        if 6 * big_boxes + 4 * small_boxes == 50 and big_boxes + small_boxes < 10:\n            return big_boxes\n    return -1  # If no solution is found\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago the combined age of the 2 dogs was 10 years old.\n    combined_age_four_years_ago = 10\n    \n    # Today, the combined age would be 10 years + 4 * 2 (since there are 2 dogs and each has aged 4 years) \n    combined_age_today = combined_age_four_years_ago + 4 * 2\n    \n    # In 2 years, the combined age would be today's combined age + 2 * 2 (since each dog ages 2 years).\n    combined_age_in_two_years = combined_age_today + 2 * 2\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the larger number and y be the smaller number.\n    # Based on the problem statement, we have:\n    # x - y = 39 (1)\n    # x + y = 59 (2)\n    \n    # We can solve this system of equations to find the value of y (the smaller number).\n    \n    # Adding the two equations, we eliminate y and get:\n    # 2x = 39 + 59\n    x = (39 + 59) / 2\n    \n    # Now, using equation (2) we can find y:\n    # y = 59 - x\n    y = 59 - x\n    \n    return y\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n    \n    m_value = solve(equation, m)\n\n    return m_value[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Prime factorization of the given products\n    A_times_B = 30  # Prime factors: 2, 3, 5\n    B_times_C = 35  # Prime factors: 5, 7\n    C_times_A = 42  # Prime factors: 2, 3, 7\n\n    # Finding the prime factors each number (A, B, C) must have\n    A = (A_times_B * C_times_A) // (B_times_C)  # A must contain 2 and 3\n    B = (A_times_B * B_times_C) // (C_times_A)  # B must contain 5\n    C = (B_times_C * C_times_A) // (A_times_B)  # C must contain 7\n\n    # Taking square roots to find actual values\n    from math import isqrt\n    A = isqrt(A)\n    B = isqrt(B)\n    C = isqrt(C)\n\n    ans = A + B + C\n    return ans\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\nans = solution # Assign the function itself to \"ans\" without calling it"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15 / 100\n    total_amount = 340\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    years = symbols('years')\n    \n    # Justin's age in the future\n    justin_future_age = 8 + years\n    # Justin's mother's age in the future\n    mother_future_age = 32 + years\n    \n    # Equation to satisfy the condition\n    equation = Eq(mother_future_age, 3 * justin_future_age)\n    \n    # Solve the equation\n    years_solution = solve(equation, years)\n    \n    return years_solution[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # Equation representing the scenario after Cora gives Qingle 8 sweets\n    equation = Eq(cora - 8 + 4, qingle + 8)\n\n    # Equation representing the difference in the number of sweets they would have\n    difference_equation = Eq(qingle - cora, cora - qingle)\n\n    # Solve for Cora and Qingle's initial sweets\n    solutions = solve((equation, difference_equation), (cora, qingle))\n\n    # Calculate the difference between their amounts of sweets at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return abs(difference)\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10): # 'a' cannot be zero as it's the hundredth place\n        for b in range(10): # 'b' can be zero\n            for c in range(10): # 'c' can also be zero\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0\n    b = 0\n    \n    # The slope m can be calculated using the point (4,8)\n    m = 8 / 4\n    \n    # Now we construct the linear equation y = mx + b\n    # Since b is 0, the equation simplifies to y = mx\n    return f'y = {m}x'\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Jane and Eric\n    jane, eric = symbols('jane eric')\n    \n    # The original ratio of Jane's to Eric's seashells.\n    original_ratio = Eq(jane, 5/7 * eric)\n    \n    # After Eric gives Jane 6 seashells, the ratio changes to 11:13\n    new_ratio = Eq((jane + 6) / (eric - 6), 11/13)\n    \n    # Solve the system of equations.\n    solutions = solve((original_ratio, new_ratio), (jane, eric))\n    \n    # Calculate the total number of seashells.\n    total_seashells = solutions[jane] + solutions[eric]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n\n    while warren_addition > 0:\n        # Warren adds to the current number\n        current_number += warren_addition\n        # Keep track of the largest number\n        largest_number = max(largest_number, current_number)\n        # Naida subtracts from the current number\n        current_number -= naida_subtraction\n        \n        # Update the values for the next iteration\n        warren_addition -= 1\n        naida_subtraction += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize each number to get the prime factors and their powers\n    fact_48 = factorint(48)\n    fact_925 = factorint(925)\n    fact_38 = factorint(38)\n    fact_435 = factorint(435)\n    \n    # Merge the dictionaries containing the prime factors and add the powers\n    factors = {}\n    for fact in [fact_48, fact_925, fact_38, fact_435]:\n        for prime, power in fact.items():\n            factors[prime] = factors.get(prime, 0) + power\n            \n    # The number of zeros at the end of a product is given by the minimum of the power of 2 and 5\n    zeros = min(factors.get(2, 0), factors.get(5, 0))\n\n    return zeros\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    possible_numbers = sorted(int(\"\".join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 == 0)\n    return possible_numbers[0]\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils / 4\n\n    pupils_neither = total_pupils - (piano_pupils + violin_pupils - piano_and_violin)\n\n    return int(pupils_neither)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n\n    total_amount = principal * (1 + interest_rate * time)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "import sympy\nfrom sympy import integrate, symbols\n\ndef solution():\n    x, y = symbols('x y')\n    # The equation of the hypotenuse in terms of y is y = -x + 2\n    # The domain of integration is from 0 to 2 (for x) and from 0 to -x + 2 (for y)\n    # Integrate the density function over the area where the distance from the origin is less than 1\n    # Which is the quarter of a circle with radius 1 centered at the origin\n    area_total = integrate(integrate(1, (y, 0, -x + 2)), (x, 0, 2))\n    area_quarter_circle = sympy.pi * 1**2 / 4\n\n    probability = area_quarter_circle / area_total\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # The first digit cannot be zero\n        for D in range(1, 10):  # The last digit cannot be zero\n            if A == D * 1/4 and A != D:  # First condition\n                for B in range(1, 10):\n                    if B == A - 1 and B != A and B != D:  # Second condition\n                        C = 10 - A - B - D  # Since the sum of the digits must be 9 (multiplied by 4)\n                        if C >= 0 and C <= 9 and len({A, B, C, D}) == 4:  # Third condition and all digits are different\n                            ABCD = A * 1000 + B * 100 + C * 10 + D\n                            DCBA = D * 1000 + C * 100 + B * 10 + A\n                            if ABCD * 4 == DCBA:\n                                return ABCD\n    return None\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    # First walking time from school to bus stop\n    walk_to_bus_stop = (time_caught_bus - time_left_school).total_seconds() / 60\n    # Time when she got off the bus\n    time_off_bus = time_caught_bus + time_bus_trip\n    # Second walking time from bus drop off to home\n    walk_home = (time_got_home - time_off_bus).total_seconds() / 60\n\n    # Total walking time\n    total_walking_time = walk_to_bus_stop + walk_home\n    return total_walking_time\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    divided_by_3 = 25 - 10\n    original_number = divided_by_3 * 3\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    # Given mean value\n    mean_value = 5\n    # Given numbers in the list leaving 'a' as the unknown\n    numbers = [2, 3, 8, 4, 7, 6]\n    \n    # Sum of the given numbers\n    sum_numbers = sum(numbers)\n    \n    # Total count of numbers including 'a'\n    count_numbers = len(numbers) + 1  # +1 for the unknown 'a'\n    \n    # Using the mean formula mean = sum of numbers / count of numbers\n    # We solve for 'a' using the given mean value\n    # sum_numbers + a = mean_value * count_numbers\n    a = (mean_value * count_numbers) - sum_numbers\n    \n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    # Given: 2030452 = 2 * missing_number + 30000 + 452\n    # We can rearrange the equation to find the missing number\n    # missing_number = (2030452 - 30000 - 452) / 2\n\n    total = 2030452\n    reduce_value = 30000 + 452\n    missing_number = (total - reduce_value) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    ribbon_length_m = ribbon_length_cm / 100  # convert cm to m\n    each_piece_length_m = ribbon_length_m / 2\n    return each_piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are 3 colors\n    colors = 3\n    # Worst case scenario, Lina could get 1 sock of each color without having a pair\n    socks_without_pair = colors\n    # To make sure to get a pair, she needs to take out one more sock\n    socks_to_ensure_pair = socks_without_pair + 1\n    \n    # Answer to whether Lina is correct or not\n    is_lina_correct = socks_to_ensure_pair <= 3\n    \n    return (is_lina_correct, socks_to_ensure_pair)\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_left = 6\n    pupils_right = 7\n    pupils_total_in_row = pupils_left + pupils_right + 1  # Adding Victoria\n    rows_front = 1\n    rows_behind = 8\n    rows_total = rows_front + rows_behind + 1  # Adding Victoria's row\n    \n    ans = pupils_total_in_row * rows_total\n    return ans\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_2_tests\n    \n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the unknown number\n    number = symbols('number')\n    \n    # Create equation based on the problem description\n    equation = Eq((number + 3) / 4 * 9, 81)\n    \n    # Solve the equation\n    solutions = solve(equation, number)\n    \n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Given data points\n    distance_start = 6300  # distance from friend's house at 8.00 am\n    distance_half_hour_later = 1800  # distance from friend's house at 8.30 am\n    start_time = datetime.strptime(\"08:00\", \"%H:%M\")  # start time at 8.00 am\n\n    # Calculate the distance covered in half an hour\n    distance_covered_in_half_hour = distance_start - distance_half_hour_later\n\n    # Time to cover each meter\n    time_per_meter = timedelta(minutes=30) / distance_covered_in_half_hour\n\n    # Remaining distance to cover\n    remaining_distance = distance_half_hour_later\n\n    # Total time to reach his friend's house from 8.00 am\n    total_time_to_reach = remaining_distance * time_per_meter\n\n    # Expected arrival time\n    arrival_time = (start_time + total_time_to_reach).time()\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Mr. Smith's mixture\n    # 300mL at 50% + 600mL at 20%\n    sugar_mixture_smith = 300 * 0.50 + 600 * 0.20  # sugar in grams\n    \n    # total volume of Mr. Smith's mixture\n    total_volume_smith = 300 + 600\n\n    # sugar percentage in Mr. Smith's mixture\n    sugar_percentage_smith = sugar_mixture_smith / total_volume_smith\n\n    # Mrs. Smith's mixture\n    # 700mL at 10% sugar + 300mL at x%\n    x = symbols('x')\n    sugar_mixture_mrs_smith = 700 * 0.10 + 300 * (x / 100.0)\n\n    # total volume of Mrs. Smith's mixture\n    total_volume_mrs_smith = 700 + 300\n\n    # sugar percentage in Mrs. Smith's mixture\n    sugar_percentage_mrs_smith = sugar_mixture_mrs_smith / total_volume_mrs_smith\n\n    # setting up the equation where both percentages are equal\n    equation = Eq(sugar_percentage_smith, sugar_percentage_mrs_smith)\n\n    # solving the equation for x\n    x_value = solve(equation, x)\n\n    return round(x_value[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    \n    # Judy gives 3/4 of the candy to Lily\n    candy_given_to_lily = (3/4) * total_candy\n    remaining_candy_after_lily = total_candy - candy_given_to_lily\n    \n    # Judy gives 1/3 of the remaining candy to her brother\n    candy_given_to_brother = (1/3) * remaining_candy_after_lily\n    remaining_candy = remaining_candy_after_lily - candy_given_to_brother\n        \n    return remaining_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10  # May's age when she will be 10 years old\n    kenny_age_diff = symbols('kenny_age_diff')  # Kenny's age difference from May in the current year\n    kenny_current_age = 7 + kenny_age_diff  # Kenny's current age\n    brother_current_age = kenny_current_age - 2  # Kenny's brother's current age\n    \n    # Calculate the future ages:\n    kenny_future_age = kenny_current_age + (10 - 7)\n    brother_future_age = brother_current_age + (10 - 7)\n    \n    # According to the problem statement:\n    equation = Eq((kenny_future_age + brother_future_age), 3 * may_age_when_10)\n    \n    # Solve the equation for Kenny's age difference from May:\n    solutions = solve(equation, kenny_age_diff)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    total_weight_kg = 5\n    cost_per_kg = 10\n    weight_per_bag_kg = 0.25\n    sale_price_per_bag_p = 65\n    cost_price = total_weight_kg * cost_per_kg\n    total_bags = total_weight_kg / weight_per_bag_kg\n    total_sale_price = (sale_price_per_bag_p / 100) * total_bags\n    profit = total_sale_price - cost_price\n    percentage_profit = (profit / cost_price) * 100\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n\n    # Since each child must get at least one apple, we distribute one apple to each child first.\n    apples_distributed = children\n    remaining_apples = total_apples - apples_distributed\n\n    # Distribute the remaining apples to one child to maximize the number of apples one child gets.\n    max_apples_for_one_child = 1 + remaining_apples\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th and the 9th teeth is the same as\n    # the distance for 5 intervals (since 9 - 4 = 5).\n    # If this distance is 30 mm, then the distance for one interval is 30 / 5.\n    distance_one_interval = 30 / 5\n\n    # There are 100 teeth, meaning there are 99 intervals,\n    # since interval count is always one less than tooth count.\n    total_distance_mm = distance_one_interval * 99\n\n    # Convert the total distance from millimetres to centimetres.\n    total_distance_cm = total_distance_mm / 10\n\n    return total_distance_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_diff = 80 - 40\n\n    # Mum's age when she was 25\n    mum_age_25 = 25\n\n    # Calculate grandmother's age when mum was 25\n    grandmothers_age_when_mum_25 = mum_age_25 + age_diff\n\n    return grandmothers_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from itertools import permutations\n\n    # Total number of ways 5 people can stand in a line\n    total_ways = len(list(permutations(range(5))))\n\n    # Count the ways in which the two specific people stand next to each other\n    together_ways = 0\n    for perm in permutations(range(5)):\n        for i in range(4):\n            if abs(perm.index(0) - perm.index(1)) == 1:\n                together_ways += 1\n                break\n    \n    # Subtract the count where the two specific people stand next to each other\n    # from the total ways\n    ways_not_together = total_ways - together_ways\n\n    return ways_not_together\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend gets at least 1 ice-cream cone, we subtract 3 from the total count\n    # to account for the 1 guaranteed cone each friend will receive. This transforms the problem\n    # into a stars and bars problem with 2 bars (to create 3 sections) and 2 stars (remaining cones).\n    # The formula to calculate the number of distributions is (n + k - 1)! / (k! * (n - 1)!)\n    # where n is the remaining stars and k is the number of bars.\n    \n    from math import factorial\n    \n    remaining_cones = 5 - 3  # Subtracting 1 cone for each friend\n    bars = 3 - 1  # 3 friends, so we create 2 partitions (2 bars)\n    \n    # Calculate combinations using the formula\n    ways = factorial(remaining_cones + bars) / (factorial(bars) * factorial(remaining_cones))\n    \n    return int(ways)\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = 2/3 * total_vegetables\n    tuesday_sales = 2/5 * (total_vegetables - monday_sales)\n    total_sales = monday_sales + tuesday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # The worst case scenario would be picking the balls in such a way that we get\n    # 15 Balls of each of the first 4 colors (one less than 16)\n    # 12 Balls of the first color of the remaining color (one less than 13)\n    # At this stage, we have not satisfied the requirement to have 16 balls of one color and 13 of another.\n\n    # Let's calculate the number of balls picked so far:\n    balls_picked_so_far = (15 * 4) + 12\n\n    # Next pick would guarantee 16 balls of one color (since we already have 15 of each color)\n    # This next pick, no matter the color, will give us the 16 balls of one color.\n    balls_picked_so_far += 1\n\n    # Now we have 16 balls of one color, and at least 12 balls of the other colors.\n    # The next pick would guarantee 13 balls of another color, because we already have 12 balls\n    # of each of the four remaining colors.\n\n    # So we need one more pick to ensure 13 balls of another color:\n    balls_picked_so_far += 1\n\n    # The total count of balls picked is now:\n    return balls_picked_so_far\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total_sum = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, (855 // 5) + 1))\n    return total_sum\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits / 4  # One quarter given to sister\n    remaining = total_biscuits - given_away\n    return remaining\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let x be the amount of money Amy had at first\n    # Price per each donut and muffin\n    price_donut = 10 / 7\n    price_muffin = 6 / 3\n\n    # Setting up the system of equations\n    # She spends half of her money on donuts: 0.5x = d * price_donut\n    # The rest of her money on muffins: 0.5x = m * price_muffin\n    # 54 more donuts than muffins: d = 54 + m\n    # We want to solve for x, d (donuts) and m (muffins)\n\n    # Let's solve step-by-step\n    # Combine the equations to eliminate d using the 3rd equation\n    # 0.5x = (54 + m) * price_donut\n    # 0.5x = m * price_muffin\n\n    # Now, we can express m in terms of x and then solve for x\n    # (0.5x / price_donut) - 54 = (0.5x / price_muffin)\n    # Simplify and solve for x\n    # (0.5x / (10/7)) - 54 = (0.5x / (6/3))\n    # Multiply both sides by (10/7) and (6/3) to get rid of denominators\n    # (0.5 * 7/10 * x) - 54 * (10/7) * (6/3) = (0.5 * 3/6 * x) * (10/7)\n    # Simplify the equation further\n    # (0.5 * 7/10 * x) - 54 * 20/7 = (0.5 * 0.5 * x) * (10/7)\n    # (0.35x) - 54 * 20/7 = 0.25x * (10/7)\n    # Multiply everything by 7 to get rid of the denominator\n    # 2.45x = 54 * (20 * 7) + (0.25 * 10 * x)\n    # 2.45x = 54 * 140 + 2.5x\n    # Move all terms involving x to one side\n    # 2.45x - 2.5x = 54 * 140\n    # -0.05x = 54 * 140\n    # Divide both sides by -0.05\n    # x = (54 * 140) / -0.05\n\n    x = (54 * 140) / -0.05\n\n    return -x  # Returning the positive value of x\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    B, C, A = symbols('B C A')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (B, C, A))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the cost of one table and c be the cost of one chair\n    t, c = symbols('t c')\n\n    # Equation 1: The total cost of 2 tables and 5 chairs is £220\n    equation1 = Eq(2 * t + 5 * c, 220)\n    \n    # Equation 2: The cost of one table is the same as the cost of 3 chairs\n    equation2 = Eq(t, 3 * c)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    # Return the cost of one table\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    total_coins = joann_coins + sana_coins + nancy_coins\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    ratio_lucas_speed = 3\n    ratio_mother_speed = 5\n    total_ratio = ratio_lucas_speed + ratio_mother_speed\n    \n    distance_walked_by_lucas = (total_distance - remaining_distance) * (ratio_lucas_speed / total_ratio)\n    \n    return distance_walked_by_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    total_terms = 30\n    common_difference = -1  # Since the sequence is decreasing\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence\n    # S_n = n/2 * (first_term + last_term)\n    # Since it is an arithmetic sequence, we can find the last term by the formula\n    # last_term = first_term + (total_terms - 1) * common_difference\n    last_term = first_term + (total_terms - 1) * common_difference\n    sum_of_terms = total_terms / 2 * (first_term + last_term)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_needed_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_needed_initial / people_initial\n    pizzas_needed_final = unit_rate * people_final\n\n    return round(pizzas_needed_final)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    number_of_teams = 16\n    rounds = 0\n    \n    while number_of_teams > 1:\n        number_of_teams //= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5\n    return ans\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class_students, small_class_students = symbols('big_class_students small_class_students')\n\n    equation1 = Eq(2 * big_class_students + 2 * small_class_students, 48)  # Total apples\n    equation2 = Eq(3 * big_class_students + 2 * small_class_students, 55)  # Total oranges\n\n    solutions = solve((equation1, equation2), (big_class_students, small_class_students))\n\n    return solutions[small_class_students]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    limit = 2016\n    multiplier = 72\n\n    for i in range(1, limit + 1):\n        product = i * multiplier\n        root = math.isqrt(product)\n        if root * root == product:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n\n    total_cost = cost_per_lollipop * number_of_lollipops\n\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for current ages and the number of years in the future\n    danny_current_age, efron_current_age, years_in_future = symbols('danny_current_age efron_current_age years_in_future')\n\n    # Age relationship according to the problem\n    age_difference_eq = Eq(danny_current_age - efron_current_age, 30)\n    current_ratio_eq = Eq(danny_current_age / efron_current_age, 8 / 3)\n    future_ratio_eq = Eq((danny_current_age + years_in_future) / (efron_current_age + years_in_future), 5 / 3)\n\n    # Solve the system of equations\n    solutions = solve((age_difference_eq, current_ratio_eq, future_ratio_eq), (danny_current_age, efron_current_age, years_in_future))\n\n    # We are interested in the value of 'years_in_future'\n    return solutions[years_in_future]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating congruences based on the problem statement\n    congruences = [(0, 5), (-1, 7), (-1, 8)]\n\n    # Solve the congruence equations using the Chinese Remainder Theorem\n    lcm, remainder = solve_congruence(*congruences)\n\n    # Since we're looking for the minimum number of children,\n    # we take the smallest positive remainder that satisfies\n    # the conditions, which is the remainder itself\n    return remainder\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_per_gram_of_butter = 100 / 40\n    butter_needed_for_150_cookies = 150 / cookies_per_gram_of_butter\n    return butter_needed_for_150_cookies\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose_pencil_ruler = pencils * rulers\n    ways_to_choose_ruler_pen = rulers * pens\n    ways_to_choose_pen_pencil = pens * pencils\n\n    total_ways = ways_to_choose_pencil_ruler + ways_to_choose_ruler_pen + ways_to_choose_pen_pencil\n\n    return total_ways\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 teams and they play a single round-robin tournament\n    # In a round-robin tournament with 4 teams, each team plays 3 matches.\n    # There are 8 groups.\n    group_stage_games = 8 * (4 * 3 // 2)\n\n    # Calculate the number of games in the knockout round\n    # There are 16 teams, and they play in a single-elimination format.\n    # There will be 15 games played in the knockout round: 8 in the round of 16,\n    # 4 in the quarter-finals, 2 in the semi-finals, 1 in the final, and 1 for third place.\n    knockout_stage_games = 16 - 1\n\n    # Total number of games played throughout the World Cup\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # First digit must be between 1 and 9\n        for second_digit in range(0, 10):  # Second digit must be between 0 and 9\n            if first_digit == 2 * second_digit + 1:\n                for third_digit in range(0, 10):  # Third digit must be between 0 and 9\n                    if 10 > first_digit + second_digit + third_digit > 9:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    # equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve equations for apple and banana prices\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas\n    cost_for_5_bananas = solutions[banana] * 5\n\n    return float(cost_for_5_bananas)\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the number of teams\n    n = symbols('n')\n    \n    # The equation for the number of matches when n teams play each other once is n*(n-1)/2\n    equation = Eq(n*(n-1)/2, 15)\n\n    # Solve the equation for n\n    solutions = solve(equation, n)\n\n    # Since the number of teams cannot be negative, we take the positive solution\n    ans = max(solutions)\n    return ans\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n\n    n = 224\n    factors_dict = factorint(n)\n    num_factors = 1\n\n    for power in factors_dict.values():\n        num_factors *= (power + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    # Let the number be x.\n    # According to the problem, x - 0.3x = 210\n    # Simplifying the above equation, we get 0.7x = 210\n    # Now, we calculate x\n    x = 210 / 0.7\n    return x\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_score = 44\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        current_score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if current_score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a pair of shorts and a T-shirt\n    shorts, tshirt = symbols('shorts tshirt')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = first_term + 2 * common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel - 8)/3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    total_teams = 150 // 3\n    all_boy_teams = 27 - 15\n    all_girl_teams = all_boy_teams // 2\n\n    teams_with_girls = total_teams - all_boy_teams\n    girls_in_mixed_teams = (teams_with_girls - all_girl_teams) * 1 + all_girl_teams * 3\n    total_girls = girls_in_mixed_teams + 15 * 2\n\n    return total_girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # Multiple of 3, 5, and 7 is their least common multiple (LCM)\n    lcm = 3 * 5 * 7  # Since 3, 5, 7 are relatively prime, their LCM is their product\n    \n    # Looking for a three digit number that is a multiple of LCM and starts with 6\n    multiple = lcm\n    while multiple < 600:  # Smallest three digit number starting with 6\n        multiple += lcm\n    \n    # Now multiple is the smallest three-digit number divisible by 3, 5, and 7.\n    # But it must starts with 6\n    while str(multiple)[0] != '6':\n        multiple += lcm\n\n    return multiple\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t = number of triangles, q = number of quadrilaterals\n    t, q = symbols('t q')\n\n    # Each pentagon has 5 sides, quad 4 sides, triangle 3 sides\n    # 2 pentagons => 2 * 5 sides = 10 sides\n    # q quadrilaterals => q * 4 sides\n    # t triangles => t * 3 sides\n    # Total sides = 394, also given q = t + 82\n    \n    # Setting up the equations\n    equation1 = Eq(3 * t + 4 * q + 10, 394)  # Total sides equation\n    equation2 = Eq(q, t + 82)  # Quadrilaterals are 82 more than triangles\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert base 7 numbers to base 10\n    num1_base10 = int(str(61), 7)\n    num2_base10 = int(str(34), 7)\n    \n    # Subtract in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 7\n    if result_base10 == 0:\n        return '0'\n    base7_digits = []\n    while result_base10 > 0:\n        base7_digits.append(str(result_base10 % 7))\n        result_base10 //= 7\n    ans = ''.join(reversed(base7_digits))\n    \n    return ans\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Given that 1 dog weighs the same as 8 rabbits\n    dog_to_rabbit_ratio = 8\n    \n    # Given that 1 rabbit weighs the same as 2 chickens\n    rabbit_to_chicken_ratio = 2\n    \n    # Calculating how many chickens weigh the same as 1 dog\n    dog_to_chicken_ratio = dog_to_rabbit_ratio * rabbit_to_chicken_ratio\n    \n    return dog_to_chicken_ratio\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Number of gloves to ensure at least one matching pair (same color)\n    # We should consider the worst-case scenario following the Pigeonhole Principle\n    # 1 left-hand blue glove + 2 left-hand green gloves + 3 right-hand blue gloves\n    # In the worst case, Dilly could pull out all left-hand or all right-hand gloves without making a pair.\n    # Therefore, Dilly needs to pull out all of one side plus one more glove to ensure a matching pair.\n    \n    # Maximum number of one side gloves without matching pair\n    max_single_side = max(1 + 2, 3 + 4)\n    \n    # Add one more glove to ensure a matching pair\n    min_gloves_for_pair = max_single_side + 1\n    \n    return min_gloves_for_pair\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1\n    candies_per_student = total_candies // total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let d be the distance from Town A to B.\n    # If Ben cycles at 10 km/h, he arrives at 10 am.\n    # If he cycles at 15 km/h, he arrives at 8 am.\n    # This means that in the first case, he cycles for 2 hours more than in the second case.\n    \n    # Let t be the time it takes for Ben to travel at 15 km/h.\n    # Then the time it takes for him to travel at 10 km/h is t + 2.\n    \n    # We have the first equation for distance = speed * time:\n    # d = 10 * (t + 2)\n    # We have the second equation for distance = speed * time:\n    # d = 15 * t\n    \n    # Since both equations equal to d, they are equal to each other:\n    # 10 * (t + 2) = 15 * t\n    # Solving for t gives:\n    t = 2  # hours\n    \n    # Therefore, the distance d can be calculated by either of the first two equations:\n    d = 10 * (t + 2)\n\n    # To find the speed to arrive at 9 am:\n    # If at 10 km/h he arrives at 10 am, at unknown speed x to arrive at 9 am, he would travel for one hour less:\n    # So time to travel at this unknown speed x would be t + 1\n    time_for_x_speed = t + 1\n\n    # Using the formula distance = speed * time:\n    # d = x * (time_for_x_speed)\n    # Solving for x gives us:\n    x = d / time_for_x_speed\n\n    return x\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statements\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    # x ≡ 6 (mod 7)\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    original_price = 120\n    depreciation_rate = 0.04\n    years = 5\n    \n    value_after_years = original_price * ((1 - depreciation_rate) ** years)\n    \n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Start with an initial difference and square layer size\n    difference = 52\n    layer = 1  # Starting with the outermost layer\n\n    while True:\n        # In each iteration, we are adding 2 layers, one of boys and one of girls\n        # Boys in a layer = (2 * layer + 1)^2 - (2 * layer - 1)^2 = 8 * layer\n        # Difference is 2 * boys in a layer as girls contribute zero to the difference\n        if 8 * layer == difference:\n            total_students = (2 * layer + 1) ** 2\n            return total_students\n        layer += 1\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, yuna = symbols('eugene yuna')\n    \n    equation1 = Eq(eugene, 3 * yuna)\n    equation2 = Eq(yuna + 76, (7/9) * eugene)\n    \n    solutions = solve((equation1, equation2), (eugene, yuna))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in word}\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # A six-digit number is divisible by 9 if the sum of its digits is divisible by 9\n    # The sum of the digits 1 + 2 + 3 + 4 + 5 = 15\n    # We need to find a digit A such that (15 + A) is divisible by 9\n    # The smallest such A is 3 (since 15 + 3 = 18, which is divisible by 9)\n    # Therefore, A must be 3 to make the number divisible by 9\n\n    # Now, we need to find the remainder of the six-digit number when divided by 4\n    # Only the last two digits of a number affect the remainder when dividing by 4\n    # The last two digits of the number are \"5A\", which with A=3 becomes \"53\"\n\n    # Now calculate the remainder of 53 when divided by 4\n    remainder = 53 % 4\n\n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    number = 2 * 100 + 8 * 10 + 5\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # For Kelly to ensure her victory, she needs to make sure that she leaves\n    # a multiple of 3 for Dan to pick from.\n    # Because from any multiple of 3, if Dan picks 1, Kelly can pick 2; if Dan picks 2, Kelly can pick 1.\n    # That will still leave a multiple of 3 for Dan every time until the last match.\n\n    # To ensure her victory, Kelly needs to make the remaining number of matches after her first turn to be a multiple of 3.\n    # Total matches are 11, so if she leaves 9 (which is multiple of 3) for Dan,\n    # she needs to take away 11 - 9 = 2 matches in the first turn. \n\n    matches_taken_by_kelly = 11 % 3\n    \n    if matches_taken_by_kelly == 0:\n        # If already a multiple of 3, take 1 to avoid leaving a multiple for Dan and give control to Kelly\n        matches_taken_by_kelly = 1\n\n    return matches_taken_by_kelly\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We represent the total number of flowers as a symbol x\n    x = symbols('x')\n\n    # Half of the flowers are red, and we are told there are 6 more red than pink.\n    # Since 4/7 * (1/2 * x) = (1/2 * x) - 6, we can set up an equation to solve for x.\n    equation = Eq((4/7) * (1 - 1/2) * x, (1/2) * x - 6)\n\n    # We solve for x using the solve function\n    solution = solve(equation, x)\n\n    # The solution will be a list with a single element (the number of flowers),\n    # so we return the first element and convert it to integer.\n    return int(solution[0])\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = Fraction(5, 1) + Fraction(1, 7) + Fraction(3, 1) + Fraction(3, 11) + Fraction(1, 1) + Fraction(13, 23)\n    denominator = Fraction(3, 1) + Fraction(3, 7) + Fraction(2, 1) + Fraction(2, 11) + Fraction(1, 1) + Fraction(1, 23)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    ans = (65 + 3) / 4\n    return ans\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote cars as c and motorcycles as m\n    c, m = symbols('c m')\n\n    # Each car has 4 wheels and motorcycle has 2 wheels. Total vehicles = 27, Total wheels = 78\n    equation1 = Eq(c + m, 27)  # Equation representing the total number of vehicles.\n    equation2 = Eq(4*c + 2*m, 78)  # Equation representing the total number of wheels.\n\n    # Solving the system of equations for c (number of cars) and m (number of motorcycles)\n    solutions = solve((equation1, equation2), (c, m))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jason, nicole = symbols('jason nicole')\n\n    # Create the equations based on the given information\n    equation1 = Eq(jason + 18, nicole - 18 - 5)  # After Nicole gave Jason 18 stickers\n    equation2 = Eq(jason, 20)  # Initially, Jason had 20 stickers\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jason, nicole))\n\n    # We want the initial value of Nicole's stickers\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume (V1) = length * breadth * height\n    # New volume (V2) = (1.1 * length) * (4/5 * breadth) * (11/10 * height)\n    \n    # V2/V1 = (1.1 * length) * (4/5 * breadth) * (11/10 * height) / (length * breadth * height)\n    # V2/V1 = 1.1 * 4/5 * 11/10\n    new_volume_ratio = 1.1 * (4/5) * (11/10)\n\n    # Convert the volume ratio to percentage\n    new_volume_percentage = new_volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for i in range(39):  # i = number of 2 gram weights\n        for j in range(26):  # j = number of 3 gram weights\n            if 2 * i + 3 * j == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    race_distance_m = 5 * 1000  # Convert km to meters\n    number_of_intervals = 9 + 1  # The number of intervals is one more than the number of marshals\n    distance_between_marshals = race_distance_m / number_of_intervals\n    return distance_between_marshals\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180  # speed in meters per minute for the first part\n    time1 = 6     # time in minutes for the first part\n\n    speed2 = 120  # speed in meters per minute for the second part\n    time2 = 8     # time in minutes for the second part\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_sum = 74 * 7\n    correct_sum = incorrect_sum - (81 - 18)\n    correct_average = correct_sum / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n\n    # First year interest\n    first_year_interest = principal * rate\n    # Amount after first year\n    amount_after_first_year = principal + first_year_interest\n\n    # Second year interest (interest is on the amount after first year)\n    second_year_interest = amount_after_first_year * rate\n\n    # Total interest over two years\n    total_interest = first_year_interest + second_year_interest\n\n    # Interest earned in the second year is just the second year's interest\n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # 1 hour and 20 minutes in total minutes\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_value = 1 + (4 / 7)\n    return round(decimal_value, 1)\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014.\n    # Then Vastco sold 1.68x widgets in 2014.\n    # In 2015, Vastco's sales rose by 32%, so they sold 1.32 * 1.68x = 2.2176x widgets.\n    # In 2015, Vastco sold 44% more widgets than Megacorp, so Megacorp sold y widgets where 1.44y = 2.2176x.\n    # Simplify to find y = (2.2176 / 1.44) * x.\n    # Megacorp's percentage increase in sales from 2014 (x widgets) to 2015 (y widgets) is ((y - x) / x) * 100.\n\n    # Calculate Megacorp's sales growth rate from 2014 to 2015\n    y_over_x = 2.2176 / 1.44\n    growth_rate = (y_over_x - 1) * 100\n    \n    return growth_rate\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    index = (69 - 1) % len(recurring_sequence)  # Minus 1 for zero-indexing\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 1.5\n    actual_profit = 1.82\n\n    # On the first day\n    first_day_sold = 0.7\n    first_day_profit = first_day_sold * planned_profit\n\n    # Remaining goods after the first day\n    remaining_goods = 1 - first_day_sold\n\n    # On the second day\n    second_day_sold = remaining_goods\n\n    # The total profit for the goods sold on the two days\n    total_profit = first_day_profit + (second_day_sold * actual_profit)\n\n    # Calculating the profit rate for the second day\n    second_day_profit_rate = (actual_profit - first_day_profit) / second_day_sold\n\n    # Therefore, the discount rate on the second day is the difference between\n    # the planned profit rate and the actual profit rate for the second day\n    discount_rate = planned_profit - second_day_profit_rate\n    return discount_rate\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    red_tiles = 0\n    green_tiles = 0\n    total_tiles = 400\n\n    # Since the tiles are arranged in square layers, we find the total number of layers\n    # by taking the square root of the total number of tiles\n    total_layers = int(total_tiles**0.5)\n\n    # For each layer, starting from the outermost, we calculate the number of tiles\n    for layer in range(total_layers, 0, -2):  # we only look at every second layer\n        # Calculate the number of tiles in the current layer\n        tiles_in_layer = (layer * layer) - ((layer - 2) * (layer - 2)) if layer > 1 else 1\n        # Even number layers will be green and odd number layers will be red\n        if layer % 2 == 0:\n            green_tiles += tiles_in_layer\n        else:\n            red_tiles += tiles_in_layer\n    \n    # Determine which colour has more tiles\n    dominant_colour = 'red' if red_tiles > green_tiles else 'green'\n    tiles_more = abs(red_tiles - green_tiles)\n\n    return dominant_colour, tiles_more\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_salt = (300 * 0.35) + (200 * 0.50)  # Calculate total grams of salt\n    total_solution = 300 + 200  # Calculate total grams of the solution\n    concentration = total_salt / total_solution  # Calculate the concentration\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)  # Replace y with the actual number of sweets if needed"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the ages of the sons as S1 and S2 (S1 being the elder),\n    # and the ages of the daughters as D1 and D2 (D1 being the elder).\n    S1, S2, D1, D2 = symbols('S1 S2 D1 D2')\n\n    # Sum of the children's ages is 55.\n    eq1 = Eq(S1 + S2 + D1 + D2, 55)\n\n    # Sons were born three years apart: S1 = S2 + 3\n    eq2 = Eq(S1, S2 + 3)\n\n    # Daughters were born two years apart: D1 = D2 + 2\n    eq3 = Eq(D1, D2 + 2)\n\n    # Younger son is twice the age of the older daughter: S2 = 2 * D1\n    eq4 = Eq(S2, 2 * D1)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (S1, S2, D1, D2))\n\n    # The youngest child could be either the younger daughter or the younger son.\n    youngest_age = min(solutions[D2], solutions[S2])\n\n    return youngest_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n    while empty_bottles >= 4:\n        new_bottles, empty_bottles_left = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + empty_bottles_left\n        if empty_bottles == 3:\n            total_bottles += 1 # Borrowing one bottle\n            empty_bottles = 0\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculating the number of digits for 1-9\n    digits_1_to_9 = 9 * 1\n    \n    # Calculating the number of digits for 10-99\n    digits_10_to_99 = (99 - 10 + 1) * 2\n    \n    # Calculating the number of digits for 100-113\n    digits_100_to_113 = (113 - 100 + 1) * 3\n    \n    # Total number of digits\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n\n    # equation representing the situation\n    equation = Eq(pearls / 2 + pearls / 4 + pearls / 6 + 3, pearls)\n    \n    # solving the equation\n    original_number = solve(equation, pearls)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    # Given that 3 workers take 3 days to build a wall\n    workers = 3\n    days = 3\n\n    # The total work done is equivalent to the product of workers and days\n    total_work = workers * days\n\n    # If 1 worker were to build the same wall alone\n    workers_alone = 1\n\n    # The number of days required by 1 worker is equal to the total work divided by the number of workers\n    days_alone = total_work / workers_alone\n\n    return days_alone\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\n\ndef solution():\n    total_ways = 3 ** 4\n    ways_no_restriction = factorial(4) \n    ways_with_restriction = total_ways - 3 * ways_no_restriction\n\n    return ways_with_restriction\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)  # There are 14 more black rabbits than white rabbits\n    equation2 = Eq(grey, white - 2)    # There are 2 fewer grey rabbits than white rabbits\n    equation3 = Eq(black + white + grey, 84)  # Total number of rabbits\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    earned = 92  # Money Peter made after delivering\n    # Let's assume he delivers all glasses safely, he gets $100\n    # Now, for every glass he breaks, he loses $2 ($1 earning - $1 paying)\n    # Let's find out how many glasses he must break to end up with $92\n    # 100 (if all delivered safely) - 92 (actual amount he made) = 8\n    # 8 dollars lost, so he broke 8 / 2 = 4 glasses\n\n    broken_glasses = (total_glasses - earned) // 2\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # A round-robin competition means each team plays every other team once.\n    # If there are n teams, then the total number of games is n*(n-1)/2 (since each game involves 2 teams).\n    # Equation to solve: n*(n-1)/2 = 45 rounds\n    \n    from sympy import symbols, Eq, solve\n    \n    # Let's define n as a symbol\n    n = symbols('n')\n    \n    # Now we set up the equation and solve for n\n    equation = Eq(n*(n-1)/2, 45)\n    solutions = solve(equation, n)\n    \n    # There will be two solutions, one negative and one positive. We need the positive one as the number of teams cannot be negative.\n    for sol in solutions:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Let x be the original number thought by Mayank\n    # According to the problem, we have:\n    # 2 * x + 4 = 40\n    \n    # We now perform the inverse operations to solve for x\n    # Subtract 4 from both sides\n    # 2 * x = 40 - 4\n    \n    answer = (40 - 4) / 2\n    \n    # Finally, divide both sides by 2 to find x\n    # x = 36 / 2\n    \n    return answer\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # let's denote the number of boats initially as b, and number of people as p\n    # so we have two equations:\n    # (b - 1) * 9 = p -> equation 1\n    # (b + 1) * 6 = p -> equation 2\n    # Now we will resolve this system\n\n    from sympy import symbols, Eq, solve\n\n    b, p = symbols('b p')  # defining symbols for boats(b) and people(p)\n    equation1 = Eq((b - 1) * 9, p)  # equation 1\n    equation2 = Eq((b + 1) * 6, p)  # equation 2\n\n    solutions = solve((equation1, equation2), (b, p))  # solving for b and p\n\n    return solutions[p]  # we are interested in the total number of people\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost\n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for num in range(1, 57, 2):  # start from 1 and increment by 2 to ensure odd integers\n        if num + (num + 2) + (num + 4) == 57:  # consecutive odd integers: num, num+2, num+4\n            return num  # return the smallest integer\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    numbers = [2, 6, 1, 10, 5, 3]\n    for num in numbers:\n        if num * 3 == 6:\n            return num\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    # Initialize the counter for the number of ways\n    count = 0\n\n    # Iterate through all possible values of the first number\n    for x1 in range(3, 15):\n        # Iterate through all possible values of the second number\n        for x2 in range(3, 15 - x1):\n            # Calculate the third number\n            x3 = 15 - (x1 + x2)\n\n            # Check if the third number is also greater than or equal to 3\n            if x3 >= 3:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for John's and Peter's initial cookies\n    john, peter = symbols('john peter')\n\n    # Setting up the equations based on the description\n    equation1 = Eq(john, peter + 180) \n    # John originally had 180 more cookies than Peter\n    equation2 = Eq(john * (4/5), (peter - peter * (3/10)) / 2) \n    # After selling, John had 1/2 as many cookies as Peter left\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (john, peter))\n\n    # Returning the number of cookies John had initially\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [j for j in range(1, 37) if 36 % j == 0]\n    common = [num for num in multiples_of_4 if num in factors_of_36]\n    return common[0] if common else None\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n\n    maximum_students = gcd(pencils, pens)\n\n    return maximum_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    perm = permutations(digits)\n    min_sum = float('inf')\n    for p in perm:\n        num1 = p[0] * 10 + p[1]\n        num2 = p[2] * 10 + p[3]\n        curr_sum = num1 + num2\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_tests = 4\n    current_average = 60\n    new_test_score = 70\n\n    total_score_before_new_test = total_tests * current_average\n    total_score_after_new_test = total_score_before_new_test + new_test_score\n    new_average = total_score_after_new_test / (total_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    # Total amount of apples eaten by each type of animal\n    total_horses_apples = 6 * 20\n    total_pigs_apples = 12 * 15\n    total_rabbits_apples = 12 * 5\n\n    # Total amount of apples eaten by all animals\n    total_apples = total_horses_apples + total_pigs_apples + total_rabbits_apples\n\n    # Total number of animals on the farm\n    total_animals = 6 + 12 + 12\n\n    # Calculate the average amount of apples eaten by each animal\n    average_apples_per_animal = total_apples / total_animals\n\n    return average_apples_per_animal\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_i = str(i)\n        if int(str_i[2]) == int(str_i[0]) + int(str_i[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    discount1_threshold = 3\n    discount1_rate = 0.9\n    discount2_threshold = 5\n    discount2_rate = 0.8\n\n    # Calculate the total cost without discount\n    total_cost_without_discount = full_price_per_cup * total_cups\n\n    # Calculate the total cost with first discount\n    if total_cups >= discount1_threshold:\n        total_cost_with_discount1 = full_price_per_cup * total_cups * discount1_rate\n    else:\n        total_cost_with_discount1 = total_cost_without_discount\n\n    # Calculate the total cost with second discount\n    if total_cups >= discount2_threshold:\n        total_cost_with_discount2 = full_price_per_cup * total_cups * discount2_rate\n    else:\n        total_cost_with_discount2 = total_cost_without_discount\n\n    # Compare which discount is better\n    if total_cups >= discount2_threshold:\n        ans = min(total_cost_with_discount1, total_cost_with_discount2)\n    else:\n        ans = total_cost_with_discount1\n\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    peaches, students_b = symbols('peaches students_b')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(peaches, 5 * (students_b + 3) + 10)\n    equation2 = Eq(peaches, 8 * students_b + 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (peaches, students_b))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount of money Jayden had left\n    # Then 3x is the amount of money Benson had left\n    # Benson spent $74, so Benson initially had 74 + 3x dollars\n    # Jayden spent $120, so Jayden initially had 120 + x dollars\n    # The sum of their initial amounts was $590\n    # Therefore, (74 + 3x) + (120 + x) = 590\n    # Simplifying the equation: 4x + 194 = 590\n    # Solving for x we get: 4x = 590 - 194\n    # So x = (590 - 194) / 4\n    \n    # Calculate Jayden's money left\n    x = (590 - 74 - 120) / 4\n    \n    return x\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five = str(S)[-5:]\n    ans = sum(int(digit) for digit in last_five)\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n\n    water_litres = total_orange_drink * fraction_water\n\n    return water_litres\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (7 * 9) % 10  # Multiply the units digits and find the new units digit.\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for n in range(1, 380):\n        if n * n + n == 380:\n            return n\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n\n    total_volume = 300\n    raspberry_juice_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_juice_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time difference in minutes between Betty leaving and Kevin\n    betty_speed, kevin_speed, t = symbols('betty_speed kevin_speed t')\n\n    # Given conditions\n    # Betty arrives at the store in 6 minutes\n    # Kevin has walked 150 meters when Betty arrives at the store\n    # After another 3 minutes, Kevin arrives at the store and Betty is 900 meters away from the cinema\n    equation1 = Eq(betty_speed * 6, kevin_speed * (t + 6))\n    equation2 = Eq(kevin_speed * 150, betty_speed * (t + 6 - 3))\n    equation3 = Eq(betty_speed * (t + 6 + 3), 900)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (betty_speed, kevin_speed, t))\n\n    return solutions[t]\n\nans = solution()"
    ]
}