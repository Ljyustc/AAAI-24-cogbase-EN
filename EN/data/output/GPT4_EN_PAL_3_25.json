{
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remainder_after_bag = 90 / 0.6\n    initial_money = remainder_after_bag / (1 - 0.2)\n\n    return initial_money\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15  # upper range of the sequence\n    m = 4   # lower range of the sequence, starting from 5 so we subtract the first four squares\n\n    # Formula for the sum of squares from 1 to n\n    def sum_of_squares(k):\n        return (k * (k + 1) * (2 * k + 1)) // 6\n\n    # Calculate the sum of squares from 1 to n and subtract sum of squares from 1 to m-1\n    ans = sum_of_squares(n) - sum_of_squares(m - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = \"9:00\"\n    end_time = \"10:00\"\n\n    start_hours, start_minutes = map(int, start_time.split(':'))\n    end_hours, end_minutes = map(int, end_time.split(':'))\n    \n    duration_hours = end_hours - start_hours\n    duration_minutes = end_minutes - start_minutes\n    \n    total_duration = duration_hours * 60 + duration_minutes\n    \n    return total_duration\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Assume the original square side length is n, then there are n^2 students, with 5 surplus.\n    # After adding one row and one column, the square side length is n+1, and there are (n+1)^2 students.\n    for n in range(1, 100):  # Using an arbitrary range to find a reasonable solution\n        if (n ** 2) + 5 + 26 == ((n + 1) ** 2):\n            return (n ** 2) + 5\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    \n    chemistry_students = total_students - (physics_students + biology_students)\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n\n    amy_final = john + 4  # Amy has 4 more apples than John after giving some away\n\n    apples_to_give = amy - amy_final  # The number of apples Amy gives to John\n\n    return apples_to_give\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n\n    # Let's find the cost for which there was a profit\n    cost_with_profit = sale_price / 1.1  # Since profit was 10%\n\n    # Let's find the cost for which there was a loss\n    cost_with_loss = sale_price / 0.9  # Since loss was 10%\n\n    # The overall result is the sum of the selling prices minus the sum of the costs\n    overall_result = (2 * sale_price) - (cost_with_profit + cost_with_loss)\n\n    return overall_result\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + (3 * jane_saved)\n    return ali_saved\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of plants to arrange in a row\n\n    # The number of arrangements (permutations) of 'r' items from 'n' is given by n! / (n-r)!\n    arrangements = factorial(n) // factorial(n - r)\n    return arrangements\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To guarantee a win Fred needs to leave a number of oranges that is a multiple of 4 for George\n    # In this way, no matter how many oranges George takes (1, 2, or 3), Fred can always take the remaining\n    # oranges to leave a multiple of 4 until finally, George is forced to take the last oranges.\n\n    # Total of 15 oranges and we want to leave a multiple of 4 for best strategy.\n    # 15 - (1, 2, or 3) to find a multiple of 4.\n    # Find such number 'x' such that 15 - x is a multiple of 4.\n    \n    for x in range(1, 4):\n        if (15 - x) % 4 == 0:\n            return x\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n    \n    # Combinations with dress and shoes\n    dress_shoes_combinations = dresses * shoes\n    \n    # Combinations with dress and heels\n    dress_heels_combinations = dresses * heels\n    \n    # Total combinations\n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n\n    solution = solve(equation, tom_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = '3/20' if fraction_value > decimal_value else '0.16'\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # There are 5 positions, and A can be in positions 1 through 5\n    for A_pos in range(1, 6):\n        # B can be in any position to the left of A\n        for B_pos in range(1, A_pos):\n            # C can be in any position to the right of A\n            for C_pos in range(A_pos + 1, 6):\n                # D and E can be in any of the remaining positions\n                remaining_positions = [1, 2, 3, 4, 5]\n                # remove A, B and C positions\n                remaining_positions.remove(A_pos)\n                remaining_positions.remove(B_pos)\n                remaining_positions.remove(C_pos)\n                # There are 2! ways to arrange D and E in the remaining positions\n                count += 2\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara jogs from 6:30 AM to 8:30 AM, i.e., for 2 hours at a speed of 8 km/hr\n    jogging_distance = 2 * 8  # time * speed\n    \n    # Sara walks from 8:30 AM to 9:30 AM, i.e., for 1 hour at half her jogging speed\n    walking_speed = 8 / 2  # half of jogging speed\n    walking_distance = 1 * walking_speed  # time * speed\n    \n    # Total distance travelled during her exercise is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let x be the number of each type of note\n    total = 280\n    # 5x + 10x + 20x = total\n    # 35x = total\n    # x = total / 35\n    x = total / 35\n    # Total number of notes is 3x\n    return int(3 * x)\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    # Only 10 possibilities for the first digit (1-9, cannot be 0)\n    # and 10 possibilities for the second digit (0-9)\n    # The last digit must be the same as the first digit, so no choice there\n    for first_digit in range(1, 10):\n        for second_digit in range(10):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number is only affected by the last digit of its factors\n    last_digit_2 = 2 ** 100 % 10  # Last digit for 2 raised to 100\n    last_digit_7 = 7 ** 100 % 10  # Last digit for 7 raised to 100\n    last_digit_9 = 9 ** 100 % 10  # Last digit for 9 raised to 100\n\n    # Multiply last digits and take the last digit of the result\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    # Starting from the smallest prime (2), check subsequent numbers\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "import math\n\ndef solution():\n    students = 92\n    minibus_capacity = 6\n\n    minibusses_needed = math.ceil(students / minibus_capacity)\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 // 2) + 1 # number of terms in the sequence 1^2, 3^2, ..., 19^2\n    ans = (1 / 6) * n * (n + 1) * (2 * n + 1) # using the formula for the sum of squares 1^2 + 2^2 + ... + n^2\n    return int(ans)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_floors = 4 - 1  # Floors from the first to the fourth\n    single_floor_time = 12 / total_floors  # Time to climb one floor\n    return single_floor_time\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Approach: We're finding the smallest maximum, so we start by dividing the marbles as evenly as possible.\n    # Then we adjust the piles by moving marbles from larger piles to smaller ones while keeping them all different.\n\n    # Set the initial distribution closest to even with distinct piles\n    piles = [1, 2, 3, 4]  # 1+2+3+4 = 10 marbles, we need 16, so 6 marbles are left\n\n    # Distribute the remaining marbles starting from the smallest pile\n    remaining_marbles = 16 - sum(piles)\n    while remaining_marbles > 0:\n        for i in range(len(piles)):\n            if remaining_marbles > 0:\n                piles[i] += 1\n                remaining_marbles -= 1\n\n    # The largest pile after distribution:\n    ans = max(piles)\n    return ans\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 * 25 / 100\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 12345679 * 63\n    return ans\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    result = 0\n    for i in range(1, 2008):\n        result += (i**2 + (i+1)**2) / (i * (i+1))\n    \n    ans = round(result)\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls\n    # The total height of the girls should have been 163 * n\n    # But it was mistakenly calculated as 159 * n because of the wrong recording\n    # The difference between 162 and 126 (the correct and incorrect heights) affected the average\n    # So, (163 * n) - (159 * n) = 162 - 126\n    # We solve for n\n\n    average_actual = 163\n    average_incorrect = 159\n    height_incorrect = 126\n    height_correct = 162\n\n    difference_in_heights = height_correct - height_incorrect\n\n    # Average difference per girl is the change in total height divided by the number of girls\n    average_difference = (average_actual - average_incorrect)\n\n    n = difference_in_heights / average_difference\n\n    return int(n)\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = 1.5 * 1.3333333333333333 * 1.25 * 1.2 * 1.1666666666666667 * 1.1428571428571428 * 1.125 * 1.1111111111111112\n    return result\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = op(1, 2)\n    for i in range(3, 201):\n        ans = op(ans, i)\n        \n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Using the formula for the sum of cubes of first n natural numbers: \n    # 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)² \n    # Since we're only considering odd numbers, we calculate the number of terms\n    # The sequence of odd cubes from 1 to 13 is 7 terms (1, 3, 5, 7, 9, 11, 13)\n    n = (13 + 1) // 2  # [1, 13] has 7 odd terms\n\n    # Using the formula for the sum of first n natural numbers: S_n = n(n + 1) / 2\n    S_n = n * (n + 1) // 2\n    \n    # The sum of the sequence is the square of S_n (but only for the odd terms)\n    ans = S_n ** 2\n    return ans\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    return number + 10000\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Beth's and Ken's seashells\n    beth = symbols('beth')\n    ken = beth + 75\n\n    # Write down the equation\n    equation = Eq((4/5) * beth, (2/5) * ken)\n\n    # Solve the equation\n    solution = solve(equation, beth)\n\n    # Get the number of seashells for Beth and Ken\n    beth_seashells = solution[0]\n    ken_seashells = beth_seashells + 75\n\n    # Calculate the total number of seashells\n    total_seashells = beth_seashells + ken_seashells\n    return total_seashells\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ribbons\n    ribbon_lengths = [56, 42, 84]\n\n    # Function to find the Greatest Common Divisor of multiple numbers\n    def find_gcd(numbers):\n        x = numbers[0]\n        for num in numbers[1:]:\n            x = gcd(x, num)\n        return x\n\n    # Find the greatest possible length of each portion\n    ans = find_gcd(ribbon_lengths)\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, int(50 ** (1/3)) + 1):  # Calculate the cube root up to 50\n        cube = cube_root ** 3\n        square = cube - 2\n        if (int(square ** 0.5)) ** 2 == square:  # Check if it's a perfect square\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_dollar_notes, ten_dollar_notes = symbols('two_dollar_notes ten_dollar_notes')\n\n    # Equation 1: Total number of notes\n    equation1 = Eq(two_dollar_notes + ten_dollar_notes, 40)\n\n    # Equation 2: Number of $10 notes after spending\n    equation2 = Eq((1 - 0.40) * ten_dollar_notes, 4/5 * (1 - 0.25) * two_dollar_notes)\n\n    # Solving the equations to find the number of $2 and $10 notes originally\n    solutions = solve((equation1, equation2), (two_dollar_notes, ten_dollar_notes))\n\n    two_dollar_notes = solutions[two_dollar_notes]\n    ten_dollar_notes = solutions[ten_dollar_notes]\n\n    # Calculating the amount spent\n    spent_on_gift = 0.40 * ten_dollar_notes * 10 + 0.25 * two_dollar_notes * 2\n\n    return spent_on_gift\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from itertools import combinations\n\ndef solution():\n    # Since each kid gets at least two oranges, we subtract 6 oranges (2 oranges for each kid)\n    # Now we need to distribute the remaining 7 oranges to 3 kids\n    remaining_oranges = 13 - 6  # 3 kids x 2 oranges = 6 oranges\n    kids = 3\n\n    # We use stars and bars technique to divide the oranges,\n    # where remaining_oranges are stars and kids-1 are bars\n    bars = kids - 1\n\n    # The total number of stars and bars\n    total = remaining_oranges + bars\n\n    # We choose the positions of bars, that will give us a way to divide oranges\n    count_ways = len(list(combinations(range(total), bars)))\n\n    return count_ways\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # The sum of two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # When adding the numbers together, shifting the decimal point by one position to the left in one of the numbers\n    equation2 = Eq(x + y / 10, 5.87)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Difference between the two original numbers multiplied by 100\n    difference = abs(solutions[x] - solutions[y]) * 100\n    \n    return difference\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Observation: Each term in the product sequence is of the form (1 + 1/2^k).\n    # We know that (1 - 1/2^n) is the final term given by the sequence.\n    # Thus, the last term in the sequence of products will be (1 + 1/2^k) where k = 2^2009.\n    \n    # Each term in the product adds a new power of 2 to the denominator.\n    # The product sequence adds all powers of 2 up to 2^(2^2009).\n    \n    # So we have that (1 - 1/2^n) must include all of these powers.\n    # The value of n is such that 1/2^n is the smallest term we subtract from 1 to cover all terms,\n    # which must be 1/2^(2^2009), since this is the last and smallest term in the product.\n\n    n = 2**2009\n  \n    return n\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    bill, son, father = symbols('bill son father')\n    \n    # Equations based on the problem description\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for i in range(100,1000):\n      if i % 7 == 1 and i % 9 == 5:\n          return i\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # The first digit cannot be zero in a 4-digit number\n            continue\n        paso = p*1000 + a*100 + s*10 + o\n        if a == 0 or s == 0 or o == 0:  # We ensure that all the letters are different digits\n            continue\n        ospa = o*1000 + s*100 + p*10 + a\n        if paso == 4 * ospa:\n            return paso\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Sally's age now = s\n    # John's age now = j\n    s, j = symbols('s j')\n    \n    # Sally's age in 3 years = s + 3\n    # John's age in 3 years = j + 3\n    \n    # Equations based on the problem statement\n    equation1 = Eq((s + 3), 6 * (j + 3)) # In 3 years, Sally is 6 times older than John\n    equation2 = Eq(s + j, 50)            # Their total age now is 50\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, j))\n\n    # Get Sally's current age\n    return solutions[s]\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_time = 15\n    together_time = 12\n\n    man_rate = 1 / man_time\n    together_rate = 1 / together_time\n\n    wife_rate = together_rate - man_rate\n    wife_time = 1 / wife_rate\n    \n    return wife_time\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The counts of beans peeled each hour forms an arithmetic sequence\n    # The common difference (increment) can be calculated\n    common_difference = (28 - 20)\n\n    # Calculate the number of beans peeled from 9 o'clock to 10 o'clock\n    beans_peeled_first_hour = 20 - common_difference\n\n    return beans_peeled_first_hour\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    count = 0\n    for white_left in range(3, 9):  # Remaining white balls in bag\n        for red_left in range(2, 5+1):  # Remaining red balls in bag\n            for black_left in range(0, 3+1):  # Remaining black balls in bag\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n\n                # Total balls picked should be 10\n                if white_picked + red_picked + black_picked == 10:\n                    count += comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n    return count\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Starting with 3 questions on Monday\n    # Arithmetic sequence where a = 3 (first term), d = 3 (common difference)\n    first_term = 3\n    common_difference = 3\n    \n    # Calculate the number of questions each day\n    # 1st day: 3, 2nd day: 6, 3rd day: 9, ..., 7th day (Day = n)\n    # Arithmetic sequence formula for nth term: a_n = a + (n-1)d\n    # Calculate the number of questions on the 7th day (Sunday)\n    seventh_term = first_term + (7 - 1) * common_difference\n    \n    # Sum of arithmetic sequence from the first term to the nth term: S_n = n/2 * (a + a_n)\n    total_questions = 7 / 2 * (first_term + seventh_term)\n    \n    return int(total_questions)\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return 2**10 % 3\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls_total = symbols('pearls_total')\n\n    equation = Eq(pearls_total / 2 + pearls_total / 4 + pearls_total / 6 + 3, pearls_total)\n\n    solutions = solve(equation, pearls_total)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    \n    times_smaller = snake_length_cm / insect_length_cm\n    \n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        term = (n**2 + n + 2) // 2\n        if term >= 100:\n            break\n        n += 1\n    return (n-1)**2 + (n-1) + 2 // 2\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    initial_mean = 120\n    new_mean = 150\n    initial_sum = initial_mean * 3\n    new_sum = new_mean * 4\n    fourth_number = new_sum - initial_sum\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away_mass = 0.76\n    remaining_mass = initial_mass - given_away_mass\n    ans = round(remaining_mass, 1)\n    return ans\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The problem can be represented by the following modular equations:\n    # Let x be the first even number which is a multiple of 7\n    # x ≡ 0 (mod 7)\n    # x + 2 ≡ 0 (mod 8)\n    # x + 4 ≡ 0 (mod 9)\n    # Now we just need to solve this system of congruences\n    # The +2 and +4 on the following line adjusts the congruence to account for the second and third numbers\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x, lcm = solve_congruence(*congruences)\n    # Calculate the sum of the three numbers\n    sum_of_numbers = x + (x + 2) + (x + 4)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from front.\n    # Bud is 6th from back.\n    # There are 5 children between Pip and Bud.\n    # So, counting from the front including Pip to Bud would be 6 (Pip's position) + 5 (children in between) + 1 (Bud himself)\n    count_from_front_to_bud = 6 + 5 + 1\n    # Bud being the 6th from the end means there are 5 children behind him.\n    # We now count these children to find the total number of children in the queue.\n    total_children_in_queue = count_from_front_to_bud + 5\n    \n    return total_children_in_queue\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)\n    rows = 25\n\n    last_term = first_term + (rows - 1) * difference\n    total_athletes = (first_term + last_term) * rows // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 29 * 6\n    total_parents_age = total_family_age - 64\n    average_parents_age_3_years_ago = (total_parents_age - 3 * 2) / 2\n    return average_parents_age_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    total_paintings_needed = 56\n\n    paintings_per_day = total_paintings_done / days_taken\n    remaining_paintings = total_paintings_needed - total_paintings_done\n    additional_days_needed = remaining_paintings / paintings_per_day\n\n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    multiplier = total_sum // 3\n    return multiplier\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    num_papers = 18\n    interval = 3\n    # The number of leaves inserted is equal to the number of intervals\n    # between the papers, which is one less than the number of papers.\n    num_leaves = (num_papers - 1) // interval\n\n    return num_leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    n1 = 5\n    n2 = 12\n    a5 = 8\n    a12 = 50\n\n    common_diff = (a12 - a5) / (n2 - n1)\n\n    return common_diff\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Using the distributive property of multiplication over addition\n    # a(b + c + d) = ab + ac + ad\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    from itertools import permutations\n\n    # Initialize the time for each person to cross the river\n    times = [7, 9, 4, 10]\n    shortest_time = float('inf') # Start with the maximum possible time\n\n    # Generate all possible permutations for crossing the river\n    for perm in permutations(times):\n        # Each permutation is a tuple of times, representing the order in which people will cross\n        time_first_trip = perm[0] + perm[1] # First trip, two fastest go together\n        time_return_trip1 = perm[0] # One of them returns\n        time_second_trip = perm[2] + perm[3] # Two slowest go together\n        time_return_trip2 = perm[1] # Faster of the initial two returns\n        total_time = time_first_trip + time_return_trip1 + time_second_trip + time_return_trip2\n\n        # Keep the shortest time\n        shortest_time = min(shortest_time, total_time)\n\n    return shortest_time\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.1, 0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Pip, Bud, and Bob's weights as p, b, and bo respectively.\n    p, b, bo = symbols('p b bo')\n\n    # Write the equations based on the average weights given.\n    equation1 = Eq((p + b) / 2, 30)\n    equation2 = Eq((p + bo) / 2, 33)\n    equation3 = Eq((b + bo) / 2, 36)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (p, b, bo))\n\n    # The weight of Pip is represented by 'p' in our solutions.\n    return solutions[p]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return sum([29, 37, 76, 63, 24, 45, 61, 55])\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    a = 2     # first term\n    d = 3     # common difference\n    n = (242 - a) // d + 1  # number of terms\n\n    while n > 3:\n        sum_first_three = a + (a + d) + (a + 2*d)  # sum of the first three terms\n        a += 3*d  # update the first term after erasing the previous first three terms\n        n -= 3  # update the number of terms\n        a = sum_first_three  # write down the sum at the end of the sequence\n\n    # Since we only have three numbers left, the second number is simply the first number plus the common difference\n    ans = a + d\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    # Jacob is one child, plus he has 4 sisters and 3 brothers.\n    ans = 1 + 4 + 3\n    return ans\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    work_per_person = initial_days / initial_people\n    total_work = work_per_person * initial_people\n\n    people_needed = total_work / target_days\n\n    additional_people = people_needed - initial_people\n\n    return int(additional_people) if additional_people == int(additional_people) else int(additional_people) + 1\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_depreciation = 0.6957\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    ans = round(final_value, 2)\n    return ans\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    product = 1.25 * 88\n    return product\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3\n    rate_of_rise_per_hour = 2\n    time_difference = 10.5 - 5  # Time from 5:00 am to 10:30 am in hours\n\n    temperature_increase = rate_of_rise_per_hour * time_difference\n    temperature_at_1030_am = initial_temperature + temperature_increase\n\n    return temperature_at_1030_am\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let's denote the number of students originally in school A as 'a'\n    # Hence, the number of students in school B would be '1050 - a'\n    # According to the problem, after transferring 20 students from A to B:\n    # School A has 'a - 20' students\n    # School B has '1050 - a + 20' students\n    # Additionally, school A still has 10 more students than school B, which gives us the equation:\n    # a - 20 = (1050 - a + 20) + 10\n\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for the original number of students in school A\n    a = symbols('a')\n\n    # Setting up the equation\n    equation = Eq(a - 20, (1050 - a + 20) + 10)\n\n    # Solving the equation\n    num_students_a_original = solve(equation, a)\n\n    # Return the value (as we expect one solution for this linear equation)\n    return num_students_a_original[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Convert minutes to seconds for convenience\n    normal_time = 30 * 60  # 30 minutes\n    late_time = normal_time + 5 * 60  # 5 minutes late\n    \n    # Distance run during rainy period\n    rain_distance = 2400  # in meters\n    \n    # Let x be the normal speed (m/s)\n    # Reduced speed will be 0.8x because of 20% reduction\n    # Total distance is the sum of distance covered in the first period and rain_distance\n    # First period time is t1, and the time during the rain is rain_distance / (0.8x)\n    # The total time should be equal to late_time\n    # Equation: t1 + rain_distance / (0.8x) = late_time\n    # t1 can be expressed as (normal_time - rain_distance / (0.8x)),\n    # because t1 is the part of time when Maria is not in the rain.\n    # Therefore, the equation is:\n    # normal_time - rain_distance / (0.8x) + rain_distance / (0.8x) = late_time\n  \n    # Simplifying:\n    # normal_time + 0.25 * rain_distance / x = late_time\n    # solving for x:\n    x = 0.25 * rain_distance / (late_time - normal_time)\n    \n    # Calculate the total distance\n    # Distance covered before the rain + rain_distance\n    total_distance = x * normal_time + rain_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the initial amount of money\n    initial_amount = symbols('initial_amount')\n    \n    # Define the equations based on the problem description\n    remaining_after_A = initial_amount / 2 - 1\n    remaining_after_B = remaining_after_A / 2 - 2\n    remaining_after_C = remaining_after_B - 3 - (remaining_after_B / 3)\n    \n    # Set up the equation for the amount remaining after shopping in the three shops\n    equation = Eq(remaining_after_C, 49)\n    \n    # Solve the equation\n    solution = solve(equation, initial_amount)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case scenario for not getting a green pencil is drawing all blue and white pencils first\n    blue_pencils = 3\n    white_pencils = 3\n    # After drawing all blue and white pencils, the next pencil must be green\n    pencils_to_draw_for_green = blue_pencils + white_pencils + 1\n    return pencils_to_draw_for_green\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books on the top shelf.\n    # Each shelf has 3 fewer books than the one below it, so it forms an arithmetic sequence with a difference of -3.\n    x = symbols('x')\n    total_books = Eq(x + (x - 3) + (x - 6) + (x - 9) + (x - 12) + (x - 15) + (x - 18), 280)\n    \n    # Solve the equation for x to find the number of books on the top shelf.\n    solution = solve(total_books, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    number_of_boys = total_students * fraction_boys\n    number_of_girls = total_students - number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    n = 1\n    while True:\n        test = 2240 / n\n        if (test ** 0.5).is_integer():\n            return n\n        n += 1\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = sum(sum_of_digits(page) for page in range(1, 311))\n    return total_sum\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    # The least common multiple (LCM) of the intervals at which Aaron does each task \n    # will give us the number of days after which all four tasks will align again.\n    days_lcm = lcm(3, 5, 9, 3*7)  # Multiply 3 by 7 to convert three weeks into days.\n    return days_lcm\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    # Multiply the whole numbers as per the question\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_now = dad_age_now - avril_age_now\n    age_difference_two_years_ago = age_difference_now - (2 * 2)\n\n    return age_difference_two_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of kids and y be the number of candies\n    x, y = symbols('x y')\n\n    # Equation 1: When each kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(x * 18, y - 12)\n    \n    # Equation 2: When each kid eats 15 candies, 2 more kids can be served\n    equation2 = Eq((x + 2) * 15, y)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # y is the number of candies\n    return solutions[y]\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = pow(-4.56, 2) - pow(8.1, 3)\n    denominator = pow(7.2, 3) * (-(sqrt(6 + 3/4)) + 30.15)\n    expression = 16.7 - pow((numerator / denominator), 1/3)\n\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # let the number of years later be x\n    # Oliver's age in x years will be 20 + x\n    # Lin's age in x years will be 26 + x\n    # The sum of their ages in x years will be (20 + x) + (26 + x)\n\n    # Set up the equation for the sum of their ages\n    # 20 + x + 26 + x = 48\n    # Combine like terms\n    # 2x + 46 = 48\n    # Subtract 46 from both sides to solve for x\n    # 2x = 2\n    # Divide by 2\n    x = 1\n\n    return x\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Speed ratio of Jayden to Carter is 7:4\n    # Let's assume Jayden's speed is 7x and Carter's speed is 4x for some positive x\n\n    # As they walk towards each other, the total speed will be the sum of their individual speeds\n    total_speed_ratio = 7 + 4  # Jayden's speed ratio + Carter's speed ratio\n\n    # Jayden will cover a distance in relation to the total distance based on his speed ratio\n    jayden_share_of_distance = 7 / total_speed_ratio  # Jayden's share in the total distance\n\n    # The distance between A and B is 440m, so Jayden will cover\n    jayden_distance_until_meeting = jayden_share_of_distance * 440\n\n    return jayden_distance_until_meeting\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Calculate the total score before Jim's score is added\n    total_score_before_jim = 87 * 5\n    # Calculate the new total score after Jim's score is added\n    new_mean = 88\n    number_of_students = 6\n    total_score_after_jim = new_mean * number_of_students\n    # Jim's score is the difference between the new total and the old total\n    jim_score = total_score_after_jim - total_score_before_jim\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    mr_lim_current, mrs_lim_current = symbols('mr_lim_current mrs_lim_current')\n    \n    # Equation for the age ratio 7 years ago\n    equation1 = Eq((mr_lim_current - 7) / (mrs_lim_current - 7), 6/5)\n    \n    # Equation for the sum of their current ages\n    equation2 = Eq(mr_lim_current + mrs_lim_current, 69)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (mr_lim_current, mrs_lim_current))\n    \n    # Get Mr. Lim's current age\n    return solutions[mr_lim_current]\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of stickers that Sam, Peter, and John originally had as s, p, and j respectively.\n    s, p, j = symbols('s p j')\n\n    # Sam and Peter gave 20% of their stickers to John.\n    # After giving away, Sam has s - 0.20 * s = 0.80 * s, and Peter has p - 0.20 * p = 0.80 * p\n    # John receives 0.20 * s + 0.20 * p and has 1.80 * j stickers at the end\n    # Sam had 20 stickers more than John in the end, so s - 0.20 * s = 1.80 * j + 20\n\n    # We have the set of equations:\n    equation1 = Eq(s - 0.20 * s, 1.80 * j + 20)  # Sam's stickers after giving 20% and being 20 more than John's\n    equation2 = Eq(p - 0.20 * p, p * 0.80)       # Peter has 80% of his original stickers\n    equation3 = Eq((s * 0.20 + p * 0.20), j * 0.80) # John's increase is 80% of his original stickers\n    equation4 = Eq(s / p, 7 / 5)                 # The original ratio of Sam's to Peter's stickers\n\n    # Solve the system of equations for s, p, and j\n    solutions = solve((equation1, equation2, equation3, equation4), (s, p, j))\n\n    # Return the value of p (Peter's original number of stickers)\n    return solutions[p]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_reduction = initial_price * 0.10\n    new_price_after_first_reduction = initial_price - first_reduction\n    second_reduction = new_price_after_first_reduction * 0.20\n    final_price = new_price_after_first_reduction - second_reduction\n    return final_price\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    minibusses_needed = -(-boys // minibus_capacity)\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of baseball bats the shop purchased initially as 'x'.\n    x = symbols('x')\n\n    # Each bat was bought at $135 and sold at $185, making a profit of $185 - $135 = $50 per bat.\n    profit_per_bat = 185 - 135\n\n    # When the shop was left with 3 bats, the proceeds (total money made from selling x-3 bats)\n    # had covered the initial cost (135 * x) plus a profit of $2945.\n    # So, the proceeds (185 * (x - 3)) equals to the cost plus profit ((135 * x) + 2945).\n    equation = Eq(185 * (x - 3), 135 * x + 2945)\n\n    # Solving the equation for x gives us the initial number of baseball bats purchased.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    equation1 = Eq(delta + delta, square)\n    equation2 = Eq(square + delta, circle)\n    equation3 = Eq(diamond, circle + square + delta)\n\n    solutions = solve((equation1, equation2, equation3), (delta, square, circle, diamond))\n\n    return solutions[delta]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of the table and the chair\n    table, chair = symbols('table chair')\n    \n    # Create two equations based on the problem statement\n    # Equation 1: The table cost $160 more than a chair\n    equation1 = Eq(table, chair + 160)\n    \n    # Equation 2: The cost of 1 table and 5 chairs is $328\n    equation2 = Eq(table + 5 * chair, 328)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    # Return the solution for the cost of 1 chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_mean = 1111\n    numbers = 10\n    first_numbers = 4\n    last_numbers = 6\n\n    total_sum = total_mean * numbers\n    last_mean = (total_sum - 240 * first_numbers) / last_numbers\n\n    return last_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's £1.10 to pence\n    bud_pence = 110\n    \n    # Amount Pip has in pence\n    pip_pence = 60\n    \n    # Adding both amounts to get the total in pence\n    total_pence = bud_pence + pip_pence\n    \n    return total_pence\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time for the hot tap alone to fill the bath\n    # Let 2x be the time for the cold tap alone to fill the bath (since it's twice as fast)\n    x = symbols('x')\n\n    # When using both, 1/x part of the bath is filled by hot tap in one minute\n    # When using both, 1/(2x) part of the bath is filled by cold tap in one minute\n    # Both together fill the bath in 10 minutes, which means they fill 1/10 of the bath in one minute\n    equation = Eq((1/x) + (1/(2*x)), 1/10)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Since we are looking for the time using just the cold tap\n    # The time using just the cold tap is 2x\n    cold_tap_time = 2 * solution[0]\n\n    return cold_tap_time.evalf()\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if len({P, I, S}) == 3:  # Ensure P, I, S are different digits\n                    IS = I * 10 + S\n                    PI = P * 10 + I\n                    if 4 * IS == PI:\n                        return PI\n    return None\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Time = Distance / Speed\n    \n    # Jack runs the first 280 meters at 7 meters per second\n    time_first_part = 280 / 7\n\n    # Jack runs the middle 400 meters at 5 meters per second\n    time_middle_part = 400 / 5\n\n    # The last part is 800 - 280 - 400 = 120 meters, Jack runs it at 8 meters per second\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Total time spent on the race\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of candies Rachel has and a be that Alice has.\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 pieces, they have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's amount: r + 10 = 3 * (a - 10) + 4\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total amount of candies they originally had: r + a\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    approximate_depreciation = 0.35963\n\n    value_after_years = initial_value * approximate_depreciation\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # Lori's speed in meters per second\n\n    # Calculate Joyce's speed based on the ratio\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n\n    # Calculate how far Joyce can run in 10 seconds\n    time = 10  # time in seconds\n    distance_jocye_runs = joyce_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    total_ropeskipping = 40\n    total_longjump = 31\n    both_events = 21\n    \n    only_one_event = (total_ropeskipping + total_longjump) - (2 * both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    pages = 0\n    digits_used = 0\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all the measurements to grams for ease of calculation\n    flour = 1500  # 1 kg 500 g in grams\n    sugar = 1200  # 1 kg 200 g in grams\n    butter = 900  # 900 g in grams\n\n    # Total mixture in grams\n    total_mixture = flour + sugar + butter\n\n    # Divide the mixture into 8 cake tins\n    mixture_per_tin = total_mixture / 8\n\n    return mixture_per_tin\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Distance Don walks until he meets Danny\n    distance_don_walks = 360  # in metres\n    \n    # Total distance from home to the library\n    total_distance_to_library = 780  # in metres\n    \n    # Distance Danny walks until he meets Don\n    distance_danny_walks = total_distance_to_library - distance_don_walks\n    \n    # Don's speed\n    speed_don = 60  # in metres per minute\n    \n    # Time it takes for Don to meet Danny\n    time_to_meet = distance_don_walks / speed_don\n    \n    # Danny's speed\n    speed_danny = distance_danny_walks / time_to_meet\n    \n    return speed_danny\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(i/j for j in range(i, 11)) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can be on either side: 2 options\n    # Once A & B positions are fixed, they can be arranged in 2! ways\n    # C & D have 2 seats remaining and can be arranged in 2! ways\n    return 2 * 2 * 2\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    num1 = 20\n    den1 = 30\n    den2 = 27\n    \n    num2 = (num1 / den1) * den2\n    return num2\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_number = int(f\"{digit1}{digit2}\")\n                two_digit_numbers.add(two_digit_number)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    digits.sort()  # Sort the digits to start forming the number from the smallest digit.\n\n    smallest_even_digit = None\n    for digit in digits:\n        if digit % 2 == 0:\n            smallest_even_digit = digit\n            break\n\n    if smallest_even_digit is None:\n        return None  # No even digits, cannot form an even number.\n\n    digits.remove(smallest_even_digit)\n    smallest_even_number = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + smallest_even_digit\n    return smallest_even_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for number in range(99, 9, -1):  # Start from the largest 2-digit number and go down\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    red = 10\n    blue = 5\n    green = 8\n\n    # To ensure getting 4 marbles of the same color, take the worst-case scenario:\n    # Take all marbles of the colors she needs fewer than 4 of, plus 1\n    # In this case, she can take all blue and green ones (not enough to have 4 of the same color)\n    # then she needs to take one more which will be red, ensuring she has 4 of red\n    min_marbles = blue + green + 1  # Worst-case scenario\n\n    return min_marbles\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # If 3 workers take 3 days, then 1 worker will take 3 times as many days\n    # because it's inversely proportional\n    days_for_one_worker = workers * days\n    return days_for_one_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    \n    pupils_per_row = total_pupils // rows\n    \n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # Equation a + 12 = 16\n    equation1 = Eq(a + 12, 16)\n    # Equation 2a + b = 18\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    from itertools import permutations\n\n    # Define the equation without brackets\n    expression = \"285+15//5-2\"\n\n    # Generate all possible single bracket insertions\n    single_brackets = set(permutations(['(285+15)//5-2', '285+(15//5-2)', '(285+15//5)-2']))\n\n    # Generate all possible double bracket insertions\n    double_brackets = set(permutations(['((285+15)//5)-2', '(285+(15//5))-2']))\n\n    # Evaluate all expressions and store unique results\n    unique_results = set()\n    for exp in single_brackets.union(double_brackets):\n        unique_results.add(eval(exp))\n\n    return len(unique_results)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            unlocked_lockers += 1\n        if i % 5 == 0:\n            unlocked_lockers += -1 if unlocked_lockers > 0 else 1\n    return 100 + unlocked_lockers\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # given equations from the problem statement\n    # B = 25 + 6 * A\n    # B = 200 + 10 * x + y\n    # A = 10 * x + y\n    for x in range(1, 10):  # x cannot be 0 because it's the tens place of a two-digit number\n        for y in range(10):  # y can be 0-9, including 0 since it's the ones place\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 25 + 6 * A:\n                # verify that x and y generated are consistent with the equations\n                if 60 * x + 6 * y + 25 == 200 + 10 * x + y:\n                    return A\n                else:\n                    # If John's interpretation is incorrect, we continue searching\n                    continue\n    return None  # No solution found within the given constraints\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    total = 0\n    for perm in permutations('ABCDEFG'):\n        if (perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C')) or \\\n           (perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C')):\n            if abs(perm.index('D') - perm.index('E')) != 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    total += 1\n    return total\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Relationship between the levels reached by Nicolas and Yiding\n    # is a constant ratio based on their speeds\n    nicolas_level = 4\n    yiding_level = 3\n    \n    # Find the ratio of their speeds\n    ratio = yiding_level / nicolas_level\n    \n    # Use the ratio to calculate Yiding's level when Nicolas is at level 16\n    nicolas_target_level = 16\n    \n    # Calculate Yiding's level using the ratio\n    yiding_target_level = ratio * nicolas_target_level\n    \n    return yiding_target_level\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one cake and y be the money Lucy has\n    x, y = symbols('x y')\n\n    # From the given information, we can set up two equations\n    # Equation 1: 10 * cake cost (x) = money Lucy has (y) + 11 (amount she needs to borrow when buying 10 cakes)\n    # Equation 2: 13 * cake cost (x) = money Lucy has (y) + 26 (amount she needs to borrow when buying 13 cakes)\n    equation1 = Eq(10 * x, y + 11)\n    equation2 = Eq(13 * x, y + 26)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We just want to find the cost of one cake, which is represented by x\n    return solutions[x]\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = quotient * divisor + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    known_scores = 37 + 53 + 29 + 41\n    x = total_score - known_scores\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    word = \"CHEESE\"\n    freq = {ch: word.count(ch) for ch in set(word)}\n    num_ways = factorial(len(word))\n    for ch in freq:\n        num_ways //= factorial(freq[ch])\n    return num_ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Excluding numbers starting with 0\n    no_sevens = 8 * 9 * 9  # Excluding numbers containing 7\n    \n    # At least two sevens (complement of having no or only one seven)\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    # Cases where there is exactly one seven\n    one_seven_first_position = 1 * 9 * 9  # 7XX\n    one_seven_second_position = 8 * 1 * 9  # X7X\n    one_seven_third_position = 8 * 9 * 1  # XX7\n    total_one_seven = one_seven_first_position + one_seven_second_position + one_seven_third_position\n    \n    # Final result: Total with at least two sevens = Total - No sevens - One seven\n    ans = at_least_two_sevens - total_one_seven\n    return ans\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for number in range(100000, 1000000): # Loop through 6-digit numbers\n        if str(number)[-1] == '9':  # Check if last digit is 9\n            new_number = int('9' + str(number)[:-1])  # Move 9 to start\n            if new_number == 4 * number:  # Check if the new number is four times the original\n                return number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n    minimum_dividend = minimum_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    # Let x be the total number of animals in the farm at first.\n    # 65% were cows, so 0.65x were cows, and (1 - 0.65)x were goats.\n    # When 240 more cows and goats were added, the total number of animals became x + 240.\n    # After adding, the percentage of cows became 65% + 20% = 85%\n    # So, the number of cows became 0.85(x + 240).\n    # The number of goats doubled, so the initial number of goats also became 2 * (1 - 0.65)x.\n    # From the problem, we know that the number of cows and the double of the number of goats is equal to x + 240.\n    # Therefore: 0.85(x + 240) = 0.65x + 2*(1 - 0.65)x\n    # which simplifies to: 0.85x + 204 = 0.65x + 2*(0.35x)\n    # we can solve for x now.\n    \n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 0.85*x + 204 - (0.65*x + 2*0.35*x)\n    total_animals = solve(equation, x)[0]\n\n    # Once x is found, we can calculate the initial number of goats\n    initial_goats = (1 - 0.65) * total_animals\n    \n    return int(initial_goats)\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Abigail and Jonathan's current ages\n    abigail, jonathan = symbols('abigail jonathan')\n    \n    # Abigail is 6 years older than Jonathan\n    equation1 = Eq(abigail, jonathan + 6)\n    \n    # Six years ago, she was twice as old as he was at that time\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    # Solve the system of equations to find the current ages\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    # Extract Jonathan's age\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n\n    # Total work done by Alice and Bob in 27 days assuming Alice doesn't take a day off\n    total_work_done = 27 * (alice_work_rate + bob_work_rate)\n\n    # Since the total work (the job) is finished, it equals 1 (100% of the job)\n    # Days Alice actually worked = Total work - work done by Bob alone in 27 days\n    alice_work_days = total_work_done - (27 * bob_work_rate)\n\n    # The number of days Alice worked (alice_work_days divided by her work rate gives the actual days she worked)\n    alice_days_worked = alice_work_days / alice_work_rate\n\n    # Days Alice took off is the difference between the total days and the days she actually worked\n    days_off = 27 - alice_days_worked\n\n    return int(days_off)\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    a, b = 4, 3\n    a_op_b = a * b + a - b\n    b_op_a = b * a + b - a\n    ans = a_op_b - b_op_a\n    return ans\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_count = 4\n    boys_avg_mass = 50\n    girls_count = 6\n    girls_avg_mass = 40\n\n    total_mass = (boys_count * boys_avg_mass) + (girls_count * girls_avg_mass)\n    total_children = boys_count + girls_count\n\n    avg_mass = total_mass / total_children\n\n    return avg_mass\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and C != 0 and (100*A + 10*B + A) + (100*C + 10*D + C) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of apples and bananas\n    apple, banana = symbols('apple banana')\n\n    # Equation 1: 3 apples and 2 bananas cost £1.25\n    # Equation 2: 1 apple and 1 banana cost £0.48\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    result = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return result\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, total_pages = symbols('days total_pages')\n    \n    # Vanessa reads 30 pages a day and finishes in days + 2\n    eq1 = Eq(30 * (days + 2), total_pages)\n    \n    # Vanessa reads 39 pages a day and finishes in days - 4\n    eq2 = Eq(39 * (days - 4), total_pages)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (days, total_pages))\n    \n    # days supposed to finish reading the book and total pages in the book\n    return solutions[days], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence_length = 535\n    sequence_pattern = [2, 0, 2, 0, 0, 2, 0, 2]\n    pattern_length = len(sequence_pattern)\n    \n    full_pattern_count = sequence_length // pattern_length\n    remainder_pattern_count = sequence_length % pattern_length\n\n    twos_in_full_pattern = sequence_pattern.count(2) * full_pattern_count\n    twos_in_remainder_pattern = sequence_pattern[:remainder_pattern_count].count(2)\n    \n    total_twos = twos_in_full_pattern + twos_in_remainder_pattern\n\n    return total_twos\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_away = 55\n\n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_away\n\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    patterns = {\n        (4, 1): 17,\n        (5, 4): 29,\n        (8, 16): 80\n    }\n\n    # Identify the pattern\n    # It seems that the pattern is: a Delta b = a^2 + a - b\n    # Validate this pattern for all given cases\n    for a, b in patterns:\n        assert a ** 2 + a - b == patterns[(a, b)]\n\n    # Now, apply the pattern to find 10 Delta 9\n    ans = 10 ** 2 + 10 - 9\n    return ans\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children = symbols('adults children')\n    \n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n    \n    solutions = solve((equation1, equation2), (adults, children))\n    \n    return solutions[adults]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original total number of coins Owen had\n    x = symbols('x')\n    \n    # Since $\\frac{2}{7}$ of his original coins were fifty-cent coins, then $\\frac{5}{7}$ were one-dollar coins\n    # After his mother gave him coins, he had (5/7)x + 10 one-dollar coins and (2/7)x + (5 / 0.5) fifty-cent coins\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    # This gives us the equation: (5/7)x + 10 = 2 * ((2/7)x + 10)\n    \n    # Solve the equation \n    equation = Eq((5 / 7) * x + 10, 2 * ((2 / 7) * x + 10))\n    solution = solve(equation, x)\n    \n    # Return the original number of coins Owen had\n    return solution[0]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    difference = solutions[dress] - solutions[shirt]\n\n    return difference\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_points = 44\n    correct_points = 6\n    wrong_points = -2\n    total_questions = 10\n\n    for correct_answers in range(total_questions + 1):\n        if correct_answers * correct_points + (total_questions - correct_answers) * wrong_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_daily = 7\n    brenda_saved_daily = 6\n    andy_total_saved = 378\n\n    days_to_save = andy_total_saved / andy_saved_daily\n    brenda_total_saved = days_to_save * brenda_saved_daily\n\n    return brenda_total_saved\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Initial state equations\n    initial_total = Eq(anna + betsy + charlene, 168)\n    \n    # Transactions\n    charlene_to_betsy = Eq(charlene - 15, charlene - 15)\n    betsy_to_anna = Eq(betsy + 15 - 8, betsy + 7)\n    \n    # After transactions, Anna and Betsy gain marbles, Charlene loses some\n    anna_after = anna + 8\n    betsy_after = betsy + 7\n    charlene_after = charlene - 15\n    \n    # Final ratio equations\n    final_ratio = Eq(2*betsy_after, 5*anna_after)\n    final_ratio_2 = Eq(2*charlene_after, 7*anna_after)\n    \n    # Solve the equations\n    solutions = solve((initial_total, final_ratio, final_ratio_2, charlene_to_betsy, betsy_to_anna), (anna, betsy, charlene))\n    \n    return solutions[betsy]\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume of cuboid = length * breadth * height\n    # Let's assume the original length, breadth, and height are 1 unit each for simplicity\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # New length after increasing by 10%\n    new_length = original_length * 1.10\n\n    # New breadth after reducing to 4/5 of the original\n    new_breadth = original_breadth * (4/5)\n\n    # New height with the ratio of new height to original height = 11:10\n    new_height = original_height * (11/10)\n\n    # New volume of cuboid = new length * new breadth * new height\n    new_volume = new_length * new_breadth * new_height\n\n    # Expressing the new volume as a percentage of its original volume\n    ratio_of_volumes = (new_volume / (original_length * original_breadth * original_height)) * 100\n\n    return ratio_of_volumes\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    points_in_triangle = 3\n    num_triangles = comb(num_points, points_in_triangle)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    contestants = 8\n    prizes = 3\n    ways = factorial(contestants) // factorial(contestants - prizes)\n    return ways\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work = 360\n    total_work = remaining_work / (1 - 0.60)\n    return int(total_work)\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    nearest_10 = round(number, -1)\n    return nearest_10\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation 1: The total number of mushrooms gathered\n    equation1 = Eq(first_hour + second_hour, 40)\n\n    # Equation 2: If dad gathered 26 more mushrooms in the first hour,\n    # it would be equal to the number he gathered in the second hour\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The problem is equivalent to splitting the number 40 into 5 distinct parts,\n    # which represent the number of questions each student solved.\n    # The requirement that each student solves at least one question means we need to\n    # reserve 1 question for each student, reducing the problem to splitting 35 into 5 parts.\n    # To maximize Noa's share, we should minimize the others.\n\n    # Split 35 into 5 distinct parts in an ordered way,\n    # allocate the smallest numbers possible to the first four students.\n    # Since the numbers must be distinct, we use the first 4 natural numbers:\n    # 1, 2, 3, and 4, which sum to 10.\n\n    # Subtract the sum allocated to the first four students from the total\n    remaining_questions = 35 - 10 # because 1+2+3+4 = 10\n\n    # The remaining questions are Noa's share, which is the largest possible\n    return remaining_questions\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    equation1 = Eq(scan / ted, 1 / 4)\n    equation2 = Eq((scan + 4) / (ted + 4), 1 / 3)\n\n    solutions = solve((equation1, equation2), (scan, ted))\n\n    scan_age = solutions[scan]\n    ted_age = solutions[ted]\n\n    years_ago = symbols('years_ago')\n    equation3 = Eq((scan - years_ago) / (ted - years_ago), 1 / 9)\n\n    years_ago_solution = solve(equation3.subs({scan: scan_age, ted: ted_age}), years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    nearest_thousand = 1000\n    ans = round(number / nearest_thousand) * nearest_thousand\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    return 9 * 100\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate distance jogged from 6:30am to 7:30am\n    jogging_time = 1  # hours\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate distance walked from 7:30am to 9:30am\n    walking_time = 2  # hours\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    difference = mollies - guppies\n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_cm_to_m = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    model_tree_height_cm = real_tree_height_m * scale_cm_to_m  # centimeters\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of non-foldable bicycles,\n    # and y be the number of foldable bicycles\n    x, y = symbols('x y')\n\n    # The total number of bicycles before selling\n    equation1 = Eq(x + y, 476)\n\n    # The number of bicycles left after selling\n    bicycles_left = 476 - 208\n\n    # The fraction of non-foldable bicycles left\n    equation2 = Eq(x * 5/9, bicycles_left - (y * 4/7))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    non_foldable_sold = solutions[x] - (solutions[x] * 5/9)\n    foldable_sold = 208 - non_foldable_sold\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    day_climb = 10\n    night_slide = 0\n    day = 0\n    current_height = 0\n\n    while current_height < height:\n        day += 1\n        current_height += day_climb\n        if current_height >= height:\n            break\n        night_slide += 1\n        current_height -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    sum_of_factors = sum(divisors(20))\n    return sum_of_factors\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = 5 * 34\n    return ans\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Using the Pigeonhole Principle:\n    # To ensure that at least one kid gets at least 3 pieces of candy,\n    # Valeria should prepare enough candy such that even if 19 students get 2 pieces,\n    # there will be enough left for one student to get 3 pieces.\n    students = 20\n    # If 19 students get 2 pieces each, they would consume 19 * 2 candies.\n    # To ensure one student can have at least 3, add 3 to the total.\n    candies = (students - 1) * 2 + 3\n    \n    return candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5 / 8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Yohan can take 10 red socks and 10 black socks before taking a pair of white socks\n    # So, the worst case is 10 red + 10 black + 1 white = 21 socks to guarantee a pair of white socks.\n    max_socks = 10 + 10 + 1\n    return max_socks\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n    \n    # Assume all answers are correct first\n    max_score = total_questions * correct_mark\n    \n    # Calculate how many questions were actually wrong\n    wrong_questions = (max_score - total_score) / (correct_mark - wrong_mark)\n    \n    # Calculate correct questions\n    correct_questions = total_questions - wrong_questions\n    \n    return int(correct_questions)\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # Calculate the number of intervals between lamp posts, taking into account the flowers planted between each two\n    intervals = total_flowers // flowers_between_lamps\n\n    # Calculate the length of the road\n    road_length = 50\n\n    # Distance between every 2 lamp posts is the road length divided by the number of intervals\n    distance_between_lamps = road_length / (intervals + 1)\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_decrease = 17\n\n    final_temperature = initial_temperature - temperature_decrease\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    result = 48 / (4/5)\n    return result\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6  # Books on the left of her favorite book\n    right_books = 14 - 1  # Books on the right of her favorite book, excluding the favorite book itself\n    \n    total_books = left_books + right_books + 1  # Adding the favorite book\n    \n    return total_books\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_number = first_number * (ratio ** (5 - 1))\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    return 13.8 * 10**7 * 5.4 * 10**-12\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_given_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_given_away // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Effective length for planting bushes, subtracting the distance from edges on both sides\n    effective_length = side_length - (2 * distance_from_edge)\n    \n    # Number of bushes that can be fit on one side\n    num_bushes_per_side = int(effective_length / distance_between_bushes)\n\n    # Total number of bushes is 4 times the number on each side (since it's a square)\n    total_bushes = 4 * num_bushes_per_side\n\n    return total_bushes\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    P_rate_per_hour = 1 / (12 * 8)\n    # Q's work rate per hour\n    Q_rate_per_hour = 1 / (8 * 10)\n    \n    # Combined work rate per hour when both work together for 8 hours a day\n    combined_rate_per_day = 8 * (P_rate_per_hour + Q_rate_per_hour)\n    \n    # Total days to complete the job working together 8 hours a day\n    total_days = 1 / combined_rate_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Assuming child 1 gets the least and child 5 gets the most.\n    # start from child 5 to child 1, satisfying each gets at least one\n    # and no two get the same number of apples. \n    for child5 in range(19, 0, -1):\n        remaining = 19 - child5\n        for child4 in range(1, child5):\n            for child3 in range(1, child4):\n                for child2 in range(1, child3):\n                    child1 = remaining - (child4 + child3 + child2)\n                    if child1 > 0 and child1 < child2:\n                        return child5\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 60 / 100\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_faster_van = 132  # km per hour\n    speed_slower_van = 78   # km per hour\n    time = 8                # hours\n\n    distance_apart = (speed_faster_van + speed_slower_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    def count_even_factors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0 and i % 2 == 0:\n                count += 1\n        return count\n\n    ans = count_even_factors(78)\n    return ans\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    for pencils in range(1, 100):\n        pens = (5/4) * pencils\n        if (pencils + 1) / (pens - 1) == 7/8:\n            return int(pencils + pens)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given exchange rates:\n    # 9 rabbits = 3 goats\n    # 2 goats = 4 cows\n    # Want to find: ? rabbits = 2 cows\n    \n    # Step 1: Find the exchange rate between rabbits and goats.\n    rabbits_per_goat = 9 / 3\n    \n    # Step 2: Find the exchange rate between goats and cows.\n    goats_per_cow = 2 / 4\n    \n    # Step 3: Combine the exchange rates to find rabbits per cow.\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    \n    # Step 4: Find how many rabbits can 2 cows be exchanged for.\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n    \n    # Let x be the number of correct answers\n    # Each correct answer gives 4 marks: 4x\n    # Each wrong answer takes away 1 mark\n    # Total wrong answers: attempted - x\n    # Total score: 4x - (attempted - x) = 168\n    \n    # Simplify the equation: 4x - attempted + x = 168\n    # Combine like terms: 5x - attempted = 168\n    # Solve for x: x = (168 + attempted) / 5\n    \n    correct_answers = (score + attempted) // 5\n    \n    return correct_answers\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n\n    # According to the defined operation, we will compute from the rightmost pair\n    op1 = hash_op(5, 4)\n    op2 = hash_op(6, op1)\n    op3 = hash_op(7, op2)\n    op4 = hash_op(8, op3)\n    op5 = hash_op(9, op4)\n    op6 = hash_op(10, op5)\n    \n    return op6\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    # Arithmetic Progression\n    first_term = 30  # a1\n    number_of_terms = 10  # n\n    common_difference = 4  # d\n    \n    # Using the sum formula for an arithmetic progression: n/2 * (2*a1 + (n-1)*d)\n    total_seats = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Define the variables for the problem\n    initial_profit = 0.60  # planned profit\n    first_day_ratio = 0.70  # ratio of books sold on the first day\n    total_profit_ratio = 0.80  # the total profit is 80% of the planned profit\n    \n    # Calculate profit from the first day\n    first_day_profit = first_day_ratio * initial_profit\n    \n    # Remaining profit needs to be achieved on the second day\n    remaining_profit = total_profit_ratio * initial_profit - first_day_profit\n    \n    # Ratio of books sold on the second day\n    second_day_ratio = 1 - first_day_ratio\n    \n    # Calculate the discount rate based on remaining profit\n    discount_rate = (1 - remaining_profit / second_day_ratio) * 100  # convert to percentage\n    \n    return discount_rate\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    total_percentage = 100\n    girls_percentage = total_percentage - boys_percentage\n\n    total_children = (girls * total_percentage) / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    first_missing_page = 15  # The first page number after page 14 is 15\n    last_missing_page = 34   # The last page number before page 35 is 34\n    \n    # Since the pages in a newspaper are consecutive and printed on both sides\n    # of the sheet, two pages are missing per sheet (front and back)\n    num_missing_sheets = (last_missing_page - first_missing_page + 1) / 2\n\n    return int(num_missing_sheets)\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    equation1 = Eq(tuna_puff_price - curry_puff_price, 0.20)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    even_digits = [0, 2, 6, 8]\n    odd_digits = [1, 3]\n    count = 0\n    \n    for tens in even_digits:\n        for ones in odd_digits:\n            if tens != 0:  # to form a valid two-digit number\n                count += 1\n\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_number = 10\n    end_number = 25\n\n    ans = end_number - start_number + 1\n\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    # Number of children\n    total_children = 38\n    # Total number of balloons\n    total_balloons = 126\n    # Hypothesis: Let's assume all the children are boys and received 2 balloons each,\n    # Then we would have:\n    all_boys_balloons = total_children * 2\n    \n    # Since giving 4 balloons to a girl means 2 extra balloons compared to a boy,\n    # We calculate the excess number of balloons assuming all children were boys.\n    excess_balloons = total_balloons - all_boys_balloons\n\n    # Each girl causes an excess of 2 balloons (4 given to a girl minus 2 if it were a boy)\n    # The number of girls can be calculated by the excess_balloon divided by 2\n    number_of_girls = excess_balloons // 2\n\n    # Now, since we know the number of girls, we can find out the number of boys\n    number_of_boys = total_children - number_of_girls\n\n    return number_of_boys\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 21, 2):\n        product *= (1 + 2 / i)\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of cows be 'c'\n    # Let the original number of goats be 'g'\n    c, g = symbols('c g')\n\n    # 65% of the animals in the farm were cows.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats were added:\n    # The percentage of cows increased by 20% -> 65% + 20% = 85% (now cows are 85% of the farm)\n    # The number of goats doubled -> 2g\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    ans = 863 * 37\n    return ans\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    total_length_needed_cm = 400 * 85  # total length needed in cm\n    roll_length_cm = 20 * 100  # roll length in cm (1m = 100cm)\n    rolls_needed = total_length_needed_cm / roll_length_cm\n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n    \n    # In 3 years, the sum of the ages of John and Emma will be 27\n    future_age_sum = Eq(emma + 3 + john + 3, 27)\n    # John is 7 years older than Emma\n    age_difference = Eq(john, emma + 7)\n\n    solutions = solve((future_age_sum, age_difference), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    cookies = 0\n    while True:\n        if (cookies % 6) == 5 and ((cookies + 3) % 5) == 0:\n            return cookies\n        cookies += 1\n        if cookies >= 40:\n            break\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    donation = (1/4) * salary\n    remainder = salary - donation\n    spending = (5/6) * remainder\n    saving = remainder - spending\n    \n    equation = Eq(spending, donation + 78)\n    result = solve(equation, salary)\n    \n    return result[salary]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    n1, a1 = 7, 57  # 7th term is 57\n    n2, a2 = 15, 89 # 15th term is 89\n\n    common_difference = (a2 - a1) // (n2 - n1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for time spent walking at increased speed\n    t = symbols('t')  # 't' will represent the time in minutes\n\n    # Equation based on distance David walked before and after increasing speed\n    equation = Eq(150 * 10 + (150 + 50) * t, 3700)\n\n    # Solve for 't'\n    time_at_increased_speed = solve(equation, t)[0]\n\n    # Total time spent walking is 10 minutes + time at increased speed\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    number, _ = solve_congruence(*congruences)\n    \n    while number < 400:\n        return number\n        number += 2 * 3 * 5 * 7\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_bought_weekly = 45\n    sweets_eaten_weekly = 60\n    desired_sweets = 150\n\n    sweets_change_per_week = sweets_bought_weekly - sweets_eaten_weekly\n    weeks = (initial_sweets - desired_sweets) / sweets_change_per_week\n\n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one apple and one orange\n    apple, orange = symbols('apple orange')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Calculate how much Carrie pays for one apple and one orange\n    carrie_pays = solutions[apple] + solutions[orange]\n\n    return carrie_pays\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Since each digit can be used more than once, each position (hundreds, tens, ones) can be either 5, 6, or 7.\n    # That is, there are 3 choices for each of the three positions.\n    choices_per_position = 3\n\n    # The total number of different three-digit numbers is then the product of the number of choices for each position.\n    total_numbers = choices_per_position ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # The number must be divisible by 9,\n    # so the sum of its digits must be divisible by 9.\n    # We have fixed digits: 4, 7, 1, 9, which sum up to 21.\n    # Let's find A, B, C such that (A + B + C + 21) is divisible by 9,\n    # with A, B, C being different and not one of the fixed digits, and also A, B, C are different from each other.\n\n    # Create a list of available digits excluding the fixed ones\n    available_digits = [i for i in range(10) if i not in {4, 7, 1, 9}]\n\n    for A in available_digits:\n        for B in available_digits:\n            if B != A:  # Ensure B is different from A\n                for C in available_digits:\n                    if C != A and C != B:  # Ensure C is different from both A and B\n                        if (A + B + C + 21) % 9 == 0:  # Check divisibility by 9\n                            # This is one valid combination for A, B, C\n                            # Return the sum of A, B, C and the constructed number\n                            num = int(f\"47{A}1{B}9{C}\")\n                            return A + B + C, num\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = (sport_class + reading_class) - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_amount = 140\n    total_rackets = 2\n\n    amount_spent_on_rackets = total_rackets * racket_price\n    remaining_amount = total_amount - amount_spent_on_rackets\n\n    number_of_balls = remaining_amount // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n    while heinz_chocolates < jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n        \n    return week \n        \nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    # As we don't know the order of the balls, we must consider the worst case scenario\n    # We could take all 4 balls of one color, then all 4 balls of another color\n    # At this point we will have 8 balls but only 2 colors\n    # To ensure we get a ball of the third color, we must draw one more ball\n    num_balls_to_draw = 4 + 4 + 1\n\n    return num_balls_to_draw\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # Last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # Last digit of 3^2017\n    \n    # Last digit of their product\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n    return total_donuts\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 choose 3 ways to choose any 3 points on a circle\n    # which gives us 12! / (3! * (12-3)!) = 220 combinations in total\n    # However, this includes all possible triangles, not just right-angled ones.\n    # To form a right-angled triangle on a circle with equally spaced points,\n    # one of the sides must be the diameter of the circle.\n    # As we have 12 points, there are 12/2 = 6 diameters possible.\n    # Each diameter can be a hypotenuse for two right-angled triangles\n    # (one for each point not on the diameter), so each diameter gives us\n    # 12 - 2 = 10 triangles.\n    # Thus, the total number of right-angled triangles is 6 diameters * 10 = 60.\n    \n    num_diameters = 12 // 2\n    points_on_diameter = 2\n    triangles_per_diameter = 12 - points_on_diameter\n\n    ans = num_diameters * triangles_per_diameter\n\n    return ans\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger is in the exact middle and also the 11th.\n    # This means there are 10 animals in front of and 10 animals behind the tiger.\n    total_animals = 10 + 1 + 10  # 10 in front, tiger itself, 10 behind\n    return total_animals\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'a' represent the weight of a box of apples\n    # let 'o' represent the weight of a box of oranges\n    a, o = symbols('a o')\n\n    # equation representing 3 boxes of apples and 5 boxes of oranges\n    equation1 = Eq(3 * a + 5 * o, 270)\n    # equation representing 3 boxes of apples and 7 boxes of oranges\n    equation2 = Eq(3 * a + 7 * o, 342)\n    \n    # solve the equations for 'a' and 'o'\n    solutions = solve((equation1, equation2), (a, o))\n    \n    return solutions[a], solutions[o]\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    first_part = (1/3) * 24\n    second_part = (2/5) * 30\n    third_part = (1/3) * 15\n\n    total = first_part + second_part + third_part\n\n    return total\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy initially divides 24 roses into 3 vases\n    roses_per_vase_first_round = 24 // 3\n\n    # When Nancy receives more roses, she divides them evenly into 4 vases\n    # Since each vase has the same amount as the initial 3 vases,\n    # the number of additional roses must be a multiple of the number of roses in 4 vases\n    roses_in_4_vases = roses_per_vase_first_round * 4\n\n    # The total number of roses is the initial roses plus the roses in the 4 vases\n    total_roses = 24 + roses_in_4_vases\n\n    return total_roses\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost_cents = 50\n    mamee_cost_cents = haribo_cost_cents - 30\n    jelly_cost_cents = 6 * mamee_cost_cents\n    jelly_cost_dollars = jelly_cost_cents / 100\n    return jelly_cost_dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    from num2words import num2words\n    ans = num2words(number)\n    return ans\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 - 2) / 2\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n    price_of_two_cheese_cakes = 2 * cheese_cake\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n    \n    # Will hates mint flavour, so we don't count that one\n    max_candies_will_can_eat = lemon_flavour + cherry_flavour\n    \n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    number = solve_congruence(*congruences)\n    ans = [num for num in range(number[0], 80, number[1]) if num < 80]\n    return ans[0]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(1, 10):\n            if B == A:\n                continue\n            for C in range(1, 10):\n                if C in [A, B]:\n                    continue\n                for D in range(1, 10):\n                    if D in [A, B, C]:\n                        continue\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 10 * AB + C\n                    BCD = 10 * BC + D\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In a single elimination tournament, games = players - 1\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Calculate the width based on the ratio and height\n    width = (height * ratio_width) / ratio_height\n    \n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_part = \"428571\"\n    sum_digits = 0\n    for i in range(58):\n        sum_digits += int(decimal_part[i % len(decimal_part)])\n\n    return sum_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n    \n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)            # Sum of ages is 55\n    eq2 = Eq(younger_son - older_son, 3)                                                 # Sons are 3 years apart\n    eq3 = Eq(older_daughter - younger_daughter, 2)                                       # Daughters are 2 years apart\n    eq4 = Eq(younger_son, 2 * older_daughter)                                            # Younger son is twice as old as the older daughter\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (older_son, younger_son, older_daughter, younger_daughter), dict=True)\n\n    # Filter out negative ages and find the youngest child's age\n    valid_solutions = [s for s in solutions if all(age >= 0 for age in s.values())]\n    youngest_age = min(s[younger_daughter] for s in valid_solutions)\n\n    return youngest_age\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n\n    # Since the books of the same type are indistinguishable, we divide the total\n    # permutations by the factorial of the count of each type of book.\n    total_ways = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n\n    return total_ways\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_length = 13\n    diff_length = 25\n    return diff_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percent_choosing_chicken_tenders = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percent_choosing_chicken_tenders\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to be exchanged\n    x = symbols('x')\n\n    # Bottle A's new concentration after exchange\n    # (Amount of sugar present + Sugar added from B - Sugar sent to B) / New volume of liquid after exchange\n    concentration_A = ((50 * 0.11) + (x * 0.47) - (x * 0.11)) / (50)\n\n    # Bottle B's new concentration after exchange\n    # (Amount of sugar present + Sugar added from A - Sugar sent to A) / New volume of liquid after exchange\n    concentration_B = ((50 * 0.47) + (x * 0.11) - (x * 0.47)) / (50)\n\n    # Set the concentrations equal to each other and solve for x\n    equation = Eq(concentration_A, concentration_B)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # There are three different numbers and we want to form a three-digit number,\n    # meaning the same card can be used for different positions (hundreds, tens, units)\n    # Since the cards can be repeated, we have 3 options for each of the three places.\n    count = 3 * 3 * 3\n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_in_cm = 20 * 100  # convert meters to centimeters\n    space_between = 40\n    first_cauliflower_space = 20\n\n    # Calculate the effective planting length by subtracting the space for the first cauliflower\n    effective_length = length_in_cm - first_cauliflower_space\n\n    # Calculate the number of cauliflowers by dividing the effective length by the space between each cauliflower\n    num_cauliflowers = effective_length // space_between\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n    prime_nums = []\n\n    for num in range(2, 50):\n        if isprime(num) and isprime(num+6):\n            prime_nums.append(num)\n        elif isprime(num) and isprime(num-6):\n            prime_nums.append(num)\n\n    return len(prime_nums), prime_nums\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n\n    ans = (percentage * base_value) / 100\n\n    return ans\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):\n            for x3 in range(x2+1, 15):\n                x4 = 15 - (x1 + x2 + x3)\n                if x4 > x3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_length_meters = 3.7 + 64 / 100  # Convert cm to meters and add\n    to_subtract_meters = 2 + 7 / 100  # Convert cm to meters\n\n    ans = total_length_meters - to_subtract_meters  # Subtract in meters\n\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    # Create the equations based on the given information\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_seq = [1, 2, 3, 5, 8, 13, 21]\n    next_num = fib_seq[-1] + fib_seq[-2]\n    return next_num\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n    for i in range(1, sum_of_numbers // 2 + 1):\n        product = i * (sum_of_numbers - i)\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of black, white, and grey rabbits\n    black, white, grey = symbols('black white grey')\n\n    # The first equation states that the total number of rabbits is 59\n    equation1 = Eq(black + white + grey, 59)\n    \n    # The second equation states that the sum of black and white rabbits is 11 more than grey rabbits\n    equation2 = Eq(black + white, grey + 11)\n    \n    # The third equation states that the number of black rabbits is 9 less than the number of white rabbits\n    equation3 = Eq(black, white - 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    # Return the number of white rabbits\n    return solutions[white]\n\n# Get the final answer by calling the function\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earning = 70\n    number_of_days = 6  # From Monday to Saturday\n\n    total_earnings = daily_earning * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    initial_average = 60\n    final_average = initial_average + 10\n    num_people_initial = 3\n    num_people_final = num_people_initial + 1\n    total_books_initial = initial_average * num_people_initial\n    total_books_final = final_average * num_people_final\n    dennis_books = total_books_final - total_books_initial\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    distance_per_day = climb_distance - slide_distance\n    day = 0\n    current_distance = 0\n    \n    while True:\n        day += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n\n    return day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt, floor\n    \n    # Smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n    \n    # Largest two-digit square number\n    largest_square = floor(sqrt(99)) ** 2\n    \n    # Product of the smallest two-digit prime and the largest two-digit square\n    ans = smallest_two_digit_prime * largest_square\n    \n    return ans\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The given sequence is a geometric sequence with first term a=1 and common ratio r=2.\n    # To find the 20th term of the sequence, we use the formula for the nth term of a geometric sequence: a * r^(n-1).\n    # Similarly, to find the 17th term, we also apply the same formula.\n    a = 1\n    r = 2\n    n20 = 20\n    n17 = 17\n    \n    # Calculate the 20th term\n    term_20 = a * r**(n20 - 1)\n    \n    # Calculate the 17th term\n    term_17 = a * r**(n17 - 1)\n    \n    # Divide the 20th term by the 17th term\n    ans = term_20 / term_17\n\n    return ans\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # distance between 1st and 4th flag is 9 meters\n    # which means there are 2 intervals between them\n    distance_between_first_and_fourth = 9\n    number_of_intervals_between_first_and_fourth = 3 - 1  # 4th - 1st = 3 intervals\n    interval_distance = distance_between_first_and_fourth / number_of_intervals_between_first_and_fourth\n    \n    # now we need to find the distance between the 1st and 9th flag\n    number_of_intervals_between_first_and_ninth = 9 - 1  # 9th - 1st = 8 intervals\n    distance_between_first_and_ninth = interval_distance * number_of_intervals_between_first_and_ninth\n    \n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    number = ones + tenths * 0.1 + hundredths * 0.01\n    \n    return number\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    return is_prime(233)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22  # speed of the ship in still water\n    speed_current = 3  # speed of the current\n    distance = 200  # distance to travel downstream\n\n    # Calculate speed downstream\n    speed_downstream = speed_ship + speed_current\n\n    # Calculate time taken to travel downstream\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_points = 6\n    incorrect_points = -2\n    total_questions = 10\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    ways_train = 4\n    ways_bus = 3\n    ways_flight = 2\n    \n    total_ways = ways_train + ways_bus + ways_flight\n    return total_ways\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic variables for number of peaches, number of students in class A and B\n    peaches, students_A, students_B = symbols('peaches students_A students_B')\n\n    # Equations based on the problem statement\n    equation1 = Eq(peaches, 5 * students_A + 10)\n    equation2 = Eq(peaches, 8 * students_B - 2)\n    equation3 = Eq(students_A, students_B + 3)\n\n    # Solve the system of equations for the number of peaches\n    solutions = solve((equation1, equation2, equation3), (peaches, students_A, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = str(product)[-2:]\n    return int(last_two_digits)\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28512)  # Get the prime factorization of the numerator\n    h = 1\n    for prime, exponent in factors.items():\n        if exponent % 3 != 0:  # Check if the exponent is a multiple of 3\n            h *= prime**(3 - (exponent % 3))  # Multiply h by the prime raised to the power necessary to make it a cube\n    return h\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef count_ways(d, p):\n    # The number of ways to arrange d dancing performances is factorial(d).\n    # The sketch performances need to be placed between these dances such that \n    # no two sketches are consecutive. We have d+1 \"slots\" between and around \n    # the dance performances.\n    # Choose p \"slots\" from these d+1 to place the sketches.\n    if d < p:\n        return 0  # Not enough slots for sketches\n    return factorial(d) * factorial(p) // factorial(d - p)\n\ndef solution():\n    dances = 7\n    plays = 3\n    # Need at least one dance between plays, so we start with 1 dance performance, then a play, and so on.\n    # The minimum dances we need to start with is equal to the number of plays - 1, \n    # because after this initial arrangement, any number of dances can be placed between plays, or at the beginning or end.\n    min_initial_dances = plays - 1\n    remaining_dances = dances - min_initial_dances\n    \n    # There can be additional dances between, before, or after the plays, \n    # which means now we have (plays + 1) slots for the remaining dances.\n    ans = count_ways(remaining_dances + plays + 1, plays)\n    \n    return ans\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to take out at least 1 chip of each color to ensure he has 2 different colors\n    # Since there are more brown chips than red or yellow, he should take out red and yellow chips first\n    # Take all red chips (3) and at least 1 yellow chip to ensure he has 2 different colors\n    # Therefore, Bart needs to take 3 red + 1 yellow = 4 chips out to make sure of this\n    ans = 3 + 1  # Red chips + 1 Yellow chip\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # Derangement problem (subfactorial), also known as !n or the number of permutations without fixed points\n    # Direct computation using subfactorial formula:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    n = 7  # The number of friends\n    fact = 1  # Factorial of n\n    derangement = 1  # Start accumulating the subfactorial result\n    \n    for i in range(1, n + 1):\n        fact *= i  # Factorial computation\n        derangement = (-derangement + fact) % 100000007  # Compute subfactorial using modulus to handle large numbers\n\n    return derangement\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415927\n    b = 31415925\n    ans = (a - 1)**2 - a * b\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    # Total number of children in the queue is the position of Mark plus the number of children between them\n    # plus Helen's position from the end.\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9)\n    odd_digits = 5\n    \n    # Each of the three positions can be filled by any of the 5 odd digits\n    # Since the number is 3 digits long and each digit is independent,\n    # use the multiplication principle\n    count = odd_digits * odd_digits * odd_digits \n    \n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # The recurring decimal 0.852784... can be thought of as a repeating cycle of 4 digits: 8527\n    decimal_cycle = \"8527\"\n    # We want to find the 79th digit in the decimal part\n    position_in_cycle = (79 - 1) % len(decimal_cycle)\n    # Get the digit at the corresponding position in the cycle\n    digit = decimal_cycle[position_in_cycle]\n    return int(digit)\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    # Each father shakes hands with fathers, mothers, and children from other families: 9 families * 3 people per family\n    handshakes_by_fathers = total_families * (total_families - 1) * 3 \n    \n    # Each mother shakes hands with fathers and children from other families: 9 families * 2 people per family\n    handshakes_by_mothers = total_families * (total_families - 1) * 2\n    \n    # Each child shakes hands with fathers and mothers from other families: 9 families * 2 people per family\n    handshakes_by_children = total_families * (total_families - 1) * 2\n    \n    # Total handshakes is the sum of the handshakes by fathers, mothers, and children\n    total_handshakes = handshakes_by_fathers + handshakes_by_mothers + handshakes_by_children\n    \n    # Each handshake is counted twice (once for each person shaking hands), so we divide by 2\n    ans = total_handshakes // 2\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number + 2009) % (17*19) == 0:\n            return number\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    tim_sum = 1939\n    missing_page = total_sum - tim_sum\n    return missing_page\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket_number in range(0, 999):\n        if (ticket_number + (ticket_number + 1)) == 777:\n            return ticket_number + 2  # the next ticket after the two taken\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill_amount = 82\n    hours_free = 40\n    rate_40_50 = 5\n    rate_50_60 = 8\n    rate_60_plus = 15\n\n    # Calculate additional bill after free hours\n    additional_bill = bill_amount\n\n    # Hours between 50 and 60\n    if additional_bill > rate_40_50 * 10:\n        additional_bill -= rate_40_50 * 10\n        hours = 50\n    else:\n        hours = hours_free + additional_bill / rate_40_50\n        return hours\n\n    # Hours between 60 plus\n    if additional_bill > rate_50_60 * 10:\n        additional_bill -= rate_50_60 * 10\n        hours = 60\n    else:\n        hours += additional_bill / rate_50_60\n        return hours\n\n    # Remaining hours, if any\n    hours += additional_bill / rate_60_plus\n\n    return hours\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # You want at least one marble of each color,\n    # So you start by drawing one of each of the three most populous colors\n    marbles_drawn = 3  # One green, one blue, and one red\n\n    # In the worst case, you still don't have an orange marble, so you keep drawing\n    # You can draw all of the remaining 3rd most populous colored marbles without getting an orange\n    marbles_drawn += 6 - 1  # Subtracting 1 because we already took one blue marble\n\n    # Now we have drawn all blue, one red and one green and still might not have an orange marble\n    # We will draw the rest of the red marbles\n    marbles_drawn += 4 - 1  # Subtracting 1 because we already took one red marble\n\n    # Now we have all red, all blue, one green and still might not have an orange marble\n    # Now, no matter what, next marble has to be green or orange, ensuring we have all four colors\n    marbles_drawn += 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def ways_to_step(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return ways_to_step(n-1) + ways_to_step(n-2) + ways_to_step(n-3)\n    \n    # Calculate ways to reach the fourth step\n    ways_to_fourth_step = ways_to_step(4 - 1)  # avoiding the muddy fifth step\n    \n    # Calculate ways from the sixth step to the top (10th step)\n    ways_from_sixth_to_top = ways_to_step(10 - 6)\n    \n    # The total ways is the product of the ways to reach the fourth step\n    # and the ways from the sixth to the top\n    total_ways = ways_to_fourth_step * ways_from_sixth_to_top\n    \n    return total_ways\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    num_days = 7  # Monday to Sunday is 7 days\n    total_earnings = average_daily_earnings * num_days\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    \n    solution = solve(equation, x)\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # To maximize the largest number, we minimize the other numbers.\n    # The smallest odd numbers are 1, 3, 5, and 7. \n    # Let's assign these values to the four smallest numbers.\n    smallest_numbers_sum = 1 + 3 + 5 + 7  # Sum of the smallest odd numbers\n\n    # Subtract this sum from the total to find the largest number.\n    largest_number = 85 - smallest_numbers_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T, income = symbols('T income')\n    tax_eq = Eq((T / 100) * 30000 + (T + 3) / 100 * (income - 30000), (T + 1) / 100 * income)\n    solutions = solve(tax_eq, income)\n\n    # since income cannot be negative, we return the positive solution\n    return max(solutions)\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return n\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_coins = 21\n    total_value = 630  # in cents\n    count_fifty_cent = 0\n\n    for num_fifty_cent in range(total_coins + 1):  # iterate over all possible numbers of 50-cent coins\n        num_twenty_cent = total_coins - num_fifty_cent  # the remain coins must be 20-cent coins\n        # calculate the value with current number of 50-cent and 20-cent coins\n        value = num_fifty_cent * 50 + num_twenty_cent * 20\n        if value == total_value:\n            count_fifty_cent = num_fifty_cent  # we find the correct number of 50-cent coins\n            break\n\n    return count_fifty_cent\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Alan as 'a' meters per minute.\n    alan_speed = symbols('a')\n\n    # According to the problem, Phillip's speed is 'a + 15' meters per minute.\n    phillip_speed = alan_speed + 15\n\n    # Phillip walks for 12 minutes to arrive at B.\n    phillip_time = 12  # minutes\n\n    # Alan arrives 3 minutes later than Phillip, so Alan's walking time is 12 + 3 minutes.\n    alan_time = phillip_time + 3  # minutes\n\n    # Alan's distance to B is speed multiplied by time walked.\n    # Phillip's distance to B, which is the same distance, is his speed multiplied by time walked.\n    alan_distance = alan_speed * alan_time\n    phillip_distance = phillip_speed * phillip_time\n\n    # Both Alan and Phillip walk the same distance, but at different speeds and times.\n    # So we set Alan's distance equal to Phillip's distance.\n    distance_equation = Eq(alan_distance, phillip_distance)\n\n    # Solve for Alan's speed.\n    alan_speed_solution = solve(distance_equation, alan_speed)[0]\n\n    # Use Alan's speed to find the distance between A and B by multiplying by the time Alan walked.\n    distance_AB = alan_speed_solution * alan_time\n\n    return distance_AB\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_less_than_tom = 25.40\n\n    # Amount Alice had after spending\n    alice_after_spent = tom_money - alice_less_than_tom\n    # Amount Alice had before spending\n    alice_before_spent = alice_after_spent + alice_spent\n\n    return alice_before_spent\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_first_set = 28\n    number_of_elements_first_set = 5\n    mean_second_set = 11\n    number_of_elements_second_set = 12\n\n    total_sum_first_set = mean_first_set * number_of_elements_first_set\n    total_sum_second_set = mean_second_set * number_of_elements_second_set\n\n    total_sum_both_sets = total_sum_first_set + total_sum_second_set\n    total_elements_both_sets = number_of_elements_first_set + number_of_elements_second_set\n\n    mean_both_sets = total_sum_both_sets / total_elements_both_sets\n\n    return mean_both_sets\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    number = 2\n    while True:\n        if number > 25555:\n            break\n        \n        # Check if square root is an integer\n        if sqrt(number) == floor(sqrt(number)):\n            count += 1\n        \n        # Append 5 at the end of the number\n        number = number * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 0.20\n\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    num_benches = 9\n    distance_between_benches = 7\n\n    # The total distance that benches take: (num_benches - 1) * distance_between_benches\n    total_bench_length = total_distance - ((num_benches - 1) * distance_between_benches)\n    \n    # The length of each bench\n    bench_length = total_bench_length / num_benches\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies, a the students in class A, b the students in class B\n    x, a, b = symbols('x a b')\n\n    # Equation 1: Each student in class A gets 4 candies, so we need 20 more\n    equation1 = Eq(4 * a, x - 20)\n\n    # Equation 2: Each student in class B gets 6 candies and 16 are left\n    equation2 = Eq(6 * b, x - 16)\n\n    # Equation 3: The number of students in class A is twice the number in class B\n    equation3 = Eq(a, 2 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, a, b))\n\n    # x is the number of candies Miss Jenny has\n    return solutions[x]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    cuts = 21\n    regrowth = 5\n    # For each cut after the regrowth, the net loss is one arm less than the regrowth rate.\n    net_loss_per_cut = regrowth - 1\n    # Number of arms originally = number cut - (number of regrowths * net loss per cut)\n    original_arms = cuts - (cuts // regrowth * net_loss_per_cut)\n\n    return original_arms\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Maximum coins of the same color that can be drawn before ensuring a different color is picked\n    max_same_color = 6\n    \n    # To make sure to get 2 different colored coins, draw all of one color plus one more\n    ans = max_same_color + 1\n\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_first_to_fifth = 20\n    # The distance between 1st to 5th tree involves 4 intervals (as there are 4 gaps between 5 trees)\n    # Therefore, each interval length can be found\n    interval_length = distance_first_to_fifth / 4\n    \n    # From 8th to 14th tree involves 6 intervals (from 8th to 9th, 9th to 10th, ..., 13th to 14th)\n    distance_eighth_to_fourteenth = interval_length * 6\n    return distance_eighth_to_fourteenth\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "网络故障，请重试"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_meters_per_minute = 60\n    time_minutes = 150 / 60\n    distance = speed_meters_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Initialize count to 0\n    count = 0\n    \n    # Go through each number from 1 to 24\n    for i in range(1, 25):\n        # A number and its successive (or previous) number will be co-prime unless it is followed (or preceded) by a multiple\n        # Since 1 is co-prime with any other number, we only need to worry about numbers 2 to 12 and their respective multiples\n        # So we can only select numbers that are not followed by their multiples or by the multiples of their previous numbers\n        # This rules out numbers 2 to 12, which are each directly followed by their multiples\n        if i > 12:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip = 7\n    kevin = 3 * pip\n    qing_qing = kevin + 6\n    total_sweets = pip + kevin + qing_qing\n    return total_sweets\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n    equation1 = Eq(father, grey + 30)\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Devi's age is jerry_age + 8\n    # In 4 years, the ratio of Devi's to Jerry's age will be 5:7\n    jerry_age = symbols('jerry_age')\n    devi_age = jerry_age + 8\n\n    # equation representing the ratio in 4 years:\n    equation = Eq((devi_age + 4) / (jerry_age + 4), 5/7)\n\n    # Solving for Jerry's age\n    jerry_age_now = solve(equation, jerry_age)[0]\n\n    return jerry_age_now\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # If the books are distributed as evenly as possible, \n    # the extra books will be placed on top of the already filled layers\n    min_books_on_most_filled_layer = (total_books // layers) + (1 if total_books % layers != 0 else 0)\n\n    return min_books_on_most_filled_layer\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    \n    # Define the parts for Pip and Bud\n    parts_bud = 1\n    parts_pip = 5 * parts_bud\n\n    # Values to represent the parts in the graph\n    values = [parts_bud, parts_pip]\n\n    # The labels for each part\n    labels = ['Bud', 'Pip']\n\n    # Create a bar graph\n    plt.figure(figsize=(6,4))\n    plt.bar(labels, values, color=['blue', 'green'])\n\n    # Set the title and labels\n    plt.title('Parts Graph')\n    plt.xlabel('Persons')\n    plt.ylabel('Number of Apples (in parts)')\n\n    # Save the graph\n    plt.savefig('parts_graph.png')\n\n    # Close the plot to prevent it from displaying\n    plt.close()\n\n    # The graph is saved as 'parts_graph.png' in the current directory\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_seats = num_terms * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    digits = [3, 6, 9]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if j != i:\n                for k in digits:\n                    if k != i and k != j:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundreds in [1, 2]:\n        for tens in [0, 1, 2]:\n            for units in [0, 1, 2]:\n                if len(set([hundreds, tens, units])) == 3:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    number, _ = solve_congruence(*congruences)\n\n    # Adjust the obtained number to be within the required range (100-200)\n    while number < 100:\n        number += 3 * 5 * 7\n\n    return number if number < 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    min_divisor = remainder + 1  # The minimum divisor must be greater than the remainder\n    \n    min_dividend = quotient * min_divisor + remainder  # Using the dividend formula Q = (D - R) / d\n\n    return min_dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    y = symbols('y')\n    \n    # Hazel's age in three years\n    hazel_future_age = y + 3\n    \n    # Jessica's age in three years, which is 3 years younger than Hazel\n    jessica_future_age = hazel_future_age - 3\n    \n    # Hazel's age next year\n    hazel_next_year_age = hazel_future_age - 2\n    \n    # Jessica's age next year\n    jessica_next_year_age = jessica_future_age - 2\n    \n    # Total age next year\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year.subs(y, y)  # Substitute y for y to simplify expression if necessary\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10  # convert mm to cm\n\n    # sum the widths of all sections\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    diff_in_age_future = 38 - melanie_age\n    uncle_age_now = melanie_age + diff_in_age_future\n    \n    return uncle_age_now\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of cows initially and y as the number of goats initially\n    x, y = symbols('x y')\n\n    # From the problem we know that 65% of animals are cows, so 35% are goats\n    # x / (x + y) = 65/100 and y / (x + y) = 35/100\n\n    # When 240 more animals are added, the percentage of cows becomes 65% + 20% = 85%\n    # So, the new fraction of cows to total animals is (x + 240) / (x + y + 240) = 85/100\n    # We also know that the number of goats doubled, so: 2*y = y + 240\n\n    # Setting up our equations based on the information above\n    equation1 = Eq(x / (x + y), 65/100)\n    equation2 = Eq((x + 240) / (x + y + 240), 85/100)\n    equation3 = Eq(2 * y, y + 240)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"15:25\", \"%H:%M\")\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students_facing_teacher = 50\n\n    # Students who report a multiple of 4\n    students_turn_4 = set(range(4, 51, 4))\n\n    # Students who report a multiple of 6\n    students_turn_6 = set(range(6, 51, 6))\n\n    # Students who turn around for both multiples of 4 and multiples of 6\n    students_turn_both = students_turn_4.intersection(students_turn_6)\n\n    # Calculate the number of students still facing the teacher\n    students_facing_teacher -= (len(students_turn_4) + len(students_turn_6) - len(students_turn_both))\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    first_number = 2 + Fraction(3, 8)\n    second_number = 6 + Fraction(9, 12)\n    third_number = 1 + Fraction(14, 16)\n    ans = first_number + second_number + third_number\n    return ans\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree_of_x = 3\n    degree_of_y = 2  # This needs to be multiplied by n to get the total degree of y part\n\n    # Given total degree of monomial is 5\n    total_degree = 5\n\n    # Equation: degree_of_x + degree_of_y * n = total_degree\n    # So, 3 + 2n = 5\n    # Solving for n, we get n = (5 - 3) / 2\n\n    n = (total_degree - degree_of_x) // degree_of_y\n    return n\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_age_now = symbols('sister_age_now')\n\n    equation = Eq(sister_age_now + 3, sister_age_in_3_years)\n\n    solutions = solve(equation, sister_age_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Each suit has 13 distinct cards and there are 4 suits.\n    # To ensure to draw two cards of the same number/letter, according to the Pigeonhole Principle,\n    # we need to draw one more card than the total number of distinct cards.\n    \n    # There are 13 possible numbers/letters each appearing in 4 suits.\n    distinct_numbers = 13\n    \n    # To make sure we have two cards of the same number/letter, we draw one card\n    # from each of the 13 numbers/letters plus one more card.\n    cards_to_draw = distinct_numbers + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # We iterate over all possible 3-digit even numbers and check the condition.\n    # Note: Smallest 3-digit number is 100, but we start from 102 because 100 is not even,\n    # and the smallest even number with digits that sum up to 21 is clearly larger than 100.\n    for number in range(102, 1000, 2):  # step is 2 because the number is even\n        # Sum of digits of the current number\n        digit_sum = sum(int(digit) for digit in str(number))\n        # Check if the sum of digits is 21\n        if digit_sum == 21:\n            # Return the first (smallest) such number we find\n            return number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    for i in range(2, 20):\n        ans += i * sum(1 / j for j in range(i + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_value = 18  # The value of 3/5 of the sum\n    whole_amount = (part_value * 5) / 3  # Calculate the whole amount\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    # Given the equation 3x + 5 = 20\n    # We need to find the value of x\n    # Solving the equation for x\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n    \n    # Equation based on the given information\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n    \n    # Solve the equation for the book price\n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_sum = sum([i**2 for i in range(1, 20, 2)])\n    ans = even_sum - odd_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    poured_water = 2 * 6\n    remaining_water = total_water - poured_water\n    return remaining_water\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_cost = 156\n    cactus_cost = 2\n    sunflower_cost = 7\n\n    # Let the number of sunflowers be x\n    # Then the number of cacti is x + 6\n    # 2*(x+6) + 7*x = 156\n    # 2x + 12 + 7x = 156\n    # 9x + 12 = 156\n    # 9x = 144\n    # x = 16 (number of sunflowers)\n    # cacti = x + 6\n\n    x = (total_cost - 12) // 9\n    cacti = x + 6\n\n    return cacti\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_cost = symbols('book_cost')\n    pencil_cost = 40  # pencil cost in pence\n\n    # Sarah bought 8 books and 3 pencils, Rebecca bought 3 books and 8 pencils\n    # Sarah paid £1.00 (100 pence) more than Rebecca\n    sarah_total = 8 * book_cost + 3 * pencil_cost\n    rebecca_total = 3 * book_cost + 8 * pencil_cost\n\n    # Create the equation based on the total cost difference\n    equation = Eq(sarah_total, rebecca_total + 100)  # £1 = 100 pence\n\n    # Solve for the cost of a book\n    solution = solve(equation, book_cost)\n\n    return solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n\n    return jack_points\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of Liverpool and Manchester United fans\n    L, M = symbols('L M')\n\n    # Initial condition: there are 1000 more Liverpool fans than Manchester United fans\n    equation1 = Eq(L, M + 1000)\n\n    # 30 minutes later: 472 Liverpool fans and 4836 Manchester United fans enter the stadium\n    # After this, the number of Manchester United fans becomes 3 times that of Liverpool fans\n    equation2 = Eq(M + 4836, 3 * (L + 472))\n\n    # Solve the equations for L and M\n    solutions = solve((equation1, equation2), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ans = comb(total_players, players_needed)\n    return ans\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_money = 3 + 2  # Money left after giving $2 to Mike\n    # Before giving to Mike, she had double the amount (since she gave half to Nini)\n    before_nini = remaining_money * 2  \n    # Before giving to Bob, she had double the amount (since she gave half to Bob)\n    before_bob = before_nini * 2 \n    # Before giving to her mother, she had double the amount (since she gave half to her mother)\n    original_money = before_bob * 2  \n\n    return original_money\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n    \n    # Class A equation: peaches = 5 * students_A + 10\n    eq1 = Eq(peaches, 5 * students_A + 10)\n    \n    # Class B equation: peaches = 8 * students_B - 2\n    eq2 = Eq(peaches, 8 * students_B - 2)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (peaches, students_B))\n    \n    # Return the number of peaches\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    num = \"\"\n    i = 1\n    while len(num) < 2023:\n        num += str(i)\n        i += 1\n    return int(num[2022])\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birthday_year = 98\n    current_year = 1\n    age_on_birthday = 11  # Age on 31/12/99 as the birthday is on the next day\n\n    # Calculate age on 31/12/01 by adding the difference in years\n    age_on_31_12_01 = age_on_birthday + (current_year - birthday_year)\n\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    perms = permutations([4, 6, 2, 5])\n    valid_numbers = [int(''.join(map(str, perm))) for perm in perms if perm[-1] % 2 != 0]\n    return min(valid_numbers)\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps Siti had initially.\n    t, c = symbols('t c')\n\n    # Given ratio of T-shirts to caps is 8:5\n    ratio = Eq(t / c, 8 / 5)\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps.\n    t_sold = t / 4\n    c_sold = c / 5\n\n    # Money collected from T-shirts and caps.\n    money_tshirts = t_sold * 3\n    money_caps = c_sold * 5\n\n    # Total money collected.\n    total_money = Eq(money_tshirts + money_caps, 132)\n\n    # Solve the system of equations.\n    solutions = solve((ratio, total_money), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n\n    trips = -(-total_students // boat_capacity)  # Ceiling division to get the least number of trips\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    target_term = 36\n\n    ordinal_number = ((target_term - first_term) // difference) + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe, eric = symbols('joe eric')\n\n    # Equation representing the initial condition\n    initial_condition = Eq(joe, 7 * eric)\n\n    # Equation after Joe gives some cards to Eric, and both have 168 cards\n    final_condition = Eq(joe - eric, 168)\n\n    # Solving the system of equations\n    solutions = solve((initial_condition, final_condition), (joe, eric))\n\n    # Amount Joe must give to Eric\n    cards_to_give = solutions[joe] - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    # Loop over the possible ones digits, which are prime (2, 3, 5, 7)\n    for ones in [2, 3, 5, 7]:\n        # Loop over the possible tens digits, which are prime (2, 3, 5, 7)\n        for tens in [2, 3, 5, 7]:\n            # Construct the number\n            N = tens * 10 + ones\n            # Check if the constructed number is prime\n            if isprime(N):\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    escaped = 5\n    additional_catch = 9\n\n    total_catch = initial_catch - escaped + additional_catch\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # 1 hour 20 minutes = 80 minutes\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # Since the groups need to be different, x1 can be from 1 to 9\n        x2 = 10 - x1         # x2 will be the rest of the apples\n        if x1 != x2:         # Ensure x1 and x2 are different\n            count += 1\n    return count // 2        # Divided by 2 to account for double counting (x1,x2) and (x2,x1)\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n\n    num_students = 5\n    ways = math.factorial(num_students)\n\n    return ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    for anne_pears in range(1, 38):\n        charlie_pears = 38 - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # The numbers given in the problem are 6 and 19.\n    # If the person 6 stands directly opposite to person 19, there must be an equal number\n    # of people between 6 and 19 in each direction.\n\n    # The total people in the circle = the number of people between 6 and 19 (let's call this n)\n    # in one direction + 6 and 19 themselves + n people in the opposite direction.\n    # If n is the number of people between 6 and 19 in one direction, then the opposite side\n    # of the circle should have the same number of people, n.\n    # Therefore, total people = n + 1 (for person 6) + 1 (for person 19) + n = 2n + 2.\n\n    # The distance from person 6 to 19 is |19 - 6| = 13.\n    # This implies that n = 13, because we just calculated the number of people from 6 to 19\n    # including one of them but not both, hence we have one extra person we've counted.\n\n    # Subtracting the extra count we have the actual n\n    n = 13 - 1\n    \n    # The total number of people playing is 2n + 2\n    total_people = 2 * n + 2\n    return total_people\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    difference = amy_swimming_times - joanne_swimming_times\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n\n    return 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N_base8 = \"12345654321\"\n    N_base10 = int(N_base8, 8)\n    remainder7 = N_base10 % 7\n    remainder9 = N_base10 % 9\n    ans = remainder7 + remainder9\n    return ans\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    # Isaac had 5 times as many stamps as Joseph initially\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After Joseph received 154 stamps, he had 9/10 as many stamps as Isaac\n    equation2 = Eq(joseph + 154, (9 / 10) * isaac)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n\n    zero_count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        zero_count += 1\n\n    return zero_count\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Ratio of Linda's speed to Ted's speed is 3:4\n    # Therefore, when Linda has covered a distance of d meter, Ted has covered (4/3) * d meter\n    # When they meet, let's assume Linda has covered 1200m\n    linda_distance = 1200\n    ted_distance = (4/3) * linda_distance\n\n    # The total path length is the sum of the distances covered by Linda and Ted\n    total_path_length = linda_distance + ted_distance\n\n    return total_path_length\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # To make the number divisible by 9, sum of its digits must be divisible by 9.\n    # The sum of the digits in 2018 is 2 + 0 + 1 + 8 = 11.\n    # The smallest number A that would make the sum divisible by 9 is 7, because 11 + 7 = 18 and 18 is divisible by 9.\n    A = 7\n    five_digit_number = 20180 + A\n\n    # Now find the remainder when this number is divided by 8\n    remainder = five_digit_number % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Squirrel Ryan has 5 in front\n    ryan_front = 5\n    # Squirrel Elvis has 7 behind\n    elvis_behind = 7\n    # There's 1 squirrel between Ryan and Elvis\n    between = 1\n\n    # Total squirrels = Ryan's front + Between + Elvis (himself) + Elvis's behind + Ryan (himself)\n    total_squirrels = ryan_front + between + 1 + elvis_behind + 1\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "from math import factorial\n\ndef derangement(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef solution():\n    return derangement(6)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    ans = (percentage * total_weight) / 100\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    \n    # Total work done is the number of workers multiplied by the number of days\n    total_work = workers * days_for_3_workers\n    \n    # If one worker is doing all the work, we divide the total work by 1\n    days_for_1_worker = total_work / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    total_amount = 45\n    percentage = 30\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    # Sum of odd numbers between 0 and 20\n    odd_sum = sum(range(1, 20, 2))\n    return odd_sum\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack_age_now = symbols('jack_age_now')\n\n    # Equation representing the problem statement\n    equation = Eq((jack_age_now - 5), (jack_age_now + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    jack_current_age_solution = solve(equation, jack_age_now)\n\n    # Get the value of Jack's current age from the solution\n    return jack_current_age_solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    money_spent_on_bag_percentage = 70\n    remaining_money_percentage = 100 - money_spent_on_bag_percentage\n    purse_fraction_of_remaining_money = 3/8\n\n    money_spent_on_purse_percentage = purse_fraction_of_remaining_money * remaining_money_percentage\n\n    return money_spent_on_purse_percentage\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Original ratio of School P to School Q is 2:3\n    # Initial numbers of pupils are 2x (School P) and 3x (School Q)\n\n    # 240 Primary one pupils were admitted to School P and School Q respectively\n    # The final numbers of pupils become 2x + 240 (School P) and 3x + 240 (School Q)\n\n    # The final ratio of School P to School Q is 3:4\n    # Final numbers are 3y (School P) and 4y (School Q)\n\n    # The ratios are equivalent, so we have the equations:\n    # (2x + 240) / (3x + 240) = 3 / 4\n    # Solving for x gives us the initial number of pupils in School P, which is 2x\n\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation = Eq((2*x + 240) / (3*x + 240), 3/4)\n    x_value = solve(equation, x)[0]\n\n    # The initial number of pupils in School P\n    initial_pupils = 2 * x_value\n    return initial_pupils\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    num_vowels = len([char for char in word if char in vowels])\n    num_consonants = len(word) - num_vowels\n    \n    # Total permutations without any restriction\n    total_perms = factorial(len(word))\n    \n    # Permutations of vowels only\n    vowel_perms = factorial(num_vowels)\n    \n    # Possible places to insert the vowel block among consonants\n    placements = num_consonants + 1\n    \n    # Permutations where vowels are always together treated as single block\n    vowels_together_perms = vowel_perms * factorial(placements)\n    \n    # Subtracting permutations where vowels are together from total permutations\n    ans = total_perms - vowels_together_perms\n    \n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    # Total amount of candy originally\n    total_candy = 5 * 12\n    # Number of students after 1 more student joins\n    num_students = 5 + 1\n    # Recalculate candies per student\n    candies_per_student = total_candy // num_students\n\n    return candies_per_student\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = 11\n\n    while wrappers >= 3:\n        exchange = wrappers // 3\n        sweets_bought += exchange\n        wrappers = wrappers % 3 + exchange\n\n    return sweets_bought\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP are the angle bisectors, they will divide angles ABC and ACB equally.\n    # Let's denote the m∠ABC as x and m∠ACB as y.\n    # BPC will be an exterior angle to triangle ABC. By exterior angle theorem:\n    # m∠BPC = m∠ABC/2 + m∠ACB/2\n    # We also know that the sum of the angles in triangle is 180 degrees:\n    # m∠BAC + m∠ABC + m∠ACB = 180\n    # We insert the known values:\n    # 50 + x + y = 180\n    # x + y = 130\n    # Now we can express m∠BPC:\n    # m∠BPC = x/2 + y/2\n    # But since x + y = 130:\n    # m∠BPC = (x + y)/2\n    # m∠BPC = 130/2\n    # m∠BPC = 65\n    return 65\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of each type of bird\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)                         # The number of two-tailed birds\n    eq2 = Eq(three_tailed, six_tailed / 2 + 2)                         # The number of three-tailed birds\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)  # Total number of tails\n    eq4 = Eq((two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)      # Difference between heads and tails\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = '11:40 AM'\n    duration_str = '4:50'\n\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M %p')\n    duration = timedelta(hours=int(duration_str.split(':')[0]),\n                         minutes=int(duration_str.split(':')[1]))\n    \n    leave_time = arrival_time + duration\n    leave_time_str = leave_time.strftime('%I:%M %p')\n\n    return leave_time_str.strip(\"0\")\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Convert kg to g\n    total_sweets_g = 5 * 1000\n\n    # Find out how many bags\n    bag_weight_g = 250\n    num_bags = total_sweets_g / bag_weight_g\n\n    # Cost and selling price\n    cost_per_kg = 10\n    sell_price_per_bag = 0.65\n\n    # Total cost and total revenue\n    total_cost = cost_per_kg\n    total_revenue = num_bags * sell_price_per_bag\n\n    # Calculate profit\n    profit = total_revenue - total_cost\n\n    # Calculate percentage profit\n    percentage_profit = (profit / total_cost) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    factor = numerator / 3\n\n    ans = denominator / factor\n\n    return int(ans)\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) // position_difference\n    \n    # Calculate the 12th number\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n    \n    return twelfth_number\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    ways_Ayton_Beeton = 4\n    ways_Beeton_Ceeton = 5\n    ways_Ceeton_Deeton = 6\n    ways_Ayton_Deeton_direct = 3\n    \n    # Multiplication principle for Ayton -> Beeton -> Ceeton -> Deeton\n    ways_Ayton_Beeton_Ceeton_Deeton = ways_Ayton_Beeton * ways_Beeton_Ceeton * ways_Ceeton_Deeton\n    \n    # Total ways including direct roads from Ayton to Deeton\n    total_ways = ways_Ayton_Beeton_Ceeton_Deeton + ways_Ayton_Deeton_direct\n    \n    return total_ways\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        multiples = 0\n        if i % 2 == 0: # Check for multiple of 2\n            multiples += 1\n        if i % 3 == 0: # Check for multiple of 3\n            multiples += 1\n        if i % 4 == 0: # Check for multiple of 4\n            multiples += 1\n        \n        # If the number is underlined exactly twice, increase the count\n        if multiples == 2:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Joe's initial amount of money as 'joe'.\n    joe = symbols('joe')\n\n    # Equation: Sally's remaining money + Joe's remaining money = Total remaining money\n    # Sally had 3.75, spent 2.50, so she has 3.75 - 2.50 left.\n    # Joe had joe amount of money, spent 2.50, so he has joe - 2.50 left.\n    # Together they have 5 dollars left after spending on ice-creams.\n    equation = Eq((3.75 - 2.50) + (joe - 2.50), 5)\n\n    # Solve the equation to find out how much money Joe had at first.\n    solution = solve(equation, joe)\n\n    # Return the solution to find how much money Joe had initially.\n    return solution[0]\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    total_first_3_days = 3 * 135\n    total_last_5_days = 5 * 151\n    total_days = 8\n    total_trees = total_first_3_days + total_last_5_days\n    average_trees = total_trees / total_days\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    eq = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    magic_number_value = solve(eq, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    # Since Eddie can pick 2 of the 4 options,\n    # we need to calculate the combinations of picking 2 from 4 categories of dishes\n    categories_combinations = comb(4, 2)\n\n    # Calculate the total number of choices for picking two different categories\n    salads_soups = comb(15, 1) * comb(20, 1)\n    salads_vegetables = comb(15, 1) * comb(12, 1)\n    salads_sandwiches = comb(15, 1) * comb(6, 1)\n    soups_vegetables = comb(20, 1) * comb(12, 1)\n    soups_sandwiches = comb(20, 1) * comb(6, 1)\n    vegetables_sandwiches = comb(12, 1) * comb(6, 1)\n\n    total_choices = (salads_soups + salads_vegetables + salads_sandwiches +\n                     soups_vegetables + soups_sandwiches + vegetables_sandwiches)\n\n    # The final result is the product of the combinations of categories and the choices within each category\n    ans = categories_combinations * total_choices\n    return ans\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    # Start with the smallest possible prime 3 and check consecutive numbers\n    n = 3\n    while True:\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and\n                isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Start from the smallest possible square and work outwards\n    boys_total, girls_total = 0, 0\n    length = 1  # Start with a square of side length 1 and increase by 2 each time for layers\n    \n    # Keep adding layers until the difference between boys and girls is 32\n    while True:\n        if length % 2 == 0:  # even length, this layer is girls\n            girls_total += length * 4 - 4  # each layer adds length*4 - 4 girls\n        else:  # odd length, this layer is boys\n            boys_total += length * 4 - 4  # each layer adds length*4 - 4 boys\n        if boys_total - girls_total == 32:  # check the condition\n            break\n        length += 1  # move to the next layer\n    \n    # Calculate the total number of students\n    students_total = boys_total + girls_total + 1  # +1 for the initial single student who is a boy\n    return students_total\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from fractions import Fraction\n    \n    lemons = symbols('lemons')\n\n    # lemons are what's left after subtracting the fraction of apples and bananas\n    apples = Fraction(2, 3) * (lemons + 12)\n    bananas = Fraction(1, 9) * (lemons + 12)\n\n    # The sum of apples, bananas, and lemons should equal the total quantity, which is lemons + 12\n    total_fruits = lemons + apples + bananas\n\n    # Since apples are 12 more than lemons, we set up the equation as apples - lemons = 12\n    equation = Eq(total_fruits, lemons + 12)\n\n    # Solve the equation for lemons\n    solutions = solve(equation, lemons)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the money Max originally had, and y be the money Anthony originally had.\n    x, y = symbols('x y')\n    \n    # If Max bought the chocolates, remaining money of Max and Anthony is x-12 and y, respectively.\n    # The ratio of the remaining amount is 2:5.\n    equation1 = Eq((x - 12) / y, 2 / 5)\n    \n    # If Anthony bought the chocolates, remaining money of Max and Anthony is x and y-12, respectively.\n    # The ratio of the remaining amount becomes 8:13.\n    equation2 = Eq(x / (y - 12), 8 / 13)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # equation for the initial difference in mass between mangoes and strawberries\n    equation1 = Eq(mangoes - strawberries, 448)\n\n    # equation after giving away 900g of mangoes\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables for the original number of red and blue stickers\n    red, blue, gave_away = symbols('red blue gave_away')\n    \n    # Write the equations according to the problem's description\n    # Liz had an equal number of red and blue stickers initially\n    equation1 = Eq(red, blue)\n    # She gave away 2/3 of her red stickers\n    equation2 = Eq(red - red * 2/3, red * 1/3)\n    # In the end, she was left with 1/4 of her stickers\n    # Therefore, she must have given away 3/4 of her stickers\n    equation3 = Eq(red * 1/3 + (blue - gave_away), (red + blue) * 1/4)\n    \n    # Solve for the fraction of blue stickers she gave away\n    solutions = solve((equation1, equation2, equation3), (red, blue, gave_away))\n    \n    # Calculate the fraction of blue stickers she gave away\n    fraction_blue_gave_away = solutions[gave_away] / solutions[blue]\n    \n    return fraction_blue_gave_away\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Start with the smallest pile with at least one marble\n    for biggest_pile in range(1, 16):\n        for x1 in range(1, biggest_pile):\n            for x2 in range(1, x1):\n                for x3 in range(1, x2):\n                    # Ensure that we have exactly 16 marbles in total.\n                    if x1 + x2 + x3 + biggest_pile == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # There are 20 pens to be divided among 6 kids, with each kid getting at least one pen.\n    # This problem can be thought of as placing 20 - 6 = 14 indistinguishable items into 6 distinguishable bins.\n    # This is a problem of combinations with repetition and can be calculated by the formula:\n    # (n + k - 1)! / (k! * (n - 1)!)\n    # where n is the number of items and k is the number of bins.\n    # We subtract 6 because we're giving 1 pen to each kid initially.\n\n    n = 14  # Remaining pens after giving 1 pen to each kid\n    k = 6   # Kids\n\n    # Calculate the binomial coefficient for n+k-1 choose k-1\n    ans = factorial(n + k - 1) // (factorial(k - 1) * factorial(n))\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Finding the unit digit of 444^2022.\n    # The unit digit of 444^2022 is the same as the unit digit of 4^2022\n    # since other digits do not affect the unit place.\n    # The unit digit of powers of 4 has a pattern: 4, 6, 4, 6, ...\n    # which repeats every 2 powers. Therefore, we only need to find the unit digit\n    # for the power of 2022 modulo 2. Since 2022 is even, it would be equivalent\n    # to the unit digit of 4^0 which is 6.\n    return 6\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths = {\n        '10 mm': 10 / 1000,  # converting to meters\n        '100 cm': 100 / 100,  # converting to meters\n        '10 m': 10,  # already in meters\n        '2 km': 2 * 1000,  # converting to meters\n        '2800 cm': 2800 / 100,  # converting to meters\n        '2500 m': 2500,  # already in meters\n        '100 mm': 100 / 1000,  # converting to meters\n        '100 m': 100  # already in meters\n    }\n    \n    smallest_length = min(lengths.values())\n    \n    # Finding the original representation of the smallest length\n    for original, converted in lengths.items():\n        if converted == smallest_length:\n            ans = original.split(' ')[0]  # Return only the numeric part\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increment = 4\n\n    # Calculate the number of terms in the arithmetic sequence\n    num_days = ((last_day_pages - first_day_pages) // daily_increment) + 1\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    digits = \"123456\"\n    three_digit_permutations = permutations(digits, 3)\n    count = 0\n    \n    for permutation in three_digit_permutations:\n        number = ''.join(permutation)\n        if int(number) % 2 != 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    can_swim = 20\n    can_play_basketball = 25\n    can_swim_and_play_basketball = 10\n    can_neither = 9\n\n    # Using the Inclusion-Exclusion Principle\n    total_students = (can_swim + can_play_basketball - can_swim_and_play_basketball + can_neither)\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1992\n    while not is_palindrome(steps):\n        steps += 1\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n\n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if (cows * legs_per_cow + ducks * legs_per_duck) == total_legs:\n            ans = ducks\n            break\n\n    return ans\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    avg_height_girls, avg_height_boys = symbols('avg_height_girls avg_height_boys')\n\n    # Given data\n    num_girls = 11\n    num_boys = 5\n    total_avg_height = 122.5\n    girls_avg_height_more = 3.2\n\n    # Create equations based on given conditions\n    equation1 = Eq(avg_height_girls, avg_height_boys + girls_avg_height_more)\n    equation2 = Eq((num_girls * avg_height_girls + num_boys * avg_height_boys) / (num_girls + num_boys), total_avg_height)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (avg_height_girls, avg_height_boys))\n\n    return solutions[avg_height_girls]\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils', integer=True)\n\n    # If he gives each of his pupils 4 bookmarks, he will have 8 bookmarks left.\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n\n    # If he gives each of his pupils 6 bookmarks instead, he will be short of 10 bookmarks.\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    # Let the number of girls be x\n    # Then, the number of boys is 70 - x\n    \n    # The total score for girls is 70 * x\n    # The total score for boys is 63 * (70 - x)\n    # The total score for all students is 66 * 70\n    \n    # We can set up the equation as follows:\n    # 70 * x + 63 * (70 - x) = 66 * 70\n    # Simplify and solve for x\n    total_score = 66 * 70\n    boys_average = 63\n    girls_average = 70\n    x = symbols('x')\n    equation = Eq(girls_average * x + boys_average * (70 - x), total_score)\n    girls_count = solve(equation, x)[0]\n    \n    return girls_count\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since it's an arithmetic sequence with a common difference of 2 (odd numbers),\n    # the middle term must be the average. We can calculate the middle term by dividing\n    # the sum by the number of terms.\n    middle_term = 1503 // 9\n    \n    # Finding the smallest number (first term) considering the sequence is centered\n    # around the middle term.\n    # The first term will be 4 terms away from the middle term with a common difference of 2.\n    smallest_term = middle_term - 4 * 2\n    \n    return smallest_term\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Number of triangles\n    # A plane can be divided into a maximum number of regions by n lines, which is (n*(n+1))/2 + 1 regions.\n    # Each new line (or triangle edge) can intersect with all previous lines at most once, creating additional regions.\n    n_triangles = 5\n    \n    # Each triangle has 3 edges, so there are 3 * n_triangles edges to be considered.\n    # However, since each triangle shares edges with possibly adjacent triangles,\n    # not all edges are distinct lines in terms of dividing the plane into regions.\n    n_lines = n_triangles * 3 \n\n    # Any 2 lines intersect at a point that hasn't been used as an intersection point before,\n    # Each intersection can create at most 1 new region.\n    # The maximum number of intersection points between the lines is given by \"n choose 2\", which is n(n-1)/2.\n    n_intersections = (n_lines * (n_lines - 1)) // 2\n\n    # Each triangle adds the possibility of one more region within it, which was not counted among the intersections.\n    n_regions_from_triangles = n_triangles\n\n    # The maximum number of regions the plane can be divided into is \n    # the number of regions formed by the lines plus the regions within triangles:\n    max_regions = n_intersections + n_regions_from_triangles + 1\n\n    return max_regions\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n\n    difference = (term_108 - term_32) / (108 - 32)\n    first_term = term_32 - (32 - 1) * difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 other individuals that A can pass the ball to.\n    first_pass_options = 3\n    \n    # After the first pass, the player with the ball has 2 options to pass, excluding A and the player just passed to.\n    second_pass_options = 2\n    \n    # For the third and final pass, the player with the ball must pass it back to A, and thus has only 1 option.\n    third_pass_options = 1\n    \n    # The number of different methods is the product of the options at each pass.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume x represents the number of candies Kate had before eating.\n    x = symbols('x')\n\n    # If Kate ate 1/4 of the candies and had 42 candies left, we can create an equation.\n    kate_ate_eq = Eq(x - x/4, 42)\n\n    # Solve for x to find out how many candies Kate initially had.\n    candies_kate_initial = solve(kate_ate_eq, x)[0]\n\n    # Jane ate 1/3 of the candies plus 4 candies and gave the remaining to Kate.\n    # Which means (candies_jane_initial - 4) * (2/3) = candies_kate_initial\n    candies_jane_initial = symbols('candies_jane_initial')\n    jane_ate_eq = Eq((candies_jane_initial - 4) * (2/3), candies_kate_initial)\n\n    # Solve for candies_jane_initial.\n    candies_jane_initial_amount = solve(jane_ate_eq, candies_jane_initial)[0]\n\n    # Donna kept half of the number of candies plus 3 candies and gave the remaining to Jane.\n    # Which means (candies_donna_initial / 2 + 3) = candies_jane_initial_amount\n    candies_donna_initial = symbols('candies_donna_initial')\n    donna_kept_eq = Eq(candies_donna_initial / 2 + 3, candies_jane_initial_amount)\n\n    # Solve for candies_donna_initial.\n    candies_donna_initial_amount = solve(donna_kept_eq, candies_donna_initial)[0]\n\n    return candies_donna_initial_amount\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    total_books = 30\n    books_given = 4\n\n    # After giving 4 books away, both have the same number\n    # So we can set up the equation: Jason - 4 = Anthea + 4\n    # Let's first find out how many books Anthea has initially\n    anthea_books = (total_books - books_given) / 2\n\n    # Now we can find out how many books Jason has initially\n    jason_books = anthea_books + books_given\n\n    # The difference in the number of books they originally have\n    difference = jason_books - anthea_books\n\n    return int(difference)\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    return 4 * 10 // math.gcd(4, 10)\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    nums = [0.98, 1.98, 2.98, 3.98]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q, r, s in permutations(range(10), 4):\n        if (p != 0) and (2 * r == p + q) and (2 * s == r):\n            ans = q * 10 + p\n            return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2 # m/s\n    time = 12 * 60 # converting minutes to seconds\n    distance = speed * time\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    term_1 = common_factor_1 * common_factor_2 * 17  # 2020 is 4*505 and then simplified by 68 is 17\n    term_2 = common_factor_1 * common_factor_2 * 32  # Simplify 505 by 4 and multiplied by 128 is 32\n\n    ans = term_1 + term_2\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = total_sugar / total_solution\n    return concentration\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    newspaper_cost = 2.20\n    change_received = 4.83\n    note_given = 10\n\n    tissues_cost = note_given - (newspaper_cost + change_received)\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x represent the original number of boys (which is also the number of girls)\n    x = symbols('x')\n    \n    # after 3/5 of the boys and 42 girls left, there are 12 more boys than girls\n    # remaining boys: x - (3/5) * x\n    # remaining girls: x - 42\n    # equation: (x - (3/5) * x) = (x - 42) + 12\n    equation = Eq(x - (3/5) * x, x - 42 + 12)\n\n    # solve for x\n    original_number = solve(equation, x)[0]\n\n    # total number of students = number of boys + number of girls\n    total_students = original_number * 2\n\n    return total_students\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    A_per_day = 1 / (12)  # A can finish the job in 12 days\n    B_per_day = 1 / (12 + 12)  # B can finish the job in 12 + 12 days because A is twice as fast as B\n\n    combined_per_day = A_per_day + B_per_day  # Combined work per day by A and B\n    total_days = 1 / combined_per_day  # Total time to complete the job\n\n    return total_days\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n\n    digits = '123'\n    all_permutations = set(permutations(digits, r=1)) | set(permutations(digits, r=2)) | set(permutations(digits, r=3))\n    \n    return len(all_permutations)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n    return cucumbers\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase_in_temp = today_temp - last_night_temp\n    return increase_in_temp\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let's denote the distance from home to office as d (in km).\n    # Let t be the time in hours at the correct speed to reach on time.\n    \n    # When Mike travels at 3 km/h, he is 12 minutes late.\n    # Therefore, the time taken when travelling at 3 km/h is t + 12 / 60\n    \n    # When Mike travels at 5 km/h, he is 4 minutes early.\n    # Therefore, the time taken when travelling at 5 km/h is t - 4 / 60\n    \n    # We can set up two equations based on the information given:\n    # d = 3 * (t + 12/60) (1)\n    # d = 5 * (t - 4/60)  (2)\n    \n    # From equations (1) and (2), we can solve for t:\n    # 3 * (t + 12/60) = 5 * (t - 4/60)\n    # 3t + 3*(12/60) = 5t - 5*(4/60)\n    # 3t + 6/10 = 5t - 2/10\n    # 2t = 3/5 + 1/5\n    # 2t = 4/5\n    # t = 4/(5*2)\n    # t = 4/10\n    # t = 2/5 hours\n    \n    # Now that we have t, we can find the distance d by substituting t back into one of the equations:\n    # d = 3 * (2/5 + 12/60)\n    d = 3 * (2/5 + 1/5) # 12 minutes is 1/5th of an hour\n    \n    # Calculate the distance\n    return d\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Four different colored socks in a row\n    ways_4_different_socks = permutations(4, 4)\n\n    # Two pairs of different colored socks in a row (ABAB)\n    # Since the pairs are indistinguishable within themselves, we need to divide by factorial of each pair's count\n    ways_2_pairs_socks = permutations(4, 4) // (factorial(2) * factorial(2))\n\n    return ways_4_different_socks, ways_2_pairs_socks\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Initial ratio of boys to girls: 3 : 2\n    # Let initial number of boys = 3x and girls = 2x\n    # After 12 boys and 12 girls joined, we have:\n    # Number of boys = 3x + 12 and number of girls = 2x + 12\n    # New ratio of boys to girls: 19 : 14\n    # Therefore, (3x + 12)/(2x + 12) = 19/14\n    # Solving for x, we get:\n    # 14(3x + 12) = 19(2x + 12)\n    # 42x + 168 = 38x + 228\n    # 42x - 38x = 228 - 168\n    # 4x = 60\n    # x = 15\n\n    # Initial number of boys = 3x = 3 * 15 = 45\n    # Initial number of girls = 2x = 2 * 15 = 30\n    # After 12 boys and 12 girls joined, total number of children:\n    # Number of boys = 45 + 12 = 57\n    # Number of girls = 30 + 12 = 42\n    # Total number of children = 57 + 42 = 99\n\n    return 99\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2  # Divide equally into two rooms\n    return pupils_each_room\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    welded_part = 3\n\n    full_length = length1 + length2 - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    red_tiles = 0\n    green_tiles = 0\n    \n    for i in range(0, side_length):\n        if i % 2 == 0:\n            # red layer\n            if i == 0:\n                red_tiles += side_length * side_length\n            else:\n                red_tiles += (side_length - 2*i) * (side_length - 2*i)\n        else:\n            # green layer\n            green_tiles += (side_length - 2*i) * (side_length - 2*i)\n    \n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    tiles_more = abs(red_tiles - green_tiles)\n    \n    return dominant_color, tiles_more\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Tearth is the period on Earth\n    # Tmoon is the period on the Moon\n    # g_earth is the acceleration due to gravity on Earth\n    # g_moon is the acceleration due to gravity on the Moon\n    # The formula for the period T of a pendulum is T = 2 * pi * sqrt(l / g),\n    # where l is the length of the pendulum and g is the acceleration due to gravity.\n    # The length of the pendulum is the same on the Earth and the Moon.\n\n    # Since Tearth is proportional to sqrt(g_earth)\n    # and Tmoon is proportional to sqrt(g_moon),\n    # we can say that Tmoon / Tearth = sqrt(g_moon / g_earth).\n\n    # Given that g_moon is 1/6 of g_earth,\n    # Tmoon / Tearth = sqrt(1/6)\n\n    Tearth = 1  # The period on Earth\n    g_earth_to_g_moon_ratio = 1 / 6  # The ratio of gravitational acceleration\n\n    Tmoon = Tearth * sqrt(g_earth_to_g_moon_ratio)\n\n    return Tmoon\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"1/3/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"15/4/2023\", \"%d/%m/%Y\")\n    delta = end_date - start_date\n    return delta.days + 1  # Include both the first and last day\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let x be the number of correct answers William got,\n    # Then, Justin got x+4 correct answers (since Justin gets 24 more points, \n    # and the difference between points for correct and incorrect answers is 6 - (-2) = 8, \n    # therefore, the difference in the number of correct answers must be 24 / 8 = 3)\n    \n    for x in range(11): # William can answer between 0 and 10 questions correctly\n        justin_correct = x + 4\n        william_correct = x\n        # Justin's points\n        justin_points = justin_correct * 6 + (10 - justin_correct) * (-2)\n        # William's points\n        william_points = william_correct * 6 + (10 - william_correct) * (-2)\n        # Check if their total points add up to 96 and Justin has 24 more points\n        if (justin_points + william_points == 96) and (justin_points - william_points == 24):\n            return william_correct\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    work_per_day_a = 1 / 15\n    work_per_day_b = 1 / 10\n    \n    work_done_in_3_days = 3 * (work_per_day_a + work_per_day_b)\n    remaining_work = 1 - work_done_in_3_days\n    days_for_b_to_finish = remaining_work / work_per_day_b\n    \n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    from math import sqrt, ceil\n\n    num_people = 100\n    side_length = ceil(sqrt(num_people))\n\n    if side_length == 1:\n        return num_people\n\n    inner_square_people = (side_length - 2) ** 2\n    outermost_people = num_people - inner_square_people\n    \n    return outermost_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is -4\n\n    # The first negative term is when the term is less than 0\n    # a_n = a_1 + (n - 1) * d < 0\n    # 50 + (n - 1) * (-4) < 0\n    # (n - 1) * (-4) < -50\n    # n - 1 > 50 / 4\n    # n > 12.5\n    # Since n must be an integer, n = 13 will be the first n to produce a negative term\n    \n    num_terms = 13  # Because the 13th term will be the first negative one\n\n    return num_terms\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The winning strategy is to always leave the opponent with two piles having the\n    # same number of cards on each turn. Since 88 is larger than 52, Tom needs to\n    # reduce Pile A to have the same number of cards as Pile B on his first turn. \n    # By doing this, no matter how Jane picks the cards, Tom can always mirror her\n    # moves and maintain two equal piles until the end, where he will take the last card.\n\n    # Tom can calculate the number of cards to take from Pile A on his first turn with:\n    cards_to_take = 88 - 52\n\n    # After taking these cards, the number of cards left in Pile A will be equal to\n    # the number of cards left in Pile B, and Tom can just mirror Jane's moves.\n    return cards_to_take\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of money Hugo had.\n    # According to the problem, after giving 3/7 to his sister, Hugo is left with 4/7 of his money.\n    # Then he gave 1/8 of his remaining money to his mum, so he is left with 7/8 of the remaining money.\n    # In the end, he had $280 left, which is 7/8 of 4/7 of his original amount.\n    # Therefore, we have: 280 = (7/8) * (4/7) * x\n    # Solving for x gives us the initial amount of money.\n    \n    return (280 / (7/8)) / (4/7)\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Given that there are three equations:\n    # B + B = R (Therefore, R must be an even number)\n    # R + R + R = A (Since R is even, A must be divisible by 2 and 3 and at least 6)\n    # A - B = D\n\n    # We know that the maximum value for a digit in a base-10 number system is 9.\n    # Since B + B = R and the result is a single digit, B must be less than or equal to 4.\n    # Thus, there are five possible values for B (0 through 4).\n    # Because B + B forms R without rolling over to a two-digit number, we will ignore B = 0\n    # as it does not suit our condition (B cannot be 0 because R has to be an even number).\n\n    # We will work under the assumption that each letter represents a unique digit.\n    for B in range(0, 5):\n        R = 2 * B\n        A = 3 * R\n        if A >= 10:\n            continue  # Since A must be a single digit and less than 10, skip values of A that are 10 or greater.\n        D = A - B\n        if D < 0 or D > 9:\n            continue  # A - B must be a single digit, skip if difference D is negative or greater than 9.\n        \n        # If A, R, B, D are valid single digit numbers and are different (implied by variable names in the puzzle),\n        # we found our solution since R has to be even, then A has to be divisible by 3 (A = R + R + R).\n        if R % 2 == 0 and A % 3 == 0:\n            return A  # Return the value of A as soon as all criteria are satisfied.\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # We use the Pigeonhole Principle assuming that at least one student gets at least 3 apples.\n    # To maximize the class size, we need to minimize the number of apples per student. Since one student\n    # gets at least 3 apples, the rest can get 1 apple each to maximize the class size.\n    # With 80 apples, if one student gets 3, we have 77 apples remaining.\n    # The maximum class size would then be the one student with 3 apples plus 77 other students with 1 apple each.\n    \n    class_size_with_one_student_getting_three = 1 + 77  # 1 student with 3 apples + 77 students with 1 apple\n    return class_size_with_one_student_getting_three\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Any factorial greater than 9! will end in 0, as it will have 2 and 5 as factors,\n    # which multiply to give 10\n    return 0\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    return (4 / 50) * 100\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area_with_hole = (5 * 5) - (1 * 1)  # Area of the base minus hole area\n    height = 480 / base_area_with_hole  # Volume divided by base area to find height\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    sum = 0\n    for i in range(1, 11):\n        sum += i * (2*i - 1)\n    return sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # cost of one pencil\n    pencil_cost = 5\n    # cost of one pen\n    pen_cost = 15\n    \n    # number of pencils equivalent to one pen\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 1002, 2):\n        total_sum += i - (i + 1)\n    return total_sum\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Total balls\n    total_balls = 34\n    \n    # Ratios\n    red_to_white = 1 / 2\n    white_to_black = 3 / 4\n\n    # Since the ratio red:white = 1:2, let's say red balls = x and white balls = 2x.\n    # Since the ratio white:black = 3:4, let's say white balls = 3y and black balls = 4y for some y.\n\n    # Now we know that 2x = 3y because both represent white balls.\n    # The total is represented by x + 2x + 3y + 4y, which simplifies to 3x + 7y.\n    # We need to solve the system:\n    #   3x = 7y and \n    #   3x + 7y = 34\n\n    # Using substitution, let's find x from the 3x + 7y equation.\n    # x + 2(3y/2) + 3y + 4y = 34 --> x + 3y + 3y + 4y = 34 --> x + 10y = 34.\n    \n    # From the equation 3x = 7y, we get x = 7y/3. Substituting x in the second equation:\n    # 7y/3 + 10y = 34 --> y = 34 * 3 / 37, because 7/3 + 10 = 37/3.\n    \n    y = (34 * 3) / (37)\n    x = (7 * y) / 3\n    \n    # Red balls are just x. Round down because we can't have a fraction of a ball.\n    red_balls = int(x)\n    \n    return red_balls\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 2 # to remove permutations of the same combination\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of yellow and green beads initially\n    yellow, green = symbols('yellow green')\n\n    # Initial ratio of yellow to green beads is 3:2\n    initial_ratio = Eq(yellow/green, 3/2)\n\n    # After purchasing 5 yellow and 20 green, the ratio of green to yellow is 3:2\n    new_ratio = Eq((green + 20)/(yellow + 5), 3/2)\n\n    # Solve the equations\n    solutions = solve((initial_ratio, new_ratio), (yellow, green))\n\n    # Extract yellow and green bead counts\n    yellow_beads = solutions[yellow]\n    green_beads = solutions[green]\n\n    # Calculate the total number of beads he had at first\n    total_beads_at_first = yellow_beads + green_beads\n\n    return total_beads_at_first\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    brother = 26\n    sister_each = 13\n    sisters = sister_each * 2\n    remaining = 16\n\n    total_marbles = brother + sisters + remaining\n\n    return total_marbles\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i - 1) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for num in range(10, 1000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    total_distance = (amy_speed + christen_speed) * meeting_time\n    christen_time_to_amy = total_distance / christen_speed\n    \n    return christen_time_to_amy\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Three-digit integers\n        digits = set(str(i))     # Convert number to string to get a set of digits\n        if len(digits) == 2:     # Check if there are exactly two different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n\n    for number in permutations(digits, 4):\n        # The last digit must be an even number to make the whole number even.\n        # Hence, we check if last digit is in '0', '6', or '8'\n        if number[-1] in ('0', '6', '8'):\n            # Since we cannot have leading '0's in a four-digit number\n            if number[0] != '0':\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    score_correct = 4\n    score_wrong = -1\n    total_score = 110\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * score_correct + wrong * score_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    # Since the ratio of lemon to chocolate is 4:5 and they sum up to the remaining_cakes\n    # Let the common ratio be x. So we have 4x (lemon cakes) and 5x (chocolate cakes)\n    # Therefore, 4x + 5x = remaining_cakes -> 9x = remaining_cakes\n    \n    common_ratio = remaining_cakes / 9\n    lemon_cakes = 4 * common_ratio\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # The first pass can go to either Cici or April (2 ways).\n    # The second pass can go to either of the two who did not receive the first pass (2 ways).\n    # Multiplied together since the choices are independent:\n    ways = 2 * 2\n    return ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    first_four_avg = 89\n    total_score_first_four = first_four_avg * 4\n    fifth_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_score\n    avg_score_five_assignments = total_score_five_assignments / 5\n    return avg_score_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobbles_arms = 5\n    wibbles_count = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * wibbles_count\n    total_wobble_arms = total_arms - total_wibble_arms\n    wobbles_count = total_wobble_arms // wobbles_arms\n\n    return wobbles_count\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the number of books Lily has be L and the number of books Judy has be J\n    L = Symbol('L')\n    J = Symbol('J')\n\n    # If Lily gives x books to Judy, they will have the same number of books\n    x = Symbol('x')\n\n    # Equation representing that after giving x books to Judy, both will have the same amount\n    equation = Eq(L - x, J + x)\n\n    # Solve the equation for x in terms of L and J\n    solution_x = solve(equation, x)\n\n    # The difference in the number of books they had initially is twice the amount Lily gives to Judy\n    difference = 2 * solution_x[0]\n\n    # Since we don't have specific numbers, the final answer will be given in terms of L and J\n    ans = difference.subs(x, solution_x[0])\n\n    return ans\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    total_amount = 420\n    percentage = 15 / 100\n    amount = total_amount * percentage\n    return amount\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    # Find a 3-digit number that satisfies the given conditions\n    for hundreds in range(1, 10):  # Hundreds place must be between 1 and 9\n        for tens in range(0, 10):  # Tens place can be between 0 and 9\n            for ones in range(0, 10):  # Ones place can be between 0 and 9\n                if (hundreds + tens + ones) == 15 and tens == 2 * hundreds and hundreds == ones + 1:\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    return (113 - 5) / 9\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10    # km/h\n    maverick_distance = maverick_speed * (24 / 60)  # km\n    kelvin_distance = kelvin_speed * (24 / 60)      # km\n    distance_diff = maverick_distance - kelvin_distance\n\n    initial_diff = 10  # km\n    if distance_diff * 60 / 24 >= initial_diff:\n        return \"Maverick was correct\"\n    else:\n        # Time = Distance / Relative Speed\n        correct_time = initial_diff / (maverick_speed - kelvin_speed)\n        # Convert hours to minutes\n        correct_time_minutes = correct_time * 60\n        return correct_time_minutes\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the custom operation as a function\n    def custom_operation(a, b):\n        return a + b - (a * b / 910)\n\n    # Initialize the current result with the first value\n    result = 2016\n\n    # Iterate through the sequence from 2015 to 1 applying the custom operation\n    for number in range(2015, 0, -1):\n        result = custom_operation(result, number)\n    \n    return result\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    \n    # Pip's mistake is using addition instead of multiplication\n    # Correct method: multiply the ways to pick a boy by the ways to pick a girl\n    ways_to_pick_leads = boys * girls\n    \n    return ways_to_pick_leads\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total distance covered by plum trees\n    total_distance = (41 - 1) * 4\n    \n    # Number of pine trees, including both ends\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 6):  # Kid 1 must get at least one eraser\n        for x2 in range(1, 6-x1): # Kid 2 must get at least one eraser, and Kid 1's erasers removed from the count\n            x3 = 6 - x1 - x2  # Kid 3 gets the remaining erasers, ensuring each kid gets at least one\n            if x3 > 0:  # Can't give 0 erasers to Kid 3, that violates the condition of at least one per kid\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We know that x + y is the total number of questions which is 6.\n    # We also know that 5*x - 2*y is the total score which is 23.\n    # From the first condition we have y = 6 - x.\n    # Substitute the value of y in the second condition, we get 5*x - 2*(6-x) = 23\n    # Now solve for x.\n\n    for x in range(7):  # since 0 <= x <= 6 (the total number of questions)\n        y = 6 - x\n        if 5 * x - 2 * y == 23:\n            return x\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_litres = week1 + week2 + week3\n\n    return total_litres\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the younger person's age, y is the older person's age\n\n    # When the older was the age of the younger, the younger was 4.\n    # That means y-x years ago, x - (y-x) = 4\n    equation1 = Eq(x - (y - x), 4)\n\n    # When the younger will be the age of the older, the younger will be 61.\n    # That means x-y years in the future, x + (x - y) = 61\n    equation2 = Eq(x + (x - y), 61)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    original_hours = 9\n    desired_hours = 3\n    original_people = 10\n    \n    # People * Hours = Constant Work\n    # original_people * original_hours = desired_people * desired_hours\n    # solving for desired_people\n    desired_people = (original_people * original_hours) / desired_hours\n    \n    return int(desired_people)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial_money be the amount Bud had initially\n    initial_money = symbols('initial_money')\n\n    # Equation based on given information\n    money_after_book = initial_money - (1/3) * initial_money\n    money_spent_on_bag = (2/5) * money_after_book\n    equation = Eq(money_spent_on_bag, 120)\n\n    # Solve the equation to find the initial amount of money\n    solved = solve(equation, initial_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 0.60\n    \n    watermelons_left = 48 / (remaining_after_first_day * remaining_after_second_day)\n    \n    return int(watermelons_left)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    ans = sum(i**2 for i in range(first_term, n+1))\n    return ans\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    for boys in range(152):\n        girls = 152 - boys\n        remaining_boys = boys - boys / 11\n        remaining_girls = girls - 5\n        if remaining_boys == remaining_girls:\n            return boys\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # ensure x2 > x1 to maintain distinct values\n            for x3 in range(x2 + 1, 9):  # ensure x3 > x2 to maintain distinct values\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(75/100 * x - 5, 2.5)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # Since Jessica sits in front of Judy, there is at least 1 desk between them\n    desks_between_jessica_and_judy = 1\n    \n    # Total number of desks is the sum of desks in front of Jessica,\n    # desks behind Judy, and the desks including Jessica's and Judy's\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 2 # Jessica's and Judy's desks\n\n    return total_desks\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    ans = product % 100  # Get the last two digits\n    return ans\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    halfway_point = 0.126\n    known_number = 0.11\n    unknown_number = (halfway_point - known_number) + halfway_point\n    return unknown_number\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    subtracted_value = 11\n\n    n = 1\n    term_value = initial_value\n    while term_value >= 0:\n        term_value = initial_value - n * subtracted_value\n        n += 1\n\n    return term_value + subtracted_value\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    people = 17\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_chocolate = 7 / 12\n    toffees = chocolates * toffees_per_chocolate\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factors for factors in range(1, num + 1) if num % factors == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    # Let's denote the cost per box of lychees as 'l'.\n    # Since we know the total cost and the cost per box of mangoes, we can set up an equation.\n    # The total cost is the sum of the cost of mangoes and lychees:\n    # 24 boxes * $56/box for mangoes + 19 boxes * l/box for lychees = $2826\n    \n    # Rearrange to solve for 'l':\n    # l = ($2826 - (24 * $56)) / 19\n    \n    cost_per_box_mangoes = 56\n    total_cost = 2826\n    number_boxes_mangoes = 24\n    number_boxes_lychees = 19\n    \n    cost_per_box_lychees = (total_cost - (number_boxes_mangoes * cost_per_box_mangoes)) / number_boxes_lychees\n    \n    return cost_per_box_lychees\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    # Loop through all possible combinations of A, B, and C \n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                # Construct the numbers with the current digits of A, B, and C\n                num1 = int(f\"3{A}6\")\n                num2 = int(f\"2{B}5\")\n                ans = num1 * num2\n                \n                # Convert the result to string to compare with the pattern \"76C25\"\n                ans_str = str(ans)\n                if ans_str.startswith(\"76\") and ans_str.endswith(\"25\"):\n                    return A + B + int(ans_str[2])\n\n    # If no solution is found\n    return None\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(24*x - 5*(3+x), 4)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    perms = set(permutations(cards, 3))  # Generate all unique permutations of length 3\n    valid_nums = {int(''.join(p)) for p in perms if p[0] != '0'}  # Exclude numbers starting with '0'\n    return len(valid_nums)\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # The numbers are (x), (x+1), (x+2), (x+3), (x+4)\n    # Their sum is x + (x+1) + (x+2) + (x+3) + (x+4) = 100\n    # 5x + 10 = 100\n    # 5x = 90\n    # x = 18\n    return 18\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Initialize variables P, Q, and R to represent the missing digits in the puzzle.\n    P, Q, R = 0, 0, 0\n    # For loops to iterate through all possible values of P, Q, R\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Construct the numbers using P, Q, and R\n                first_num = int(f\"{P}{Q}{R}\")\n                second_num = 5  # given constant multiplier\n                # Perform the multiplication\n                product = first_num * second_num\n                # Check for the pattern: QPQRQ\n                if str(product) == f\"{Q}{P}{Q}{R}{Q}\":\n                    # If pattern matches, return the sum P + Q + R\n                    return P + Q + R\n    # Return 0 if no solution found\n    return 0\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who bought the £10 shirt\n    # and y be the number of children who bought the £15 shirt\n    # We have two equations based on the problem statement:\n    # 1) x + y = 50 (total number of children)\n    # 2) 10x + 15y = 555 (total amount paid)\n    \n    # Using algebra, we manipulate the equations to solve for y:\n    # From equation 1) x = 50 - y\n    # Substitute x in equation 2):\n    # 10(50 - y) + 15y = 555\n    # Simplifying, we get:\n    # 500 - 10y + 15y = 555\n    # 5y = 555 - 500\n    # y = (555 - 500) / 5\n    y = (555 - 500) // 5\n\n    return y\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_root_values = [i**3 for i in range(1, 35)]  # Possible cube values within 44000\n    for value in cube_root_values:\n        if 44000 % value == 0:\n            q = 44000 // value\n            if round(q ** (1/3)) ** 3 == q:  # Check if q is a perfect cube as well\n                return q\n            \nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs from 7:30 am to 8:30 am for 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 5  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Susan walks from 8:30 am to 10:30 am for 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 3  # in miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # In the worst case, we can draw all different numbers before we get 3 cards of the same number.\n    # There are 13 different numbers.\n   \n    # Drawing 2 of each number would result in 2 * 13 = 26 cards,\n    # but we still don't have 3 of the same number.\n    \n    # So, draw one more card and this card would be the third card of some number,\n    # because we already have 2 of every number.\n    \n    # The worst case would therefore be 26 (2 from each number) + 1 more card to get a triplet.\n    ans = 26 + 1\n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    road_length = 800\n    intervals = total_trees - 1\n    distance_between_trees = road_length / intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3 / 4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    # Total distance between buildings is 90m\n    total_distance = 90\n    # Number of intervals = number of trees + 1, as trees are planted in between the intervals\n    num_intervals = 9 + 1\n    # Calculate the distance between each tree\n    distance_between_trees = total_distance / num_intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy has 149 notebooks, we can denote the number of notebooks his sister has as x.\n    # When Andy gives his sister 38 notebooks, they will have the same amount, so:\n    # Andy's remaining notebooks = Andy's original notebooks - notebooks given to sister\n    # Sister's final notebooks = Sister's original notebooks + notebooks received\n    # This results in two equal amounts, so we can set up the equation:\n    # 149 - 38 = x + 38\n\n    andy_original = 149\n    notebooks_given = 38\n\n    andy_remaining = andy_original - notebooks_given\n    sister_final = andy_remaining  # Since they will have the same number of notebooks\n\n    # We need to figure out how many notebooks his sister had originally\n    sister_original = sister_final - notebooks_given\n\n    # Now we return whether Joey's calculation was correct and the correct number of notebooks sister had\n    joey_correct = (sister_original == 130)  # This will be false if Joey's calculation was incorrect\n    correct_sister_original = sister_original\n\n    return joey_correct, correct_sister_original\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards for each suit\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n    \n    # Define all possible cards\n    possible_cards = {\n        'spades': spades,\n        'hearts': hearts,\n        'diamonds': diamonds,\n        'clubs': clubs\n    }\n    \n    # Eddie says he doesn't know the card, so the suit can't be clubs (only 2 options)\n    # Remove clubs from possible suits\n    possible_suits = {'spades', 'hearts', 'diamonds'}\n    \n    # Avril can't know the card, so the number can't be unique; remove unique numbers: 'A', '2', '3', '5'\n    # 'K' also cannot be the number since it would be ambiguous between spades and hearts\n    possible_numbers = {'J', '7'}\n    \n    # After Eddie's statement, based on the remaining possibilities, Avril now knows the card.\n    # Since she knows the card after hearing that Eddie doesn't, the card cannot have a number present in multiple suits.\n    # Thus, 'J' is in two suits (diamonds and spades) and cannot be the number. '7' is the number.\n    possible_numbers = {'7'}\n    \n    # Update suits based on the remaining possible number\n    for suit, numbers in possible_cards.items():\n        if suit in possible_suits and possible_numbers.issubset(numbers):\n            final_suit = suit\n            final_number = next(iter(possible_numbers))  # Get the number which is '7'\n    \n    return (final_suit, final_number)\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    primes_count = 0\n    base_number = '200'\n\n    # Iterate over each digit position\n    for i in range(3):\n        # Change each digit from 0 to 9\n        for digit in map(str, range(10)):\n            if i == 0 and digit == '0':\n                continue  # Skip leading zero numbers\n            if base_number[i] == digit:\n                continue  # Skip the number itself\n            # Create the new number by replacing one digit\n            new_number = int(base_number[:i] + digit + base_number[i+1:])\n            # Check if the new number is prime\n            if isprime(new_number):\n                primes_count += 1\n\n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # x + y = 72, where y = 2x\n    # Thus, x + 2x = 72\n    # 3x = 72\n    # x = 72 / 3\n    x = 72 // 3\n    return x\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    # known numbers\n    numbers = [3, 4, 6, 10]\n    # known mean\n    mean = 5\n    # total number of items \n    num_items = 5\n    # total sum of numbers\n    total_sum = mean * num_items\n\n    # sum of the known numbers\n    sum_known = sum(numbers)\n    # fifth number\n    fifth_number = total_sum - sum_known\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1  # Including Danny\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 30:\n        page += 1\n        count += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    cutting_time_per_section = 12 / (4 - 1)  # She makes 3 cuts to get 4 sections\n    total_cuts_needed = 5 * (4 - 1)  # For 5 times, she needs 3 cuts each time\n    total_time_needed = cutting_time_per_section * total_cuts_needed\n    return total_time_needed\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, pages = symbols('days pages')\n\n    # Vanessa reads 30 pages a day and finishes 2 days later than the deadline\n    equation1 = Eq(30 * (days + 2), pages)\n\n    # Vanessa reads 39 pages a day and finishes 4 days ahead of the deadline\n    equation2 = Eq(39 * (days - 4), pages)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (days, pages))\n\n    return solutions[days], solutions[pages]\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    rooms_to_paint = 4\n    workers = 2\n    \n    days = rooms_to_paint / (rooms_per_day_per_worker * workers)\n    \n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(1*apple + 2*orange, 48)\n    equation2 = Eq(1*apple + 1*orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    solution = solve(equation, x)\n    \n    correct_answer = solution[0]\n\n    # Evaluating Celeste's answer, she made an error while simplifying the equation\n    celestes_answer = 4 / 3\n    return correct_answer if celestes_answer != correct_answer else celestes_answer\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3 / 8)\n    remaining = total_badges - given_away\n    return remaining\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of tennis balls and pocket money\n    cost_per_ball, pocket_money = symbols('cost_per_ball pocket_money')\n\n    # Equations based on the problem statement\n    equation1 = Eq(4 * cost_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * cost_per_ball + 1.51 * 100, pocket_money)  # Convert £1.51 to pence\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_per_ball, pocket_money))\n\n    # Return the value of pocket_money\n    return solutions[pocket_money] / 100  # Convert the pocket money back to pounds\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    # Yola reads 30 pages in 3/4 of an hour\n    time_per_hour = 3/4\n    pages = 30\n    \n    # Convert hours to seconds (1 hour = 60 minutes, 1 minute = 60 seconds)\n    time_per_hour_in_seconds = time_per_hour * 60 * 60\n    \n    # Calculate seconds per page\n    seconds_per_page = time_per_hour_in_seconds / pages\n    \n    return seconds_per_page\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    elias_stickers_end = solutions[elias] - 88\n    aileen_stickers_end = solutions[aileen] - 8\n\n    return (elias_stickers_end, aileen_stickers_end)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    return louis_position\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    series = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let x be the number of units (combined cheese pieces) they eat together\n    # where 1 unit = 3 pieces for Gerald + 5 pieces for Thomas\n    # We can formulate the equation: 3*Gerald + 5*Thomas = 104\n    # Since for every unit Gerald eats 3 pieces and Thomas eats 5,\n    # Gerald eats 3x pieces and Thomas eats 5x pieces for x units.\n    \n    # Total pieces of cheese eaten by both for x units = 3x + 5x = 8x\n    # 8x = 104 (total pieces of cheese eaten by both)\n    total_units = 104 / 8\n\n    # Therefore, Gerald eats 3 * total_units and Thomas eats 5 * total_units\n    gerald_eats = 3 * total_units\n    thomas_eats = 5 * total_units\n\n    # Difference in the number of pieces Thomas ate more than Gerald\n    difference = thomas_eats - gerald_eats\n\n    return int(difference)\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    amount = 1.54\n\n    ans = fraction * amount\n\n    return ans\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert numbers from base 8 to base 10, perform addition and convert back to base 8\n    sum_in_base_10 = int('25', 8) + int('37', 8)\n    ans = oct(sum_in_base_10)[2:]  # Remove the '0o' prefix that indicates an octal number\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults, children = symbols('boys girls adults children')\n\n    equation1 = Eq(boys, 2 / 7 * girls)\n    equation2 = Eq(adults, 2 / 3 * children)\n    equation3 = Eq(adults - boys, 1228)\n    equation4 = Eq(children, boys + girls)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (boys, girls, adults, children))\n\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_each = 150\n    selling_price_each = 175\n    remaining_rackets = 8\n    profit = 525\n    total_income = cost_price_each * remaining_rackets + profit\n    rackets_sold = (total_income - (cost_price_each * remaining_rackets)) / (selling_price_each - cost_price_each)\n    initial_rackets = remaining_rackets + rackets_sold\n    return int(initial_rackets)\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    regions = 1 + n + (n*(n-1)//2) + (n*(n-1)*(n-2)//6) + (n*(n-1)*(n-2)*(n-3)//24)\n    return regions\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Given data\n    chloe_spent_daily = 20\n    gordon_spent_daily = 25\n    chloe_left = 157\n    gordon_left = 82\n    \n    # Calculate the number of days each spent until the money left\n    days = (chloe_left - gordon_left) // (gordon_spent_daily - chloe_spent_daily)\n    \n    # Calculate the initial amount of money Gordon had\n    gordon_initial = gordon_left + days * gordon_spent_daily\n    \n    return gordon_initial\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # Ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 14):  # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial_product = 1\n    for i in range(1, 11):\n        factorial_product *= i\n\n    count = 0\n    while factorial_product % 10 == 0:\n        factorial_product //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    oranges = 150\n    apples = 100\n    neighbours = 1\n\n    while True:\n        if (oranges - 17) % neighbours == 0 and (apples - 5) % neighbours == 0:\n            return neighbours\n        neighbours += 1\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n    num_crosses = (line_length // cross_interval) + 1\n    return num_crosses\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons / 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    \n    total_sales = remaining_melons * selling_price_per_melon\n    profit = total_sales - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of jewels in P before transferring\n    # and y be the total value of jewels in Q before transferring\n    x, y = symbols('x y')\n    \n    # After transferring, P has 2 jewels and Q has 4 jewels\n    # The average value of jewels in each box increases by £1000 after transferring\n    # Set up equations based on the average value\n    # (x-5000)/2 = x/3 + 1000 => 3(x-5000) = 2x + 6000\n    # (y+5000)/4 = y/3 + 1000 => 3(y+5000) = 4y + 12000\n    \n    equation1 = Eq(3*(x-5000), 2*x + 6000)\n    equation2 = Eq(3*(y+5000), 4*y + 12000)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the sum of the total value of jewels\n    # in P and Q before transferring\n    return solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "from math import comb\n\ndef solution():\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # The pattern is \"red, red, green, yellow, yellow, green\", which has 6 balloons in one full cycle\n    pattern_length = 6\n    green_balloons_in_pattern = 2  # there are 2 green balloons in the pattern\n\n    # Calculate the number of full patterns and remaining balloons\n    full_patterns, remaining_balloons = divmod(75, pattern_length)\n\n    # Now calculate the number of green balloons\n    green_balloons = full_patterns * green_balloons_in_pattern\n\n    # Check how many green balloons in the remaining part\n    remaining_pattern = \"red, red, green, yellow, yellow, green\".split(', ')\n    for i in range(remaining_balloons):\n        if remaining_pattern[i] == 'green':\n            green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sandra's and Jessica's initial number of marbles\n    sandra_init, jessica_init = symbols('sandra_init jessica_init')\n\n    # Equation representing the situation after Sandra gave Jessica 13 marbles\n    # and Sandra had 6 fewer marbles than Jessica\n    equation1 = Eq(sandra_init - 13, jessica_init + 13 - 6)\n\n    # Sandra had more marbles than Jessica initially\n    equation2 = Eq(sandra_init, jessica_init + 6)\n\n    # Solve the equations for the initial number of marbles\n    solutions = solve((equation1, equation2), (sandra_init, jessica_init))\n\n    # Calculate how many more marbles Sandra had than Jessica in the beginning\n    more_marbles = solutions[sandra_init] - solutions[jessica_init]\n\n    return more_marbles\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60  # in meters\n    number_of_intervals_1_to_6 = 6 - 1  # because we are counting intervals, not posts\n    \n    interval_length = distance_between_1_and_6 / number_of_intervals_1_to_6\n    \n    number_of_intervals_1_to_9 = 9 - 1  # counting intervals from 1st to 9th post\n    \n    distance_between_1_and_9 = interval_length * number_of_intervals_1_to_9\n    \n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    strawberries_total = 15 + 27 + 19\n    remainder = strawberries_total % 8\n    return remainder\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    result = 8 * (3/2)\n    return result\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Total times the digit '1' appears\n    total_ones = 15\n    # Total times the digit '2' appears\n    total_twos = 14\n\n    # N starts from 1, keep counting until the conditions are met\n    N = 1\n    ones_count = 0\n    twos_count = 0\n\n    while True:\n        # Convert the current number to string to count digits\n        str_N = str(N)\n        ones_count += str_N.count('1')\n        twos_count += str_N.count('2')\n\n        # Check if both conditions are met\n        if ones_count == total_ones and twos_count == total_twos:\n            break\n\n        # Go to the next number\n        N += 1\n    \n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    pieces_per_friend = 26\n    total_friends = 7\n    pieces_left_with_kate = 22\n    total_at_school = (pieces_per_friend * total_friends) + pieces_left_with_kate\n    total_initially = total_at_school * 3 / 2  # because she ate 1/3 at home, so 2/3 is left for school and herself\n    return int(total_initially)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # The problem can be solved with a proportion\n    # Andy's position : Bob's position = Andy's speed : Bob's speed\n    # Let's set a ratio k = Bob's speed / Andy's speed\n    # When Andy is at 9th floor, Bob is at 5th floor => 9 / 5 = 1 / k\n    # k = 5 / 9\n    k = 5 / 9\n    \n    # When Andy reaches the 25th floor, Bob's position (B) will be:\n    # B = k * Andy's position when he is at the 25th floor\n    bob_position_when_andy_at_25th = k * 25\n\n    return int(bob_position_when_andy_at_25th)\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of words per minute James can type\n    # Let W be the total number of words James has to type\n    x, W = symbols('x W')\n\n    # Original speed equation: W = 3 * x\n    # Increased speed equation: W = (3 - 1) * (x + 30)\n    equation1 = Eq(W, 3 * x)\n    equation2 = Eq(W, 2 * (x + 30))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, W))\n\n    return solutions[W]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0]*11 # Initialize with 0, lights[0] is unused\n\n    # Ms. Lily pressed switches of lights 1, 3, 5, 7, 9\n    for i in range(1, 11, 2):\n        lights[i] = 1\n\n    # Sam pressed switches of lights 2, 4, 6, 8, 10, seven times\n    for i in range(2, 11, 2):\n        lights[i] = (lights[i] + 7) % 2  # It doesn't matter the number of times, if it's odd, it will toggle\n\n    # Count how many lights are on\n    ans = sum(lights)\n\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable 'm'\n    m = symbols('m')\n    \n    # Create the equation based on the given mathematical expression\n    # Convert the digital expression into a mathematical equation by considering place value\n    equation = Eq(12 * 10 + m, 9 * (10 + m) - 2)\n    \n    # Solve the equation for 'm'\n    solution = solve(equation, m)\n    \n    # Get the value of 'm' from the solution\n    m_value = solution[0]\n    \n    return m_value\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_depth = 8\n    climb_up = 3\n    slide_down = 2\n    current_height = 0\n    day_count = 0\n\n    while current_height < total_depth:\n        day_count += 1\n        current_height += climb_up\n        if current_height >= total_depth:\n            break\n        current_height -= slide_down\n\n    return day_count\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the amount of water in Pail B\n    x = Symbol('x')\n\n    # Pail A initially contains 2/3 as much water as Pail B\n    initial_A = 2/3 * x\n\n    # After pouring 4 litres from Pail B to Pail A\n    final_A = initial_A + 4\n    final_B = x - 4\n\n    # After pouring, Pail A contains 7/8 as much water as Pail B\n    equation = final_A - 7/8 * final_B\n\n    # Solve for x\n    amount_B = solve(equation, x)[0]\n    amount_A = 2/3 * amount_B\n\n    # Calculate the total amount of water\n    total_amount = amount_A + amount_B\n\n    return total_amount\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    total_parts_needed = 100\n    hours_spent = 2\n    parts_per_hour = parts_already_made / hours_spent  # Calculate the production rate\n    remaining_parts = total_parts_needed - parts_already_made  # Calculate remaining parts to be made\n    hours_needed = remaining_parts / parts_per_hour  # Calculate time needed for remaining parts\n\n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n\n    return total_cost\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # Initial volume of rose syrup in ml\n    initial_sugar_percentage = 6  # Initial sugar percentage\n    final_sugar_percentage = 10  # Desired final sugar percentage\n    \n    # Calculate the initial sugar content in grams\n    initial_sugar_content = (initial_sugar_percentage / 100) * initial_volume\n    \n    # Let x be the amount of sugar to be added\n    # We have: (initial_sugar_content + x) / (initial_volume + x) * 100 = final_sugar_percentage\n    x = symbols('x')\n    equation = Eq((initial_sugar_content + x) / (initial_volume + x) * 100, final_sugar_percentage)\n\n    # Solve for x\n    added_sugar = solve(equation, x)\n\n    return added_sugar[0]\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Since we want to ensure 3 different colored balls, consider the worst case scenario.\n    # Picking all 5 reds, then all 5 whites (still not guaranteed 3 different colors).\n    # We need to pick one more, which will be a different color for sure (yellow here).\n    required_balls = 5 + 5 + 1\n\n    return required_balls\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # There are 5 colors, and each person can take out 2 balls,\n    # hence the possible combinations of colors they can take is 5 choose 2.\n    total_combinations = comb(5, 2)\n    \n    # Since they find out that always two people have the same kind of balls,\n    # this means that we must exceed the number of total color combinations\n    # so that at least two people get the same combination.\n    # We use the Pigeonhole Principle which says that if N items are put into M containers,\n    # with N > M, then at least one container must contain more than one item.\n    # In this context, N is the number of participants and M is the total_combinations.\n    # To guarantee at least two people have the same kind of balls,\n    # the participants should be one more than total combinations.\n    num_people = total_combinations + 1\n\n    return num_people\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # A product is divisible by 4 if we have at least one even number and one multiple of 4,\n    # or two even numbers where at least one of them is a multiple of 4.\n\n    # There are 16 even numbers and 8 multiples of 4 in the range 10 to 41.\n    even_numbers = 16\n    multiples_of_4 = 8\n    # The rest are odd, which don't affect the divisibility by 4 for our purpose.\n    odd_numbers = 32 - even_numbers\n\n    # To ensure we have two numbers whose product is divisible by 4,\n    # we could potentially need to pick all odd numbers and then one more,\n    # which would be an even number.\n\n    # As such, we need to pick all odd numbers plus one more number to ensure this.\n    min_numbers_to_draw = odd_numbers + 1\n\n    return min_numbers_to_draw\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n\n    common_difference = (third_term - first_term) / (3 - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has, then Melissa has 2x\n    # Together they have x + 2x = 876\n    # 3x = 876\n    x = total_cards / 3\n\n    # Melissa has 2x and Hisham has x\n    # To have the same number, Melissa should give Hisham (2x - x) / 2 cards\n    cards_to_give = (2*x - x) / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # Since 10^2 = 100, which is not a two-digit number \n                                   # and 9^2 = 81 is the next square below 100\n\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euro = 4.8\n    cost_in_usd = cost_in_euro * euro_to_usd\n    return cost_in_usd\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's current age at his 14th birthday\n    brian_age = 14\n    # Father's current age when Brian is 14\n    father_age = 41\n    # Difference in age between Brian and his father\n    age_difference = father_age - brian_age\n\n    # Search for the next age reversal\n    while True:\n        brian_age += 1\n        father_age += 1\n        # Check if the age of Brian is the reverse of his father's age\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = float('-inf')\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + (b / c) + ((d / e) * f) - (g + (h / j))\n        if N % 1 == 0:\n            max_value = max(max_value, N)\n    return int(max_value)\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_before = 3900\n    total_books_after = 3900 + 510\n\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_books_before = (ratio_chinese / total_ratio) * total_books_before\n    malay_books_before = (ratio_malay / total_ratio) * total_books_before\n\n    chinese_books_after = chinese_books_before * 1.20  # 20% increase\n    malay_books_after = malay_books_before * 1.10  # 10% increase\n\n    english_books_before = total_books_before - chinese_books_before - malay_books_before\n    english_books_after = total_books_after - chinese_books_after - malay_books_after\n\n    percentage_increase_english = ((english_books_after - english_books_before) / english_books_before) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_past = 10\n    return combined_age_past + (4 + 2) * 2  # Each dog ages 6 years from the time they were 10 years combined\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    average_juniors = 10\n    total_participants = 20\n    average_participants = 14\n\n    # Total score of juniors\n    total_score_juniors = total_juniors * average_juniors\n\n    # Total score of all participants\n    total_score_participants = total_participants * average_participants\n\n    # Total score of seniors = Total score of all participants - Total score of juniors\n    total_score_seniors = total_score_participants - total_score_juniors\n\n    # Number of seniors\n    total_seniors = total_participants - total_juniors\n\n    # Average score of seniors = Total score of seniors / Number of seniors\n    average_seniors = total_score_seniors / total_seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    attempted_questions = total_questions - 1\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n    \n    # Assume x is the number of correct answers\n    # Number of incorrect answers will be (attempted_questions - x)\n    for x in range(attempted_questions + 1):\n        if x * correct_points + (attempted_questions - x) * incorrect_points == total_score:\n            return x\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    divisor = int('1' + '0' * 2019 + '92')\n    dividend = int('1058' + '0' * 2018)\n    ans = dividend / divisor\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_initial = 160\n    butter_initial = 50\n    cookies_required = 300\n\n    butter_required = (butter_initial * cookies_required) / cookies_initial\n\n    return butter_required\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_questions = 90\n    correct = symbols('correct')\n    \n    # Mochi answered 60% of the questions\n    answered = total_questions * 0.6\n    # Unanswered questions\n    unanswered = total_questions - answered\n    # Marks for unanswered questions\n    unanswered_marks = unanswered * 1\n    \n    # Equation for total score\n    equation = Eq(5*correct - 2*(answered - correct) + unanswered_marks, 264)\n    \n    # Solve for correct\n    correct_answers = solve(equation, correct)\n    \n    return correct_answers[0]\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle, if there are 10 containers and at least 2 apples in each,\n    # the least number of apples that can be distributed to ensure at least 2 apples in one container is:\n    # (Number of containers - 1) + Least number of apples in one container that is \"at least 2\"\n    containers = 10\n    least_apples_in_one_container = 2\n    total_apples = (containers - 1) + least_apples_in_one_container\n    return total_apples\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Dedra, Timm = symbols('Dedra Timm')\n\n    # Timm gets $72, Dedra gets $72\n    # Dedra was 4 times richer than Timm, now she is only twice as rich\n    equation1 = Eq(Dedra, 4 * Timm)\n    equation2 = Eq(Dedra + 72, 2 * (Timm + 72))\n\n    solutions = solve((equation1, equation2), (Dedra, Timm))\n\n    return solutions[Dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initialize variables\n    number = \"\"\n    current_integer = 1\n\n    # Loop until the concatenated string reaches 1000 digits\n    while len(number) < 1000:\n        number += str(current_integer)\n        current_integer += 1\n\n    # Retrieve the 1000th digit (unit digit of N)\n    unit_digit = int(number[999])\n\n    return unit_digit\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    return louis_position\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the Inclusion-Exclusion Principle for three sets\n    only_A = A - AC - AE + ACE\n    only_C = C - AC - CE + ACE\n    only_E = E - AE - CE + ACE\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    total = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n\n    return total\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    n_pupils = 18\n    r_seats = 3\n\n    ans = permutations(n_pupils, r_seats)\n\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n\n    months_needed = debt_in_bitcoins / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    # Veronica's amount\n    veronica = 9\n    \n    # Jonathan has three times as much money as Veronica\n    jonathan = 3 * veronica\n    \n    # Rachel has $48 more than Jonathan\n    rachel = jonathan + 48\n    \n    return rachel\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack = 4\n    jason = symbols('jason')\n    bruce = jason\n    willie = jason\n\n    equation = Eq(jack + jason + bruce + willie, 19)\n    solution = solve(equation, jason)\n\n    return solution[jason]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n\n    # Jake is John's father, so Jake's age > John's age\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2*(john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    return solutions[john] + 14\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n    return present_value\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let the number of friends be f and the number of erasers be e.\n    # The situation where each friend receives 5 erasers and Andy has 3 left can be described as:\n    # e = 5*f + 3\n    # The situation where each friend receives 6 erasers and Andy is short of 2 can be described as:\n    # e = 6*f - 2\n    # Equate the two expressions to find the number of friends:\n    # 5*f + 3 = 6*f - 2\n    # f = 5\n    # Now, substitute f back into any of the original equations to find the number of erasers:\n    # Using e = 5*f + 3:\n    e = 5*5 + 3\n    return e\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # The age of the youngest child\n    x = Symbol('x')\n\n    # The oldest child is six times older than the youngest\n    equation = x + 8 * (15 / 12) - 6 * x\n\n    # Solve the equation to find the age of the youngest child\n    youngest_age = solve(equation)\n\n    return youngest_age[0]\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2008):\n        total_sum += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(total_sum)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Smallest original number would have the smallest digit in the thousands place after change\n    # Thus, we start with 1 in the thousands place (assuming the combination does not start with 0)\n    for num in range(1000, 9999):\n        # Separate digits\n        ones = num % 10\n        rest_of_digits = num // 10\n        \n        # Create a new number by using ones digit at the start and the rest digits as is\n        new_num = int(str(ones) + str(rest_of_digits))\n\n        # Check if the new number is greater than the original by 5877\n        if new_num - num == 5877:\n            return num  # Smallest such number\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Since multiplication has precedence over addition and subtraction,\n    # we want to use brackets to minimize the effect of multiplication.\n    # By using brackets around addition operations with small numbers,\n    # and keeping the multiplication by a larger number outside the brackets,\n    # we can achieve the smallest possible result.\n    # We'll create a list of potential expressions with brackets.\n    \n    # We need to add brackets such that the equation result is minimized\n    expressions = [\n        \"(15+5)*(5+15)-6+7\",  # Makes the multiplication have less impact\n        \"15+(5*(5+15)-6)+7\",  # Is actually maximizing instead of minimizing\n        \"(15+5)*5+(15-6)+7\",  # Another neutral operation\n        \"15+5*(5+(15-6))+7\",  # Also not minimizing\n        \"15+5*(5+15)-6+7\",    # No brackets, not helpful\n        \"15+(5*5)+(15-6+7)\",  # Does nothing to minimize multiplication\n        \"(15+5*5)+(15-6+7)\",  # Also not minimizing\n        \"15+5*(5+15)-(6+7)\",  # No impact on the multiplication with 5\n        \"15+(5*5+15)-(6+7)\"   # Neglects to minimize the large multiplication\n    ]\n    \n    # Evaluate the expressions and find the minimum result\n    results = {expr: eval(expr) for expr in expressions}\n    smallest_result_expr = min(results, key=results.get)\n    ans = results[smallest_result_expr]\n    \n    return ans\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has.\n    # Then Cayden has x + 5 sweets.\n    # If Cayden gives Jiaxiang 10 sweets, then Cayden will have x + 5 - 10 sweets\n    # and Jiaxiang will have x + 10 sweets.\n    # The difference in the number of sweets they will have is:\n    # (x + 10) - (x + 5 - 10) = x + 10 - x - 5 + 10 = 20.\n    \n    return 20\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    result = 75 * 0.29 + 75 * 0.01 * 74 - 0.3 / (2 / 15)\n    return result\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    current_average = 72\n    new_average = 75\n    num_students = 5\n    total_with_mary = new_average * (num_students + 1)\n\n    total_current = current_average * num_students\n    marys_score = total_with_mary - total_current\n\n    return marys_score\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1  # First multiple of 11 after 50\n    last_multiple = 150 // 11  # Last multiple of 11 before 150\n    ans = last_multiple - first_multiple + 1\n    return ans\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    train_speed = 60\n\n    total_distance = train_length + bridge_length\n\n    time = total_distance / train_speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    ans = 0\n    for num in range(999, 100, -1):\n        if num % 9 == 0 and num % 2 != 0:  # divisible by 9 and is odd\n            num_str = str(num)\n            tens_digit = int(num_str[1])\n            if tens_digit % 4 == 0:  # tens place divisible by 4\n                ans = num\n                break\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8        # meters per minute\n    correct_time = distance_to_market / walking_speed  # time in minutes\n    \n    return correct_time\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    total_doughnuts = 11\n    total_students = 4\n\n    # Account for the fact that each student should receive at least 1 doughnut,\n    # we \"pre-distribute\" one to each student.\n    remaining_doughnuts = total_doughnuts - total_students\n\n    # This now becomes a problem of partitioning the remaining doughnuts among\n    # the students, which is equivalent to placing \"dividers\" between doughnuts\n    # to indicate a separation between what each student receives\n    # (i.e., the stars and bars method).\n    # The formula for this is \"comb(N + k - 1, k - 1)\" where\n    # N = remaining_doughnuts, k = total_students.\n\n    ans = comb(remaining_doughnuts + total_students - 1, total_students - 1)\n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    coins = [5, 10, 20, 50, 100]  # the values of each coin in pence\n    total_change = sum(coins)     # the total change Angela received\n    pounds_to_pence = 500         # five pound note converted to pence\n\n    # Calculate how much Angela spent by subtracting the change from the amount she paid with\n    amount_spent = pounds_to_pence - total_change\n\n    return amount_spent\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Since Jane wants to guarantee 4 different coloured marbles, she might pick the maximum number from one color before getting the different ones\n    max_single_color = max(4, 7, 6, 2)  # The maximum number of marbles of the same color\n\n    # To make sure she gets 4 different colored marbles, Jane must go through the worst case scenario where she picks all marbles of one color first\n    # and then continue picking until she gets all 4 different colored marbles\n    # Therefore, she picks all of one color + 3 more (one of each of the remaining colors)\n    marbles_to_draw = max_single_color + 3\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    honey_per_hive = 50 / 5\n    total_hives_needed = 90 / honey_per_hive\n    additional_hives_needed = total_hives_needed - 5\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 80 / 100\n    spent_percentage_2 = 75 / 100\n    remaining_ratio = 3  # 3 times $10 notes as $2 notes\n\n    for ten_notes in range(total_notes + 1):\n        two_notes = total_notes - ten_notes\n        spent_10_notes = ten_notes * spent_percentage_10\n        spent_2_notes = two_notes * spent_percentage_2\n        \n        remaining_10_notes = ten_notes - spent_10_notes\n        remaining_2_notes = two_notes - spent_2_notes\n        \n        if remaining_10_notes == remaining_ratio * remaining_2_notes:\n            cost_of_fan = (spent_10_notes * 10) + (spent_2_notes * 2)\n            return cost_of_fan\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    \n    # Horizontal distance from A to B is 15 - 9 = 6 km\n    horizontal_distance = 15 - 9\n    \n    # Vertical distance from A to B is 3 + 5 = 8 km\n    vertical_distance = 3 + 5\n    \n    # The shortest distance from A to B is the hypotenuse of the right triangle formed\n    shortest_distance = sqrt(horizontal_distance**2 + vertical_distance**2)\n    \n    return shortest_distance\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ali, kumar = symbols('ali kumar')\n\n    # The initial ratio of their erasers is 7:5\n    equation1 = Eq(ali / kumar, 7/5)\n\n    # After Ali gave Kumar 10 country erasers, the ratio becomes 1:5\n    equation2 = Eq((ali - 10) / (kumar + 10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n    ali_erasers, kumar_erasers = solutions[ali], solutions[kumar]\n\n    # Calculate the total number of country erasers they have together\n    total_erasers = ali_erasers + kumar_erasers\n\n    return int(total_erasers)\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(1*b + 3*p, 84)  # Max's purchase\n    equation2 = Eq(1*b + 1*p, 48)  # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = (8 * 60) + 20  # Convert 8 hours and 20 minutes to minutes\n    activity_and_break = 45 + 20   # The duration of each activity with the break\n    activities = total_minutes // activity_and_break  # Calculate the number of activities\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's as B, and Carl's as C.\n    # From the question we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n    # Adding all three equations gives us 2 * (A + B + C) = 291\n    # Now we divide by 2 to get the total weight of Adam, Ben and Carl.\n    total_weight = (102 + 97 + 92) / 2\n    return total_weight\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of days B takes to finish the work by himself\n    b = symbols('b')\n    # A's efficiency is twice B's, so A takes b/2 days to finish the work\n    # A finishes the job in 5 days less than B, so A takes b - 5 days\n    # Setting up the equation: b/2 = b - 5\n    equation = Eq(b / 2, b - 5)\n\n    # Solve the equation\n    days_for_b = solve(equation, b)\n\n    return days_for_b[0]\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    return 650 * (40 / 100)\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # Apply the divisibility rule for 11: Subtract the sum of the digits in the odd positions from\n    # the sum of the digits in the even positions. If the result is divisible by 11, then the number is divisible by 11.\n    # The odd-position digits are 1, 3, 5, and the even-position digits are 2, 4, 6.\n    odd_sum = 1 + 3 + 5\n    even_sum = 2 + 4 + 6\n    difference = abs(odd_sum - even_sum)\n    \n    # Check the remainder when the difference is divided by 11\n    remainder = difference % 11\n    # The correct answer if remainder is 0\n    is_divisible = (remainder == 0)\n   \n    return (is_divisible, remainder)\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    result = 3549 // 7\n    return result\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    remaining_length_cm = 78  # Remaining length in centimeters\n\n    # Convert remaining length to meters\n    remaining_length_m = remaining_length_cm / 100\n\n    # Calculate the length of the icicle that has melted\n    melted_length_m = initial_length_m - remaining_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5 * initial_passengers) + 7\n    after_second_stop = after_first_stop - (1/4 * after_first_stop) + 13\n    \n    return int(after_second_stop)\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    round_off_error = 5 / 2 # since it's rounded to the nearest £5\n    min_actual_price = estimated_price - round_off_error\n    return min_actual_price\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Create a list to store the number of ways to climb to each step\n    ways = [0] * (9 + 1)\n    # Base case: there's 1 way to stay at the bottom (0 steps)\n    ways[0] = 1 \n    # Base case: there's 1 way to climb to the first step\n    ways[1] = 1\n\n    # Calculate the number of ways to climb to each step using previous steps\n    for i in range(2, 10):\n        # Pip can only climb 1 or 4 steps at a time\n        if i - 1 >= 0: # If Pip is one step below\n            ways[i] += ways[i - 1]\n        if i - 4 >= 0: # If Pip is four steps below\n            ways[i] += ways[i - 4]\n\n    return ways[9]\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x represent the number of years needed for their ages to sum to 40.\n    # Their current ages sum to 22, so in x years, each will be x years older,\n    # making the sum 22 + 2x.\n\n    # We set up the equation 22 + 2x = 40 and solve for x.\n    x_years_later = (40 - 22) // 2  # Integer division since ages are whole numbers\n    return x_years_later\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    # Since the elephant is on the right side of the rabbit, \n    # the rabbit's position from left will be \n    # elephant position - (toys between + 1 for the elephant itself)\n    rabbit_position_from_left = elephant_position_from_left - (toys_between_rabbit_and_elephant + 1)\n\n    # Rabbit's position from right is total toys - rabbit's position from left + 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the terms of the sequence 0.5, 1, 1.5, ..., 10 which follows\n    # an arithmetic progression with first term a = 0.5 and common difference d = 0.5\n    a = 0.5\n    d = 0.5\n    last_term = 10\n\n    # The number of terms n is given by (last_term - a)/d + 1\n    n = int((last_term - a) / d + 1)\n\n    # Calculate the sum of the arithmetic series S = n/2 * (first term + last term)\n    # But to use the cube sum formula, we need the sum of integers starting from 1\n    # So, we adjust our sequence to start from 1 to 20 (since n = 20)\n    integer_sum = (n * (n + 1)) / 2\n\n    # Use the formula for the sum of cubes: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    ans = (integer_sum ** 2) * (d ** 3)  # Since we have a sequence of 0.5 increments, multiply by d³\n\n    return ans\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and \n            pencils % 3 == 2 and \n            pencils % 4 == 3 and \n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits / people_count\n    \n    return biscuits_per_person\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nancy_rate = 1/6\n    combined_rate = 1/4\n    tim_rate = symbols('tim_rate')\n\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n\n    tim_rate_solution = solve(equation, tim_rate)\n\n    tim_days = 1 / tim_rate_solution[0]\n\n    return tim_days\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_sum = mean_value * (len(numbers) + 1)  # mean_value = total_sum / number_count\n    a = total_sum - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparation_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from sympy import lcm\n\ndef solution():\n    # Convert time to seconds for uniformity\n    t1 = 60  # First traffic light changes every 60 seconds\n    t2 = 90  # Second traffic light changes every 1.5 minutes or 90 seconds\n    \n    # Least common multiple for the first two traffic lights\n    lcm_12 = lcm(t1, t2)\n\n    # Since the final result must be an integer, start at 30 seconds and check every integer second\n    for t3 in range(30, lcm_12 + 1):  # Shortest possible time is at least 30 seconds\n        # Check if t3 is also a common multiple with lcm_12 (which represents the 9 minutes cycle)\n        if lcm_12 % t3 == 0:\n            # Found the smallest t3 that satisfies the problem constraints\n            return t3\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Conversion from centimeters to meters\n    blue_ribbon_meters = 220 / 100\n    orange_ribbon_meters = 30.5 / 100\n    \n    # Lengths of the ribbons in meters\n    pink_ribbon = 2.5\n    blue_ribbon = blue_ribbon_meters\n    orange_ribbon = orange_ribbon_meters\n    \n    # Calculate the longest ribbon\n    longest_ribbon_length = max(pink_ribbon, blue_ribbon, orange_ribbon)\n    \n    # Identify the longest ribbon\n    if longest_ribbon_length == pink_ribbon:\n        return \"pink ribbon\"\n    elif longest_ribbon_length == blue_ribbon:\n        return \"blue ribbon\"\n    else:\n        return \"orange ribbon\"\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount = 0.50  # 50% discount\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    average_people_per_car = total_people / total_cars\n    return average_people_per_car\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass of the sauce to grams for calculation\n    total_mass_grams = 172000\n\n    # Mass per packet for each ingredient in grams\n    mass_P = 300\n    mass_Q = 400\n    mass_R = 500\n\n    # Ratio of the packets of ingredients P:Q:R is 7:3:2, \n    # let's assume 7x packets of P, 3x packets of Q, and 2x packets of R\n    # Calculate total mass based on the ratios\n    # 7x*300 + 3x*400 + 2x*500 = 172000 grams (total mass of the sauce)\n\n    # Simplifying the equation will give us:\n    # 2100x + 1200x + 1000x = 172000\n    # 4300x = 172000\n    # x = 172000 / 4300\n    x = total_mass_grams / (7*mass_P + 3*mass_Q + 2*mass_R)\n    \n    # Calculate the number of packets for each ingredient\n    packets_P = 7 * x\n    packets_Q = 3 * x\n    packets_R = 2 * x\n\n    # Calculate the total number of packets used altogether\n    total_packets = packets_P + packets_Q + packets_R\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    base_number = 4\n    times = 3\n    result = sum(base_number * int('1' * i) for i in range(1, times + 1))\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    num_boys = 5\n    percent_boys = (num_boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollar_cost = 64\n    exchange_rate = 1.25\n    us_dollar_cost = canadian_dollar_cost / exchange_rate\n    return us_dollar_cost\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back\n    # It means there are 7 shelves before it and 9 shelves after it\n    # So the total shelves are the sum of shelves before, the shelf where the book is, and shelves after\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # km/h\n    time_difference = 1.5  # hours\n    eleanor_time = 4  # hours\n\n    # When Eleanor reaches City G, Rachel still has 39 km to go to reach City F.\n    # In the 1.5 hours (time difference), Rachel covers 84 km/h * 1.5 h = 126 km.\n    rachel_distance = rachel_speed * time_difference\n\n    # The distance Rachel covered plus the remaining 39 km is the \n    # same distance Eleanor covered in 4 hours.\n    total_distance = rachel_distance + 39\n    # The total distance is what Eleanor covers in 4 hours, i.e., her speed times the time.\n    eleanor_speed = total_distance / eleanor_time\n\n    # Now calculate the distance between the cities based on Rachel's speed and the total time she travelled,\n    # which is Eleanor's travel time plus the time difference.\n    total_time_rachel = eleanor_time + time_difference\n    distance_between_cities = rachel_speed * total_time_rachel\n\n    return distance_between_cities\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    ans = (2 * largest) - (3 * smallest)\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_points = 5 * 90  # Total points needed for an average of 90 points\n    max_score = 100  # Maximum score that one student can achieve\n    possible_combinations = []\n\n    for score1 in range(1, max_score + 1):\n        for score2 in range(score1 + 1, max_score + 1):\n            for score3 in range(score2 + 1, max_score + 1):\n                for score4 in range(score3 + 1, max_score + 1):\n                    for score5 in range(score4 + 1, max_score + 1):\n                        scores = [score1, score2, score3, score4, score5]\n                        if sum(scores) == total_points:\n                            possible_combinations.append(scores)\n    \n    # Find the minimum lowest score from all the possible combinations\n    lowest_scores = [min(combination) for combination in possible_combinations]\n    ans = min(lowest_scores)\n    \n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols to represent the lengths of the ropes\n    A, B, C = symbols('A B C')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)  # Convert 1 m 30 cm to cm\n       \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate the total length of the three ropes\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_length\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 48 * (3/4)\n    return x\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from itertools import combinations\n\n    # Total number of ways to choose 3 different letters from 5 without any restrictions\n    total_ways = len(list(combinations('ABCDE', 3)))\n\n    # Number of ways to choose 3 different letters including A and B\n    ways_with_A_and_B = len(list(combinations('ACDE', 1)))  # Choose the remaining 1 letter from the 4 (A and B are fixed)\n\n    # Probability that A and B will both be in the string\n    probability = ways_with_A_and_B / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    male_students_percentage = 16 / 100\n    female_students_percentage = 10 / 100\n\n    male_students = male_members * male_students_percentage\n    female_students = female_members * female_students_percentage\n\n    total_students = male_students + female_students\n    total_members = male_members + female_members\n\n    student_percentage = (total_students / total_members) * 100\n\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_in_first = 200 * 0.35\n    fruit_juice_in_second = 300 * 0.50\n    total_fruit_juice = fruit_juice_in_first + fruit_juice_in_second\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy would have (amy - x) apples and John would have (john + x) apples\n    # Amy should have 4 more apples than John, thus (amy - x) = (john + x) + 4\n    # Solving for x we get:\n    x = (amy - john - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    number_of_bags = markers_left // 5\n    return number_of_bags\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let 'p' be the number of papers to mark in total, 'r' the original rate (papers per hour)\n    # She has already worked for 1 hour, so there are 4 hours left in her original plan\n    # Therefore, original plan is to mark p papers in 5 hours: p = r * 5\n\n    # After marking for an hour, she changes the rate to r+6 to finish in the remaining 4 hours\n    # Therefore, 4 * (r+6) + r = p, because she marked 'r' papers in the first hour\n\n    # If she marks r+10 papers per hour, she can finish in 3 hours since she already worked for 1 hour\n    # Therefore, 3 * (r+10) + r = p\n\n    # We have 2 equations with 2 variables now:\n    # 5r = p\n    # 5r + 24 = p\n    # 4r + 30 = p\n\n    # By combining these equations, we get:\n    # 5r + 24 = 4r + 30\n    # This simplifies to: r = 30 - 24 = 6\n\n    # 5r = 5 * 6 = p\n    # Therefore, p = 30\n\n    return 30\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more = Fraction(chicken_more_than_vegetable, chicken_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    fruit_more_than_vegetable = fruit_pies - vegetable_pies\n    fraction_vegetable_less = Fraction(vegetable_pies - fruit_more_than_vegetable, vegetable_pies)\n\n    return fraction_chicken_more, fraction_vegetable_less\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percent = 20\n    tax_percent = 10\n    \n    tip = (bill * tip_percent) / 100\n    tax = (bill * tax_percent) / 100\n    \n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8  # The greatest 1-digit even number is 8\n    smallest_2_digit_odd = 11  # The smallest 2-digit odd number is 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be in the range 1 to 9 since 'ab' is a 2-digit number\n        for b in range(10):  # 'b' can be in the range 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:  # check the condition given in the problem\n                return ab  # return the 2-digit number 'ab'\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3 / 4\n\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for x in range(100, 1000):\n        if sum(map(int, str(x))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    # In the worst case, we have to consider drawing one card from each of the 13 different numbers\n    # for all four patterns, which will be 4 * 13 = 52, which are all of the cards.\n    # But, since we only need 4 consecutive cards, we can think of the groups as slots having 4 consecutive numbers.\n    # For example: 1-2-3-4, 2-3-4-5, ..., 10-11-12-13. There are 10 such groups.\n    # If we have 4 cards in any of these groups, they are consecutive.\n    # So, for the 11th card (worst case), we are guaranteed to have 4 cards that are consecutively numbered.\n\n    # There are 10 possible 'slots' for 4 consecutive numbers,\n    # to ensure 4 consecutive cards, we need to draw at least one card from each group + 1 extra card.\n    # That's 10 + 1, which is 11 cards.\n\n    return 11\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variable declaration\n    g = 9.81   # acceleration due to gravity (m/s^2)\n    h_initial = 3000  # initial height (m)\n    h_final = 2000    # final height (m)\n    v_initial = 0     # initial velocity (m/s)\n    \n    # Using the kinematic equation: v_final^2 = v_initial^2 + 2 * g * (h_final - h_initial)\n    v_final = symbols('v_final')\n    equation = Eq(v_final**2, v_initial**2 + 2 * g * (h_final - h_initial))\n    \n    # Solve for v_final\n    v_final_solution = solve(equation, v_final)\n    \n    # Since the skydiver is falling downwards v_final will be taken as the positive root\n    return max(v_final_solution)\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    # Ashley is currently 10 years old.\n    ashley_current_age = 10\n    \n    # Three years ago, Ashley's age.\n    ashley_age_three_years_ago = ashley_current_age - 3\n    \n    # According to the problem, Ashley was 2 years older than her brother three years ago.\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    \n    # Therefore, her brother's current age is his age three years ago plus three years.\n    brother_current_age = brother_age_three_years_ago + 3\n    \n    return brother_current_age\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0245689', 6):\n        if int(f'3{perm[0]}1{perm[1]}{perm[2]}7{perm[3]}{perm[4]}{perm[5]}0') % 3 == 0 and \\\n           int(f'3{perm[0]}1') % 4 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5') % 5 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5{perm[2]}') % 6 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5{perm[2]}67') % 7 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5{perm[2]}67{perm[3]}8') % 8 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5{perm[2]}67{perm[3]}8{perm[4]}') % 9 == 0 and \\\n           int(f'3{perm[0]}1{perm[1]}5{perm[2]}67{perm[3]}8{perm[4]}9{perm[5]}0') % 10 == 0:\n            B, D, E, F, H, I, J = perm\n            break\n    return {'A': 3, 'B': int(B), 'C': 1, 'D': int(D), 'E': int(E), 'F': int(F), 'G': 7, 'H': int(H), 'I': int(I), 'J': 0}\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    page_number = 0\n    printed_page = 0\n\n    while printed_page < 89:\n        page_number += 1\n        if page_number % 3 != 0:\n            printed_page += 1\n            \n    return page_number\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'c' be the price of each cap, 'w' be the price of each wristband, and 'm' be the total money Caleb had initially.\n    c, w, m = symbols('c w m')\n    \n    # Given that the cost of each cap is 3 times the cost of a wristband\n    equation1 = Eq(c, 3 * w)\n    \n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    equation2 = Eq((2/5) * m, 4 * c + 6 * w)\n    \n    # Solve the first two equations to find the relationship between c, w, and m\n    solutions = solve((equation1, equation2), (c, w, m))\n    \n    # Using the relationship found from the equations to determine the price of each cap and the total amount of money\n    cost_per_cap = solutions[c]\n    total_money = solutions[m]\n    \n    # Caleb spent 1/3 of his remaining money (which is total_money - (2/5) * total_money) on more caps\n    # Let 'x' be the number of additional caps he bought\n    x = symbols('x')\n    remaining_money = total_money - (2/5) * total_money\n    money_spent_on_more_caps = (1/3) * remaining_money\n    equation3 = Eq(money_spent_on_more_caps, x * cost_per_cap)\n    \n    # Solve for the number of additional caps bought, 'x'\n    additional_caps = solve(equation3, x)\n    \n    # Number of caps bought initially is 4\n    total_caps = 4 + additional_caps[0]\n    \n    return total_caps\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    adult_price = 5\n    child_price = 3\n    total_tickets = 19\n    total_sales = 75\n\n    for adult_tickets in range(total_tickets + 1):\n        child_tickets = total_tickets - adult_tickets\n        if adult_tickets * adult_price + child_tickets * child_price == total_sales:\n            return adult_tickets\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Multiples of 3\n    multiples_of_3 = 600 // 3\n    \n    # Multiples of 5\n    multiples_of_5 = 600 // 5\n    \n    # Multiples of both 3 and 5 (i.e., multiples of 15)\n    multiples_of_15 = 600 // 15\n    \n    # Applying the Inclusion-Exclusion Principle\n    count = multiples_of_3 + multiples_of_5 - multiples_of_15\n    \n    return count\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n\n    # Calculate the difference in ages between now and the future for Tom\n    tom_age_difference = tom_age_future - tom_age_now\n\n    # Grandma's age now is the age she will be when Tom is 20 minus the \n    # difference in Tom's age between now and then\n    grandma_age_now = grandma_age_future - tom_age_difference\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n    class_B_students = symbols('class_B_students')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # It means: 4 * (2 * class_B_students) = candies - 20\n    # Simplifying: 8 * class_B_students = candies - 20\n    \n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # It means: 6 * class_B_students = candies - 16\n    \n    # Number of students in class A is twice of class B\n    # It means there is a fixed relation between number of students in class A and class B\n\n    equation1 = Eq(8 * class_B_students, candies - 20)\n    equation2 = Eq(6 * class_B_students, candies - 16)\n\n    solutions = solve((equation1, equation2), (candies, class_B_students))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6): # He can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4): # He can use 0 to 3 twenty-pence coins\n            for fifty_pence in range(2): # He can use 0 or 1 fifty-pence coins\n                if 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Since we need to guarantee 2 stickers of the same color, and there are 2\n    # colors (red and green), by the Pigeonhole Principle, if we draw 3 stickers,\n    # we could still pick one of each color (worst case scenario). To ensure we\n    # get two stickers of the same color, we must draw one more, which makes it 4 stickers.\n    return 4\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    # Number of teams\n    num_teams = 5\n    # Number of matches using the handshake problem formula: n * (n - 1) / 2\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2\n    goose_legs = 2 * 2\n    total_legs = 36\n    lamb_legs = 4\n    remaining_legs = total_legs - duck_legs - goose_legs\n    number_of_lambs = remaining_legs / lamb_legs\n    return int(number_of_lambs)\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum number of balls that can be taken out without having 4 of the same color\n    # is taking out all 3 colors without reaching 4 of any.\n    # For example, take 3 blue, then 3 orange, then 2 yellow. That is 3+3+2 balls without 4 of the same color.\n    \n    # Maximum balls without 4 of the same color\n    max_without_four = (5 - 1) + (4 - 1) + (2 - 1)\n    \n    # The next ball she takes out has to be the fourth of some color.\n    balls_to_take_out = max_without_four + 1\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (Top layer): 1^2 = 1 box\n    layer1 = 1**2\n    # Layer 2: 2^2 = 4 boxes\n    layer2 = 2**2\n    # Layer 3: 3^2 = 9 boxes\n    layer3 = 3**2\n    # Total number of boxes in the top three layers\n    total_boxes = layer1 + layer2 + layer3\n    return total_boxes\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    value = 1.2 + 1.23 + 1\n    ans = value * value - value * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = (3 / 5) * 600\n    good_copies_needed_B = (2 / 5) * 600\n\n    total_copies_A = good_copies_needed_A * (5 / 4)\n    total_copies_B = good_copies_needed_B * (6 / 5)\n\n    total_copies = total_copies_A + total_copies_B\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    from math import sqrt\n\n    total_students = 40\n    students_per_side = sqrt(total_students)\n\n    return int(students_per_side)\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the son takes to harvest the crops alone.\n    x = symbols('x')\n\n    # Equation representing work done (Work = Rate * Time)\n    # The combined rate is the inverse of the time they take together (1/16).\n    # The farmer's rate is the inverse of the time he takes alone (1/24).\n    # The son's rate is the inverse of the time he takes alone (1/x).\n    equation = Eq((1/24) + (1/x), 1/16)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Initial height from which the ball is dropped\n    bounce_height = initial_height / 2  # Height after the first bounce\n    total_distance = initial_height + 2 * bounce_height  # Total distance after the second time reaching the floor\n    return total_distance\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the total amount of sugar\n    sugar_from_annie = 300 * 0.15\n    sugar_from_becky = 400 * 0.25\n    sugar_from_carol = 300 * 0.35\n\n    total_sugar = sugar_from_annie + sugar_from_becky + sugar_from_carol\n    # Calculate the total solution weight\n    total_solution_weight = 300 + 400 + 300\n\n    # Calculate the concentration percentage\n    concentration = (total_sugar / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5 = total_rolls * probability_of_5\n\n    return expected_number_of_5\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for i in range(999, 99, -1):\n        if i % 36 == 0:\n            return i\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # Total ways to arrange 5 children\n    total_arrangements = factorial(total_children)\n    \n    # Now, we need to calculate the arrangements where Hugh is between Louise and Richard.\n    # Treat Louise, Hugh, and Richard as one unit, because Hugh can't be between them.\n    # That leaves us with 3 units (LHR unit, the other two children) which we can arrange.\n    arrangements_LHR_together = factorial(3)\n    \n    # Within that unit, Louise and Richard can be arranged in 2! ways, as Hugh has fixed position (either at one end or the other)\n    arrangements_within_LHR = factorial(2)\n\n    # Arrangements where Hugh is between Louise and Richard\n    invalid_arrangements = arrangements_LHR_together * arrangements_within_LHR\n    \n    # Subtract invalid arrangements from total arrangements to get the valid arrangements.\n    valid_arrangements = total_arrangements - invalid_arrangements\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    if remainder >= divisor:\n        return \"Incorrect: Remainder must be less than divisor.\"\n    else:\n        correct_solution = quotient * divisor + remainder\n        return correct_solution\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Total number of matches played is the sum of wins, draws, and losses.\n    # Let total_matches represent the total number of matches.\n    # Since the team lost 10 matches, we have:\n    # (2/5) * total_matches + (7/20) * total_matches + 10 = total_matches\n    # Solving for total_matches gives us:\n    total_matches = 10 / (1 - (2/5) - (7/20))\n\n    # Number of games won and drawn can now be calculated:\n    games_won = (2/5) * total_matches\n    games_drawn = (7/20) * total_matches\n\n    # Now calculate the points won:\n    points = (games_won * 3) + (games_drawn * 1)\n    # No points are added for losses, so we can ignore them in point calculation.\n\n    return int(points)\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**(i // 2) * (40 - i) for i in range(0, 40, 2))\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = original_price * 0.10\n    new_price_after_first_discount = original_price - first_discount\n    second_discount = new_price_after_first_discount * 0.20\n    final_price = new_price_after_first_discount - second_discount\n\n    return final_price\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    ans = list(range(start, end+1, step))\n    return len(ans)\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)  # Total cost in pence\n    total_cost_pounds = total_cost / 100  # Convert pence to pounds\n    change = 10 - total_cost_pounds  # Calculate change from a 10 pound note\n\n    return round(change, 2)  # Round to 2 decimal places to represent pounds and pence\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_in_one_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the means\n    mean_first_3 = symbols('mean_first_3')\n    mean_last_5 = symbols('mean_last_5')\n    \n    # Since the total mean is 555, the sum of all numbers is 8 * 555\n    total_sum = 8 * 555\n    \n    # Equation for the sum of the first 3 numbers\n    sum_first_3 = 3 * mean_first_3\n    \n    # Equation for the sum of the last 5 numbers\n    sum_last_5 = 5 * mean_last_5\n    \n    # The mean of the first 3 numbers is 296 less than the mean of the last 5\n    equation1 = Eq(mean_first_3, mean_last_5 - 296)\n    \n    # The sum of the first 3 and last 5 numbers equals the total sum\n    equation2 = Eq(sum_first_3 + sum_last_5, total_sum)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mean_first_3, mean_last_5))\n    \n    return solutions[mean_last_5]\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    \n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # Calculate the work rate per person per day\n    work_per_person_per_day = 1 / (initial_people * initial_days)\n\n    # Calculate the total amount of work needed\n    total_work = 1\n\n    # Calculate work needed per day to finish in target_days\n    work_needed_per_day = total_work / target_days\n\n    # Calculate the amount of people needed to achieve the work per day\n    people_needed = work_needed_per_day / work_per_person_per_day\n\n    # Calculate how many more people are needed\n    additional_people = people_needed - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kilograms_per_pound = 1 / 2.2\n    kilograms = pounds * kilograms_per_pound\n    return kilograms\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_age_now = 53\n    mother_age_now = 81\n    years_ago = symbols('years_ago')\n    \n    equation = Eq((isaac_age_now - years_ago), (mother_age_now - years_ago)/3)\n    years_ago_solution = solve(equation, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    return custom_op(5, 10) - custom_op(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    equation2 = Eq(rasidah * (2/5), rasidah - (rasidah * (3/5)))\n\n    # Chai Seng spent 6/7 of his money\n    equation3 = Eq(chai_seng * (1/7), chai_seng - (chai_seng * (6/7)))\n\n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation4 = Eq(chai_seng * (1/7), (rasidah * (2/5)) / 2)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Equating given conditions to equations x congruent to respective remainders\n    # Grandma's age congruent to 2 mod 4\n    # Grandma's age congruent to 3 mod 5\n    # Grandma's age congruent to 6 mod 9\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Using sympy's solve_congruence function to solve the system of congruences\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    all_possible_numbers = list(permutations(digits, 3))\n    \n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(2, 21):\n        if isprime(number) and isprime(number + 6) and isprime(number - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_difference = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_difference / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]\n    second_differences = [differences[i] - differences[i-1] for i in range(1, len(differences))]\n    \n    # Assuming a double arithmetic sequence, the second differences are constant\n    # The next difference should be the same as the last second difference added to the last first difference\n    next_difference = differences[-1] + second_differences[-1]\n    next_number = sequence[-1] + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    final_mean = 52\n    initial_sum = initial_mean * 8\n    final_sum = final_mean * 9\n    extra_apple_weight = final_sum - initial_sum\n    \n    return extra_apple_weight\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):  # To ensure a 2-digit number, tens digit should be at least 1 and at most 9\n        for ones in range(0, 10):  # Ones digit can be between 0 and 9\n            if tens + ones == 15:  # Check if the sum of digits is 15\n                return tens * 10 + ones  # Return the smallest 2-digit number\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -(4 ** 2)\n    return x\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    digits = '12345'\n    count = 0\n    for p in permutations(digits, 5):\n        if int(p[-1]) % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Only lamps that have an odd number of factors (switch toggles) are on.\n    # Only perfect squares have an odd number of factors.\n    # Therefore, we need to count the perfect squares up to 250.\n    ans = 0\n    for i in range(1, 251):\n        if i**0.5 == int(i**0.5):\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pages in the document\n    x = symbols('x')\n\n    # Original speed is 50 pages per minute\n    original_speed = 50\n\n    # Time taken at original speed\n    original_time = x / original_speed\n\n    # New speed is original speed + 20 pages per minute\n    new_speed = original_speed + 20\n\n    # Time taken at new speed\n    new_time = x / new_speed\n\n    # The new time is the original time minus 2 minutes\n    equation = Eq(original_time - new_time, 2)\n\n    # Solve the equation to find the number of pages\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # assuming a reasonable upper limit for divisor\n        dividend = 8 * divisor + 7\n        if dividend % divisor == 7:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    def next_monday_year(start_year):\n        date_to_check = datetime(start_year, 1, 28)\n        while True:\n            date_to_check += timedelta(days=365)  # add a year (non-leap year)\n            if date_to_check.weekday() == 0:  # if it's a Monday\n                if date_to_check.year % 4 == 0:  # if it's a leap year, correct for the extra day\n                    if (date_to_check.year % 100 != 0) or (date_to_check.year % 400 == 0):\n                        date_to_check -= timedelta(days=1)\n                    if date_to_check.weekday() == 0:\n                        return date_to_check.year\n                else:\n                    return date_to_check.year\n\n    ans = next_monday_year(2013)\n    return ans\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    savings_duration = 7  # one week\n    amount_lent = 5\n    amount_spent = 3\n\n    total_savings = initial_amount + (daily_savings * savings_duration) - amount_lent - amount_spent\n\n    return total_savings\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 a.m. to 7:30 a.m.\n    jog_time = 1  # hours\n    jog_speed = 6  # miles per hour\n    jog_distance = jog_time * jog_speed\n\n    # Star walks for 2 hours from 7:30 a.m. to 9:30 a.m.\n    walk_time = 2  # hours\n    walk_speed = 5  # miles per hour\n    walk_distance = walk_time * walk_speed\n\n    # Total distance traveled\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Let x be the missing number. The equation is 4 * x - 13 = 55\n    # We can rearrange the equation to find x: 4 * x = 55 + 13\n    x = (55 + 13) // 4\n\n    return x\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define the custom operation\n    def custom_op(a, b):\n        return a + b - (a//10 + b//10)*2\n    \n    # Calculate using the custom operation for 9 ◈ 20\n    ans = custom_op(9, 20)\n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # Base rate in cents\n    additional_rate = 5  # Additional rate per minute in cents\n    total_cost = 140  # Total cost in cents\n\n    # If the total cost is less than or equal to the base rate,\n    # then the call lasted 15 minutes or less\n    if total_cost <= base_rate:\n        return 15\n\n    # Calculate the additional minutes by subtracting the base rate\n    # from the total cost and dividing by the additional rate\n    additional_minutes = (total_cost - base_rate) / additional_rate\n\n    # Total minutes is the 15 minutes of the base rate plus the additional minutes\n    total_minutes = 15 + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    final_result = 37\n    number_after_sub_and_div = final_result - 11\n    number_after_sub = number_after_sub_and_div * 2\n    initial_number = number_after_sub + 4\n    return initial_number\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Last digit pattern for powers of 2: 2, 4, 8, 6\n    # Last digit pattern for powers of 3: 3, 9, 7, 1\n    # Pattern repetition occurs every 4th power\n    # Therefore, we only need the last digit of 2017 modulo 4 to find the pattern index\n    two_pattern = [2, 4, 8, 6]\n    three_pattern = [3, 9, 7, 1]\n    \n    # 2017 % 4 = 1, so the last digit for both patterns is at index 1\n    last_digit_two = two_pattern[2017 % 4 - 1]\n    last_digit_three = three_pattern[2017 % 4 - 1]\n    \n    # Multiply the last digits and get the last digit of the result\n    ans = (last_digit_two * last_digit_three) % 10\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = (35 - 10) / (7 - 2)\n    return x\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2 + 1/2\n    quarters = total_quarters * 4\n    return quarters\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position_front = 5\n    eddie_position_back = 9\n    people_between = 2\n\n    total_people = (lucy_position_front - 1) + people_between + (eddie_position_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5  # the first multiple of 5 greater than 56\n    last_multiple = 120 // 5 * 5  # the last multiple of 5 less than or equal to 120\n    if last_multiple > 120:  # correct last multiple if it is greater than 120\n        last_multiple -= 5\n    number_of_multiples = (last_multiple - first_multiple) // 5 + 1\n    return number_of_multiples\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f\"26{B}789\") % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on May 10, 2005. \n    # Therefore, Gina was 35 years old 15 years earlier, on May 10, 1990.\n    gina_birth_year = 2005 - 50\n    year_when_gina_was_35 = gina_birth_year + 35\n    \n    # James was 20 years old on May 10, 1997. \n    # Therefore, James was born in 1997 - 20 = 1977.\n    james_birth_year = 1997 - 20\n    james_age_when_gina_was_35 = year_when_gina_was_35 - james_birth_year\n\n    return james_age_when_gina_was_35\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    step1 = result + 21\n    step2 = step1 / 7\n    original_number = step2 - 4\n    return original_number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to cm\n    dress_length_cm = 5 * 100 + 8    # Convert meters to cm\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    # Convert the length of each stripe back to meters and centimeters\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_cm_remainder = stripe_length_cm % 100\n    \n    ans = (stripe_length_m, stripe_length_cm_remainder)\n    return ans\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of right-handed girls is when all boys are right-handed.\n    # Since not all girls are right-handed, at least one girl is left-handed.\n    # Subtract the total number of right-handed (including all boys) from total right-handed pupils\n    boys = total_pupils - girls\n    right_handed_boys = min(boys, right_handed)\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(8):\n        for j in range(7):\n            for k in range(5):\n                for l in range(3):\n                    if len(set([primes[l], primes[k], primes[j], primes[i]])) == 4:\n                        num = 3 * 5 * 7 * 8 + 3 * 5 * 7 * primes[l] - 3 * 5 * primes[k] - 3 * 8 * primes[j] - 5 * 8 * primes[i]\n                        if all(num % div == prime for div, prime in zip([3, 5, 7, 8], [primes[l], primes[k], primes[j], primes[i]])):\n                            return num\n    return -1\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = 3616\n    remaining_flowers = 2644\n\n    # Equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, total_flowers)\n    equation2 = Eq(orchids, 3/8 * (orchids + tulips))  # combined orchids and tulips ratio is 3+5=8 parts\n    equation3 = Eq(orchids * 0.6 + tulips * 4/5 + roses * 0.75, remaining_flowers)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 4 + 5 * B)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    # Total cost equation: 12*books + 9*files = 336\n    total_cost_eq = Eq(12 * books + 9 * files, 336)\n    # Number of books is 14 more than files: books = files + 14\n    books_files_eq = Eq(books, files + 14)\n\n    # Solving equations\n    solutions = solve((total_cost_eq, books_files_eq), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    total_animals = 10\n    total_legs = 34\n\n    # Since each chicken has 2 legs and each rabbit has 4 legs,\n    # let's denote the number of chickens as x and rabbits as y.\n    # We have two equations:\n    # x + y = total_animals (10)\n    # 2x + 4y = total_legs (34)\n    # We can deduce a system of linear equations and solve for x and y.\n\n    for x in range(total_animals + 1):\n        y = total_animals - x\n        if 2 * x + 4 * y == total_legs:\n            return x  # Since we need to find the number of chickens\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Calculate the ones digit of each power from 1^2013 to 9^2013\n    # and sum them up\n    ones_digits_sum = sum(pow(i, 2013, 10) for i in range(1, 10))\n\n    # Get the ones digit of the total sum\n    ones_digit = ones_digits_sum % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Since there are 3 colors, if one takes one of each, the next sock must match at least one. \n    # So 1 red, 1 blue, 1 black -> next one will match one of these colors.\n    # So, Peter must take out 4 socks to ensure he has at least two of the same color.\n\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert Japan departure time to France time\n    japan_departure_hour = 20  # 8pm\n    france_departure_hour = (japan_departure_hour - 7) % 24\n\n    # France arrival time\n    france_arrival_date = 3  # 3rd July\n    france_arrival_hour = 1  # 1am\n    \n    # Calculate the flight duration\n    # Check if arrival is on the next day\n    if france_arrival_date > 2:\n        flight_duration = (24 - france_departure_hour) + france_arrival_hour\n    else:\n        flight_duration = france_arrival_hour - france_departure_hour\n\n    return flight_duration\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    for i in range(1, 132):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, sid = symbols('eugene sid')\n    \n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    # variable declarations\n    total_questions = 50\n    unattempted_questions = 3\n    correct_marks = 4\n    incorrect_penalty = 1\n    total_score = 168\n\n    # total attempted questions\n    attempted_questions = total_questions - unattempted_questions\n\n    # let x be the number of correct answers\n    # then (attempted_questions - x) will be the number of incorrect answers\n    # setting up the equation: 4x - (attempted_questions - x) = total_score\n    \n    # the equation can be transformed into: 4x - attempted_questions + x = total_score\n    # solving for x: 5x - attempted_questions = total_score\n    # x = (total_score + attempted_questions) / 5\n    \n    correct_answers = (total_score + attempted_questions) / (correct_marks + incorrect_penalty)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Formulating the equations based on the given information\n    # Equation for the total cost of 9 necklaces and 5 earrings\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    # Equation for the total cost of 2 necklaces and 3 earrings\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solving the system of equations for the cost of one necklace and one earring\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Computing the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # The first digit can be 1 or 2 (two choices, since it can't be 0 for a 2-digit number)\n    first_digit_options = 2\n    \n    # The second digit can be 0, 1, or 2 (three choices, since repetition is allowed)\n    second_digit_options = 3\n    \n    # By the multiplication principle, multiply the options for each digit\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest number be x\n    # Then the consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # Their sum is 5x + 20 (since 2+4+6+8 = 20)\n    # We are given that their sum is 200, so 5x + 20 = 200\n    # Solving for x gives us x = (200 - 20)/5\n\n    x = (200 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = sum(100 / product for product in range(97, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Initially, if Katie needs 8 minutes to cut a piece of wood into 5 sections.\n    # This means she makes 4 cuts in 8 minutes. Each cut takes 8 / 4 = 2 minutes.\n    time_per_cut = 8 / 4\n\n    # If Katie wants to make 6 cuts, since her cutting speed remains the same,\n    # She will need time_per_cut * number_of_cuts minutes.\n    total_time = time_per_cut * 6\n\n    return total_time\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    remaining_votes = total_votes - (22 + 27 + 35)  # Votes not yet given to any candidates\n    # In the worst case, all remaining votes go to one person other than Peter.\n    # Peter needs one more than half of the votes not given to him to win.\n    half_of_remaining = (remaining_votes // 2) + 1\n    additional_votes_needed = half_of_remaining - peter_votes\n    return additional_votes_needed\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Comparing the units of two numbers 31 and 32\n    units_31 = 31 % 10\n    units_32 = 32 % 10\n\n    # Returning the number with the highest value of units\n    ans = 31 if units_31 > units_32 else 32\n\n    return ans\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the volume of sugar solution transferred be x grams\n    x = symbols('x')\n\n    # Container A has 50g of water with 10% sugar concentration. If we remove x grams, it has (50-x) grams left.\n    # The amount of sugar in A after removing x grams is 50 * 0.1 - x * 0.1.\n    # The new concentration in A is thus (5 - 0.1 * x) / (50 - x).\n\n    # Container B has 30g of water with 20% sugar concentration. If we add x grams from A, it has (30+x) grams.\n    # The amount of sugar in B after adding x grams from A is 30 * 0.2 + x * 0.1.\n    # The new concentration in B is thus (6 + 0.1 * x) / (30 + x).\n\n    # According to the problem, the concentrations in A and B are equal.\n    equation = Eq((5 - 0.1 * x) / (50 - x), (6 + 0.1 * x) / (30 + x))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction_amount = 189\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_pence = 490  # converting pounds to pence\n    for num_coins in range(1, total_pence // 5):\n        if 5 * num_coins + 10 * num_coins + 20 * num_coins == total_pence:\n            return 3 * num_coins  # since there are an equal number of each coin\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    book_cost = initial_money * 0.10\n    money_left_after_book = initial_money - book_cost\n    dvd_cost = money_left_after_book * 0.20\n    money_left = money_left_after_book - dvd_cost\n    return money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # Annie's total money in dollars\n    gift_cost = 20    # Gift cost in dollars\n    remaining_money = (total_money - gift_cost) * 100  # Convert remaining money to cents\n\n    return remaining_money\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # number of terms\n    total_sweets = 135\n    # Let the number of sweets eaten on the first day be 'a'\n    # Total sweets eaten over 9 days is the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d), where d = 3\n    # 135 = 9/2 * (2a + (9-1)*3)\n    # 135 = 9/2 * (2a +24)\n    # 135 = 9 * (a + 12)\n    # 15 = a + 12\n    # a = 15 - 12\n    a = total_sweets / n - (n - 1) * 3 / 2\n    \n    # The last term 'l' is a + (n-1)d\n    l = a + (n - 1)*3\n    return int(l)\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * (1 + rate) ** time\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # Pages 1-9 use 1 digit each, total of 9 pages\n    one_digit_pages = 9\n    \n    # Pages 10-99 use 2 digits each, total of 90 pages\n    two_digit_pages = 90 * 2\n    \n    # Pages 100-185 use 3 digits each, total of 86 pages\n    three_digit_pages = (185 - 99) * 3\n    \n    # Sum the total amount of digits used\n    total_digits = one_digit_pages + two_digit_pages + three_digit_pages\n    \n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    yearly_salary = 24000\n    pay_rise_percent = 10\n\n    pay_rise_amount = yearly_salary * (pay_rise_percent / 100)\n    new_yearly_salary = yearly_salary + pay_rise_amount\n    new_monthly_salary = new_yearly_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Loop through all possible values for day (1-31) and month (1-12)\n    for day in range(1, 32):\n        for month in range(1, 13):\n            # Calculate the sum of the two products\n            if month * 31 + day * 12 == 376:\n                # Return the answer in \"ddmm\" format\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    missing_number = (4.08 * 20 - 1.08 * 20) / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n    \n    milk_to_use = (tom_flour * milk_needed) / flour_needed\n\n    return milk_to_use\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    sweets_initial = sweets_left + sweets_taken\n    return sweets_initial\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n\n    calculator_sale_price = calculator_original_price * (1 - 1/4)\n    protractor_sale_price = protractor_original_price * (1 - 1/2)\n\n    total_payment = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n\n    return total_payment\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2 / 3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000  # because 1 tonne = 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x be the current age of the older elephant\n    # If y years pass, the younger elephant will be the same age as the older elephant's current age\n    # So we have: 18 + y = x\n    # The older elephant will then be: x + y = 62\n    # We solve these equations to find the value of x (older elephant's current age)\n\n    # From first equation: y = x - 18\n    # Substitute y in second equation with the expression from first equation: x + (x - 18) = 62\n    # Solve for x: 2 * x = 62 + 18  -> 2 * x = 80  ->  x = 40\n    x = 40\n    return x\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let the total amount of grass be G (constant)\n    # The rate at which each ox eats the grass is r (constant)\n    # Let the time for 21 oxen to finish eating the grass be T weeks\n    \n    # The amount of grass eaten by each ox per week is G/(number of oxen * number of weeks)\n    # Since the grass eaten per ox per week is constant, we can create the following equation:\n    # 27 * 6 * r = 23 * 9 * r\n    \n    # Simplify to find the relationship between G and r:\n    # G = 27 * 6 * r = 23 * 9 * r\n    # Now find the time T for 21 oxen to eat the grass\n    # G = 21 * T * r\n    \n    # Now we can solve for T using the relationships found above:\n    T = (27 * 6) / 21\n    return T\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's biking speed is 10 mph, and she rides from 7:30 to 8:30 a.m., which is 1 hour\n    biking_distance = 10 * 1  # 10 miles per hour * 1 hour\n\n    # Ellen's train speed is 50 mph, and she travels from 8:30 to 10:30 a.m., which is 2 hours\n    train_distance = 50 * 2  # 50 miles per hour * 2 hours\n\n    # Total distance traveled by Ellen every Saturday\n    total_distance = biking_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue = symbols('blue')\n    \n    red = blue + 25\n    green = red + 32\n    total = blue + red + green\n    equation = Eq(total, 112)\n    solution = solve(equation, blue)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Since empty boxes are allowed, this is a problem of distributing indistinguishable items into distinguishable boxes,\n    # which can be solved by the \"Stars and Bars\" theorem (Theorem two).\n    # The formula is: (n+k-1) choose (k-1), where n is the number of items and k is the number of boxes.\n    from math import comb\n\n    balls = 5    # Number of balls (n)\n    boxes = 3    # Number of boxes (k)\n\n    # Applying the formula: (n+k-1) choose (k-1)\n    ways = comb(balls + boxes - 1, boxes - 1)\n\n    return ways\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    ans = factorial(len(word)) // denominator\n    return ans\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    from_front_to_back = 3\n    from_back_to_front = 2\n    from_left_to_right = 4\n    from_right_to_left = 3\n\n    rows = from_front_to_back + from_back_to_front - 1\n    columns = from_left_to_right + from_right_to_left - 1\n\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n     \n    ema, keng_wee = symbols('ema keng_wee')\n     \n    # Equation 1: Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    # Equation 2: After spending, Ema and Keng Wee have the same amount\n    equation2 = Eq(ema - ema / 4, keng_wee - (4 / 7) * keng_wee)\n     \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (ema, keng_wee))\n    \n    return solution[keng_wee]\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 217\n    while sum(int(digit) for digit in str(number)) != 9:\n        number += 1\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    fraction_of_36 = 1/4 * 36\n    ans = fraction_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from front, 2nd from back, so there are 3 + 2 - 1 rows\n    rows = 3 + 2 - 1\n    \n    # Lucas is 4th from left, 3rd from right, so there are 4 + 3 - 1 columns\n    columns = 4 + 3 - 1\n    \n    # Total students in the rectangular array\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of girls (g) and boys (b)\n    g, b = symbols('g b')\n\n    # Equation based on the initial condition:\n    # The number of girls is 9/11 of the number of boys.\n    initial_condition = Eq(g, 9/11 * b)\n\n    # Equation based on the final condition:\n    # After transferring 2 girls in, the number of girls (g + 2) becomes 10/11 of the number of boys.\n    final_condition = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (g, b))\n\n    # Calculate the total number of students after the 2 girls are transferred in\n    total_students = solutions[g] + solutions[b] + 2\n\n    return total_students\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 0\n    for i in range(1, 11):\n        ans += sum(1/i for j in range(1, i+1))\n        if i != 1:  # avoid double counting for first term in each series\n            ans += sum(1/i for j in range(i-1, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    total_paid_pence = 5 * 100  # Convert £5 to pence\n    change_pence = total_paid_pence - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    expr = 2*(3*x - y) - (2*x + 4)\n\n    solution = solve(Eq(expr, 0), (x, y))\n\n    # The value we are interested in is the one that will replace (2x - y)\n    value_in_brackets = 2*solution[x] - solution[y]\n\n    return value_in_brackets\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan = symbols('zehan')\n    equation = Eq(zehan + 12, 3 * zehan)\n    solution = solve(equation, zehan)\n\n    return solution[zehan]\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "网络故障，请重试"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    total_tiles = 390\n    # Let x be the number of tiles Mr Tan has, then Mr Lim will have 5x tiles.\n    # We have the equation: x + 5x = 390\n    # Solving for x gives us the number of tiles Mr Tan has.\n\n    # Mr Tan's tiles\n    x = total_tiles / 6\n\n    # Mr Lim's tiles\n    lim_tiles = 5 * x\n\n    # The difference in number of tiles\n    difference = lim_tiles - x\n    \n    return int(difference)\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose exactly one of A, B, or C\n    ways_to_choose_one_of_ABC = comb(3, 1)\n    \n    # Number of ways to choose the remaining 4 students out of the 12 (excluding A, B, C)\n    ways_to_choose_remaining = comb(12, 4)\n    \n    # Total number of ways to form the team\n    total_ways = ways_to_choose_one_of_ABC * ways_to_choose_remaining\n    \n    return total_ways\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    equation = Eq(savings * 1/3 -177 -129, savings * 1/3 * 1/2)\n\n    ans = solve(equation, savings)[0]\n\n    return ans\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of lemon juice in the bottle\n    lemon_juice = symbols('lemon_juice')\n\n    # As per the new ratio after adding 80ml lemon juice\n    equation = Eq((lemon_juice + 80) / (5 * (lemon_juice + 80) / 6), 6/5)\n\n    # Solve the equation for the original amount of lemon juice\n    original_lemon_juice = solve(equation, lemon_juice)\n\n    return original_lemon_juice[0]\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_part = 6\n    savannah_part = 5\n    shaila_sweets = 36\n\n    total_parts = shaila_part + savannah_part\n    total_sweets = (shaila_sweets * total_parts) // shaila_part\n\n    return total_sweets\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase in speed\n    delayed_time = 9 / 60  # 9 minutes converted to hours\n\n    # The time to reach the destination at the usual speed is what it would be at the increased speed plus the delay\n    # Let the usual time to reach the destination be 't' hours.\n    # So, t * usual_speed = (t - delayed_time) * increased_speed\n    # Solving for 't', we get:\n    \n    # usual_speed * t = increased_speed * (t - delayed_time)\n    # usual_speed * t = increased_speed * t - increased_speed * delayed_time\n    # usual_speed * t - increased_speed * t = -increased_speed * delayed_time\n    # t * (usual_speed - increased_speed) = -increased_speed * delayed_time\n    # t = (increased_speed * delayed_time) / (increased_speed - usual_speed)\n    \n    t = (increased_speed * delayed_time) / (increased_speed - usual_speed)\n    \n    # Distance = speed * time\n    distance = usual_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    # Iterate over the possible number of red ropes, and calculate blue ropes accordingly\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if red_ropes * 2 + blue_ropes * 3 == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # If we reverse the steps:\n    # Multiply the quotient by 8\n    quotient = 80\n    difference = quotient * 8\n\n    # Add 8 to the result\n    product = difference + 8\n\n    # Divide the result by 8\n    sum_with_number = product // 8\n\n    # Subtract 8 to get the original number\n    original_number = sum_with_number - 8\n    \n    return original_number\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original speed as s and the original time as t\n    # We use symbols from sympy to create symbolic variables\n    s, t = symbols('s t', positive=True, real=True)\n\n    # Increased speed method information:\n    # new speed = original speed + 25% of original speed\n    # new time = original time - 20 min\n    increased_speed = s * 1.25\n    decreased_time = t - 20\n\n    # First equation based on distance = speed * time for increased speed\n    eq1 = Eq(increased_speed * decreased_time, s * t)\n    \n    # Decreased speed method information:\n    # new speed = original speed - 45 m/min\n    # new time = original time + 75% of original time\n    decreased_speed = s - 45\n    increased_time = t * 1.75\n\n    # Second equation based on distance = speed * time for decreased speed\n    eq2 = Eq(decreased_speed * increased_time, s * t)\n    \n    # Solve the system of equations for the original speed and time\n    solutions = solve((eq1, eq2), (s, t))\n    \n    # Use the original speed and time to find the distance\n    distance = solutions[s] * solutions[t]\n    \n    return distance\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_saved_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n    \n    total_saved_second_half = average_second_half * months_in_half_year\n    total_saved_year = total_saved_first_half + total_saved_second_half\n    total_months = months_in_half_year * 2\n    \n    average_saved_per_month = total_saved_year / total_months\n    \n    return average_saved_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "from sympy import lcm\n\ndef solution():\n    lcm_value = lcm(7, 9)\n    leftovers = 2\n    smallest_number = lcm_value + leftovers - (lcm_value % 7)\n    while smallest_number % 9 != leftovers:\n        smallest_number += 7\n    return smallest_number\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total = 22\n    count = 0\n    for i in range(1, total // 2):\n        if total - i != i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    return total_used.simplify()\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * height + 2 * width\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    from fractions import Fraction\n    \n    result = 1\n    for i in range(2, 12):\n        result *= Fraction(1, 1) + Fraction(1, i)\n    \n    ans = result\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(1, 42):\n        if 41 % i == 0:\n            A = 41 // i + i\n            break\n    return A * 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    sum_of_numbers = 98\n    difference = 36\n\n    # Let the smaller number be x and the larger number be y\n    # We know that y - x = difference = 36\n    # And also x + y = sum_of_numbers = 98\n\n    # From the first equation y = x + difference\n    # Replace y in the second equation with (x + difference)\n\n    # x + (x + difference) = sum_of_numbers\n    # 2x + difference = sum_of_numbers\n    # 2x = sum_of_numbers - difference\n    # x = (sum_of_numbers - difference) / 2\n\n    smaller_number = (sum_of_numbers - difference) / 2\n\n    return smaller_number\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    # Total number of questions\n    total_questions = 60\n    # Percent of questions answered\n    percent_answered = 0.7\n    # Number of questions answered\n    questions_answered = int(total_questions * percent_answered)\n    # Number of questions answered correctly \n    correct_answers = symbols('correct_answers')\n\n    # Equation for total score\n    total_score = Eq(correct_answers * 3 - (questions_answered - correct_answers), 78)\n    \n    # Solve for number of questions answered correctly\n    correct_ans = solve(total_score, correct_answers)\n    \n    return correct_ans[0]\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given the cost of 6 files and 10 rulers is $40,\n    # let's create equations based on the given relationships.\n    # Let the cost of one file be f and one ruler be r.\n    # 6f + 10r = 40 (1)\n\n    # We need to find the cost of 9 files and 15 rulers,\n    # which can be represented as:\n    # 9f + 15r (2)\n\n    # We can observe that equation (2) is exactly 1.5 times equation (1).\n    # So, we can find the cost for 9 files and 15 rulers by multiplying the cost of\n    # 6 files and 10 rulers by 1.5\n\n    total_cost = 40 * 1.5  # Multiply by 1.5\n\n    return total_cost\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each individual underbrace\n    last_digit_4 = pow(4, 100, 10)  # Last digit of 4 raised to any power repeats every 2 (4^1=4, 4^2=6, 4^3=4, 4^4=6...) so the last digit of 4^100 is 6\n    last_digit_7 = pow(7, 100, 10)  # Last digit of 7 raised to any power repeats every 4 (7^1=7, 7^2=9, 7^3=3, 7^4=1...) so the last digit of 7^100 is 1\n    last_digit_9 = pow(9, 100, 10)  # Last digit of 9 raised to any power repeats every 2 (9^1=9, 9^2=1, 9^3=9, 9^4=1...) so the last digit of 9^100 is 1\n    last_digit_11 = pow(11, 100, 10) # Last digit of 11 raised to any power is always 1 (11^1=11, 11^2=121, 11^3=1331...) so the last digit of 11^100 is 1\n\n    # Multiply the last digits\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's and Jessie's money\n    john, jessie = symbols('john jessie')\n\n    # Equation 1: John had (5/13) of the amount of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n    \n    # Equation 2: John's money became 50% of Jessie's money after Jessie transferred $600 to John\n    equation2 = Eq(john + 600, 0.5 * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate the total amount of money they had\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    digit_counts = {1: 0, 2: 0}\n    num = 1\n\n    while True:\n        str_num = str(num)\n        digit_counts[1] += str_num.count('1')\n        digit_counts[2] += str_num.count('2')\n\n        if digit_counts[1] == 15 and digit_counts[2] == 14:\n            return num\n\n        num += 1\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    in_time = datetime.strptime(\"10:30\", \"%H:%M\")\n    out_time = datetime.strptime(\"11:00\", \"%H:%M\")\n    \n    baking_time = (out_time - in_time).total_seconds() / 60  # convert seconds to minutes\n    return int(baking_time)\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of T-shirts be 8x and the number of caps be 5x\n    x = symbols('x')\n\n    # T-shirts sold = 1/4 * 8x, Caps sold = 1/5 * 5x\n    t_shirts_sold = (1/4) * 8 * x\n    caps_sold = (1/5) * 5 * x\n\n    # Total amount collected from sold T-shirts and caps\n    total_collected = 3 * t_shirts_sold + 5 * caps_sold\n\n    # Creating the equation based on total collection\n    equation = Eq(total_collected, 132)\n\n    # Solving for x\n    x_value = solve(equation, x)\n\n    # Calculating the initial number of T-shirts\n    t_shirts_initial = 8 * x_value[0]\n\n    return t_shirts_initial\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Calculate the total cost of bananas and apples in pence\n    total_cost = (3 * 12) + (5 * 11)\n    # Ian pays with a £2 coin, which is equivalent to 200 pence\n    amount_paid = 200\n    # Calculate the change Ian gets in pence\n    change_in_pence = amount_paid - total_cost\n    # Convert pence to pounds and pence\n    change_in_pounds = change_in_pence // 100\n    change_in_pence = change_in_pence % 100\n    # Return the change in pounds and pence\n    return (change_in_pounds, change_in_pence)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n\n    oldest_age = youngest_age + (number_of_siblings - 1) * age_difference\n\n    return oldest_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    cost_calendar = 6.97\n    cost_ball = 2.99\n    total_spent = cost_calendar + cost_ball\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_muffins = 1/5\n    flour_cookies = 1/2\n    flour_left = 360 / 1000  # converting grams to kilograms\n\n    total_flour = flour_muffins + flour_cookies + flour_left\n\n    return total_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    total_cost_in_pence = 500  # Total cost in pence (￡5)\n    # Price of each item in pence\n    cost_orange = 26\n    cost_lemon = 30\n    \n    # Total items purchased\n    max_oranges = total_cost_in_pence // cost_orange\n    max_lemons = total_cost_in_pence // cost_lemon\n    \n    for oranges in range(max_oranges + 1):\n        for lemons in range(max_lemons + 1):\n            if cost_orange * oranges + cost_lemon * lemons == total_cost_in_pence:\n                return oranges + lemons  # Total number of oranges and lemons bought\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # Number of people\n    n = 4\n\n    # For people sitting around a circular table, the number of distinct arrangements\n    # is given by (n-1)! because we can fix one person and arrange the remaining (n-1) people\n    # around the table in (n-1)! ways.\n    ans = factorial(n - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of eggs as 'x'.\n    x = symbols('x')\n\n    # Creating an equation that describes the problem\n    # After adding 24 eggs, the number of eggs becomes thrice the original number.\n    equation = Eq(x + 24, 3 * x)\n\n    # Solving the equation for x\n    original_number_of_eggs = solve(equation, x)\n\n    # Returning the solution\n    return original_number_of_eggs[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n    \n    result = delta(star(delta(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Leo and Jason's initial amounts\n    leo, jason = symbols('leo jason')\n\n    # Equation 1: initially, Leo had $220 more than Jason\n    equation1 = Eq(leo, jason + 220)\n    \n    # Equation 2: after receiving their salaries, Jason has 2 times as much money as Leo\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    # Jason's amount after receiving the salary\n    jason_final = solutions[jason] + 1100\n\n    return jason_final\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    # Calculate the factorial of the total number of books\n    total_permutations = factorial(total_books) \n\n    # Calculate the factorial of the number of individual types of books\n    biographies_perm = factorial(3)\n    scifi_perm = factorial(4)\n    magazines_perm = factorial(2)\n    schoolbooks_perm = factorial(2)\n\n    # Calculate the number of different ways to arrange the books\n    ans = total_permutations // (biographies_perm * scifi_perm * magazines_perm * schoolbooks_perm)\n    \n    return ans\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let's denote the number of female visitors on the first day as 'f'\n    # According to the problem, on the first day:\n    # number of male visitors = f + 450\n\n    # On the second day:\n    # female visitors increased by 15%: f * 1.15\n    # male visitors decreased by 18%: (f + 450) * (1 - 0.18)\n\n    # The total number of visitors on the second day was 1354:\n    # f * 1.15 + (f + 450) * 0.82 = 1354\n\n    # Now we can set up our equation to find the value of f\n    f = symbols('f')\n    equation = Eq(f * 1.15 + (f + 450) * 0.82, 1354)\n\n    # Solve the equation for f\n    female_visitors = solve(equation, f)[0]\n\n    # We now know the number of female visitors, we can find the total for the first day\n    total_first_day = female_visitors + (female_visitors + 450)\n    return total_first_day\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if (A + B == D) and (A + E == 10) and (C - A == E) and (C * D == E * 10 + B):\n            ans = E * 10000 + F * 1000 + C * 100 + B * 10 + H\n            return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start = 345\n    decrement = 9\n\n    while start > 0:\n        last_positive = start\n        start -= decrement\n\n    return last_positive\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6\n    num_friends = 5\n    cost_per_person = total_cost / num_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencils are identical and the pencil cases are also identical,\n    # we are looking for the number of partitions of 7 into at most 3 parts.\n\n    # This is equivalent to the number of ways to distribute 7 identical items\n    # into 3 identical boxes, which is a problem of combinations with repetition.\n\n    # The formula for combinations with repetition is: (n + r - 1)! / (r! * (n - 1)!)\n    # where n is the number of types of items to choose from (in this case n=3 for the 3 pencil cases)\n    # and r is the number of items to choose (r=7 for the pencils).\n\n    # However, since the pencil cases are identical, we divide the result by the factorial\n    # of the number of pencil cases to correct for overcounting (n!).\n\n    from math import factorial\n\n    n = 3  # number of pencil cases\n    r = 7  # number of pencils\n\n    ways = factorial(n + r - 1) // (factorial(r) * factorial(n - 1) // factorial(n))\n\n    return ways\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_cost = 555\n    cost_with_name = 15\n    cost_without_name = 10\n    total_children = 50\n\n    for children_with_name in range(total_children + 1):\n        children_without_name = total_children - children_with_name\n        total = children_with_name * cost_with_name + children_without_name * cost_without_name\n        if total == total_cost:\n            return children_with_name\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the time spent walking after increasing the speed\n    x = symbols('x')\n\n    # David's initial speed is 150 m/min and he walks for 10 minutes initially\n    initial_speed = 150\n    initial_time = 10\n    distance_initial = initial_speed * initial_time\n\n    # After 10 minutes, David increases his speed by 50 m/min\n    increased_speed = initial_speed + 50\n\n    # Total distance David walks\n    total_distance = 3700\n\n    # Equation for the distance covered after speed increase\n    distance_increased = increased_speed * x\n\n    # Total distance is the sum of distances before and after the speed increase\n    equation = Eq(distance_initial + distance_increased, total_distance)\n\n    # Solving for x\n    time_increased = solve(equation, x)[0]\n\n    # Total time spent walking is the sum of initial time and increased time\n    total_time = initial_time + time_increased\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for female and male visitors\n    female, male = symbols('female male')\n\n    # On the first day, the number of male visitors was 450 more than female\n    equation1 = Eq(male, female + 450)\n\n    # On the second day, female visitors increased by 15%\n    female_second = female * 1.15\n\n    # On the second day, male visitors decreased by 18%\n    male_second = male * 0.82\n\n    # The total number of visitors on the second day was 1354\n    equation2 = Eq(female_second + male_second, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (female, male))\n\n    return solutions[male]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    # Compute permutations with repetition\n    ans = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ans\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # smallest multiple of 5\n    second_digit = 1  # smallest odd number among natural numbers\n    third_digit = 9  # largest single-digit odd number\n    fourth_digit = 0  # smallest even number in nature\n    fifth_digit = 8  # largest single-digit multiple of 2\n    sixth_digit = 3  # smallest odd number greater than 1 in nature\n    seventh_digit = 0  # must be both a multiple of 2 and 5\n\n    # Concatenate all digits to form the phone number\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time when the plane took off\n    singapore_departure = 5\n    \n    # London time when the plane landed\n    london_arrival = 11\n    \n    # Time difference between Singapore and London\n    time_difference = 7\n    \n    # Time taken for flight is the difference between the Singapore departure time and London arrival time,\n    # accounting for the time zone difference and converting to the same 24-hour period if needed.\n    \n    # Convert the London arrival time to Singapore time\n    singapore_arrival = (london_arrival + time_difference) % 24\n\n    # Calculate the duration of the flight\n    # If the Singapore arrival time is less than the departure time, it means the flight went past midnight\n    if singapore_arrival < singapore_departure:\n        flight_duration = (24 - singapore_departure) + singapore_arrival\n    else:\n        flight_duration = singapore_arrival - singapore_departure\n\n    return flight_duration\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    first_day_pages = 20\n    increase_per_day = 5\n    last_day_pages = 80\n    total_pages_read_before_last_day = 0\n    current_day_pages = first_day_pages\n    days_count = 0\n\n    while total_pages_read_before_last_day + current_day_pages < last_day_pages:\n        total_pages_read_before_last_day += current_day_pages\n        days_count += 1\n        current_day_pages += increase_per_day\n    \n    total_pages = total_pages_read_before_last_day + last_day_pages\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds = Fraction(4, 9)\n    cashew_nuts = Fraction(1, 3)\n    ans = almonds - cashew_nuts\n    return ans\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    dividend = 9 * 4 + 2  # Correct way to find the dividend: (quotient * divisor) + remainder\n    correct_dividend = 9 * 4 + 2  # this is the correct calculation based on remainder\n    johnny_dividend = 18 + 4  # Johnny's incorrect calculation of the dividend\n\n    # Determine if Johnny's answer is correct\n    is_johnny_correct = (johnny_dividend == correct_dividend)\n\n    if is_johnny_correct:\n        correct_answer = johnny_dividend\n    else:\n        correct_answer = correct_dividend\n    \n    return correct_answer\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))  # Sum of numbers to be added\n    sum_negative = sum(range(2, 51, 4))  # Sum of numbers to be subtracted\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS and S != 0 and O != 0:\n            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys  # total students = boys + girls\n\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    result = solve(equation, boys)\n\n    return result[0]\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the part cut from both ropes\n    x = symbols('x')\n\n    # After cutting, length of Rope A is 65 - x\n    # After cutting, length of Rope B is 29 - x\n    # Rope A is 3 times the length of Rope B\n\n    equation = Eq(65 - x, 3 * (29 - x))\n\n    # Solve the equation for x\n    length_cut = solve(equation, x)\n\n    return length_cut[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Initialize an empty list to represent the sequence\n    sequence = []\n    # Loop from 1 to 10 (as we want to find the median before the first 11 appears)\n    for n in range(1, 11):\n        # Extend the sequence with n occurrences of the number n\n        sequence.extend([n] * n)\n    # Since the numbers repeat 'n' times, the median would be the middle value when the sequence is sorted\n    # The length of the sequence before the first '11' is even, so we take the average of the middle two values\n    mid_index1 = len(sequence) // 2 - 1     # Index of the first middle value\n    mid_index2 = len(sequence) // 2         # Index of the second middle value\n    # Calculate the median as the average of the two middle values\n    median = (sequence[mid_index1] + sequence[mid_index2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n\n    # Calculate the proportional value for the new denominator using cross multiplication\n    value = (numerator * denominator_new) / denominator_original\n\n    return value\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # Ratio equations based on the given proportions\n    ratio_eq1 = Eq(A/B, 2/3)\n    ratio_eq2 = Eq(B/C, 6/5)\n    \n    # Equation based on the average of A, B, and C\n    avg_eq = Eq((A + B + C)/3, 45)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq1, ratio_eq2, avg_eq), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_dresses = 6\n    cost_per_dress = 7 * x\n    total_skirts = 3\n    cost_per_skirt = 35\n    total_spent = 441\n\n    equation = Eq(total_dresses * cost_per_dress + total_skirts * cost_per_skirt, total_spent)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 possible odd digits: 1, 3, 5, 7, 9\n    possible_digits = 5\n    \n    # For a 3-digit number, all digits are odd and all 3 positions (hundreds, tens, units) can take any of the 5 odd digits\n    # So we use the multiplication principle\n    number_of_ways = possible_digits * possible_digits * possible_digits\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy = symbols('lazy')\n\n    # 1 house painted is considered as 1 work unit\n    # energetic painter's work rate\n    energetic_rate = 1 / 12\n\n    # rate of energetic and lazy combined\n    combined_rate = 1 / 8\n\n    # equation representing lazy's work rate\n    # combined_rate = energetic_rate + lazy_rate  => lazy_rate = combined_rate - energetic_rate\n    lazy_rate = combined_rate - energetic_rate\n\n    # the time it takes for the lazy one is the inverse of his work rate\n    lazy_time = 1 / lazy_rate\n\n    return lazy_time.evalf()\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = sum((i ** 2) % 3 for i in range(1, 1000, 2))\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let the original length and width be l and w respectively\n    # The new rectangle will have the dimensions l + 12 and w\n    # Hence, the new perimeter will be 2 * (l + 12) + 2 * w = 38\n    # The perimeter of the original rectangle will be 2 * l + 2 * w\n\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')\n    new_perimeter = Eq(2 * (l + 12) + 2 * w, 38)\n    solutions = solve(new_perimeter, l)\n    # There can be many values of l that satisfy the equation for different w\n    # We just want the expression for the original perimeter in terms of l\n    original_perimeter_expr = 2 * l + 2 * w\n\n    # We substitute the solution of l back into the original perimeter expression to get the value\n    original_perimeter = original_perimeter_expr.subs(l, solutions[0])\n\n    # Now we solve for w using the new perimeter equation\n    w_solution = solve(new_perimeter.subs(l, solutions[0]), w)\n\n    # The perimeter doesn't change with the particular dimensions,\n    # it's a linear expression, so we can use either solution for w\n    # Substitute the solution for w back into the original perimeter to get a numerical value\n    ans = original_perimeter.subs(w, w_solution[0])\n\n    return ans\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_ratio = nell_ratio + joe_ratio\n    sweets_per_ratio = nell_sweets // nell_ratio\n    \n    total_sweets = sweets_per_ratio * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    # Using the formula for the nth term of an arithmetic sequence\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    ratio_eq = Eq(jamie_anne, 5/3 * natasha)\n    difference_eq = Eq(jamie_anne - natasha, 18)\n\n    solutions = solve((ratio_eq, difference_eq), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because it's a digit in a two-digit number\n        for b in range(0, 10):\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_size = 3/4\n    num_bags = remaining_after_tuesday / bag_size\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    \n    total_flour = flour_per_student * number_of_students\n\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # Convert pounds to pence\n    percentage = (pence / total_pence) * 100  # Calculate percentage\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):  # page numbers go from 1 to 120 inclusive\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # If Uncle Sam passes 11 lamp posts in 50 seconds\n    # the number of seconds it takes to pass one lamp post would be\n    seconds_per_lamp_post = 50 / (11 - 1)  # 11th lamp post - 1st lamp post = total lamp posts - 1\n\n    # The number of lamp posts he will pass after 80 seconds would be\n    lamp_posts_in_80_seconds = 80 / seconds_per_lamp_post + 1  # +1 for the starting lamp post\n\n    return int(lamp_posts_in_80_seconds)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    corner_flowers_counted_twice = corners  \n    total_flowers = (flowers_per_side * corners) - corner_flowers_counted_twice\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_items = symbols('total_items')\n\n    # Equation based on the problem statement\n    # 2/3 of the total items are apples\n    apples = 2 * total_items / 3\n\n    # 1/9 of the total items are bananas\n    bananas = total_items / 9\n\n    # Rest are lemons, so lemons = total_items - (apples + bananas)\n    lemons = total_items - (apples + bananas)\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for total_items\n    solutions = solve(equation, total_items)\n\n    # Calculate the number of lemons\n    num_lemons = lemons.subs(total_items, solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    return 6 - 18\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_paid = 67.50\n    ana_discount = (original_price - ana_paid) / original_price * 100\n    \n    return ana_discount\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the ones place is the sum of all the factors of 4\n    factors_of_4 = [1, 2, 4]\n    sum_factors = sum(factors_of_4)  # This is the digit in the ones place\n    \n    # The digit in the hundreds place has a value of 800, so the digit is 8\n    hundreds_digit = 8\n    # The digit in the thousands place is 1 more than the digit in the hundreds place,\n    # which makes it 9\n    thousands_digit = hundreds_digit + 1\n    # The digit in the tens place is the difference between the digit in the hundreds\n    # place and the digit in the ones place\n    tens_digit = hundreds_digit - sum_factors  # This is the digit in the tens place\n    \n    # The five-digit number we're building should start with '4' to be between 40000 and 50000\n    number = int(f\"4{thousands_digit}8{tens_digit}{sum_factors}\")\n    \n    return number\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    for s in range(1, 1000): # define a reasonable range to search for s\n        r_min = (3/10) * s\n        r_max = (5/16) * s\n        r = int(r_min) + 1\n\n        while r < r_max:\n            if r_min < r/s < r_max:\n                return s\n            r += 1\n    \nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    # Let total_steering_wheels be the total amount of steering wheels made\n    first_two_days = 300 + 250\n    fraction_of_total = 5/6\n\n    # The total of the first two days is 5/6 of the total\n    total_steering_wheels = first_two_days / fraction_of_total\n    \n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    pancakes_in_12_minutes = (12 / time_for_2_pancakes) * 2\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint, prod\n\n    # Factorizes 28 into its prime factors\n    factors = factorint(28)\n\n    # For 28 to become a perfect square, each prime factor must be raised to an even power\n    # To find the smallest number multiply 28 with, go through each prime factor\n    # If the power of the factor is even, ignore it. If it's odd, multiply it once.\n    result_factors = {factor: 1 if power % 2 != 0 else 0 for factor, power in factors.items()}\n\n    # Calculate the smallest number by multiplying the required prime factors\n    smallest_number = prod([factor**power for factor, power in result_factors.items()])\n\n    return smallest_number\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_operation(a, b):\n        return (a + 2) / b\n\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n    \n    # The Pigeonhole Principle states that if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    # In this case, we're looking for the minimum number of students wearing the same size uniform.\n\n    # Calculate the minimum number of students wearing the same size \n    # using the ceiling of the division\n    min_same_size = (total_students + num_sizes - 1) // num_sizes\n\n    return min_same_size\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Max capacity for children\n    max_children = 40\n    # Max capacity for adults\n    max_adults = 24\n\n    # Number of children already on the bus\n    children_on_bus = 15\n\n    # Calculate the remaining capacity for children\n    remaining_capacity_children = max_children - children_on_bus\n\n    # Use equivalent substitution to find out how many adults can fit into the remaining capacity for children\n    # Assuming x is the number of adults\n    # Every adult takes up the space of (40 / 24) children\n    adult_to_child_ratio = max_children / max_adults\n    adults_on_bus = remaining_capacity_children / adult_to_child_ratio\n\n    # Since we cannot have a fraction of an adult, we take the floor value\n    adults_on_bus = int(adults_on_bus)\n\n    return adults_on_bus\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for n in range(1, 40):\n        if (19 - 6) % n == n / 2:\n            return n\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "网络故障，请重试"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    dvd_player = 740\n    remaining_after_dvd = salary - dvd_player\n    tv_set = 3/4 * remaining_after_dvd\n    remaining_after_tv = salary - dvd_player - tv_set\n    final_remaining = 1/5 * salary\n\n    equation = Eq(remaining_after_tv, final_remaining)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = A * 1001 + B * 100 + C * 10\n                bud_number = A + B * 10 + C * 1000 + A * 100\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # Cutting a rod into 5 pieces requires 4 cuts.\n    # Each cut takes 2 minutes.\n    time_per_cut = 2\n    total_cuts_needed = 5 - 1\n    \n    total_time = time_per_cut * total_cuts_needed\n    \n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    spelling_books_per_shelf = 9\n    total_spelling_books = 72\n    total_shelves = 15\n\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    math_books_per_shelf = 4\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n    \n    chocolate_needed = (chocolate_original * biscuits_available) / biscuits_original\n    \n    return chocolate_needed\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # There are 3 intervals from first to fourth floor\n    first_to_fourth_interval = 3\n    \n    # There are 9 intervals from first to tenth floor\n    first_to_tenth_interval = 9\n    \n    # Time taken for one interval (from first to fourth floor)\n    time_per_interval = 6 / first_to_fourth_interval\n    \n    # Time needed to walk up the stairs from the first floor to the tenth floor\n    time_first_to_tenth = time_per_interval * first_to_tenth_interval\n    \n    return time_first_to_tenth\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the initial numbers of students in 6A and 6B\n    a, b = symbols('a b')\n    \n    # Since initially, students in class 6A were 4/9 of class 6B\n    initial_condition = Eq(a, (4/9) * b)\n    \n    # After the reshuffling, students in both classes are equal, taking into account the transfers\n    final_condition = Eq(a - 3 + 18, b + 3 - 18)\n    \n    # Solve the system of equations for a and b\n    solutions = solve((initial_condition, final_condition), (a, b))\n    \n    # We want the initial number of students in Class 6A\n    return solutions[a]\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    diff = 3\n    harry_flowers = luna_flowers - diff\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_options = 2\n    sauce_options = 3\n    topping_options = 2\n\n    combinations = pasta_options * sauce_options * topping_options\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n    return solutions[0]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Since the 8th student is directly opposite the 16th, there are 16 - 8 = 8 students between them\n    # and the circle has 16 + 8 = 24 students in total initially.\n    initial_students = 16 + 8\n\n    # After new students join, the 8th student is opposite the 22nd,\n    # so there are now 22 - 8 = 14 students between them.\n    # Hence, the new total number of students is 22 + 14 = 36.\n    new_total_students = 22 + 14\n\n    # The number of new students is the difference between the new total and the initial total.\n    new_students = new_total_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Define the distances\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)  # remaining distance to complete 800 meters\n\n    # Define the speeds\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Calculate the time for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Sum of yellow, red, and green cards\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    # Calculate the number of unique permutations of all cards considering duplicates\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    \n    return ways\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of marbles each person has\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Define equations based on problem statement\n    # Total number of marbles before any transfer\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)\n    # After Charlene gives 15 marbles to Betsy\n    betsy_after_charlene_eq = Eq(betsy + 15, charlene - 15)\n    # After Betsy gives 8 marbles to Anna\n    anna_after_betsy_eq = Eq(anna + 8, betsy - 8)\n    # Final ratio equation\n    final_ratio_eq = Eq(2/5, anna/betsy)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, betsy_after_charlene_eq, anna_after_betsy_eq, final_ratio_eq),\n                      (anna, betsy, charlene))\n\n    # Betsy's marbles before any transfer\n    original_betsy = solutions[betsy] + 15 - 8\n    return original_betsy\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Initial ratio equation\n    eq1 = Eq(lollipops/gum_drops, 5/7)\n\n    # Ratio after adding candy\n    eq2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # Solve the system of equations\n    candy_counts = solve((eq1, eq2), (lollipops, gum_drops))\n    \n    # Calculate the total pieces of candy now\n    total_candy = candy_counts[lollipops] + candy_counts[gum_drops] + 120 + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    pages = 268\n    digits_used = 0\n\n    # Count digits for page numbers 1-9 (1 digit each)\n    if pages >= 9: \n        digits_used += 9\n\n    # Count digits for page numbers 10-99 (2 digits each)\n    if pages >= 99:\n        digits_used += (99 - 10 + 1) * 2\n    else:\n        digits_used += (pages - 9) * 2\n        return digits_used\n\n    # Count digits for page numbers 100-268 (3 digits each)\n    digits_used += (pages - 99) * 3\n\n    return digits_used\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "from math import gcd\n\ndef solution():\n    length = 136  # Convert meters to centimeters to use integer for gcd\n    width = 80    # Convert meters to centimeters\n    square_side = gcd(length, width)\n    num_squares = (length // square_side) * (width // square_side)\n    return num_squares\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (200 // 5)\n    count_by_7 = (200 // 7)\n    count_by_35 = (200 // 35) # 5 * 7\n\n    # Inclusion-Exclusion Principle\n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    \n    # Count the number of odd numbers generated\n    count = 0\n    for hundreds in digits:\n        for tens in digits:\n            for ones in digits:\n                if ones % 2 != 0:  # Check if the last digit is odd\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one durian, one pineapple, and one watermelon\n    d, p, w = symbols('d p w')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(1*d + 2*p + 3*w, 440) # Chris's purchase\n    equation2 = Eq(4*d + 6*p + 9*w, 1625) # Dylan's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, p, w))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Let the original number be n, and the number without the ones digit zero be m.\n    # According to the question, n = m + 135.\n    # Also, since the one's digit of n is 0, we cal also represent n as 10k, where k is an integer.\n\n    # We are looking for the smallest value k such that 10k = m + 135.\n    for k in range(1, 1000):  # We establish an arbitrary upper limit for k.\n        n = 10 * k\n        m = n - 135\n        if str(m)[-1] == '0':  # Check if the truncated number ends in '0'\n            return n  # Return the original number\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let n be the number of teams in the league\n    n = symbols('n')\n    \n    # Each team plays each other team twice, which makes n(n-1) matches in total\n    # n(n-1) / 2 is for pairing each of the two teams only once\n    # The number of matches when every pair of teams play against each other once is n(n-1)/2\n    # But since each pair of teams plays twice, we need to multiply by 2, hence n(n-1) matches\n    equation = Eq(n * (n - 1), 30 * 2)  # Because there are 30 matches, we multiply by 2\n    \n    # Solve the quadratic equation\n    solutions = solve(equation, n)\n    \n    # Filter out the positive answer as number of teams cannot be negative\n    num_teams = [sol for sol in solutions if sol.is_real and sol > 0]\n    \n    # Assuming we have a unique solution, return it\n    if num_teams:\n        return num_teams[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Percentages of students choosing each or neither subject\n    percent_A = 80\n    percent_B = 35\n    percent_neither = 10\n    percent_both = percent_A + percent_B - (100 - percent_neither)  # Inclusion-exclusion principle\n\n    # Percentage of students who chose both subjects\n    actual_both = 75\n    \n    # Total number of students, base on the percentage and actual number of students who chose both\n    total_students = (actual_both * 100) / percent_both\n\n    return int(total_students)\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n\n    # One trip can carry 'boat_capacity' students and return trip comes back empty,\n    # so every two trips can effectively carry 'boat_capacity' - 1 students.\n    # The last trip doesn't need a return trip.\n\n    total_trips = 0\n    while students > 0:\n        students -= boat_capacity\n        total_trips += 2  # Going and coming back\n\n        # After the boat has dropped off the last batch of students,\n        # no need to count the return trip as no more students need to cross.\n        if students < boat_capacity:\n            total_trips -= 1  # No need to return\n\n    ans = total_trips\n    return ans\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    return 100 / (1 + 1/99)\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '4', '6', '9']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    all_numbers_int = [int(number) for number in all_numbers]\n    average = sum(all_numbers_int) / len(all_numbers_int)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(boys, girls)  # initial condition, equal number of boys and girls\n    equation2 = Eq(girls - 12, 2 * (boys - 60))  # after some left, twice as many girls as boys\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for hundreds in range(9, 10):  # The greatest 1-digit number\n        for tens in range(1, 10):\n            for ones in range(1, 10):\n                if tens != ones and hundreds != tens and hundreds != ones:  # All digits are different\n                    if (tens + ones) == 15 and (hundreds * 100 + tens * 10 + ones) % 2 == 0:  # Sum is 15 and the number is even\n                        return hundreds * 100 + tens * 10 + ones  # Construct the number\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from sympy import divisors\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    unique_factors = {i: len(divisors(i)) for i in all_numbers}  # Number of factors for each number\n    counts = {count: 0 for count in set(unique_factors.values())}\n\n    for factors in unique_factors.values():\n        counts[factors] += 1\n\n    # Numbers that have a unique count of factors\n    unique_numbers = {number for number, factors in unique_factors.items() if counts[factors] == 1}\n\n    # The two students know their numbers, so their numbers must have a unique number of factors\n    known_numbers_by_students = set(number for number in all_numbers if unique_factors[number] in counts and counts[unique_factors[number]] == 1)\n    \n    # Alice knows her number is odd\n    possible_alice_numbers = {number for number in known_numbers_by_students if number % 2 == 1}\n\n    # May's number is smaller than Alice's by 2 and bigger than Mark's by 1\n    # This means May's number + 2 is an odd number and in possible_alice_numbers\n    # May's number + 1 could be a number that May can see, so it can't be in possible_alice_numbers\n    possible_may_numbers = {number for number in known_numbers_by_students if number + 2 in possible_alice_numbers and not number + 1 in possible_alice_numbers}\n\n    # To ensure May's number is valid, check that her number - 1 is not visible to her (hence, not in possible_alice_numbers or possible_may_numbers)\n    valid_may_numbers = set()\n    for may_number in possible_may_numbers:\n        if not may_number - 1 in possible_alice_numbers and not may_number - 1 in possible_may_numbers:\n            valid_may_numbers.add(may_number)\n\n    # One valid set is when May's number is the smallest in valid_may_numbers\n    may_number = min(valid_may_numbers)\n    alice_number = may_number + 2\n\n    # Remove known numbers from all_numbers\n    all_numbers -= known_numbers_by_students\n    all_numbers.remove(may_number)\n    all_numbers.remove(alice_number)\n\n    # Calculate product of numbers not picked\n    ans = 1\n    for number in all_numbers:\n        ans *= number\n\n    return ans\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km per hour\n    car_speed = 120  # km per hour\n    lead_time = 3  # hours\n    lead_distance = van_speed * lead_time\n\n    relative_speed = car_speed - van_speed\n    catch_up_time = lead_distance / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n    total_pages_per_minute = pages_per_minute_A + pages_per_minute_B\n\n    half_hour_minutes = 0.5 * 60\n\n    total_pages_half_hour = total_pages_per_minute * half_hour_minutes\n\n    return int(total_pages_half_hour)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    # Hats are optional, so Wendy can choose to wear 0, 1, 2, 3 or 4 hats:\n    # Use the formula for combinations: C(n,k) = n! / (k! * (n-k)!)\n    # We add the combinations for each possible number of hats\n    hats = sum(len(list(combinations(range(4), i))) for i in range(5))\n\n    # Wendy has to choose 1 out of 3 shirts, 1 out of 2 pairs of pants, and 1 skirt\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    # Multiply the number of choices together according to the Law of Multiplication\n    combinations_of_clothing = hats * shirts * pants * skirt\n\n    return combinations_of_clothing\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    # Calculate the fraction of the items that were lemons\n    lemons_fraction = 1 - (2/3 + 1/9)\n    \n    # Set up the equation based on the given information\n    equation = Eq((2/3 - lemons_fraction) * total_items, 12)\n    \n    # Solve for the total number of items\n    total_items_solution = solve(equation, total_items)\n    \n    # Calculate the number of lemons\n    lemons = lemons_fraction * total_items_solution[0]\n    \n    return int(lemons)\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count_3 = 0\n    for month in range(1, 13):  # Loop through all months (1 to 12)\n        for day in range(1, 32):  # Loop through all possible days (1 to 31)\n            # Check for valid day-month combinations\n            if (month in [1, 3, 5, 7, 8, 10, 12] and day <= 31) or \\\n               (month in [4, 6, 9, 11] and day <= 30) or \\\n               (month == 2 and day <= 28):\n                # Format the date as ddmmyyyy and count the number '3'\n                date = f'{day:02d}{month:02d}2019'\n                count_3 += date.count('3')\n    \n    return count_3\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x = 0.010101...\n    # Then 100x = 1.010101... and 100x - x = 99x = 1, which gives x = 1/99\n    x = 1/99\n    \n    # The product we're looking for is then (1/99)^2\n    product = (x * x)\n\n    # To find the length of the repetend, we find the least common multiple (LCM)\n    # of the denominators when the fraction is in simplest form.\n    # The LCM of 99^2 is essentially the number of unique prime factors of 99,\n    # multiplied by each other's largest exponent found in the prime factorization of 99 squared.\n    \n    # Prime factorization of 99 is 3^2 * 11, so 99^2 is 3^4 * 11^2\n    # Thus, the LCM is 3^4 * 11^2, and we take the largest exponent for 3 and 11.\n    repetend_length = 3**4 * 11**2\n    \n    # Since repetend of (0.01)^2 is the length of the repetend of 1/(99^2),\n    # and length of the repetend of 1/99 is 2, the number of digits in the repetend\n    # is actually determined by the totient of 99^2. Phi(99^2) = 99^2 * (1 - 1/3) * (1 - 1/11)\n    \n    # Calculate the totient\n    totient = 99**2 * (1 - 1/3) * (1 - 1/11)\n\n    # The number of digits in one repetend of the product is the totient value\n    return int(totient)\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is painted on the outside and then cut into smaller cubes,\n    # the only cubes that will have exactly three faces painted are the corners.\n    # There are 8 corners in a cuboid.\n    # That means there are 8 smaller cubes with exactly three faces painted.\n\n    # The number of cubes with three painted faces does not depend on size as long\n    # as we're cutting from a larger cube that's been painted on the outside.\n    # So this will always be 8 for any cuboid cut into cubes where the exterior is painted.\n    \n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original = tens * 10 + ones\n            swapped = ones * 10 + tens\n            if swapped == original / 3 + 3:\n                return original\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of puffs sold\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n    \n    # Create equations based on the given problem\n    ratio_eq = Eq(durian / chocolate, 3 / 4) & Eq(chocolate / strawberry, 4 / 2)\n    total_sales_eq = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_sales_eq), (durian, chocolate, strawberry))\n    \n    # Calculate the money collected from the sale of durian puffs\n    durian_sales = 5 * solutions[durian]\n    \n    return durian_sales\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.191  # 6% compounded yearly for 3 years\n    interest_last_two_years = 1.166     # 8% compounded yearly for 2 years\n\n    # Calculate investment after first three years\n    investment_after_three_years = initial_investment * interest_first_three_years\n\n    # Calculate total investment after last two years\n    final_investment = investment_after_three_years * interest_last_two_years\n\n    # Round the result to the nearest hundredth\n    ans = round(final_investment, 2)\n\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the levels of A, B, C, D, Zachary, Yvonne, Xavier, Waylon\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W', integer=True)\n\n    # Given conditions converted into equations\n    # (1) A > C and A < D\n    conditions = [\n        A > C, A < D,\n        # (2) B < X\n        B < X,\n        # (3) D = 5Y\n        Eq(D, 5 * Y),\n        # (4) Z + 2 - X = Z - W\n        Eq(Z + 2 - X, Z - W),\n        # (5) Z = Y + X\n        Eq(Z, Y + X),\n        # All levels are between 1 and 18\n        A >= 1, A <= 18,\n        B >= 1, B <= 18,\n        C >= 1, C <= 18,\n        D >= 1, D <= 18,\n        Z >= 1, Z <= 18,\n        Y >= 1, Y <= 18,\n        X >= 1, X <= 18,\n        W >= 1, W <= 18,\n    ]\n\n    # Find the solution satisfying all conditions\n    solutions = solve(conditions)\n\n    # Filter solutions for valid levels\n    valid_solutions = [s for s in solutions if all(1 <= s[i].evalf() <= 18 for i in [A, B, C, D, Z, Y, X, W])]\n\n    # Assuming we have a unique solution\n    if len(valid_solutions) == 1:\n        return valid_solutions[0][A]\n    else:\n        return None  # In case there are multiple solutions, code should be reviewed\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let's denote the first term of the sequence as a and the common difference as d.\n\n    # The sum of the first n terms of an arithmetic sequence is given by: \n    # S_n = n/2 * (2a + (n - 1)d)\n\n    # We are given S_9 = 99 and S_27 = 540, so we have:\n    # S_9 = 9/2 * (2a + (9 - 1)d) = 99\n    # S_27 = 27/2 * (2a + (27 - 1)d) = 540\n\n    # We can set up two equations as follows:\n    # Equation 1: 9a + 36d = 99 * 2\n    # Equation 2: 27a + 702d = 540 * 2\n\n    # Let's solve the above system of equations for 'a' and 'd'.\n\n    # Multiply Equation 1 by 3 to subtract from Equation 2 to eliminate 'a'.\n    # 27a + 108d = 99 * 6\n    # Subtract Equation 1 from Equation 2:\n    # 27a + 702d - (27a + 108d) = 540 * 2 - 99 * 6\n    # This simplifies to:\n    # 594d = 1080 - 594\n    # Hence, d = (1080 - 594) / 594\n\n    d = (1080 - 594) / 594\n\n    # Now we'll find the first term 'a' using Equation 1:\n    # 9a + 36d = 99 * 2\n    # 9a = 99 * 2 - 36d\n    # a = (99 * 2 - 36d) / 9\n\n    a = (99 * 2 - 36 * d) / 9\n\n    # Now that we have 'a' and 'd', we can find the sum of the first 16 terms:\n    # S_16 = 16/2 * (2a + (16 - 1)d)\n\n    S_16 = 16 / 2 * (2 * a + (16 - 1) * d)\n\n    return S_16\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be 1-9\n        for tens in range(1, 10):  # tens digit must be 1-9\n            for units in range(1, 10):  # units digit must also be 1-9\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from each school\n    school1 = 24\n    school2 = 36\n    school3 = 42\n\n    # Finding the greatest common divisor (GCD) of the three numbers\n    gcd_12 = gcd(school1, school2)\n    gcd_123 = gcd(gcd_12, school3)\n\n    return gcd_123\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    perm = list(permutations(digits))\n    return len(perm)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Each number n appears n times\n    half_sequence = total_numbers // 2\n\n    # Find the number that will be the median\n    num = 1\n    cumulative_count = 0\n    while cumulative_count < half_sequence:\n        cumulative_count += num\n        num += 1\n\n    # Correct the value of num since it will have increased one past the median\n    num -= 1\n\n    return num\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    \n    children = total_people - teachers\n    \n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for num in range(7, 41):\n        count += len(str(num))\n    return count\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Equation: 3 * x + 1 = 22\n    # Solving for x\n    x = (22 - 1) / 3\n    return int(x)\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n    minutes_in_hour = 60\n\n    # Least Common Multiple (LCM) will give us how often they flash together in a minute\n    lcm_flashes = lcm(red_flash_rate, green_flash_rate)\n\n    # Number of times they flash together in an hour\n    times_flash_together_in_hour = (minutes_in_hour // (60 // lcm_flashes)) + 1\n\n    return times_flash_together_in_hour\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(total_paintings * 0.40)\n    still_lifes = total_paintings - landscapes\n    french_artists_landscapes = 25\n    total_french_artists = 40\n    french_artists_still_lifes = total_french_artists - french_artists_landscapes\n    not_french_still_lifes = still_lifes - french_artists_still_lifes\n\n    return not_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose syrup + water\n    max_volume_per_glass = total_volume // 9  # Greatest volume that can be evenly poured into glasses\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    # Amount of rice in the first mixture\n    rice_in_first_mixture = 100 * 0.50\n    \n    # Amount of rice in the second mixture\n    rice_in_second_mixture = 400 * 0.80\n    \n    # Total amount of rice in both mixtures\n    total_rice = rice_in_first_mixture + rice_in_second_mixture\n    \n    # Total weight of the new mixture\n    total_weight = 100 + 400\n    \n    # Concentration of rice in the new mixture\n    rice_concentration = total_rice / total_weight\n    \n    return rice_concentration\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Number of teams\n    n_teams = 32\n    # Number of groups\n    n_groups = 8\n    \n    # Each group plays a round-robin tournament, where each team plays all others in its group once.\n    # In one group of 4 teams, each team plays 3 games, but this counts each game twice (once for each team)\n    # So the actual number of unique games per group is 3 games per team / 2, times the number of teams in the group\n    group_games = (3/2) * (n_teams/n_groups)\n    \n    # There are 8 such groups\n    total_group_games = group_games * n_groups\n    \n    # In the knockout stage, for each round half of the teams are eliminated\n    knockout_games = n_teams/2 - 1  # Round of 16\n    knockout_games += n_teams/4 - 1 # Quarter-finals\n    knockout_games += n_teams/8 - 1 # Semi-finals\n    knockout_games += 1  # Final\n    knockout_games += 1  # Third place match\n    \n    # Total number of games is sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n    \n    return int(total_games)\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_original = 12\n    days_original = 15\n    horses_new = 20\n\n    # Calculate the total amount of hay needed for one horse for one day (unitary method)\n    hay_per_horse_per_day = days_original / horses_original\n\n    # Now calculate the number of days the same pile of hay can feed the new number of horses\n    days_new = hay_per_horse_per_day * horses_original / horses_new\n\n    return days_new\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Iterate over possible 4-digit numbers\n    for i in range(1000, 10000):\n        # Convert the number to a string for manipulation\n        num_str = str(i)\n        # Create the new number by moving the first digit to the end\n        new_num_str = num_str[1:] + num_str[0]\n        # Convert the new number back into an integer\n        new_num = int(new_num_str)\n        # Check if the new number is larger than the original by 4707\n        if new_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    years_later = (target_sum_age - (oliver_current_age + lin_current_age)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    age_difference_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # Since we are looking for the last 5 digits, we only consider the last 5 digits of each number in the sequence.\n    # As we keep adding the number '222....2', the last 5 digits will eventually become constant at some point\n    # because we are effectively adding 22222 repeatedly, which is adding the same last 5 digits.\n    \n    # The last 5 digits of first few numbers in the sequence:\n    # 2\n    # 22\n    # 222\n    # 2222\n    # 22222\n    # 22222 ... (From now on, last 5 digits will always be 22222 when adding next number in the sequence)\n\n    # Starting from the 5th term, the last 5 digits will be 22222\n    last_five_digits = 22222\n\n    # Since the first 4 terms contribute to the last digits differently, we calculate them separately\n    # and only once because the pattern repeats every 5 digits after the 5th term.\n    first_four_terms_last_five_digits = (2 + 22 + 222 + 2222) % 100000\n\n    # After the first four terms, we have a total of 2017 terms, with 2013 terms' last 5 digits being 22222.\n    # The sum of these last five digits will be a multiple of 22222.\n    # To find out the sum of last 5 digits of these 2013 terms, we just need to multiply 22222 by 2013 and\n    # take the modulus with 100000 (to get the last 5 digits).\n\n    # Calculation for the remaining terms\n    remaining_terms_last_five_digits = (last_five_digits * (2017 - 4)) % 100000\n\n    # Sum the last five digits of first four and remaining terms to get the final last five digits of S\n    last_five_digits_of_S = (first_four_terms_last_five_digits + remaining_terms_last_five_digits) % 100000\n\n    return last_five_digits_of_S\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 10000):  # Set a reasonable upper limit for search\n        num = 35 * i\n        if str(num).endswith('35') and sum(int(digit) for digit in str(num)) == 35:\n            return num\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = (99 // 4) + 1  # Add 1 since 1904 is counted\n    normal_years = 99 - leap_years\n\n    days_in_leap_years = leap_years * 366\n    days_in_normal_years = normal_years * 365\n    total_days = days_in_leap_years + days_in_normal_years\n\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    total_deposits = (days // 2) * 10 + (10 if days % 2 != 0 else 0)\n    total_spends = (days // 2) * 8\n\n    ans = initial_amount + total_deposits - total_spends\n\n    return ans\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    y = symbols('y')\n\n    # Total money initially\n    total_money = 8 * y\n\n    # Money spent on watch\n    watch_cost = 4 * y\n\n    # Money spent on handbag\n    handbag_cost = 20\n\n    # Money given to each child\n    child_received = y - 5\n\n    # Total money given to children\n    total_given_to_children = 2 * child_received\n\n    # Equation representing the total expenses\n    equation = Eq(watch_cost + handbag_cost + total_given_to_children, total_money)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 3 != 0 and i % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # This is an arithmetic sequence where the first term is 1 and the last is 12.\n    first_term = 1\n    last_term = 12\n    num_terms = 12  # Since we are considering 12 hours, there will be 12 terms.\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_strikes = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    coin_weight = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    value_per_coin = 10  # value of one ten-pence coin in pence\n\n    num_coins = total_value / value_per_coin\n    total_weight = num_coins * coin_weight\n\n    return total_weight\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the cost of a mango, a pear, and an apple\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # The given equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.4)\n    equation2 = Eq(mango + apple, 3.8)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.2)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    # Returning the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    correct_marks = 5\n    wrong_deduction = 2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_marks - wrong_answers * wrong_deduction\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1/4\n\n    # Let the number of adults be x.\n    # Then the number of children is 4*x because of the ratio 1:4.\n    # Therefore, x + 4*x = total_people.\n\n    x = total_people / (1 + 4)  # total_people is divided by the sum of the ratio numbers.\n\n    return x\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let's denote n as the number of buttons Nina originally has\n    # and j as the number of buttons James originally has.\n    \n    # We know the following two conditions:\n    # n + j = 22 (1)\n    # n - 4 = j + 4 (2)\n    \n    # From equation (2), we can express j in terms of n:\n    # j = n - 8\n    \n    # Plug the expression for j into equation (1)\n    # n + (n - 8) = 22\n    # 2n - 8 = 22\n    # 2n = 30\n    # n = 15\n    \n    # Therefore, Nina originally has 15 buttons\n    return 15\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_child = 3\n    last_child = (start_child + total_candies - 1) % total_children\n    last_child = last_child if last_child != 0 else total_children\n    return last_child\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    \n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n    \n    solutions = solve((equation1, equation2), (racket, ball))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # m/s\n    angle_degrees = 37\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    # Convert angle to radians\n    angle_radians = math.radians(angle_degrees)\n\n    # Calculate the height using the formula: height = (v^2 * sin^2(theta)) / (2 * g),\n    # where v is the initial velocity, theta is the incline angle, and g is the acceleration due to gravity\n    height = (initial_speed**2 * math.sin(angle_radians)**2) / (2 * g)\n\n    # Calculate the distance along the ramp using the formula: distance = height / sin(theta)\n    # Because the box goes up and then down the same path, we only consider the ascending path\n    distance = height / math.sin(angle_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    matches_required = 0\n\n    while players > 1:\n        matches = players // players_per_match\n        players = matches  # Update the number of players to the number of winners\n        matches_required += matches\n\n    return matches_required\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # In the worst-case scenario, Sheila needs to pick the highest number of balls possible without having two groups of 4 same-colored balls.\n    # If she picks all 5 blue balls, she still doesn't have a group of 4 of the same color other than blue.\n    # To avoid getting 4 orange balls, she can pick at most 3 orange balls.\n    # Furthermore, she can pick both of the yellow balls.\n    # Up to this point, Sheila has picked 5 blue + 3 orange + 2 yellow = 10 balls.\n    # The next ball she picks, regardless of its color, will either give her a group of 4 orange balls or add to the already existing blue group,\n    # making it two groups of 4 blue balls, which satisfies the condition.\n    # Therefore, she must pick 1 more ball.\n    balls_needed = 5 + 3 + 2 + 1\n    return balls_needed\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    nums = [1, 3, 5, 95, 97, 99]\n    return sum(nums)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit = i // 1000\n        remaining_number = i % 1000\n        new_number = (remaining_number * 10) + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Given that a CD in England costs £14, we need to determine how much that is\n    # in the currency of St. Petersburg, which uses Russian Rubles.\n\n    # As of the knowledge cutoff in early 2023, the average exchange rate was around £1 = 90 rubles\n    # However, since I cannot use external data to find the current exchange rate,\n    # and since you have not provided an exchange rate,\n    # I'm going to use a hypothetical exchange rate of 1:90 for this example.\n\n    exchange_rate = 90  # 1 pound = 90 rubles\n    \n    # The amount of money Richard has in pounds\n    pounds = 14\n    \n    # Convert the amount to rubles\n    rubles = pounds * exchange_rate\n    \n    # Assuming the price of a CD in St. Petersburg is in rubles and is also 14 (as in the price tag in England but in rubles),\n    # then the number of CDs that Richard could buy would simply be the total amount he has in rubles divided by the price of a CD there.\n    # Again, without actual data for CD prices in St. Petersburg, we will use the same price.\n    \n    st_petersburg_cd_price = 14  # The assumed price of a CD in St. Petersburg in rubles\n    \n    # Calculate the number of CDs\n    num_cds = rubles // st_petersburg_cd_price\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Let the first term be a, and the common difference be d.\n    # The sum of an arithmetic sequence can be calculated by the formula:\n    # Sum = n/2 * (2a + (n-1)d)\n    # Therefore, we have two equations based on the given sums:\n    # 72 = 9/2 * (2a + 8d)\n    # 736 = 23/2 * (2a + 22d)\n    \n    # We can solve for a and d using these two equations.\n    # From the first equation: 72 = 9/2 * (2a + 8d) -> 16a + 72d = 144\n    # From the second equation: 736 = 23/2 * (2a + 22d) -> 46a + 506d = 1472\n    \n    # Solve the system of equations for a and d:\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n\n    equation1 = Eq(9/2 * (2*a + 8*d), 72)\n    equation2 = Eq(23/2 * (2*a + 22*d), 736)\n\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Once we have a and d, we can find the sum of the first 16 terms:\n    # Sum = 16/2 * (2a + (16-1)d)\n    a_value = solutions[a]\n    d_value = solutions[d]\n    \n    sum_16_terms = 16/2 * (2*a_value + (16-1)*d_value)\n    \n    return sum_16_terms\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "from sympy import isprime, symbols, Eq, solve\n\ndef solution():\n    age = symbols('age')\n    solutions = []\n\n    # Loop through all possible current ages to check the conditions\n    for current_age in range(1, 100):  # set the range realistically assuming human age\n        age_3_years_ago = current_age - 3\n        age_next_year = current_age + 1\n        age_in_12_years = current_age + 12\n\n        # Check if the age 3 years ago was a perfect square\n        if (age_3_years_ago**0.5).is_integer():\n            # Check if the age next year is a prime number\n            if isprime(age_next_year):\n                # Check if the age in 12 years is a perfect cube\n                if round(age_in_12_years**(1/3))**3 == age_in_12_years:\n                    solutions.append(current_age)\n\n    # Return the valid solution only if it matches one of the provided options\n    valid_solutions = [28, 39, 52, 84]\n    for sol in solutions:\n        if sol in valid_solutions:\n            return sol\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Taking the worst-case scenario approach:\n    # Bart can take all M&Ms of one color without getting 2 of different colors.\n    # Therefore, he must take one more than the total of the most plentiful color.\n    \n    # Number of M&Ms of each color\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # The smallest number he needs to take\n    ans = max(red, yellow, brown) + 1\n\n    return ans\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    x = symbols('x')\n    equation = Eq(new_operation(2, new_operation(x, 4)), 59)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0] if solution_x else None\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    num_length = 43\n    sum_digits = 0\n    \n    for i in range(num_length):\n        sum_digits += int(pattern[i % len(pattern)])\n    \n    return sum_digits\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000\n    return km_to_cm\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Define the ratios of the speeds of Andrew, Bernice, and Cassandra\n    # When Andrew is at level 5, Bernice is at level 3, which means \n    # Andrew's speed is to Bernice's speed as 5 is to 3\n    ratio_andrew_bernice = 5 / 3\n\n    # When Bernice is at level 6, Cassandra is at level 10, which means\n    # Bernice's speed is to Cassandra's speed as 6 is to 10\n    ratio_bernice_cassandra = 6 / 10\n\n    # Find the ratio of Andrew's speed to Cassandra's speed\n    ratio_andrew_cassandra = ratio_andrew_bernice * ratio_bernice_cassandra\n\n    # When Cassandra is at level 19, find Andrew's level by multiplying\n    # Cassandra's level by the ratio of their speeds\n    andrew_level = 19 * ratio_andrew_cassandra\n\n    return int(andrew_level)\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    # Given data\n    time_per_quiz_minutes = 30  # Time to finish one quiz in minutes\n    number_of_quizzes = 4  # Total number of quizzes to finish\n\n    # Total time for all quizzes in minutes\n    total_time_minutes = time_per_quiz_minutes * number_of_quizzes\n\n    # Convert total time from minutes to hours\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandson_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n    \n    return years\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let us assume the cost of each chair is 'x'\n    # Hence, the cost of each table will be '3x'\n    # According to the problem, 4 tables and 9 chairs were bought for $504\n    # So, 4 * (cost of one table) + 9 * (cost of one chair) = 504\n    # That is, 4 * 3x + 9x = 504\n    # Which simplifies to 21x = 504\n    # Now, we can find the value of 'x' i.e., the cost of one chair\n\n    x = symbols('x')\n    equation = Eq(4 * 3 * x + 9 * x, 504)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits = [int(d) for d in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Negative because the sequence is decreasing\n\n    # Finding the first negative term by setting up the term formula and inequality:\n    # first_term + (n-1) * difference < 0\n    # n is the term number where the sequence goes negative\n    n = 1\n    term = first_term\n    while term >= 0:\n        term += difference\n        n += 1\n\n    return n - 1  # Subtract 1 because we want the term before it goes negative\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    vases_needed = (flowers + vase_capacity - 1) // vase_capacity\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time = 40 / 60\n\n    # Calculate the distance Samuel and Shafur covered in the first 40 minutes\n    distance_shafur_initial = 54 * time\n    distance_samuel_initial = 66 * time\n\n    # Samuel drives back to Town X, covering the distance twice, then continues to Town Y\n    # Hence, Shafur covers the rest of the distance to Town Y at the time Samuel covers:\n    # rest of the distance to Town Y + initial distance + back to initial distance\n    distance_remaining = distance_samuel_initial * 2 + distance_shafur_initial\n\n    # Both Shafur and Samuel reach Town Y at the same time, meaning the time taken\n    # by both of them from the initial point to Town Y must be equal\n    # Let's the total time taken by Shafur to reach Town Y is 't' hours.\n    # So, total distance covered by Shafur = 54 * t\n    # Total distance covered by Samuel = 66 * (t - 2/3) + distance_shafur_initial\n    \n    # Since they reach at the same time, we can equate the distances covered by both.\n    # distance_shafur = distance_samuel\n    # 54 * t = 66 * (t - 2/3) + distance_shafur_initial\n    \n    # Now we solve the equation for t to find the total time taken by Shafur\n    t = (66 * (2/3) + distance_shafur_initial) / (66 - 54)\n    \n    # With t known, we can calculate the total distance covered by Shafur, which is the same distance between Town X and Town Y.\n    total_distance = 54 * t\n    \n    return total_distance\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3) * 3  # Round up to the nearest multiple of 3\n    last_multiple = 81 // 3 * 3  # Round down to the nearest multiple of 3\n\n    count = (last_multiple - first_multiple) // 3 + 1\n\n    return count\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Add all numbers in the sequence 3 to 10\n    sum_to_10 = sum(range(3, 11))\n    # The sequence then decreases and has the same numbers as 3 to 9 (10 is not included in the second part)\n    sum_to_9 = sum(range(3, 10))\n    # The sum of the sequence is the sum of both parts\n    total_sum = sum_to_10 + sum_to_9\n\n    return total_sum\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First expression: 7 divided by -3.33... (which is -3 1/3 or -10/3)\n    first_numerator = 7 / (-10/3)\n    # The cube root of -0.027 (-1/1000) which is -1/10 or -0.1\n    first_denominator = (-1/1000) ** (1/3)\n    first_expression = first_numerator / first_denominator\n\n    # Second expression: 2^3 divided by 4^2\n    second_numerator = 2**3 / 4**2\n    # 0.125 times [1.8 - (0.2 times 7)] which is 0.125 * [1.8 - 1.4] or 0.125 * 0.4\n    second_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_expression = second_numerator / second_denominator\n\n    # Third expression: 0.1 divided by 0.142857... (which is 1/7)\n    third_left = 0.1 / (1/7)\n    # 2 times 0.3 which is 0.6\n    third_right = 2 * 0.3\n    third_expression = third_left + third_right\n\n    # Final answer is the sum of the first and second expressions minus the third expression\n    ans = first_expression + second_expression - third_expression\n    return ans\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let bud's pocket money be represented by 'b'\n    b = symbols('b')\n\n    # According to the problem, Pip has 50 more than Bud\n    pip = b + 50\n\n    # Pip spends 80% of his money\n    pip_left = pip * 0.2\n\n    # Bud spends 3/4 of her money\n    bud_left = b * 0.25\n\n    # The ratio of Pip's leftover to Bud's leftover is 6:5\n    equation = Eq(pip_left / bud_left, 6/5)\n\n    # Solve the equation to find the value of b\n    bud_money = solve(equation, b)\n\n    # Calculate Pip's money based on Bud's money\n    pip_money = bud_money[0] + 50\n\n    return pip_money\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) // 2\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    total_spent = (500 * 4) + (300 * 3) + (400) + (300 * 3)\n    num_months = 12\n    average_per_month = total_spent / num_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # Since there are 5 players and 1 player needs to be left as the winner,\n    # we need to play enough games to eliminate 4 players.\n    # Therefore, the number of games played is equal to the number of players minus 1.\n    ans = 5 - 1\n    return ans\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Since 78 mobile phones are left after selling in February\n    remaining_after_feb = 78\n\n    # They sold 13 more than half of the remaining mobile phones in February. \n    # Therefore, after doubling the remaining phones and subtracting 13, we get the amount before February sale.\n    remaining_before_feb = (remaining_after_feb * 2) - 13\n\n    # They sold 22 more than half of the initial stock in January\n    # Therefore, after doubling the amount before January sale and subtracting 22, we get the initial stock.\n    initial_phones = (remaining_before_feb * 2) - 22\n\n    return initial_phones\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i):\n            # If we encounter the number 23, we return the current count\n            if i == 23:\n                return count\n    return count\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n    return total_apples\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, every game eliminates one player.\n    # With 5 players, we need to eliminate 4 players to have a winner.\n    # Thus, 4 games will be played to determine the winner.\n    return 4\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_needed = 70 * 4  # Total money needed for 4 red packets with $70 in each\n    money_short = 15  # Amount of money she is short of\n    money_had = total_needed - money_short  # Total money Mrs Koh had\n    return money_had\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    ans = 8 + 10 - 1\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import divisors\n\ndef solution():\n    # Prime factorization of 2016\n    factors = divisors(2016)\n    for a in factors:\n        for b in factors:\n            for c in factors:\n                for d in factors:\n                    if a * b * c * d == 2016 and a < 10 and b < 10 and c < 10 and d < 10 and a != b and a != c and a != d and b != c and b != d and c != d:\n                        return a + b + c + d\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris's position from the front and back gives the total number of rows\n    rows = 7 + 4 - 1  # Subtract 1 because Chris is counted twice\n\n    # Chris's position from the left and right gives the total number of columns\n    columns = 3 + 7 - 1  # Subtract 1 because Chris is counted twice\n\n    # Total number of students is the product of the number of rows and columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    combined_age_now = combined_age_4_years_ago + 2 * 4 # Each dog aged 4 years\n    combined_age_in_2_years = combined_age_now + 2 * 2 # Each dog will age 2 more years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Original ratio after transactions\n    equation1 = Eq(anna + 8, 2 * (betsy - 15 + 8))\n    equation2 = Eq(betsy - 15, 5 * (charlene + 15 - 15))\n    equation3 = Eq(charlene + 15, 7 * (betsy - 15 + 8))\n    # Total marbles\n    equation4 = Eq(anna + betsy + charlene, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    fraction_eaten = 3/5\n    remaining_weight = 60\n    original_weight = remaining_weight / (1 - fraction_eaten)\n    return original_weight\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # each boy has as many sisters as brothers => sisters = brothers - 1\n    # which translates to girls = boys - 1\n    equation1 = Eq(girls, boys - 1)\n    \n    # each girl has half as many sisters as brothers\n    # which translates to girls - 1 = 1/2 * (boys - 1)\n    equation2 = Eq(girls - 1, 1/2 * (boys - 1))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions[boys], solutions[girls])\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of 10p coins\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    total_value_eq = Eq(5 * (x / 2) + 10 * x + 20 * (2 * x), 1575)  # Total value in pence\n    \n    # Solve the equation for x\n    num_10p_coins = solve(total_value_eq, x)[0]\n    \n    # Calculate the number of 20p coins\n    num_20p_coins = 2 * num_10p_coins\n    \n    # Return the number of 20p coins as integer\n    return int(num_20p_coins)\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Convert minutes to hours\n    first_30_minutes_in_hours = 30 / 60\n    second_30_minutes_in_hours = 30 / 60\n    last_30_minutes_in_hours = 30 / 60\n    \n    # Create equations based on the distances covered in each time period\n    equation = Eq((x * first_30_minutes_in_hours) + \n                  ((x - 20) * second_30_minutes_in_hours) + \n                  ((x + 10) * last_30_minutes_in_hours), 70)\n    \n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n\n    return ivan\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')  # assuming the year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    # The end date will be in datetime format, to get the date in required format we convert it to string\n    ans = end_date.strftime('%d/%m/%Y')\n    return ans\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number = base_10_number // 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_in_a_minute = 60\n    return seconds_in_a_minute\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    apples = 27\n    children = 5\n    min_apples_for_max = 1\n    while True:\n        distribution = [min_apples_for_max - i for i in range(children)]\n        if sum(distribution) <= apples:\n            remaining_apples = apples - sum(distribution)\n            if all(remaining_apples > d for d in distribution):\n                distribution[0] += remaining_apples\n                break\n        min_apples_for_max += 1\n    return distribution[0]\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    total_cost = number_of_people * total_cost_per_person\n    total_tip = total_cost * tip_percentage\n    total_paid = total_cost + total_tip\n    note_given = 50\n    change_received = note_given - total_paid\n    return change_received\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total_sum = 0\n    n = 1\n    while True:\n        total_sum += 5 * n\n        if total_sum % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    well_height = 10\n    climb_up = 4\n    slide_down = 2\n    days = 0\n    height_after_climbing = 0\n\n    while height_after_climbing < well_height:\n        days += 1  # The snail starts climbing at the beginning of the day\n        height_after_climbing += climb_up\n        if height_after_climbing >= well_height:\n            break  # The snail escapes the well\n        height_after_climbing -= slide_down  # The snail slides down at the end of the day\n\n    return days\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Since the player who takes the last marble loses, we need to force the opponent\n    # to pick the last marble. For this to happen, we need to leave 4 marbles before\n    # the opponent's turn (so that no matter what they pick, 1-3, we will still be able\n    # to take the remaining and avoid the last one).\n\n    # To ensure we can force this situation, we need to take a number of marbles such that\n    # the remaining number of marbles is a multiple of 4.\n    # Starting with 26 marbles, taking 2 marbles would leave 24 marbles, which is a multiple of 4.\n    # This way, we can always mirror the opponent's turn by taking 4 - their number of marbles.\n    # They take 1, we take 3. They take 2, we take 2. They take 3, we take 1. And so on,\n    # until we force them to take the last marble.\n    \n    initial_marbles = 26\n    # Calculate the marbles Jason should take initially.\n    marbles_jason_should_take = initial_marbles % 4\n    # If marbles Jason should take is 0, he can choose to take 1, because no matter what he would eventually lose,\n    # so taking 1 initially might give him a chance if Belinda makes a mistake.\n    if marbles_jason_should_take == 0:\n        marbles_jason_should_take = 1\n    \n    return marbles_jason_should_take\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since there are three bars and the alcoholic goes to them at random,\n    # the probability of being found in any one bar is 1/3.\n    # If the alcoholic is not found in two of the bars, they must be in the third bar.\n    # Hence, the probability is 100% or 1.\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    # Finding the whole number\n    whole_number = (18 * 7) / 3\n    # Finding five sixths of the number\n    five_sixths_of_number = (whole_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is the current year 2023\n    time_spent = timedelta(weeks=3)\n    end_date = start_date + time_spent\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let p be the amount of grass the pasture grows each week.\n    # Let t be the total amount of grass available at the start.\n    \n    # Equation 1: For 120 cows to eat up the grass in 12 weeks\n    # t + 12p = 120 * 12\n    \n    # Equation 2: For 150 cows to eat up the grass in 8 weeks\n    # t + 8p = 150 * 8\n    \n    # Setup the system of linear equations to find p and t\n    from sympy import symbols, Eq, solve\n\n    p, t = symbols('p t')\n    \n    equation1 = Eq(t + 12 * p, 120 * 12)\n    equation2 = Eq(t + 8 * p, 150 * 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, t))\n\n    # Use the solution to find how many cows the pasture can sustain for 6 weeks\n    # Equation 3: t + 6p = cows * 6\n    # cows = (t + 6p) / 6\n    p = solutions[p]\n    t = solutions[t]\n\n    cows = (t + 6 * p) / 6\n\n    return int(cows)\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    for volunteers in range(1, 1000):  # assuming a practical upper limit for the number of volunteers\n        trees = 4 * volunteers + 5  # total number of trees when each volunteer plants 4 trees\n        if trees % 7 == 0:  # checking if the number of trees is divisible by 7 (each volunteer plants 7 trees)\n            return (volunteers, trees)\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    count = 0\n\n    for x1 in range(1, 25):\n        for x2 in range(1, 25):\n            if x2 == x1:\n                continue\n            for x3 in range(1, 25):\n                if x3 in (x1, x2):\n                    continue\n                for x4 in range(1, 25):\n                    if x4 in (x1, x2, x3):\n                        continue\n                    for x5 in range(1, 25):\n                        if x5 in (x1, x2, x3, x4):\n                            continue\n                        for x6 in range(1, 25):\n                            if x6 in (x1, x2, x3, x4, x5):\n                                continue\n                            for x7 in range(1, 25):\n                                if x7 in (x1, x2, x3, x4, x5, x6):\n                                    continue\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25:\n                                    way = sorted([x1, x2, x3, x4, x5, x6, x7])\n                                    if way not in ways:\n                                        ways.append(way)\n                                        count += 1\n                                        \n    return ways\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 11 - 5\n    last_term = 41\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # 10/x = 14/21\n    # Cross-multiply\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # The number of boys will always be odd squares, and girls will be even squares\n    # Let the side of the square for boys be 'b' and for girls be 'g'\n    # Total boys = b^2, Total girls = g^2\n    # We know Total boys = Total girls + 55\n    # b^2 = g^2 + 55\n    # Also for any k, (k+1)^2 = k^2 + 2k + 1\n    # Which means b^2 - g^2 should be a sum of consecutive odd numbers starting from 1\n    # The difference between consecutive odd squares is a consecutive even number starting from 2\n    # b^2 - g^2 = b^2 - (b-1)^2 = 2b-1 (Since b is next odd number after g)\n    # 2b - 1 = 55 => b = 28 (since 55 + 1 = 56, 56/2 = 28)\n    # Now the total number of students is the sum of the square of the first b odd numbers (boys)\n    # and the square of the first b-1 even numbers (girls), since b = 28\n\n    total_boys = 28**2\n    total_girls = 27**2\n    total_students = total_boys + total_girls\n    return total_students\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    result = (5 / 100) * 180\n    return result\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    \n    packets_needed = -(-children // bars_per_packet)\n\n    return packets_needed\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # stickers in A at first = a\n    # stickers in B at first = b\n    # a + b = 270\n    # after 56 stickers are moved from A to B\n    # a - 56 = number of stickers in A after moving\n    # b + 56 = number of stickers in B after moving\n    # ratio of bag B to A is 3:2 after moving stickers\n    # (b + 56):(a - 56) = 3:2\n    # solving the equations we get 2*(b + 56) = 3*(a - 56)\n    # 2b + 112 = 3a - 168\n    # 3a + 2b = 280\n    # use the first equation to express b in terms of a\n    # b = 270 - a\n    # substitute b into the second equation\n    # 3a + 2*(270 - a) = 280\n    # 3a + 540 - 2a = 280\n    # a = 280 - 540\n    # a = -260 / 1\n    # a = 260\n    return 260\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sum = 0\n    for i in range(15, 3, -4):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    number = 2\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    tenth_term = 31\n    common_difference = 3\n    term_number = 10\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    first_term = tenth_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n    \n    sweets_to_give_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give_away // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    \n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n\n    return num_boxes\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the total money Irene had as x\n    x = symbols('x')\n\n    # Create an equation based on the problem statement\n    equation = Eq((1/4) * x + (2/7) * x, 225)\n\n    # Solve the equation to find the total money x\n    total_money = solve(equation, x)\n\n    return total_money[0]  # since solve returns a list\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap = 1.1\n\n    total_gaps = num_daffodils - 1\n    total_length = total_gaps * gap + 1\n\n    return total_length\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # In worst case scenario, we could pick 9 cards of each color and not have 10 of the same color.\n    # So we take 9 cards from each of the three smallest groups (4, 8 and 12)\n    worst_case = 9 + 9 + 9\n    # Now, any additional card we draw must be the 10th card of a color.\n    # Hence we add 1 to the worst case number of cards.\n    ans = worst_case + 1\n\n    return ans\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # In order to have the maximum number of different positive integers that add up to 30,\n    # we should start from 1 and keep adding the next integer. \n    # Since 1 + 2 + 3 + ... + n = n(n + 1) / 2, we need to find an `n` such that n(n + 1)/2 <= 30.\n    # When `n` is too large, the sum surpasses 30, so we decrement `n` until the sum is <= 30.\n\n    n = 1\n    while (n * (n + 1)) / 2 <= 30:\n        n += 1\n    # As soon as the sum surpasses 30, n is one too high, so we take the previous value\n    ans = n - 1\n\n    return ans\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2/5\n\n    # Lovelle and Makayla had $3998 muffins altogether.\n    equation1 = Eq(lovelle + makayla, total_muffins)\n    # Lovelle sold $462 muffins\n    # Makayla sold 2/5 of her muffins\n    # After selling, they both have an equal number of muffins\n    equation2 = Eq(lovelle - lovelle_sold, makayla - makayla_sold_fraction * makayla)\n\n    # Using sympy's solve to find the number of muffins Lovelle had at first\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n\n    return int(time)\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    # Since we have identical boxes and stickers should not be same in each,\n    # we'll use stars and bars method with constraints.\n    \n    # The boxes are identical, but the numbers must be different.\n    # So, we only need to count the distinct partitions of 9 into three parts.\n    # We can simplify the problem by subtracting 1 from each part (to ensure none of them are empty),\n    # and then partitioning 6 into three distinct parts.\n\n    # Possible partitions of 6 into three distinct parts are (only distinct parts as boxes are identical):\n    # 1 + 2 + 3 = 6\n    # Hence, there's exactly 1 way to partition 9 into three distinct non-empty parts\n    # after considering rearranging the initial 1 sticker into each box.\n    \n    return 1\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1 / 2) * (16 / (1 / 4))\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n    \n    # Total ways to form a group of 4 without restriction\n    total_ways = comb(total_boys + total_girls, group_size)\n    \n    # Total ways to form a group of 4 with only girls\n    all_girls_ways = comb(total_girls, group_size)\n    \n    # Subtracting all girls group from total ways to get at least 1 boy in a group\n    ans = total_ways - all_girls_ways\n    \n    return ans\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30\n    friends = 6\n\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let the amount Jane drinks be x. \n    # Then Alex drinks 1.5x (50% more than Jane).\n    # Together they drink the entire bottle, therefore x + 1.5x = total_juice\n    # Solving for x gives us the amount Jane drinks and 1.5x gives us the amount Alex drinks.\n    \n    # x + 1.5x = total_juice\n    # 2.5x = total_juice\n    x = total_juice / 2.5\n    alex_drinks = 1.5 * x\n    return alex_drinks\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let original_amount be the amount Bud had initially.\n    # According to the problem, she spent 1/4 of it on a book.\n    # So she is left with (3/4) * original_amount.\n\n    # She then spent 2/5 of the remaining amount on a bag.\n    # That implies she spent (2/5) * (3/4) * original_amount = 60.\n    # We solve for original_amount.\n\n    bag_cost = 60\n    original_amount = bag_cost / ((2/5) * (3/4))\n\n    return original_amount\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits_used = 0\n    number_of_pages = 0\n\n    while digits_used < 157:\n        number_of_pages += 1\n        digits_used += len(str(number_of_pages))\n\n    # Since we add the number of pages before checking the digits,\n    # we need to subtract one from the result\n    return number_of_pages - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate through odd numbers in the range\n        if num % 3 == 0 and num % 7 == 0:  # Check divisibility by 3 and 7\n            return num  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            total_price = int(f\"{x}679{y}\")\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360\n    speed = 40  # Speed in meters per second\n\n    # time = distance/speed\n    time = train_length / speed\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Looping through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Checking if the sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance covered by peach trees is (number of intervals) * (distance between each tree)\n    total_distance = (41 - 1) * 3  # Since there are 41 trees, there are 40 intervals\n\n    # Since there are lamp posts at both ends of the road, we find the number of intervals by adding one\n    num_lamp_posts = (total_distance // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    dvd_cost = total_money / 3\n    remaining_money = total_money - dvd_cost\n    book_cost = remaining_money * 25 / 100\n    money_left = remaining_money - book_cost\n    return money_left\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of candies and the number of students in class B\n    candies, students_B = symbols('candies students_B')\n    \n    # Number of students in class A is twice that of class B\n    students_A = 2 * students_B\n    \n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # candies = 4 * students_A + 20\n    equation1 = Eq(candies, 4 * students_A + 20)\n    \n    # If each student in class B gets 6 candies, 16 candies are left\n    # candies = 6 * students_B - 16\n    equation2 = Eq(candies, 6 * students_B - 16)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candies, students_B))\n    \n    # Get the total number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    return (12 // 1.4) + 1\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    for year in range(1, 4):\n        # Rabbits reproduce, increasing their population 3 times\n        initial_rabbits *= 3\n        # Wolves eat half of the rabbit population\n        initial_rabbits /= 2\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1  # sum of distances for each part of the trip\n    time_for_first_mile = 1 / 60  # time to travel the first mile at 60 mph\n    time_for_second_mile = 1 / 30  # time to travel the second mile at 30 mph\n    total_time = time_for_first_mile + time_for_second_mile  # sum of times for each part of the trip\n    average_speed = total_distance / total_time  # average speed formula\n    return average_speed\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    base = 2\n    exponent = 4 - 1  # Minus one because she starts with 2 candies on the first day\n    candies_eaten_on_fourth_day = base ** exponent\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6  # from Monday to Saturday\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the natural number greater than 1 be 'n'\n    n = symbols('n', integer=True)\n\n    # Setting up the equations based on the remainders:\n    # When dividing 290 by n, the remainder is a\n    eq1 = Eq(290 % n, symbols('a'))\n    # When dividing 235 by n, the remainder is a+2\n    eq2 = Eq(235 % n, symbols('a') + 2)\n    # When dividing 200 by n, the remainder is a+5\n    eq3 = Eq(200 % n, symbols('a') + 5)\n\n    # To find the natural number 'n', we need to solve these equations\n    # The sympy solve function can handle these sets of modular equations\n    solutions = solve((eq1, eq2, eq3))\n\n    # As we are looking for the natural number greater than 1 and since sympy can\n    # return solutions that are non-integer or negative, we filter for those conditions.\n    valid_solutions = [sol[n] for sol in solutions if sol[n] > 1 and sol[n].is_integer]\n\n    # If we have a valid solution, it should be the answer.\n    # In our case we are expecting a single valid solution for this type of problem.\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(1, 10):\n                if P != I and P != S and I != S:\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_age = 765\n    n = 9\n    middle_position = (n + 1) // 2\n    average_age = total_age // n\n    middle_age = average_age + (middle_position - 1)\n    return middle_age\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    # Since the triangle has a right angle, the sum of the other two angles must be 90 degrees.\n    # Let x be the smaller angle, then 2x is the larger angle.\n    # The sum of the smaller angle and the larger angle is 90 degrees.\n    # Hence, x + 2x = 90\n    # Solving for x, we get 3x = 90\n    x = 90 / 3\n\n    # The larger angle is 2x\n    larger_angle = 2 * x\n    return larger_angle\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    six_day_sunshine = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine = six_day_sunshine + sunday_sunshine\n    average_sunshine = total_sunshine / 7\n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walk_speed = 75  # in m/min\n    run_speed = walk_speed * 2  # running speed is 2 times walking speed\n    walk_time = 24  # time taken to walk to school in minutes\n\n    # Total distance to school\n    total_distance = walk_speed * walk_time\n\n    # Half the journey by walking and other half by running\n    half_distance = total_distance / 2\n\n    # Time taken to walk half the journey\n    walk_half_time = half_distance / walk_speed\n\n    # Time taken to run half the journey\n    run_half_time = half_distance / run_speed\n\n    # Total time for half journey by walking and other half by running\n    total_time = walk_half_time + run_half_time\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # Number of intervals is one less than the number of trees\n    num_intervals = 79 - 1\n    # Total length of road\n    total_length = 320\n    # Distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n    \n    # 9 necklaces + 5 earrings = $1440\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    \n    # 3 necklaces + 1 earring = $438\n    equation2 = Eq(3 * necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n\n    leftover = total_length % piece_length\n    return leftover\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = num_teams * (num_teams - 1) // 2\n    \n    return matches\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    numerator = 3\n    denominator = 100\n    decimal = whole_number + (numerator / denominator)\n    return decimal\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # Let the original savings of Kim be x\n    # She gave (1/3)x to her mother\n    # She spent $177 on dresses and $129 on earrings\n    # The amount left is (1/2) of what she gave her mother\n\n    # So according to the problem,\n    # x - (1/3)x - 177 - 129 = (1/2) * (1/3)x\n    # Simplify the equation to find x\n\n    # x - x/3 = 177 + 129 + (1/2 * 1/3)x\n    # x - x/3 = 306 + x/6\n    # 6x - 2x = 1836 + x\n    # 5x = 1836\n    # x = 1836 / 5\n    \n    savings = 1836 / 5\n    \n    return savings\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    # Since the baskets are identical, we just need to find unique partitions of 6\n    for x1 in range(7):  # First basket can have 0 to 6 apples\n        for x2 in range(7 - x1):  # Second basket has remaining apples upto 6 - x1 \n            # For third basket, it will be the remaining apples: 6 - x1 - x2, no need for loop\n            x3 = 6 - x1 - x2\n            # Now we have x1, x2, and x3 as a partition of 6 apples among three baskets\n            count += 1  # Each unique partition represents one way of arranging apples\n    \n    return count\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    result_sum = 0\n    for N in range(1, 2018):\n        if (2018 - 11) % N == 0:\n            result_sum += N\n    return result_sum\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_worker_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if (chickens * 2) + (cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n    found_numbers = []\n\n    for number in range(30, 61): # Check from 30 to 60 inclusively\n        if (number - first_term) % common_difference == 0:\n            found_numbers.append(number)\n\n    return found_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since sweets are distributed evenly, the class size must be a factor of the total number of sweets\n    # which also ensures that each student gets at least 5 sweets.\n    # We can find all the factors of the total number of sweets and check which ones are greater than or equal to 5.\n    class_size = [i for i in range(1, total_sweets + 1) if total_sweets % i == 0 and i >= min_sweets_per_student]\n\n    # The class size must be the smallest among the factors (equivalent to the maximum sweets per student scenario),\n    # because the question states that at least one student gets 5 sweets, implying we are looking for the maximum class size.\n    ans = class_size[0]\n\n    return ans\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3*apple + 2*banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    fixed_tax = 0.08\n    first_50k_tax = 50000 * fixed_tax\n    remaining_income = income - 50000\n    total_tax_paid = 15000\n\n    equation = Eq((remaining_income * (fixed_tax + T/100)) + first_50k_tax, total_tax_paid)\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    # Initialize a variable to keep track of the number of digits\n    current_digit_count = 0\n    current_number = 1\n    # Loop until the number of digits exceeds 2023\n    while True:\n        number_of_digits_in_current_number = len(str(current_number))\n        # If the current count plus the number of digits in the current number exceeds 2023\n        if current_digit_count + number_of_digits_in_current_number >= 2023:\n            # Calculate the index of the 2023rd digit within the current number\n            index_within_current_number = 2023 - current_digit_count - 1\n            # Find the 2023rd digit by indexing the string representation of the current number\n            return int(str(current_number)[index_within_current_number])\n        else:\n            # Add the number of digits of the current number to the digit counter\n            current_digit_count += number_of_digits_in_current_number\n            # Move to the next number\n            current_number += 1\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n\n    # Using the Pigeonhole Principle,\n    # at least one \"pigeonhole\" (day) will have\n    # ceil(boys_in_club / days_in_january) \"pigeons\" (boys)\n    from math import ceil\n    min_boys_per_day = ceil(boys_in_club / days_in_january)\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has\n    # Let a be the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n    \n    # After both eating 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total number of candies originally\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_space_between_cars = 5 * 30\n    total_length = first_car_length + other_cars_length + total_space_between_cars\n    return total_length\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Since the number is three-digit, 0 can't be the first digit.\n    # There are 2 choices for the first digit (2 or 3),\n    # 3 choices for the second digit (0, the remaining digit from 2 or 3, and the remainder),\n    # and 2 choices for the third digit (the remaining two numbers other than the first and second).\n    # So we multiply the choices for each place.\n    return 2 * 3 * 2\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    total_score = 66\n    points_for_correct = 4\n    points_for_incorrect = -2\n    points_for_unattempted = 0\n    unattempted_questions = 1\n\n    # Since Woody answered all but one question, he must have attempted (total_questions - unattempted_questions) questions.\n    attempted_questions = total_questions - unattempted_questions\n    \n    # Let's assume all attempted questions were correct, which gives us the maximum possible score from the attempted questions.\n    max_possible_score = attempted_questions * points_for_correct\n    \n    # Now, we calculate how much the actual score falls short of this maximum possible score.\n    score_deficit = max_possible_score - total_score\n    \n    # The only way the deficit can arise is due to incorrect answers. Since each incorrect answer results in a 6 point deficit from what would have been gained with a correct answer (4 points turned into -2 points), we can divide the total deficit by 6 to get the number of incorrect answers.\n    incorrect_answers = score_deficit / (points_for_correct - points_for_incorrect)\n    \n    # Finally, we find the number of correct answers by subtracting the number of incorrect answers from the number of attempted questions.\n    correct_answers = attempted_questions - incorrect_answers\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_to_Helen = 23\n    chocolates_left = total_chocolates - chocolates_given_to_Helen\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(digits):\n        # convert tuple to integer\n        num = int(''.join(perm))\n        if num > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given sequence values for 7th, 8th and 9th positions\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    \n    # Calculate the common difference of the sequence\n    common_difference = a8 - a7\n    \n    # Calculate the first term using the 7th term and common difference\n    a1 = a7 - (7 - 1) * common_difference   # a_n = a_1 + (n-1) * d, thus a_1 = a_n - (n-1) * d\n    \n    # Calculate the 100th term of the sequence\n    a100 = a1 + (100 - 1) * common_difference   # a_n = a_1 + (n-1) * d\n    \n    return a100\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # given ratio 2:3:5\n    # Sarah received 12 sweets which corresponds to 3 parts in the ratio\n    sarah_part = 3\n    total_parts = 2 + sarah_part + 5\n\n    # Calculate the number of sweets per part\n    sweets_per_part = 12 / sarah_part\n\n    # Calculate the total number of sweets\n    total_sweets = sweets_per_part * total_parts\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n\n    original_length = current_length / (1 + growth_rate)\n\n    return original_length\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # in pence\n    total_cakes_cost = 9 * 113    # in pence, since £1.13 is 113p\n    total_cost_in_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_in_pounds = total_cost_in_pence / 100  # converting pence to pounds\n    change = 20 - total_cost_in_pounds\n    return round(change, 2)\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_litres = week1 + week2 + week3\n\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Calculate arrangements for non-restricted students (D_E_Group, F, G)\n    non_restricted_arrangements = factorial(3)\n\n    # Calculate arrangements for D and E since they want to be next to each other,\n    # treat them as a single unit\n    de_arrangements = factorial(2)\n\n    # For A, B, and C there are 3! ways to order them, but since A must be between B and C,\n    # There is only 1 way to arrange A, B, and C where A is in the middle\n    abc_arrangements = 1\n\n    # There are 5 positions where A can be placed (as A has fixed positions)\n    # These positions are (indexing from 0 to 6): 1, 2, 3, 4, 5\n    a_positions = 5\n\n    # total permutations is the product of all possible arrangements of subgroups and positions\n    ans = non_restricted_arrangements * de_arrangements * abc_arrangements * a_positions\n\n    return ans\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    total_time_before_lunch = timedelta(minutes=10+20+20)\n    reach_home_time = lunch_end_time - total_time_before_lunch\n    return reach_home_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40 PM', '%I:%M %p')\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Sam's original amount of stickers as 's' and Peter's as 'p'.\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter: s = p + 40\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter: s - 0.2 * s\n    # Peter's new amount: p + 0.2 * s\n    \n    # Peter gave 25% of his new amount to Sam: (p + 0.2 * s) - 0.25 * (p + 0.2 * s)\n    # Sam's new amount: (s - 0.2 * s) + 0.25 * (p + 0.2 * s)\n    \n    # In the end, Sam had 96 stickers more than Peter.\n    # (s - 0.2 * s) + 0.25 * (p + 0.2 * s) - ((p + 0.2 * s) - 0.25 * (p + 0.2 * s)) = 96\n    equation2 = Eq((sam - 0.2 * sam) + 0.25 * (peter + 0.2 * sam) - ((peter + 0.2 * sam) - 0.25 * (peter + 0.2 * sam)), 96)\n    \n    # Now we solve the system of equations.\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    return 6.5 / 0.5\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*(x-5)-3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial as fact\n\ndef permutation(n, r):\n    return fact(n) // fact(n - r)\n\ndef solution():\n    # For 3-digit numbers\n    # Choose 3 digits out of the 4 (0 can't be the first digit)\n    # First digit options (2, 1, or 7) = 3 choices\n    # Remaining two digits can be arranged in 2! ways\n    three_digit = 3 * permutation(3, 2)\n    \n    # For 4-digit numbers\n    # All 4 digits must be used\n    # First digit options (2, 1, or 7) = 3 choices\n    # Remaining three digits can be arranged in 3! ways\n    four_digit = 3 * permutation(3, 3)\n    \n    # Total numbers = 3-digit numbers + 4-digit numbers\n    total = three_digit + four_digit\n    return total\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n    \n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    pages = 0\n    nines = 0\n    while nines < 181:\n        pages += 1\n        nines += str(pages).count('9')\n    return pages - 1  # Subtract one because we add a page before checking\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    perm = permutations(digits, 3)\n    numbers = set(int(''.join(map(str, p))) for p in perm if p[0] != 0)\n    return max(numbers) - min(numbers)\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_per_pattern = 2\n    patterns = 14 / grey_per_pattern\n    total_rabbits_per_pattern = 1 + 2 + 2  # black + white + grey\n    total_rabbits = patterns * total_rabbits_per_pattern\n    return int(total_rabbits)\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of crystals Jason had at first\n    initial_crystals = symbols('initial_crystals')\n\n    # Equation: Jason sold 10 more than half of his initial crystals to Yvonne\n    yvonne_crystals = (initial_crystals / 2) + 10\n\n    # Equation: Then, he mined 20 more crystals in Singapore\n    after_mining = initial_crystals + 20\n\n    # Equation: After that, he sold 14 crystals to Cherlyn\n    cherlyn_crystals = 14\n\n    # Final equation: He has 35 crystals in the end\n    remaining_crystals = Eq(after_mining - yvonne_crystals - cherlyn_crystals, 35)\n\n    # Solve for initial number of crystals\n    result = solve(remaining_crystals, initial_crystals)\n\n    return result[0]\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    factor_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 9 == 0:\n            factor_count += 1\n    return factor_count\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digit_options = [1, 2, 3, 4]\n    even_digits = [2, 4]  # Only 2 and 4 are even and can be the last digit of an even number.\n    count = 0\n\n    for last_digit in even_digits:\n        for perm in permutations([digit for digit in digit_options if digit != last_digit], 3):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return int(total_age)\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    total_cost = cost_per_box * 12\n    return total_cost\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yi_yen, kyra = symbols('yi_yen kyra')\n    \n    total_stickers = Eq(yi_yen + kyra, 100)\n    yi_yen_stickers = Eq(yi_yen, 4 * kyra)\n    \n    solutions = solve((total_stickers, yi_yen_stickers), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # A number is divisible by 9 if the sum of its digits is divisible by 9\n    # So we find the sum of the other digits first\n    digit_sum_without_a = 2 + 6 + 5 + 3 + 9\n    # Now we need to find 'a' such that (digit_sum_without_a + a) is divisible by 9\n    for a in range(10):  # 'a' can be any digit from 0 to 9\n        if (digit_sum_without_a + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    budget_pence = 200  # £2 in pence\n    single_price = 12   # price for a single sweet in pence\n    bundle_price = 30   # price for three sweets in pence\n\n    # Calculate maximum sweets if bought in three-sweet bundles\n    max_bundles = budget_pence // bundle_price\n    max_sweets_with_bundles = max_bundles * 3\n\n    # Calculate remaining budget after buying in bundles\n    remaining_budget = budget_pence - (max_bundles * bundle_price)\n\n    # Calculate additional sweets with the remaining budget if bought singly\n    additional_sweets = remaining_budget // single_price\n\n    # Total maximum sweets\n    total_sweets = max_sweets_with_bundles + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since there must be at least one ball in each box, we start by placing one ball in each box.\n    # This leaves us with 10 - 7 = 3 balls to distribute freely among the 7 boxes.\n    remaining_balls = 10 - 7\n    boxes = 7\n\n    # We use the stars and bars theorem to calculate the number of ways to distribute the remaining balls.\n    # The number of ways to put n indistinguishable items into k distinguishable boxes is comb(n + k - 1, k - 1),\n    # where comb is the number of combinations.\n    ans = comb(remaining_balls + boxes - 1, boxes - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age_now = 7\n    may_age_then = 10\n    kenny_brother_age_diff = 2\n\n    # Let x be the current age of Kenny's younger brother\n    # Kenny's current age is then x + 2\n    # When May is 10, Kenny's brother will be x + (10 - 7)\n    # Kenny will be x + 2 + (10 - 7)\n    # The sum of Kenny's and his brother's age when May is 10 will be 3 * 10\n    # So, we have the equation: (x + 3) + (x + 5) = 3 * 10\n\n    # Solving for x\n    x = (3 * may_age_then - 8) / 2\n\n    # Kenny's current age\n    kenny_age_now = x + 2\n\n    # The difference in age between Kenny and May\n    age_difference = kenny_age_now - may_age_now\n\n    return int(age_difference)\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # 0 indicates that Felix loses, and 1 indicates a winning position\n    # Since the game is deterministic, eating 1 or 2 candies gets to a prior state\n    dp = [0] * 11  # Initialize the states for all positions up to 10 candies\n    dp[0] = 0      # If there are no candies, Felix loses because he cannot move\n    dp[1] = 1      # If there's 1 candy, Felix wins by eating it.\n\n    for i in range(2, 11):\n        # If taking 1 candy leads to a loss for the other player, Felix wins by taking 1.\n        # If taking 2 candies leads to a loss for the other player, Felix wins by taking 2.\n        dp[i] = 1 if dp[i - 1] == 0 or dp[i - 2] == 0 else 0\n\n    # Since there are 10 candies, look at the 10th position\n    first_player_wins = dp[10]\n\n    # Felix should go first and eat one candy if the 9th position is a losing state.\n    # Otherwise, Felix should go second as his first move would leave an even number of candies,\n    # which is optimal for the second player's victory.\n    felix_strategy = \"first\" if dp[9] == 0 else \"second\"\n\n    return (first_player_wins, felix_strategy)\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the number of litres needed to fill the fish tank.\n    # If he uses a 5-litre pail, 4 litres of water will overflow, so we have:\n    # x + 4 = 5 * (n + 1), where n is the number of 5-litre pails used.\n    \n    # If he uses a 3-litre pail, he needs 4 more pails of water, so we have:\n    # x = 3 * (m + 4), where m is the number of 3-litre pails used.\n\n    # We know that x + 4 is a multiple of 5 and x is a multiple of 3.\n\n    # Initialize a starting point for x as a multiple of 3 that can also fulfill\n    # being 4 more than a multiple of 5\n    # We find the smallest such number by testing multiples of 3, starting with 3 * 4,\n    # and checking if (x + 4) is a multiple of 5\n    x = 3 * 4\n    while (x + 4) % 5 != 0:\n        x += 3  # Increment x by 3 until the condition is met\n    \n    return x\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 28:\n        page += 1\n        count += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_sum = sum(coins)\n    for coin in coins:\n        if (total_sum - coin) == 2 * (total_sum // 2 - coin):\n            lost_coin = coin\n            break\n    return lost_coin\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    \n    for i in range(1, 2017):\n        underline_count = 0\n        \n        if i % 2 == 0:\n            underline_count += 1\n        if i % 3 == 0:\n            underline_count += 1\n        if i % 4 == 0:\n            underline_count -= 1  # Every multiple of 4 is already counted as a multiple of 2\n        \n        if underline_count == 2:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 4 girls from 8\n    ways_to_choose_girls = comb(8, 4)\n    \n    # Number of ways to choose 3 boys from 12\n    ways_to_choose_boys = comb(12, 3)\n    \n    # The total number of ways to choose 4 girls and 3 boys\n    total_ways = ways_to_choose_girls * ways_to_choose_boys\n    \n    return total_ways\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    number_of_intervals = road_length // distance_between_trees\n    number_of_trees = number_of_intervals + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    # Convert times to minutes past 15:00 (3 PM) for easier calculation\n    first_bus = (15 * 60 + 55) - (15 * 60)  # first bus at 15:55\n    second_bus = (16 * 60 + 35) - (15 * 60) # second bus at 16:35\n\n    # Time when you arrive (4 minutes late for the first bus)\n    arrival_time = first_bus + 4\n\n    # Time to wait for the second bus\n    wait_time = second_bus - arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of boys and y as the number of girls\n    x, y = symbols('x y')\n\n    # Total number of students\n    total_students = 152\n\n    # Equation for the total number of students\n    equation1 = Eq(x + y, total_students)\n\n    # After removing 1/11 of the boys and 5 girls,\n    # the number of boys and girls are the same\n    equation2 = Eq(x - x/11, y - 5)\n\n    # Solving the two equations to find the number of boys and girls\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the original number of boys\n    return solutions[x]\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = -(-workers // capacity)  # Ceiling division\n    return lorries_needed\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Since the average of any 4 numbers is given, and there are 5 numbers in total,\n    # we can calculate the total sum of those 4 numbers by multiplying the average by 4.\n    # We do this for all the given averages.\n    avg_multiples = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n\n    # The total sum of all 5 numbers is the sum of the total sums for 4 numbers\n    # minus 4 times the sum that was counted four times (each number is included in 4 averages).\n    total_sum = sum(avg_multiples) - 4 * min(avg_multiples)\n\n    # To find the largest number, we can subtract the smallest total (which doesn't include the largest number) from the total sum.\n    largest_number = total_sum - min(avg_multiples)\n\n    return largest_number\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of men and women\n    men, women = symbols('men women')\n\n    # Equation representing four times as many women as men\n    equation1 = Eq(women, 4 * men)\n    \n    # Equation representing women being 126 more than men\n    equation2 = Eq(women, men + 126)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n\n    # Calculate the total number of people in the concert hall\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andrew's and Louise's ages\n    andrew, louise = symbols('andrew louise')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    # Return Louise's age\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    avg_pages_next_four_days = 20\n    pages_last_two_days = 60\n    total_pages = pages_first_three_days + (avg_pages_next_four_days * 4) + pages_last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Constructing the congruences based on the problem statement\n    # x = 3 (mod 4)\n    # x = 3 (mod 5)\n    # x = 3 (mod 9)\n    # The positive whole number should also be less than 200\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    \n    # Using the Chinese Remainder Theorem to find the solution\n    # that satisfies all congruences and is less than 200\n    x, _ = solve_congruence(*congruences)\n    while x < 200:\n        ans = x\n        x += 4*5*9 # Least common multiple of 4, 5, and 9\n\n    return ans\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die1 != die3 and die2 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n\n    sugar_weight_g = sugar_weight_kg * 1000  # converting kg to grams\n    total_weight_g = sugar_weight_g + pasta_weight_g + spaghetti_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let x be the total number of students, y be the number of rooms\n    # According to the problem:\n    # x % 4 = 6 (if 4 students in one room, there will be 6 students with no room)\n    # (x + 5) % 5 = 0 (if 5 students in one room, there will be 1 room without students, which means x+1 is a multiple of 5)\n    \n    # Start the search from the minimum number that leaving 6 students without room when divided by 4\n    # It should also satisfy that one more than the number should be divisible by 5\n    student_count = 4*1 + 6\n    while True:\n        if (student_count + 5) % 5 == 0:\n            break\n        student_count += 4\n    \n    return student_count\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_after_removal = 6 * 10\n    removed_number = total_sum_initial - total_sum_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    leave_fraction = 1 / 3\n    people_left = total_people * (1 - leave_fraction)\n    return int(people_left)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    \n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    # Compute the least common multiple of the intervals\n    lcm_interval = lcm(interval_a, interval_b, interval_c)\n    \n    # Add the least common multiple to 10:00 am, represented as minutes from midnight\n    time_10_am = 10 * 60  # convert 10:00 am to minutes\n    next_time_in_minutes = time_10_am + lcm_interval\n\n    # Convert minutes since midnight back into hours and minutes\n    hours = next_time_in_minutes // 60\n    minutes = next_time_in_minutes % 60\n    \n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6*x), 48)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    common_factor = 3999 * 2014\n    term1 = common_factor * 1.2014\n    term2 = common_factor * 1.9999\n    sum_terms = term1 + term2\n\n    ans = sum_terms / 12.0012\n    return ans\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_deduction = 2\n    total_marks = 79\n\n    # Let x be the number of questions Eddie answered correctly\n    # Since each incorrect or unanswered question leads to a deduction,\n    # the total marks can also be computed as:\n    # total_marks = correct_mark * x - incorrect_deduction * (total_questions - x)\n\n    # Rearrange the equation to solve for x:\n    # total_marks = correct_mark * x - incorrect_deduction * total_questions + incorrect_deduction * x\n    # total_marks = (correct_mark + incorrect_deduction) * x - incorrect_deduction * total_questions\n    # x = (total_marks + incorrect_deduction * total_questions) / (correct_mark + incorrect_deduction)\n    \n    x = (total_marks + incorrect_deduction * total_questions) / (correct_mark + incorrect_deduction)\n    return int(x)\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    total_swimmers = 30\n    total_cyclists = 35\n    total_table_tennis_players = 42\n    \n    # Using the Inclusion-Exclusion Principle for three sets,\n    # we can start by assuming that the maximum number of students who are in at least\n    # one of the sports is the total number of students in the class.\n\n    # The formula for three sets is:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # Where A, B, C are the three sets (sports groups in this case), |X| is the\n    # cardinality of set X, ∩ is the intersection operator, and ∪ is the union operator.\n\n    # In this scenario, the total students playing at least one sport cannot exceed\n    # the total number of students, which means:\n    # |A ∪ B ∪ C| <= total_students\n\n    # Simplifying for |A ∩ B ∩ C| (the number playing all three sports), we have:\n    # |A ∩ B ∩ C| >= |A| + |B| + |C| - total_students\n    least_number_all_three_sports = total_swimmers + total_cyclists + total_table_tennis_players - total_students\n    \n    # Because |A ∩ B ∩ C| represents the real people and cannot be negative,\n    # if the right side of the inequality is negative,\n    # the number must be at least 0.\n\n    return max(0, least_number_all_three_sports)\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance = distance_per_day - slide_per_night\n    day = 0\n    distance_climbed = 0\n\n    while True:\n        day += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass = 30  # time in seconds\n    train_length = 360  # length in meters\n\n    # Speed = Distance / Time\n    speed = train_length / time_to_pass\n\n    # Convert speed from m/s to km/h\n    speed_km_h = speed * 3.6\n\n    return speed_km_h\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Draw the maximum number of marbles of one color first. In the worst case,\n    # you have to draw all of one color before getting a different color.\n    max_single_color = max(12, 9, 8, 3)\n    \n    # Then, draw three more marbles. Since you've drawn all marbles of one color,\n    # the next three must be of the remaining three different colors, in the worst case.\n    marbles_drawn = max_single_color + 3\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Start with person 10 and add the even numbers 2 at a time\n    # until reaching 24. The count will give half the number\n    # of people in the circle.\n    person = 10\n    count = 0\n    while person != 24:\n        person += 2\n        count += 1\n    # Multiply by 2 to get the total number of people\n    total_people = count * 2\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_and_stationery_percentage = 20\n    savings_less_than_food = 6\n\n    books_and_stationery = (books_and_stationery_percentage / 100) * pocket_money\n    food_plus_transport = pocket_money - books_and_stationery\n    transport = food_plus_transport / 4\n    food = 3 * transport\n    savings = food - savings_less_than_food\n    savings_percentage = (savings / pocket_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    robot_a_time = 24\n    robot_b_time = 64\n    \n    ans = lcm(robot_a_time, robot_b_time)\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    possible_numbers = [num for num in factors_of_75 if num >= 10 and num < 100 and num % 6 == 3]\n    ans = possible_numbers[0]\n    return ans\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = 0\n    for i in range(20, 41, 4):\n        ans += (i - (i - 2))\n    return ans\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_difference = 50\n    correct_subtrahend = 14\n    \n    # Find the minuend by reversing the incorrect subtraction\n    minuend = incorrect_difference + incorrect_subtrahend\n    \n    # Perform the correct subtraction\n    correct_difference = minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for x\n    equation = Eq(34 - 3 * (2 * x - 2), 16)  # Define the equation\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]  # There should only be one solution for a linear equation\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    initial_amount = 5000\n    final_amount = 7320.5\n    years = 4\n\n    # Compound interest formula A = P(1 + r/n)^(nt)\n    # Since n (compounded annually) equals 1, the formula simplifies to A = P(1 + r)^t\n    # We need to find r, therefore: r = (A/P)^(1/t) - 1\n\n    r = (final_amount / initial_amount) ** (1 / years) - 1\n\n    return round(r, 4)  # rounding to 4 decimal places to match interest rate format\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 100):  # Assume a reasonable upper limit for initial square size\n        if (n + 1) * (n + 1) == n * n + 31:\n            ans = (n + 1) * (n + 1)\n            return ans\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n    \n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    \n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    \n    # Calculate for 4-digit numbers starting with 3\n    for thousands_place in [3]:\n        for hundreds_place in [2, 4, 5, 6]:\n            for tens_place in set([1, 2, 4, 5, 6]) - set([hundreds_place]):\n                for ones_place in set([1, 2, 4, 5, 6]) - set([hundreds_place, tens_place]):\n                    if 3267 <= int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\") <= 5120:\n                        total_count += 1\n    \n    # Calculate for 4-digit numbers starting with 4\n    for thousands_place in [4]:\n        for hundreds_place in set([1, 2, 3, 5, 6]):\n            for tens_place in set([1, 2, 3, 5, 6]) - set([hundreds_place]):\n                for ones_place in set([1, 2, 3, 5, 6]) - set([hundreds_place, tens_place]):\n                    total_count += 1\n    \n    # Calculate for 4-digit numbers starting with 5\n    for thousands_place in [5]:\n        for hundreds_place in set([1, 2, 3, 4, 6]):\n            for tens_place in set([1, 2, 3, 4, 6]) - set([hundreds_place]):\n                for ones_place in set([1, 2, 3, 4, 6]) - set([hundreds_place, tens_place]):\n                    if 3267 <= int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\") <= 5120:\n                        total_count += 1\n    \n    return total_count\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    number_of_years = 4\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # one hour and twenty minutes converted to minutes\n    number_of_pictures = total_time_available / time_for_one_picture\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples to distribute\n    total_apples = 30\n    # Number of children excluding Ann\n    other_children = 5\n    # Each child gets at least one apple\n    apples_for_other_children = other_children * 1\n    # The largest possible number for Ann is the total minus what others get\n    ann_apples = total_apples - apples_for_other_children\n    return ann_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789', 7):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n    \n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    equation1 = Eq(a + b, 13)\n    equation2 = Eq(a + c, 25)\n    equation3 = Eq(c, 3 * b)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with pants\n    outfits_with_pants = shirts * pants * shoes\n\n    # Combinations with dresses\n    outfits_with_dresses = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = outfits_with_pants + outfits_with_dresses\n\n    return total_combinations\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1  # The first term of the sequence\n    for i in range(2, 101):  # Start from 1/2 up to 1/100\n        for j in range(1, i):  # The numerator goes from 1 to i-1\n            ans += (j / i)\n    return ans\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    # Convert everything to grams\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n    \n    # Calculate the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    # Convert the difference to kg and g\n    difference_kg = (soil_mass_g - sand_mass_g) // 1000\n    difference_g = (soil_mass_g - sand_mass_g) % 1000\n    \n    ans = (difference_kg, difference_g)\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for James and Nina's original number of buttons\n    james, nina = symbols('james nina')\n    \n    # Equation 1: The total number of buttons James and Nina have is 22\n    equation1 = Eq(james + nina, 22)\n    \n    # Equation 2: After Nina gave 4 buttons to James, they have the same number of buttons\n    equation2 = Eq(nina - 4, james + 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    # Retrieve the number of buttons Nina originally has\n    return solutions[nina]\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n    kites_possible = total_paper_available / paper_needed_per_kite\n    return int(kites_possible)\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    points_per_correct = 4\n    points_deducted_per_incorrect = 2\n    total_points = 29\n\n    # Assume Julie answers 'c' questions correctly and 'w' questions wrongly.\n    # Hence, we have the following equations:\n    # c + w = total_questions (as she answered all questions)\n    # c * points_per_correct - w * points_deducted_per_incorrect = total_points\n    # Solving these equations gives us the correct number of questions 'c'.\n\n    for c in range(total_questions + 1):\n        w = total_questions - c\n        if (c * points_per_correct) - (w * points_deducted_per_incorrect) == total_points:\n            return c\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_sum = sum([int(digit) for digit in \"12345\"])  # Sum of one complete pattern\n    complete_patterns = 52 // 5                           # Number of complete patterns in 52 digits\n    remaining_digits = 52 % 5                             # Remaining digits after complete patterns\n\n    # Total sum = sum of all complete patterns + sum of remaining digits\n    total_sum = (pattern_sum * complete_patterns) + sum([int(\"12345\"[i]) for i in range(remaining_digits)])\n\n    return total_sum\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # Since there are no trees on either end, we consider the segments between the trees,\n    # which are total_trees + 1\n    distance_between_trees = total_distance / (total_trees + 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen to Oscar: 10 fish for 4 rabbits\n    # Oscar to Dennis: 5 rabbits for 6 packs of wheat\n    # We want to find the equivalent of 12 packs of wheat in fish.\n    # First, find the ratio of fish to packs of wheat using the two transactions.\n\n    # From Owen to Oscar: 1 rabbit equals 10 fish / 4 rabbits\n    fish_per_rabbit = 10 / 4\n    \n    # From Oscar to Dennis: 1 pack of wheat equals 5 rabbits / 6 packs of wheat\n    rabbits_per_pack_wheat = 5 / 6\n    \n    # Now we calculate fish per pack of wheat: it's fish per rabbit times rabbits per pack of wheat\n    fish_per_pack_wheat = fish_per_rabbit * rabbits_per_pack_wheat\n    \n    # Finally, calculate the number of fish for 12 packs of wheat\n    fish_for_12_packs = fish_per_pack_wheat * 12\n    \n    return fish_for_12_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    from fractions import Fraction\n\n    total_length = Fraction(54, 5)  # 10 4/5 metres expressed as an improper fraction\n    rod_length = Fraction(3, 10)  # 3/10 metres expressed as a fraction\n\n    number_of_rods = total_length // rod_length\n\n    return number_of_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price = 2800\n    deal_laptop_count = 30\n    laptops_needed = 20\n\n    regular_cost = laptops_needed * single_laptop_price\n    deal_cost_per_laptop = deal_price / deal_laptop_count\n    deal_cost_for_needed = deal_cost_per_laptop * laptops_needed\n\n    savings = regular_cost - deal_cost_for_needed\n\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    total_earnings = hourly_rate * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def count_factors(number):\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\ndef solution():\n    # Given highest common factor\n    hcf = 75\n    \n    # Possible factors of M and N can only be 3^x * 5^y \n    # where x and y are non-negative integers.\n    \n    # Loop through all possible factors for M and N\n    # starting from the highest common factor\n    for m_factor in range(hcf, hcf * 12 + 1, hcf):\n        if count_factors(m_factor) == 12:\n            M = m_factor\n            break\n\n    for n_factor in range(hcf, hcf * 10 + 1, hcf):\n        if count_factors(n_factor) == 10:\n            N = n_factor\n            break\n            \n    return M + N\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    actual_result = -14 + (26 * 2)  # since subtracting instead of adding is a difference of 2 times the number\n    return actual_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    # Let the number of penguins be p\n    fish_per_penguin_1 = 3\n    fish_per_penguin_2 = 4\n    remaining_fish_with_3 = 5\n    additional_fish_needed_with_4 = 15\n\n    # Form the equations based on the given problem\n    # Equation 1: total_fish = fish_per_penguin_1 * p + remaining_fish_with_3\n    # Equation 2: total_fish + additional_fish_needed_with_4 = fish_per_penguin_2 * p\n\n    # Using the equations:\n    # Equation 1 - Equation 2:\n    # fish_per_penguin_1 * p + remaining_fish_with_3 = fish_per_penguin_2 * p - additional_fish_needed_with_4\n    # p = (additional_fish_needed_with_4 + remaining_fish_with_3) / (fish_per_penguin_2 - fish_per_penguin_1)\n    \n    p = (additional_fish_needed_with_4 + remaining_fish_with_3) // (fish_per_penguin_2 - fish_per_penguin_1)\n\n    return p\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    ans = 80 * 35 / 100\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n\n    cards_lost = original_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    # Since the final score was 3-2, we consider all possible half-time scores \n    # that could lead to this final score. The winning team could have had 0, 1, 2 or 3 goals\n    # by half-time, and similarly, the losing team could have had 0, 1 or 2 goals by half-time.\n\n    count = 0\n    for half_time_winning in range(4):\n        for half_time_losing in range(3):\n            # After half-time, the number of goals scored by the winning team \n            # in the second half + half-time score by the winning team should be 3\n            # Similarly, for the losing team, it should sum up to 2.\n            if half_time_winning <= 3 and half_time_losing <= 2 and (half_time_winning >= half_time_losing):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "def solution():\n    from math import factorial\n\n    def perm(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Calculate permutations for singing performances (s) and dancing performances (d)\n    # We have 4 dancing performances (d), which divides the singing performances into 5 slots (including the ends)\n    # We can distribute the 6 singing performances (s) in these 5 slots\n    s, d = 6, 4\n\n    # At least 1 singing performance must be between 2 dancing performances\n    # So we place 1 singing performance in each of the 3 slots between the dance performances\n    # This leaves 6 - 3 = 3 singing performances that can be freely distributed across the 5 slots\n    # For 3 indistinguishable items into 5 distinguishable slots, it is a combination with repetition problem\n    # The formula for this is C(n+r-1, r) where n is the number of slots and r is the number of items\n    free_s = s - (d - 1)\n    slots = d + 1\n    s_combinations = perm(free_s + slots - 1, free_s) // factorial(free_s)\n\n    # Since we have to arrange 4 dancing performances, the number of ways to arrange them is factorial(4)\n    d_permutations = factorial(d)\n\n    # The total arrangements will be the product of the permutations of dancing performances and \n    # the combinations of singing performances\n    ans = s_combinations * d_permutations\n\n    return ans\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    # Let the number of cookies baked by Emma be x\n    # This means the number of cookies baked by Clara is 5x\n    # The total is x + 5x = 1002\n    # Solving for x\n    \n    x = 1002 // 6  # Integer division since cookies can't be in decimal\n    return x\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n    ways_to_choose = comb(num_students, num_monitors)\n    return ways_to_choose\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    empty_basket_weight = (2 * half_full_weight) - full_weight\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    result = 85 / 100 * 400\n    return result\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 8.5 - 4 * (x - 1.5) + 3.2 * (x - 2) - (2.5 * x + 3 * (2.5 - x))\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    sweets_left_for_bud = 16\n    fraction_eaten_by_pip = 3 / 5\n    total_sweets = sweets_left_for_bud / (1 - fraction_eaten_by_pip)\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    num = 6 * 5\n    ans = (num / 40) * 100\n    return ans\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, b be the number of boys, and p be the total number of pupils (g + b)\n    g, b = symbols('g b')\n\n    # Since 3/8 of the girls and 3/5 of the boys can swim, the number of girls and boys who cannot swim are:\n    # (5/8)*g for girls and (2/5)*b for boys\n\n    # It is given that equal number of boys and girls cannot swim, so we have the equation (5/8)*g = (2/5)*b\n    eq1 = Eq((5/8) * g, (2/5) * b)\n\n    # It is also given that the total pupils who cannot swim is 20,\n    # which means (5/8)*g + (2/5)*b = 20\n    eq2 = Eq((5/8) * g + (2/5) * b, 20)\n\n    # Solving the system of equations to find the number of girls and boys\n    solution_dict = solve((eq1, eq2), (g, b))\n\n    # The total number of pupils in the class is the number of girls plus the number of boys\n    total_pupils = solution_dict[g] + solution_dict[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_spent = 30\n    cups_bought = 3\n    cups_desired = 5\n    \n    cost_per_cup = total_spent / cups_bought\n    total_cost_for_desired_cups = cost_per_cup * cups_desired\n    \n    return total_cost_for_desired_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # Number of rabbits that big houses can accommodate in total\n    big_houses_accommodate = 5 * 4\n\n    # Number of rabbits remaining for small houses\n    remaining_rabbits = 38 - big_houses_accommodate\n\n    # Number of rabbits per small house\n    rabbits_per_small_house = remaining_rabbits / 9\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike's position doesn't change when counting from any direction, \n    # he must be at the corner but one of the rectangular array and his position \n    # must be second along the length and the width of the rectangle.\n\n    # Let's define the sides of the rectangle as x and y, with x < y \n    # because Mike cannot be exactly at the corner (otherwise there will be \n    # inconsistency when counting from different directions).\n    \n    # Mike being the second in line means that the number of students (desk) on one side \n    # where he is seated must be more than two, otherwise he would be first or last\n    # (in the case of two seats along the width/length of the rectangle).\n\n    # For a rectangle, the total number of students is x * y.\n    # Start with smallest possible rectangle that fits the description (3x2 or 2x3).\n\n    # Iterate through possible rectangles starting with the smallest sizes\n    # and check when Mike's position would be second from both ends.\n    \n    # The area of the rectangle must be such that\n    # (x-2) * (y-2) == 1; because Mike occupies one of the corners but one, making\n    # it a 3x2 or 2x3 minimum size rectangle and hence a single position being second from all sides.\n    \n    ans = 0\n    x = 3  # starting value of x, as it cannot be less than 3\n\n    while True:\n        y = 0  # initialize y\n        # solve for y using the formula derived from the condition\n        y = ((1 / (x - 2)) + 2)  \n        \n        # If y is an integer, we have found a possible solution.\n        if int(y) == y:\n            ans = int(x * y)  # total students is the area of the rectangle\n            break\n        \n        # Increment x for the next iteration to find next possible rectangle size\n        x += 1\n\n    return ans\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_week = 7\n    \n    total_earnings = average_daily_earnings * days_in_week\n    \n    return total_earnings\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:  # If i is even, add the difference of squares\n            ans += i**2 - (i - 1)**2\n        else:  # If i is odd, subtract the difference of squares\n            ans -= i**2 - (i - 1)**2\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizza_per_month = 15\n    months = 5  # From March to July inclusive is 5 months\n    \n    total_pizzas = average_pizza_per_month * months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    product_of_multipliers = 2 * 3\n    ans = sum_of_numbers // product_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance_upstream = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance_upstream / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num < 100 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # The number of ways to reach the ith step can be calculated by the sum\n    # of ways to reach the (i-1)th step, (i-2)th step, and (i-3)th step.\n    # This is an example of dynamic programming where we build up the solution\n    # step by step.\n\n    steps = [0] * 7  # There are 6 steps, so we need an array of size 7\n    steps[0] = 1  # There's 1 way to stay at the bottom\n    steps[1] = 1  # There's 1 way to reach the first step (1 step)\n    steps[2] = 2  # There are 2 ways to reach the second step (1+1 or 2 steps)\n\n    for i in range(3, 7):\n        steps[i] = steps[i-1] + steps[i-2] + steps[i-3]\n\n    return steps[6]  # The number of ways to reach the 6th step\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    # Find the first multiple of 4 that is greater than or equal to 56\n    first_multiple = (56 + 3) // 4 * 4\n    # Find the last multiple of 4 that is less than or equal to 92\n    last_multiple = 92 // 4 * 4\n    # Count how many multiples of 4 are there between first_multiple and last_multiple\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1) ** ((i // 4) % 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    exponent = 99\n    ones_digit_pattern = [base % 10]\n\n    for _ in range(1, 10):  # Only need to check up to a cycle of 10 because it will then repeat\n        next_digit = (ones_digit_pattern[-1] * base) % 10\n        if next_digit == ones_digit_pattern[0]:\n            break\n        ones_digit_pattern.append(next_digit)\n\n    # Since the ones digit cycles in a pattern, find the position in the cycle that 99 corresponds to\n    index = (exponent % len(ones_digit_pattern)) - 1\n    ans = ones_digit_pattern[index]\n\n    return ans\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Claire's current age\n    claire_current = symbols('claire_current')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(claire_current + 6, 3 * claire_current)\n\n    # Solve the equation for Claire's current age\n    current_age_solution = solve(equation, claire_current)\n    claire_current_age = current_age_solution[0]\n\n    # Calculate Claire's age two years from now\n    claire_future_age = claire_current_age + 2\n\n    return claire_future_age\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let x be the actual time the journey should have taken\n    # Journey took 11/12 of the time it should have, so the journey time was (11/12) * x\n    # It left 15 minutes late and arrived 5 minutes late\n    # Therefore, actual journey time is the expected time (x) minus 15 minutes plus additional 5 minutes late\n    # Hence we have the equation: (11/12) * x = x - 15 + 5\n\n    # Solving for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((11/12) * x, x - 15 + 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    \n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To guarantee she gets 4 different colored marbles,\n    # Jane must first draw enough marbles to ensure she gets three of one color,\n    # which is the maximum she can get without having four different colors.\n    # The worst case is drawing all marbles of the color that is most abundant,\n    # since this will require the most extra draws to get the fourth color.\n\n    # The number of marbles of the most abundant color:\n    most_abundant_color = 7  # Green has the most marbles\n\n    # She also needs to draw 3 additional marbles (one of each of the other colors)\n    # to ensure she has four different colored marbles. However, as she draws marbles,\n    # she could draw each of these colors before getting three of the first color.\n    # The worst case is reaching the 3rd marble of the abundant color right at the end.\n\n    # Therefore, she must draw:\n    ans = most_abundant_color + 3  # One draw for each of the three less abundant colors\n    return ans\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    net_climb = day_climb - night_slide\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # To avoid situations where any kids get no books, we distribute one book to each kid first.\n    remaining_books = 19 - 4  # we have 15 books left after giving 1 book to each kid\n\n    # We now use the \"stars and bars\" combinatorial method (n+k-1 choose k-1) to distribute the remaining books.\n    n = remaining_books\n    k = 4  # 4 kids\n\n    # Calculate the combinations using the factorial function\n    ways_to_divide = factorial(n + k - 1) // (factorial(k - 1) * factorial(n))\n\n    return ways_to_divide\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    term = 2\n    diff = 1\n    while term < 100:\n        diff += 1\n        term += diff\n    return term\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # This can be solved using the concept of stars and bars\n    # We have 6 identical pens and we want to distribute them into 3 distinct pencil cases\n    # The pens are the 'stars' and the dividers between pencil cases are the 'bars'\n    # For n pens and k pencil cases, the formula is (n-1)C(k-1)\n    # Here n = 6 and k = 3\n    # We need to find (6-1)C(3-1) = 5C2\n    # Using the factorial function from the math module\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    return combinations(5, 2)\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2*i+2)**2 - (2*i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Tank D is given as 41 liters\n    D = 41\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 5 * B)                # Tank A has 5 times as much water as Tank B\n    equation2 = Eq(B, C + 5)                # Tank B has 5 more liters of water than Tank C\n    equation3 = Eq(C + D, A)                # Water in Tank C + Tank D equals Tank A\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Obtain the amount of water in Tank B from the solutions\n    B_water = solutions[B]\n\n    return B_water\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b = number of motorbikes, t = number of tricycles, and v = number of vans\n    b, t, v = symbols('b t v')\n\n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, and each van has 4 wheels.\n    # The first equation is based on the total number of wheels.\n    equation1 = Eq(2*b + 3*t + 4*v, 101)\n\n    # The second equation represents the statement \"There are 35 more motorbike and van wheels than tricycle wheels.\"\n    equation2 = Eq(2*b + 4*v - 3*t, 35)\n\n    # The third equation represents the statement \"There are 13 more tricycle and van wheels than motorbike wheels.\"\n    equation3 = Eq(3*t + 4*v - 2*b, 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (b, t, v))\n\n    # The answer is how many more motorbikes than vans there are\n    return solutions[b] - solutions[v]\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    gallons_needed = order_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Pip and Bud are also in the line, so we add 2\n    total_people = people_in_front_of_pip + people_behind_bud + 2\n\n    return total_people\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coins = [200, 100, 50, 20, 10, 5, 2, 1] # pence\n    amount_to_pay = 44 # pence\n    smallest_number_of_coins = 0\n    remaining = 0\n\n    # Find the smallest coin to pay exactly without change\n    for coin in coins:\n        if coin == amount_to_pay:\n            smallest_number_of_coins = 1\n            return smallest_number_of_coins\n        elif coin < amount_to_pay:\n            remaining = coin\n            break\n            \n    # Now calculate the smallest number of coins including the change given by the bus driver\n    # as the driver has to give change, we start with the coin smaller than the one that could pay the fare exactly\n    smallest_number_of_coins += 1 # for her payment\n    amount_to_give_back = remaining - amount_to_pay\n\n    for coin in coins:\n        while amount_to_give_back >= coin:\n            amount_to_give_back -= coin\n            smallest_number_of_coins += 1\n    \n    return smallest_number_of_coins\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    fixed_numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total_numbers = 8\n    \n    # Calculate the sum of fixed numbers\n    sum_fixed = sum(fixed_numbers)\n    # Calculate sum of all numbers using the average\n    total_sum = total_numbers * average\n    # Sum of p and q\n    sum_p_q = total_sum - sum_fixed\n\n    # The highest fixed number is 9, and the lowest is 3\n    # Difference between highest and lowest is 6\n    highest_possible = 9 + 6\n    # Therefore, q cannot be larger than 15,\n    # and since p < q, p cannot be larger than 14\n\n    # Find the lowest possible value of q\n    for q in range(3, highest_possible + 1):\n        p = sum_p_q - q\n        if p < q and p >= 3:\n            return q\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    valid_dates = [\n        '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',\n        '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',\n        '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',\n        '31'\n    ]\n    \n    # February only has 28 days in 2014 (non-leap year), so remove '29', '30', '31'\n    valid_dates.remove('29')\n    valid_dates.remove('30')\n    valid_dates.remove('31')\n    \n    # Create the fixed part '2014' and the month '01' to '12'\n    for month in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']:\n        if month == '02':  # February special handling\n            valid_days = valid_dates[:-3]  # remove '29', '30', '31'\n        elif month in ['04', '06', '09', '11']:  # Months with 30 days\n            valid_days = valid_dates[:-1]  # remove '31'\n        else:  # Months with 31 days\n            valid_days = valid_dates[:]\n        \n        for day in valid_days:\n            date = '2014' + month + day\n            # Count the occurrences of 0, 1, and 2\n            zeros = date.count('0')\n            ones = date.count('1')\n            twos = date.count('2')\n            \n            # Check if 0, 1, and 2 appear the same number of times\n            if zeros == ones and ones == twos:\n                count += 1\n                  \n    return count\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60       # Adam's speed in km/h\n    jacob_speed = 80      # Jacob's speed in km/h\n\n    # Jacob reached home after 3 hours\n    jacob_distance = jacob_speed * 3\n\n    # Adam will take 3.5 hours to reach home\n    adam_distance = adam_speed * 3.5\n\n    # The total distance between their homes is the sum of the distances each travelled\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')  # Define the variable for the number of students who like both sports\n\n    # Create equations based on the given information\n    football_eq = Eq(3 * both, both + football_only)  # Football = both + football_only\n    basketball_eq = Eq(4 * both, both + basketball_only)  # Basketball = both + basketball_only\n    total_eq = Eq(both + football_only + basketball_only, 36)  # Total number of students = 36\n\n    # We can reduce the number of variables by expressing football_only and basketball_only\n    # in terms of both (since the other two equations relate them to both):\n    football_only = 3 * both - both\n    basketball_only = 4 * both - both\n\n    # Substitute these into the total equation and solve for both\n    total_eq_simplified = Eq(both + (3 * both - both) + (4 * both - both), 36)\n    solutions = solve(total_eq_simplified, both)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # Since 7, 11, and 13 are coprime, use Chinese Remainder Theorem\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 7), x ≡ 7 (mod 11), and x ≡ 9 (mod 13)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Find a solution to the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n\n    # Find the smallest five-digit number by adding multiples of the lcm to the remainder\n    smallest_five_digit_number = remainder\n    while smallest_five_digit_number < 10000:\n        smallest_five_digit_number += lcm\n\n    return smallest_five_digit_number\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    from sympy import divisors\n\n    ans = len(divisors(252))\n    return ans\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n\n    original_cost = paid_gst / gst_rate\n\n    return original_cost\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_mult(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n\n    result = custom_mult(custom_mult(custom_mult(1, 2), 3), 4)\n    final_result = custom_mult(result, 5)\n\n    return int(final_result)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using the Pigeonhole Principle: (total_cakes + total_layers - 1) // total_layers\n    most_cakes_in_layer = (total_cakes + total_layers - 1) // total_layers\n\n    return most_cakes_in_layer\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    total_g = (2.49 * kg_to_g) + 670 + (3 * kg_to_g) + 80\n    return total_g\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Pigeonhole principle: to guarantee 2 marbles of the same colour, \n    # Lucy should take out 1 more marble than the number of colors available.\n    num_colors = 2\n    marbles_per_color = 2  # This is not relevant for the pigeonhole principle,\n                           # we are interested in the worst case which is\n                           # guaranteed by the number of different colors\n\n    # To guarantee 2 marbles of the same color, Lucy must take out at least\n    # (num_colors - 1) * marbles_per_color + 1 marbles.\n    # Since the marbles_per_color is 2 and num_colors is 2, the formula simplifies to:\n    # (2 - 1) * 2 + 1 = 3\n\n    ans = (num_colors - 1) * marbles_per_color + 1\n    return ans\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # 1 hour = 60 minutes\n    cycling_time = total_time / 3\n    jogging_time = total_time - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    age = solve(equation, justin)\n    \n    return age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    first_term = 22\n    common_difference = 18 - 22\n    n = 2\n\n    next_term = n + common_difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    total_apples = 30\n    children = 6\n    max_apples = total_apples - children * (children - 1) // 2\n    return max_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sams_rate = 72.8\n    toms_extra_gallons = 6 + 3/4\n\n    sams_gallons = distance / sams_rate\n    toms_gallons = sams_gallons + toms_extra_gallons\n\n    toms_rate = distance / toms_gallons\n\n    return toms_rate\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_lap_time = 56\n    ben_lap_time = 80\n    charlie_lap_time = 105\n\n    least_common_multiple = lcm(ashley_lap_time, ben_lap_time, charlie_lap_time)\n    \n    # Time taken for all runners to meet at starting point in seconds\n    meet_time_seconds = least_common_multiple\n    \n    # Convert seconds to hours, minutes and seconds\n    hours, remainder = divmod(meet_time_seconds, 3600)\n    minutes, seconds = divmod(remainder, 60)\n\n    # Since they start at 10.00 a.m., we add the hours and minutes to the start time\n    start_hour = 10\n\n    meeting_hour = (start_hour + hours) % 24\n    meeting_minute = minutes\n    meeting_second = seconds\n    \n    # Format time as hh:mm:ss\n    meeting_time = f\"{meeting_hour:02d}:{meeting_minute:02d}:{meeting_second:02d}\"\n\n    return meeting_time\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    ans = 3017 + 4962\n    return ans\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart has to take out at least one M&M's chip of each color to ensure\n    # he has two chips of different colors.\n    # If Bart takes all of one color, which is the maximum of one color (5 brown),\n    # he still has to take at least one more of any other color to ensure he has two different colors.\n    # So the smallest number he has to take out is max(red, yellow, brown) + 1\n    red = 3\n    yellow = 4\n    brown = 5\n\n    ans = max(red, yellow, brown) + 1\n\n    return ans\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum(i**2 for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The given pattern is a geometric sequence where each term is \n    # multiplied by a common ratio to get the next term.\n    # To find the common ratio (r), we can divide the second term by the first term.\n    # 3 / 1 = 3\n    # Now we can find the missing term by multiplying the second term by the common ratio.\n    # missing term = 3 * 3 = 9\n    \n    missing_term = 3 * 3  # Calculate the third term using the common ratio\n    return missing_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert numbers from base 10 to base 7\n    num1_base7 = int(str(45), 7)\n    num2_base7 = int(str(66), 7)\n    \n    # Sum the numbers in base 7\n    sum_base7 = num1_base7 + num2_base7\n    \n    # Convert the sum back to base 7 string representation\n    ans = ''\n    while sum_base7:\n        ans = str(sum_base7 % 7) + ans\n        sum_base7 //= 7\n    \n    return ans if ans else '0'\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given sequence values for 7th, 8th and 9th positions\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    \n    # Calculate the common difference of the arithmetic sequence\n    # d = a(n) - a(n-1) => d = a8 - a7\n    d = a8 - a7\n    \n    # Calculate the first term using the 7th term and the common difference\n    # a1 = a7 - (n-1)*d => a1 = a7 - 6*d\n    a1 = a7 - 6*d\n    \n    # Find the 100th term using the formula: a(n) = a1 + (n-1)*d\n    # a100 = a1 + (100-1)*d\n    a100 = a1 + (100-1) * d\n    \n    return a100\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    number_of_rabbits = 8\n    number_of_days = 5\n\n    total_carrots = carrots_per_rabbit_per_day * number_of_rabbits * number_of_days\n\n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5 / 8) * 160\n    return ans\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Initial ratio of oranges to lemons is 3:5\n    equation1 = Eq(lemons * 3, oranges * 5)\n\n    # After selling 48 oranges, the ratio becomes 1:2\n    equation2 = Eq((oranges - 48) * 2, lemons)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # One horse eats a bale in 2 days, which is 1/2 (0.5) bale per day\n    horse_rate = 1 / 2\n    # One cow eats a bale in 3 days, which is 1/3 (approximately 0.3333) bale per day\n    cow_rate = 1 / 3\n    # One sheep eats a bale in 12 days, which is 1/12 (approximately 0.0833) bale per day\n    sheep_rate = 1 / 12\n\n    # All the animals combined eat this amount of bales per day\n    total_rate = horse_rate + cow_rate + sheep_rate\n\n    # There are 22 bales of hay\n    total_bales = 22\n\n    # To find the number of days the bales will last, we divide the total bales by the total rate\n    days = total_bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef count_valid_dates(perm):\n    count = 0\n    for p in perm:\n        year = \"2014\"\n        month = str(p[0]) + str(p[1])\n        day = str(p[2]) + str(p[3])\n        \n        if int(month) > 12 or int(month) == 0:\n            continue\n        if int(day) > 31 or int(day) == 0:\n            continue\n            \n        if month in [\"04\", \"06\", \"09\", \"11\"] and int(day) > 30:\n            continue\n        if month == \"02\":\n            if int(day) > 28:\n                continue\n        \n        count += 1\n    return count\n\ndef solution():\n    digits = '001122'\n    perm = set(permutations(digits, 4))\n    ans = count_valid_dates(perm)\n    return ans\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Maximum number of apples to pick to be sure that no red apples are picked:\n    max_non_red = 11 + 7  # 11 green and 7 yellow\n    # To make sure she gets 3 red apples, she needs to pick one more than the non-red:\n    min_pick_to_get_3_red = max_non_red + 3  # 3 red apples\n\n    return min_pick_to_get_3_red\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_amount = 200\n    final_amount = 204\n    percentage_change = ((final_amount - initial_amount) / initial_amount) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let m be the mother's current age, and d be the daughter's current age.\n    # Based on the information given:\n    # m - d = d - 3 (when the mother was the daughter's current age, the daughter was 3)\n    # When the daughter reaches the mother's current age (m), the mother will be 75:\n    # m + (m - d) = 75\n    \n    # Combining the two equations, we have:\n    # m - d = d - 3 \n    # This simplifies to:\n    # m - 2d = -3 ... (1)\n    \n    # And\n    # 2m - d = 75 ... (2)\n    \n    # Now solve the system of equations (1) and (2) to find m, the mother's current age.\n    # Multiplying equation (1) by 2, we get:\n    # 2m - 4d = -6 ... (3)\n    \n    # Subtract equation (3) from equation (2):\n    # (2m - d) - (2m - 4d) = 75 - (-6)\n    # 3d = 81\n    # d = 81 / 3\n    d = 81 // 3\n    \n    # Now find the mother's age using equation (1):\n    # m - 2d = -3\n    # m = 2d - 3\n    m = 2 * d - 3\n    \n    return m\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80\n    money_saved = total_spent / (1 - discount)\n    return money_saved - total_spent\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Calculate the maximum possible number of left-handed girls.\n    left_handed_girls = girls - (total_pupils - right_handed)\n\n    # Calculate the smallest number of right-handed girls.\n    # If the number of left-handed girls is negative, it means all girls are right-handed.\n    right_handed_girls = max(girls - left_handed_girls, girls)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n\n    minibuses_needed = -(-children // minibus_capacity)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since we want the worst-case scenario, we have to consider the case where Jane picks all marbles of the same color first.\n    # The most Jane could draw of the same color without getting all four colors is all but one of the three most plentiful, plus all of the least plentiful.\n    # Hence, we will add the three largest counts and then add 1 to ensure we get the fourth color.\n  \n    # counts of marbles for each color\n    red_marbles = 4\n    green_marbles = 7\n    blue_marbles = 6\n    orange_marbles = 2\n    \n    # sort the counts in ascending order\n    counts = sorted([red_marbles, green_marbles, blue_marbles, orange_marbles])\n    \n    # sum of the highest three counts\n    highest_three = sum(counts[1:])\n    \n    # adding 1 to the sum of highest three to get the last color for sure\n    min_draw = highest_three + 1\n    \n    return min_draw\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # Number of teams\n    n = 6\n    \n    # Total games played in a single round-robin tournament for n teams\n    # is given by \"Combination of n teams taken 2 at a time\"\n    total_games = (n * (n - 1)) // 2\n    \n    # In each game, if there is a winner and a loser, 2 points are given\n    # However, if the game is a tie, 2 points are still given (1 point each)\n    # Hence, each game always contributes 2 points in total\n\n    # Therefore, the point total of all six teams is:\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] # All primes less than 41\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    num_zeros = 0\n    factor_5 = 0\n\n    # The number of zeros in a factorial is determined by the number of times it can be divided by 10,\n    # which breaks down further to the number of pairs of 2 and 5 factors, as 10 = 2 * 5.\n    # Since there are always more 2s than 5s, we just need to count the number of 5s.\n    while num_zeros < 28:\n        n += 1\n        # Factorize current number n to count how many times it can be divided by 5\n        k = n\n        while k % 5 == 0:\n            factor_5 += 1\n            k //= 5\n        num_zeros = factor_5\n\n    return n\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys = symbols('girls boys')\n\n    # The first equation based on the total pupils in the school\n    equation1 = Eq(girls + boys, 1690)\n\n    # The second equation based on the number of boys being 90 more than girls\n    equation2 = Eq(boys - girls, 90)\n\n    # Solve for the number of girls and boys\n    pupils = solve((equation1, equation2), (girls, boys))\n\n    # Store the number of girls and boys from the solutions\n    num_girls = pupils[girls]\n    num_boys = pupils[boys]\n\n    # Calculate the number of girls who can swim and who cannot\n    girls_can_swim = (31/80) * num_girls\n    girls_cannot_swim = (49/80) * num_girls\n\n    # Calculate the number of boys who can swim and who cannot\n    boys_cannot_swim = (num_boys / 2) + 60\n    boys_can_swim = (num_boys / 2) - 60\n\n    # Calculate the total number of pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Cost per piece for 4pc at $7\n    cost_per_piece_4pc = 7 / 4\n    # Cost per piece for 6pc at $8.5\n    cost_per_piece_6pc = 8.5 / 6\n    \n    # Comparing the cost per piece to determine the better buy\n    if cost_per_piece_4pc < cost_per_piece_6pc:\n        ans = \"4pc\"\n    else:\n        ans = \"6pc\"\n    \n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    remaining_after_phone = 1 - (1/5)\n    remaining_after_rent = 1 - 0.75\n\n    salary = 740 / (remaining_after_phone * remaining_after_rent)\n\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    # Initial condition for weight with 5 apples\n    weight_with_5_apples = 580\n    \n    # Weight with 2 apples left in the basket\n    weight_with_2_apples = 280\n    \n    # Calculating the weight of the basket by subtracting \n    # the weight of 3 apples from the total weight difference\n    weight_of_basket = weight_with_2_apples - (weight_with_5_apples - weight_with_2_apples)\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 3, 4]\n    all_possible_numbers = set()\n    \n    for r in range(1, len(digits) + 1):\n        for number_tuple in permutations(digits, r):\n            number = int(\"\".join(map(str, number_tuple)))\n            all_possible_numbers.add(number)\n    \n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # Each die has 6 faces, so there are a total of 6 * 6 = 36 possible outcomes.\n    total_outcomes = 6 * 6\n    \n    # Outcomes where the sum is greater than 10: (5, 6), (6, 5), (6, 6), so just 3 outcomes.\n    favorable_outcomes = 3\n    \n    # Probability of getting a sum greater than 10\n    probability = favorable_outcomes / total_outcomes\n    \n    # Expected winnings per game: £10 * probability of winning\n    expected_winnings_per_game = 10 * probability\n    \n    # Expected loss per game: the cost of the game - expected winnings\n    expected_loss_per_game = 1 - expected_winnings_per_game\n    \n    # Total expected loss over 60 games\n    total_expected_loss = 60 * expected_loss_per_game\n    \n    return total_expected_loss\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100\n    original_amount = remaining_after_class * 2\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money both Lynn and Mary had at first\n    x = symbols('x')\n\n    # After Lynn spent $160, she has x - 160 left\n    lynn_left = x - 160\n\n    # After Mary spent $58, she has x - 58 left, which is also thrice as much as Lynn has left\n    mary_left = x - 58\n\n    equation = Eq(mary_left, 3 * lynn_left)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Calculate the amount of money left with Lynn\n    lynn_money_left = solutions[0] - 160\n\n    return lynn_money_left\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Convert the starting time to minutes past midnight\n    start_time = 2 * 60 + 31 # The time is 02:31\n\n    # Initialize the counter for minutes and the current time variable\n    minutes = 0\n    current_time = start_time\n\n    # Loop until all digits are found together in the current time\n    while True:\n        # Increment the current time by one minute\n        current_time += 1\n        minutes += 1\n        \n        # Roll over the time if it goes past 23:59 (1439 minutes)\n        if current_time >= 24 * 60:\n            current_time = 0\n\n        # Get the hours and minutes from the current_time\n        hours = current_time // 60\n        mins = current_time % 60\n\n        # Create a string representation of the current time, ensuring two digits for hours and minutes\n        time_str = f\"{hours:02d}{mins:02d}\"\n\n        # Check if all the required digits are present in the time string\n        if all(digit in time_str for digit in \"0123\"):\n            return minutes\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    bag_weight = 3/4\n\n    number_of_bags = remaining_after_tuesday / bag_weight\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    sold_percentage = 60 / 100\n    unsold_tickets = 28\n\n    total_tickets = unsold_tickets / (1 - sold_percentage)\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # since the remainder is non-zero, the divisor must be at least one more than the quotient\n\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64-62, 60-58, 56-54, 52-50, 48-46, 44])\n    return ans\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deivi, jerry = symbols('deivi jerry')\n\n    equation1 = Eq(deivi, jerry + 8)\n    equation2 = Eq((deivi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deivi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    return (41 + 4) / 5\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n\n    num_jugs = -(-total_juice_ml // jug_capacity_ml) # Ceiling division to get least number of jugs\n\n    return num_jugs\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Serene saw the tens place as 5 instead of 3,\n    # and the ones place as 3 instead of 2.\n    # Let's denote the original number as 10a + b\n    # The incorrect number then is 10(a+2) + (b+1)\n    # The difference reported is 36\n    # So: (10a + b) - (10(a+2) + (b+1)) = 36\n    # Now we find the correct difference: (10a + b) - (10(a+2-2) + (b+1-1)) = ?\n    # Correcting the mistake means deducting 20 from the tens place and adding 1 to the ones place\n\n    # The reported incorrect difference:\n    incorrect_diff = 36\n    \n    # Correct the tens place mistake: add 20 (because subtrahend was understated by 20)\n    # Correct the ones place mistake: subtract 1 (because subtrahend was overstated by 1)\n    correct_diff = incorrect_diff + 20 - 1\n    \n    return correct_diff\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1\n    target_percentage = 0.90\n    blue_balls = 1\n\n    # x is the number of red balls to be removed\n    # After removing x red balls, the number of red balls remaining will be 49 - x\n    # We want the remaining red balls to be 90% of the total number of balls in the bag\n    # So we solve for x in the equation: (49 - x) / (total_balls - x) = 0.90\n\n    # Calculate the number of red balls that should be removed\n    x = (49 - target_percentage * total_balls) / (1 - target_percentage)\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "from math import factorial\n\ndef solution():\n    ans = sum(factorial(100) // (factorial(97) * factorial(3+i) * factorial(i)) for i in range(0, 98))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    total_matches = 220\n\n    weight_of_matches_only = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_matches_only / total_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let cows = c and birds = b\n    c, b = symbols('c b')\n    \n    # Each cow has 4 legs and each bird has 2 legs\n    # Total animals\n    equation1 = Eq(c + b, 1300)\n    \n    # Total legs\n    equation2 = Eq(4*c + 2*b, 3440)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    # Iterate through the possible 3-digit odd numbers that are divisible by 9\n    for num in range(999, 100, -9):\n        if int(str(num)[1]) % 4 == 0 and num % 2 != 0:\n            # We found the largest number according to the given conditions\n            max_number = num\n            break\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let x be the number of pens Ben has at first\n    # Jenny gives Ben 28 pens, so Jenny will have 83 - 28 pens left\n    # After giving the pens, Jenny and Ben have the same number, so we set up the equation:\n    # 83 - 28 = x + 28\n    # Solve for x\n    x = (83 - 28) - 28\n    return x\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 // 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_distance = 2 * (21 - 1)  # Total distance in meters between the first and the last tree\n    distance_between_lamps = 10    # Distance between lamp posts in meters\n\n    number_of_lamp_posts = (total_distance // distance_between_lamps) + 1\n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    return 15.05 - 14.84\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the cost of one laptop and one DVD player\n    laptop_cost, dvd_cost = symbols('laptop_cost dvd_cost')\n    \n    # Set up the equations based on the problem statement\n    equation1 = laptop_cost * 5 + dvd_cost * 4 - 14438\n    equation2 = laptop_cost + dvd_cost - 2960\n    \n    # Solve the system of equations\n    solved_values = solve((equation1, equation2), (laptop_cost, dvd_cost))\n    \n    # Return the cost of each DVD player\n    return solved_values[dvd_cost]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    return sizes * colors\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    import math\n\n    m1 = 500  # mass of car 1 in kg\n    m2 = 500  # mass of car 2 in kg\n    v1_initial = 20  # initial velocity of car 1 in m/s (north)\n    v2_initial = 30  # initial velocity of car 2 in m/s (west)\n\n    # Using conservation of momentum since the collision is inelastic\n    # Total momentum before collision\n    p1_initial = m1 * v1_initial  # car 1 momentum\n    p2_initial = m2 * v2_initial  # car 2 momentum\n\n    # Assume north is the positive y-direction and west is the negative x-direction\n    # After collision, the total momentum must be conserved on both axes\n    # p_total_x = m1 * v1_x + m2 * v2_x = 0 + (-m2 * v2_initial) because car 1 has no initial x velocity\n    # p_total_y = m1 * v1_y + m2 * v2_y = (m1 * v1_initial) + 0 because car 2 has no initial y velocity\n\n    # Total mass after collision\n    m_total = m1 + m2\n\n    # Combine the cars' mass and initial velocity for final velocity using vector components\n    # P_total_x = (m_total) * v_final_x\n    # P_total_y = (m_total) * v_final_y\n    # Using symbols from sympy to solve the final velocities\n    v_final_x, v_final_y = symbols('v_final_x v_final_y')\n\n    equation1 = Eq(m_total * v_final_x, -p2_initial)\n    equation2 = Eq(m_total * v_final_y, p1_initial)\n\n    solutions = solve((equation1, equation2), (v_final_x, v_final_y))\n\n    # Calculate the magnitude of the final velocity vector\n    v_final_magnitude = math.sqrt(solutions[v_final_x]**2 + solutions[v_final_y]**2)\n\n    # Calculate the direction of the final velocity vector in degrees\n    theta_final = math.degrees(math.atan2(solutions[v_final_y], solutions[v_final_x]))\n\n    return (v_final_magnitude, theta_final)\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        square, circle, triangle = p\n        if triangle == 0:  # a triangle cannot be 0 because it's in the hundreds place\n            continue\n        sum1 = 100 * square + 10 * circle + triangle\n        sum2 = 11 * (10 * circle + triangle)\n        if sum1 == sum2:\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial average weight\n    # Let n be the initial number of people in the group\n    x, n = symbols('x n')\n\n    # Equation to represent the new average after Aaron joined\n    equation1 = Eq(((n * x) + 45) / (n + 1), 61)\n\n    # Equation to represent the new average after Ben joined\n    equation2 = Eq(((n * x) + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Return the initial average weight\n    return solutions[x]\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    full_patterns = 2000 // pattern_length\n    partial_pattern = 2000 % pattern_length\n    sum_full_patterns = sum(range(1, pattern_length + 1)) * full_patterns\n    sum_partial_pattern = sum(range(1, partial_pattern + 1))\n\n    return sum_full_patterns + sum_partial_pattern\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15  # £5.15\n    coffee_cost = 3.69  # £3.69\n    milk_cost = 0.89  # 89p is £0.89\n\n    sugar_cost = total_paid - (coffee_cost + milk_cost)  # Calculate the cost of the bag of sugar\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    sum_of_pairs = (2.3 + 9.7) + (5.2 - 2.2)\n    return sum_of_pairs\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n\n    oranges_weight = 4.1\n    mangoes_weight = 2\n\n    total_cost = (oranges_weight * orange_price_per_kg) + (mangoes_weight * mango_price_per_kg)\n\n    return total_cost\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario for getting 3 balls of each color\n    # is taking all the balls except three of the color of which there are most.\n    # Then, the next ball she takes out must be the fourth ball of the same color.\n    blue = 5\n    orange = 4\n    yellow = 2\n\n    # Take out all but three blue balls\n    # This ensures that even if she takes out all of the other balls,\n    # the next ball she takes must be blue to make it four of the same color.\n    # This strategy will give us the worst case scenario.\n    total_balls = blue + orange + yellow\n    balls_to_leave = blue - 3\n\n    # Number of balls she must take out to ensure 4 balls of the same color\n    balls_to_take = total_balls - balls_to_leave\n\n    return balls_to_take\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # include 'a' in the count.\n\n    sum_without_a = sum(numbers)\n    sum_with_a = mean_value * total_numbers\n\n    a = sum_with_a - sum_without_a\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    total_work = 1  # Considering the total work as a unity\n    a_rate = 1 / 15  # A can complete the job in 15 days\n    b_rate = 1 / 10  # B can complete the job in 10 days\n\n    work_done = 4 * (a_rate + b_rate)  # Work done by A and B together in 4 days\n    remaining_work = total_work - work_done\n    days_for_b_to_finish = remaining_work / b_rate  # days for B to finish the remaining work\n\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    discount_amount = original_price - reduced_price\n    discount_percentage = (discount_amount / original_price) * 100\n\n    return discount_percentage\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    \n    # Find the least number of test tubes by calculating the log base 2 of the number of bottles\n    # and ceiling to get the next whole number.\n    num_bottles = 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first part 1+2+3...+13\n    n = 13\n    sum_first_part = n * (n + 1) // 2\n    \n    # Calculate the sum of the second part 13+12+...+1 (same as first part)\n    sum_second_part = sum_first_part\n    \n    # Subtract the repeated 13 at the juncture of the two parts\n    ans = sum_first_part + sum_second_part - 13\n    \n    return ans\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Find the smallest three-digit number that leaves a remainder of 1 when divided by 5, 6, and 7\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    # Ensure the number found is a three-digit number\n    while smallest_number < 100:\n        smallest_number += 5 * 6 * 7\n\n    return smallest_number\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    # Start with a square of side length 1 (which will be a boy) and keep adding layers\n    boys, girls = 1, 0\n    side_length = 1\n    while True:\n        side_length += 2  # Increase the side of the square by 2 to add a new layer of boys and a new layer of girls\n        boys_in_layer = side_length * 4 - 4  # Calculate the number of boys in the new outer layer\n        girls_in_layer = (side_length - 2) * 4\n        \n        if boys - girls + boys_in_layer - girls_in_layer == total_diff:\n            # If the difference between boys and girls matches the given difference, return total\n            return boys + girls + boys_in_layer + girls_in_layer\n        \n        # Update the total number of boys and girls\n        boys += boys_in_layer\n        girls += girls_in_layer\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducks and geese have 2 legs each, lambs have 4 legs.\n    total_legs = 36\n    duck_legs = 4 * 2\n    geese_legs = 2 * 2\n    remaining_legs = total_legs - (duck_legs + geese_legs)\n    # Each lamb has 4 legs\n    num_lambs = remaining_legs // 4\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres (1 litre = 1000 millilitres)\n    return n\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid = 17\n    last_kid = 150\n    difference = 7\n\n    num_kids = ((last_kid - first_kid) / difference) + 1\n\n    return int(num_kids)\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, he ate 1/4 of the remaining number of sweets.\n    before_day_4 = remaining_sweets / (1 - 1/4)\n\n    # On the third day, he ate 1/5 of the remaining number of sweets.\n    before_day_3 = before_day_4 / (1 - 1/5)\n\n    # On the second day, he ate 1/6 of the remaining number of sweets.\n    before_day_2 = before_day_3 / (1 - 1/6)\n\n    # On the first day, he ate 1/7 of the number of sweets.\n    initial_sweets = before_day_2 / (1 - 1/7)\n\n    return initial_sweets\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Charlene originally had.\n    x = symbols('x')\n\n    # Charlene kept 1/2 of the cookies plus 8, so she gave away (1/2)x + 8.\n    # Emerald received the remaining cookies: x - ((1/2)x + 8).\n    # Of those, Emerald ate 1/3 plus 4.\n    # Hebe thus received (2/3)(x - ((1/2)x + 8)) - 4.\n\n    # Hebe ate 1/4 of the cookies she received, and had 42 left: \n    # (3/4)( (2/3)(x - ((1/2)x + 8)) - 4 ) = 42\n\n    # Solve the equation to find x.\n    equation = Eq((3/4) * ( (2/3) * (x - ((1/2)*x + 8)) - 4), 42)\n\n    # Solving the equation for x.\n    solution = solve(equation, x)\n\n    # There could be more than one solution, but we assume Charlene can't have a negative or non-integer number of cookies.\n    # Thus, we take the positive integer solution.\n    return solution[0]\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teams = symbols('teams')\n    # Number of matches is equal to combination of the number of teams taken 2 at a time, \n    # multiplied by 2 because each team plays twice\n    matches_eq = Eq(teams * (teams - 1), 30 * 2)\n\n    solutions = solve(matches_eq, teams)\n\n    # Filtering positive and real solutions as number of teams cannot be negative or complex\n    ans = [s for s in solutions if s.is_real and s > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    sets_per_day = sets_made_in_5_days / 5\n    remaining_sets = total_sets_needed - sets_made_in_5_days\n    days_to_complete = remaining_sets / sets_per_day\n    total_days = days_to_complete + 5\n    return int(total_days)\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for three numbers\n    first, second, third = symbols('first second third')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    # Number of ways to reach the 5th step\n    ways_to_5th_step = fibonacci(5)\n    # Number of ways to reach the top from the 5th step\n    ways_from_5th_to_top = fibonacci(6)  # 10 - 5 + 1\n\n    # Total number of different ways\n    total_ways = ways_to_5th_step * ways_from_5th_to_top\n    return total_ways\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    number = 2*2*2*3*8*5*5*25\n    zeros_count = 0\n    \n    while number % 10 == 0:\n        zeros_count += 1\n        number //= 10\n        \n    return zeros_count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # 7^2=49 which is the only square number between 40 and 50\n        n = i ** 2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150  # ml\n    cup_water = 40       # ml\n    cups_poured = 3\n    water_used = cup_water * cups_poured\n\n    water_left = initial_water - water_used\n    return water_left\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from math import factorial\n    # Start by finding the closest factorial less than 3024\n    n = 1\n    while factorial(n) < 3024:\n        n += 1 \n    n -= 1 # Deduct 1 because we are looking for the closest factorial less than 3024\n\n    # Now we know that 3024 is between n! and (n+1)!\n    for i in range(1, n):\n        if factorial(n) // i == 3024:\n            # We found the consecutive numbers starting from i and ending at n\n            return n # The largest number\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of a notebook, y the cost of a pencil case, and z the cost of an eraser.\n    x, y, z = symbols('x y z')\n\n    # Equation 1: 3x + 4y + 5z = 50 (Total cost)\n    eq1 = Eq(3*x + 4*y + 5*z, 50)\n\n    # Equation 2: x + y = 6 (Cost of a notebook and a pencil case)\n    eq2 = Eq(x + y, 6)\n\n    # Equation 3: y + z = 8 (Cost of a pencil case and an eraser)\n    eq3 = Eq(y + z, 8)\n\n    # Solving the system of equations for x, y, and z\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # The cost of a pencil case is represented by y\n    return solutions[y]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, their total age will be 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alan, bob = symbols('alan bob')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(bob, alan + 15)          # Bob has 15 more cards than Alan\n    equation2 = Eq(bob + 25, 3*alan)        # After Colin gives Bob 25 cards, Bob has 3 times as many cards as Alan\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Alan's number of cards is what we want to find\n    return solutions[alan]\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    # Total students\n    students = 10\n    # Each student will shake hands with all other students once\n    handshakes = students * (students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple of pack sizes will give\n    # us the number of markers in the minimal situation \n    # where he has an equal number of each pack\n    pack_sizes = [6, 8, 9, 15]\n    lcm_pack_sizes = lcm(*pack_sizes)\n    \n    # Calculate the least number of marker packs needed\n    least_number_of_markers = 1000\n    packs = least_number_of_markers // lcm_pack_sizes\n    if least_number_of_markers % lcm_pack_sizes != 0:\n        packs += 1\n    \n    # Multiply with the LCM to get the total marker count\n    total_markers = packs * lcm_pack_sizes\n\n    # Calculate the least number of packs needed\n    markers_per_pack = lcm_pack_sizes // 6  # Since each type has the same number of packs, we can divide by any pack size\n\n    # The number of packs is the total markers divided by markers per pack\n    packs = total_markers // markers_per_pack\n\n    return packs\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total = Eq(anne + maria, 44)\n\n    ans = solve(total, anne)[0]\n    return ans\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    \n    more_pounds_in_morning = morning_fruit - afternoon_fruit\n    \n    return more_pounds_in_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange = 10\n    orange_to_water_ratio = 2 / 25\n    water = (orange / orange_to_water_ratio)\n    \n    return water\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals into fractions\n    def convert_recurring_to_fraction(non_recurring, recurring):\n        non_recurring_length = len(non_recurring)\n        recurring_length = len(recurring)\n\n        numerator = int(non_recurring + recurring) - int(non_recurring)\n        denominator = (10 ** (non_recurring_length + recurring_length) -\n                      10 ** non_recurring_length)\n\n        return numerator, denominator\n\n    # Get fractions for both decimals\n    fraction1_numerator, fraction1_denominator = convert_recurring_to_fraction('0119925', '17')\n    fraction2_numerator, fraction2_denominator = convert_recurring_to_fraction('23456', '7')\n\n    # Check each digit\n    n = 1\n    while True:\n        digit_fraction1 = (fraction1_numerator * 10**n) // fraction1_denominator % 10\n        digit_fraction2 = (fraction2_numerator * 10**n) // fraction2_denominator % 10\n\n        # Check if both digits are 7\n        if digit_fraction1 == digit_fraction2 == 7:\n            return n\n        \n        n += 1\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    num_judges = 5\n\n    sum_scores = sum(scores)\n    required_sum = target_average * num_judges\n    final_judge_score = required_sum - sum_scores\n\n    return final_judge_score\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    total_interest = 816\n    # interest for two years, so we divide by 2 to get the annual interest\n    annual_interest = total_interest / 2  \n    interest_rate = (annual_interest / principal) * 100  # convert to percentage\n    return interest_rate\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Setup the equation: OriginalNumber * 2 + 7 = 43\n    # Solve for OriginalNumber: (43 - 7) / 2\n    original_number = (43 - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's calculation\n    johnny_multiplication = quotient * remainder\n    johnny_addition = johnny_multiplication + divisor\n    johnny_answer = johnny_addition\n\n    # Correct calculation, original number is (quotient * divisor) + remainder\n    correct_answer = (quotient * divisor) + remainder\n\n    # Check if Johnny's answer is correct\n    if johnny_answer == correct_answer:\n        is_correct = True\n    else:\n        is_correct = False\n\n    # Returning the correct calculation\n    return is_correct, correct_answer\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for speeds of Peter and Hannah\n    peter_speed, hannah_speed = symbols('peter_speed hannah_speed')\n\n    # Given the speed of Peter is 15cm/s faster than the speed of Hannah\n    equation1 = Eq(peter_speed, hannah_speed + 15)\n\n    # Given ratio of time taken (inverse of speed ratio), thus the ratio of speeds = 4:3\n    equation2 = Eq(peter_speed / hannah_speed, 4 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (peter_speed, hannah_speed))\n\n    return solutions[hannah_speed]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blank = 35\n\n    time_remaining = total_time - (time_spent_multiple_choices + time_spent_fill_in_the_blank)\n\n    return time_remaining\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Let's denote the difference in the number of pages read each day as 'd'.\n    # Total pages read is an arithmetic series with the first term a_1 = 30 pages, the last term a_n = 70 pages.\n    # So the sum of an arithmetic series is S_n = n/2 * (a_1 + a_n), where S_n is the total number of pages, which is 550.\n    # We need to calculate 'd' and 'n', but we have only one equation involving them.\n    # However, we know another property of an arithmetic series: a_n = a_1 + (n - 1) * d.\n    # Using both properties, we can create a system of equations and solve for 'd'.\n    \n    # 'n' is the number of days, 'd' is the additional pages read each day, 'a_1' the first day pages, 'a_n' is the last day pages, and 'S_n' is the total pages.\n    a_1 = 30\n    a_n = 70\n    S_n = 550\n    \n    # a_n = a_1 + (n -1)*d, from this equation we can express 'n' as: n = (a_n - a_1)/d + 1  - (1)\n    # Also, S_n = n/2 * (a_1 + a_n)\n    # Let's plug the value of 'n' from equation (1) into the sum equation S_n:\n    # S_n = ((a_n - a_1)/d + 1)/2 * (a_1 + a_n)\n    \n    # Now, we need to solve for 'd' by rearranging the equation:\n    # 2*S_n = ((a_n - a_1)/d + 1) * (a_1 + a_n)\n    # 2*S_n = (a_n - a_1 + d) * (a_1 + a_n) / d\n    # Now we have to isolate 'd' and solve the equation!\n    \n    # Multiplying both sides by 'd' and then expanding the equation:\n    # 2*S_n*d = (a_n^2 - a_1^2 + d*(a_1 + a_n))\n    # Rearranging to get a quadratic equation in terms of 'd':\n    # (a_1 + a_n)*d^2 - (a_n^2 - a_1^2 - 2*S_n)d = 0\n    \n    # We only care about the positive root, because 'd' cannot be negative in this context\n    # Since the coefficient of d^2 is (a_1 + a_n) and it's much smaller than S_n, we can ignore the d^2 term to simplify our calculation.\n    # That leaves us with:  \n    # -(a_n^2 - a_1^2)d + 2*S_n*d = 0\n    # (2*S_n - (a_n^2 - a_1^2))*d = 0\n    # Solving for 'd':\n    d = (a_n**2 - a_1**2) / (2 * (S_n - (a_1 + a_n)/2))\n    \n    return d\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # speed of the train in meters per second\n    time_to_cross = 45  # time to cross the tunnel in seconds\n    train_length = 850  # length of the train in meters\n\n    # distance = speed * time\n    distance_covered = train_speed * time_to_cross\n\n    # length of the tunnel = distance covered - length of the train\n    tunnel_length = distance_covered - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # The maximum number of parts created by n circles is given by the formula:\n    # parts = n^2 + n + 1\n    # Adding a line can intersect all the parts created by the circles, therefore dividing each region in two.\n    parts_from_circles = circles**2 + circles + 1\n    # Each circle is intersected by the line in at most 2 more points, which adds 2*n more parts\n    parts_from_line = 2 * circles\n    max_parts = parts_from_circles + parts_from_line\n    return max_parts\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of coins Owen had.\n    # Let y be the initial number of one-dollar coins Owen had.\n    x, y = symbols('x y')\n\n    # According to the problem, (2/7) of his coins were fifty-cent coins.\n    # Then (5/7) of his coins were one-dollar coins.\n    # x = initial total number of coins = initial number of fifty-cent coins + initial number of one-dollar coins\n    # (2/7)x = initial number of fifty-cent coins\n    # (5/7)x = initial number of one-dollar coins = y\n    equation1 = Eq((5/7)*x, y)\n\n    # His mother gave him 10 one-dollar coins and 10 (since 5 dollars worth) fifty-cent coins.\n    # So the new count of one-dollar coins is y+10\n    # and the new count of fifty-cent coins is (2/7)*x + 10\n\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins.\n    equation2 = Eq(y + 10, 2*((2/7)*x + 10))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want the number of coins Owen had initially, which is x.\n    return solutions[x]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from itertools import permutations\n\n    # There are 4 possibilities for each person to enter through any entrance\n    total_entrances = 4\n    \n    # Joe has 4 options\n    # Mike has 3 options (cannot use the same entrance as Joe)\n    # Tina has 3 options (one entrance is used by Joe and one by Mike)\n    # The order in which they enter is uncertain, consider all permutations of Joe, Mike, and Tina\n    # which is 3! (since there are 3 people)\n    \n    ways = total_entrances * (total_entrances - 1) * (total_entrances - 1) * len(list(permutations([1, 2, 3])))\n    \n    return ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n\n    # Let the amount spent on transportation be x.\n    # Then the amount spent on food is 2x.\n    # Hence, x + 2x = spent_money.\n    # Which means, 3x = spent_money.\n    # So, x = spent_money / 3.\n\n    transportation_money = spent_money / 3\n    food_money = 2 * transportation_money\n\n    return food_money\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    first_tons = 3\n    first_tons_rate = 4\n    additional_ton_rate = 3\n    fixed_service_fee = 4\n    total_amount = 109\n    \n    # Calculate the total cost of the first 3 tons\n    cost_first_tons = first_tons * first_tons_rate + fixed_service_fee\n    \n    # Calculate the remaining amount for additional tons\n    remaining_amount = total_amount - cost_first_tons\n    \n    # Calculate the number of additional tons she can use\n    additional_tons = remaining_amount / additional_ton_rate\n    \n    # The total number of tons is the sum of the first tons and additional tons\n    total_tons = first_tons + additional_tons\n    \n    return int(total_tons)\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = (quotient * smallest_divisor) + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n  \n    equation1 = Eq(bala, amelia / 2 + carl + daniel)\n    equation2 = Eq(carl, (3 / 4) * (amelia + bala + daniel))\n    equation3 = Eq(amelia + bala + carl + daniel, 6230)\n    equation4 = Eq(bala, daniel + 320)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    quick_rate, lazy_rate = symbols('quick_rate lazy_rate')\n\n    # quick gardener's work rate\n    equation1 = Eq(quick_rate, 1 / 12)\n\n    # combined work rate of both gardeners to mow the lawn\n    equation2 = Eq(quick_rate + lazy_rate, 1 / 8)\n\n    solutions = solve((equation1, equation2), (quick_rate, lazy_rate))\n\n    lazy_gardener_time = 1 / solutions[lazy_rate]\n\n    return lazy_gardener_time\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    eve_candy = 12\n    alice_candy = 9\n    irene_candy = 0\n    total_candy = eve_candy + alice_candy + irene_candy\n    number_of_girls = 3\n    \n    each_girl_candy = total_candy // number_of_girls\n    \n    return each_girl_candy\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belinda, matthew = symbols('belinda matthew')\n\n    equation1 = Eq(belinda - 7, matthew)\n    equation2 = Eq(belinda, 36)\n\n    solutions = solve((equation1, equation2), (belinda, matthew))\n\n    return solutions[matthew]\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_money = 182\n    dress_price = 5\n    skirt_price = 3\n    remaining_money = 5 * x\n\n    equation = Eq(total_money, x * dress_price + x * skirt_price + remaining_money)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    # Define the interval for green line and red line\n    green_line_interval = 5  # in minutes\n    red_line_interval = 6    # in minutes\n\n    # Find the least common multiple (LCM) of the two intervals\n    lcm = (green_line_interval * red_line_interval) // gcd(green_line_interval, red_line_interval)\n\n    # Calculate the hours and minutes\n    hours = 5 + lcm // 60\n    minutes = lcm % 60\n\n    return f\"{hours}:{str(minutes).zfill(2)} AM\"\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug_ml = jug_capacity_ml / 2\n    cup_capacity_ml = half_jug_ml / 3\n    return cup_capacity_ml\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2  # The first term is simply 1 * 2.\n    # The pattern starts from 3 and skips every other number until 13, then adds 14 at the end.\n    for i in range(3, 14, 2):\n        ans *= i\n    ans *= 14  # Multiply by the last term in the sequence\n    return ans\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3\n    time_to_101th_tree = 3 * 60  # converting minutes to seconds\n    number_of_trees_to_home = 101\n\n    # Calculate the total distance Olivia walks from the first tree to the 101th tree\n    distance_to_101th_tree = distance_per_tree * (number_of_trees_to_home - 1)\n    \n    # Calculate Olivia's walking speed (meters per second)\n    walking_speed = distance_to_101th_tree / time_to_101th_tree\n    \n    # Calculate the time (in seconds) it takes for her to walk to school\n    time_to_school = 4000 / walking_speed\n    \n    # Convert time from seconds to minutes\n    time_to_school_mins = time_to_school / 60\n    \n    return time_to_school_mins\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # The formula for the sum of squares of the first n natural numbers is n(n + 1)(2n + 1) / 6\n    # Our series is 4^2, 8^2, 12^2, ..., 124^2 which is (2^2)*1^2, (2^2)*2^2, (2^2)*3^2, ..., (2^2)*31^2\n    # This is 4 times the sum of squares of the first 31 numbers (because 124 / 4 = 31)\n    # Thus, the sum S we are looking for is given by:\n    # S = 4 * (31(31 + 1)(2*31 + 1)) / 6\n    # Simplifying this:\n    n = 31\n    S = 4 * (n * (n + 1) * (2 * n + 1)) // 6\n    return S\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    target_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == target_score:\n            return correct_answers\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Proportion: 5 fish for 2 rabbits\n    # Proportion: 4 rabbits for 7 packs of wheat\n    # We want to find: x fish for 14 packs of wheat\n    \n    # From the first proportion:\n    # 1 rabbit is equivalent to (5/2) fish\n    rabbits_to_fish = 5 / 2\n\n    # From the second proportion:\n    # 1 pack of wheat is equivalent to (4/7) rabbits\n    wheat_to_rabbits = 4 / 7\n\n    # Find how many rabbits for 14 packs of wheat\n    rabbits_for_14_wheat = 14 * wheat_to_rabbits\n\n    # Now find how many fish for the rabbits needed for 14 packs of wheat\n    fish_for_14_wheat = rabbits_for_14_wheat * rabbits_to_fish\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    # All people can be considered as a set of characters\n    people = 'LJAJ'\n\n    # Generate all permutations of people entering the park through 3 entrances\n    all_permutations = set(permutations(people))\n    \n    # Subtract the permutations where all 4 people use the same entrance\n    # There are 3 cases where all choose the same entrance (1 for each entrance)\n    same_entrance_cases = 3\n\n    ans = len(all_permutations) - same_entrance_cases\n\n    return ans\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            break\n        cookies += 1\n    return cookies\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    lower_bound = 2.6\n    upper_bound = 4.8\n    halfway_number = (lower_bound + upper_bound) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of animals in the farm initially as 'total' and\n    # the initial number of goats as 'goats'.\n    total, goats = symbols('total goats')\n\n    # From the problem, we know that 65% of the animals were cows initially, so\n    # 0.65*total must be the number of cows. Hence, the number of goats will be\n    # total - 0.65*total = 0.35*total\n    equation1 = Eq(goats, 0.35*total)\n    \n    # When 240 more animals are added, we have a new total (total+240).\n    # After adding, the percentage of cows becomes 65% + 20% = 85% of the new total.\n    # The number of goats doubled, so the goats count becomes 2*goats.\n    # Now, the total cows will be total+240 - 2*goats (all new animals minus new goats).\n    # Therefore, 0.85*(total+240) must be equal to the initial cows (0.65*total) plus 240 animals.\n    equation2 = Eq(0.85*(total+240), 0.65*total + 240)\n\n    # We solve the equations for the total number of animals and number of goats\n    solutions = solve((equation1, equation2), (total, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have three congruences:\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 3 (mod 6)\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # Use the Chinese Remainder Theorem to find a solution\n    ans = solve_congruence(*congruences)\n\n    # Since we know it is less than 100, we iterate through the solutions\n    while ans[0] < 100:\n        return ans[0]\n        ans = (ans[0] + ans[1], ans[1])\n\n    return None\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discounted_price = total_cost - 15\n    elif total_cost >= 20:\n        discounted_price = total_cost - 4\n    else:\n        discounted_price = total_cost\n\n    return discounted_price\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # There are two boys, so there are 2! ways to arrange them at each end.\n    boys_arrangements = factorial(2)\n\n    # There are three girls, so there are 3! ways to arrange them in the middle.\n    girls_arrangements = factorial(3)\n\n    # Using the multiplication principle, the total arrangements is the product of boys' and girls' arrangements.\n    total_arrangements = boys_arrangements * girls_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    while True:\n        test_number = int(number * n)\n        if test_number % 11 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    tom_age = 10  # Tom's age is given as 10\n    jason_age_options = [6, 9]  # Given age options for Jason and Adam are 6 and 9\n    adam_age_options = [6, 9]\n    \n    for jason_age in jason_age_options:\n        for adam_age in adam_age_options:\n            # Since Jason is younger than Tom and Tom is 10 years old,\n            # we check if Jason's age is less than Tom's age\n            if jason_age < tom_age and jason_age != adam_age:\n                # If Jason's age is not equal to Adam's age, then we have found Adam's age\n                return adam_age  # Adam's age is the one not equal to Jason's\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenario for drawing balls of the same color\n    # Draw all red balls: 5 balls\n    # Draw all white balls: 5 balls\n    # So we have 10 balls, and they are either all red or all white\n    # To ensure we have 3 different colors, we must draw one more ball\n    # This ball will either be yellow or the color not drawn yet (red or white)\n    \n    # Total balls drawn to ensure 3 different colors is 10 + 1\n    ans = 10 + 1\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    cost_of_laptop = total_money * fraction_used\n    return cost_of_laptop\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # The smallest number of apples any child can get is 1.\n    # To maximize the number of apples Avril gets, we give the other children the smallest possible unique amounts:\n    # 1, 2, 3, 4, 5 (for the five other children).\n    # This sums to 15 apples (1+2+3+4+5).\n    # The remaining apples, which will go to Avril, is therefore 28 - 15.\n    avril_apples = 28 - (1+2+3+4+5)\n    \n    return avril_apples\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let's denote:\n    # ▲ as triangle\n    # ■ as square\n    # ● as circle\n    # ◆ as diamond\n    \n    # From the given equations:\n    # ▲ + ▲ = ■  (1)\n    # ■ + ▲ = ●  (2)\n    # ◆ = ● + ■ + ▲  (3)\n    \n    # From equation (1), we can find the value of ■ in terms of ▲:\n    # ■ = 2▲\n    \n    # We substitute ■ in equation (2) to find the value of ● in terms of ▲:\n    # 2▲ + ▲ = ●\n    # ● = 3▲\n\n    # Now we substitute both ● and ■ into equation (3) to find ◆ in terms of ▲:\n    # ◆ = 3▲ + 2▲ + ▲\n    # ◆ = 6▲\n    \n    # Hence, ◆ is equal to 6 triangles (▲s).\n    return 6\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    ratio_joyce = 3\n    ratio_lori = 2\n\n    # Lori's speed is 2 meters per second\n    speed_lori = 2\n\n    # Calculate Joyce's speed based on the ratio\n    speed_joyce = (ratio_joyce / ratio_lori) * speed_lori\n\n    # Calculate how far Joyce can run in 10 seconds\n    distance = speed_joyce * 10\n\n    return distance\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    average_initial = 60\n    total_initial = average_initial * 2\n    average_new = 70\n    total_new = average_new * 3\n    new_number = total_new - total_initial\n\n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip_ends = time_caught_bus + timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    walking_time_before_bus = time_caught_bus - time_left_school\n    walking_time_after_bus = time_got_home - time_bus_trip_ends\n\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n    \n    total_walking_minutes = total_walking_time.total_seconds() / 60\n\n    return int(total_walking_minutes)\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, lisa, amount = symbols('ken lisa amount')\n\n    equation1 = Eq(ken, lisa + 15)\n    equation2 = Eq(ken - amount, lisa + amount - 21)\n\n    solutions = solve((equation1, equation2), (ken, lisa, amount))\n\n    return solutions[amount]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # Calculate trophies for first 5 questions\n    trophies_first_half = sum(range(1, 6))\n    \n    # Calculate trophies for last 4 questions\n    trophies_second_half = sum(range(5, 1, -1))\n    \n    # Total trophies\n    total_trophies = trophies_first_half + trophies_second_half\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    total_boys = 290\n    more_boys_than_girls = 80\n    total_girls = total_boys - more_boys_than_girls\n    total_children = total_boys + total_girls\n    percentage_boys = (total_boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Total number of blue and orange marbles\n    non_red_marbles = 18 + 8\n    \n    # To ensure getting the 2 red marbles, we must take out all the non-red marbles,\n    # plus the 2 red marbles.\n    marbles_to_take = non_red_marbles + 2\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 1, 9, 2]\n    permuted_numbers = [''.join(map(str, p)) for p in permutations(digits)]\n    max_number = max(permuted_numbers, key=int)\n    min_number = min(permuted_numbers, key=int)\n\n    return int(max_number) - int(min_number)\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Total number of cookies eaten over five days\n    total_cookies = 100\n    # Since the boy eats 6 more each day, this is an arithmetic sequence with a common difference of 6.\n    # Let the number of cookies eaten on the first day be a1.\n\n    # The sum of an arithmetic sequence can be expressed as (n/2)*(2a1 + (n-1)d)\n    # where n is the number of terms, a1 is the first term, and d is the common difference.\n    # Here, n=5 (five days), and d=6, we have:\n    # 100 = (5/2)*(2a1 + (5-1)*6)\n    # Solving for a1 gives us the number of cookies eaten on the first day.\n\n    # Rearrange the formula to solve for a1\n    n = 5\n    d = 6\n    a1 = (total_cookies - (n * (n - 1) / 2) * d) / n\n    return int(a1)\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Number of elements in the sequence when all 8's are written\n    sequence_length = sum(range(2, 10))\n\n    # Find the middle position(s) for the median\n    if sequence_length % 2 == 0:\n        # If even, there will be two middle numbers\n        middle_pos1 = sequence_length // 2\n        middle_pos2 = middle_pos1 + 1\n    else:\n        # If odd, there is one middle number\n        middle_pos1 = middle_pos2 = (sequence_length + 1) // 2\n\n    # Initialize variables\n    total_numbers_written = 0\n    current_number = 1\n\n    # Find the numbers at the middle positions\n    for i in range(2, 10):\n        total_numbers_written += i\n        if total_numbers_written >= middle_pos1:\n            # If we've reached or passed the first middle position\n            median1 = current_number\n            break\n        current_number += 1\n\n    # Check if there are two medians to consider\n    if middle_pos1 != middle_pos2:\n        if total_numbers_written >= middle_pos2:\n            # If we've reached or passed the second middle position\n            median2 = current_number\n        else:\n            median2 = current_number + 1\n        # Calculate the mean of the two medians\n        median = (median1 + median2) / 2\n    else:\n        median = median1\n\n    return median\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # Students who called out a multiple of 2 or 3 will turn around.\n        # If a student is a multiple of 2 and 3 (i.e., multiple of 6), they will turn around twice, thus ending up facing the teacher.\n        # We count the number of students not facing the teacher using multiples of 2 and 3 minus multiples of 6 (inclusion-exclusion principle).\n        # Finally, we subtract this count from the total number of students to get those facing the teacher.\n        if i % 2 != 0 and i % 3 != 0:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # Compute the common difference of the arithmetic sequence\n    difference = (fourth_term - first_term) // 3\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence\n    last_term = first_term + (num_rows - 1) * difference\n    \n    # Use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_athletes = num_rows * (first_term + last_term) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Since there are 3 gates and the host opens 1 gate with a goat, there are 2 remaining gates.\n    # Initially there is a 1/3 chance the car is behind the gate you chose, and a 2/3 chance it is behind one of the other two gates.\n    \n    # After the host opens a gate with a goat, the 2/3 probability is now fully behind the one remaining closed gate that you did not pick because the host will never open a gate with a car.\n    # So switching to gate 2 gives you a 2/3 chance of winning the car.\n\n    return \"gate 2\"  # Change to gate 2 to gain a higher probability of winning the car.\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if (num % 4 == 2) and (num % 3 == 2) and (num % 7 == 1):\n            return num\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    money_after_cds = 3 / 4 * original_money\n    money_after_batteries = 1 / 4 * money_after_cds\n\n    equation = Eq(money_after_batteries, 1 / 3 * original_money)\n\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    students = 13  # Tommy and 12 friends\n    minutes_per_student = 142\n    total_minutes = students * minutes_per_student\n    return total_minutes\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 trainers catch 7 pokemon in 7 minutes,\n    # the rate at which one trainer catches pokemon is 1 pokemon per 7 minutes.\n    # Therefore, to catch 49 pokemon in 49 minutes,\n    # the same number of trainers would be needed as pokemon caught.\n    # Since each trainer can catch one pokemon in 7 minutes,\n    # they can catch 7 pokemon in 49 minutes.\n    # Therefore, the number of trainers needed to catch 49 pokemon in 49 minutes is 49.\n    \n    ans = 49\n    return ans\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Calculate the combinations of choosing 3 books out of 7 for the first student\n    first_student_combinations = factorial(7) / (factorial(3) * factorial(7 - 3))\n    # Once 3 books are given to the first student, there are 4 books left to\n    # choose 1 book for the second student\n    second_student_combinations = 4\n    # The third student gets the last remaining book, so there is only 1 combination\n    third_student_combination = 1\n    \n    # Multiply the combinations for each student to get the total\n    total_combinations = first_student_combinations * second_student_combinations * third_student_combination\n    return int(total_combinations)\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n    \n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n    \n    return percentage_incorrect\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    oplus = symbols('oplus')\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    solution = solve(equation, oplus)\n    return solution[0]\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number can be seen as 928 repeated n times where n = 99 // 3 (since 928 has 3 digits)\n    n = 99 // 3\n    \n    # Each occurrence of 928 is equivalent to 928 mod 9\n    remainder_of_928 = 928 % 9\n    \n    # The number formed by repeating 928 n times, when divided by 9,\n    # will have the same remainder as (remainder_of_928 * n) mod 9\n    ans = (remainder_of_928 * n) % 9\n    \n    return ans\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [3, 1, 4, 2]\n    smallest_even_digit = min([digit for digit in digits if digit % 2 == 0])\n    digits.remove(smallest_even_digit)\n    remaining_digits = sorted(digits)\n\n    ans = int(str(remaining_digits[0]) + str(remaining_digits[1]) + str(remaining_digits[2]) + str(smallest_even_digit))\n    return ans\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y, z = symbols('x y z')\n\n    # Given: The sum of three numbers is 56\n    eq_sum = Eq(x + y + z, 56)\n\n    # Given: The average of the smallest two numbers is 14\n    eq_avg_small = Eq((x + y)/2, 14)  # x and y are the smallest two numbers\n\n    # Given: The average of the largest two numbers is 22\n    eq_avg_large = Eq((y + z)/2, 22)  # y and z are the largest two numbers\n\n    # Finding the solution\n    solutions = solve((eq_sum, eq_avg_small, eq_avg_large), (x, y, z))\n\n    # Extract median from the solution\n    median = solutions[y]\n\n    return median\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let the number of bars bought by each be 'n'\n    for n in range(1, 100):  # The number cannot be very big as it's limited by the coins they have\n        # Eliot's transaction\n        cost_eliot = 12 * n  # cost of n bars each at 12p\n        change_eliot = (3 * 100) - cost_eliot  # change after paying with three £1 coins (300p)\n\n        # Maya's transaction\n        cost_maya = 17 * n  # cost of n bars each at 17p\n        change_maya = (4 * 100) - cost_maya  # change after paying with four £1 coins (400p)\n        \n        # They receive the same amount of change\n        if change_eliot == change_maya:\n            return n\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jackson, chloe = symbols('jackson chloe')\n    \n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    jackson_age_in_3_years = solutions[jackson] + 3\n    \n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    \n    return equation1 == equation2\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_rate = 2.5  # base rate for up to 1.8 km\n    additional_rate = 1.2  # rate for each additional kilometer\n    total_cost = 8.5  # total cost of the ride\n    cost_without_base = total_cost - base_rate  # cost without the base rate\n\n    # calculate the distance for the non-base rate distance\n    additional_distance = cost_without_base / additional_rate\n\n    # total distance is the sum of the base distance and additional distance\n    total_distance = 1.8 + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pork dumpling and one bun\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    # Extract the price of one pork dumpling\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    mom_original_chocolates = 8 * 2\n    return mom_original_chocolates\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    # If at least one student gets at least 3 apples,\n    # we should consider the minimum number of students required to ensure this.\n    # According to the Pigeonhole Principle, if we distribute apples evenly\n    # and one pigeonhole must contain at least 3 apples (pigeons),\n    # we can calculate the number of holes (students) as follows:\n\n    # To guarantee at least one student gets at least 3 apples,\n    # we can give 2 apples to the rest of the students and 3 to one student\n    # Let's find the maximum number of students that can get 2 apples each, before one is forced to get 3\n    max_students_with_2 = (apples - 3) // 2\n\n    # Now, one additional student will have to get at least 3 apples.\n    # So, we add 1 to the number of students\n    class_size = max_students_with_2 + 1\n\n    return class_size\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    boys_per_big_car = 4\n    girls_per_small_car = 2\n\n    big_cars_needed = boys // boys_per_big_car\n    small_cars_needed = girls // girls_per_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n\n    pounds = ounces * pounds_per_ounce\n    kilograms = pounds * kg_per_pound\n\n    return round(kilograms, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    total_years = 100\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n\n    # total_years_in_future = (mother_age + x) + (father_age + x) + (julia_age + x)\n    # total_years_in_future = mother_age + father_age + julia_age + 3x = total_years\n    # 3x = total_years - (mother_age + father_age + julia_age)\n    # x = (total_years - (mother_age + father_age + julia_age)) / 3\n    \n    current_sum_ages = mother_age + father_age + julia_age\n    x = (total_years - current_sum_ages) / 3\n    \n    return int(x)\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    from itertools import permutations\n    \n    # Iterate over all permutations of the digits 1 to 9\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        # Compute the value of A for this permutation\n        A = sum(int(\"\".join(map(str, p[i:i+3]))) for i in range(7))\n        # Update max_A if this A is larger\n        max_A = max(max_A, A)\n    \n    return max_A\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    sum_to_80 = 80 * (80 + 1) // 2       # Sum of 1 to 80 (inclusive)\n    sum_to_4 = 4 * (4 + 1) // 2          # Sum of 1 to 4 (inclusive)\n    total_sum = 2 * (sum_to_80 - sum_to_4)  # Double the sum removing 1 to 4 twice (5 to 80, then 5 to 79)\n\n    return total_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # There are 2 must rules: A on the left of B, B on the left of C => A B C _ _\n    # After placing A, B, C, there are 2 slots left and we can arrange 2 remaining people in these slots in 2! ways.\n    remaining_slots_factorial = factorial(2)\n    # The total number of arrangements is then:\n    return remaining_slots_factorial * 3  # Multiplied by 3 for the three fixed positions (ABC, BAC, BCA)\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def puzzle(x):\n        return (x // 10 - x % 10) ** 2\n\n    ans = puzzle(55)\n    \n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted(set(permutations(digits, 6)))\n    target_number = ''.join(all_numbers[504])  # Indexing starts at 0, so 505th is at index 504\n    return int(target_number)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    count = 0\n    nums = [0, 2, 3]\n    for i in nums:\n        for j in nums:\n            for k in nums:\n                if i != j and j != k and i != k and i != 0:  # i != 0 ensures it's a three-digit number\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    # Combined work rate per day\n    combined_work_rate = alice_work_rate + bob_work_rate\n\n    # Total work done by the end of the 27th day\n    total_work_done = 27 * bob_work_rate\n\n    # Equation representing the total work done when Alice takes \"x\" days off\n    # (27 - x) is the number of days Alice worked\n    work_done_with_days_off = (27 - alice_work_rate) * alice_work_rate + 27 * bob_work_rate\n\n    # Solving for the number of days Alice took off \"x\"\n    # using the equation where total work done is 1 (the whole job)\n    x = (1 - total_work_done) / alice_work_rate\n\n    return x\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples_of_6_and_9.append(i)\n    ans = multiples_of_6_and_9\n    return ans\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red/white, 1/2)\n    equation2 = Eq(white/black, 3/4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Since there are only red and blue socks.\n    # After picking 3 socks, we are guaranteed to have at least one pair of the same color.\n    return 3\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Calculate the common difference\n    common_difference = 120 - 105  # The difference between the 8th and 7th terms\n    \n    # Calculate the first term using the 7th term and the common difference\n    first_term = 105 - (7 - 1) * common_difference\n    \n    # Calculate the 100th term using the first term and common difference\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) // 2\n    return n\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Combined age of the 3 dogs 4 years ago\n    combined_age_4_years_ago = 24\n    \n    # Each year each dog ages 1 year, so in 4 years, each dog ages 4 years\n    # As there are 3 dogs, the total increase in age over 4 years is 3 * 4 = 12 years\n    # So their combined age now would be\n    combined_age_now = combined_age_4_years_ago + 12\n    \n    # In 2 more years, each dog will age 2 more years\n    # So for 3 dogs, the total increase in age in 2 years is 3 * 2 = 6 years\n    # Hence, the combined age in 2 years time will be\n    combined_age_in_2_years = combined_age_now + 6\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # define symbols\n    ryan, audrey = symbols('ryan audrey')\n\n    # initial ratio equation\n    initial_ratio = Eq((ryan / audrey), 2 / 7)\n\n    # new ratio after transactions\n    new_ratio = Eq(((ryan + 20) / (audrey - 80)), 1 / 3)\n\n    # solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    only_piano = 30 - 15\n    only_violin = 41 - 15\n    both = 15\n    total_students = only_piano + only_violin + both\n    return total_students\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    school_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wake_up_time = school_time - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    group_beads = 3 + 2 + 2  # black + white + red\n    full_groups, remaining_beads = divmod(total_beads, group_beads)\n\n    total_black = full_groups * 3  # Each full group has 3 black beads\n    \n    # Count remaining black beads if any\n    if remaining_beads > 0:\n        remaining_black = min(remaining_beads, 3)  # There can be at most 3 black beads in an incomplete group\n        total_black += remaining_black\n    \n    return total_black\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # The angle covered by the minute hand from the 12 o'clock position\n    minute_angle = (minute / 60) * 360\n\n    # The angle covered by the hour hand from the 12 o'clock position\n    hour_angle = (hour % 12 + minute / 60) * 360 / 12\n\n    # The absolute angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n\n    # Since the hands can form the smaller or the larger angle,\n    # we choose the smaller angle if the calculated angle is more than 180 degrees\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum(60 - 4 * i for i in range(16))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_quantity = 750\n\n    rebekah_drinks = initial_quantity * (1/5)\n    abigail_drinks = 200\n    anna_drinks = 120\n\n    juice_left = initial_quantity - (rebekah_drinks + abigail_drinks + anna_drinks)\n\n    return juice_left\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = {1, 2, 5}\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    total_entrances = 4\n    people = 3\n    \n    # Joe has 4 choices of entrance\n    joe_choices = total_entrances\n    \n    # Mike has 3 choices (cannot join the same as Joe)\n    mike_choices = total_entrances - 1\n    \n    # Tina has 3 choices, since one entrance will already be taken\n    tina_choices = total_entrances - 1\n    \n    # The order of entering is uncertain, so we need to calculate permutations of people\n    permutations_of_people = math.factorial(people)\n    \n    # The total different ways\n    total_ways = joe_choices * mike_choices * tina_choices * permutations_of_people\n    \n    return total_ways\n\nimport math\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    ans = percentage * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance_nm = 3000\n    time_days = 13\n    time_hours = 22\n    total_time_hours = (time_days * 24) + time_hours\n    average_speed_nm_per_hour = distance_nm / total_time_hours\n    return round(average_speed_nm_per_hour)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first fruit punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in the first punch\n\n    volume2 = 3  # volume of second fruit punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in the second punch\n\n    total_volume = volume1 + volume2  # total volume of the mixture\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)  # total volume of fruit juice\n\n    new_concentration = total_fruit_juice / total_volume  # concentration of the new mixture\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Define the equations based on the problem\n    # Let c be the number of chickens, d be the number of ducks, and o be the number of cows.\n    # Based on the problem, we have c = d and therefore c + c + o = 51 and 2c + 2c + 4o = 160.\n    # We can simplify the equations to 2c + o = 51 and 4c + 4o = 160.\n    # Let's solve these equations for c and o.\n\n    # Number of heads\n    total_heads = 51\n    # Total number of legs\n    total_legs = 160\n    # Each chicken/duck has 2 legs and each cow has 4 legs\n\n    # We know that the number of chickens is equal to the number of ducks (c = d)\n    # And the total number of animals is 51, so we have 2c (chickens and ducks) + o (cows)\n    # We also know that the total number of legs is 160\n    # Chickens and ducks have 2 legs each and cows have 4 legs\n\n    # From the total number of legs, we subtract twice the total number of heads (two legs for each chicken/duck),\n    # the remaining legs should be twice the number of cows (since each cow has 4 legs)\n    # (total_legs - 2 * total_heads) should be twice the number of cows\n\n    # Remaining legs are all cow legs (each has 4 legs, so divide by 2 for the number of cows)\n    number_of_cows = (total_legs - 2 * total_heads) // 2\n    # Subtract number of cows from total heads to get the number of chickens (also ducks since they are equal)\n    chickens = total_heads - number_of_cows\n\n    return chickens\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n\n    remaining_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_again\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1  # first multiple of 11 after 50\n    last_multiple = 150 // 11  # last multiple of 11 before 150\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2  # Albert and Bella themselves\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(20, 31):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the initial number of women, m be the initial number of men\n    w, m = symbols('w m')\n    \n    # After the first bus, women became 3/5 of men\n    equation1 = Eq((w - 36), 3/5 * m)\n    \n    # After the second bus, men became equal to the remaining women\n    equation2 = Eq(m - 48, w - 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n    \n    # Total initial number of people\n    total_people = solutions[w] + solutions[m]\n    \n    return total_people\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n\n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n\n    solution_age = solve(equation, age_now)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_diff = 132 - 124  # Difference between tallest and shortest\n    min_heights = total_diff + 1  # Minimum number of different heights\n    # If at least 4 students are of the same height, we apply the Pigeonhole principle\n    # Minimum class size = Minimum different heights * 4 students per height\n    class_size = min_heights * 4\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost for three pens\n    money_given = 5        # money Jennifer gave\n    \n    change = money_given - total_cost  # change returned\n    \n    return change\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "from itertools import combinations\n\ndef solution():\n    # Find all the combinations of 3 numbers that sum up to 14\n    combinations_list = [\n        combo for combo in combinations(range(1, 15), 3) if sum(combo) == 14\n    ]\n    # Return the number of combinations\n    num_combinations = len(combinations_list)\n    # Return the list of combinations\n    combinations_list = sorted(combinations_list)\n    return num_combinations, combinations_list\n\n# Get the answer\nans = solution()\n\n# The number of combinations will be returned along with the list of combinations"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    \n    return more_english_books\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cooking_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Number of students in each group\n    go = 42\n    checkers = 55\n    chess = 33\n    \n    # Number of students in the intersections of the groups\n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    \n    # Number of students in all three groups\n    all_three = 5\n    \n    # Using Inclusion-Exclusion Principle to find total students\n    total = (go + checkers + chess\n             - go_and_checkers - go_and_chess - checkers_and_chess\n             + all_three)\n    \n    return total\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Fred wants to ensure that he wins, so he needs to leave George in a position where\n    # no matter what George does, Fred will be able to win in his next turn.\n    # Fred can always win if he leaves a multiple of 4 oranges to George.\n    # The winning positions for Fred are when 4, 8, or 12 oranges are left on the table,\n    # because no matter how many oranges George takes (1, 2, or 3), Fred can always take the remainder\n    # to reach the next multiple of 4.\n    # To leave a multiple of 4 oranges, since there are 15 oranges, Fred should take:\n    # 15 (total) - 12 (next multiple of 4) = 3 oranges.\n    # So, Fred should take 3 oranges in his first turn.\n    return 3\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    years_later = 0\n\n    while True:\n        total_age = oliver_current_age + lin_current_age + 2 * years_later\n        if total_age == target_sum_age:\n            break\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = round(245 ** (1/3))\n    p = cube_root ** 3 / 245\n    return p\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3  # in meters\n    \n    # The total distance is the number of gaps between poles times the distance between each pole\n    # There is one less gap than the number of poles\n    total_distance = (number_of_poles - 1) * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_to_m_conversion_factor = 100  # 1 meter = 100 centimeters\n    cm_value = 736\n    meters = cm_value / cm_to_m_conversion_factor\n    return meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(46, 65, 2)])\n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n        # Check if E and S are not zero since it leads the number\n        if E == 0 or S == 0:\n            continue\n\n        ESSE = E * 1000 + S * 100 + S * 10 + E\n        SASMO = S * 10000 + A * 1000 + S * 100 + M * 10 + O\n\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production_min = this_year_production * 1/4\n    last_year_production = int(last_year_production_min) + 1  # More than 1/4, so we take the nearest integer greater than the product.\n\n    return last_year_production\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1 # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator1 = 5\n    denominator1 = 15\n    numerator2 = 8\n    denominator2 = (denominator1 * numerator2) / numerator1\n    return denominator2\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    # The sum simplifies to n-1 whole numbers as all but 1/n of the nth row cancel out.\n    # This is because 1/k + (k-1)/k = k/k = 1 for each k in the nth row.\n    total_sum = 0\n    for n in range(2, 2018):\n        total_sum += n - 1\n    return total_sum\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    return closest\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim stands 4th from the front and 3rd from the back in a line.\n    # This means there are 3 people in front of him and 2 people behind him.\n    rows = 3 + 1 + 2\n\n    # Tim stands 1st from the left and 4th from the right in a parallel line.\n    # This means there are no people to his left and 3 people to his right.\n    columns = 1 + 3\n\n    # The total number of band members is the number of rows times the number of columns.\n    return rows * columns\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    initial_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n    return solutions[oranges]\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_first_14 = sum(range(1, 15))\n    new_sum = sum_first_14 + 2019\n\n    for i in range(1, new_sum//8+1):\n        temp_sum = sum(range(i, i+8))\n        if temp_sum == new_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_savings = 150\n    daily_savings = 2.40\n    days_per_week = 7\n\n    days_needed = total_savings / daily_savings\n    weeks_needed = days_needed / days_per_week\n\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = 6.5 / (1 / 4)\n    return ans\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    letters = \"STATISTICS\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    \n    total_permutations = factorial(len(letters))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    \n    result = common_factor * sum_of_multipliers\n    \n    return result\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    num_notes = total_amount / note_value\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # minimum days required for each task\n    cut_wood_days = 3\n    weave_rope_days = 1\n    dry_wood_days = 5\n    mow_grass_days = 1\n    prepare_food_days = 1\n    soak_cut_grass_days = 1\n    choose_wood_days = 1\n\n    # calculating the total days, considering overlapping tasks (parallel tasks)\n    total_days = max(cut_wood_days + choose_wood_days + dry_wood_days, \n                     mow_grass_days + soak_cut_grass_days + weave_rope_days) + prepare_food_days\n\n    return total_days\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Represent the weight of one rabbit as r and the weight of one chicken as c\n    # Given that the weight of 2 rabbits is equal to 6 chickens, we can write the equation\n    # 2r = 6c or r = 3c\n    r = 3  # Weight of one rabbit in terms of chickens\n\n    # It's also given that the weight of 3 kangaroos is equal to 4 rabbits\n    # Represent the weight of one kangaroo as k, so the equation becomes\n    # 3k = 4r or k = 4r / 3\n    # Since we know that r = 3c, we can substitute r in the equation\n    k = (4 * r) / 3\n\n    # Now, we find the weight of one kangaroo in terms of chickens\n    # k = 4 * 3c / 3\n    # k = 4c\n    c = k  # Weight of one kangaroo in terms of chickens\n\n    return c\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age = (ashley_age - 3) - 2\n    return brother_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) / 5\n    return Y\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first = 7\n    difference = 3\n    last = 52\n    num_terms = ((last - first) // difference) + 1\n    sum_sequence = (num_terms * (first + last)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fractions = 0\n    for i in range(1, 2019):\n        fraction = (2018 + i) / 5\n        fractional_part = fraction - int(fraction)\n        sum_fractions += fractional_part\n    \n    return sum_fractions\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is in the exact middle of the line and the 7th from the front,\n    # there must be 6 people in front of her and 6 people behind her.\n    # Therefore, the total number of dwarves is the number of people in front,\n    # plus Snow White, plus the number of people behind.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n    snow_white = 1\n\n    total_dwarves = dwarves_in_front + snow_white + dwarves_behind\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # If each school had at most 3 participants, there would be more schools.\n    # Thus, to minimize the number of schools and ensure at least 4 participants\n    # from the school with the most participants, we use the pigeonhole principle.\n    \n    max_participants_per_school = 3\n    participants = 100\n\n    # Applying pigeonhole principle to find minimum number of schools\n    total_schools = (participants + max_participants_per_school - 1) // max_participants_per_school\n\n    return total_schools\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    from math import isqrt\n\n    # Iterate through all 4-digit numbers\n    for i in range(1000, 10000):\n        product = i * 6  # Multiply by 6\n        quotient = i // 6  # Divide by 6\n\n        # Check if product is a perfect cube and quotient is a perfect square\n        if round(product ** (1/3)) ** 3 == product and isqrt(quotient) ** 2 == quotient:\n            return i\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    rows = 4 + 3 - 1  # Tim is 4th from the front and 3rd from the back\n    columns = 4 + 7 - 1  # Tim is 4th from left and 7th from the right\n    total_members = rows * columns\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_faster = 48\n    # Speed of the slower train\n    speed_slower = 36\n\n    # The distance traveled by the faster train when they meet is 70 km more than that of the slower train.\n    # Let the time taken for them to meet be t hours.\n    # Then the distance traveled by the faster train is 48t and by the slower train is 36t.\n    # According to the problem, 48t = 36t + 70\n    # We can solve for t:\n    t = 70 / (speed_faster - speed_slower)\n\n    # Now we can calculate the total distance between the two stations.\n    # The total distance is the sum of the distances each train has covered until they meet.\n    distance_faster = speed_faster * t\n    distance_slower = speed_slower * t\n    total_distance = distance_faster + distance_slower\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    first_number_numerator = (3 * 9) + 5  # (Whole number * denominator) + numerator\n    second_number_numerator = (6 * 9) + 4  # (Whole number * denominator) + numerator\n\n    # Since the denominators are the same, we can simply add the numerators\n    numerator_sum = first_number_numerator + second_number_numerator\n    denominator = 9\n    \n    # Simplify the fraction\n    from math import gcd\n    common_divisor = gcd(numerator_sum, denominator)\n    \n    simplest_numerator = numerator_sum // common_divisor\n    simplest_denominator = denominator // common_divisor\n    \n    # Convert back to mixed number if required\n    whole_number = simplest_numerator // simplest_denominator\n    remainder_numerator = simplest_numerator % simplest_denominator\n    \n    return (whole_number, remainder_numerator, simplest_denominator)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    \n    total = sum(coins)\n    for coin in coins:\n        if 2 * (total - coin) == total:\n            return coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Assume a reasonable upper limit for the number of boats\n        if (boats + 1) * 6 == (boats - 1) * 9:  # The condition that needs to be satisfied\n            num_students = (boats + 1) * 6\n            return num_students\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the weight of Lily's wheat and g be the weight of Gigi's wheat\n    l, g = symbols('l g')\n\n    # Equation 1: After giving 36 tonnes, Lily has 26 more tonnes than Gigi\n    equation1 = Eq(l - 36, g + 36 + 26)\n\n    # Equation 2: Lily's wheat is 8 times of Gigi's\n    equation2 = Eq(l, 8 * g)\n\n    # Solving equations\n    solutions = solve((equation1, equation2), (l, g))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pairs_count = 0\n\n    # Loop through the first number of the pair\n    for num1 in range(1, 101):\n        # Loop through the second number of the pair\n        for num2 in range(num1 + 1, 101):\n            # Check if the sum of the pair is a multiple of 5\n            if (num1 + num2) % 5 == 0:\n                pairs_count += 1\n\n    return pairs_count\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(rasidah * 2/5, chai_seng/2 - chai_seng * 6/7 / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of friends be 'f' and the total chocolates be 'c'.\n    f, c = symbols('f c')\n\n    # If she gives each friend 18 pieces of chocolate, then there will be 41 pieces in excess.\n    equation1 = Eq(f * 18 + 41, c)\n\n    # If she gives each friend 23 pieces, she will be short of 34 pieces.\n    equation2 = Eq(f * 23, c + 34)\n\n    # Solve the system of equations for f and c.\n    solutions = solve((equation1, equation2), (f, c))\n\n    # Calculate chocolates left when each friend gets 20 pieces.\n    chocolates_left = solutions[c] - solutions[f] * 20\n\n    return chocolates_left\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Tom's number has the form ABCD where D = A + B + C, and B = A + C\n    # Also, A + B + C + D = 16\n    for A in range(1, 10):\n        for C in range(A+1):\n            B = A + C\n            D = A + B + C\n            if A < B < C < D and A + B + C + D == 16:\n                return D  # Return the ones digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    \n    # Looping to form two-digit numbers where the tens place is not '0'\n    for tens in digits[1:]:  # Can't use '0' in tens place for a two-digit number\n        for ones in digits:\n            if tens != ones:  # Can't use the same digit twice\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance is the same uphill and downhill\n    distance_uphill = 3 * 5\n    distance_downhill = 2 * 10\n\n    # Total distance for the whole trip\n    total_distance = distance_uphill + distance_downhill\n\n    # Total time for the whole trip\n    total_time = 3 + 2\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    whole_number = 63\n    result = 54\n    fraction_denominator = 7\n    fraction_numerator = result / (whole_number / fraction_denominator)\n    \n    return fraction_numerator\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    ans = round(final_value, 1)\n    return ans\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    fixed_rate = 2\n    additional_rate = 1\n    fixed_service_fee = 3\n    total_money = 63\n    \n    # Calculate the cost for the first 5 kWh at the fixed rate\n    first_5_cost = 5 * fixed_rate\n    \n    # Subtract the first 5 kWh cost and the fixed service fee from the total money\n    remaining_money = total_money - first_5_cost - fixed_service_fee\n    \n    # Calculate the additional kWh she can use at the additional rate\n    additional_kwh = remaining_money / additional_rate\n    \n    # Total kWh is the sum of the first 5 kWh + additional kWh\n    total_kwh = 5 + additional_kwh\n    \n    return int(total_kwh)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10*x + y  # since A = xy\n            B = 400 + 10*x + y  # since B = 4xy\n            if B == 10 + 7*A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    num_small_boxes = -(-total_cookies // small_box_capacity)  # Ceiling division\n    return num_small_boxes\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    # Prime factorization of 4320\n    factors_4320 = {2: 5, 3: 3, 5: 1}  # 4320 = 2^5 * 3^3 * 5\n    \n    # For 3/2 raised to the power n to be an integer, 2^n must not exceed 2^5\n    # Because 4320 has 2^5, any more 2's will result in a non-integer\n    # Therefore, n must be between 0 and 5, inclusive, because 3^n doesn't affect integrality\n    max_n = factors_4320[2]\n    ans = max_n + 1  # +1 because we include 0 in the count\n    \n    return ans\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    from sympy import nextprime\n    \n    prev_prime = 31\n    missing_prime = nextprime(prev_prime)\n    \n    return missing_prime\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first = 20 * 0.35\n    juice_in_second = 30 * 0.60\n    total_juice = juice_in_first + juice_in_second\n\n    concentration = (total_juice / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total number of students who passed each test\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # Total number of students who passed at least one test\n    at_least_one_pass = 43\n\n    # Maximum number of students who passed all three tests\n    # happens when the intersection of any two tests is minimized,\n    # which happens when we subtract the individuals from total and\n    # leave us with those who have passed all three tests.\n\n    all_three_pass = math_pass + science_pass + english_pass - at_least_one_pass\n    \n    # However, the number cannot be negative, so we need to make sure\n    # that we are not counting any non-existing students.\n    if all_three_pass < 0:\n        all_three_pass = 0\n\n    return all_three_pass\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    num_ways = factorial(len(word))\n\n    for count in letter_counts.values():\n        num_ways //= factorial(count)\n\n    return num_ways\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    warehouse_b = symbols('warehouse_b')  # Let the variable represent the original amount in warehouse B\n  \n    # When warehouse A received 12 tons and warehouse B shipped out 16 tons\n    # Warehouse A has 50 + 12 tons\n    # Warehouse B has warehouse_b - 16 tons\n    # Now, warehouse A has twice the amount of warehouse B\n    equation = Eq((50 + 12), 2 * (warehouse_b - 16))\n\n    # Solve the equation\n    original_amount_b = solve(equation, warehouse_b)\n\n    return original_amount_b[0]\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 6000 * 0.20 * 0.50\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Ratio of fish to rabbits in the first trade (Owen to Oscar)\n    fish_to_rabbit = 3 / 1\n\n    # Ratio of rabbits to packs of wheat in the second trade (Oscar to Dennis)\n    rabbit_to_wheat = 2 / 3\n\n    # Calculate the equivalent number of fish per pack of wheat by multiplying the ratios\n    fish_to_wheat = fish_to_rabbit * (1 / rabbit_to_wheat)\n\n    return fish_to_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    benches = symbols('benches')\n    people = 3 * benches - 7  # When 3 people sit on one bench, there are 7 people standing\n    extra_benches_eq = Eq(people, 7 * (benches - 3))  # When 7 people sit on one bench, there are 3 extra benches\n\n    solutions = solve((extra_benches_eq), (benches))\n\n    total_people = 3 * solutions[benches] - 7\n\n    return int(total_people)\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    # Chinese Remainder Theorem condition setup\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 4 (mod 7)\n\n    # Search for the number in a given range\n    for x in range(400, 501):\n        if x % 4 == 1 and x % 5 == 2 and x % 7 == 4:\n            return x\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            for x3 in range(10):\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    difference = 21 - 11\n    return difference\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share_ratio = 3\n\n    bigger_share = (total_amount / ratio_sum) * bigger_share_ratio\n    return bigger_share\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fav_number = symbols('fav_number')\n\n    equation = Eq(2 * fav_number - 3, 19)\n\n    solution = solve(equation, fav_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits = 0\n    pages = 0\n    while digits < 1101:\n        pages += 1\n        digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    # Iterate through all 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd and the sum of its digits is 5\n        if i % 2 == 1 and sum(map(int, str(i))) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle, juice = symbols('bottle juice')\n\n    equation1 = Eq(5/6 * juice + bottle, 4.6)\n    equation2 = Eq(2/3 * juice + bottle, 4.45)\n\n    solutions = solve((equation1, equation2), (bottle, juice))\n\n    return solutions[bottle] * 1000  # converting kg to grams\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    # Total number of pupils initially\n    total_pupils = 235 + 567\n\n    # Number of pupils after the transfer in each room, since they are equal\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Given numbers to calculate\n    number1 = 45\n    number2 = 789\n    \n    # Calculate the result of the multiplication\n    result = number1 * number2\n    \n    # Return the result\n    return result\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        next_term = term + (n + 1)\n        if next_term >= 100:\n            break\n        term = next_term\n        n += 1\n    return term\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    for books in range(24):\n        for magazines in range(24):\n            if 3.40 * books + 1.60 * magazines == 23:\n                return magazines\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy = 149\n    sister = andy - 38\n\n    # If Andy gives his sister 38 notebooks, they will have the same number of notebooks\n    sister_initial = sister - 38\n\n    return sister_initial\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    result = (5/8 + 1/17) * 8 + 9/17\n    return result\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # assuming Mr. Lv's age is below 100\n        base10_age_with_0 = int(str(age) + '0')\n        base3_age = int(str(age), 3)\n        if base10_age_with_0 == base3_age:\n            return age\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # There's always an empty seat, so we consider the 7 people sitting around 7 \"virtual\" seats.\n    # Since the rotation of the table results in the same order, we fix one person and arrange the rest.\n    # The number of arrangements for n-1 persons is (n-1)! for n seating positions in a circle.\n\n    num_people = 7\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Factorize the number 7007 to find the two 2-digit multiples of 7\n    factor_pairs = []\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if 7007 % i == 0:  # Check if i is a factor of 7007\n            j = 7007 // i  # Calculate the other factor\n            if 10 <= j <= 99:  # Check if the other factor is also a 2-digit number\n                factor_pairs.append((i, j))\n\n    # Find the factor pair where both numbers are multiples of 7 and calculate their sum\n    for pair in factor_pairs:\n        if pair[0] % 7 == 0 and pair[1] % 7 == 0:\n            return sum(pair)\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 28):  # The other prime number must be > 27, so we only need to check up to 27\n        prime2 = 55 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities we need to find\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratios and percentages\n    orchids_to_tulips_ratio = 3 / 5\n    percent_sold_orchids = 40 / 100\n    fraction_sold_tulips = 1 / 5\n    percent_sold_roses = 25 / 100\n\n    # Total number of flowers before selling\n    total_flowers_initial = 3616\n\n    # Total number of flowers after selling\n    total_flowers_after = 2644\n\n    # Equation based on the ratio of orchids to tulips\n    equation1 = Eq(orchids, orchids_to_tulips_ratio * tulips)\n\n    # Equation based on the total number of flowers\n    equation2 = Eq(orchids + tulips + roses, total_flowers_initial)\n\n    # Equation based on the number of flowers left after selling\n    equation3 = Eq((1 - percent_sold_orchids) * orchids + \n                   (1 - fraction_sold_tulips) * tulips + \n                   (1 - percent_sold_roses) * roses, \n                   total_flowers_after)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    # Returning the number of orchids\n    return solutions[orchids]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_cost = (3 * cookie_cost) / 5\n    chocolate_cake_cost = (2 * cheesecake_cost) / 3\n\n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # For identical objects, we can use the \"stars and bars\" theorem\n    # which states: for splitting n identical objects into k piles, we have\n    # (n+k-1) choose (k-1) different ways.\n\n    # However, since the piles can't be empty, we can instead divide n-k\n    # objects into k piles and then add 1 to each pile. So we use (n-1) choose (k-1).\n\n    from math import comb\n\n    n = 10  # number of identical objects (pins)\n    k = 3   # number of piles\n\n    # We subtract k to account for the fact that each pile must have at least one object\n    ans = comb(n-1, k-1)\n\n    return ans\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one basketball and one volleyball\n    basketball_price, volleyball_price = symbols('basketball_price volleyball_price')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(2 * basketball_price + 3 * volleyball_price, 195)\n    equation2 = Eq(4 * basketball_price + 5 * volleyball_price, 355)\n\n    # Solve the system of equations for the prices\n    solutions = solve((equation1, equation2), (basketball_price, volleyball_price))\n\n    return solutions[volleyball_price]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len(set([2, 0, A, M, C, 1, 9])) == 7:\n                    total_sum = 2 + 0 + A + M + C + 1 + 9\n                    if total_sum % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n    \n    # Assuming that they both eat \"x\" amount of candy\n    x = symbols('x')\n    \n    # Equation 1: After eating x amount of candy, Mike has 6 pieces left\n    equation1 = Eq(mike - x, 6)\n    \n    # Equation 2: After eating x amount of candy, Valeria has 22 pieces left\n    equation2 = Eq(valeria - x, 22)\n\n    # Equation 3: The total number of candies they have is 36\n    equation3 = Eq(mike + valeria, 36)\n\n    # Solve the system of equations for the number of candies Valeria has\n    solutions = solve((equation1, equation2, equation3), (mike, valeria, x))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n    \n    equation1 = Eq(mother_age_now, 3 * melissa_age_now)\n    equation2 = Eq(melissa_age_now - 8, mother_age_now - 32)\n\n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since the fraction 6/7 is a recurring decimal with a cycle \"857142\",\n    # we just need to find out how the digits repeat in the first 58 places\n    # after the decimal point.\n    \n    recurring_sequence = \"857142\"\n    sequence_length = len(recurring_sequence)\n    \n    # Initialize sum of digits\n    sum_of_digits = 0\n\n    # Iterate over the first 58 digits and add the corresponding digit\n    # from the recurring sequence to the sum\n    for i in range(58):\n        # Modulo operation finds the correct index in the recurring sequence\n        sum_of_digits += int(recurring_sequence[i % sequence_length])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert recurring decimal to fraction\n    # 4.\\overset{\\cdot }{\\mathop{7}}\\overset{\\cdot }{\\mathop{3}} = 4 + 7/9 + 3/99\n    recurring_fraction = 4 + (7/9) + (3/(9*11))\n    \n    # The simple decimal\n    simple_decimal = 4.73\n    \n    # 4.77... is greater than 4.73, so we can ignore it\n    \n    # 4.737 is also greater than 4.73, so we can ignore it\n    \n    # Compare the recurring_fraction to the simple_decimal\n    if recurring_fraction < simple_decimal:\n        return recurring_fraction\n    else:\n        return simple_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n\n    # Joel adds back 2 to the half removed to find the total before Joel's turn\n    before_joel = (remaining_plants + 2) * 2\n\n    # Valerie adds back 3 to the half removed to find the total before Valerie's turn\n    before_valerie = (before_joel + 3) * 2\n\n    # Ethan adds back 1 to the half removed to find the original total number of plants\n    original_plants = (before_valerie + 1) * 2\n\n    return original_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # length of the train in meters\n    tunnel_length = 544  # length of the tunnel in meters\n    train_speed = 52  # speed of the train in meters per second\n\n    # The total distance to be covered by the train to pass through the tunnel completely is the sum of the lengths of the train and the tunnel\n    total_distance = train_length + tunnel_length\n\n    # The time it takes to pass through that distance is the total distance divided by the speed of the train\n    time_to_pass = total_distance / train_speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    numbers = [33, 29, 34, 28, 27, 30]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percent = 40\n    original_price = final_price / (1 + (increase_percent / 100))\n    return original_price\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of eggs be denoted by x\n    x = symbols('x')\n  \n    # According to the question, we form the equation based on the number of eggs sold and remaining\n    equation = Eq((x / 2 + 16) + ((x - 2 * (x / 2 + 16)) / 2 - 7), x - 18)\n  \n    # Solve the equation for x\n    original_number_of_eggs = solve(equation, x)\n\n    return original_number_of_eggs[0]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_for_one_coin = 2  # Heads or Tails\n    num_tosses = 2  # The coin is tossed two times\n\n    total_outcomes = outcomes_for_one_coin ** num_tosses\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # p1 represents P1 students, and p6 represents P6 students\n    p1, p6 = symbols('p1 p6')\n    \n    # Equation 1: The total number of students is 120\n    total_students_eq = Eq(p1 + p6, 120)\n    \n    # Equation 2: Total buckets of water\n    water_buckets_eq = Eq(2*p6 + 0.5*p1, 180)\n    \n    # Solving the two equations\n    solutions = solve((total_students_eq, water_buckets_eq), (p1, p6))\n\n    return solutions[p1]\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n    \n    # Let x be the length of each edge of the cube\n    x = symbols('x', positive=True, real=True)\n    \n    # Using the Pythagorean theorem in 3D for the diagonals PB, PC, PD, and PG\n    equation1 = Eq(x**2 + x**2 + x**2, (60 * sqrt(10))**2)\n    equation2 = Eq(x**2 + x**2, (60 * sqrt(5))**2)\n    equation3 = Eq(x**2 + 2 * x**2, (120 * sqrt(2))**2)\n    equation4 = Eq(sqrt(3) * x, 36 * sqrt(7))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), x)\n    \n    # The edge of the cube\n    edge_length = solutions[0]\n    \n    # PA is the space diagonal of the cube\n    PA = sqrt(3) * edge_length\n\n    return PA\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    maximum_students = gcd(pencils, pens)\n\n    return maximum_students\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg_apples = 66.5\n    ratio = total_kg_apples / 14\n    boxes_needed = boxes_for_14kg * ratio\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # First, identify the trade ratios\n    fish_to_rabbit = 3  # Owen gives 3 fish for 1 rabbit\n    rabbit_to_wheat = 2 / 3  # Oscar trades 2 rabbits for 3 packs of wheat\n\n    # Calculate the fish to wheat ratio by multiplying the individual ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Simplify the fish_to_wheat ratio to find out how many fish for 1 pack of wheat\n    # Since 3 * (2/3) = 2, Owen should give 2 fish for 1 pack of wheat\n    fish_per_pack_wheat = fish_to_wheat\n\n    return fish_per_pack_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Johnny's initial computation\n    johnny_initial_computation = (quotient * divisor) + remainder\n    \n    # Finding the correct dividend\n    correct_dividend = (quotient * divisor) + remainder\n    \n    # Checking Johnny's answer\n    if johnny_initial_computation != correct_dividend:\n        return \"No\", correct_dividend\n    else:\n        return \"Yes\", correct_dividend\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = \"279\"\n    primes = set()\n\n    # Generate all permutations of lengths 1 up to 3\n    for i in range(1, 4):\n        for perm in permutations(digits, i):\n            num = int(''.join(perm))\n            if isprime(num) and num < 100:\n                primes.add(num)\n\n    return len(primes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    # Calculate the difference in age between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # Calculate Mike's age when Eddie is 18 years old\n    mike_age_when_eddie_18 = 18 + age_difference\n\n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of students in the canteen originally be x\n    x = symbols('x')\n\n    # Original number of boys is 40% of total students\n    original_boys = 0.40 * x\n\n    # After 16 boys leave and 16 girls enter, the boys make up 2/15 of the students\n    # New number of boys is (original_boys - 16)\n    # New number of students is (x + 16 girls - 16 boys) which is still x\n    # New number of boys = 2/15 * new total number of students\n    equation = Eq(original_boys - 16, 2/15 * x)\n\n    # Solve for x\n    total_students = solve(equation, x)[0]\n\n    # Calculate the number of girls now\n    # Original number of girls = total_students - original_boys\n    # Number of girls now = original number of girls + 16\n    original_girls = total_students - original_boys\n    girls_now = original_girls + 16\n\n    return girls_now\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n    import decimal\n    from decimal import Decimal\n    decimal.getcontext().prec = 30\n\n    # represent the mixed numbers as fractions\n    mixed_number1 = 3 + Fraction(1, 3)\n    mixed_number2 = 4 + Fraction(1, 2)\n    mixed_number3 = Fraction(62, 75)\n    mixed_number4 = 3 + Fraction(1, 2)\n    mixed_number5 = 4 + Fraction(2, 3)\n    mixed_number6 = 2 + Fraction(2, 15)\n    mixed_number7 = 1 + Fraction(1, 20)\n\n    # calculate the numerator\n    numerator = (mixed_number1 * Decimal('1.9') + Decimal('19.5') / mixed_number2)\n\n    # calculate the denominator\n    denominator = (mixed_number3 - Decimal('0.16'))\n\n    # calculate the first part of the fraction\n    first_part = numerator / denominator\n\n    # calculate the second part of the fraction\n    second_part = (Decimal('3.5') + mixed_number5 + mixed_number6) / (Decimal('0.5') * (mixed_number7 + Decimal('4.1')))\n\n    # calculate the final result\n    ans = first_part / second_part\n\n    return ans\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        for i in range(4):\n            M_str = str(N)\n            M = int(M_str[:i] + M_str[i+1:])  # Remove one digit to create a new three-digit number\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate in terms of jobs per day\n    rate_A = 1 / 15\n    # B's work rate in terms of jobs per day\n    rate_B = 1 / 10\n    # Total work rate when both A and B are working together\n    combined_rate = rate_A + rate_B\n    \n    # Amount of work done by both A and B in 4 days\n    work_done = 4 * combined_rate\n    \n    # Remaining work to be completed\n    remaining_work = 1 - work_done\n    \n    # Days B needs to finish the remaining work alone\n    days_for_B = remaining_work / rate_B\n    \n    return days_for_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34)\n    part2 = (0.23 + 0.34 + 0.65)\n    part3 = (1 + 0.23 + 0.34 + 0.65)\n    part4 = (0.23 + 0.34)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    students_swimming = (percent_swimming / 100) * total_students\n    students_jogging = (percent_jogging / 100) * total_students\n    students_neither = (percent_neither / 100) * total_students\n\n    # Using Inclusion-Exclusion Principle:\n    students_both = students_swimming + students_jogging - (total_students - students_neither)\n\n    return students_both\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Since trees are planted at both ends, we subtract one spacing and then add back the two end trees\n    num_trees = ((road_length - tree_spacing) // tree_spacing) + 1 + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    number1 = 16\n    number2 = 28\n    \n    return gcd(number1, number2)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate per minute\n    linda_rate = 1 / 5\n    # Cici's rate per minute\n    cici_rate = 1 / 6\n    # Total rate per minute\n    total_rate = linda_rate + cici_rate\n    # Total time working in minutes (2 hours * 60 minutes/hour)\n    total_time = 2 * 60\n    \n    # Total problems solved\n    total_problems = total_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving, Amy would have amy - x apples and John would have john + x apples\n    # The condition says Amy has 4 more apples than John: (amy - x) = (john + x) + 4\n    # You can simplify this equation to find x\n    # x corresponds to the number of apples Amy has to give John\n    \n    # amy - x = john + x + 4\n    # 37 - x = 15 + x + 4\n    # 37 - 15 - 4 = x + x\n    # 18 = 2x\n    x = 18 // 2  # Using integer division since number of apples can't be fractional\n\n    return x\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - late_time % bus_interval\n\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for num in range(14, 17):\n        if num % 2 != 0:\n            return num\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_of_numbers = 37\n    total_numbers = 10\n\n    # Calculate total sum of numbers\n    total_sum = mean_of_numbers * total_numbers\n    \n    # Subtract the sum of known numbers from total sum to find the missing number\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    X, Y, Z = symbols('X Y Z')\n\n    equation1 = Eq(X, Y + 83)\n    equation2 = Eq(Z, X + 24)\n    equation3 = Eq(X + Y + Z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n\n    return solutions[Y]\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    answer = tens + tenths + hundredths\n\n    return answer\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_chan, mr_toh = symbols('mr_chan mr_toh')\n\n    equation1 = Eq((1/4) * mr_chan, (1/3) * mr_toh + 33)\n    equation2 = Eq(mr_chan + mr_toh, 1000)\n\n    solutions = solve((equation1, equation2), (mr_chan, mr_toh))\n\n    return solutions[mr_toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, sandra * 3 / 5)\n    equation3 = Eq(tasha, riley + 60)\n    \n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    current_height = 0\n    day = 0\n    while current_height < height:\n        day += 1\n        current_height += 10\n        if current_height >= height:\n            break\n        current_height -= day\n    return day\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # A piece of pasture can feed 14 goats for 15 days, \n    # so total units of grass required to feed one goat for one day is total_grass_goat\n    total_grass_goat = 14 * 15\n    \n    # The pasture can also feed 70 rabbits for 8 days,\n    # so the total units of grass to feed one rabbit for one day is total_grass_rabbit\n    total_grass_rabbit = 70 * 8\n    \n    # A goat eats as much as 4 rabbits\n    # So, total_grass_goat = 4 * total_grass_rabbit\n    # 14 goats * 15 days = 4 * (70 rabbits * 8 days)\n    # 14 * 15 = 4 * 70 * 8\n    # The total grass is therefore consistent in both scenarios and can be used to feed \n    # any combination of goats and rabbits for a certain number of days\n    \n    # goat_unit represents the amount of grass one goat eats in one day,\n    # which is the same as 4 rabbits, hence equal to 4 * rabbit_unit\n    goat_unit = 4\n    rabbit_unit = 1\n    \n    # Now calculate the daily consumption of grass for 17 goats and 20 rabbits\n    daily_consumption = (17 * goat_unit) + (20 * rabbit_unit)\n    \n    # The available amount of grass can feed 17 goats and 20 rabbits for how many days?\n    # total_grass / daily_consumption gives the number of days\n    total_grass = total_grass_goat  # this is same as total_grass_rabbit due to equivalence\n    days = total_grass / daily_consumption\n    \n    return days\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    a, b = 4, 3\n    ans = sum(int(str(a) * i) for i in range(1, b + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n\n    mean_savings = (jan_savings + feb_savings + mar_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "from itertools import permutations\n\ndef solution():\n    angel = \"0141705021\"\n    angel_perms = set([''.join(p) for p in permutations(angel)])\n    \n    devil = \"4005220912\"\n    \n    if devil in angel_perms:\n        return True # Andy can unlock the treasure chest because Devil is a permutation of Angel\n    else:\n        correct_passwords = list(angel_perms)\n        correct_password = correct_passwords[0]  # Just take the first correct password\n        return False, correct_password\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef repeating_decimal_to_fraction(integer_part, non_repeating_part, repeating_part):\n    numerator = int(non_repeating_part + repeating_part) - int(non_repeating_part)\n    denominator = (10 ** len(repeating_part) - 1) * 10 ** len(non_repeating_part)\n    return integer_part + Fraction(numerator, denominator)\n\ndef solution():\n    terms = [\n        (0, '', '01'),\n        (0, '1', '2'),\n        (0, '2', '3'),\n        (0, '3', '4'),\n        (0, '4', '5'),\n        (0, '5', '4'),\n        (0, '7', '8')\n    ]\n    \n    total = sum(repeating_decimal_to_fraction(i, nr, r) for i, nr, r in terms)\n    return total\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n    \n    # Define the symbol\n    a = symbols('a', positive=True)\n    \n    # Given equation\n    x = sqrt(a) - 2/sqrt(a)\n    \n    # Square 'x' to find 'x^2'\n    x2 = x**2\n    \n    # Calculate 'x^2 + 8x'\n    expression = x2 + 8*x\n    \n    # Simplify the expression\n    simplified_expr = simplify(expression)\n    \n    # Calculate the square root of the simplified expression\n    ans = sqrt(simplified_expr)\n    \n    return ans\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Splitting 6 into two or more positive integers\n    for i in range(1, 6):  # first number\n        for j in range(1, 6 - i):  # second number, must be smaller than the difference between 6 and the first number\n            k = 6 - i - j  # the sum of i, j, and k should be 6\n            if k > 0 and i != j and j != k and i != k:  # i,j,k should be positive and distinct if they exist\n                count += 1\n    # Dividing by 2 because counting (i, j, k) and (j, i, k) as same\n    return count // 2\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n\n    min_most_sheep = (sheep + pens - 1) // pens\n\n    return min_most_sheep\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    # Initialize the count of ways to 0\n    count = 0\n    # Iterate through each triplet of numbers in the given range\n    for i in range(2017, 2036):\n        for j in range(i+1, 2036):\n            for k in range(j+1, 2036):\n                # Check if the sum of the triplet is divisible by 4\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys_age = 18 * 16.2\n    total_girls_age = 27 * 16.7\n    total_age = total_boys_age + total_girls_age\n    mean_age = total_age / 45\n    return mean_age\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    import math\n\n    def lcm(x, y):\n        return x * y // math.gcd(x, y)\n\n    days_raye = 6\n    days_simon = 12\n    days_taylor = 16\n\n    lcm_raye_simon = lcm(days_raye, days_simon)\n    ans = lcm(lcm_raye_simon, days_taylor)\n\n    return ans\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    common_difference = 3\n\n    first_term = term_value - (term_position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To ensure Sara gets 5 balls of the same colour, we must consider the worst case scenario.\n    # If Sara takes out 4 green balls at most, she might still need to take out more yellow or red to reach 5 of the same colour.\n    # Similarly, she could take out 4 green and 4 yellow before getting a run of reds.\n    # The worst case scenario would be she takes out all green and yellow before getting five reds.\n    # Therefore, she must take at least 1 green + 1 yellow + 5 reds.\n    # But to be absolutely certain of 5 of the same colour, she needs to completely exhaust the other colours.\n    # So she needs to take 4 green + 4 yellow (the maximum before hitting 5 of the same color) and then any next ball (up to 5) will guarantee her 5 of the same color.\n    return (4 + 4 + 5)  # 4 green, 4 yellow, then she is sure to have 5 of the same color\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # total mass of 3 tables is equal to total mass of 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n\n    # a table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    solution = solve((equation1, equation2), (table, chair))\n\n    return solution[table]\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_code = \"0141705021\"\n    input_code = \"4005220912\"\n    \n    # We convert each digit into its corresponding letter in the word 'Angel'\n    angel_to_digit = {str(i): char for i, char in enumerate(\"Angel\")}\n    \n    # We now build the 'Angel' string based on the original code\n    angel_from_code = ''.join(angel_to_digit[digit] for digit in original_code)\n    \n    # And the 'Devil' string based on the input code\n    devil_from_code = ''.join(angel_to_digit[digit] for digit in input_code)\n    \n    # The correct password will be the digits corresponding to each character in the word 'Devil'\n    # We build the mapping from character to digit in the word 'Angel'\n    digit_to_angel = {char: str(i) for i, char in enumerate(\"Angel\")}\n    \n    # Now we use this mapping to convert 'Devil' into digits\n    correct_password = ''.join(digit_to_angel[char] for char in \"Devil\")\n    \n    # Andy can unlock the chest if his code is the same as the correct password\n    if devil_from_code == \"Devil\":\n        return True, \"Andy can unlock the treasure chest because he entered the correct password.\"\n    else:\n        return False, correct_password\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # in meters\n    sam_speed = 1  # in meters per second\n    ben_speed = 0.6  # in meters per second\n    total_time = 10 * 60  # 10 minutes converted to seconds\n\n    relative_speed = sam_speed + ben_speed  # relative speed when moving towards each other\n    distance_per_meeting = pool_length\n\n    # Number of meetings is total distance covered together divided by the length of the pool\n    num_meetings = total_time * relative_speed / distance_per_meeting\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Extracting digits of the first number\n    a = 8\n    b = 9\n    \n    # Extracting digits of the second number\n    c = 7\n    d = 5\n    \n    # Applying the new operation rule\n    result = (a * b) + (c * d)\n\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    ans = 5928 * 13\n    return ans\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    max_temp = max(temperatures)\n    min_temp = min(temperatures)\n    difference = max_temp - min_temp\n    return difference\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n\n    total_height_bob_cindy = 2 * average_bob_cindy\n    total_height = total_height_bob_cindy + height_doris\n    average_height = total_height / 3\n\n    return average_height\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5 / 1)\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    sum_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_in_10_years\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    average_boys = 20\n    average_girls = 60\n\n    # Let the number of boys be x\n    # Then the number of girls will be (total_pupils - x)\n    # total pencils = average_boys * x + average_girls * (total_pupils - x)\n    # Solve for x\n\n    x = symbols('x')\n    equation = Eq(average_boys * x + average_girls * (total_pupils - x), total_pencils)\n\n    number_of_boys = solve(equation, x)\n\n    return number_of_boys[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of pies for both be x\n    x = symbols('x')\n    \n    # After Mrs Tan bought 12 more pies and Mrs Lim gave away 4 pies\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve the equation\n    original_pies = solve(equation, x)[0]\n    \n    return original_pies\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from itertools import permutations\n\n    # Digits we can use to form the numbers\n    digits = '135'\n\n    # Generating all different permutations of the given digits without repetition\n    perm_list = permutations(digits, len(digits))\n\n    # Counting the number of permutations formed\n    num_of_numbers = len(list(perm_list))\n\n    return num_of_numbers\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "from datetime import datetime\n\ndef solution():\n    time_format = \"%H:%M\"\n    departure_time = \"6:35\"\n    arrival_time = \"10:22\"\n    \n    departure = datetime.strptime(departure_time, time_format)\n    arrival = datetime.strptime(arrival_time, time_format)\n    \n    duration = arrival - departure\n    \n    return duration.total_seconds() // 60\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"345634563456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n    \n    full_patterns = 50 // pattern_length\n    remaining_digits = 50 % pattern_length\n    \n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3/5) / (5/7) / (7/9) / (9/13) / (13/15)\n    return ans\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n    \n    cards = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n    \n    for candy_combo in combinations(cards, 2):\n        candy_product = prod(candy_combo)\n        for candice_combo in combinations(cards, 3):\n            candice_product = prod(candice_combo)\n            if candy_product == candice_product:\n                all_picked_numbers = set(candy_combo).union(set(candice_combo))\n                not_picked = (set(cards) - all_picked_numbers).pop()\n                return not_picked\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Let's assume father's current age to be father_age\n\n    # When Tom reaches his father's current age, the age difference will still be the same.\n    # So father's future age (when Tom reaches his father's current age) - father's current age = \n    # father's current age - Tom's current age\n\n    father_age = (father_future_age + tom_age) / 2\n\n    return int(father_age)\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    # Calculate each part of the expression\n    part1 = (3/10) * 54\n    part2 = 0.3 * 45\n    part3 = 30 / 100\n\n    # Summing all parts to get the final answer\n    ans = part1 + part2 + part3\n\n    return ans\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    num1 = 17\n    num2 = 35\n    halfway_number = (num1 + num2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    three_fifths_students_sweets = 6\n    one_fourth_remainder_sweets = 4\n    rest_students_sweets = 5\n\n    # Calculate the number of sweets given to the 3/5 of the students\n    sweets_three_fifths = (3/5) * total_sweets\n    \n    # Calculate the number of students that make up 3/5 of the class\n    students_three_fifths = sweets_three_fifths / three_fifths_students_sweets\n    \n    # Calculate the remainder of the sweets\n    remainder_sweets = total_sweets - sweets_three_fifths\n    \n    # Calculate the number of sweets given to the 1/4 of the remainder\n    sweets_one_fourth = (1/4) * remainder_sweets\n    \n    # Calculate the number of students that received 4 sweets each\n    students_one_fourth = sweets_one_fourth / one_fourth_remainder_sweets\n    \n    # Calculate the number of sweets given to the rest of the students\n    sweets_rest = remainder_sweets - sweets_one_fourth\n    \n    # Calculate the number of students that received 5 sweets each\n    students_rest = sweets_rest / rest_students_sweets\n    \n    # Calculate the total number of students\n    total_students = students_three_fifths + students_one_fourth + students_rest\n\n    return int(total_students)\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:  # 1, 2, and 3 are not composite numbers\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for odd_number in range(999, 0, -2):  # Start high and go down by odds\n        found = False\n        for i in range(2, odd_number):\n            if is_composite(i):\n                for j in range(2, odd_number - i):\n                    if is_composite(j) and is_composite(odd_number - i - j):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            return odd_number\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    difference = (3 + 1/4) - (1 + 3/4)\n    return float(difference)\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    # Least Common Multiple of the two packet sizes\n    days_until_sync = lcm(25, 20)\n\n    # Starting from 1st of March, calculate the date she will start new packets\n    day = 1 + days_until_sync\n    month = 3  # since March is the 3rd month\n    \n    # Calculate the correct month and day accounting for days in each month\n    # Assuming no leap year, so 31 days in March, 30 days in April, etc.\n    \n    # March has 31 days, so deduct this for April\n    if day > 31:\n        day -= 31\n        month += 1\n    \n    # April has 30 days, so deduct this for May if needed\n    if day > 30:\n        day -= 30\n        month += 1\n    \n    # Format the final date as \"day-month\"\n    date = f\"{day}-{month}\"\n\n    return date\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            sum += number\n    return sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    for side1 in range(1, perimeter//2):\n        for side2 in range(side1, (perimeter - side1) // 2 + 1):\n            side3 = perimeter - side1 - side2\n            if side1 + side2 > side3 and side1 <= side2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 15\n    tax_percent = 8\n\n    tip = bill * (tip_percent / 100)\n    tax = bill * (tax_percent / 100)\n\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using the Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_final_amount = 100\n\n    strawberries_mother_gave = lena_final_amount - (lena_had_initially - lena_gave_away)\n\n    return strawberries_mother_gave\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Calculate the Greatest Common Divisor (GCD) for the three classes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    total_ways = (7 * 5 * 2) + 4 * 2 + 6\n    return total_ways\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n\n    passed_only_first_exam = total_students - passed_both_exams - failed_second_exam\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining the symbols\n    elder, younger = symbols('elder younger')\n\n    # creating the equations based on the problem statement\n    equation1 = Eq(elder + younger, 42)  # sum of their current ages\n    # a few years ago: elder - few_years = younger\n    # and younger was half the elder's current age: younger = elder / 2\n    # Combining both equations: elder - few_years = elder / 2\n    # Simplifying the equation: few_years = elder / 2\n    # We already know that few years ago the elder age is same as current younger age\n    # So few years is also equal to elder - younger, thus:\n    # elder - younger = elder / 2; which simplifies to younger = elder / 2\n    equation2 = Eq(younger, elder / 2)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # returning the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle_count = 5\n    days = 10\n    \n    # Total grass needed for one cattle over the given days\n    hay_per_cattle_for_days = total_hay / cattle_count\n    \n    # Grass eaten by one cattle in a day\n    grass_per_cattle_per_day = hay_per_cattle_for_days / days\n    \n    return grass_per_cattle_per_day\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a pen\n    pen = symbols('pen')\n\n    # Each pencil costs £2 and 3 pencils are bought\n    pencil_cost = 2 * 3\n\n    # Equation: Pip bought 2 pens and 3 pencils (£6) for a total of £20\n    total_cost_equation = Eq(2 * pen + pencil_cost, 20)\n\n    # Solve the equation for the price of a pen\n    pen_price = solve(total_cost_equation, pen)\n\n    return pen_price[0]\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    total_cupcakes = 255\n    # Let x be the number of chocolate cupcakes\n    # Then 255 - x is the number of cheese cupcakes\n    # Equation: (1 - 0.4)x = (1 - 0.75)(255 - x)\n    x = symbols('x')\n    equation = Eq((1 - 0.4) * x, (1 - 0.75) * (total_cupcakes - x))\n    number_of_chocolate_cupcakes = solve(equation, x)[0]\n\n    # Calculate the number of cupcakes left after selling\n    chocolate_left = (1 - 0.4) * number_of_chocolate_cupcakes\n    cheese_left = total_cupcakes - number_of_chocolate_cupcakes - ((total_cupcakes - number_of_chocolate_cupcakes) * 0.75)\n\n    # Since the problem states he is left with an equal number of cupcakes, we return the amount left for one type\n    return chocolate_left\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    total_students = 39\n    boy_ratio = 1/4\n    girl_ratio = 2/5\n\n    # Equation representing the relationship between the number of boys and girls.\n    equation1 = Eq(boy_ratio * boys, girl_ratio * girls)\n\n    # Equation representing the total number of students.\n    equation2 = Eq(boys + girls, total_students)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    factors_of_210 = []\n    # Find all factors of 210\n    for i in range(1, 11):\n        if 210 % i == 0:\n            factors_of_210.append(i)\n            \n    # Find the triplet of factors which are the ages of the children\n    for age1 in factors_of_210:\n        for age2 in factors_of_210:\n            for age3 in factors_of_210:\n                if age1 * age2 * age3 == 210 and len(set([age1, age2, age3])) == 3:\n                    return min(age1, age2, age3)\n                    \nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_by_frost_fraction = 3 / 8\n    killed_by_frost = total_seedlings * killed_by_frost_fraction\n    survived_seedlings = total_seedlings - killed_by_frost\n    return int(survived_seedlings)\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n\n    full_days = total_locusts // daily_consumption  # Number of complete days\n    remaining_locusts = total_locusts % daily_consumption  # Locusts left on the last day\n\n    if remaining_locusts == 0:\n        locusts_on_last_day = daily_consumption    # If no locusts remain, the last full day Jerry gets 12 locusts\n    else:\n        locusts_on_last_day = remaining_locusts    # If locusts remain, that's what Jerry gets on the last day\n\n    return locusts_on_last_day\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $5 and $10 notes\n    num_five_notes, num_ten_notes = symbols('num_five_notes num_ten_notes')\n\n    # Total number of notes\n    equation1 = Eq(num_five_notes + num_ten_notes, 116)\n\n    # Spent 60% of $10 notes and 25% of $5 notes\n    spent_ten_notes = 0.6 * num_ten_notes\n    spent_five_notes = 0.25 * num_five_notes\n\n    # After spending, the ratio is 4:7, $10 notes to $5 notes respectively\n    remaining_ten_notes = num_ten_notes - spent_ten_notes\n    remaining_five_notes = num_five_notes - spent_five_notes\n    equation2 = Eq(4 * remaining_five_notes, 7 * remaining_ten_notes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (num_five_notes, num_ten_notes))\n\n    # Calculate the total cost of the bag\n    total_spent = spent_ten_notes * 10 + spent_five_notes * 5\n    bag_cost = total_spent.subs(num_ten_notes, solutions[num_ten_notes]).subs(num_five_notes, solutions[num_five_notes])\n\n    return bag_cost.evalf()\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the number of stickers Don had originally,\n    # and b represent the number of stickers Ben had originally\n    d, b = symbols('d b')\n\n    # The ratio of Don's stickers to Ben's stickers was 2 : 3\n    ratio_original = Eq(d / b, 2 / 3)\n\n    # After Don bought another 10 stickers and Ben lost 5 stickers,\n    # the ratio became 6 : 7\n    ratio_new = Eq((d + 10) / (b - 5), 6 / 7)\n\n    # Solving the system of equations\n    solutions = solve((ratio_original, ratio_new), (d, b))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    first_term = 2\n    last_term = 2016\n    even_terms_count = (last_term - first_term) // 4 + 1\n    odd_terms_count = even_terms_count\n\n    even_sum = even_terms_count * (first_term + last_term) // 2\n    odd_sum = odd_terms_count * (first_term + 1 + last_term - 1) // 2\n\n    ans = even_sum - odd_sum\n\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    total_toys = amy_toys + sally_toys\n    toys_each_after_sharing = total_toys // 2\n    toys_amy_gives_to_sally = toys_each_after_sharing - sally_toys\n\n    return toys_amy_gives_to_sally\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    \n    return william\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # The largest product for a fixed sum occurs when the numbers are as equal as possible.\n    a = 31 // 3\n    b = a\n    c = 31 - a - b\n    \n    # Since 31 is not divisible by 3, one number will be larger by 1 or 2. Check both cases.\n    prod1 = a * b * c\n    prod2 = (a + 1) * (b) * (c - 1)\n    prod3 = (a) * (b + 1) * (c - 1)\n    \n    return max(prod1, prod2, prod3)\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    ans = sum(i * (i + 2) for i in range(1, 40, 2))\n    return ans\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    gallons_needed = milk_per_cup * total_cups\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            number = int(f\"21{x}{y}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    \n    # Trees are planted at both ends, so we add 1 extra tree to the total count\n    num_trees = (road_length // tree_spacing) + 1 \n    \n    return num_trees\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # We are dividing the arrangement into two cases:\n    # Case 1: The triplet sisters are treated as one unit.\n    # This gives us 5 \"spaces\" to fill (triplet sisters, 2 boys, and 2 other students).\n\n    # Case 2: The two boys cannot stand next to each other.\n    # We will first arrange the 5 \"spaces\", and then subtract the cases where the boys are together.\n\n    # Total arrangements without restriction for 5 \"spaces\":\n    total_cases = factorial(5)\n\n    # Arrangements of the two boys next to each other:\n    # We consider the boys as one unit, therefore we have 4 \"spaces\" (boys, triplet sisters, and 2 other students).\n    boys_together = factorial(4)\n\n    # Multiply by 2 because the boys can switch places within their \"unit\"\n    boys_together *= 2\n\n    # Total numbers of ways the sisters can arrange among themselves, since they always stay together.\n    sisters_arrangement = factorial(3)\n\n    # Subtract the restricted cases (boys together) from the total cases.\n    valid_cases = total_cases - boys_together\n\n    # Multiply the valid cases by the number of internal arrangements for sisters.\n    ans = valid_cases * sisters_arrangement\n\n    return ans\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n    \n    # Using the Pigeonhole Principle\n    min_students_in_max_birthday_week = (total_students // days_in_week) + 1\n\n    return min_students_in_max_birthday_week\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    girls_wearing_glasses = (total_girls * percentage_wearing_glasses) / 100\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Make an assumption that the vacation starts on a Friday.\n    # There will be 55 days of vacation.\n    # Every 7 days contains 1 Friday.\n    full_weeks = 55 // 7\n    \n    # Calculate the remaining days after full weeks.\n    remaining_days = 55 % 7\n    \n    # If there are more than or equal to 6 remaining days, it means one more Friday can occur.\n    # Since we assumed that vacation starts on a Friday, this additional Friday is counted.\n    if remaining_days >= 6:\n        extra_friday = 1\n    else:\n        extra_friday = 0\n    \n    # Calculate the total number of Fridays.\n    total_fridays = full_weeks + extra_friday\n\n    return total_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    # The given complex fraction is 3/(1 - 1/2)\n    # Simplify the denominator: 1 - 1/2 = 1/2\n    # Now the fraction is 3/(1/2)\n    # Dividing by a fraction is the same as multiplying by its reciprocal\n    # Thus, 3/(1/2) becomes 3*(2/1) or simply 3*2\n    ans = 3*2\n    return ans\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_pen = pen_cost // pencil_cost\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    number = 8386\n    divisor = 14\n    ans = number // divisor\n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of given divisors\n    num_lcm = lcm(2, 3, 4, 5, 6, 8, 9)\n    \n    # Find the smallest N that gives a remainder of 5 when divided by 7\n    # Start with the lcm value since N is at least as large as the lcm\n    # Increments are the lcm itself because we want to preserve divisibility by 2, 3, 4, 5, 6, 8, 9.\n    N = num_lcm\n    while True:\n        if N % 7 == 5:\n            return N\n        N += num_lcm\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    total_cost = 7 * cost_per_mug + 5 * cost_per_pen\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    fraction_away = 1 / 5\n\n    pupils_away = total_pupils * fraction_away\n    pupils_go_to_cathedral = total_pupils - pupils_away\n\n    return pupils_go_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    minutes_per_child_per_song = 3\n    number_of_songs = 2\n    number_of_children = 50\n\n    total_minutes = minutes_per_child_per_song * number_of_songs * number_of_children\n    return total_minutes\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    # Convert 25% to decimal\n    percentage_decimal = 25 / 100\n\n    # Compare with 0.3\n    if percentage_decimal > 0.3:\n        ans = '25%'\n    else:\n        ans = '0.3'\n\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(x, 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5%\n    amount_with_interest = principal\n\n    years = 0\n    while amount_with_interest < final_amount:\n        amount_with_interest += amount_with_interest * interest_rate\n        years += 1\n        \n    return years\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # least common multiple of 3 and 7\n    ans = lcm\n    while True:\n        if str(ans).endswith('2'):\n            return ans\n        else:\n            ans += lcm\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    total_weight_without_3_apples = 280\n    weight_of_3_apples = total_weight_with_apples - total_weight_without_3_apples\n    \n    # Since 5 apples are enough to weigh 580 grams, we have to subtract the weight of 5 apples\n    # from total weight (580 grams) to find the weight of the basket.\n    # We calculate the weight of 2 apples first.\n    weight_of_2_apples = total_weight_with_apples - weight_of_3_apples - total_weight_without_3_apples\n    \n    # Then the weight of the basket is the weight of 5 apples minus the weight of 5 apples.\n    weight_of_basket = total_weight_with_apples - weight_of_3_apples - weight_of_2_apples\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    needed_loafs = 35\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    number_of_weeks = 2\n    total_days = days_in_a_week * number_of_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value_1 = 3 * (10**2)\n    place_value_2 = 3 * (10**5)\n    difference = place_value_2 - place_value_1\n    return difference\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, cakes = symbols('cookies cakes')\n    \n    equation1 = Eq(cookies, 3 * cakes)                          # There are thrice as many cookies as cakes\n    equation2 = Eq(cookies + cakes - (39 + 17), 48)             # The remainder after selling is 48\n    equation3 = Eq(cookies - 39, cakes - 17 + (cookies - cakes))  # Equating the remaining cookies to the total left after sales\n\n    solutions = solve((equation1, equation2, equation3), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39  # Calculate the cookies left after the sale\n\n    return cookies_left\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    num = 2**17\n    return num % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    number_of_pages = sum(range(1, 21))\n    return number_of_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # We can use the Frobenius coin problem formula: G = ab - a - b, where a and b are coprime\n    a = 4\n    b = 5\n    # Since 4 and 5 are coprime, we can directly apply the formula\n    G = a * b - a - b\n    return G\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    total_sum = 1001\n\n    # Start iterating from the highest possible gcd value, which cannot be higher than the total sum itself\n    for d in range(total_sum, 0, -1):\n        # If the total sum is divisible by d, it could be the gcd of the 10 numbers\n        if total_sum % d == 0:\n            return d\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let J, A, and O represent the number of hours John, Angus, and Jonah would take to build the wall individually.\n    # Let 1/J, 1/A, and 1/O represent their respective rates of work per hour.\n    J, A, O = symbols('J A O')\n\n    # John, Jonah, and Angus together take 27 hours to build the wall.\n    # Therefore, their combined rate is 1/27 wall per hour.\n    equation1 = Eq(1/J + 1/O + 1/A, 1/27)\n\n    # Jonah and Angus together take 36 hours to build the wall.\n    # Therefore, their combined rate is 1/36 wall per hour.\n    # We assume Jonah and Angus work at the same rate, therefore 1/A = 1/O.\n    equation2 = Eq(2/A, 1/36)\n\n    # We want to find the number of hours John would take to build the wall on his own.\n    # This means we need to solve for J.\n    # We can substitute 1/A with 1/O in the first equation to get a system of two equations with two unknowns.\n    equations = (equation1.subs(O, A), equation2)\n\n    # Solving the system of equations.\n    solutions = solve(equations, (J, A))\n\n    # We are specifically interested in the solution for J, which is the time John would take to build the wall on his own.\n    return solutions[J]\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Ages five years ago\n    combined_age_five_years_ago = 14\n    \n    # Since five years have passed, each person has aged 5 years\n    # So we add 5*2 = 10 years to the combined age five years ago\n    combined_age_now = combined_age_five_years_ago + 10\n\n    # In 3 years, each person will age 3 years\n    # So we add 3*2 = 6 years to the combined age now\n    combined_age_in_3_years = combined_age_now + 6\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 45\n    length_ribbon2 = 30\n\n    longest_length = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_length\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_weight, pear_weight = symbols('apple_weight pear_weight')\n    \n    # 3 apples + 4 pears = 1.81 kg\n    equation1 = Eq(3 * apple_weight + 4 * pear_weight, 1.81)\n    \n    # 5 apples + 2 pears = 1.71 kg\n    equation2 = Eq(5 * apple_weight + 2 * pear_weight, 1.71)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple_weight, pear_weight))\n    \n    # Calculate the weight of 4 apples and 4 pears\n    total_weight = 4 * solutions[apple_weight] + 4 * solutions[pear_weight]\n    \n    return total_weight\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Ermintrude lays 50 eggs a day\n    eggs_per_day = 50\n\n    # Eggs become adults in 30 days\n    days_to_adult = 30\n\n    # Calculate the number of days eggs are laid before they start to become adults\n    lay_period = 40 - days_to_adult\n\n    # Calculate the number of new adult fleas (only the one's that have had 30 days to develop)\n    new_adult_fleas = lay_period * eggs_per_day\n    \n    return new_adult_fleas\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    total_french = 15\n    total_japanese = 12\n    total_italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n    \n    total_people = (total_french + total_japanese + total_italian\n                   - french_japanese - french_italian - japanese_italian\n                   + all_three)\n    \n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3 / 4\n    water_in_drink = total_drink * water_fraction\n    return water_in_drink\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let's denote the number of boys as b and the number of girls as g.\n    # According to the problem, if we remove 1/11th of the boys and 5 girls, the number of boys and girls become equal.\n    # So, we can write the following equation:\n    # b - (1/11)b = g - 5\n    # Also, we know that the total number of students is b + g = 152.\n\n    # We have two equations:\n    # b - (1/11)b = g - 5  ->  Equation (1)\n    # b + g = 152           ->  Equation (2)\n    \n    # Let's solve these equations to find the value of b.\n    \n    # From Equation (2), we can express g in terms of b:\n    # g = 152 - b\n    \n    # Now we substitute this expression for g into Equation (1):\n    # b - (1/11)b = (152 - b) - 5\n    # Simplifying, we get:\n    # b - (1/11)b = 147 - b\n    # 10/11b + b = 147\n    # (21/11)b = 147\n    # b = 147 * (11/21)\n    # b = 7 * 11\n    # b = 77\n    \n    # So the original number of boys is 77.\n    \n    return 77\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total = story_books + magazines\n    return total\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 21 + Fraction(21, 286)\n    num2 = 6 + Fraction(647, 2530)\n    num3 = 1 + Fraction(1370, 2829)\n\n    ans = num1 / num2 * num3\n\n    return ans\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    number_of_rows = 22\n\n    total_students = (number_of_rows / 2) * (2 * first_term + (number_of_rows - 1) * common_difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(f\"5{abcd}\")\n        N = int(f\"{abcd}5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n    \n    solutions = solve((equation1, equation2), (anne, maria))\n    \n    return solutions[anne]\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the rate at which Star types and n be the rate at which Nini types\n    s, n = symbols('s n')\n\n    # s * 5 + n * 20 = 1 job\n    eq1 = Eq(s * 5 + n * 20, 1)\n\n    # s * 20 + n * 8 = 1 job\n    eq2 = Eq(s * 20 + n * 8, 1)\n\n    # Solve the equations for s and n\n    solutions = solve((eq1, eq2), (s, n))\n\n    # Find out how long it will take Nini to finish the job by herself\n    # The rate n means Nini finishes n part of the job in one hour,\n    # so it takes 1/n hours to finish 1 job\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Initialize the count for different ways to distribute candy\n    count = 0\n    \n    # Check every odd divisor of 140 since each pile should have an odd number of candies\n    # 140 can be factored into 2^2 * 5 * 7, to have odd divisors we ignore the 2^2 part\n    # The possible odd divisors are the factors of 5 * 7 = 35, which are 1, 5, 7, 35\n    for divisor in [1, 5, 7, 35]:\n        # If the number of candies in each pile is odd, increment the count\n        if 140 % divisor == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # We will loop through all 2-digit numbers and check the conditions\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the original cuboid\n    length, width, height = 6, 10, 12\n    # Assuming the cuboid is cut into equal small cubes, we find the side of a small cube,\n    # Since the volume of the big cuboid is 720 times the volume of a small cube\n    volume_small_cube = (length * width * height) / 720\n    side_small_cube = volume_small_cube ** (1/3)  # Cube root to find the side of the small cube\n\n    # Now, we count the small cubes with exactly one face painted.\n    # We calculate the number for each face and multiply by 2 (for opposite faces)\n    # The painted cubes are on the outer layer, so we subtract 2 small cubes from each dimension \n    # (1 from each end) to get the inner dimension, and then we get the number of painted cubes\n    # on one face as the product of those two inner dimensions.\n    \n    # For the length & width face:\n    face_lw = (length - 2 * side_small_cube) * (width - 2 * side_small_cube)\n    # For the length & height face:\n    face_lh = (length - 2 * side_small_cube) * (height - 2 * side_small_cube)\n    # For the width & height face:\n    face_wh = (width - 2 * side_small_cube) * (height - 2 * side_small_cube)\n\n    # Total number of small cubes with exactly one face painted is the sum for each face times\n    # 2 (for the opposite faces)\n    num_painted_cubes = 2 * (face_lw + face_lh + face_wh)\n\n    return int(num_painted_cubes)\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    return 20 * 19\n    \nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom has taken 4 stones from Stack B, so the number of stones left are:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    \n    # Jerry wants to ensure that after his turn, the number of stones in both \n    # stacks is the same (which means stacks can be mirrored). In this way, no \n    # matter how Tom picks stones in later turns, Jerry can always mirror Tom's \n    # moves and eventually pick the last stone.\n    \n    # Since Tom has already taken from Stack B, Jerry should also take from Stack B.\n    stones_to_take = 20 - 16\n    stack = 'B'\n    \n    return stones_to_take, stack\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet in a newspaper contains 4 page numbers\n    # Since Johnson takes the third sheet, he takes the pages: 2*4 + 1, 2*4 + 2, 2*4 + 3, 2*4 + 4\n    # This corresponds to pages 9, 10, 11, and 12\n    # He sums up the page numbers of these pages\n    pages_sum = 9 + 10 + 11 + 12\n    \n    return pages_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    proportion_girls = 3/7\n    girls = total_students * proportion_girls\n    return int(girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017/2018) + (20172017/20182018)\n    denominator = 201720172017/201820182018\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2  # since 2 peaches give 3 apples, 1 peach gives 1.5 apples\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_used = 933\n    digits_per_page = 0\n    page_number = 1\n    while digits_used > 0:\n        if page_number < 10:\n            digits_per_page = 1\n        elif page_number < 100:\n            digits_per_page = 2\n        elif page_number < 1000:\n            digits_per_page = 3\n        else:\n            digits_per_page = 4\n        digits_used -= digits_per_page\n        if digits_used >= 0:\n            page_number += 1\n    return page_number - 1\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    # Given expression simplifies to 100 as all other terms cancel each other out.\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice = 30 * 5\n    total_orange_juice = 50 * 3\n    total_peach_juice = 20 * 10\n    total_cups = 30 + 50 + 20\n    total_cost = total_apple_juice + total_orange_juice + total_peach_juice\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    # From 1 to 9, there are 9 numbers, each with 1 digit, totaling 9 * 1 = 9 digits\n    one_digit = 9 * 1\n    \n    # From 10 to 91, there are 91 - 10 + 1 = 82 numbers, each with 2 digits, totaling 82 * 2 = 164 digits\n    two_digits = (91 - 10 + 1) * 2\n\n    # Total digits\n    total_digits = one_digit + two_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert 9:15 PM to minutes\n    end_time = (11 * 60) + 6    # Convert 11:06 PM to minutes\n\n    duration = end_time - start_time\n\n    return duration\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n    \n    # Minimum number of milk chocolates that have soft-centres\n    min_soft_milk = max(0, soft_centre_chocolates - (total_chocolates - plain_chocolates))\n    \n    # Maximum number of plain chocolates that can have soft-centres\n    max_soft_plain = plain_chocolates - max(0, (plain_chocolates + (total_chocolates - soft_centre_chocolates)) - total_chocolates)\n    \n    # Plain chocolates with soft-centres:\n    soft_plain = plain_chocolates - min_soft_milk\n    \n    return soft_plain if soft_plain == max_soft_plain else (min_soft_milk, max_soft_plain)\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Since each box has 10 blue, 15 red, 20 black, and 25 green pens,\n    # taking 20 pens from Box A means that Box A now has:\n    # - at least 5 blue pens, because max taken can be 10 and there were at least 10 to start with\n    # - at least 10 red pens, because max taken can be 15 and there were at least 15 to start with\n    # - at least 15 black pens, because max taken can be 20 and there were at least 20 to start with\n    # - at least 20 green pens, because max taken can be 25 and there were at least 25 to start with\n    \n    # With the removed 20 pens, Box B will have at least:\n    # - 20 blue pens\n    # - 25 red pens\n    # - 30 black pens\n    # - 35 green pens\n\n    # To ensure Jane has at least 15 pens of each colour in Box A, we have to return at least:\n    # - 10 blue pens to bring the total to 15\n    # - 5 red pens to bring the total to 15\n    # - 0 black pens since we already have at least 15 (no pens need to be returned for this color)\n    # - 0 green pens since we already have at least 15\n\n    # Thus, we must return 10 blue pens and 5 red pens to ensure 15 of each colour in Box A, totalling:\n    pens_to_return = 10 + 5  # 10 blue + 5 red\n    return pens_to_return\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_violin_players = 12.5\n    num_violin_players = 11\n\n    total_pupils = (num_violin_players * 100) / percentage_violin_players\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Initialize the difference between boys and girls\n    difference = 32\n\n    # Start with a square of side length 1 (which would be all boys in this case)\n    # and keep increasing the side length to check the difference between boys and girls.\n    # Since we're dealing with a square array, the difference in count will always be even,\n    # hence we can start with side 3 (since side 1 gives us no girls and we know we need both).\n    side_length = 3\n    while True:\n        # Calculate the number of students in the outer layer (which are all boys)\n        # for a square with the current side length. There are 4 sides, each with\n        # \"side_length\" students, minus the 4 corners which are counted twice.\n        boys = 4 * side_length - 4\n\n        # Calculate the number of students in the next inner layer (which are all girls)\n        # which is the \"square\" remaining when the outer layer of boys is removed.\n        # We substract 2 twice because we remove one row and one column from each of the 2 dimensions.\n        girls = 4 * (side_length - 2) - 4\n\n        # Check if the current arrangement gives us the exact difference we're looking for\n        if boys - girls == difference:\n            # To find the total number of students, we calculate the sum of the students\n            # in layers alternating between boys and girls until the innermost layer.\n            total_students = 0\n            for current_side_length in range(side_length, 0, -2):\n                total_students += (4 * current_side_length - 4)\n            return total_students\n\n        # Move on to the next square size by increasing the side length\n        side_length += 2\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the dividend (D) and the divisor (d)\n    D, d = symbols('D d')\n    \n    # Equation 1: The quotient is 29 (D = 29*d + the remainder)\n    eq1 = Eq(D, 29*d + 11)\n    \n    # Equation 2: The sum of the dividend and the divisor is 431\n    eq2 = Eq(D + d, 431)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (D, d))\n    \n    # Calculate the difference between the dividend and the divisor\n    difference = solutions[D] - solutions[d]\n    \n    return difference\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of coins for each denomination\n    x = symbols('x')\n\n    # Equations based on the problem statement\n    total_sum = Eq(1*x + 2*x + 5*x + 10*x, 90)  # The total sum of coins in pence\n\n    # Solve the equation for x\n    solution = solve(total_sum, x)\n\n    # The total number of coins is 4 times x since we have 4 types of coins\n    total_coins = 4 * solution[x]\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a = apples, and p = pears\n    a, p = symbols('a p')\n\n    # Equations based on the problem statement\n    equation1 = Eq(a + p, 105)  # There were a total of 105 apples and pears at first\n    equation2 = Eq(a - a/3, 5*(p - 2*p/5)/6)  # After selling, 5/6 as many apples as pears left\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, p))\n\n    # Calculate the total number of apples and pears sold\n    apples_sold = solutions[a] / 3\n    pears_sold = 2 * solutions[p] / 5\n    total_sold = apples_sold + pears_sold\n\n    return total_sold\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of stickers Mr Ya has\n    stickers = symbols('stickers')\n    \n    # Number of pupils\n    pupils = symbols('pupils')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5 / 12\n    blue_cars_percentage = 20 / 100\n\n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(B / A, 5 / 4)\n    equation2 = Eq(C / B, 6 / 5)\n    equation3 = Eq(C, A + 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    group_of_four = factorial(4)     # Permutations of A, B, C, and D in their group\n    others = factorial(8)            # Permutations of the remaining 8 students\n    groups_permutation = factorial(9) # The group of four is considered a single unit now, so there are 9 units to permute\n    \n    total_permutations = group_of_four * others * groups_permutation\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Since each student plays every other student once, there are 5 games each student plays\n    # Total points if there were no ties (wins * 2 points per win)\n    # Each pair of students generates a total of 2 points per game\n    total_games = 6 * 5 // 2  # Total games is (6 choose 2)\n    total_points = total_games * 2  # Each game generates 2 points\n    \n    # Sum of the points of the five students\n    points_known = 7 + 6 + 5 + 4 + 3\n    # The sixth student points is the remainder to reach total points\n    remaining_points = total_points - points_known\n    \n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B', real=True, positive=True)\n\n    eq1 = Eq(A / B, 5 / 3)\n    eq2 = Eq((A - 10) / (B + 10), 7 / 5)\n\n    solution_dict = solve((eq1, eq2), (A, B))\n    A_value = solution_dict[A]\n    B_value = solution_dict[B]\n\n    return A_value + B_value\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 5 / 3\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 2) and (num % 5 == 2) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product = product // 10\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to grams for easy comparison\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    \n    # Find the index of the largest mass\n    max_index = masses.index(max(masses))\n    \n    # Return the largest mass with the original units\n    units = ['g', 'kg', 'g', 'kg', 'g', 'g', 'g']\n    ans = f\"{masses[max_index]}{units[max_index]}\"\n    \n    return ans\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    first_term = 22\n    last_term = 62\n    total_players = 378\n\n    # number of terms n in the sequence can be found using the formula for the sum of an arithmetic sequence:\n    # total_players = (n / 2) * (first_term + last_term)\n    # We rearrange the formula to find n:\n    # n = (2 * total_players) / (first_term + last_term)\n    n = (2 * total_players) / (first_term + last_term)\n\n    # To find the difference (d) we use the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * d\n    # We rearrange the formula to solve for d:\n    # d = (last_term - first_term) / (n - 1)\n    difference = (last_term - first_term) / (n - 1)\n\n    return int(difference)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Total number of barks in 1000 days\n    total_weeks = 1000 / 7\n    total_barks = total_weeks * 3\n    \n    # Probability of thief being there when dog barks\n    theft_bark_prob = 0.9\n    \n    # Since there are only 2 thefts, we adjust the probability\n    # of the dog barking during the occurrence of the theft\n    # by considering the proportion of theft barks to total barks\n    theft_bark_count = 2 * theft_bark_prob\n    prob_barking_during_theft = theft_bark_count / total_barks\n    \n    return prob_barking_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n    \n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    number_girls = fraction_girls * total_children\n    number_boys = total_children - number_girls\n    return int(number_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If Mr. Ya gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(stickers - 13*pupils, 190)\n\n    # If Mr. Ya gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest possible difference would occur when the numbers are as close to each other as possible.\n    # Let's first make the smallest nine-digit number with the digits 1 to 9:\n    smallest_number = int(''.join(map(str, sorted(range(1, 10)))))\n\n    # Now let's make the largest nine-digit number that is closest to the smallest number.\n    # We do this by taking the smallest number and swapping the last two digits.\n    # Since the smallest number is in ascending order, by swapping the last two digits\n    # we get the largest number closest to it.\n    num_list = list(str(smallest_number))\n    num_list[-1], num_list[-2] = num_list[-2], num_list[-1]\n    largest_number = int(''.join(num_list))\n\n    # The difference between these two numbers is the smallest possible difference.\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of bricks at first as b.\n    b = symbols('b')\n    \n    # According to the problem,\n    # First trip they moved (1/2 * b) - 26 bricks\n    # Remaining bricks after first trip: b - ((1/2 * b) - 26)\n    \n    # On second trip they moved (1/2 * remaining bricks after first trip) + 11\n    # Remaining bricks after second trip: remaining bricks after first trip - ((1/2 * remaining bricks after first trip) + 11)\n    \n    # On third trip they moved 68 bricks.\n    # Remaining bricks: remaining bricks after second trip - 68\n    \n    # There were 25 bricks still unmoved, so\n    # remaining bricks after second trip - 68 = 25\n    \n    # Equation representing the complete process:\n    equation = Eq(b - ((1/2 * b) - 26) - (1/2 * (b - ((1/2 * b) - 26)) + 11) - 68, 25)\n    \n    # Solving the equation for b\n    initial_bricks = solve(equation, b)\n\n    return initial_bricks[0]\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: There were 65 fewer boys than girls\n    eq1 = Eq(boys, girls - 65)\n\n    # Equation 2: The 2/5 of the boys and 3/7 of the girls left the hall\n    # Remaining: boys - 2/5*boys and girls - 3/7*girls\n    # After they left, boys and girls are equal\n    eq2 = Eq(boys - 2/5*boys, girls - 3/7*girls)\n\n    # Solve the equations to find the number of boys and girls initially\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    # Calculate the number of boys and girls remaining in the hall\n    remaining_boys = solutions[boys] - 2/5*solutions[boys]\n    remaining_girls = solutions[girls] - 3/7*solutions[girls]\n\n    # Total number of students left in the hall is the sum of remaining boys and girls\n    total_remaining = remaining_boys + remaining_girls\n    \n    return total_remaining\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    # Number of kids\n    num_kids = 3\n    \n    # Number of ways to arrange them is the factorial of the number of kids\n    return factorial(num_kids)\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    more_boys = 90\n    swim_ratio_girls = 31\n    nonswim_ratio_girls = 49\n    less_swim_boys = 120\n\n    # Total number of girls\n    girls = (total_pupils - more_boys) / 2\n    boys = girls + more_boys\n\n    # Number of girls who can swim and who cannot swim\n    girls_swim = (girls * swim_ratio_girls) / (swim_ratio_girls + nonswim_ratio_girls)\n    girls_nonswim = (girls * nonswim_ratio_girls) / (swim_ratio_girls + nonswim_ratio_girls)\n\n    # Number of boys who can swim and who cannot swim\n    # Since boys_swim = boys_nonswim - less_swim_boys, we use this equation to form a system of linear equations\n    boys_swim = (boys - less_swim_boys) / 2\n    boys_nonswim = boys_swim + less_swim_boys\n\n    # Total number of pupils who cannot swim\n    pupils_nonswim = girls_nonswim + boys_nonswim\n\n    return int(pupils_nonswim)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - (1/3))\n    initial_passengers = remaining_after_first_stop / (1 - (2/5))\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    count = 0\n    for i in range(3, 100):  # Starting from 3 because Mike cannot be the 2nd if there are less than 3 desks\n        if i * i - 2 in [i-1, i*2-2, i*(i-1)-2, (i-1)**2 - 2]:\n            count = i * i\n            break\n    return count\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_age = 22\n    future_sum_age = 40\n    difference_in_sum_age = future_sum_age - current_sum_age\n    \n    # Since both Geoff and his sister grow older by 1 year each year, their combined age\n    # increases by 2 every year. Therefore, we divide the difference by 2 to find the number\n    # of years needed for their combined age to become 40.\n    years_until_sum_age_40 = difference_in_sum_age // 2\n\n    return years_until_sum_age_40\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 21):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    ways = [0] * 11\n    ways[0] = 1  # base case: 0 ways to climb 0 steps\n\n    for i in range(1, 11):\n        ways[i] += ways[i-2] if i - 2 >= 0 else 0\n        ways[i] += ways[i-3] if i - 3 >= 0 else 0\n\n    return ways[10]\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    min_dividend = smallest_divisor * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = '1998'\n    n = len(number)\n    while int(number * (n // 4)) % 33 != 0:\n        n += 4  # Since 1998 has 4 digits, we increase n by 4 each time\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group = 5\n    first = group\n    second = group ** 2\n    third = group ** 3\n\n    sum_of_numbers = first + second + third\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_run = 1/4\n    total_distance = 3.75\n\n    num_runs = total_distance / distance_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Since changing the last digit to the first increases the number by 5877,\n    # the place value difference contributes to the increase.\n    # From _ _ _ x to x _ _ _, where x is unknown, the increase must be from\n    # 1000 * x - x = 999 * x\n    \n    # We know the increase is 5877, therefore we solve for x:\n    # 999 * x = 5877\n    # x = 5877 / 999\n    \n    x = 5877 // 999\n    \n    # The increase in terms of thousands (first digit),\n    # hundreds (second digit), tens (third digit) and ones (fourth digit)\n    # has to equal to 5877.\n    # Since we know the difference in thousands and ones place value (x),\n    # we can calculate the initial ones digit of the lock:\n    initial_ones = 5877 - (1000 - 1) * x\n    \n    # Now we can build the original lock number. It has x as the first digit,\n    # and initial_ones as the fourth digit. Since we don't know the second and third digits,\n    # Let's call them y and z.\n    # The original lock number looks like x y z initial_ones.\n    \n    # But using the known increment and the value of x,\n    # we find that the new number looks like initial_ones y z x.\n    \n    # The thousands place contributes initial_ones * 1000 to the new number,\n    # and x contributes -x to the old number. The difference between these two\n    # should be equal to 5877 (the total difference mentioned).\n    \n    # initial_ones * 1000 - x = 5877\n    # initial_ones = (5877 + x) / 1000\n    # We already calculated x and initial_ones, so now we can construct the number:\n    \n    # The original combination is xy and zx, where we only need to find y and z.\n    \n    # Since the shift did not affect the second and third digits, and there is no other condition\n    # on the number that could influence them, we can assume that y and z could be any digit from 0 to 9.\n    # But we need to respect the constraint given by the 5877 difference, which we have already handled.\n    # Thus, to get the original number, we don't actually need to specify y and z. \n    \n    # Construct the original number:\n    original_number = x * 1000 + 0 * 100 + 0 * 10 + initial_ones\n    \n    return original_number\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    number = 3000000 + 30000 + 30\n    return number\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    number = 100  # Start from the smallest 3-digit number\n    while True:\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each person's number of stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    # Get the number of stamps Andrew has\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion: 10/x = 14/21\n    # Cross multiply to find x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and num % 9 == 0 and str(num).endswith('0'):\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # since 7 tens are equal to 70\n    correct_answer = original_number + tens_to_add\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27\n    ans = 0\n    while n > 0:\n        ans += 1\n        n -= ans\n    return ans\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # total length in cm\n    piece1_cm = 147\n    piece2_cm = 32.5\n    piece3_cm = 67\n\n    piece4_cm = total_length_cm - (piece1_cm + piece2_cm + piece3_cm)\n\n    return piece4_cm\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves = total_papers // interval\n    return leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567) * (234 + 567 + 89)\n    part2 = (101 + 234 + 567 + 89) * (234 + 567)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    # Define probabilities\n    probabilities = [0.5, 0.4, 0.2]\n    # Calculate the most likely number of people to pass\n    n = 3  # Total number of people\n    \n    # Calculate the probability for each number of students passing\n    pass_probabilities = []\n    for k in range(n+1):\n        prob = binom.pmf(k, n, sum(probabilities) / n)  # Binomial distribution PMF\n        pass_probabilities.append((k, prob))\n    \n    # Find the number of people with the highest probability to pass\n    most_likely = max(pass_probabilities, key=lambda x: x[1])[0]\n    \n    return most_likely\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    total = 1  # Start with the first term 1\n    for i in range(2, 11):  # From 1/2 to 9/10\n        total += (i - 1) * (1/i) * 2  # Each fraction is counted i-1 times, doubled for the repeat\n    return total\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio equation: watches/caps = 8/11\n    equation1 = Eq(watches * 11, caps * 8)\n\n    # Final ratio equation after selling 88 caps: watches/(caps-88) = 12/11\n    equation2 = Eq(watches * 11, (caps - 88) * 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for d1 in range(1, 10):  # First digit cannot be 0\n        for d4 in range(1, 10):  # Last digit cannot be 0 and must be four times the first digit\n            if 4 * d1 == d4:\n                for d2 in range(1, 10):  # Second digit cannot be 0 and must be one less than first digit\n                    if d1 - 1 == d2:\n                        for d3 in range(1, 10):  # Third digit cannot be 0 and must be unique\n                            if d1 != d2 and d1 != d3 and d1 != d4 and d2 != d3 and d2 != d4 and d3 != d4:\n                                abc = \"{}{}{}{}\".format(d1, d2, d3, d4)\n                                dcb = \"{}{}{}{}\".format(d4, d3, d2, d1)\n                                if int(abc) * 4 == int(dcb):\n                                    return int(abc)\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # Total length in meters\n    total_length_cm = total_length_m * 100  # Convert meters to centimeters\n    \n    # Since one piece is twice as long as the other, let the shorter piece be x cm.\n    # Then the longer piece is 2x cm.\n    # The total length is x + 2x = 3x.\n    # We can set up the equation 3x = total_length_cm to find x.\n    \n    x = total_length_cm / 3  # Length of the shorter piece in cm\n    longer_piece = 2 * x  # Length of the longer piece in cm\n    \n    return longer_piece\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # If Sam takes 30 minutes to go from the first to the sixth house,\n    # he covers 5 intervals (spaces between houses)\n    # Number of intervals = number of houses - 1\n    intervals_6_houses = 6 - 1\n    \n    # Time per interval is 30 minutes divided by the number of intervals \n    # between the first and the sixth house\n    time_per_interval = 30 / intervals_6_houses\n    \n    # To find out how many intervals he will need to cover for 10 houses:\n    intervals_10_houses = 10 - 1\n    \n    # Total time for 10 houses is the time per interval \n    # multiplied by the number of intervals for 10 houses\n    total_time_10_houses = time_per_interval * intervals_10_houses # total time for 10 houses\n    \n    return total_time_10_houses\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    cost_petrol = litres_used * cost_per_litre\n\n    return cost_petrol\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Total coins\n    total_coins = 2015\n\n    # Losing positions occur at multiples of 12 (1+11)\n    # To ensure victory, Jack needs to make the remaining coins a multiple of 12\n    # after his first move.\n    # Find the remainder when dividing total coins by 12\n    remainder = total_coins % 12\n\n    # If the remainder is more than zero, Jack will pick that remainder amount.\n    # If the remainder is zero, Jack can pick any amount as the game is already\n    # in a winning state for Ken, so we'll assume Jack picks 1.\n    jack_first_pick = remainder if remainder > 0 else 1\n    \n    return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin (0,0),\n    # it must be that b = 0 (y-intercept is 0)\n\n    # Now, we use point (4,8) to find the slope m\n    # slope m is given by the change in y over the change in x\n    # since it passes through the origin, we can use the coordinates (4,8) directly\n    x1, y1 = (0, 0)\n    x2, y2 = (4, 8)\n    \n    m = (y2 - y1) / (x2 - x1)\n    \n    # We already know b, so we can directly write the equation\n    b = 0\n    equation = f\"y={m}x+{b}\"\n    \n    return equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    return 1200031093\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white = 92\n    # Since the pattern is Black, White, Black, 2x White -> total 5 balls for 2 white balls\n    total_balls = (white // 2) * 5\n    # If there's one white ball left without a pair, it means 3 more balls (Black, White, Black)\n    if white % 2 != 0:\n        total_balls += 3\n    return total_balls\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):  # iterate over all hours in a day\n        for minute in range(60):  # iterate over all minutes in an hour\n            time_str = f\"{hour:02d}{minute:02d}\"  # format time as a string\n            if time_str.count('4') >= 2:  # check if there are at least two 4s\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def digit_sum(number):\n        return sum(int(digit) for digit in str(number) if digit in \"018\")\n    \n    ans = digit_sum(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # The three youngest dwarfs form an arithmetic sequence\n    # Let x be the age of the middle one of the youngest three dwarfs\n    # Then the ages of the youngest three are (x-1), x, (x+1)\n    # Their ages sum up to 42: (x-1) + x + (x+1) = 42\n    # Simplify the equation: 3x = 42\n    # Solve for x\n    x = 42 // 3\n\n    # The oldest dwarf is 6 years older than the middle one of the youngest three\n    oldest_age = x + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    count = 6\n    while True:\n        if (count - 2) % 6 == 0 and (count + 3) % 7 == 0:\n            return count\n        count += 1\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n\n    shortened_length_cm = shortened_length_mm / 10\n    new_length_cm = original_length_cm - shortened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    distance1 = 420\n    speed1 = 7\n    time1 = distance1 / speed1\n    \n    distance2 = 620\n    speed2 = 5\n    time2 = distance2 / speed2\n    \n    distance3 = 1200 - distance1 - distance2  # Total distance - first two segments\n    speed3 = 8\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 89 * 4\n    target_average = 95\n    tests_taken = 4\n    additional_tests = 0\n    \n    while True:\n        additional_tests += 1\n        new_total_score = current_total_score + 100 * additional_tests\n        new_average = new_total_score / (tests_taken + additional_tests)\n        \n        if new_average >= target_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of stickers John has\n    # Let s be the initial number of stickers Sam has\n    # Let p be the initial number of stickers Peter has\n    x, s, p = symbols('x s p')\n\n    # Given Sam and Peter had stickers in the ratio 7:5, we get the equation s / p = 7/5\n    ratio_equation = Eq(s / p, 7 / 5)\n\n    # Sam and Peter each gave 20% of their stickers to John\n    # so, the numbers of stickers John receives from Sam and Peter are 0.2s and 0.2p respectively\n\n    # Since John's stickers increased by 80%, the amount received is equal to 80% of the initial amount he had\n    # which gives us the equation x * 0.8 = 0.2s + 0.2p\n    johns_stickers_equation = Eq(0.8 * x, 0.2 * s + 0.2 * p)\n\n    # In the end, Sam had 20 stickers more than John\n    # which gives us the equation s - (x + 0.2s) = 20\n    sams_stickers_final = Eq(s - (x + 0.2 * s), 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, johns_stickers_equation, sams_stickers_final), (x, s, p))\n\n    # Extract the solution for p, which is the initial number of stickers Peter had\n    peter_stickers_initial = solutions[p]\n\n    return peter_stickers_initial\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $2 notes and $10 notes\n    two_dollar_notes, ten_dollar_notes = symbols('two_dollar_notes ten_dollar_notes')\n\n    # Equation 1: The total number of $2 and $10 notes is 72\n    total_notes_eq = Eq(two_dollar_notes + ten_dollar_notes, 72)\n\n    # Equation 2: David spent 90% of the $10 notes\n    ten_dollar_notes_spent_eq = Eq(ten_dollar_notes * 0.9, ten_dollar_notes - (ten_dollar_notes / 2))\n\n    # Equation 3: David spent 75% of the $2 notes\n    two_dollar_notes_spent_eq = Eq(two_dollar_notes * 0.75, two_dollar_notes - (two_dollar_notes / 4))\n\n    # Equation 4: After spending, there are twice as many $10 notes as $2 notes\n    remaining_notes_eq = Eq((ten_dollar_notes - (ten_dollar_notes * 0.9)) * 2, two_dollar_notes - (two_dollar_notes * 0.75))\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, ten_dollar_notes_spent_eq, two_dollar_notes_spent_eq, remaining_notes_eq), (two_dollar_notes, ten_dollar_notes))\n\n    # Find the cost of the gift\n    gift_cost = (solutions[ten_dollar_notes] * 10 * 0.9) + (solutions[two_dollar_notes] * 2 * 0.75)\n\n    return gift_cost\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 different colors, taking 1 from each color will not ensure two of the same color.\n    # Therefore, we must take one more marker out to be sure that at least 2 of them are the same color.\n    fewest_markers = 3 + 1  # One for each color and one to ensure a pair.\n    return fewest_markers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_notes = 58\n    total_value = 164\n    # Let's denote the number of $2 notes as x and $5 notes as y\n    for x in range(total_notes + 1):  # x can be from 0 to 58\n        y = total_notes - x\n        if 2 * x + 5 * y == total_value:\n            return y  # we need to find the number of $5 notes\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A, B, and C represent the rate at which each hose can fill the pool (pool/hour)\n    A, B, C = symbols('A B C')\n\n    # Equations based on the given information\n    equation1 = Eq(1/A + 1/B, 1/9)\n    equation2 = Eq(1/A + 1/C, 1/12)\n    equation3 = Eq(1/B + 1/C, 1/18)\n\n    # Solve the equations for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate total rate when all hoses are turned on\n    total_rate = solutions[A] + solutions[B] + solutions[C]\n\n    # Calculate time to fill the pool with all hoses on\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    seventh_term = 105\n    step = 120 - 105  # step between two consecutive terms\n    first_term = seventh_term - step * (7 - 1)\n    hundredth_term = first_term + step * (100 - 1)\n    return hundredth_term\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    return (14 - 8) / 3\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent = 187.50\n    initial_fraction_spent_on_cupcakes_and_muffins = 5 / 9\n    fraction_spent_on_more_cupcakes = 1 / 6\n    cupcakes_first_purchase_price = total_spent / (1 + fraction_spent_on_more_cupcakes)\n    muffin_price = (initial_fraction_spent_on_cupcakes_and_muffins - fraction_spent_on_more_cupcakes) * cupcakes_first_purchase_price / 32\n    muffins_spent = 32 * muffin_price\n    return muffins_spent\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    parterres = 1007\n    sprinklers = (parterres - 1)  # One less sprinkler than the number of parterres\n    return sprinklers\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    pigeons = 75\n    cages = 20\n\n    min_pigeons_in_max_cage = (pigeons + cages - 1) // cages\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Because each box contains at least 2 marbles and is a multiple of 2,\n    # we start from 2 and go up by multiples of 2.\n    # There are 10 boxes and except for two, each box contains a different number of marbles.\n    # This means we need 8 different counts of marbles and one duplicate.\n    \n    # Start with the smallest multiples of 2: 2, 4, 6, ..., 16\n    marbles = [2*i for i in range(1, 9)]  # This creates the list [2, 4, 6, 8, 10, 12, 14, 16]\n    # Add two more marbles which have the smallest possible value that is a multiple of 2\n    # and is not already in the list. The smallest duplicate we can have is 2 (the first element).\n    marbles.append(2)  # Adding the smallest possible duplicate\n    marbles.append(2*9)  # Adding the next smallest multiple of 2 that is not in the list\n\n    # Now sum all the elements in the list to get the total number of marbles\n    total_marbles = sum(marbles)\n    return total_marbles\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    fraction_left = 5 / 9\n    given_away = 440\n    initial_collection = given_away / (1 - fraction_left)\n    return int(initial_collection)\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 4, 5]\n    num_combinations = len(list(permutations(digits, 3)))\n\n    return num_combinations\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total length of the road\n    x = symbols('x')\n    \n    # First day paved 8 thousand feet\n    first_day = 8\n    \n    # Second day paved 4 thousand feet more than 1/6 of the total road length\n    second_day = (1/6) * x + 4\n    \n    # They paved 5/12 of the total length in the first two days\n    total_paved = first_day + second_day\n    equation = Eq((5/12) * x, total_paved)\n\n    # Solve for x\n    total_length = solve(equation, x)\n\n    return total_length[0]\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each person originally had\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n\n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(marry_initial, (7/5) * alexis_initial)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = marry_initial * (20/100)\n    alexis_gave = alexis_initial * (20/100)\n\n    # Charlotte's stickers increased by 80%\n    charlotte_gave = charlotte_initial * (80/100)\n\n    # The number of stickers given to Charlotte by Marry and Alexis must be equal to the increase in Charlotte's stickers\n    eq2 = Eq(marry_gave + alexis_gave, charlotte_gave)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    eq3 = Eq(marry_initial - marry_gave, charlotte_initial + charlotte_gave + 20)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (marry_initial, alexis_initial, charlotte_initial))\n\n    # Return the solution for the number of stickers Alexis had initially\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # The total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Subtract the four corners that already have wheat\n    # as the question states that there's wheat on each corner\n    # we subtract 4 from the total number of wheats\n    number_of_gaps = 116 - 4\n    \n    # Calculate the distance between two wheats by\n    # dividing the perimeter of the field by the number of gaps\n    distance = perimeter / number_of_gaps\n\n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        str_num = str(num)\n        if str_num.endswith('35') and sum(int(digit) for digit in str_num) == 35:\n            break\n        num += 35  # Increase by the next multiple of 35\n    return num\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With four players, the number of games required to find a winner is one less than the number of players.\n    num_players = 4\n    num_games = num_players - 1\n    return num_games\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n    \n    only_one_question_correct = (first_question_correct - both_questions_correct) + (second_question_correct - both_questions_correct)\n    \n    return only_one_question_correct\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    # Let x be the number of sunny days, and y be the number of rainy days.\n    # We have two equations:\n    # x + y = 8 (The total number of days)\n    # 20x + 12y = 112 (The total number of pine nuts gathered)\n    \n    # Solving the equations:\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 8)\n    equation2 = Eq(20 * x + 12 * y, 112)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_single = 15\n    price_pair = 28\n    price_pack_five = 60\n\n    # Minimum amount of money spent (initialized with an impossibly high value)\n    min_spend = float('inf')\n    \n    # Buy packs of 5 until remaining less than 5\n    # Then consider buying pairs or singles\n    \n    for packs_of_five in range(4):  # He cannot buy more than 3 packs of 5 (15 bottles)\n        for pairs in range(9):  # He cannot buy more than 8 pairs (16 bottles)\n            single_bottles = 17 - (packs_of_five * 5 + pairs * 2)\n            if single_bottles >= 0:  # Check that total bottles is at least 17\n                spend = packs_of_five * price_pack_five + pairs * price_pair + single_bottles * price_single\n                min_spend = min(min_spend, spend)\n    \n    # Convert pence to pounds\n    min_spend /= 100  \n    return round(min_spend, 2)\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib = [1, 1]\n    while len(fib) < 8:\n        fib.append(fib[-1] + fib[-2])\n    ans = fib[-1] + fib[-2]\n    return ans\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5    # time taken to pass the tree in seconds\n\n    # distance = speed * time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of candies Rachel has\n    # Let a represent the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # If each of them eats 8 pieces, Rachel has 3 times what Alice has\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Total pieces they had originally\n    total_pieces = solutions[r] + solutions[a]\n\n    return total_pieces\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Original expression\n    expressions = [\n        '285+15/5-2',\n        '(285+15)/5-2',\n        '285+(15/5)-2',\n        '285+15/(5-2)',\n        '285+(15/5-2)',\n        '(285+15/5)-2',\n        '(285+15/5-2)',\n        '285+15/(5-2)',\n        '(285+15)/(5-2)'\n    ]\n    \n    # Evaluate each expression and store unique results in a set to avoid duplicates\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n    \n    # Count number of unique results\n    ans = len(results)\n    return ans\n\n# Call the solution function and store the result in the variable 'ans'\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    resulting_number = 71\n    ans = (resulting_number - 8) / 7\n    return ans\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    brushes_price = 3\n    max_brushes_amount = 59 // brushes_price\n\n    # Bud spends less than £10 on brushes,\n    # so she can buy at most 3 brushes (£9)\n    for num_brushes in range(max_brushes_amount + 1):\n        if brushes_price * num_brushes < 10:\n            remaining = 59 - (brushes_price * num_brushes)\n            if remaining % 10 == 0:\n                return num_brushes\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Worst case scenario, you take out all the pink and grey marbles first.\n    pink = 9\n    grey = 7\n\n    # One more draw is needed to ensure you get at least one blue marble.\n    ans = pink + grey + 1\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Rick and Morty's test scores as symbols\n    rick, morty = symbols('rick morty')\n\n    # Create equation based on the information given\n    # \"Rick tells Morty~\"If I gave you $70 of my test score, my test score would still be $20 higher than yours.\"\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    # \"Also, my current test score is $9 times higher than you.\"\n    equation2 = Eq(rick, 9 * morty)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    common_difference = 2\n\n    # Using arithmetic sequence sum formula: \n    # S_n = n/2 * (2*a_1 + (n-1)*d)\n    # where S_n is the sum of the sequence, n is the number of terms, a_1 is the first term and d is the common difference.\n    # We have to find the first term a_1 given total days (n), total bears (S_n) and common difference (d).\n\n    # total_bears = total_days/2 * (2*a_1 + (total_days - 1)*common_difference)\n    # Solving for a_1 gives us a_1 = (total_bears/total_days - (total_days - 1)*common_difference)/2\n    first_day_bears = (total_bears / total_days - (total_days - 1) * common_difference) / 2\n\n    # Now that we have the first term, we find the fifth term by using the arithmetic sequence term formula:\n    # a_n = a_1 + (n - 1) * d\n    fifth_day_bears = first_day_bears + (total_days - 1) * common_difference \n\n    return fifth_day_bears\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # There are three different places to fill: hundreds, tens and units\n    # For the hundreds place, we can only use 1 or 8, as we cannot start with 0\n    hundreds_place_options = 2  \n    # For the tens place, we have 2 choices because one number was used in the hundreds place\n    tens_place_options = 2  \n    # For the units place, we have 1 choice left as the two numbers were used in the hundreds and tens places\n    units_place_options = 1  \n    \n    # The total number of different three-digit numbers is the product of the choices for each place\n    total_numbers = hundreds_place_options * tens_place_options * units_place_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n    price_of_computer = sales_tax_paid / sales_tax_rate\n    return price_of_computer\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    fraction_1 = 6 / 7\n    fraction_2 = 3 / 10\n    percentage = (fraction_2 / fraction_1) * 100\n    return percentage\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from sympy import isprime\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        is_coprime_adjacent = True\n        for i in range(len(perm) - 1):\n            if not isprime(perm[i] + perm[i+1]):\n                is_coprime_adjacent = False\n                break\n        if is_coprime_adjacent:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n    equation1 = Eq(frogs_initial, dragonflies_initial + 9)  # Initial count difference\n    equation2 = Eq(frogs_initial - dragonflies_initial, 11 - 10)  # Magic show count difference\n\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # According to the problem, there are 30 less boys than girls\n    equation1 = Eq(b, g - 30)\n\n    # After a fraction of boys and girls left, the remaining amounts are equal\n    # Remaining boys = b - (3/5)b = (2/5)b\n    # Remaining girls = g - (5/8)g = (3/8)g\n    equation2 = Eq((2/5) * b, (3/8) * g)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Return the number of boys at the beginning\n    return solutions[b]\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(100):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the operation with different bracket insertion\n    op1 = (285 + 15) / (5 - 2)\n    op2 = 285 + (15 / 5) - 2\n    op3 = 285 + (15 / (5 - 2))\n    op4 = (285 + 15) / 5 - 2\n    op5 = 285 + 15 / (5 - 2)\n\n    # Store the results in a set to count unique values\n    results = {op1, op2, op3, op4, op5}\n    \n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n\n    # Total number of apples\n    total_apples = amy_apples + john_apples\n\n    # Each should have half of total\n    half_apples = total_apples // 2\n\n    # Amy needs to give away\n    apples_to_give = amy_apples - half_apples\n\n    return apples_to_give\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    total_coins = Eq(johnson + vicky, 48)\n    coins_after_giving = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((total_coins, coins_after_giving), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Let the entire work be 1 job\n    # If A and B together finish in 3 hours, their combined rate is 1/3 job per hour\n    # If B and C together finish in 4 hours, their combined rate is 1/4 job per hour\n    # If A and C together finish in 8 hours, their combined rate is 1/8 job per hour\n\n    # Let A's rate be a, B's rate be b, and C's rate be c\n    # We have the following equations:\n    # a + b = 1/3\n    # b + c = 1/4\n    # a + c = 1/8\n\n    # We want to find a + b + c\n    # By adding all three equations, we get:\n    # 2a + 2b + 2c = 1/3 + 1/4 + 1/8\n    # a + b + c = (1/3 + 1/4 + 1/8) / 2\n\n    rate_sum = (1/3 + 1/4 + 1/8) / 2\n    # The total rate of all three working together is the sum of their rates\n    # The time it takes to finish the job is the reciprocal of this rate\n    return 1 / rate_sum\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / boys_to_girls_ratio)\n    \n    return int(girls)\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids, and y be the number of candies\n    kids, candies = symbols('kids candies')\n\n    # If each kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(kids * 18, candies - 12)\n\n    # If each kid eats 15 candies, there are enough candies for 2 more kids\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kids, candies))\n\n    # We want the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation for the concentration of the new mixture\n    # 0.45 * 2 represents the amount of sugar from the 45% sugar water (in kg)\n    # 0.15 * x represents the amount of sugar from the 15% sugar water (in kg)\n    # (0.45*2 + 0.15*x) / (2 + x) is the concentration of the new mixture\n    # This concentration should be equal to 25% or 0.25\n    equation = Eq((0.45*2 + 0.15*x) / (2 + x), 0.25)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    # sol will be a list, we take the first (and only) element and convert it to float if necessary\n    return sol[0]\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Applying the inverse operations in reverse order\n    result_after_addition = 77 / 7\n    original_number = result_after_addition - 6\n    return original_number\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    sum_last_five = 0 # Initialize the sum of the last five digits\n    current_addend = 0 # Initialize the current addend\n    \n    # Calculate the total sum by concatenating '2' to the addend 2017 times\n    for i in range(2017):\n        current_addend = current_addend * 10 + 2 # Generate the next addend by shifting left and adding 2\n        \n        # Update the sum of the last five digits using only the last 5 digits of the current addend\n        sum_last_five = (sum_last_five + current_addend) % 100000 \n    \n    return sum_last_five\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    beef_weight = 0.6\n    cost_per_kilogram = total_cost / beef_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % x == 1 for x in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18  # Jerry's work rate (jobs per hour)\n    combined_rate = 1 / 6  # Tom and Jerry's combined work rate (jobs per hour)\n    \n    # Tom's work rate is the combined rate minus Jerry's rate\n    tom_rate = combined_rate - jerry_rate\n    \n    # Time taken for Tom to complete the job is the inverse of his work rate\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_initial = 40\n    ting_initial = 32\n    target_ratio = [1, 2]\n\n    # Let x be the amount of stamps Sally gave to Ting\n    # After giving x stamps, Sally has 40-x stamps and Ting has 32+x stamps\n    # The ratio of Sally's stamps to Ting's stamps should be 1:2\n    # (40 - x) / (32 + x) = 1 / 2\n    # Cross multiply to solve for x\n    # 2 * (40 - x) = 1 * (32 + x)\n    # 80 - 2x = 32 + x\n    # 3x = 48\n    # x = 16\n\n    x = (2 * sally_initial - ting_initial) / 3\n    ting_final = ting_initial + x\n\n    return ting_final\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) that David spends walking at the increased speed\n    t = symbols('t')\n    \n    # Initial walking distance at the speed of 150m/min for the first 10 minutes\n    initial_distance = 150 * 10\n    \n    # Distance covered at the increased speed of 200m/min (150m/min + 50m/min)\n    increased_speed_distance = 200 * t\n    \n    # Total distance walked is the sum of the two distances\n    total_distance = Eq(initial_distance + increased_speed_distance, 3700)\n    \n    # Solve for t\n    walking_time_at_increased_speed = solve(total_distance, t)[0]\n    \n    # Total time walked is the initial 10 minutes plus the time spent walking at the increased speed\n    total_time = walking_time_at_increased_speed + 10\n    \n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Cost of one packet\n    packet_cost = 4\n    # Number of sweets in one packet\n    sweets_per_packet = 8\n    # Total budget\n    budget = 20\n    # free sweet for every two packets bought\n    free_sweets_condition = 2\n\n    # Maximum packets that can be bought\n    max_packets = budget // packet_cost\n\n    # Total sweets from buying packets\n    total_sweets = max_packets * sweets_per_packet\n\n    # Additional free sweets received\n    free_sweets = (max_packets // free_sweets_condition) * 1\n\n    # Total maximum sweets\n    total_max_sweets = total_sweets + free_sweets\n\n    return total_max_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 1.4 * girls)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initially, Gill has 5 pink counters out of a total of 5 + 7 + 8 = 20 counters.\n    initial_pink = 5\n    total_counters = 5 + 7 + 8\n    \n    # The initial probability of picking a pink counter is 5/20.\n    initial_probability = initial_pink / total_counters\n    \n    # Gill wants to double this probability, so the new probability should be 2 * (5/20).\n    # Let x be the number of extra pink counters she needs to add to double the chances.\n    # The new probability would be (5 + x) / (20 + x) \n    # We solve for x: (5 + x) / (20 + x) = 2 * (5 / 20)\n    \n    # Multiply both sides by (20 + x) to get rid of the denominator\n    # (5 + x) = 2 * (5 / 20) * (20 + x)\n    \n    # Simplify to solve for x\n    # (5 + x) = (1 / 2) * (20 + x)\n    # 10 + 2x = 20 + x\n    # 2x - x = 20 - 10\n    # x = 10\n    \n    # Gill needs to add 10 extra pink counters to double her chances of choosing a pink counter.\n    ans = 10\n    \n    return ans\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Total candies to distribute\n    total_candies = 88\n    \n    # Number of children\n    children = 8\n\n    # Let's find the least amount of candies the child who gets the most can get\n    # by giving the other children the least amount of candies which are unique. \n    # The children other than the one getting the most will therefore get candies\n    # in the sequence of 1, 2, 3, ..., which is an arithmetic sequence where\n    # a1 = 1, an = children - 1, and the number of terms is children - 1.\n    \n    # First, calculate the total amount of candies given to the children\n    # who get the least amount of candies\n    total_least_candies = sum(range(1, children))\n    \n    # The child with the most candies will get the rest\n    most_candies = total_candies - total_least_candies\n\n    return most_candies\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    # Calculate 16!\n    f = factorial(16)\n    \n    # Convert the factorial result into a string for analysis\n    f_str = str(f)\n    \n    # Reverse the string to find the consecutive zeros from the end\n    f_str_reverse = f_str[::-1]\n\n    # Count the consecutive zeros\n    ans = 0\n    for c in f_str_reverse:\n        if c == '0':\n            ans += 1\n        else:\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, tim = symbols('sam tim')\n    equation1 = Eq(sam + tim, 1170)  # Total cookies\n    equation2 = Eq(sam - (sam/4) + (tim/5), tim - 663) # Cookies after eating and buying\n\n    solutions = solve((equation1, equation2), (sam, tim))\n    \n    sam_cookies_eaten = solutions[sam] / 4\n    \n    return sam_cookies_eaten\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # After 60 cupcakes and 12 muffins were sold\n    cupcakes_sold = cupcakes - 60\n    muffins_sold = muffins - 12\n\n    # Equations based on the given conditions\n    equation1 = Eq(cupcakes, muffins)  # Demi had an equal number of cupcakes and muffins at first\n    equation2 = Eq(muffins_sold, 2 * cupcakes_sold)  # the number of muffins left was twice the number of cupcakes left\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    # Total number of cupcakes and muffins Demi had at first\n    total = solutions[cupcakes] + solutions[muffins]\n\n    return total\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case scenario: Cindy picks one of each color first, making no pairs\n    # She has three socks, one of each color\n\n    # She then picks another three socks, one of each color.\n    # This is still not enough for two pairs, but she is guaranteed at least one pair.\n\n    # Now she needs to keep picking until she gets a pair of the same color.\n    # Regardless of her next pick, it will form a pair with one of the colors she already has.\n\n    # Counts so far: Black: 2, Grey: 2, Red: 2\n\n    # Next pick guarantees a pair.\n\n    # To guarantee two pairs, Cindy must pick at least 2 more socks\n    # (to account for the worst case where the next two are of different colors).\n\n    # Counts possible now: Black: 2-3, Grey: 2-3, Red: 2-4\n    # or any other combination where one color has 4 socks and others have 2 or 3.\n\n    # After picking two more, she is guaranteed to have two pairs of at least one color.\n\n    # Total socks picked: 3 (first pick) + 3 (second pick) + 1 (third pick) + 2 (fourth pick) = 9\n\n    return 9\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = 12.25 + 90 / 60\n\n    round_trip = shanghai_to_la + la_to_shanghai\n    \n    return round_trip\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    eddi_given = eddi + 4\n    \n    # Original ratio\n    equation1 = Eq(eddi / wiya, 3 / 2)\n    \n    # New ratio after Eddi is given $4\n    equation2 = Eq(eddi_given / wiya, 8 / 5)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    sum_to_30 = sum(range(1, 31))\n    sum_to_29 = sum(range(1, 30))\n    ans = sum_to_30 + sum_to_29\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let's denote the daily pocket money Helen receives as h.\n    # According to the problem, George receives (h + 3) daily.\n    # Both spend $5 a day. Therefore, Helen saves (h - 5) a day, and George saves (h + 3 - 5) a day, i.e., (h - 2) a day.\n    # When Helen has saved $60, let's assume it took her 'd' days.\n    # So we have the equation: d * (h - 5) = 60\n    # George would have saved (d * (h - 2)) by the same time.\n    # According to the problem, George has saved $90 more than Helen: d * (h - 2) = 60 + 90\n    # Combining these two equations, we get two linear equations:\n    # 1. d * (h - 5) = 60\n    # 2. d * (h - 2) = 150\n    \n    # We can solve these two equations for h.\n    from sympy import symbols, Eq, solve\n\n    h, d = symbols('h d')\n    equation1 = Eq(d * (h - 5), 60)\n    equation2 = Eq(d * (h - 2), 150)\n\n    solutions = solve((equation1, equation2), (h, d))\n\n    return solutions[h]\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance traveled during the first 2 hours\n    distance_first_part = 2 * 40 # Speed * Time = Distance\n\n    # Total distance traveled\n    distance_total = distance_first_part + 280 # first 2 hours' distance + remaining distance\n\n    # Time taken to cover the remaining 280 km at a speed of 70 km/h\n    time_remaining_part = 280 / 70 # Distance / Speed = Time\n\n    # Total time taken for the whole trip\n    time_total = 2 + time_remaining_part # first 2 hours + remaining time\n\n    # Average speed calculation\n    average_speed = distance_total / time_total\n\n    return average_speed\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n\n    # The 9th term is a + 8d\n    ninth_term = a + 8 * d\n    # The 15th term is a + 14d\n    fifteenth_term = a + 14 * d\n    # Equation given the 9th term is 18 larger than the 15th term\n    equation1 = Eq(ninth_term, fifteenth_term + 18)\n\n    # The 20th term is a + 19d\n    twentieth_term = a + 19 * d\n    # The 12th term is a + 11d\n    twelfth_term = a + 11 * d\n    # Equation given the sum of 20th and 12th terms is 88\n    equation2 = Eq(twentieth_term + twelfth_term, 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate the 32nd term\n    a_solution = solutions[a]\n    d_solution = solutions[d]\n    thirty_second_term = a_solution + 31 * d_solution\n\n    return thirty_second_term\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value = (number // 10**2) % 10\n    return place_value * 10**2\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n\n    # Let x be the number of penpals who received a 4-page letter\n    # Then, the number of penpals who received a 3-page letter is (total_penpals - x)\n    # We set up the equation: 4 * x + 3 * (total_penpals - x) = total_pages\n\n    for x in range(total_penpals + 1):\n        if pages_4 * x + pages_3 * (total_penpals - x) == total_pages:\n            return total_penpals - x  # Return the number of penpals who received a 3-page letter\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple of the packet sizes\n    cycle_days = lcm(25, 20)\n\n    # She starts both on March 1st, so add the cycle_days to find next start date\n    start_month = 3  # March\n    start_day = 1    # 1st\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Calculate the month and day she will start new packets of both\n    remaining_days = cycle_days\n    current_month = start_month\n    while remaining_days > days_in_months[current_month - 1]:\n        remaining_days -= days_in_months[current_month - 1]\n        current_month += 1\n        current_month = current_month % 12 if current_month > 12 else current_month\n\n    # The answer is the calculated next start month and day\n    next_start_month = current_month\n    next_start_day = start_day + remaining_days\n\n    return f\"{next_start_month}/{next_start_day}\"\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Given A = a0 + a1 + a2 + a3 + a4 + a5 + a6 = 1\n    # We have the following equations based on the given operation Δ\n    A = 1\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n\n    # Calculate a0 based on the sum A\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Since we want a0 in its simplest form, we'll just sum up the fractions\n    # and subtract it from 1, then reduce it if necessary.\n    from fractions import Fraction\n\n    sum_of_ai = sum([a1, a2, a3, a4, a5, a6])\n    a0_fraction = Fraction(1 - sum_of_ai).limit_denominator()  # Convert to simplest form\n\n    # Get numerator (m) and denominator (n) of the simplest form of a0\n    m = a0_fraction.numerator\n    n = a0_fraction.denominator\n\n    # Return the sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_digits = set(range(10)) - set([5, 4, 3, 0])\n    guesses = [\n        (set('8765'), False),  # (set_of_digits, correct_positions: False)\n        (set('1023'), False),\n        (set('8642'), True),\n        (set('5430'), None)\n    ]\n\n    for i in range(1000, 10000):\n        num = str(i)\n        if len(set(num)) < 4:  # skip numbers with repeated digits\n            continue\n        if set(num).intersection(guesses[3][0]):  # skip if any digit from guess 4 is present\n            continue\n\n        # Check if only two digits match for guess 1 and they are not in the right position\n        if sum([digit in num for digit in guesses[0][0]]) != 2 or \\\n           any(num[j] == guesses[0][0][j] for j in range(4)):\n            continue\n        \n        # Check if only two digits match for guess 2 and they are not in the right position\n        if sum([digit in num for digit in guesses[1][0]]) != 2 or \\\n           any(num[j] == guesses[1][0][j] for j in range(4)):\n            continue\n        \n        # Check if exactly two digits match for guess 3 and they are in the right position\n        if sum([num[j] == guesses[2][0][j] for j in range(4)]) != 2:\n            continue\n\n        # All conditions met, this is the correct number\n        return int(num)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number be n\n    n = symbols('n')\n    \n    # Given that the mistaken calculation is n/4 - 25\n    mistaken_calculation = Eq(n/4 - 25, 2021)\n    \n    # Solve for the original number\n    original_number = solve(mistaken_calculation, n)\n    \n    # Calculate the correct answer by multiplying the number by 4 and adding 25\n    correct_answer = original_number[0]*4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    return (3 * 8) - 4\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial as fact\n\ndef solution():\n    # Calculate the number of ways to arrange the singing performances (S)\n    singing_permutations = fact(6)\n    \n    # Place 3 'slots' between 4 dancing performances (D) and 2 'slots' at the ends\n    # _ D _ D _ D _ D _ => 5 slots\n    # The 6 S can be distributed within these slots. Calculate combinations for these.\n    # Choose 3 S out of 6 to fill the 3 'slots' between Ds which is C(6, 3)\n    middle_slots_combinations = fact(6) // (fact(3) * fact(6 - 3))\n    \n    # The remaining 3 S can be placed in any of the 5 slots, which is a stars and bars problem:\n    # There are (3 + 5 - 1) choose (3) ways to arrange the remaining S\n    stars_and_bars_combinations = fact(3 + 5 - 1) // (fact(3) * fact(5 - 1))\n    \n    # Multiply to get the total number of arrangements\n    total_arrangements = singing_permutations * middle_slots_combinations * stars_and_bars_combinations\n    \n    # The arrangements for dancing are always the same due to the restriction \n    # (there can only be one order for D since it's restricted by S placement).\n    # Therefore the total arrangement is only multiplied by 1 (i.e., the order for D is fixed)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    # Prime factorization of each number based on prime factors 2 and 5\n    # 75 = 3 * 5^2\n    # 56 = 2^3 * 7\n    # 12 = 2^2 * 3\n    # 105 = 3 * 5 * 7\n    \n    # Count the number of 2s and 5s\n    two_count = 3 + 2 # from 56 and 12\n    five_count = 2 + 1 # from 75 and 105\n    \n    # The number of zeros at the end of the product comes from pairs of 2 and 5\n    # The number of zeros is equal to the minimum of two_count and five_count\n    zeros = min(two_count, five_count)\n    \n    return zeros\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The pattern of the last digit of 9 raised to different powers is periodic with a cycle of 2.\n    # Specifically, 9^1 ends with 9, 9^2 ends with 1 and it keeps alternating.\n    # Since 99 is an odd number, the ones digit of 999^99 is the same \n    # as the ones digit of 9^1 which is 9.\n    \n    ones_digit = 9\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b):\n                    if 3 * a + 11 * b == 193:\n                        return a + b\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, adults, boys, girls = symbols('children adults boys girls')\n\n    eq1 = Eq(adults, 3 * children)\n    eq2 = Eq(boys, 2 * girls)\n    eq3 = Eq(adults - girls, 176)\n\n    # The total number of people at the concert is the sum of adults and children.\n    # Since there are twice as many boys as girls and they include all children, then children = boys + girls.\n    # From eq1: adults = 3 * (boys + girls)\n    # Using eq2, we can substitute boys with 2 * girls.\n\n    solutions = solve((eq1, eq2, eq3, Eq(adults, 3 * (boys + girls))), (children, adults, boys, girls))\n\n    total_people = solutions[adults] + solutions[boys] + solutions[girls]\n\n    return total_people\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0\n        for b in range(0, 10):\n            if 7 * (10 * a + b) == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of 1 banana and a represent the cost of 1 apple.\n    b, a = symbols('b a')\n\n    # Equation based on Ellie's purchase\n    equation1 = Eq(2 * b + 3 * a, 1.50)\n\n    # Equation based on Beth's purchase\n    equation2 = Eq(3 * b + 2 * a, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculate the cost for 1 banana and 1 apple\n    cost_for_annabella = solutions[b] + solutions[a]\n\n    return cost_for_annabella\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_built_by_3_workers_in_4_days = 14\n    houses_built_by_1_worker_in_4_days = houses_built_by_3_workers_in_4_days / 3\n    houses_built_by_1_worker_in_1_day = houses_built_by_1_worker_in_4_days / 4\n    houses_built_by_9_workers_in_1_day = houses_built_by_1_worker_in_1_day * 9\n    houses_built_by_9_workers_in_2_days = houses_built_by_9_workers_in_1_day * 2\n\n    return houses_built_by_9_workers_in_2_days\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    factors_12_and_15 = gcd(12, 15)\n    greatest_common_factor = gcd(factors_12_and_15, 60)\n\n    return greatest_common_factor\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of people at the funfair be 'p'\n    p = symbols('p')\n\n    # According to the problem, children make up 2/5 of the people\n    children = 2/5 * p\n\n    # Women make up 1/4 of the people\n    women = 1/4 * p\n\n    # Men make up the rest of the people, so: men = p - children - women\n    men = p - children - women\n\n    # There are 20 more children than men\n    equation = Eq(children, men + 20)\n\n    # Solve for 'p'\n    total_people = solve(equation, p)\n\n    return total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of one ball\n    cost_per_ball = symbols('cost_per_ball')\n    \n    # Adam buys 5 balls and has $15 left\n    equation1 = Eq(5 * cost_per_ball + 15, 8 * cost_per_ball - 12)\n    \n    # Solve for the cost per ball\n    cost = solve(equation1, cost_per_ball)\n\n    return cost[0]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n \n    # Let's denote the ages of the dogs with variables\n    bob, rex, fido = symbols('bob rex fido')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(fido, bob - 10)  # Fido is 10 years younger than Bob\n    equation2 = Eq(bob + rex + fido, 28)  # The sum of their ages is 28\n\n    # We'll find all possible solutions that satisfy these equations\n    ages = solve((equation1, equation2), (bob, rex, fido))\n\n    # Now, we need to find the combination that gives us the smallest product of ages\n    # considering that none of the dogs have the same age.\n    min_product = float('inf')\n    for age_set in ages:\n        # Ensure all ages are unique\n        if len(set(age_set)) != 3:\n            continue\n        # Check if product of ages in this set is smaller than the current minimum product\n        product = age_set[0] * age_set[1] * age_set[2]\n        if product < min_product:\n            min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # After the first bounce, it rises to 3 times the height of the second bounce\n    first_bounce_height = 9 * 3\n    # After the initial drop, it rises to 3 times the height of the first bounce\n    initial_height = first_bounce_height * 3\n    \n    return initial_height  # return the initial height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences to solve\n    congruences = [(2, 3), (4, 7), (7, 8)]\n\n    # Solving using Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let's denote the number of books that Donna has as 'donna_books',\n    # then Chloe has 4 times Donna's books which is '4 * donna_books'.\n    # According to the problem, Chloe has 816 more books than Donna.\n    # So we can formulate the equation: 4 * donna_books - donna_books = 816\n    \n    donna_books = 816 // (4 - 1)  # Simplifying the equation donna_books = 816 / 3\n    \n    return donna_books\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the numerator and the denominator for the first complex fraction\n    first_numerator = 1/30 + 1/6\n    first_denominator = 2/25\n    # Calculate the first complex fraction\n    first_fraction = first_numerator / first_denominator\n\n    # Calculate the numerator and the denominator for the second complex fraction\n    second_numerator = 2 - 2/3\n    second_denominator = 8/3\n    # Calculate the second complex fraction\n    second_fraction = second_numerator / second_denominator\n\n    # Sum both complex fractions to get the final answer\n    ans = first_fraction + second_fraction\n\n    return ans\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Nancy takes to finish the job by herself\n    # Let y be the time Lee takes to finish the job by herself\n\n    x, y = symbols('x y')\n    equation1 = Eq(1/y + 1/x, 1/10)  # Equation representing combined work\n    equation2 = Eq(6/y + 20/x, 1)    # Equation representing individual work\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return float(solutions[xuanxuan])\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the value of the complex fraction\n    ans = 1 / ((1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009))\n    return ans\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    num_boats = -(-students // boat_capacity)  # Ceiling division\n    return num_boats\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pences in range(6):  # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_pences in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_pences in range(2):  # Jeremy can use 0 to 1 fifty-pence coins\n                if (ten_pences * 10) + (twenty_pences * 20) + (fifty_pences * 50) == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    # Apply the difference of squares formula: (a^2 - b^2) = (a - b)(a + b)\n    a = 250250\n    b = 250249\n    ans = (a + b) * (a - b)\n\n    return ans\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # Since the HCF of A and B is 75, both A and B must be multiples of 75.\n    # Let's find all the 3-digit multiples of 75.\n    multiples_75 = [i for i in range(75, 1000, 75) if len(set(str(i))) < 3]\n    \n    # Initialize the largest sum to 0.\n    largest_sum = 0\n    \n    # Iterate through all unique pairs of these multiples to find the largest sum.\n    for i in range(len(multiples_75)):\n        for j in range(i + 1, len(multiples_75)):\n            # Check if the two numbers have two digits in common.\n            A = multiples_75[i]\n            B = multiples_75[j]\n            A_str, B_str = str(A), str(B)\n            \n            # Count matching digits.\n            match_count = sum(1 for a, b in zip(A_str, B_str) if a == b)\n            \n            # Emit candidate sum if there are two matching digits, but not more (since they are distinct numbers).\n            if match_count == 2 and (A_str != B_str):\n                largest_sum = max(largest_sum, A + B)\n    \n    return largest_sum\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30  # Total number of pupils in A and B\n    total_marks = total_pupils * 90  # Total marks assuming average is 90 for both classes\n    \n    # Let average score of class A be x\n    # Hence, average score of class B will be x + 7\n    \n    # Total marks for class A will be 40 * x\n    # Total marks for class B will be 30 * (x + 7)\n    \n    # 40 * x + 30 * (x + 7) = total_marks\n    # Solve for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(40 * x + 30 * (x + 7), total_marks)\n    average_score_A = solve(equation, x)[0]\n    average_score_B = average_score_A + 7\n    return average_score_B\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = 0\n    for i in range(1, 201):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f'9{a}8{a}')\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtract Mark himself\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for j in range(10):\n        if int(f\"125{j}6\") % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) * 6, 66)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one table and one chair\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n\n    # Equation 1: Total cost of tables and chairs\n    equation1 = Eq(5 * table_cost + 12 * chair_cost, 720)\n\n    # Equation 2: Cost relation between table and chair\n    equation2 = Eq(table_cost, chair_cost + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n    \n    total_sum = 0\n    for i in range(24):\n        j = i + 1\n        total_sum += i * j**2\n        \n    return total_sum\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    # Define the custom operation\n    def custom_operation(a, b):\n        return 5 * a - 2 * b\n    \n    # Given operation 9 ⊙ x = 33, find x\n    # Convert it into an equation: 5*9 - 2*x = 33\n    # 45 - 2*x = 33\n    # -2*x = 33 - 45\n    # -2*x = -12\n    # x = -12 / -2\n    # x = 6\n    \n    x = (33 - (5 * 9)) / -2\n    return x\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    lcm_days = lcm(25, 20)\n    next_start_day = lcm_days + 1  # Since she starts on the 1st of March\n\n    return next_start_day\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time_minutes = 360\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n\n    # Calculate time spent going up and down\n    time_up = (total_time_minutes * ratio_up) / total_ratio\n    time_down = (total_time_minutes * ratio_down) / total_ratio\n\n    # Speed difference\n    speed_difference = 10  # m/min\n\n    # Calculate speeds\n    speed_down = speed_difference * total_ratio / ratio_up\n    speed_up = speed_down - speed_difference\n\n    # Calculate distances\n    distance_up = time_up * speed_up\n    distance_down = time_down * speed_down\n    \n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # Since the question is just the number 11 and no additional context is provided,\n    # the solution cannot involve any calculation or operation. The answer appears to be\n    # just returning the number itself.\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    wm_per_day = 9\n    pp_per_day = 9\n    for day in range(1, min(watermelons, pineapples) + 1):\n        watermelons_left = watermelons - (wm_per_day * day)\n        pineapples_left = pineapples - (pp_per_day * day)\n        if pineapples_left == 3 * watermelons_left:\n            return day\n    return None\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each of the six friends will send a card to 5 others (since one cannot send a card to oneself).\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    time_arrival = (9 * 60) + 22  # Convert Aiden's arrival time to minutes\n    time_bus = (9 * 60) + 15  # Convert the 9:15 bus time to minutes\n\n    # Since he missed the 9:15 bus, we need to find the next bus time\n    if time_arrival > time_bus:\n        time_since_last_bus = time_arrival - time_bus\n        # Find out how many minutes passed since the last bus left\n        wait_time = 35 - (time_since_last_bus % 35)\n    else:\n        # If he arrived before the 9:15 bus\n        wait_time = time_bus - time_arrival\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # meters per minute\n    brother_speed = 70  # meters per minute\n\n    # They meet after 5 minutes, so we calculate the distance each of them covered\n    eddie_distance = eddie_speed * 5\n    brother_distance = brother_speed * 5\n\n    # The total distance is the sum of the distances each of them covered\n    total_distance = eddie_distance + brother_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for Tom's current age and Jerry's current age\n    tom, jerry = symbols('tom jerry')\n    \n    # Tom will be twice his age in 4 years from now\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tom, jerry))\n    \n    # Extract Tom's and Jerry's ages from the solutions\n    tom_age, jerry_age = solutions[tom], solutions[jerry]\n    \n    # Now we need to find in how many years from now will Jerry's age be doubled\n    # Let's say in x years, Jerry's age will be doubled\n    x = symbols('x')\n    # Jerry's age in x years will be double his current age\n    equation3 = Eq(jerry + x, 2 * jerry)\n    \n    # Solve the equation for x\n    years_to_double_jerry_age = solve(equation3, x)\n    \n    return years_to_double_jerry_age[0]\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((i**2 if i % 2 != 0 else -i**2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n\n    discounted_price = original_price * (1 - discount)\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = (0.2 * 4) + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Set up the equation\n    equation = Eq(39 - (3 * x - 4), 34)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import primerange\n\n    # starting ages of the family members\n    ages = [7, 5, 29, 31]\n    # flag to determine if all ages are prime\n    all_prime = False\n    # the current year, where 0 represents the year 2017\n    year = 0\n\n    # function to check if all ages are prime in a particular year\n    def check_prime(ages):\n        for age in ages:\n            if not sympy.isprime(age):\n                return False\n        return True\n\n    # iterate over the years until all ages are prime again\n    while not all_prime:\n        year += 1\n        # increment each family member's age\n        new_ages = [age + year for age in ages]\n        # check if all new ages are prime\n        all_prime = check_prime(new_ages)\n\n    return new_ages[3]  # father's age\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_left = total_books - books_given_away\n\n    return books_left\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # When n circles are added to a plane, each new circle can intersect all the previous circles at most 2*n times. \n    # Each of these intersections can create a new region.\n    # The formula to calculate the maximum number of regions that n circles can divide the plane into is:\n    # R(n) = 1 + n * (n - 1) + (n * (n - 1) * (n - 2)) / 6 + n\n\n    n = 7\n    ans = 1 + n * (n - 1) + (n * (n - 1) * (n - 2)) / 6 + n\n    return int(ans)\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lampposts = 3\n    \n    # Number of intervals between lamp posts is the total number of flowers divided by the flowers between each lamp posts\n    num_intervals = total_flowers / flowers_between_lampposts\n\n    # Since there is one additional lamp post at the end, add 1 to the number of intervals\n    num_lamp_posts = num_intervals + 1\n\n    # The distance between each lamp post is the length of the road divided by the number of intervals\n    distance_between_lamp_posts = 50 / num_intervals\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Lora's age and her mother's age\n    lora, mother = symbols('lora mother')\n\n    # Create equations based on the given information\n    eq1 = Eq(lora + mother, 44)\n    eq2 = Eq(mother, 3 * lora)\n\n    # Solve the equations\n    solved_ages = solve((eq1, eq2), (lora, mother))\n\n    return solved_ages[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # The unit digit of a number raised to a power only depends on the unit digit\n    # of the base number and the cycle of its powers. For 4, the cycle is as follows:\n    # 4^1 has unit digit 4\n    # 4^2 has unit digit 6\n    # 4^3 has unit digit 4\n    # 4^4 has unit digit 6 and then the cycle repeats every 2 powers.\n    # Therefore, the unit digit of 4 raised to any power can be determined by the\n    # remainder of that power divided by 2 since it's a cycle of 2.\n    # For 44^2008, the base 44 has the same unit digit as 4, and the exponent 2008\n    # is a multiple of 2, so the unit digit is the same as 4^2.\n\n    unit_digit = (4 ** 2) % 10  # calculating unit digit of 4^2 which is 6\n    return unit_digit\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    males = total_adults * fraction_male\n    return int(males)\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # equations based on the given conditions:\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 93\n    \n    # Adding all the equations we get:\n    # 2 * (Adam + Ben + Carl) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    \n    # Since the above gives us double the total weight, we need to halve it\n    total_weight = total_double / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to each shop or chapel\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n    \n    # Paths from each shop or chapel to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n    \n    # Total paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamp_posts = 2  # in meters\n\n    # The road length will be the distance between each lamp pole multiplied by the number of gaps between them.\n    # Since there are lamp posts on both ends, the number of gaps is one less than the number of lamp posts.\n    road_length = distance_between_lamp_posts * (num_lamp_posts - 1)\n\n    return road_length\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    result = ((5/11 + 2/27) * 11 + 5/27)\n    return result\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    # Let's denote the number of sticks Eddie had originally as 'eddie_sticks'.\n    # After giving Belle 11 sticks, Belle and Eddie have the same number of sticks.\n    # We know Belle started with 49 sticks and received 11 more.\n\n    belle_sticks = 49 + 11\n\n    # Now, since they have the same number of sticks after the exchange,\n    # Eddie's original number of sticks minus 11 must equal Belle's current number of sticks.\n\n    # eddie_sticks - 11 = belle_sticks\n    # eddie_sticks = belle_sticks + 11\n\n    eddie_sticks = belle_sticks + 11\n\n    return eddie_sticks\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea / 2\n    tea_to_give = equal_volume - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '246'\n    permuted_digits = set(permutations(digits))\n    \n    return len(permuted_digits)\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            ans += i\n        else:\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    equation1 = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n\n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_had_after_eating = 4\n    neelesh_had_before_eating = neelesh_had_after_eating + 1\n    fraction_given = 1 / 6\n    total_sweets = neelesh_had_before_eating * (1 / fraction_given)\n    ayesha_left = total_sweets - (total_sweets * fraction_given)\n    \n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper_ball, iron_ball = symbols('copper_ball iron_ball')\n\n    equation1 = Eq(8 * copper_ball + 9 * iron_ball, 135)\n    equation2 = Eq(6 * copper_ball + 3 * iron_ball, 75)\n\n    solutions = solve((equation1, equation2), (copper_ball, iron_ball))\n\n    return solutions[copper_ball]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator = sum(1/(i*(20-i+1)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Since 1/70 is a rational number, its decimal representation either terminates or repeats\n    # To find the repeated sequence, we will perform long division manually until the pattern emerges\n\n    # Initialize variables for long division\n    remainder = 1\n    digit_count = 0\n    seen_remainders = {}\n\n    # Perform long division until the pattern repeats or we reach the 500th digit\n    while digit_count < 500:\n        remainder *= 10\n        digit = remainder // 70\n        remainder = remainder % 70\n\n        # If the remainder has been seen before, we found the repeating cycle\n        if remainder in seen_remainders:\n            break\n        # Otherwise, add the remainder to the seen_remainders map and increase digit count\n        else:\n            seen_remainders[remainder] = digit_count\n            digit_count += 1\n\n    # Calculate the length of the repeating cycle\n    cycle_length = digit_count - seen_remainders[remainder]\n\n    # The 500th digit will be the same as the digit at the position of (500-1) modulo cycle_length in the cycle\n    cycle_position = (500 - 1) % cycle_length\n\n    # Extract the digit at the cycle_position from the seen_remainders\n    for r, pos in seen_remainders.items():\n        if pos == cycle_position:\n            ans = r * 10 // 70\n            break\n\n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of gummy bears and y be the total number of lollipops initially\n    x, y = symbols('x y')\n    \n    # Equation based on the initial ratio 5x = 7y\n    equation1 = Eq(5*x, 7*y)\n    \n    # Equation based on the new ratio after adding 120 to each (5x+120)/(7y+120) = 4/5\n    equation2 = Eq(5*(x + 120), 4*(y + 120))\n    \n    # Solving the two simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total after 120 pieces are added to each pile\n    total_now = solutions[x] + 120 + solutions[y] + 120\n\n    return total_now\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    pounds_per_stone = 14\n    andrew_weight_pounds = 275\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_numbers = sum(numbers) * 3\n    return sum_numbers\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    # Total marbles\n    total_marbles = 560\n    # Marbles in box A\n    box_A = 80\n    # Remaining marbles to be distributed to B and C\n    remaining = total_marbles - box_A\n\n    # Let's denote the number of marbles in Box C as x\n    # Therefore, the number of marbles in Box B will be 2x (twice as many as in Box C)\n    # And we have the total of B and C to be equal to the remaining marbles\n    # So: x (Box C) + 2x (Box B) = remaining\n    # That means 3x = remaining\n    # Thus, to solve for x, we divide the remaining marbles by 3\n\n    box_C = remaining / 3  # Box C marbles\n\n    return int(box_C)\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    # Given details\n    nth_term = 10\n    given_term = 25\n    term_position = 10 - 1   # Since the given term is the 10th term, we subtract 1 to find the position\n\n    # Calculate common difference\n    common_difference = 31 - 28\n\n    # Calculate the first term using the nth term formula: an = a1 + (n - 1) * d\n    first_term = given_term - (term_position * common_difference)\n\n    return first_term\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    series = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.5 * 0.5 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n\n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3*carl - 5)\n    equation2 = Eq(bella, 5*carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_marks = (6 * 12) + (2 * 0)\n    total_questions = 6 + 2\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (Fraction(2017, 1) + Fraction(7, 8)) * (Fraction(11, 3)) - (2016 + Fraction(7, 8)) * (Fraction(11, 3))\n    denominator = (2017 + Fraction(1, 3) - 2016 - Fraction(7, 8)) * 17\n    fraction_part = numerator / denominator\n    ans = fraction_part * (3 + Fraction(23, 32))\n    return float(ans)\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Since we want the largest value of n with no two numbers having a difference of 5,\n    # we seek a subset of the first 20 positive integers following that rule.\n    # One possible set could be {1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19}\n    # Notice that we select numbers in runs of four consecutive integers,\n    # and then skip one to avoid a difference of 5 between any two numbers.\n    # Starting from 1, we can make 4 such runs (1-4, 6-9, 11-14, and 16-19)\n    # leaving out 5, 10, 15, and 20.\n    \n    # Thus, the largest value of n is the size of this set.\n    ans = len({1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19})\n    return ans\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_pupil in range(1, 100):\n        total_pencils = 44 * pencils_per_pupil\n        if str(total_pencils).startswith(\"B1B\"):\n            return pencils_per_pupil\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let J represent John's current age, M represent his mother's current age\n    J, M = symbols('J M')\n    \n    # John's Age in 8 years = John's current age + 8\n    Johns_future_age = J + 8\n    \n    # Mother's Age 20 years ago = Mother's current age - 20\n    Mothers_past_age = M - 20\n    \n    # The first equation according to one part of the problem statement\n    equation1 = Eq(Johns_future_age, Mothers_past_age)\n    \n    # The second equation according to the other part of the problem statement\n    # We know John's age is 5 times less than his mother's at some point\n    # The difference in their ages is constant, from the first equation we already know the difference\n    age_difference = M - J\n    \n    # When John is J years old, his mother is M years old, and that is 5 times John's age\n    equation2 = Eq(M, 5 * J)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (J, M))\n    \n    # John's age when his mother is 5 times his age\n    John_age_when_mother_5x = solutions[J]\n    \n    return John_age_when_mother_5x\n    \nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara, kevin, james = symbols('sara kevin james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [M % i for i in range(2, 11)]\n        if len(set(remainders)) == 9 and all(remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time_per_lap = 24\n    william_time_per_lap = 8\n\n    lcm = (tom_time_per_lap * william_time_per_lap) // math.gcd(tom_time_per_lap, william_time_per_lap)\n\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n\n    num_containers = (total_apples + per_container - 1) // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    \n    equation = Eq(romily, reema + 10)  # Romily collects £10 more than Reema.\n    \n    # Given that together they collected £40, we have another equation.\n    total_collected = 40\n    equation_total = Eq(romily + reema, total_collected)\n    \n    solutions = solve((equation, equation_total), (romily, reema))\n    \n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle for Two Sets\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n    product = 1\n    for base, exponent in factors.items():\n        if exponent % 2 != 0:\n            product *= base\n    return product\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 / 34) * 25\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    distance_between_posts = 4\n    # The number of posts includes both the starting and ending posts\n    num_posts = (field_length // distance_between_posts) + 1\n    return num_posts\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_sum = sum([6, 16, 26, 46, 56, 66])\n    ans = positive_sum - negative_sum\n\n    return ans\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n\n    rabbits_after_years = initial_rabbits * ((5 / 2) ** years)\n\n    return int(rabbits_after_years)\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time spent on various activities in minutes\n    play_time = 10\n    tv_time = 20\n    lunch_time = 20\n\n    # Known end time of lunch\n    end_lunch_time_str = '2:50 PM'\n    end_lunch_time = datetime.strptime(end_lunch_time_str, '%I:%M %p')\n\n    # Calculate total minutes spent before finishing lunch\n    total_time_before_lunch = play_time + tv_time + lunch_time\n\n    # Calculate the time Benson reached home\n    time_reached_home = end_lunch_time - timedelta(minutes=total_time_before_lunch)\n\n    return time_reached_home.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Consider A and B as one unit and then there are 5 units to arrange.\n    ways_to_arrange_5_units = factorial(5)\n    \n    # A and B can switch places between themselves, so multiply by 2.\n    ways_for_A_and_B_to_switch = 2\n    \n    # Total ways is the product of both possibilities.\n    total_ways = ways_to_arrange_5_units * ways_for_A_and_B_to_switch\n    \n    return total_ways\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    ans = 0\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y = 6 * x\n    return y\n\n# Since x is not defined in the function, we can't actually call solution() directly.\n# The relationship is defined within the function body, and it's a linear equation:\n# y = 6x\n\n# If you need to call solution with an actual value for x:\n# ans = solution() <- This won't work because x is undefined within the function.\n\n# Here's a modified version that would accept an x value if needed:\ndef solution(x):\n    y = 6 * x\n    return y\n\n# Now calling the function with a value for x will give us the corresponding y value.\n# For example:\n# ans = solution(10) -> This would return 60, because if x is 10 miles, the fare is $60"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_class_size = total_sweets // min_sweets_per_student\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    return (246 * 135) + (2 * 135)\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assuming x is the quantity of purple balloons\n    x = symbols('x')\n    # Red balloons are 3/5 of purple balloons -> red = (3/5)*x\n    # Green balloons are 4 times red balloons -> green = (4/3/5)*x = (4*5/3)*x\n    # Each red balloon was 4 grams, each green balloon was 5 grams and each purple balloon was 7 grams\n    # Total mass of balloons was 642 grams -> 4*(3/5)*x + 5*(4*5/3)*x + 7*x = 642\n    equation = Eq(4*(3/5)*x + 5*(4*5/3)*x + 7*x, 642)\n    \n    # Solve for x\n    solutions = solve((equation), (x))\n    purple_balloons = solutions[0]\n    \n    return purple_balloons\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable x\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n    ans = (road_length // interval) + 1  # Plus one for the tree at the initial point\n    return ans\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    ans = tens + hundredths + thousandths\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    ans = 25 / 100 * 1200\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps of the escalator\n    # Let e be the rate at which the escalator moves in steps per second\n\n    # When Peter walks at 1 step per second\n    # Time taken to reach the top is 10 seconds\n    # In that time, the escalator moves 10e steps\n    # The total number of steps covered is 10 (by Peter) + 10e (by the escalator)\n    # Hence, x = 10 + 10e  --- (1)\n\n    # When Peter walks at 2 steps per second\n    # Time taken to reach the top is 16 / 2 = 8 seconds\n    # In that time, the escalator moves 8e steps\n    # The total number of steps covered is 16 (by Peter) + 8e (by the escalator)\n    # Hence, x = 16 + 8e  --- (2)\n\n    # Solving equations (1) and (2) for x and e, we get two equations:\n    # 10 + 10e = x\n    # 16 + 8e = x\n    # Equal x values, so:\n    # 10 + 10e = 16 + 8e\n    # Solving for e\n    # 2e = 6\n    # e = 3\n\n    # Put e = 3 into equation (1)\n    # x = 10 + 10 * 3\n    # x = 10 + 30\n    # x = 40\n\n    # Thus, the number of steps of the escalator is 40\n    return 40\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    # Iterate through possible even hundreds digits (has to be non-zero)\n    for h in range(1, 5):\n        # Ones digit is twice the hundreds digit\n        o = 2 * h\n        # Checking the tens digit\n        for t in range(h + 1, 10, 2):\n            # If tens digit is even and not equal to other digits\n            if t != h and t != o and o < 10:\n                # Form the 3-digit number\n                num = 100 * h + 10 * t + o\n                # Check divisibility by 2 and 9\n                if num % 2 == 0 and num % 9 == 0:\n                    return num\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    color_pencil, notebook = symbols('color_pencil notebook')\n\n    equation1 = Eq(5 * color_pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * color_pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (color_pencil, notebook))\n\n    return solutions[color_pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, ken = symbols('sally ken')\n    original_ratio = Eq(sally/ken, 5/7)\n    after_giving = Eq(sally + 24, 2 * (ken - 24))\n    \n    solutions = solve((original_ratio, after_giving), (sally, ken))\n    \n    return solutions[ken] - 24\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip = bill * 0.20\n    tax = bill * 0.10\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    number_thought = (sides_of_square * 2) - sides_of_triangle\n    return number_thought\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    \n    bill = 82\n    \n    free_hours = 40\n    rate1 = 5\n    hours1 = 10\n    rate2 = 8\n    hours2 = 10\n    rate3 = 15\n    \n    total_paid_hours = 0\n    \n    if bill <= rate1 * hours1:\n        total_paid_hours = bill // rate1\n    else:\n        bill -= rate1 * hours1\n        total_paid_hours += hours1\n        \n        if bill <= rate2 * hours2:\n            total_paid_hours += bill // rate2\n        else:\n            bill -= rate2 * hours2\n            total_paid_hours += hours2\n            total_paid_hours += bill // rate3\n\n    total_hours = free_hours + total_paid_hours\n    return total_hours\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    # Raju has 3 times as much money as Vijay\n    equation1 = Eq(raju, 3 * vijay)\n    \n    # Raju has $152 more than Patrick\n    equation2 = Eq(raju, patrick + 152)\n    \n    # The three boys have an average amount of $507\n    equation3 = Eq((raju + vijay + patrick)/3, 507)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n    \n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n    \n    difference = joanna_total - amy_total\n    \n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for the magic number\n    magic_number = symbols('magic_number')\n\n    # The equations based on the given conditions\n    # After adding the magic number, the first number (57 + magic_number) is 4 times the second number (9 + magic_number)\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    # Using sympy's solve function to solve for the magic number\n    solved_magic_number = solve(equation, magic_number)\n\n    # Return the solution\n    return solved_magic_number[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    # Total number of ways to choose a committee with 1 teacher and any 4 students\n    total_combinations = comb(2, 1) * comb(13, 4)  # C(2, 1) * C(13, 4)\n\n    # Total number of ways to choose a committee with only male students\n    all_male_combinations = comb(2, 1) * comb(7, 4)  # C(2, 1) * C(7, 4)\n    \n    # To ensure at least one female student, subtract the all-male committees from the total\n    at_least_one_female_combinations = total_combinations - all_male_combinations\n    \n    return at_least_one_female_combinations\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - 6 * i for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    # Initialize count of total digits\n    total_digits = 0\n    # The number at which the current set of similar length numbers starts\n    current_page_number_start = 1\n    # The number of digits in the numbers from the current set \n    current_set_digits = 1\n    \n    while total_digits < 1014:\n        # Calculate the range of the current set. For example, 1-9, 10-99, 100-999, etc.\n        # We use current_set_digits to determine the range, i.e., 10**(current_set_digits-1) to 10**current_set_digits\n        current_set_end = 10 ** current_set_digits\n        \n        # Calculate the number of pages in the current set\n        pages_in_current_set = current_set_end - current_page_number_start\n        \n        # Calculate number of digits that would be added if we included all pages from the current set\n        digits_added_by_current_set = pages_in_current_set * current_set_digits\n        \n        # Check if adding this whole set surpasses 1014 digits,\n        # if it does, we stop and take only the necessary pages to reach 1014 digits\n        if total_digits + digits_added_by_current_set >= 1014:\n            # We only need enough from the current set to reach 1014, not the entire set\n            remaining_digits = 1014 - total_digits\n            \n            # The number of additional pages needed from the current set\n            # It is simply the remaining digits divided by the number of digits each page number in this set has\n            additional_pages = remaining_digits // current_set_digits\n            \n            # Add these additional pages to the start of our current set to get the last page number\n            last_page_number = current_page_number_start + additional_pages\n            \n            # Return the last page number as the solution\n            return last_page_number\n        else:\n            # If current set does not surpass, include all its digits\n            total_digits += digits_added_by_current_set\n            \n            # Move to the next set of page numbers, for next digit range\n            current_page_number_start = current_set_end\n            current_set_digits += 1\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original number\n    x = symbols('x')\n    \n    # Create the equation based on the given problem\n    equation = Eq(3*x + 6, x + 16)\n    \n    # Solve the equation for x\n    original_number = solve(equation, x)\n    \n    # Return the solution\n    return original_number[0]\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_of_monimial = 5\n    degree_of_x = 3\n    degree_of_y = degree_of_monimial - degree_of_x\n    n = degree_of_y // 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    # Calculate the amount of milk and tea per cup of bubble tea\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    \n    # Calculate the total amount of milk and tea needed for 45 cups\n    total_milk = milk_per_cup * 45\n    total_tea = tea_per_cup * 45\n    \n    # Calculate the total amount of milk and tea combined\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n    \n    twelfth_term = tenth_term + (12 - 10) * common_difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknown values\n    book_price = symbols('book_price')\n\n    # Create equations based on the problem statement\n    sarah_total = 8 * book_price + 3 * 0.40\n    rebecca_total = 3 * book_price + 8 * 0.40\n    price_difference = sarah_total - rebecca_total\n\n    # Set up and solve the equation\n    equation = Eq(price_difference, 1.00)\n    solution = solve(equation, book_price)\n\n    # Extract the solution for the book's price\n    book_price = solution[0]\n    \n    return book_price\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    cost_per_gummy_bear = 6  # in pence\n\n    # Convert £3.42 to pence\n    total_cost = 342  # in pence\n\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * cost_per_gummy_bear + bernice * cost_per_gummy_bear + candice * cost_per_gummy_bear, total_cost)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given median value\n    median = 20\n    \n    # Since the median of this list with 10 numbers is the average of the 5th and 6th elements\n    # and the sequence is ordered, the median is equal to the average of n+7 and n+8.\n    median_value = (median * 2) / 2  # times 2 and divide by 2 doesn't change the value, it's just to express the concept of average\n    \n    # So, we can establish that n+7.5 (average of n+7 and n+8) is equal to the median\n    # Now we solve for n\n    n = median_value - 7.5\n    \n    # Calculate the mean of the list\n    numbers = [\n        n, n + 2, n + 3, n + 5, n + 7, n + 8,\n        n + 11, n + 14, n + 16, n + 19\n    ]\n    mean = sum(numbers) / len(numbers)\n    \n    return mean\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n\n    num_containers = total_volume // per_container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let's denote the first number as 'n', thus the three consecutive numbers are n, n+1, n+2\n    # The sum of these three consecutive numbers is: n + (n+1) + (n+2) = 3n + 3\n    # We know the sum is 60, so we set up the equation 3n + 3 = 60\n    # Now we solve for n to get the first number, and then we can find the largest number\n    n = (60 - 3) // 3\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_members = 4\n    \n    # Total handshakes without restrictions (each member shakes hands with every other member)\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Handshakes that didn't occur because the four members did not shake each other's hands\n    missed_handshakes_within_group = non_shaking_members * (non_shaking_members - 1) // 2\n    \n    # Subtract the missed handshakes from the total to get the answer\n    handshakes = total_handshakes - missed_handshakes_within_group\n    \n    return handshakes\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z represent the weights of the three apples such that x < y < z (lightest to heaviest).\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    # If Tim eats the largest apple, the mean weight of the remaining two (x and y) is 70 grams.\n    equation1 = Eq((x + y)/2, 70)\n\n    # If Tim eats the lightest apple, the mean weight of the remaining two (y and z) is 105 grams.\n    equation2 = Eq((y + z)/2, 105)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y, z))\n\n    # We can't directly solve for z in terms of x from the equations, since we have only two equations.\n    # However, we can express z as follows:\n    # z = 2 * equation2's right-hand side - y\n    z_in_terms_of_y = 2 * equation2.rhs - y\n    \n    # Now, we can derive z based on y's value from the solution\n    z = z_in_terms_of_y.subs(y, solutions[y])\n\n    # The weight difference between the heaviest apple and the lightest apple\n    weight_difference = z - solutions[x]\n\n    return weight_difference\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10): # The original number must be a single-digit number\n        if i * 10 > i + 27: # Adding a '0' on the right side to form a 2-digit number, and checking the condition\n            return i\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Since it's a vertical number puzzle with unknowns represented by A and B.\n    # We have the addition in vertical form like this:\n    #\n    #  A\n    #  A\n    # +A\n    # ---\n    #  B\n    #\n    # We need to find the value of A such that when we add three times A vertically,\n    # we get a number with all identical digits represented by B, which means that\n    # B is a number like 111, 222, ..., or 999.\n    #\n    # Since B is a multiple of 111 (because all digits are the same), let's loop through\n    # multiples of 111 until we find a number that is divisible by 3 and gives us an integer A.\n    \n    for b in range(111, 1000, 111):\n        if b % 3 == 0:\n            a = b // 3\n            if a < 10:  # A must be a single digit number\n                return a\n    return None\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # As Bob finds that he is always the 3rd in line regardless of the direction,\n    # We can infer that the 2D array of animals must be 3x3, where Bob\n    # is positioned at the center (at index [1][1] in 0-based index system).\n\n    # There is only one center in a 3x3 array, so the total number of animals is:\n    total_animals = 3 * 3  # Rows * Columns\n\n    return total_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    # Find the smallest multiple of 11 greater than 100\n    smallest_multiple = (100 // 11 + 1) * 11\n    # Find the largest multiple of 11 less than 300\n    largest_multiple = (300 // 11) * 11\n\n    # Calculate the sum\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total length of the road covered by plum trees\n    total_length_of_road = (41 - 1) * 4  # The distance between 41 trees, minus the first tree\n\n    # Since pine trees are planted every 5m, we add 1 to include the tree at the beginning\n    num_of_pine_trees = (total_length_of_road // 5) + 1\n    \n    return num_of_pine_trees\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_salary = 3040\n    mistake_salary = 2800\n    correct_total = incorrect_total - mistake_salary + correct_salary\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Equation 1: Height of 6 one-cent coins = height of 5 two-cent coins\n    # Equation 2: Height of 4 one-cent coins = height of 3 five-cent coins\n    # Since heights are equal for all stacks we have:\n    # Equation 3: Height of one_cent coins = Height of two_cent coins\n    # Equation multiplied by 5/6 to equate to two_cent and 5/4 to equate to five_cent\n    # Equation 4: Total number of coins used\n    equation1 = Eq(6 * one_cent, 5 * two_cent)\n    equation2 = Eq(4 * one_cent, 3 * five_cent)\n    equation3 = Eq(5 / 6 * one_cent, 5 / 4 * five_cent)  # Derived from eq1 & eq2\n    equation4 = Eq(one_cent + two_cent + five_cent, 124)\n\n    # Solving the system of linear equations\n    solutions = solve((equation1, equation2, equation3, equation4), (one_cent, two_cent, five_cent))\n\n    # Calculate total value in cents\n    total_value = solutions[one_cent] * 1 + solutions[two_cent] * 2 + solutions[five_cent] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Get the solution for x\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # According to the problem:\n    # A = B + 350 (A had 350 mL more water than B at first)\n    # B = 2*(A - 500) (After spilling, B had twice as much water as A)\n\n    equations = (Eq(A, B + 350), Eq(B, 2*(A - 500)))\n\n    # Solve the system of equations\n    result = solve(equations, (A, B))\n    return result[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and blue_pens.is_integer() and red_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    monthly_production = m / 12\n    return monthly_production\n\nm = symbols('m')  # m is a symbol representing the total components produced last year\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for number in range(999999, 100000, -1):\n        if str(number) == str(number)[::-1] and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n    total_children_after_hour = initial_boys + initial_girls + children_joined\n    return total_children_after_hour\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    spent_on_books = total_money * 0.25\n    remaining_after_books = total_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83\n    shortfall_cm = 10\n    shortfall_m = shortfall_cm / 100  # Convert centimeters to meters\n    \n    piece_length_m = desired_length_m - shortfall_m\n\n    return piece_length_m\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    ans = (2 / 7) * 315\n    return ans\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    sum_of_numbers = 0\n\n    for i in range(41):\n        sum_of_numbers += pattern[i % pattern_length]\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p_coin in range(0, 47, 2):\n        for five_p_coin in range(0, 47, 5):\n            if two_p_coin + five_p_coin == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the initial number of marbles Wei Yan had\n    x = symbols('x')\n\n    # Wei Yan gave 3/8 of them to his friends, so he was left with 5/8\n    remaining_after_friends = (5/8) * x\n\n    # Wei Yan gave 5/7 of the remaining marbles to his brother, so he was left with 2/7\n    remaining_after_brother = (2/7) * remaining_after_friends\n\n    # His cousin gave him 408 marbles\n    remaining_after_cousin = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(remaining_after_cousin, 2 * x)\n\n    # Solve for the initial number of marbles x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pins_initial, needles_initial, needles_sold, needles_left = symbols('pins_initial needles_initial needles_sold needles_left')\n    \n    # Equation representing the initial total of pins and needles\n    equation1 = Eq(pins_initial + needles_initial, 2540)\n    \n    # Equation representing the number of pins sold\n    equation2 = Eq(pins_initial - 1820, needles_left)\n    \n    # Equation representing the number of needles sold as 4/5 of the initial needles\n    equation3 = Eq(needles_sold, needles_initial * 4/5)\n    \n    # Equation representing the needles left after selling 4/5 of them\n    equation4 = Eq(needles_initial - needles_sold, needles_left)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (pins_initial, needles_initial, needles_sold, needles_left))\n\n    # Returning the number of needles left, which is our answer\n    needles_left_solution = solutions[needles_left]\n    \n    # To verify Paul's solution, check if 455 is equal to the needles left from the solution\n    pauls_solution_correct = needles_left_solution == 455\n\n    return needles_left_solution, pauls_solution_correct\n\nans, pauls_solution_correct = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial ages\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerators = [(9 + 10 + 11), (10 + 11 + 12), (11 + 12 + 13), (12 + 13 + 14)]\n    denominators = [8, 9, 10, 11]\n    signs = [1, -1, 1, -1]\n\n    numerator = sum(sign * num / den for sign, num, den in zip(signs, numerators, denominators))\n    denominator = sum(signs[i] / denominators[i] for i in range(len(denominators)))\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = 654876\n    num2 = 279745\n\n    # Round off each number to the nearest hundred\n    rounded_num1 = round(num1, -2)\n    rounded_num2 = round(num2, -2)\n\n    # Calculate the estimated difference\n    estimated_difference = rounded_num1 - rounded_num2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    ways = 0\n    # start from 2 as we need to split in two or more numbers\n    for n in range(2, 8):\n        # subtract one to ensure at least n non-zero natural numbers in the partition\n        ways += (8 - 1) // n\n    return ways\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - (x1 + x2)\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of (x1, x2, x3)\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_meters = 480\n    \n    speed_meters_per_second = length_meters / time_seconds\n    speed_kilometers_per_hour = speed_meters_per_second * 3.6\n\n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2/5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (total_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    \n    failed_percentage = (failed_pupils / total_pupils) * 100\n    \n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum(page for page in range(1, 51) if '3' in str(page))\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return combinations\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # This problem is about finding the maximum number of trials needed to match all keys\n    # to their respective classrooms using the pigeonhole principle. \n    # When he tries a key for a classroom, there are two possibilities:\n    # 1. It is the right key for the room.\n    # 2. It is not the right key and will exclude one wrong possibility.\n    \n    # For the first classroom, there are 10 possible keys, so he might need to try all 10 keys.\n    # For the second classroom, there are 9 remaining keys, so he might need to try all 9 keys.\n    # This pattern continues until there is only 1 key left, which must be for the last classroom.\n    # So the maximum number of tries is the sum of the first 10 positive integers minus 1 \n    # (since the last key does not require a try).\n    \n    max_tries = sum(range(1, 11)) - 1\n    \n    return max_tries\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags_used, poppers_left = divmod(total_guests, poppers_per_bag)\n\n    return poppers_left\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    num_string = ''.join(str(i) for i in range(1, 31))\n    num_string_sorted = sorted(num_string)[:len(num_string) - 46]\n    ans = ''.join(num_string_sorted).lstrip('0')\n    return int(ans)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number is 10001\n    # The greatest 6-digit palindrome number is 999999\n    least_5_digit_palindrome = 10001\n    greatest_6_digit_palindrome = 999999\n\n    # Compute the difference\n    diff = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return diff\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root, sqrt\n\n    getcontext().prec = 10  # Set precision for Decimal calculations\n\n    # Convert repeating decimals to Decimal\n    neg_thirteen_point_three_repeating = Decimal(-40) / Decimal(3)\n    four_point_zero_nine_repeating = Decimal(37) / Decimal(9)\n    eleven_point_one_repeating = Decimal(100) / Decimal(9)\n\n    # Calculate the expression with the given precision and round it off\n    numerator = root(neg_thirteen_point_three_repeating, 3) * four_point_zero_nine_repeating**2\n    denominator = Decimal('59.24') - sqrt(eleven_point_one_repeating)\n\n    result = numerator / denominator\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_pick = 2\n    \n    return comb(num_children, num_pick)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since the powers of 7 have a cycle of 4 in the last digit (7, 9, 3, 1), \n    # we can find the last digit by taking the remainder of 2023 divided by 4.\n    remainder = 2023 % 4\n    \n    # If the remainder is 0, the last digit is 1 (because it's the end of the cycle: 7^4, 7^8, etc.)\n    # If the remainder is 1, the last digit is 7 (because it's the beginning of the cycle: 7^1, 7^5, etc.)\n    # If the remainder is 2, the last digit is 9 (second in the cycle: 7^2, 7^6, etc.)\n    # If the remainder is 3, the last digit is 3 (third in the cycle: 7^3, 7^7, etc.)\n    power_cycle = {0: 1, 1: 7, 2: 9, 3: 3}\n    \n    # Get the ones digit from the cycle dictionary\n    ones_digit = power_cycle[remainder]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls_fraction = 3 / 4\n    total_people = boys / (1 - girls_fraction)\n    girls = total_people * girls_fraction\n    return int(girls)\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    target_sum = 60\n    years = 0\n    \n    while sara_age + lucy_age < target_sum:\n        years += 1\n        sara_age += 1\n        lucy_age += 1\n        \n    return years\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    benches_for_two = 6\n    benches_for_three = 9\n    \n    total_capacity = (benches_for_two * 2) + (benches_for_three * 3)\n\n    return total_capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    coin_value = 1\n    num_coins = int(book_cost // coin_value)\n    change = (num_coins + 1) * coin_value - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    numbers = list(range(99, 120, 2))\n    ans = sum(numbers[::2]) - sum(numbers[1::2])\n    return ans\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert the mixed number to an improper fraction\n    numerator = 201 * 7 + 1\n    denominator = 7\n\n    # Perform the division by 8 on the improper fraction\n    result_fraction = (numerator / denominator) / 8\n\n    # Subtract 1/7 from the result fraction to find A\n    A = result_fraction - (1 / 7)\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the numbers of basketballs and footballs\n    b, f = symbols('b f')\n\n    # Original ratio of footballs to basketballs: f = 2/5 * b\n    original_ratio = Eq(f, 2/5 * b)\n\n    # After selling the basketballs, the store had 2/3 as many footballs as basketballs\n    # f = 2/3 * (b - 16)\n    new_ratio = Eq(f, 2/3 * (b - 16))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (b, f))\n\n    # Calculate the total number of footballs and basketballs at first\n    total = solutions[b] + solutions[f]\n\n    return total\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # When the older brother was as old as the younger brother is now, the younger was 12.\n    # older_past - younger_past = older_current - younger_current\n    # younger_past = 12\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n\n    # When younger brother becomes as old as the older brother is now, the older will be 27.\n    # younger_future - younger_current = older_future - older_current\n    # older_future = 27\n    equation2 = Eq(younger_current + (older_current - younger_current), 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To make sure that she has a pair, she could take the worst-case scenario:\n    # taking 4 gloves of different colors and then 1 more glove to guarantee a pair.\n    # So, the answer is 4 + 1 (since after 4, the next one must be a color she already has)\n    ans = 4 + 1\n    return ans\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    max_junctions = 13 * (13 - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -((-30) // 8) * 8  # Ceiling division to find the first multiple of 8 >= 30\n    last_multiple = 82 // 8 * 8  # Floor division to find the last multiple of 8 <= 82\n\n    # Count the number of multiples by taking the difference and dividing by 8\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Original amount of stickers Sam and Peter had\n    equation1 = Eq(sam, peter + 40)\n    \n    # After exchanging, final amount of stickers they had\n    equation2 = Eq(sam - 0.2 * sam + 0.25 * peter, peter - 0.25 * peter + 0.2 * sam + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_increase = original_price * 0.10\n    spring_festival_price = original_price + spring_increase\n    lantern_decrease = spring_festival_price * 0.10\n    lantern_festival_price = spring_festival_price - lantern_decrease\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in each group stage\n    group_games = 4 * (combinations(4, 2))\n\n    # Calculate the number of games in knockout stages\n    # Quarter-finals (top 8), 4 games\n    # Semi-finals (top 4), 2 games\n    # Final and third-place match, 2 games\n    knockout_games = 4 + 2 + 2\n    \n    # Number of games is the sum of group stage games and knockout stage games\n    total_games = group_games + knockout_games\n    return total_games\n\ndef combinations(n, r):\n    from math import factorial\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n    fathers_age_now = fathers_age_two_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    # Initialize the answer variable\n    ans = None\n\n    # Loop through the numbers from 31 to 39 because the number of sweets Mrs. Tan has is more than 30 but less than 40\n    for sweets in range(31, 40):\n        # Check if the number of sweets is divisible by both 4 and 6 without any remainder\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            # Assign the number of sweets to the answer variable\n            ans = sweets\n            # Break the loop as we have found the answer\n            break\n\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    total = 122.55 + 9.45 + 13.21 - 3.21\n    return total\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert minutes to hours\n    total_time_hours = 7.2 / 60\n\n    # Define speeds\n    student_speed = 8\n    teacher_speed = 12\n\n    # Total distance covered by the teacher\n    teacher_total_distance = teacher_speed * total_time_hours\n\n    # Let x be the distance the teacher ran to reach the front\n    # The students also move during the time the teacher runs to the front and back\n    # Distance covered by students when teacher is running towards the front = student_speed * (x / teacher_speed)\n    # Distance covered by students when teacher is running back = student_speed * (x / teacher_speed)\n\n    # As per the relative speed concept, when moving in the same direction: relative speed = speed_teacher - speed_students\n    # When moving in opposite directions: relative speed = speed_teacher + speed_students\n\n    # Now, the total time taken by the teacher to go to the head and return to the tail can be calculated as follows:\n    # time_to_front = distance_to_front / relative_speed_to_front = x / (teacher_speed - student_speed)\n    # time_to_back = distance_to_back / relative_speed_to_back = x / (teacher_speed + student_speed)\n\n    # And total time is the sum of these: total_time = time_to_front + time_to_back\n\n    # Thus, the equation becomes:\n    # teacher_total_distance = distance_to_front + distance_to_back\n    # teacher_total_distance = x + x\n    # teacher_total_distance = x * ((teacher_speed + student_speed) / (teacher_speed - student_speed))\n\n    # Calculate the distance using the formula derived from the above explanation\n    x = teacher_total_distance / ((teacher_speed + student_speed) / (teacher_speed - student_speed) + (teacher_speed - student_speed) / (teacher_speed + student_speed))\n\n    # The length of the line is the distance the teacher ran to reach the front\n    return x\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for number in range(8, 86):\n        count += str(number).count('3')\n    # Since the digit '3' will be encountered every 10 numbers\n    # (e.g., 13, 23, 33, etc.), we subtract the initial range (8-12)\n    # so the first '3' is at 13, which is the 6th number in the sequence.\n    position = count - (13 - 8)\n\n    return position\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance from his home to office be d km.\n    # Time taken to travel at 4 km/h = d / 4 hours\n    # Time taken to travel at 6 km/h = d / 6 hours\n    # According to the question:\n    # (d / 4) - (d / 6) = 20min late - 10min early\n    # Convert minutes to hours: 20min = 20/60 hours, 10min = 10/60 hours\n    # (d / 4) - (d / 6) = (20/60) - (-10/60)\n    # (d / 4) - (d / 6) = (30/60)\n    # (d / 4) - (d / 6) = 1/2\n    # Solving the equation for d:\n    d = (1/2) * (4 * 6) / (6 - 4)  # Simplified version of the equation d * (1/4 - 1/6) = 1/2\n    return d\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = 2 * i\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence_conversion = 100\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * pounds_to_pence_conversion\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    unique_permutations = set(permutations('CYZZ'))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reconstruct Ken's action\n    ken_took = (remaining + 1) * 2\n    remaining += ken_took\n    # Reconstruct Nini's action\n    nini_took = (remaining - 3) * 2\n    remaining += nini_took\n    # Reconstruct Ivy's action\n    ivy_took = (remaining + 2) * 2\n    remaining += ivy_took\n    # Reconstruct Eddie's action\n    initial_candies = (remaining - 1) * 2\n    return initial_candies\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Total climbed in 6 days\n    total_height = 18  # Total burrow height\n\n    # Calculate slide down height\n    slide_down = total_climbed - total_height\n\n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    sum_of_m_and_n = m + n\n    return sum_of_m_and_n\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    import math\n    \n    num_students_A = 12\n    num_students_B = 16\n    num_students_C = 20\n    \n    gcd_AB = math.gcd(num_students_A, num_students_B)\n    gcd_ABC = math.gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_participants = 18 + 12\n    total_score_boys = 18 * 74\n    total_score_all = total_participants * 82\n    total_score_girls = total_score_all - total_score_boys\n    average_score_girls = total_score_girls / 12\n\n    return average_score_girls\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    heights = [\n        5,                    # meters to centimeters conversion: 5m = 500cm\n        120,                  # already in centimeters\n        50 / 10,              # millimeters to centimeters conversion: 50mm = 5cm\n        8 * 30.48             # feet to centimeters conversion: 8ft = 8 * 30.48cm\n    ]\n    \n    # We iterate over the heights and check if they are within a reasonable range for a pupil's height\n    reasonable_range = (100, 200)  # assuming the range of height for a pupil is 100cm to 200cm\n    ans = [height for height in heights if reasonable_range[0] <= height <= reasonable_range[1]]\n    \n    # We are expecting only one correct height, so we return the first element of ans\n    return ans[0]\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Define the number of paintbrushes taken by each girl and boy\n    paintbrushes_per_girl = 2\n    paintbrushes_per_boy = 3\n    \n    # The total number of paintbrushes taken\n    total_paintbrushes = 99\n    \n    # Let the number of boys be x\n    # Then the number of girls will be 3x\n    # Total paintbrushes = (number of girls * paintbrushes_per_girl) + (number of boys * paintbrushes_per_boy)\n    # 99 = (3x * 2) + (x * 3)\n    # Solve for x\n    for x in range(1, total_paintbrushes):\n        if (3 * x * paintbrushes_per_girl) + (x * paintbrushes_per_boy) == total_paintbrushes:\n            # Find the number of girls\n            return 3 * x\n            \nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    # Lengths of pieces Alyson, Clara, and Joyce cut into\n    Alyson_piece = 2\n    Clara_piece = 3\n    Joyce_piece = 5\n\n    # Find the least common multiple (LCM) for the lengths\n    shortest_length = lcm(Alyson_piece, Clara_piece, Joyce_piece)\n\n    return shortest_length\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate the fish population\n    # Number of marked fish released\n    marked_fish = 100  \n    # Total catch in second sample\n    total_catch = 200  \n    # Number of marked fish in second sample\n    marked_catch = 25  \n\n    # Estimate the total fish population in the pond\n    # Using the formula:\n    # (Number of marked fish in first catch / Total fish population) = (Number of marked fish in second catch / Size of second catch)\n    total_fish_population = (marked_fish * total_catch) // marked_catch\n\n    return total_fish_population\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_rabbit_days = 12 * 15\n    days_for_20_rabbits = total_rabbit_days / 20\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n    return total_sweets\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_diff = 121 - 124  # This is the common difference of the sequence\n    n = 15  # We want the 15th term\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # nth_term = first_term + (n - 1) * common_diff\n    nth_term = first_term + (n - 1) * common_diff\n\n    return nth_term\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_has = 10\n    mother_gave = 22\n    dress_cost = 56\n    \n    total_money = susan_has + mother_gave\n    money_needed = dress_cost - total_money\n    \n    return money_needed\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77//2 + 1):\n        remaining_weight = 77 - 2 * two_gram_weights\n        if remaining_weight % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    quarters = total_amount * quarters_in_one_dollar\n    return int(quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    score_of_first_4_assignments = 96 + 85 + 89 + 92\n    score_of_5th_assignment = total_score_for_5_assignments - score_of_first_4_assignments\n    return score_of_5th_assignment\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Abigail gets up at 07:40 in the morning\n    wake_up_time = datetime.strptime('07:40', '%H:%M')\n\n    # 25 minutes later she starts her breakfast\n    start_breakfast_time = wake_up_time + timedelta(minutes=25)\n\n    # Breakfast takes 10 minutes to finish\n    end_breakfast_time = start_breakfast_time + timedelta(minutes=10)\n\n    # Journey takes 35 minutes in total\n    arrival_time = end_breakfast_time + timedelta(minutes=35)\n\n    # She arrives 5 minutes late for registration\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Formula for the sum of the first n cubes is (n(n+1)/2)^2\n    # We need to calculate the sum from 10 to 20 so we will calculate the sum\n    # for the first 20 cubes and subtract the sum of the first 9 cubes from it\n\n    sum_20 = (20 * (20 + 1) // 2) ** 2  # Sum of the cubes from 1 to 20\n    sum_9 = (9 * (9 + 1) // 2) ** 2  # Sum of the cubes from 1 to 9\n\n    # The result is the sum from 10 to 20\n    ans = sum_20 - sum_9\n    return ans\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    cards = 0\n    while True:\n        cards += 1\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            return cards\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    num_coaches = (pupils + coach_capacity - 1) // coach_capacity  # Use ceiling division\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    original_ratio = Eq(pip / bud, 4 / 7)\n    new_ratio = Eq((pip / (bud + 5)), 8 / 15)\n\n    solutions = solve((original_ratio, new_ratio), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # Maximum pencils for the first 4 unique colors\n    max_pencils_4_colors = 4 * (10 - 1)  # 10 - 1 because the 10th will ensure the 5th color\n    \n    # Draw at least 10 pencils for the 5th color\n    pencils_5th_color = 10\n    \n    # Total pencils to ensure at least 5 different colors with at least \n    # 10 pencils for each color\n    total_pencils = max_pencils_4_colors + pencils_5th_color\n    \n    return total_pencils\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Calculate the perimeter of the rectangular field\n    perimeter = 2 * (144 + 204)\n\n    # Subtract the 4 corner wheats since they are not counted in the distances\n    wheat_count_with_no_corners = 116 - 4\n    \n    # There is one less interval than the number of wheats on each side\n    intervals = wheat_count_with_no_corners\n\n    # Calculate the distance between each wheat\n    distance_between_wheats = perimeter / intervals\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5_pow = 5\n    last_digit_7_pow = pow(7, 30, 10)  # Use pow with modulus to find the last digit\n    ans = (last_digit_5_pow * last_digit_7_pow) % 10\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for unknowns\n    g, gs, gn, b, bs, bn = symbols('g gs gn b bs bn')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(b, g + 90)  # 90 more boys than girls\n    equation2 = Eq(gs / gn, 31 / 49)  # Ratio of swimming to not swimming girls\n    equation3 = Eq(bs, bn - 120)  # Boys who can swim is 120 less than those who cannot\n    equation4 = Eq(g + b, 1690)  # Total number of students\n\n    # Use the equations to express everything in terms of g (girls)\n    bn = b - bs\n    equation5 = Eq(g + g * 80 / 48 + 90 + (g + 90) * 80 / 48 - 120, 1690)\n\n    # Solve the system of equations\n    solutions = solve((equation5, equation2, equation3, equation4), (g, gs, gn, b, bs, bn))\n\n    # Sum the number of pupils who cannot swim (girls and boys)\n    total_cannot_swim = solutions[gn] + solutions[bn]\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    return gcd(39, 52)\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    shared_among = 2\n    joe_squares = total_squares // shared_among\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4  # Laura was 4th in the queue\n    amanda_position_from_end = 7  # Amanda was 7th from the end of the queue\n    children_between = 2  # 2 children queuing between Laura and Amanda\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef solution():\n    primes = [p for p in range(2, 46) if is_prime(p)]\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and a != c and b != c:\n                    # A's statement (no addition equation possible)\n                    if not (a + b == c or a + c == b or b + c == a):\n                        # B's statement (difference is 7)\n                        if abs(a - b) == 7 or abs(a - c) == 7 or abs(b - c) == 7:\n                            # C's statement (possible after multiplying by 2)\n                            if (2 * c + a in primes or 2 * c + b in primes or 2 * c + a == b or 2 * c + b == a):\n                                return a + b + c\n    return None\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for points of A and B grades\n    A, B = symbols('A B')\n\n    # Equation from Simon's grades and score\n    equation1 = Eq(4*A + 4*B, 36)\n    # Equation from Peter's grades and score\n    equation2 = Eq(2*A + 3*B, 22)\n\n    # Solving for A and B\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Points score for someone with 3 A grades and 5 B grades\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime nor composite nor zero\n    D = A - 2  # 2 less than the smallest prime number\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 8  # greatest factor of 8\n    H = 6  # lowest multiple of 6\n    \n    ans = str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H)\n    return int(ans)\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    one_day_seconds = 24 * 60 * 60\n    part_of_day = (1 / 4) * (1 / 6) * (1 / 8)\n    seconds = one_day_seconds * part_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(marry / alexis, 7 / 5)\n    equation2 = Eq(marry - 0.20 * marry, alexis - 0.20 * alexis + 20)\n    equation3 = Eq(charlotte + 0.80 * charlotte, 0.20 * marry + 0.20 * alexis)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte), dict=True)\n    \n    # Extract the solution for Alexis by finding the one that matches the equation constraints\n    for solution in solutions:\n        if solution[marry] > 0 and solution[alexis] > 0:\n            return solution[alexis]\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_permutations = set(permutations(digits))\n    count = sum(1 for perm in unique_permutations if perm[0] != '0')\n    return count\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands_units in range(1, 10):\n        for tens in range(10):\n            for hundreds in range(10):\n                pip_number = thousands_units * 1001 + hundreds * 100 + tens * 10\n                bud_number = tens * 1000 + hundreds * 100 + thousands_units * 10 + thousands_units\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    from math import factorial as fact\n\n    # The family (Eddie and his parents) will be treated as one unit,\n    # therefore, we are finding the permutations of 8 units instead of 10.\n    \n    # There are also 3! ways to arrange Eddie and his parents among themselves.\n    family_permutations = fact(3)\n    \n    # We calculate the permutations of the remaining 7 units plus the 1 family unit.\n    total_permutations = fact(8)\n    \n    # The final answer is the product of the two permutation counts.\n    ans = family_permutations * total_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    actual_minuend = 166\n\n    correct_difference = actual_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # John reads a different number of pages every day, which can be interpreted\n    # as a sequence of natural numbers where each number represents the pages read in a day.\n    pages_total = 95\n    day = 1\n\n    # The sequence of page numbers read each day forms an arithmetic progression starting from 1.\n    while day * (day + 1) / 2 <= pages_total:\n        day += 1\n\n    return day - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # The initial ratio of oranges to lemons is 3:5\n    initial_ratio = Eq(oranges/lemons, 3/5)\n\n    # After selling 48 oranges, the ratio becomes 1:2\n    new_ratio = Eq((oranges - 48)/lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # The grass amount can be represented as follows for each option:\n    # Option 1: 25 cows for 10 days -> total_grass = 25 * 10\n    # Option 2: 15 cows for 20 days -> total_grass = 15 * 20\n    # These two should be equal since the pasture's grass amount is constant.\n    \n    # So let's calculate the total_grass using one option:\n    total_grass = 25 * 10  # or 15 * 20, same result\n\n    # Now we need to find out how many cows can be fed for 50 days.\n    # If total_grass can feed 25 cows for 10 days, for 50 days it will be:\n    # cows_for_50_days = total_grass / 50\n\n    cows_for_50_days = total_grass / 50\n    return cows_for_50_days\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    # On the first day, she sold 20 watermelons which is 1/3 of the second day.\n    second_day = 20 * 3  # This will give us the number of watermelons sold on the second day.\n\n    # On the third day, she sold 5/3 of the number sold on the second day.\n    third_day = (5/3) * second_day\n\n    # Total watermelons sold\n    total_sold = 20 + second_day + third_day\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef factorial_div(n, k):\n    \"\"\"Computes factorial(n) / factorial(k) where n >= k.\"\"\"\n    result = 1\n    for i in range(k+1, n+1):\n        result *= i\n    return result\n\ndef solution():\n    # Number of ways to arrange 3 maths books together\n    maths_book_arrangements = factorial(3)\n\n    # Number of ways to arrange 2 English books together\n    english_book_arrangements = factorial(2)\n\n    # Treating the 3 maths books as one block, and the 2 English books as another block,\n    # we now have 3 other books + 1 block of maths books + 1 block of English books = 5 blocks in total\n    # We need to find the number of ways to arrange these 5 blocks\n    block_arrangements = factorial(5)\n\n    # Total different ways is the product of all the arrangements\n    total_different_ways = block_arrangements * maths_book_arrangements * english_book_arrangements\n\n    return total_different_ways\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    sale_price = original_price * (1 - discount)\n    member_price = sale_price - member_discount\n    final_price = member_price + (member_price * sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    number_of_cakes = 250 / flour_per_cake\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (20 * 8) // 32\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_days = 12\n    \n    # Equation: 12 * ivy_rate + (12 - days_off) * kevin_rate = 1\n    # Solve for days_off\n    days_off = symbols('days_off')\n    equation = Eq(12 * ivy_rate + (12 - days_off) * kevin_rate, 1)\n    \n    days_off_solution = solve(equation, days_off)\n    \n    return days_off_solution[0]\n\nfrom sympy import symbols, Eq, solve\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Ophelia has 4 times as many diamonds than penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After buying 21 more diamonds, Penelope has 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):  # Iterate through all page numbers (1 to 200 inclusive)\n        count += str(i).count('1')  # Count the number of times '1' appears in each page number and sum them up\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Since there are only two colors, after taking out three socks,\n    # we're guaranteed that at least two of them will be the same color.\n    return 3\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    n = 9  # Total number of statues\n    r = 4  # Number of statues to arrange\n\n    # Calculate number of ways using permutations formula: nPr = n! / (n - r)!\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # £1.00 is 100 pence\n    \n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    cost_of_bracelet = 80\n    gst_rate = 0.08\n    total_cost = cost_of_bracelet + (cost_of_bracelet * gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    end_value = initial_value * ((1 - depreciation_rate) ** years)\n    return end_value\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # Total number of tricycles and bicycles is 300\n    equation1 = Eq(b + t, 300)\n\n    # Total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    # Since bicycles have 2 wheels and tricycles have 3 wheels,\n    # the total number of bicycle wheels is 2b and the total number of tricycle wheels is 3t\n    equation2 = Eq(3*t - 2*b, 180)\n\n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (b, t))\n\n    # We need to find the number of bicycles\n    return solutions[b]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # Minimum divisor is one more than the remainder \n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Since there are 2 grey rabbits per pattern, and there are 14 grey rabbits,\n    # we can find out the number of complete patterns by dividing 14 by 2.\n    num_patterns = 14 / 2\n    \n    # One complete pattern includes 1 black, 2 white, and 2 grey rabbits: a total of 5 rabbits.\n    total_rabbits_in_complete_patterns = num_patterns * 5\n    \n    # If the last pattern is incomplete, it can have either 1 black or 1 black + 2 white rabbits\n    # Because we're looking for the maximum number, we assume the last incomplete pattern has 3 more rabbits (1 black + 2 white)\n    max_additional_rabbits = 3\n    \n    # The maximum number of rabbits altogether in the zoo will be the number of rabbits in complete patterns\n    # plus the maximum number of additional rabbits if the last pattern is incomplete.\n    max_rabbits = total_rabbits_in_complete_patterns + max_additional_rabbits\n    \n    return int(max_rabbits)\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    return 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n\n    # Use the inclusion-exclusion principle\n    chocolate_biscuits = chocolate_with_foil + not_chocolate_not_foil - (foil_wrappers - chocolate_with_foil)\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    is_tongtong_correct = rounded_number == 9764.0\n    return rounded_number if not is_tongtong_correct else None\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    # Let the original speed be s (m/min) and the original time be t (min), so\n    # Distance d = s * t\n    \n    # With a 25% increase in speed, new speed is 1.25s and time taken is t - 20\n    # Hence, d = 1.25s * (t - 20)\n    \n    # With a 45 m/min decrease in speed, new speed is s - 45 and time taken increases by 75% of t\n    # Hence, d = (s - 45) * (t + 0.75t)\n    \n    # Equating the distances (since it's the same distance):\n    # s * t = 1.25s * (t - 20) => t = 80\n    # s * t = (s - 45) * 1.75t => s = 225\n    \n    # Now we can find the distance by using one of the above equations\n    # Original speed s and original time t\n    s = 225  # Speed in metres per minute\n    t = 80  # Time in minutes\n    d = s * t  # Distance\n    \n    return d\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    power_of_5 = 15\n    power_of_2 = 10\n\n    # The number of zeros at the end of a product is determined by the number of pairs of 5 and 2 factors.\n    # Since there are fewer 2s than 5s, the number of zeros is limited by the number of 2s.\n    zeros = min(power_of_5, power_of_2)\n\n    return zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    perm = permutations(digits)\n    count = 0\n    \n    for p in perm:\n        for i in range(1, len(p)):\n            count += 1  # add a count for every possible position of the decimal point\n    \n    return count\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x to represent the number of crystals Jason had initially.\n    x = symbols('x')\n\n    # We set up an equation based on the problem statement.\n    # Jason sold 10 more than half of his crystals to Yvonne -> (x/2) + 10\n    # Then, he mined 20 more crystals -> +20\n    # After that he sold 14 crystals to Cherlyn -> -14\n    # He has 35 crystals in the end -> =35\n    # The equation representing the situation is: x - ((x/2) + 10) + 20 - 14 = 35\n    \n    equation = Eq(x - ((x / 2) + 10) + 20 - 14, 35)\n\n    # We solve the equation for x.\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    \n    # Since Bala is directly behind Ali, there is only one position for Bala.\n    # We don't count Bala again, because we are already counting the people behind Bala.\n    total_people = people_in_front_of_Ali + 1 + people_behind_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # All cars are black or blue and Fords or Dodges.\n    # Since there are 25 black Dodges, the remaining Dodges are blue.\n    blue_dodges = blue_cars - black_dodges\n    if blue_dodges < 0:\n        # This means there cannot be fewer blue cars than black Dodges, which would contradict the given information.\n        # Hence, the original subtraction would've returned a negative number, which is invalid.\n        blue_dodges = 0\n\n    # The number of Fords that are blue is therefore the total number of blue cars minus the number of blue Dodges.\n    blue_fords = blue_cars - blue_dodges\n\n    return blue_fords\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    total_pence = 30 * 100  # Convert £30 to pence\n    cost_per_plant = 85     # Cost per plant in pence\n    plants_can_buy = total_pence // cost_per_plant  # Number of plants that can be bought\n    \n    return plants_can_buy\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n    \n    # Create the equation\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return ans\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start the search from 4, since 1, 2, and 3 are not composite.\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n\n        # Check if all the numbers A, B, C, and D are composite.\n        if len([x for x in [A, B, C, D] if not all(x % i != 0 for i in range(2, x))]) == 4:\n            return A + B + C + D\n        \n        # Increment A and try again.\n        A += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    num_working_days = 5\n    total_earnings = average_daily_earnings * num_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # Each kid gets at least one apple\n    remaining_apples = total_apples - children\n    \n    # Using the pigeonhole principle, divide the remaining apples equally among the children\n    apples_per_child = remaining_apples // children\n    \n    # Add one because we need to find the least number of apples for the kid who gets the most\n    least_apples_for_max = apples_per_child + 1\n    \n    return least_apples_for_max\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    # By the Pigeonhole Principle, to ensure at least one of each color,\n    # the magician has to pick all balls of two colors and then one more.\n    ans = blue_balls + red_balls + 1  # 1 is to ensure at least one green ball\n    return ans\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    result = (3/8) * 960\n    return result\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n\n    # Number of teams\n    teams = 6\n    \n    # Number of games in a single round-robin tournament\n    games = comb(teams, 2)\n\n    return games\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, wrong = symbols('correct wrong')\n\n    # 3 marks for each correct, -2 marks for each wrong\n    equation1 = Eq(3 * correct - 2 * wrong, 125)\n\n    # Total questions answered is the sum of correct and wrong\n    equation2 = Eq(correct + wrong, 50)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    return math.gcd(math.gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"296{digit}12\")\n        if num % 9 == 0:\n            return digit\n        \nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    base_number = (two_thirds * 3) / 2\n    three_quarters = (base_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    final_position = 10\n    starting_position = (final_position - total_counts % 12) % 12\n    starting_position = 12 if starting_position == 0 else starting_position\n\n    return starting_position\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        m_squared = sum([2*i - 1 for i in range(23 // 2, k + 1)])\n        m = m_squared ** 0.5\n        if m == int(m):\n            return int(m)\n        k += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Distance driven at 40 km/h for the first 2 hours\n    distance_first_part = 2 * 40\n    \n    # Remaining distance Linda drove at 70 km/h\n    distance_second_part = 280\n\n    # Total distance\n    total_distance = distance_first_part + distance_second_part\n\n    # Time taken for the first part\n    time_first_part = 2\n    \n    # Time taken for the second part\n    time_second_part = distance_second_part / 70\n\n    # Total time\n    total_time = time_first_part + time_second_part\n\n    # Average speed calculation\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Alan's and Bob's initial number of cards\n    alan, bob = symbols('alan bob')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(bob, alan + 15)  # Bob has $15 more cards than Alan initially\n    equation2 = Eq(bob + 25, 3 * alan)  # After Colin gives Bob $25 cards, Bob has 3 times as many as Alan\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    \n    parts_of_grass = cows * days\n\n    return parts_of_grass\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_money = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    money_saved = daily_saving * days_saved\n    current_money = original_money + money_saved - lent_to_brother - spent_on_snacks\n\n    return current_money\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let total number of visitors be 100x (to simplify calculations with percentages)\n    men = 37  # Men are 37% of visitors\n    women_children = 100 - men  # Women and children are the rest 63% of visitors\n    ratio_sum = 4 + 5  # Sum of the ratio parts for women and children\n\n    # Since there are 12 more men than children, let's find the value of each part in the ratio\n    # Children are 5 parts of the ratio, men are 37 parts out of 100 (37%)\n    # Hence, 37x - 5*(100x/9) = 12\n    # x is the multiplier for the ratio to find out the actual number of children and women\n    x = 12 / (37 - (500 / ratio_sum))\n\n    # Now we can calculate the number of women\n    women = (4 * (100 / ratio_sum)) * x\n\n    return int(women)\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n    # Beth's equation: 3 bananas + 2 apples = 4 dollars\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solve the system of equations\n    prices = solve((eq1, eq2), (banana, apple))\n    \n    # Calculate what Annabella pays for 10 bananas and 10 apples\n    total_cost = prices[banana] * 10 + prices[apple] * 10\n    \n    return total_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Original amount of oil in the big bucket\n    big_bucket_original = 89\n    # Original amount of oil in the small bucket\n    small_bucket_original = 45\n\n    # Oil left in the big bucket after selling x kg\n    big_bucket_after = big_bucket_original - x\n    # Oil left in the small bucket after selling x kg\n    small_bucket_after = small_bucket_original - x\n\n    # The oil in the big bucket is now 12 times the oil in the small bucket\n    equation = Eq(big_bucket_after, 12 * small_bucket_after)\n\n    # Solving the equation for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that both trains are not late\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    \n    # Probability that at least one train is late (1 - probability that both trains are not late)\n    prob_at_least_one_late = 1 - prob_both_not_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_received = 100 - (lena_had - lena_gave_away)\n\n    return lena_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # From 10 to 99\n    numbers_without_six = 1  # Number of options for each digit without the digit 6\n\n    # Counting numbers without any six\n    for digit in range(1, 10):  # The first digit can't be zero for a two-digit number\n        if digit != 6:\n            for second_digit in range(0, 10):\n                if second_digit != 6:\n                    numbers_without_six *= 1\n                else:\n                    numbers_without_six *= 0\n    numbers_without_six = 8 * 9  # Excluding 6 for both first and second digit\n\n    # Subtracting numbers without any six from total to find those with at least one six\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    \n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Apr 2023', '%d %b %Y')\n    end_date = datetime.strptime('18 May 2023', '%d %b %Y')\n\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    total_speed = speed_a + speed_b\n    \n    time = distance / total_speed\n    return time\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_sq = (2023 ** 2) % 10\n    last_digit_2_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_sq + last_digit_2_2023) % 10\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = (num_lines * (num_lines - 1)) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = pow(5, 20, 10)  # Finding the last digit of 5^20 using mod with 10 (as the last digit repeats every 10th pow)\n    last_digit_7s = pow(7, 20, 10)  # Finding the last digit of 7^20 using mod with 10 (as the last digit repeats every 4th pow)\n\n    # Multiplying the two last digits and finding the last digit of the result\n    last_digit = (last_digit_5s * last_digit_7s) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n    pencils = 28\n    pens = 63\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given the diameter of the semicircles is 14 cm\n    radius_of_semicircle = 14 / 2\n\n    # The perimeter of a semicircle is half the circumference of a full circle\n    # plus the diameter (straight line).\n    perimeter_of_semicircle = (22 / 7) * radius_of_semicircle + 14\n\n    # There are 2 semicircles in the figure.\n    total_perimeter_semicircles = 2 * perimeter_of_semicircle\n\n    # The perimeter of a quadrant is 1/4 the circumference of a full circle.\n    perimeter_of_quadrant = (22 / 7) * radius_of_semicircle * (1 / 2)\n\n    # There are 2 quadrants in the figure.\n    total_perimeter_quadrants = 2 * perimeter_of_quadrant\n\n    # The total perimeter will be the sum of the perimeters of the semicircles and quadrants.\n    total_perimeter = total_perimeter_semicircles + total_perimeter_quadrants\n\n    return total_perimeter\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price = 95  # Given that each pasta packet costs 95 pence\n    packets_of_pasta = 6\n    packets_of_rice = 5\n    total_spent = 1170  # Total spent in pence (1 pound = 100 pence)\n\n    rice_price = symbols('rice_price')\n    \n    # Equation for the total cost\n    equation = Eq(packets_of_pasta * pasta_price + packets_of_rice * rice_price, total_spent)\n    rice_packet_price = solve(equation, rice_price)[0]\n\n    return rice_packet_price\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for num in range(600, 700, 5):  # Since it has to end with 0 or 5 for divisibility by 5, step is 5\n        if num % lcm == 0:\n            return num\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    chosen_cup_noodles = 6\n\n    ans = comb(total_cup_noodles, chosen_cup_noodles)\n    \n    return ans\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    # Calculate the fractional part of the amount of money\n    ans = (3 / 4) * (2 / 5) * 1\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from fractions import Fraction\n\n    # Given the fraction\n    target_fraction = Fraction(13, 10)\n\n    # Subtracting the whole number part (1 in this case)\n    target_fraction -= 1 \n\n    # We now need to find a, b, and c such that\n    # 1/(a + 1/(b + 1/c)) = target_fraction\n    # We do this by taking reciprocals at each step\n    # and subtracting the integer part, until we reach the last fraction.\n    \n    # Calculate a\n    a_fraction = 1 / target_fraction\n    a = int(a_fraction)\n    remaining_fraction = a_fraction - a\n    \n    # Calculate b\n    b_fraction = 1 / remaining_fraction\n    b = int(b_fraction)\n    remaining_fraction = b_fraction - b\n    \n    # Calculate c\n    c_fraction = 1 / remaining_fraction\n    c = int(c_fraction)\n\n    # Calculate the final answer according to the given formula a+2b+3c\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.3 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    right_side = 3 * 9 + 5 * 9\n    B = right_side / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lazy, energetic = symbols('lazy energetic')\n    \n    # energetic's rate is 1/20\n    energetic_rate = 1/20\n    # combined rate is 1/12 since they can finish together in 12 days\n    combined_rate = 1/12\n    \n    equation1 = Eq(energetic_rate + 1/lazy, combined_rate)\n    \n    solutions = solve((equation1), (lazy))\n    \n    return solutions[lazy]\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    num_numbers = 15\n\n    average = total_sum / num_numbers\n    smallest_number = average - (num_numbers - 1) / 2\n    largest_number = average + (num_numbers - 1) / 2\n\n    sum_of_largest_and_smallest = smallest_number + largest_number\n\n    return int(sum_of_largest_and_smallest)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    # Counting variables for each digit place in a 3 digit number\n    count_1_digit = 5  # Possible odd digits for one place: 1, 3, 5, 7, 9\n    count_2_digit = 5  # The same applies for two places\n    count_3_digit = 5  # And for three places as well\n\n    # Calculate the total count for numbers from 1 to 999\n    # For a one-digit number, there are count_1_digit possibilities\n    # For a two-digit number, each of the two places can have count_2_digit possibilities\n    # For a three-digit number, each of the three places can have count_3_digit possibilities\n    total_count = count_1_digit + (count_1_digit * count_2_digit) + (count_1_digit * count_2_digit * count_3_digit)\n\n    return total_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a ÷ 8 = Δ R6, a has a remainder of 6 when divided by 8\n    # Since b ÷ 8 = Δ R7, b has a remainder of 7 when divided by 8\n\n    # Calculate the remainder of (a+b) ÷ 8\n    remainders_sum = (6 + 7) % 8\n\n    # The remainder of (a+b) ÷ 8 is the sum of remainders of a and b modulo 8\n    return remainders_sum\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / 2\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    cumulative_length = 0\n    while True:\n        length_of_current_number = len(str(current_number))\n        next_cumulative_length = cumulative_length + length_of_current_number\n        # Check if the 2019th character is within the current number\n        if next_cumulative_length >= 2019:\n            # The index within the current number for the 2019th digit\n            index_in_number = 2019 - cumulative_length - 1\n            return int(str(current_number)[index_in_number])\n        # Proceed to next number and update cumulative length\n        cumulative_length = next_cumulative_length\n        current_number += 1\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return sum(range(1, 12))\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef count_permutations(repeated_counts):\n    num = factorial(sum(repeated_counts))\n    for count in repeated_counts:\n        num //= factorial(count)\n    return num\n\ndef solution():\n    # The repeated elements are 2, which repeats 3 times, and 3, which repeats 2 times\n    # The unused digit '2' can go into one of four places:\n    # _ 2 2 3 3, 2 _ 2 3 3, 2 2 _ 3 3, 2 2 3 _ 3, 2 2 3 3 _\n    # In the first and last case, there are 3! / 2! permutations (for the threes)\n    # In the other three cases, there are 3! / (2! * 1!) permutations\n    unused_twos_positions = 2  # First and last place\n    other_positions = 3  # Remaining positions\n    perms_for_unused_twos = factorial(3) // factorial(2)\n    perms_for_others = factorial(3) // (factorial(2) * factorial(1))\n    \n    total_perms = unused_twos_positions * perms_for_unused_twos + other_positions * perms_for_others\n    return total_perms\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5 \n    basket_mass_kg = 0.5 \n    kitten_mass_kg = 0.6 \n    num_kittens = 4\n    \n    total_kittens_mass_kg = kitten_mass_kg * num_kittens\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + total_kittens_mass_kg)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_spent = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_spent / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price + (original_price * increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # 3 brothers, 4 sisters and Mary\n    eggs_bought = (family_members - 1) * family_members\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime(\"7:50\", \"%H:%M\")\n    arrival_time = datetime.strptime(\"8:40\", \"%H:%M\")\n    journey_duration = arrival_time - departure_time\n    minutes_taken = journey_duration.total_seconds() / 60\n\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the equations to find the price of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    sequence = [3, 6, 10, 15]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    next_difference = differences[-1] + 1\n    missing_number = sequence[-1] + next_difference\n    return missing_number\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 1 - 1/5\n    remaining_after_dress = remaining_after_handbag - (3/5) * remaining_after_handbag\n    original_amount = 80 / remaining_after_dress\n    return original_amount\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    poured_out = 5\n    remaining_volume = total_volume - poured_out\n    volume_per_tank = remaining_volume / 6\n    return volume_per_tank\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the money Samuel had initially.\n    m = symbols('m')\n\n    # Money spent on the DVD\n    money_after_dvd = m - (m / 6) - 5\n\n    # Money spent on the magazines\n    money_after_magazines = money_after_dvd - (2 / 5) * money_after_dvd - 12\n\n    # Equation for the money left\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve for 'm'\n    initial_money = solve(equation, m)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position + children_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards\n    # Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let x be the number of years after which Grandpa's age will be 5 times Johnny's age.\n    x = symbols('x')\n    \n    grandpa_age = 72 + x\n    johnny_age = 8 + x\n    \n    equation = Eq(grandpa_age, 5 * johnny_age)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of odd numbers from 1 to 50\n    sum_of_odds = sum(range(1, 51, 2))\n    # Sum of even numbers from 1 to 50\n    sum_of_evens = sum(range(2, 51, 2))\n    # Difference between sums of evens and odds\n    difference = sum_of_evens - sum_of_odds\n    \n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbol r represent the interest rate\n    r = symbols('r')\n\n    # Principal amount borrowed\n    principal = 2000\n\n    # Amount owed after 3 years\n    final_amount = 2519.42\n\n    # Creating the equation for compounded interest\n    # final_amount = principal * (1 + r) ** 3\n    equation = Eq(principal * (1 + r) ** 3, final_amount)\n\n    # Solving for r\n    interest_rate = solve(equation, r)[0]\n\n    # Return interest rate rounded to the nearest tenth of a percent\n    return round(float(interest_rate) * 100, 1)\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given that m~Δ~n = 5m + 3n\n    # Let x~Δ~9 = 37\n    # Because we know m and n, we can plug x and 9 into 5m + 3n to find out x\n    # So, 5x + 3*9 = 37\n    # 5x + 27 = 37\n    x = (37 - 27) // 5\n\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario for each color:\n    # Blue balls: Sheila can take out all 5 blue balls for 4 of the same color.\n    # Orange balls: Sheila could take out all 4 orange balls, but 3 is also enough because she can't have 4 blue balls.\n    # Yellow balls: Sheila could take out both yellow balls, but she could also end with 3 yellow balls if no other color reaches 4.\n    # To be sure to have 4 balls of the same color, Sheila needs to consider the worst case scenario for each color.\n    \n    # Worse case: Sheila picks 3 blue, 3 orange, and 2 yellow without getting 4 of the same color.\n    # After this point, any further ball must result in 4 of the same color.\n    balls_needed = 3 + 3 + 2 + 1  # The +1 is the next ball which ensures the fourth ball of the same color.\n    \n    return balls_needed\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of elderly and y be the total number of oranges Janice has\n    x, y = symbols('x y')\n\n    # According to the problem:\n    # If she gave 20 oranges to each, 10 elderly won't get any.\n    # This means (x - 10) * 20 is the total number of oranges.\n    equation1 = Eq((x - 10) * 20, y)\n\n    # If she gave 16 oranges to each elderly, she has enough for 25 boxes of 2 dozen oranges\n    # This means x * 16 is the total number of oranges which is also equal to 25 boxes * 24 oranges each.\n    equation2 = Eq(x * 16, 25 * 24)\n\n    # Solving the two equations simultaneously\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of oranges should be divided equally among the elderly\n    oranges_per_elderly = solutions[y] / solutions[x]\n\n    return int(oranges_per_elderly)\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    \n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    fraction_removed = 1/5\n    weight_after_removal = 27\n    \n    soil_removed_weight = full_weight * fraction_removed\n    empty_weight = full_weight - soil_removed_weight - weight_after_removal\n\n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tim's cookies and y be Tyler's cookies\n    t, y = symbols('t y')\n\n    # Create equations based on the problem statement\n    # 1/6 of Tim's cookies equals 3/8 of Tyler's cookies\n    # After selling 96 cookies, Tim has 9 times as many as Tyler\n    equation1 = Eq(t / 6, y * 3 / 8)\n    equation2 = Eq(t, 9 * (y - 96))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, y))\n\n    # Get the number of cookies for Tim and Tyler at first\n    tim_cookies = solutions[t]\n    tyler_cookies = solutions[y]\n\n    # The total number of cookies at first is the sum of Tim's and Tyler's cookies\n    total_cookies = tim_cookies + tyler_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # Sally's remaining cupcakes after selling\n    equation3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] * (1/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n\n    interval1 = 24  # interval for first platform (in minutes)\n    interval2 = 30  # interval for second platform (in minutes)\n\n    # Find the least common multiple of the two intervals\n    least_common_interval = lcm(interval1, interval2)\n    \n    # Calculate the hours and minutes when trains leave both platforms at the same time\n    hours = least_common_interval // 60\n    minutes = least_common_interval % 60\n\n    # Calculate the final time by adding the hours and minutes to 9 AM\n    final_hour = 9 + hours\n    final_minute = minutes\n    \n    return f\"{final_hour}:{final_minute:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    three_quarters_of_tank = 24\n    full_tank = three_quarters_of_tank * 4 / 3\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    red_original, white_original = symbols('red_original white_original', integer=True)\n    red_added_by_pip = symbols('red_added_by_pip', integer=True)\n    white_added_by_bud = symbols('white_added_by_bud', integer=True)\n\n    # Given ratios\n    original_ratio = Eq(red_original/white_original, 3/2)\n    after_pip_ratio = Eq((red_original + red_added_by_pip) / white_original, 5/3)\n    after_bud_ratio = Eq((red_original + red_added_by_pip) / (white_original + white_added_by_bud), 5/4)\n\n    # The number of balls put by Bud is 100 more than the number of balls put by Pip\n    bud_pip_difference = Eq(white_added_by_bud, red_added_by_pip + 100)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, after_pip_ratio, after_bud_ratio, bud_pip_difference),\n                      (red_original, white_original, red_added_by_pip, white_added_by_bud))\n\n    return solutions[white_original]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    remainder_sum = (remainder_a + remainder_b) % 8\n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n\n    # Since Jessica sits in front of Judy, there's 1 desk where Jessica sits\n    # and the total number of desks is then: \n    # desks in front of Jessica + Jessica's desk + Judy's desk + desks behind Judy\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the average weight of the original group\n    # Let n be the number of people in the original group\n    \n    # After Aaron joins, the new average is 61, so the total weight is 61 * (n + 1)\n    # Aaron's weight is added, so the equation is: x*n + 45 = 61*(n + 1)\n    # Simplifying, we get: x*n + 45 = 61*n + 61\n    \n    # After Ben joins, the new average is 62, so the total weight is 62 * (n + 2)\n    # Ben's weight is added, so the equation is: x*n + 45 + 71 = 62*(n + 2)\n    # Simplifying, we get: x*n + 116 = 62*n + 124\n    \n    # Now we have two equations with two unknowns:\n    # Equation 1: x*n + 45 = 61*n + 61\n    # Equation 2: x*n + 116 = 62*n + 124\n    \n    # We can solve these equations simultaneously to find the value of x\n    # Subtract the first equation from the second one:\n    # (x*n + 116) - (x*n + 45) = (62*n + 124) - (61*n + 61)\n    # Simplifying, we get: 71 = n + 63\n    # Hence, n = 71 - 63 = 8\n    \n    # Now using n = 8 in the first equation x*n + 45 = 61*n + 61 to find 'x'\n    x = (61*9 - 45) / 8\n    \n    return x\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        if a == 0 or c == 0:  # Leading digit can't be zero\n            continue\n        num1 = a * 1000 + b * 100 + c * 10 + d\n        num2 = c * 10 + e\n        product = num1 * num2\n        product_str = str(product)\n        if len(set(product_str)) == len(product_str):  # All digits must be unique\n            if len(str(num1)) == 4 and len(str(num2)) == 2 and len(product_str) == 5:\n                return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    # Initial count of balls in Bag A\n    white_balls = 1991\n    black_balls = 1000\n\n    # Repeat the process for 2989 times\n    for _ in range(2989):\n        if white_balls > 0 and black_balls > 0:\n            white_balls -= 1  # One white ball is always taken out\n            # When a black ball is also taken out (different colors), nothing changes\n            # because one white goes back in.\n        elif white_balls > 0:  # Only white balls are left\n            white_balls -= 2  # Two white balls are taken out\n            if white_balls < 0: \n                white_balls = 0\n        # Bag A never has only black balls as white balls are never added.\n\n    # The number of balls remaining in Bag A\n    remaining_balls = white_balls + black_balls\n    # The color of the remaining balls\n    color = 'white' if white_balls > 0 else 'black'\n    \n    return remaining_balls, color\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    # Since work rate is constant, we use the inverse relationship between people and hours.\n    # initial_people * initial_hours = target_people * target_hours\n    # Solving for target_people:\n    target_people = (initial_people * initial_hours) / target_hours\n    \n    return int(target_people)\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters_to_centimeters = 2.1 * 100\n    return int(meters_to_centimeters)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    spent_on_sweets = 3.99\n    spent_on_magazine = 2.50\n    spent_on_stickers = 0.70\n    spent_on_pizza = 10.99\n    spent_on_juice = 4 * 1.50\n    \n    total_spent = spent_on_sweets + spent_on_magazine + spent_on_stickers + spent_on_pizza + spent_on_juice\n    \n    change_left = initial_amount - total_spent\n    \n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "from itertools import combinations\n\ndef solution():\n    # one way to partition 5 is 5 itself, which we need to exclude\n    # so we start with count = -1 to account for that\n    count = -1\n    for num_parts in range(2, 6):  # we can have from 2 to 5 parts\n        # using `combinations` with replacement to generate all possibilities\n        for partition in combinations(range(1, 5), num_parts):\n            if sum(partition) == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):\n        for units_digit in range(1, 10):\n            if units_digit == hundreds_digit + 2:\n                count += 10  # Tens digit can be anything from 0 to 9\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_han, daughter = symbols('mr_han daughter')\n\n    equation1 = Eq(mr_han, 3 * daughter)\n    equation2 = Eq(mr_han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    total_chocolates = remaining_after_students / (1 - 0.8)\n    return int(total_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    sum_of_squares = sum((x + 1) ** 2 - x ** 2 for x in range(1, 100, 2))\n    return sum_of_squares\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To find the least number of votes Samantha could have\n    # and still have more votes than anyone else, we can use the pigeonhole principle.\n    # If there are three students and 25 votes, then to guarantee she has the most,\n    # Samantha has to have at least one more vote than a third of the total votes.\n\n    # Calculate the votes if they were evenly distributed\n    votes_per_student_if_even = 25 // 3\n    \n    # Samantha needs one more vote than the even split to have the most\n    least_votes_for_samantha = votes_per_student_if_even + 1\n    \n    return least_votes_for_samantha\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for c1 in coin_values:\n        for c2 in coin_values:\n            for c3 in coin_values:\n                totals.add(c1 + c2 + c3)\n\n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def count_ones_in_number(number):\n    count = 0\n    while number > 0:\n        if number % 10 == 1:\n            count += 1\n        number //= 10\n    return count\n\ndef solution():\n    total_ones = 0\n    for page_number in range(1, 131):\n        total_ones += count_ones_in_number(page_number)\n    \n    return total_ones\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = 6000  # Initial principal balance\n    A = 8029.35  # Amount after 5 years\n    t = 5  # Time period in years\n    x = symbols('x')  # Interest rate symbol\n\n    # Compound interest formula A = P * (1 + r/n)^(nt)\n    # Since it is compounded annually, n = 1\n    equation = Eq(A, P * (1 + x)**t)\n\n    # Solve for x (rate)\n    rate = solve(equation, x)\n\n    # The solution is a list. We should take the one that is a real number and make sense contextually (a positive interest rate as a percentage)\n    interest_rate = [float(r) for r in rate if r.is_real and r > 0]\n\n    # Since we want the percent value of x\n    x_percent = interest_rate[0] * 100\n\n    return round(x_percent, 2)  # Rounded to two decimal places as typical for interest rates\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    digits_per_length = 9\n    total_digits = 291\n    pages = 0\n    length = 1\n    \n    while total_digits > length * digits_per_length:\n        total_digits -= length * digits_per_length\n        pages += digits_per_length\n        digits_per_length *= 10\n        length += 1\n    \n    pages += total_digits // length\n\n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kilograms = 2.4\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Define the total number of questions each\n    total_questions = 10\n\n    # Define the points for correct and wrong answers\n    points_correct = 10\n    points_wrong = -5\n\n    # Loop through each possible number of correct answers for CC\n    for cc_correct in range(total_questions + 1):\n        vivi_correct = cc_correct + (15 / (points_correct - points_wrong))\n\n        # Calculate the total score for CC and Vivi\n        cc_score = cc_correct * points_correct + (total_questions - cc_correct) * points_wrong\n        vivi_score = vivi_correct * points_correct + (total_questions - vivi_correct) * points_wrong\n\n        # Check if the total combined score matches the given condition\n        if (cc_score + vivi_score) == 95:\n            # Return the number of correct answers CC got\n            return cc_correct\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x = pages Clarice has read\n    # y = pages Clarice has not read\n    # x + y = total pages in the magazine\n    x, y = symbols('x y')\n\n    # Given ratio of the number of pages read to not read is 1:5\n    ratio_equation = Eq(x, y / 5)\n\n    # After reading 80 more pages, the number read is 70% of the total\n    pages_read_equation = Eq(x + 80, 0.7 * (x + y))\n\n    # Solve the system of equations\n    solution = solve((ratio_equation, pages_read_equation), (x, y))\n\n    # The total number of pages in the magazine is x + y\n    total_pages = solution[x] + solution[y]\n\n    return total_pages\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n\n    people_final = 18\n    flour_per_person = flour_initial / people_initial\n\n    flour_final = flour_per_person * people_final\n\n    return flour_final\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    # Number of girls divided by the number of girls in each room gives the number of rooms for girls\n    rooms_for_girls = 45 // 5\n    \n    # Number of rooms used by teachers\n    rooms_for_teachers = 3\n    \n    # Total rooms used is the sum of rooms for girls and rooms for teachers\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return total_rooms\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n\n    total_cost = (2 * adult_ticket_price) + (3 * child_ticket_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    ans = 7000000 / mm_to_m_conversion_factor\n    return ans\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # Smallest possible divisor\n    smallest_divisor = 1\n    # The minimum value of the dividend\n    min_dividend = smallest_divisor * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number_str = \"2581953752\"\n    min_sum = float('inf')\n    \n    # Loop over all possible first cuts (cannot be at the ends)\n    for i in range(1, len(number_str) - 1):\n        # Loop over all possible second cuts after the first cut\n        for j in range(i + 1, len(number_str)):\n            # Cut the number into three parts\n            part1 = int(number_str[:i])\n            part2 = int(number_str[i:j])\n            part3 = int(number_str[j:])\n            \n            # Calculate the sum of the three parts\n            current_sum = part1 + part2 + part3\n            \n            # If this sum is less than the minimum sum found so far, update the minimum sum\n            if current_sum < min_sum:\n                min_sum = current_sum\n            \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # The sum of two numbers\n    eq1 = Eq(x + y, 11.63)\n    # Oliver's accidental calculation\n    eq2 = Eq(x + y / 10, 5.87)\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2), (x, y))\n    \n    # Find the difference and multiply by 100\n    difference = abs(sol[x] - sol[y]) * 100\n    \n    return difference\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of members in each club\n    science, literature, math = symbols('science literature math')\n\n    # Define the ratios\n    ratio_science_literature = Eq(science / literature, 9 / 10)\n    ratio_literature_math = Eq(literature / math, 5 / 7)\n\n    # The total number of members in all clubs\n    total_members = Eq(science + literature + math, 99)\n\n    # Solve the system of equations\n    solutions = solve((ratio_science_literature, ratio_literature_math, total_members), (science, literature, math))\n\n    # Calculate the difference in the number of members between the math and literature clubs\n    difference = solutions[math] - solutions[literature]\n    \n    return difference\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, melissa_mother_age_now = symbols('melissa_age_now melissa_mother_age_now')\n\n    equation1 = Eq(melissa_mother_age_now, 32 + (melissa_age_now - 8))\n    equation2 = Eq(melissa_mother_age_now, 3 * melissa_age_now)\n\n    solutions = solve((equation1, equation2), (melissa_age_now, melissa_mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side_excluding_corners = 6 - 2  # Excluding the corners because they are counted only once\n    total_flowers_excluding_corners = flowers_per_side_excluding_corners * 4\n    corner_flowers = 4  # There is one flower at each corner\n    return total_flowers_excluding_corners + corner_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Using the worst-case scenario from the Pigeonhole Principle\n    # To be sure to get 3 marbles of the same color, we consider the worst case scenarios:\n    # Take all blue marbles, we could still have yellow and red without 3 of the same color\n    blue_marbles = 4\n    # Take all yellow marbles next, we could still have blue and red without 3 of the same color\n    yellow_marbles = 3\n    # Next we take one red marble, and now we must have 3 of the same color\n    red_marble = 1\n    # Add 1 to account for the next marble we take which must complete a triplet of the same color\n    ans = blue_marbles + yellow_marbles + red_marble + 1\n    \n    return ans\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut1 = 4.8\n    cut2 = 2.73\n    remaining_length = original_length - (cut1 + cut2)\n    longest_piece = max(cut1, cut2, remaining_length)\n    shortest_piece = min(cut1, cut2, remaining_length)\n    difference = longest_piece - shortest_piece\n\n    return difference\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    length_of_pattern = len(pattern)\n    total_digits = 47\n\n    # Find how many times the pattern is fully repeated\n    full_pattern_repeats = total_digits // length_of_pattern\n    \n    # Sum of digits in the pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    \n    # Sum of digits from full pattern repetitions\n    sum_of_full_patterns = sum_of_pattern * full_pattern_repeats\n    \n    # Number of remaining digits after full pattern repetitions\n    remaining_digits_count = total_digits % length_of_pattern\n    \n    # Sum of the remaining digits\n    remaining_sum = sum(int(pattern[i]) for i in range(remaining_digits_count))\n    \n    # Total sum\n    total_sum = sum_of_full_patterns + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_of_six_bottles = 2.52\n    cost_per_bottle = cost_of_six_bottles / 6\n    cost_of_nine_bottles = 9 * cost_per_bottle\n    return round(cost_of_nine_bottles, 2)\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Total cost of the book and the bag\n    total_cost = 132\n    # Thomas's calculation: 5 units = 132\n    # According to Thomas: 1 unit = 132 / 5\n    thomas_unit_cost = total_cost / 5\n    # According to Thomas: 6 units = 26 * 6\n    thomas_total_money = thomas_unit_cost * 6\n    \n    # Correct approach:\n    # Let x be the total amount of money Li Yan had initially.\n    # She spent 1/3 on a book, so she had 2/3 left.\n    # Then she spent 1/2 of the remainder on a bag, so she spent another (1/2)*(2/3) = 1/3.\n    # Therefore, she spent a total of 1/3 (book) + 1/3 (bag) = 2/3 (total amount spent).\n    \n    # 2/3 of her initial money is equal to the total cost of book and bag:\n    # (2/3) * x = total_cost\n    # x = total_cost * (3/2)\n    correct_total_money = total_cost * (3/2)\n    \n    # Check if Thomas's answer is correct\n    if thomas_total_money != correct_total_money:\n        return correct_total_money  # Return the correct total money\n    else:\n        return thomas_total_money  # Return Thomas's total money if it's correct\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball_price, volleyball_price = symbols('basketball_price volleyball_price')\n    total_cost = 325\n    additional_cost_basketball = 10\n    num_basketballs = 5\n    num_volleyballs = 6\n    \n    # Basketball price is $10 more than volleyball price\n    eq1 = Eq(basketball_price, volleyball_price + additional_cost_basketball)\n    # Total cost for 5 basketballs and 6 volleyballs is $325\n    eq2 = Eq(num_basketballs * basketball_price + num_volleyballs * volleyball_price, total_cost)\n    \n    # Solving the equations\n    solved_values = solve((eq1, eq2), (basketball_price, volleyball_price))\n    \n    return solved_values[basketball_price]\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n\n    # Let b be the number of boys in the class\n    # Then, the number of girls in the class will be (total_pupils - b)\n    total_pencils = total_pupils * avg_pencils\n\n    # The total number of pencils owned by boys will be b * avg_boys_pencils\n    # The total number of pencils owned by girls will be (total_pupils - b) * avg_girls_pencils\n    # We have the equation: b * avg_boys_pencils + (total_pupils - b) * avg_girls_pencils = total_pencils\n    # Simplify the equation to find b\n    b = (total_pencils - (total_pupils * avg_girls_pencils)) / (avg_boys_pencils - avg_girls_pencils)\n\n    return int(b)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for price per pig (p) and price per goat (g)\n    p, g = symbols('p g')\n\n    # Set up the equations based on the information given\n    equation1 = Eq(3*p + g, 440)\n    equation2 = Eq(p + 2*g, 280)\n\n    # Solve the system of equations\n    prices = solve((equation1, equation2), (p, g))\n\n    # Calculate the total cost for 5 pigs and 5 goats\n    total_cost = 5 * prices[p] + 5 * prices[g]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n\n    # Convert pence to pounds\n    pence_to_pounds = total_pence / 100\n\n    # Add both amounts\n    ans = total_pounds + pence_to_pounds\n\n    return ans\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    # Set up variables\n    total_problems = 25\n    correct_points = 4\n    incorrect_deduct = -1\n    target_score = 61\n\n    # Jack's score variables\n    jack_correct = 0\n    jack_incorrect = 0\n    jack_unanswered = 0\n\n    # Loop through all possible correct answers for Jack\n    for correct in range(0, total_problems + 1):\n        # Calculate number of incorrect answers based on correct answers and total score\n        incorrect = (target_score - correct_points * correct) / incorrect_deduct\n        \n        # The number of incorrect answers has to be non-negative and an integer\n        if incorrect >= 0 and incorrect.is_integer():\n            # Calculate the number of unanswered questions based on the correct and incorrect ones\n            unanswered = total_problems - correct - incorrect\n            \n            # The number of unanswered questions has to be non-negative\n            if unanswered >= 0:\n                # If Jack's correct answers are more than Johnson's and it's a valid scenario,\n                # update Jack's answers\n                if correct > jack_correct and unanswered.is_integer():\n                    jack_correct = correct\n                    jack_incorrect = incorrect\n                    jack_unanswered = unanswered\n\n    # Return Jack's unanswered problems\n    return int(jack_unanswered)\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    \n    sol = solve(equation, A)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    rose_position_from_back = 12\n\n    total_people = people_in_front + rose_position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Constants given in the problem statement\n    base_price = 4.5\n    shipping_handling = 12\n    discount_rate = 0.20\n    total_bill = 120\n\n    # Calculate the number of cupcakes if there were no discounted cupcakes\n    base_cupcakes = (total_bill - shipping_handling) / base_price\n\n    # Initiate variables for counting\n    total_cupcakes = 0\n    remaining_bill = total_bill\n\n    # Check if there are discounted cupcakes\n    if base_cupcakes > 20:\n        # Calculate how much the first 20 cupcakes cost\n        cost_for_20 = 20 * base_price + shipping_handling\n        # Remove the cost for the first 20 cupcakes and shipping from the bill\n        remaining_bill -= cost_for_20\n        # Calculate the price of each discounted cupcake\n        discounted_price = base_price * (1 - discount_rate)\n        # Calculate number of discounted cupcakes\n        discounted_cupcakes = remaining_bill / discounted_price\n        # Total cupcakes is the base 20 plus the discounted ones\n        total_cupcakes = 20 + discounted_cupcakes\n    else:\n        # If there are no discounted cupcakes, the total is just the base amount\n        total_cupcakes = base_cupcakes\n    \n    # Return the total number of cupcakes as an integer\n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    return sum(range(1, 51))\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    days_together = 6\n    days_energetic = 10\n\n    rate_energetic = 1 / days_energetic\n    rate_together = 1 / days_together\n\n    rate_lazy = rate_together - rate_energetic\n    days_lazy = 1 / rate_lazy\n\n    return days_lazy\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_diff = 42\n    years_later = 2\n\n    john_age_later = john_current_age + years_later\n    grandmother_age_later = john_current_age + grandmother_age_diff + years_later\n\n    total_age_later = john_age_later + grandmother_age_later\n\n    return total_age_later\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number John thought of\n    original_number = symbols('original_number')\n\n    # Translate the word problem into an equation\n    equation = Eq((original_number + 45)/3, original_number * 2)\n\n    # Solve the equation\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    return (52 - 10) // 2\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for bro1 in range(2, 10-4):\n        for bro2 in range(2, 10-2-bro1):\n            bro3 = 10 - bro1 - bro2\n            if bro3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Initialization\n    prefix = '5' * 19\n    suffix = '9' * 19\n    # Check all possible digits for the middle place\n    for digit in range(10):\n        # Construct the number with the current digit\n        number = int(prefix + str(digit) + suffix)\n        # Check divisibility by 7\n        if number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book_read = 1/5\n    total_pages = pages_read_first_day / fraction_of_book_read\n    return total_pages\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since children are ordered by height and the 31st child is 131 cm tall,\n    # Tom, being the 10th child, can at most be the 9th tallest possible height\n    # before the 31st child.\n\n    # We also know no two children have the same height, and they all are whole numbers.\n    # So the 9 tallest children before the tallest one must have the heights from\n    # 122 cm to 130 cm, and Tom could at most be 130 cm tall.\n    return 130\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    # Iterate through all two-digit numbers with the unit digit 6\n    for i in range(10, 100):\n        if i % 10 == 6:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure 4 marbles of different colors, we draw marbles considering the worst-case scenario.\n    # This would mean drawing all marbles of each color until we reach one that guarantees the fourth color.\n    # Since there are fewer red marbles compared to blue, we will use red as the last color to get 4 different ones.\n\n    # Hence, we draw all but 3 red marbles.\n    # Then we draw all blue marbles, and all yellow marbles, then 1 red marble.\n\n    draw_red = 12 - 3    # Draw all but 3 red\n    draw_blue = 9        # Draw all blue\n    draw_yellow = 8      # Draw all yellow\n    draw_one_red = 1     # Draw one red to ensure the fourth color\n\n    # Total marbles drawn to guarantee 4 marbles of different colors\n    total_drawn = draw_red + draw_blue + draw_yellow + draw_one_red\n\n    return total_drawn\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, a + b\n        a %= 3  # Reduce a modulo 3 to avoid large number calculations\n        b %= 3  # Reduce b modulo 3 to avoid large number calculations\n    return b\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    # Let x be the magic number we are looking for\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    # Setting up the equation: 208 - x = 9 * (136 - x)\n    equation = Eq(208 - x, 9 * (136 - x))\n    \n    # Solving the equation for x\n    magic_number = solve(equation, x)[0]\n    \n    return magic_number\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from sympy import factorint\n    \n    number = 840\n    factors = factorint(number)\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= (power + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let the number of storybooks Anthea has initially be A\n    # Jason has 30 storybooks initially\n    # Jason gives 4 storybooks to Anthea, and both have the same number.\n    # Therefore, Jason will have 30 - 4 storybooks left, which is 26.\n    # And Anthea will have A + 4 storybooks after Jason gives her 4 storybooks.\n    # Since both have the same number after the exchange, we can set up the equation:\n    # 30 - 4 = A + 4\n    # 26 = A + 4\n    # Solving for A:\n    A = 26 - 4\n    \n    # Now the difference between Jason and Anthea at first is:\n    # 30 (Jason's storybooks) - A (Anthea's storybooks)\n    difference = 30 - A\n\n    return difference\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let n be the total number of students and x be the total number of gifts\n    # According to the problem, we have the following two equations:\n    # x = 5n + 3 (1)  -- (a) if each student is given 5, there will be 3 left\n    # x = 4n + 9 (2)  -- (b) if each student is given 4, there will be 9 left\n    # From (1) and (2) we conclude that 5n + 3 = 4n + 9\n    # Rearranging the terms gives us: n = 9 - 3 = 6 (the number of students)\n    n = 9 - 3\n    return n\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    total_bar_price = 2 * bar_price\n    note_value = 20\n\n    total_price = box_price + total_bar_price\n    change = note_value - total_price\n\n    return change\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    all_combinations = permutations(digits, 2)\n    valid_numbers = []\n\n    for comb in all_combinations:\n        if comb[1] == 2 * comb[0]:\n            valid_numbers.append(10 * comb[0] + comb[1])\n        elif comb[0] + comb[1] == 9 and comb[0] != 1:  # Excluding the case where tens digit would be 1\n            valid_numbers.append(10 * comb[0] + comb[1])\n        elif (comb[0] - comb[1]) == 5:\n            valid_numbers.append(10 * comb[0] + comb[1])\n        elif (comb[0] % 2 != 0) and (10 * comb[0] + comb[1] not in valid_numbers): # The only odd number\n            valid_numbers.append(10 * comb[0] + comb[1])\n\n    valid_numbers = sorted(list(set(valid_numbers))) # Remove duplicates and sort\n    return valid_numbers[1] # The second smallest number\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Lily and her mother's positions are fixed on the left and right ends respectively\n    # Thus, we have to arrange the remaining three family members in the middle\n    from math import factorial\n\n    # There are 3 family members who can take any of the 3 positions in the middle\n    # So we calculate the permutations for these 3 places\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Alan / Bella = 4 / 3\n    equation1 = Eq(alan / bella, 4 / 3)\n\n    # Alan has £20 more than Chloe\n    equation2 = Eq(alan, chloe + 20)\n\n    # Total money\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n    number_of_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_terms = (number_of_terms / 2) * (first_term + last_term)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    result = 1.28 - 0.57\n    return result\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    \n    equation = Eq(children, men + 140)\n    \n    total_visitors_solution = solve(equation, total_visitors)\n    \n    return total_visitors_solution[0]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_numbers_initial = 3\n    num_numbers_final = 4\n\n    # Calculate the sum of the initial three numbers\n    sum_initial = average_initial * num_numbers_initial\n    # Calculate the sum of the four numbers\n    sum_final = average_final * num_numbers_final\n    # Subtract to find the fourth number\n    fourth_number = sum_final - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    first_term = 5\n    last_term = 15\n    n = last_term - first_term + 1\n\n    correct_answer = sum([i**2 for i in range(first_term, last_term + 1)])\n    kimmy_answer = (15 * 16 * 31) // 6\n\n    return correct_answer, kimmy_answer == correct_answer\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the stickers Sam and Peter initially had\n    sam, peter = symbols('sam peter')\n\n    # Equation representing the statement \"Sam had 40 stickers more than Peter\"\n    initial_stickers_eq = Eq(sam, peter + 40)\n\n    # Equation after Sam gives 20% of his stickers to Peter\n    sam_gives_eq = sam - 0.20 * sam\n\n    # Equation after Peter gives 25% of what he then has to Sam\n    peter_gives_eq = (peter + 0.20 * sam) - 0.25 * (peter + 0.20 * sam)\n\n    # Final equation representing that Sam has 96 stickers more than Peter\n    final_stickers_eq = Eq(sam_gives_eq + 0.25 * (peter + 0.20 * sam), peter_gives_eq + 96)\n\n    # Solve the system of equations\n    solution = solve((initial_stickers_eq, final_stickers_eq), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of wrong answers\n    # We have two equations\n    # x + y = 20 (total questions)\n    # 5x - 2y = 51 (total points)\n    # Solve for x and y:\n    for x in range(21):  # x can be from 0 to 20\n        y = 20 - x\n        if 5 * x - 2 * y == 51:\n            return x  # We want the number of correct answers\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    mistaken_subtrahend_difference = 75 - incorrect_subtrahend\n\n    correct_result = incorrect_result + mistaken_subtrahend_difference\n\n    return correct_result\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original amount of money Amy had\n    x = symbols('x')\n    \n    # After spending 6/11 of her money and an additional $5, the remainder is (5/11)x - 5\n    first_remainder = (5/11)*x - 5\n    \n    # After spending 3/10 of the remainder and an additional $12, she has $30 left\n    # The expression for the second remainder is (7/10) * first_remainder - 12 = 30\n    equation = Eq((7/10) * first_remainder - 12, 30)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Sally and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n    \n    # Define the two equations based on the given ratios\n    equation1 = Eq(sally/gillian, 2/7)\n    equation2 = Eq((sally + 15)/(gillian + 15), 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    # Extract Sally's current age from the solutions\n    sally_age_now = solutions[sally]\n\n    return sally_age_now\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_per_cake = 4\n    total_kg_used = 8\n\n    total_apples_used = apples_per_kg * total_kg_used\n    number_of_cakes = total_apples_used // apples_per_cake\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = (35 / 45) * 9\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5\n    total_seeds = 12\n    circumference = total_seeds * distance_apart\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    # Find the least common multiple (LCM) of 3 and 4\n    # because we're looking for customers who are at positions\n    # that are multiples of both 3 and 4.\n    # The LCM of 3 and 4 is 12, hence every 12th customer will receive both a pen and a file.\n    lcm = 12\n\n    # Calculate the number of customers up to the 40th who receive both a pen and a file\n    # by dividing 40 by the LCM and taking the floor of the result.\n    count_of_customers = 40 // lcm\n\n    return count_of_customers\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    return 198 + 67 - 25\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for num_students in range(100):  # Assuming a reasonable number of students\n        if (num_students + 9) % int((num_students + 9)**0.5) == 0:  # Check if it can form a square array\n            side_length = int((num_students + 9)**0.5)\n            if (side_length + 1)**2 - (num_students + 9) == 16:  # Check if adding one row and one column meets the condition\n                return num_students\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of papers cut into three parts\n    # Initially there were 10 pieces of paper\n    # After cutting x papers into three parts each, we get 2x more pieces\n    # The final number of pieces is 16\n\n    # The equation for this problem is: initial pieces + new pieces from cutting - cut pieces = final pieces\n    # Or in terms of x: 10 + 2x - x = 16\n    # Simplified: 10 + x = 16\n    # Therefore, x = 16 - 10\n\n    x = 16 - 10\n    return x\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    postcards_initial = 50\n    envelopes_initial = 5\n    envelopes_additional = 2\n\n    # Calculate the number of postcards in each of the initial envelopes\n    postcards_per_envelope = postcards_initial / envelopes_initial\n    \n    # Calculate the total number of postcards after her friends gave her more\n    # Since each envelope has the same number of postcards, the additional postcards must be a multiple of the postcards_per_envelope\n    # Also, because there are 2 additional envelopes, the additional postcards must be twice the postcards_per_envelope\n    additional_postcards = postcards_per_envelope * envelopes_additional\n\n    # Calculate the total number of postcards\n    total_postcards = postcards_initial + additional_postcards\n\n    return total_postcards\n    \nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    possible_coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Pence\n    ans = None\n    for coin in possible_coins:\n        if (250 % (coin * 2)) == 0:\n            ans = coin\n            break\n    return ans / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    price_per_100_grams = 0.80\n    weight_to_calculate = 250\n    cost = (price_per_100_grams / 100) * weight_to_calculate\n    return cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cookies = symbols('total_cookies')\n\n    burnt_cookies = (3/5) * total_cookies\n    remaining_cookies = total_cookies - burnt_cookies\n    sold_cookies = (75/100) * remaining_cookies\n\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    total_baked = solve(equation, total_cookies)\n\n    return total_baked[0]\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    containers_needed = -(-total_apples // apples_per_container) # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for num in range(1, 10**5):\n        special_number = num * 10 + 9\n        new_number = int('9' + str(num))\n        if new_number == 4 * special_number:\n            return special_number\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1070 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):  # Smallest 2-digit number is 10, largest is 99\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Total students including Laura and Rita\n    total_students = 6\n\n    # Laura has to stand in the front, so there is only 1 way for her\n    # There are 5 positions left\n\n    # Rita cannot stand at the end, so she has 4 choices (second to fifth position)\n    rita_choices = 4\n\n    # For the remaining 4 positions, and 4 students (excluding Laura and Rita),\n    # all permutations are possible\n    remaining_permutations = factorial(4)\n\n    # Total ways = Rita's choices * the permutations of the remaining students\n    total_ways = rita_choices * remaining_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_sold = 4 / 7\n    total_apples = apples_sold / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_rate = 0.50\n    additional_discount_rate = 0.20\n    \n    # Calculate the price after the initial 50% discount\n    discounted_price = regular_total_price * (1 - discount_rate)\n    \n    # Calculate the price after the additional 20% discount\n    final_price = discounted_price * (1 - additional_discount_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    jerry_distance_ratio = 3 / 7\n    kevin_speed = 80  # mph\n    jerry_speed_ratio = 2 / 5\n\n    # If Jerry travels 3/7 of the distance, Kevin travels the remaining 4/7 of the distance\n    kevin_distance_ratio = 1 - jerry_distance_ratio\n\n    # Since they start at the same time and meet at the same time,\n    # their speeds are directly proportional to the distances they travel.\n    # Kevin travels 4/7 of the distance with a speed of 80mph, so Jerry travels 3/7 of the distance with a certain speed.\n    jerry_speed = (jerry_distance_ratio / kevin_distance_ratio) * kevin_speed\n\n    # Jerry speed ratio per hour is 2/5 of the road length, so his speed is 2/5 of the road length per hour.\n    # Hence, the length of the road is jerry_speed / (2/5)\n\n    road_length = jerry_speed / jerry_speed_ratio\n    return road_length\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    singapore_departure = datetime.strptime(\"24/08 05:00\", \"%d/%m %H:%M\")\n    london_arrival = datetime.strptime(\"24/08 11:00\", \"%d/%m %H:%M\")\n\n    # Adjust for time zone difference\n    adjusted_departure = singapore_departure - timedelta(hours=7)\n\n    # Calculate flight duration\n    duration = london_arrival - adjusted_departure\n\n    # Get duration in hours\n    flight_hours = duration.total_seconds() / 3600\n\n    return flight_hours\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_left_7 = 3\n\n    # Searching for a common number of lollipops that satisfy both conditions\n    for lollipops in range(lollipops_left_4, 1000):  # we assume he has less than 1000 lollipops\n        if (lollipops - lollipops_left_4) % 4 == 0 and (lollipops - lollipops_left_7) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')  # The variable to solve for: number of boys\n    girls = 40 - boys       # The number of girls can be expressed in terms of boys\n    \n    # Total pencils owned by boys = average * number_of_boys\n    total_pencils_boys = 20 * boys\n    # Total pencils owned by girls = average * number_of_girls\n    total_pencils_girls = 60 * girls\n    \n    # Average pencils of boys and girls combined\n    total_pencils = 35 * 40\n    \n    # Set up the equation\n    equation = Eq(total_pencils_boys + total_pencils_girls, total_pencils)\n    \n    # Solve the equation\n    solutions = solve(equation, boys)\n    \n    return solutions[0]  # Return the number of boys\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n\n    # The probability that Sally will lose is the remaining probability\n    lose_prob = 1 - win_prob - draw_prob\n\n    # Probability that Sally wins the first game and doesn't win the second (loses or draws)\n    win_first_lose_second_prob = win_prob * (lose_prob + draw_prob)\n\n    # Probability that Sally doesn't win the first game (loses or draws) and wins the second game\n    lose_first_win_second_prob = (lose_prob + draw_prob) * win_prob\n\n    # Since these are mutually exclusive events, we can add their probabilities\n    total_prob = win_first_lose_second_prob + lose_first_win_second_prob\n    \n    return total_prob\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # convert to string and remove '0.'\n    period_length = len(decimal)\n    ans = decimal[(2011 % period_length)]  # 2011 because index starts at 0\n    return int(ans)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Red to blue ratio is 5:6, so calculate red marbles\n    red_marbles = (5/6) * blue_marbles\n    # Red marbles is twice that of green marbles\n    green_marbles = red_marbles / 2\n    # Calculate the total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let e represent the number of Eddi's cards at first\n    # let w represent the number of Wiya's cards at first\n    e, w = symbols('e w')\n\n    # Given initial ratio of Eddi's and Wiya's cards\n    equation1 = Eq(e / w, 8 / 7)\n\n    # After Eddi gave 4 cards to Wiya, the new ratio\n    equation2 = Eq((e - 4) / (w + 4), 18 / 17)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, w))\n\n    # Returning Eddi's initial number of cards\n    return solutions[e]\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    # First, convert all the mixed numbers into improper fractions\n    num1 = 2017 + Fraction(7,8)\n    num2 = 3 + Fraction(2,3)\n    num3 = 2016.875\n    num4 = Fraction(11,3)\n    num5 = 2017 + Fraction(1,3)\n    num6 = 17\n    num7 = 3 + Fraction(23,32)\n\n    # Perform the calculations step by step\n    numerator = (num1 * num2) - (num3 * num4)\n    denominator = (num5 - num3) * num6\n\n    # Calculate the complex fraction\n    complex_fraction = numerator / denominator\n\n    # Finally, multiply by the mixed number\n    ans = complex_fraction * num7\n\n    # Convert to a float for the final answer\n    return float(ans)\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # a ≡ b (mod n) means that when a and b are divided by n, they leave the same remainder.\n    # Thus for numbers a, b, and c, and divisor n and remainder r: a ≡ r (mod n), b ≡ r (mod n), and c ≡ r (mod n)\n    # This implies that (a - r) ≡ 0 (mod n), (b - r) ≡ 0 (mod n), and (c - r) ≡ 0 (mod n)\n    # Hence, n must divide (a - r), (b - r), and (c - r), and thus must divide their GCD (greatest common divisor).\n    # So we need to find the GCD of the differences of the pairs of numbers.\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Calculate the GCD of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # Since the remainder is the same when 2010, 2377, and 3111 are divided by D,\n    # we can express the numbers as: 2010 = k*D + R, 2377 = l*D + R, 3111 = m*D + R, where k, l, m are integers.\n    # Subtracting pairs of these equations gives us: (2377 - 2010) = (l - k)*D, (3111 - 2377) = (m - l)*D, (3111 - 2010) = (m - k)*D\n    # The maximum value of D would then be the greatest common divisor of these differences as calculated above.\n\n    # The remainder R, for the maximum D, will be the reminder when any of the numbers is divided by the GCD.\n    R = 2010 % gcd_diff  # We could use 2377 or 3111 as well.\n\n    # The largest possible value of D + R is then:\n    return gcd_diff + R\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece_one = 5.3\n    piece_two = 3.8\n\n    third_piece_length = total_length - (piece_one + piece_two)\n\n    return third_piece_length\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students that need to be moved from Class A to Class B.\n    # After moving x students from Class A to Class B:\n    # Class A will have (A - x) students and Class B will have (B + x) students, where A and B are the original number of students in Class A and B, respectively.\n    # We know that originally, A = B + 47.\n    # The final condition states that Class A will have 9 more students than Class B: A - x = B + x + 9.\n    # By substituting A = B + 47 into the final condition, we get:\n    # (B + 47 - x) = B + x + 9.\n    # Now, solve for x:\n    # B + 47 - B - 9 = 2x\n    # 38 = 2x\n    # x = 19. Therefore, 19 students need to be moved from Class A to Class B.\n\n    x = 19\n    return x\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 30):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    start_delay = 10  # minutes\n\n    # Distance covered by the rabbit in the first 10 minutes\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n\n    # Time taken by the turtle to finish the race\n    turtle_time_to_finish = race_distance / turtle_speed\n\n    # Time taken by the rabbit to reach the finish line after sleeping\n    rabbit_time_to_finish = (race_distance - rabbit_distance_before_sleep) / rabbit_speed + rabbit_sleep_time + start_delay\n\n    # Determine the winner and the distance between them at the end\n    if rabbit_time_to_finish < turtle_time_to_finish:\n        winner = \"rabbit\"\n        # Distance the turtle has covered when the rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_time_to_finish\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        # Distance the rabbit has covered when the turtle finishes\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + rabbit_speed * (turtle_time_to_finish - rabbit_sleep_time - start_delay)\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    sale_percentage = 120 / 100\n    sale_price = cost * sale_percentage\n    return sale_price\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10):\n                if (hundred + ten + one == 5) and (one % 2 != 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # According to the problem we have two equations:\n    # y - x = 57 (1)\n    # x + y = 77 (2)\n    \n    # Sum equations (1) and (2) to eliminate y\n    # 2y = 134\n    # y = 67\n\n    # Now substitute the value of y in equation (2) to find x\n    # x + 67 = 77\n    # x = 77 - 67\n    # x = 10\n\n    # The smaller number x is 10\n    return 10\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # There are 2 avocados in a pair\n    cost_per_avocado_pence = (total_cost_pounds * 100) / total_avocados\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # Create a dictionary to count the frequency of each possible score\n    score_counts = {i: 0 for i in range(2, 13)}\n    \n    # Iterate over every possible roll for the first die\n    for die1 in range(1, 7):\n        # Iterate over every possible roll for the second die\n        for die2 in range(1, 7):\n            # Add the rolls together to get the score\n            score = die1 + die2\n            # Increment the count of this score\n            score_counts[score] += 1\n    \n    # Find the score with the maximum frequency\n    most_likely_score = max(score_counts, key=score_counts.get)\n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the number of girls\n    g = symbols('g')\n\n    # Total number of students and boys\n    total_students = 36\n    b = total_students - g\n\n    # Average scores\n    avg_class = 89\n    avg_girls = 88\n    avg_boys = 91\n\n    # Total scores\n    total_class_score = total_students * avg_class\n    total_girls_score = g * avg_girls\n    total_boys_score = b * avg_boys\n\n    # Equation based on the total score\n    equation = Eq(total_girls_score + total_boys_score, total_class_score)\n\n    # Solve for the number of girls\n    number_of_girls = solve(equation, g)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    heads = 28\n    legs = 88\n    # Let's denote the number of rhinos (and deer) as 'r' and the number of ostriches as 'o'.\n    # Each rhino and deer has 4 legs and each ostrich has 2 legs.\n    # Since the number of rhinos is equal to the number of deer, we can say that there are '2r' four-legged animals.\n    # So we have:\n    # r + o = 28 (each animal has one head)\n    # 4r + 2o = 88 (total number of legs)\n    # By subtracting the first equation multiplied by 2 from the second, we get:\n    # 4r + 2o - (2r + 2o) = 88 - 56\n    # 2r = 32\n    # r = 16\n    # The number of rhinos (which is equal to the number of deer) is 16.\n    return int(16)\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # For each square table, four people can sit on one side (as it is a square table and 12 people are evenly spaced).\n    people_per_table_side = 12 // 4\n    \n    # When eight square tables are put together in a row, the two people at the ends of each table\n    # (except for the first and last table) will not have a seat as they would be \"inside\" the long table.\n    # Therefore, we only consider the outer sides of the first and last table and one side for the tables in between.\n    # The first and the last table contribute all their four sides\n    people_at_ends = 2 * (people_per_table_side * 4)\n    \n    # The tables in the middle contribute only one side each (since they're placed in a row).\n    people_in_middle = (8 - 2) * people_per_table_side\n    \n    # Total number of people is the sum of people at the ends and the people in the middle.\n    total_people = people_at_ends + people_in_middle\n    \n    return total_people\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits_per_page = 1  # Start with pages having 1 digit\n    page_count = 0\n    total_digits = 339\n    \n    while total_digits > 0:\n        page_range = 9 * (10 ** (digits_per_page - 1))\n        digits_needed = page_range * digits_per_page\n        \n        if total_digits >= digits_needed:\n            total_digits -= digits_needed\n            page_count += page_range\n            digits_per_page += 1\n        else:\n            page_count += total_digits // digits_per_page\n            total_digits = 0\n    \n    return page_count\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Andrew's marbles as A, Boris's as B, Jeffery's as J, and Xavier's as X.\n    A, B, J, X = symbols('A B J X')\n\n    # According to the problem statement:\n    equation1 = Eq(A, (B + J + X) / 3 - 30)  # Andrew has (B + J + X)/3 - 30 marbles \n    equation2 = Eq(X, 3 * A)                 # Xavier has thrice as many marbles as Andrew\n\n    # We need to find the total marbles that Jeffery and Boris have (B + J).\n    # We get two equations but have four variables. We can express B and J in terms of A using our equations.\n    solutions = solve((equation1, equation2), (B, J), dict=True)\n\n    # Extract solutions for B and J\n    B_solution = solutions[0][B]\n    J_solution = solutions[0][J]\n\n    # The sum of Jeffery's and Boris's marbles\n    BJ_sum = B_solution + J_solution\n\n    return BJ_sum\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors\n    count = 0\n    for i in range(1, 100000):  # Define a reasonable range to search for such numbers\n        if i % 15 == 0:          # Check if it's a multiple of 15\n            if len(divisors(i)) == 15:  # Check if it has exactly 15 factors\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    number = 8 * 80 * 100\n    ans = number / (8 ** 2)\n    return int(ans)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit of 32^33 and 22^29 separately.\n    # The ones digit of a number raised to a power cycles in a pattern.\n    # For base 32, the pattern in ones place for powers is 2, 4, 8, 6 and it repeats every 4 powers\n    # For base 22, the pattern is 2, 4, 8, 6 and it repeats every 4 powers as well.\n\n    # Ones digit for 32^33 will be the same as 2^1 since 33 % 4 = 1 (cycle repeats every 4)\n    ones_digit_32_33 = 2\n\n    # Ones digit for 22^29 will be the same as 2^1 since 29 % 4 = 1 (cycle repeats every 4)\n    ones_digit_22_29 = 2\n\n    # Now subtract the ones digit of 22^29 from the ones digit of 32^33\n    result = ones_digit_32_33 - ones_digit_22_29\n\n    # If the result is negative, add 10 to get the positive equivalent ones digit\n    return result if result >= 0 else result + 10\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # Starting point\n    fraction = 2014 / 37 - 54\n    # Reciprocal to get value inside the fraction\n    x = 1 / fraction\n    \n    # Subtract x and take reciprocal to get value inside the next fraction\n    fraction = x - int(x)\n    x = int(x)\n    y = 1 / fraction\n    \n    # Subtract y and take reciprocal to get z\n    fraction = y - int(y)\n    y = int(y)\n    z = int(1 / fraction)\n    \n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    final_position = 10 # Eddie stops at the 10 o'clock position\n    total_counts = 30\n    clock_numbers = 12\n\n    # Since the clock has 12 numbers and Eddie counts to 30,\n    # we can determine the starting position by working backwards from 10.\n    # We use modulo to wrap around the clock.\n    \n    # Subtract 1 because when Eddie stops at \"10\", it's the 30th count (not the 31st).\n    start_number = (final_position - (total_counts % clock_numbers) - 1) % clock_numbers\n    \n    # If the result is \"0\", it means Eddie started at 12.\n    if start_number == 0:\n        start_number = 12\n\n    return start_number\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Let 'n' be the size of the square array (n will be odd because the outermost layer is students)\n    # Let 's' be the number of students and 't' be the number of teachers.\n    # The number of people in the k-th layer counting from the outside (1-indexed) is 4*(n - 2*(k-1)) - 4\n    # The k-th layer will be students if k is odd, and teachers if k is even.\n    # We calculate the number of students and teachers considering each layer.\n    \n    n = 1\n    while True:\n        s, t = 0, 0\n\n        # Iterate through each layer\n        for k in range(1, (n + 1) // 2 + 1):\n            # Find the number of people in the k-th layer\n            people_in_layer = 4*(n - 2*(k-1)) - 4 if k > 1 else 1\n\n            if k == 1 and n == 1:  # Special case for 1x1 array\n                s += 1\n            elif k % 2 == 1:  # Odd layers have students\n                s += people_in_layer\n            else:  # Even layers have teachers\n                t += people_in_layer\n\n        if s - t == 52:  # Check if the difference between students and teachers is 52\n            return s + t  # Return the total number of people in the array\n        else:\n            n += 2  # We can only consider odd n, as the students are on the outermost layer\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n    amount_per_person = jackpot / people\n    return amount_per_person\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # After selling x kilograms, big bucket has 89 - x, small bucket has 45 - x\n    # The big one is left with 12 times the oil in the small one\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens including the alien himself\n    total_aliens = 1 + 5\n    # Cost of one set of shoes (5 shoes)\n    shoes_cost = 78\n    # Cost of one pair of socks (2 socks)\n    socks_cost = 12\n    # Each alien has 5 legs, so they need 1 set of shoes and 5/2 pairs of socks each\n    # Multiply costs by the number of aliens\n    total_cost = (shoes_cost + (5/2) * socks_cost) * total_aliens\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    while ans < 100:  # ensure smallest three-digit number\n        ans += 5 * 6 * 7\n    return ans\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # Given that 31 + a = 26 + b = 20 + c\n    # It implies a = b - 5 = c - 11\n    # b = a + 5, and c = a + 11\n    \n    # Calculate a from the first equation\n    a = 26 - 31 + 25  # 25 is the next prime number after 26 - 31 = -5\n    \n    # Check if a is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the smallest prime number a where b and c are also prime\n    while True:\n        b = a + 5\n        c = a + 11\n        if is_prime(a) and is_prime(b) and is_prime(c):\n            break\n        a += 1\n    \n    # Return the product of a, b, and c\n    return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # convert minutes to hours\n    speed_to_park = 5  # km/h\n    speed_back_home = 4  # km/h\n    \n    # Let the distance between home and park be x km\n    # Time to park: x/5 and time back home: x/4\n    # Total time equation: x/5 + x/4 = 54/60\n    # Solve for x\n    x = (total_time * speed_to_park * speed_back_home) / (speed_to_park + speed_back_home)\n    \n    return x\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let g represent the number of girls and b represent the number of boys.\n    # According to the problem there are 8 more girls than boys, giving us the equation: g = b + 8\n    # The total number of pupils is 26, giving us the equation: g + b = 26\n    \n    # From the two equations, we can solve for g and b\n    # g + b = 26\n    # (b + 8) + b = 26\n    # 2b + 8 = 26\n    # 2b = 26 - 8\n    # 2b = 18\n    # b = 18 / 2\n    # b = 9\n    \n    # Now that we know there are 9 boys, we can find the number of girls.\n    # g = b + 8\n    # g = 9 + 8\n    # g = 17\n    \n    # Therefore, there are 17 girls in the class.\n    return 17\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n\n    equation1 = Eq(joleen, rennie + 5)  # Joleen baked 5 more pies than Rennie\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)  # 3/4 of Rennie's pies equals 2/3 of Joleen's pies\n\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    total_pies = solutions[joleen] + solutions[rennie]  # Total pies baked by Joleen and Rennie\n\n    return total_pies\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas.\n    # According to the problem, the number of students who like apples is\n    # 3 times the number of students who like both, so it is 3x.\n    # Similarly, the number of students who like bananas is 5 times the number\n    # of students who like both, so it is 5x.\n    #\n    # Using the Inclusion-Exclusion Principle:\n    # Total = number who like apples + number who like bananas - number who like both\n    # 35 = 3x + 5x - x\n    # 35 = 7x\n    # x = 35 / 7\n    # x = 5\n\n    students_who_like_both = 35 // 7\n    return students_who_like_both\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_for_pie_kg = 550 / 1000\n    oranges_for_juice_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (oranges_for_pie_kg + oranges_for_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n\n    total_chairs = sum(first_day_chairs + i * difference for i in range(total_days))\n    return total_chairs\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n represent the time it takes for Nancy to finish the job by herself\n    n = symbols('n')\n\n    # Equation representing combined work finishing in 10 hours\n    # 1 job = (1/n + 1/10) * 10 hours\n    equation1 = Eq(1, (1/n + 1/10) * 10)\n\n    # Equation representing Nancy working 20 hours and Lee working 6 hours to finish 1 job\n    # 1 job = (1/n * 20) + (1/n * 6) since they finish the job together\n    equation2 = Eq(1, (1/n * 20) + (1/n * 6))\n\n    # Solve the equation system\n    solutions = solve((equation1, equation2), (n))\n\n    # Return the time it takes for Nancy to finish the job by herself\n    return solutions[n]\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A    # Since the question asks for A, we return it directly if condition is met.\n    return None  # In case no solution is found, though we expect one.\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    return (15 / 300) * 100\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways = (pencils * rulers) + (pencils * pens) + (rulers * pens)\n\n    return ways\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    series = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # There are 3 pigeonholes (colors of marbles)\n    # To ensure one pigeonhole (color) has 3 marbles, pull out 2 from each of the other two colors\n    # Total number = 2 (from blue) + 2 (from yellow) + 1 (from red, because there is only one) + 1 (to guarantee the third marble of the same color)\n    return (2 + 2 + 1 + 1)\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_pence = 7 * 14\n    pounds_to_pence = 100\n    change_pence = (1 * pounds_to_pence) - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Current sum of ages\n    current_sum_of_ages = 45\n    # Sum of ages after 5 years\n    sum_of_ages_in_5_years = current_sum_of_ages + 5 * 2  # Both will be 5 years older\n\n    return sum_of_ages_in_5_years\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n    return price_of_sofa\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sebastian's and Garrett's current age\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n    \n    # Create the equations based on the problem statement\n    # Equation 1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(garrett_age, sebastian_age + 24)\n    \n    # Equation 2: In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n    \n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    boys, girls = symbols('boys girls')\n\n    # Setup the equations based on the problem statement\n    # boys + 65 = girls\n    equation1 = Eq(boys + 65, girls)\n    # boys - (2/5)boys == girls - (3/7)girls\n    equation2 = Eq(boys - (2/5)*boys, girls - (3/7)*girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the number of boys and girls that remained\n    boys_remaining = solutions[boys] - (2/5)*solutions[boys]\n    girls_remaining = solutions[girls] - (3/7)*solutions[girls]\n\n    # Sum the number of remaining boys and girls to get the total\n    total_remaining = boys_remaining + girls_remaining\n\n    return total_remaining\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    number_of_people = 4\n    number_of_days = 7\n\n    cost_of_travel_per_person = 150\n    cost_of_hotel_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = cost_of_travel_per_person * number_of_people\n    total_hotel_cost = cost_of_hotel_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    apples = oranges + 150\n    bananas = oranges + 50\n    total_fruits = 1400\n\n    equation = Eq(apples + bananas + oranges, total_fruits)\n\n    solutions = solve(equation, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ORANGES\")\n    total_vowels = 3  # A, E and O\n    \n    # Total arrangements without restrictions\n    total_arrangements = factorial(total_letters) // (factorial(total_letters - total_vowels))\n\n    # Arrangements where vowels ARE together (treated as a single entity)\n    vowels_together = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)\n\n    # Subtract arrangements where vowels are together from the total arrangements\n    return total_arrangements - vowels_together\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # There are 4! ways to arrange the math books among themselves\n    math_arrangements = factorial(4)\n    # There are 3! ways to arrange the chemistry books among themselves\n    chemistry_arrangements = factorial(3)\n    # There are 2! ways to arrange the physics books among themselves\n    physics_arrangements = factorial(2)\n    \n    # Treat the math, chemistry, and physics books as single units along with the 1 biology book,\n    # giving us 4 units to arrange in total (M, C, P, B)\n    unit_arrangements = factorial(4)\n\n    # The total number of arrangements is the product of the arrangements\n    # of each group of books and the arrangements of the units\n    total_arrangements = math_arrangements * chemistry_arrangements * physics_arrangements * unit_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # Number of ways to select one problem from each category\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n\n    # Apply the Principle of Multiplication\n    total_ways = category_1 * category_2 * category_3\n\n    return total_ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2+1):\n        for b in range(a, 12//2+1):\n            c = 12 - a - b\n            if b <= c:  # Triangle inequality theorem\n                continue\n            if c >= a:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import solve, Eq, symbols, isprime, primerange\n\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Setting up the equations according to the given conditions\n    eq1 = Eq(31 + a, 26 + b)\n    eq2 = Eq(26 + b, 20 + c)\n\n    # Solving the equations for a, b, and c\n    solutions = solve((eq1, eq2), (a, b, c)) \n    a, b, c = solutions[a], solutions[b], solutions[c]\n    \n    # Check if a, b, and c are prime\n    if isprime(a) and isprime(b) and isprime(c):\n        return a * b * c\n    else:\n        # Finding primes in a reasonable range\n        primes = list(primerange(2, 50))\n        \n        # Brute force approach to find the prime numbers within the constraints\n        for a in primes:\n            for b in primes:\n                for c in primes:\n                    if 31 + a == 26 + b == 20 + c:\n                        return a * b * c\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    # There are 6 people to sit in a circle, but orders that are rotations of each other are considered the same\n    # For n people sitting in a circle, there are (n-1)! ways to arrange them\n    ans = factorial(6 - 1)\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: equal number of boys and girls\n    initial_condition = Eq(boys, girls)\n\n    # After 12 boys came and 8 girls left\n    after_condition = Eq(boys + 12, 2 * (girls - 8))\n\n    # Solve the equations\n    solutions = solve((initial_condition, after_condition), (boys, girls))\n\n    # Total number of students at first is twice the number of boys or girls\n    total_students_at_first = 2 * solutions[boys]\n    \n    return total_students_at_first\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    # Let the original number of stickers for Eugene, Melvin, and David be e, m, and d respectively.\n    # Let e_transfer be the amount transferred from Eugene to Melvin.\n    # Melvin's new count is twice his original, so he gets m more stickers: e_transfer = m\n    # After transfers, their counts are: Eugene = e - m, Melvin = m + m, David = d + m\n    # When Melvin gives stickers to David, he gives d: Melvin = 2m - d, David = d + d\n    # Finally, David gives e - m stickers to Eugene: David = 2d - (e - m), Eugene = (e - m) + (e - m)\n    # The ratio is given as 46:12:7\n    # So, 4 * (e - m) / (2m - (2d - (e - m))) / (2d - (e - m)) = 46 / 12 / 7\n    # We simplify the ratio to get (4e - 4m) : (4m - 2e + 2m) : (4d - 2e + 2m) = 46 : 12 : 7\n    # Using the totals we get 46x + 12x + 7x = 260 where x is the common multiplier for the ratio.\n\n    # The above can be simplified to 65x = 260, so x = 4.\n    # Therefore, Eugene originally had 46 * 4 stickers.\n\n    return 46 * 4\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # For this game, the winning strategy is to make the two piles have the same number of matches after your turn.\n    # This will ensure that no matter what the other player does, you can always even out the piles until you take the last match.\n\n    # Since Eddie goes first, he should ensure that after his first move, both piles have an equal number of matches.\n    # Pile A has more matches, so Eddie should take matches from pile A to make it equal to pile B.\n\n    # Calculate the number of matches Eddie should take from pile A to make the number of matches equal in both piles.\n    # The current difference is:\n    difference = 35 - 24\n\n    # Eddie should take this difference from pile A\n    matches_to_take = difference\n\n    # So, Eddie has a winning strategy if he takes the difference from pile A,\n    # making both piles equal, because from that point, he can always mirror Wei'er's moves and ensure he takes the last match.\n\n    # Eddie's winning strategy is to take 11 matches from pile A.\n    ans = matches_to_take\n    return ans\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    total = 0\n    for i in range(80, 55, -4):\n        total += (i - (i - 2))\n    return total\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n\n    num_terms = (last_term - first_term) + 1\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    \n    # Three nested loops to form all possible three-digit numbers\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length1 = 15\n    length2 = 45\n    greatest_common_divisor = gcd(length1, length2)\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds for different parts of the race\n    speed1 = 7  # m/s for the first 280 m\n    speed2 = 5  # m/s for the middle 400 m\n    speed3 = 8  # m/s for the remaining distance\n\n    # Distances for different parts of the race\n    distance1 = 280  # m\n    distance2 = 400  # m\n    remaining_distance = 800 - (distance1 + distance2)  # Total distance - sum of the first two parts\n\n    # Time calculations for each part of the race\n    time1 = distance1 / speed1  # Time for the first part\n    time2 = distance2 / speed2  # Time for the second part\n    time3 = remaining_distance / speed3  # Time for the remaining part\n\n    # Total time for the entire race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(2, 25))\n    for i in primes:\n        if 25 - i in primes:\n            product = i * (25 - i)\n            break\n\n    return product\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    return 150 - 12 * 12\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n\n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n\n    time_spent_minutes = end_time_total_minutes - start_time_total_minutes\n\n    return time_spent_minutes\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    students = 6\n    min_peaches = (total_peaches + (students - 1)) // students\n    return min_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate/6 + 2*vanilla/3 + 7*blueberry/9, 427)\n    \n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes = solutions[chocolate]\n    chocolate_sold = chocolate_cupcakes - chocolate_cupcakes * (5/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lampposts = 50\n    distance_between_lampposts = 2\n    \n    # Subtract 1 because the distance is between the lamp posts\n    length_of_road = (number_of_lampposts - 1) * distance_between_lampposts\n\n    return length_of_road\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x\n    # Therefore, the seven consecutive numbers are x, x+1, x+2, x+3, x+4, x+5, x+6\n    # Their sum is 7x + (1+2+3+4+5+6) = 7x + 21\n    # We are given the sum is 140, so we can set up the equation 7x + 21 = 140\n    \n    # Now solve for x\n    x = (140 - 21) / 7\n    \n    # The smallest number is x\n    return int(x)\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcard_cost = 45  # cost in pence\n    stamp_cost = 27     # cost in pence\n    total_postcards = 10\n    total_stamps = 10\n    note_value = 1000   # £10 note value in pence\n\n    total_cost = (postcard_cost * total_postcards) + (stamp_cost * total_stamps)\n    change = note_value - total_cost\n\n    # Convert pence to pounds for the answer\n    return change / 100.0\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following congruences based on the problem statement:\n    # x ≡ -3 (mod 4)\n    # x ≡ -1 (mod 7)\n    # x ≡ -3 (mod 9)\n    congruences = [(-3, 4), (-1, 7), (-3, 9)]\n    \n    # Use the solve_congruence function from the sympy library to find the solution\n    child_count = solve_congruence(*congruences)\n\n    return child_count[0]\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 seats left to arrange for Chantel, Tony, and Cale.\n    # If Claire's seat is fixed and she cannot sit face to face with Tony,\n    # then Tony has only 2 choices of seats instead of 3.\n    # After Tony's seat is decided, there are 2 remaining seats for Chantel and Cale\n    # which can be arranged in 2! ways.\n    # Therefore, the total number of possible arrangements is 2 * 2!.\n    \n    total_ways = 2 * (2 * 1)\n    return total_ways\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    return round(7.35, 1)\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank produces 180 tables in 10 days\n    frank_production_rate_per_day = 180 / 10\n\n    # Ryan produces 180 tables in 15 days\n    ryan_production_rate_per_day = 180 / 15\n\n    # Find the difference in the number of tables produced per day\n    difference_in_production = frank_production_rate_per_day - ryan_production_rate_per_day\n\n    return difference_in_production\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * marks_correct + wrong * marks_wrong == 79:\n            return correct\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75     # 75 pence each, equivalent to £0.75\n    number_of_cakes = total_money_raised / price_per_cake\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Iterate through a range where consecutive groups of 5 two-digit numbers can exist\n    for i in range(10, 100 - 4):\n        # Five consecutive numbers\n        a, b, c, d, e = i, i + 1, i + 2, i + 3, i + 4\n\n        # Three possible sums of three numbers from the consecutive numbers\n        sum1 = a + b + c\n        sum2 = b + c + d\n        sum3 = c + d + e\n\n        # Check divisibility conditions\n        if sum1 % 37 == 0 and sum3 % 60 == 0:\n            return e  # largest number\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_restaurant = total_money * (3 / 7)\n    remaining_after_restaurant = total_money - spent_restaurant\n    spent_enrichment = remaining_after_restaurant * (2 / 9)\n    remaining_money = remaining_after_restaurant - spent_enrichment\n    \n    return remaining_money\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let x be the total number of questions marked by Miss Atkinson.\n    # Let t be the actual time she needed to finish marking.\n    \n    # if she marked 4 questions per minute, she took x/4 minutes,\n    # and she would leave 5 minutes late, so the actual time is x/4 - 5\n    \n    # if she marked 6 questions per minute, she took x/6 minutes,\n    # and she would leave 5 minutes early, so the actual time is x/6 + 5\n    \n    # These two times must be the same since both scenarios describe the same actual marking duration.\n    # Thus, we have the equation x/4 - 5 = x/6 + 5\n    \n    # Solving for x gives:\n    x = symbols('x')\n    equation = Eq(x/4 - 5, x/6 + 5)\n    \n    # We solve the equation for x.\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    candies_given_by_amy = 24 - candies_each\n\n    return candies_given_by_amy\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution():\n    x, y = symbols('x y')\n    cost = 5*x + 1*y\n    return cost\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # There is a 2-second interval between each chime (6 seconds total for 3 chimes means two intervals of 2 seconds each).\n    # To chime 6 times, there will be 5 intervals.\n    # So, the time taken to chime 6 times will be 5 intervals * 2 seconds each.\n    interval = 2\n    intervals_for_6_chimes = 5\n    time_for_6_chimes = intervals_for_6_chimes * interval\n    return time_for_6_chimes\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert both lengths to centimetres\n    metres_in_cm = 3.2 * 100  # 3.2 metres to centimetres\n    centimetres = 30\n    \n    # Calculate the difference\n    difference = metres_in_cm - centimetres\n    \n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    num_terms = 10  # There are 10 terms from 3^2 to 30^2 going up by 3 each time.\n    \n    # Using the formula of the sum of the squares of the first n natural numbers\n    sum_of_squares = (num_terms * (num_terms + 1) * (2 * num_terms + 1)) // 6\n    \n    # Multiplying the sum of squares by 3 (since each term is 3 times a perfect square)\n    ans = 3 * sum_of_squares\n    \n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    q_days = 8\n    q_hours_per_day = 10\n    \n    p_work_per_hour = 1 / (p_days * p_hours_per_day)\n    q_work_per_hour = 1 / (q_days * q_hours_per_day)\n    \n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n    hours_needed = 1 / combined_work_per_hour\n    days_needed = hours_needed / 8\n    \n    return -(-days_needed // 1)  # Ceiling division to get the next whole number\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    prime_factors = factorint(120)\n    count = 1\n    for exponent in prime_factors.values():\n        count *= (exponent + 1)\n    return count\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # Convert pence to pounds\n    total_kg = 5\n    total_cost = cost_per_kg * total_kg\n    amount_paid = 10\n\n    change = amount_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_change = 13 - (-8)\n    return temperature_change\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    factors = []\n\n    # Find all pairs of factors\n    for i in range(1, int(product ** 0.5) + 1):\n        if product % i == 0:\n            factors.append((i, product // i))\n\n    # Find the pair with the smallest difference\n    smallest_difference = float('inf')\n    for f1, f2 in factors:\n        smallest_difference = min(smallest_difference, abs(f1 - f2))\n\n    return smallest_difference\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15):\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_collected = people * price_per_person\n    return total_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    gcf = gcd(16, 36)\n    return gcf\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time taken by Max\n    t = symbols('t')\n  \n    # Given, Luca takes 10 more minutes than Max.\n    # Time taken by Luca is t + 10.\n  \n    # Ratio of speeds of Luca:Max = 2:3\n    # Since, Speed = Distance/Time and Distance is same for both Max and Luca:\n    # Speed of Luca / Speed of Max = (Distance/(t + 10)) / (Distance/t)  = 2/3\n  \n    # We'll set up the proportional equation and solve for t\n    # Cross-multiplying gives (2/3) * t = (t + 10)\n    equation = Eq(2/3 * t, t + 10)\n\n    # Solving for t\n    solution_t = solve(equation, t)[0]\n\n    # If Luca had walked at double his usual speed, the time will be halved.\n    double_speed_time_luca = (solution_t + 10) / 2\n\n    return double_speed_time_luca\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    score = 71\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We know that 2x - y = 71 and x + y = 40\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if 2 * x - y == score:\n            correct_answers = x\n            wrong_answers = y\n            break\n    return wrong_answers\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pencils = symbols('pencils')\n    \n    # Pens is equal to pencils\n    pens = pencils\n    \n    # Gave away 5 pencils to Ali\n    pencils_left = pencils - 5\n    \n    # Now, pens are twice as many as pencils left\n    pens_twice_pencils = Eq(pens, 2 * pencils_left)\n\n    # Solve for pencils\n    pencils_solution = solve(pens_twice_pencils, pencils)[0]\n    \n    # Calculate pens now\n    pens_now = pencils_solution + 18\n\n    return pens_now\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    jogging_time = 1  # from 6:30 AM to 7:30 AM\n    walking_time = 2  # from 7:30 AM to 9:30 AM\n\n    jogging_speed = 6.5  # miles per hour\n    walking_speed = 4.5  # miles per hour\n\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Since there are 4 patterns, and each pattern does not contain \"A\",\n    # We need to draw all these cards to make sure we have a card that's not \"A.\"\n    # That's 13 cards per pattern * 4 patterns = 52 cards.\n    # To ensure that we draw an \"A,\" we need to draw one more card.\n\n    cards_to_draw = 13 * 4 + 1\n    return cards_to_draw\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 7\n    distance = 320\n    \n    downstream_speed = speed_in_still_water + speed_of_current\n    time_to_travel_downstream = distance / downstream_speed\n    \n    return time_to_travel_downstream\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_length_45 = 45 * 2\n    remaining_length = initial_length - cut_length_45\n    length_of_each_cut = 40\n    number_of_40cm_lengths = remaining_length // length_of_each_cut\n    return number_of_40cm_lengths\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_tennis_to_left_handed = 1 / 10\n    proportion_left_handed_to_total = 1 / 4\n  \n    total_students = left_handed_tennis_players / (proportion_tennis_to_left_handed * proportion_left_handed_to_total)\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram_of_butter\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    count = 3 * 3 * 3  # Three options for each of the three digits\n    return count\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    zeros_count = 0\n    current_number = 1\n    while zeros_count < 100:\n        str_num = str(current_number)\n        zeros_count += str_num.count('0')\n        if zeros_count >= 100:\n            break\n        current_number += 1\n    return current_number\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    \n    arrival_time = departure_time + travel_duration\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    consumed_juice = 9  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - consumed_juice\n\n    return remaining_juice\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue_cars = total_cars - red_cars - blue_cars\n    return neither_red_nor_blue_cars\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # speed in meters per minute when biking fast\n    time_fast = 6     # time in minutes biking fast\n\n    speed_slow = 120  # speed in meters per minute when biking slow\n    time_slow = 8     # time in minutes biking slow\n\n    # Calculate the distance covered while biking fast and slow\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    # Total distance is the sum of the distance covered during both intervals\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    \n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # Adding Elias\n    \n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    result = (42 / 35) * 100\n    return result\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the sequence be 'a'\n    # Then the terms are: a, a+1, a+2, a+3, a+4, a+5, a+6, a+7\n    # The sum of an arithmetic sequence is given by the formula: (n/2)*(first_term + last_term)\n    # where n is the number of terms\n    # Since we have 8 terms, and their sum is 2012, we can write the equation as:\n    # (8/2) * (a + (a + 7)) = 2012 => 4 * (2a + 7) = 2012\n    # Solving this equation gives us the value of 'a'\n    \n    total_sum = 2012\n    num_terms = 8\n    sum_formula_factor = num_terms // 2\n    \n    # Rearrange the equation: sum_formula_factor * (2a + 7) = total_sum\n    # 2a + 7 = total_sum / sum_formula_factor\n    a = (total_sum / sum_formula_factor - 7) / 2\n    \n    # The largest number in the sequence is a+7\n    largest_number = a + 7\n    return int(largest_number)\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the initial number of students in class A\n    # Let B be the initial number of students in class B\n    A, B = symbols('A B')\n\n    # The number of students in class A is 5/7 of that of class B\n    equation1 = Eq(A, 5/7 * B)\n\n    # If 3 students were transferred from B to A, A would become 4/5 of B\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Solution for A\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    girls = 17\n    for boys in range(1, girls+1):\n        total_people = boys**2 + girls\n        side_length = int(total_people**0.5)\n        if side_length * side_length == total_people:\n            return boys**2\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the initial number of bottles Faye had\n    # At each swap, x is reduced by 3 and increased by 1(because 3 empty bottles give 1 full bottle)\n    # After 5 swaps, x is reduced 5 times, so it's 5*3 = 15 bottles given and 5 received\n    # She should have 4-1=3 bottles finally if no bottlles left initially\n    # so the initial number minus 15 plus 5 should be 3\n    # x - 15 + 5 = 3 => x - 10 = 3 => x = 3 + 10\n    ans = 3 + 10\n    return ans\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    total_millilitres = total_litres * 1000\n    total_seconds = total_millilitres / flow_rate_per_second\n\n    return total_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_number = 0\n\n    while total_digits < 237:\n        page_number += 1\n        total_digits += digits_per_page\n\n        if page_number >= 10 and page_number < 100:\n            digits_per_page = 2\n        elif page_number >= 100:\n            digits_per_page = 3\n\n    return page_number\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, and s be the original speed\n    d, s = symbols('d s')\n\n    # She covers the distance (d) at speed s in (7-1) = 6 hours\n    original_time = 6\n\n    # If she increases her speed by 2 (s + 2), she covers the distance in 6 - 1 = 5 hours\n    increased_speed_time = 5\n\n    # Two equations represent the scenarios\n    equation1 = Eq(d, s * original_time)     # d = s * 6\n    equation2 = Eq(d, (s + 2) * increased_speed_time)  # d = (s + 2) * 5\n\n    # Solve for s (original speed) and d (distance)\n    solutions = solve((equation1, equation2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    corrected_total = 1462\n    incorrect_day_savings = 1268\n    corrected_day_savings = 1082\n    \n    # Difference in savings due to incorrect recording\n    savings_difference = incorrect_day_savings - corrected_day_savings\n\n    # Difference in average savings per day\n    average_difference = incorrect_total - corrected_total\n    \n    # Number of days calculated by dividing the differences\n    num_days = savings_difference / average_difference\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    oak_tree_age_in_2011 = 2011 - birth_year\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr. Tung cuts a rope into 4 pieces, so he makes 3 cuts in 12 minutes.\n    # Each cut takes 12 / 3 = 4 minutes.\n    time_per_cut = 12 / 3\n\n    # To cut a rope into 12 pieces, he needs to make 11 cuts.\n    # Total time is number of cuts times time per cut.\n    total_time = 11 * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the first term, and 'd' be the common difference of the arithmetic progression\n    a, d = symbols('a d')\n\n    # The 9th term is 18 larger than the 15th term\n    # So, a + 8d = (a + 14d) + 18\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # The sum of the 20th term and the 12th term is 88\n    # So, (a + 19d) + (a + 11d) = 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the value of the 32nd term using the obtained values a + 31*d\n    thirty_second_term = solutions[a] + 31*solutions[d]\n\n    return thirty_second_term\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    return solutions[carol]\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    \n    return ans\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2/5) * total_flowers\n    purple_flowers = (1/8) * total_flowers\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Chewy's incorrect equation\n    incorrect = Eq((8*x + 8)/2 - 3*(x + 6), x + 22)\n    # Finding mistake in Chewy's equation\n    chewy_mistake = solve(incorrect, x)\n    \n    # Correct equation\n    correct = Eq((8*x + 8)/2 - 3*(x + 6), 4*x + 4 - 3*x - 18)\n    # Solving for x\n    correct_solution = solve(correct, x)\n\n    return correct_solution[0]\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since there are 2 piles and 10 identical marbles, this is essentially\n    # asking for the number of partitions of 10 into 2 parts.\n    # This can be calculated by 10 + 1, because the smallest number of marbles in any pile is 0\n    # and the largest is 10, which gives us 11 possible distributions.\n    \n    return 11\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Convert liters to quarts (1 liter = 1.05668821 quarts)\n    bottle_capacity_quarts = 2.5 * 1.05668821\n    \n    # Cup capacity in quarts is given\n    cup_capacity_quarts = 0.5\n\n    # Calculate the number of cups by dividing the bottle capacity by the cup capacity\n    # Round the result to the nearest integer\n    num_cups = round(bottle_capacity_quarts / cup_capacity_quarts)\n\n    return num_cups\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34 / 100\n    return ans\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To make sure to pick 3 toy cars of the same color, \n    # one worst scenario is to pick all cars of the other two colors first.\n    # Since there is the highest number of blue cars, let's consider them last.\n    # Pick all red cars (5), and all white cars (4)\n    # Now no matter what the next three cars we pick, they will be of the same color.\n    red_cars = 5\n    white_cars = 4\n    ans = red_cars + white_cars + 3  # 3 more picks to guarantee the same color (could be blue)\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85 + 147  # length in cm\n    length_m = 2  # length in m\n\n    # Convert cm to m and add to the length in m\n    total_length_m = length_m + (length_cm / 100)\n\n    return total_length_m\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    litres = 7.5\n    millilitres = litres * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        legs_spiders = spiders * 8\n        legs_ants = 64 - legs_spiders\n        if legs_ants % 6 == 0:\n            ants = legs_ants // 6\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_sent = 2\n    stamps_given = 14\n\n    stamps_initial = stamps_left + stamps_sent + stamps_given - stamps_bought\n\n    return stamps_initial\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Define the equation based on the problem description\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    # Solve the equation for x\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return difference * 100\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_money = 32\n    spent = initial_money / 2\n    remaining_money = initial_money - spent\n    return remaining_money\n    \nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's suppose the height from which the ball was dropped is h.\n    # After the first bounce, it reaches 3h.\n    # After the second bounce, it also reaches 3h because it bounces three times as high as the previous height.\n    # After the third bounce, it reaches 3h/2, since it bounces half of the height from which it dropped.\n    # After the fourth bounce, it reaches (3h/2)/2 = 3h/4.\n\n    # We know that after the fourth bounce, the height reached is 36 m.\n    # So 3h/4 = 36\n    # Solving for h, we get h = (36 * 4) / 3\n\n    h = (36 * 4) / 3\n    return h\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for d in range(10):\n        for e in {0, 5}:\n            for a in range(10):\n                for b in range(10):\n                    for c in range(10):\n                        if len({a, b, c, d, e}) == 5 and a != 0 and d % 2 == 0:\n                            num = int(f\"8{a}{b}{c}{d}{e}\")\n                            if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n                                return num\n    return None\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_full_cd = 899  # in pence since £8.99 is 899p\n\n    total_cost_separate = 12 * cost_per_song\n    savings = total_cost_separate - cost_full_cd\n\n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays = 40\n    total_eggs = eggs_per_tray * trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = i\n        reversed_num = int(str(i)[::-1])\n        result = abs(original - reversed_num)\n        results.add(result)\n        \n    return any(results)\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    paid = 20\n    change = paid - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    # We have 3 options for the first digit (1, 2, 3)\n    first_digit_options = 3\n    # We have 2 remaining options for the second digit, since it must be different from the first\n    second_digit_options = 2\n    # The total number of different two-digit numbers is the product of these options\n    total_numbers = first_digit_options * second_digit_options\n    return total_numbers\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Initial condition: Sam Sam had 40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n    \n    # After exchanges: Sam gave 20% of his stickers to Peter\n    sam_to_peter = 0.20 * sam\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_to_sam = 0.25 * (peter + sam_to_peter)\n    \n    # Final condition: In the end, Sam had 96 stickers more than Peter\n    final_condition = Eq((sam - sam_to_peter + peter_to_sam), (peter + sam_to_peter - peter_to_sam + 96))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Since we need the smallest difference, we should try to keep the first digit (of both numbers)\n    # as close as possible while still using all numbers from 0 to 9.\n\n    # Let's pick the smallest non-zero digit for the first number, which is 1.\n    # We want to minimize the first number and maximize the second one.\n\n    # For the second number, we want the smallest digit available that is not 1, which is 0.\n    # However, since a number cannot start with 0, we'll use the second smallest digit, which is 2,\n    # for the first position.\n\n    # The smallest possible number (after the first digit is set to 1) would have the digits\n    # in ascending order: 134567890.\n    # The largest possible number (after the first digit is set to 2) would have the digits\n    # in descending order but since we've already placed 2 at the beginning, \n    # our next available largest digit is 9: 298765431.\n\n    # Convert these arrangements to actual numbers\n    number1 = int(\"\".join(map(str, sorted([0, 2, 3, 4, 5, 6, 7, 8, 9]))))\n    number2 = int(\"\".join(map(str, [2] + sorted([0, 3, 4, 5, 6, 7, 8, 9], reverse=True))))\n    \n    # Calculate the difference \n    difference = number2 - number1\n\n    return difference\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # seconds\n    length = 450  # meters\n\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    ans = 1\n    for i in range(1, 11):\n        ans *= i\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) // 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    percent_concentration = (salt / total_solution) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_one_pen = pen_cost / pencil_cost\n\n    return int(pencils_for_one_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2  # Since Bala is directly behind Ali, count them as 2 people\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends cards to all other friends, so for each friend:\n    cards_sent_by_each = friends - 1\n    # Total cards sent is then:\n    total_cards = friends * cards_sent_by_each\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    ans = 1\n    while not all(ans % i == 0 for i in range(1, 7)):\n        ans += 1\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n\n    added_water = jug_capacity * number_of_jugs\n    total_water = initial_water + added_water\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_period = 9 * 3\n    cookies_second_period = 15 * 2\n    cookies_third_period = 10 * 2\n    total_days = 3 + 2 + 2\n    total_cookies = cookies_first_period + cookies_second_period + cookies_third_period\n\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guys_age = y - 3\n    return guys_age\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude and opposite in direction\n    # to the force of gravity acting on the book. This is known as Newton's third law of motion.\n    # Since the book is at rest and not accelerating, these forces must be balanced.\n    # Hence, the magnitude of the force exerted by the table is also 20N.\n\n    force_exerted_by_table = 20\n    return force_exerted_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')  # Tax rate variable over 50,000\n\n    # First 50,000 taxed at 5%\n    base_tax = 0.05 * 50000\n\n    # Amount above 50,000 taxed at (8+T)%\n    additional_tax_rate = (0.08 + T) * (140000 - 50000)\n\n    total_tax = base_tax + additional_tax_rate\n\n    # Equation representing the total tax paid\n    tax_equation = Eq(total_tax, 15100)\n\n    # Solve for T\n    solution_T = solve(tax_equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days David takes off\n    x = symbols('x')\n\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n\n    # David's work rate per day\n    david_rate = 1 / 25\n\n    # Equation for the total work done\n    equation = Eq(candy_rate * 12 + david_rate * (12 - x), 1)\n\n    # Solving for x\n    days_off = solve(equation, x)[0]\n\n    return days_off\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    num_cakes = 10\n\n    time_per_cake = time_for_6_cakes / 6\n    total_time_for_10_cakes = time_per_cake * num_cakes\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # The worst case is when Lily takes out all the balls of the other two types before she takes out 6 balls of one type.\n    # Thus, she may take all 9 basketballs and all 3 volleyballs.\n    # Because after taking out 9 basketballs and 3 volleyballs, the next ball must be a football.\n    # To ensure she gets 6 footballs, she needs to take out 5 balls (less than 6 to be sure there are not yet 6 footballs out) and then any of the next ball she takes out will be the 6th football\n    return 9 + 3 + 5 + 1  # The 1 is to get the 6th ball of the same type (football in this case)\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    mass = 2  # kg\n    height = 5.0  # m\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Using the conservation of energy principle:\n    # Potential energy at the top equals kinetic energy at the bottom\n    # m*g*h = 0.5*m*v^2\n    # 2*g*h = v^2 (mass cancels out)\n    # v = sqrt(2*g*h)\n\n    v = sqrt(2 * g * height)  # final velocity\n\n    return v\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_fruits = symbols('total_fruits')\n    # total_fruits = number of apples + number of pears\n\n    # apples were 4/5 of the total fruits\n    apples = 4/5 * total_fruits\n\n    # pears were 1/5 of the total fruits\n    pears = total_fruits - apples\n\n    # after 3/4 of the fruits were removed\n    apples_left = apples - (3/4 * total_fruits)\n    pears_left = pears - (3/4 * total_fruits)\n\n    # there were 1/8 of the apples and 30 pears left\n    equation1 = Eq(apples_left, 1/8 * apples)\n    equation2 = Eq(pears_left, 30)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (total_fruits))\n\n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    \n    total_cost = bill + tip_amount + tax_amount\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils and y be the total number of stickers\n    x, y = symbols('x y')\n\n    # Equation 1: y - 13x = 190\n    equation1 = Eq(y - 13*x, 190)\n\n    # Equation 2: y - 17x = 50\n    equation2 = Eq(y - 17*x, 50)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    total_oranges = 13\n    kids = 3\n\n    # Each kid gets at least one orange, so we start by giving each one orange\n    total_oranges -= kids\n    \n    # Now we distribute the remaining oranges in any possible way.\n    # This is a classic \"stars and bars\" problem (combinatorial problem) where we have to \n    # find the number of ways to put 'total_oranges' indistinguishable items (oranges)\n    # into 'kids' distinguishable bins (one for each kid).\n    # The formula for doing this is comb(total_oranges + kids - 1, kids - 1).\n\n    return comb(total_oranges + kids - 1, kids - 1)\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or O == 0:  # Skip if number starts with 0 as it wouldn't be a digit\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity\n    v0 = 5  # m/s\n\n    # Angle of projection\n    theta = 45  # degrees\n\n    # Convert theta to radians\n    theta_rad = math.radians(theta)\n\n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n\n    # Building height\n    h = 30  # meters\n\n    # Horizontal and vertical components of the initial velocity\n    v0x = v0 * math.cos(theta_rad)\n    v0y = v0 * math.sin(theta_rad)\n\n    # Time to reach the maximum height (symmetric motion, time to fall down is the same)\n    t_max_height = v0y / g\n\n    # Total time of flight until the arrow hits the ground\n    # Using the quadratic formula to solve: (1/2)*g*t^2 - v0y*t - h = 0\n    # We can ignore the negative root since time cannot be negative.\n    t_total = (-v0y + math.sqrt(v0y**2 + 2 * g * h)) / g\n\n    # Calculate the final vertical velocity using v = v0 + a*t\n    vy_final = v0y - g * t_total\n\n    # Final velocity (vector sum of the horizontal and final vertical components)\n    v_final = math.sqrt(v0x**2 + vy_final**2)\n\n    return v_final\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2 # sandwiches, burgers\n    drink_options = 3 # coffee, milk, tea\n    dessert_options = 4 # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    result = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return result\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_water = total_water / 2\n    water_to_transfer = equal_water - 28\n\n    return water_to_transfer\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Start with the smallest numbers and check divisibility by 11\n    # 11's divisibility rule: the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions \n    # is a multiple of 11.\n    smallest_number = 0\n    number = 10  # Start checking from the smallest two-digit number\n    while True:\n        # Convert number to string to iterate over its digits\n        str_num = str(number)\n        # Calculate digit sum\n        digit_sum = sum(int(digit) for digit in str_num)\n        # Check if digit sum is 20\n        if digit_sum == 20:\n            # Calculate the alternating sum for the divisibility rule of 11\n            odd_sum = sum(int(str_num[i]) for i in range(0, len(str_num), 2))\n            even_sum = sum(int(str_num[i]) for i in range(1, len(str_num), 2))\n            if (odd_sum - even_sum) % 11 == 0 or (even_sum - odd_sum) % 11 == 0:\n                smallest_number = number\n                break\n        # Increment number for next iteration\n        number += 1\n    return smallest_number\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.50\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the weight of each animal\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Given equations\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n    \n    # Solve the equations for the weight of each animal\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Now, find the weight comparison between 8 elephants and pigs.\n    pigs_equivalent_to_8_elephants = (8 * solutions[elephant]) / solutions[pig]\n\n    return pigs_equivalent_to_8_elephants\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000  # Initial amount borrowed\n    amount = 2519.42  # Amount owed after 3 years\n    years = 3  # The time period over which the interest is compounded\n\n    # Let r be the annual interest rate\n    r = symbols('r')\n\n    # The formula for the compounded amount: A = P * (1 + r)^n\n    # Here, A = amount, P = principal, r = interest rate, n = number of years\n    equation = Eq(principal * (1 + r)**years, amount)\n\n    # Solve for the interest rate r\n    rate = solve(equation, r)\n\n    # We return the annual interest rate as a percentage\n    annual_rate = rate[0] * 100\n\n    return float(annual_rate)\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 60 / 100 * 2 / 5 * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18\n    tax_percent = 10\n\n    tip = (tip_percent / 100) * bill\n    tax = (tax_percent / 100) * bill\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange the comic books among themselves is 4! (factorial of 4)\n    comic_arrangement = factorial(4)\n    # The number of ways to arrange the fiction books among themselves is 6! (factorial of 6)\n    fiction_arrangement = factorial(6)\n    # The number of ways to arrange the two groups (comics as one group and fictions as another) on the shelf\n    group_arrangement = factorial(2)\n    \n    # The total number of ways is the product of these possibilities\n    total_ways = comic_arrangement * fiction_arrangement * group_arrangement\n    \n    return total_ways\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # We need to place at least one singing performance between every two dancing performances.\n    # This means that at most two dancing performances can be together before a singing one.\n    \n    # Total number of singing performances\n    s = 6\n    \n    # Possible slots where a dance can be placed = s-1 (i.e., between the singing) + 1 (beginning or end)\n    slots = s + 1\n    \n    # Now we choose 4 out of these slots for the dancing performances.\n    dance_slots = factorial(slots) // (factorial(4) * factorial(slots - 4))\n    \n    # After choosing the slots, we can permute the singing and dancing performances independently.\n    sing_permutations = factorial(s)\n    dance_permutations = factorial(4)\n    \n    # The total number of ways is the product of these possibilities.\n    total_ways = dance_slots * sing_permutations * dance_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    total_ratio = 3 + 8\n    coffee_amount = 6\n    \n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n    \n    return latte_amount\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Total candies sold by Class A\n    total_candies_class_A = 3 * 12\n    # Let x be the average candies sold by each group in Class B\n    # Since there are 4 groups in Class B, the total candies sold will be 4 * x\n    # The total candies sold by Class A and Class B divided by total number of groups (3 + 4) is 8\n    # Hence, we have the equation: (total_candies_class_A + 4 * x) / (3 + 4) = 8\n\n    # Solve for x using algebra\n    x = (8 * (3 + 4) - total_candies_class_A) / 4\n\n    return x\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for Nancy to finish the job by herself\n    nancy_time = symbols('nancy_time')\n    \n    # Given that working together they finish in 10 hours, so their combined work rate is 1/10 job per hour\n    combined_rate = 1/10\n    \n    # If Lee works for 6 hours, he does 6 * his work rate, which is 6/Lee's time to finish the job\n    # Nancy works for 20 hours, so she does 20 * her work rate, which is 20/Nancy's time to finish the job\n    # Together they finish the job, so the sum of their work is 1 job\n    equation = Eq(6 * (combined_rate - 1/nancy_time) + 20/nancy_time, 1)\n    \n    # Solve the equation for Nancy's time\n    nancy_time_value = solve(equation, nancy_time)\n    \n    return nancy_time_value[0]\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_pieces = 10\n\n    remaining_string_length = total_string_length - used_string_length\n    length_per_piece = remaining_string_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences (remainder, modulus)\n    congruences = [(3, 4), (4, 5)]\n\n    # Applying the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    total = 80\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let's denote the original number of passengers as x.\n    # After the first stop, the remaining passengers are (3/5)x.\n    # After the second stop, the remaining passengers are (2/3)*(3/5)x, which is 22.\n    # Therefore, (2/3)*(3/5)x = 22 -> x = 22 / ((2/3)*(3/5))\n    remaining_after_first = 2 / 3\n    remaining_after_second = 3 / 5\n    passengers_left = 22\n\n    original_passengers = passengers_left / (remaining_after_first * remaining_after_second)\n\n    return int(original_passengers)\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    ans = comb(7, 2)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Define variables for Justin and Dora's points\n    total_points = 155\n    points_difference = 15\n    points_per_correct = 10\n    points_per_wrong = -5\n    num_questions = 10\n\n    # Hypothesis 1: Assume Dora got all answers wrong\n    # Points when Dora gets all wrong: (10 questions * -5 points)\n    dora_min_points = num_questions * points_per_wrong\n\n    # Hypothesis 2: Assume Justin got all answers correct\n    # Points when Justin gets all correct: (10 questions * 10 points)\n    justin_max_points = num_questions * points_per_correct\n\n    # With Justin having maximum and Dora minimum points, calculate the difference\n    current_diff = justin_max_points - dora_min_points\n    \n    if current_diff == points_difference:\n        # If the current difference is equal to 15, then the hypothesis is true,\n        # and Dora got all questions wrong, which means she answered 0 correctly.\n        # However, since they together got 155 points, this hypothesis can't be true.\n        # We need to adjust the number of correct answers until we find the right balance.\n        return 0\n    else:\n        # Calculate initial scores based on all wrong for Dora and all correct for Justin\n        dora_points = dora_min_points\n        justin_points = justin_max_points\n\n        # Adjust scores until the difference between their scores is 15 points\n        # and their total points is 155\n        for dora_correct in range(num_questions + 1):\n            # Update Dora's points according to the number of correct answers\n            dora_points = dora_correct * points_per_correct + (num_questions - dora_correct) * points_per_wrong\n            # Calculate Justin's points based on total points and Dora's points\n            justin_points = total_points - dora_points\n\n            # Check if the difference between Justin and Dora's points is correct\n            if justin_points - dora_points == points_difference:\n                return dora_correct\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    handshakes = comb(num_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    football_lovers = 25\n    remaining_after_badminton = symbols('remaining_after_badminton')\n    total_students = symbols('total_students')\n    \n    eq_badminton = Eq(total_students/4 + 3 + remaining_after_badminton, total_students)\n    eq_table_tennis = Eq(remaining_after_badminton * (1/3) - 3, football_lovers)\n    \n    solutions = solve((eq_badminton, eq_table_tennis), (remaining_after_badminton, total_students))\n    return solutions[total_students]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    total_green = 10\n    total_red = 5\n    target_probability = 1 / 3\n    required_red_balls = 0\n    \n    while True:\n        probability = total_green / (total_green + total_red + required_red_balls)\n        if probability == target_probability:\n            break\n        required_red_balls += 1\n    \n    return required_red_balls\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    \n    num_small_squares = (large_square_side // small_square_side) ** 2\n\n    return num_small_squares\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for chocolates\n    white, milk, dark = symbols('white milk dark')\n\n    # Equations based on the problem statement\n    ratio_eq = Eq(white / milk, 3 / 7)\n    ratio_eq2 = Eq(milk / dark, 7 / 5)\n    difference_eq = Eq(dark - white, 8)\n    \n    # Solving the equations\n    solutions = solve((ratio_eq, ratio_eq2, difference_eq), (white, milk, dark))\n\n    # Getting the number of milk chocolates\n    return solutions[milk]\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meter_to_centimeter = 100  # 1 meter is equal to 100 centimeters\n    meters = 70.24\n    centimeters = meters * meter_to_centimeter\n    return centimeters\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # Avril spends 5p which is one-quarter of her money.\n    # So if 5p is one quarter, then all her money is 4 times that amount.\n    avril_total_money = 5 * 4\n    return avril_total_money\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Peter and Sam have initially\n    peter, sam = symbols('peter sam')\n\n    # Create equation based on the problem statement\n    equation1 = Eq(sam, peter + 40)  # Sam has 40 more stickers than Peter initially\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.25 * peter + 96)  # After giving stickers to each other\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_6_upto_n(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n    \n    page = 1\n    while True:\n        if count_6_upto_n(page) == 18:\n            break\n        page += 1\n    \n    return page\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a number raised to a power cycles in a pattern\n    # For 32, the pattern of the ones digit is 2, 4, 8, 6 and repeats every 4 powers\n    # So we will find the ones digit of 32^33 by finding the ones digit of 2^33\n    two_power_cycle = [2, 4, 8, 6]\n    ones_digit_32_pow_33 = two_power_cycle[(33 - 1) % 4]\n\n    # Similarly, the pattern for 22 is the same as for 2 since 2 is the ones digit of 22\n    # We'll find the ones digit of 22^29 by finding the ones digit of 2^29\n    ones_digit_22_pow_29 = two_power_cycle[(29 - 1) % 4]\n\n    # Now, we subtract the ones digit of 22^29 from the ones digit of 32^33\n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Using cross-multiplication to find the missing number\n    missing_number = 81 * 4 / 9\n\n    return int(missing_number)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    current_height = 0\n    \n    while True:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= total_height:\n            break\n        if jumps % 2 == 0:\n            current_height -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((n**3) / (n * (n + 1) * (n + 2)) for n in range(1, 2013))\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    difference = 21 - 15  # common difference in the arithmetic sequence\n    last_term = 39  # the last term given in the sequence\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    \n    cans_in_9_days = (cans_in_6_days / 6) * days\n    \n    return cans_in_9_days\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = [n for n in range(1, 100) if n % 16 == 0 and (n + 1) % 5 == 0 and (int(n**0.5))**2 == n]\n    return ans[0]\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_or_unanswered_mark = -2\n    total_marks = 152\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of wrong or unanswered questions\n    # Equation: correct_mark*x + wrong_or_unanswered_mark*(total_questions - x) = total_marks\n    \n    # Now solve for x\n    x = (total_marks + wrong_or_unanswered_mark*total_questions) / (correct_mark + abs(wrong_or_unanswered_mark))\n    return int(x)\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Each person should get 16 / 24 sausages, which simplifies to 2 / 3 of a sausage.\n    # Therefore, to distribute sausages equally, we think in terms of thirds.\n    # For each sausage, we are cutting it into three equal parts, which requires 2 cuts.\n    # Since we need to cut 16 sausages, the total cuts required are 16 sausages * 2 cuts per sausage.\n    \n    cuts_per_sausage = 2\n    num_sausages = 16\n    \n    total_cuts = num_sausages * cuts_per_sausage\n    \n    return total_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('RAINBOW')\n    vowel_count = 3\n    consonant_count = total_letters - vowel_count\n\n    # Total permutations\n    total_permutations = factorial(total_letters)\n\n    # Permutations with vowels always together\n    vowels_together = factorial(vowel_count) * factorial(consonant_count + 1)\n\n    # Subtract to find the number of permutations where vowels are never together\n    permutations_with_vowels_never_together = total_permutations - vowels_together\n\n    return permutations_with_vowels_never_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_future_age = solutions[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_initial, B_initial = symbols('A_initial B_initial')\n    \n    # Equation 1: A contains 350mL more water than B\n    equation1 = Eq(A_initial, B_initial + 350)\n    \n    # Equation 2: After spilling 500 mL, B has twice as much water as A\n    equation2 = Eq(B_initial, 2 * (A_initial - 500))\n\n    # Solve the equations for A_initial\n    solutions = solve((equation1, equation2), (A_initial, B_initial))\n\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3/8\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    # The numbers have the same remainder when divided by the integer we're looking for\n    # This means that the differences between the numbers will be divisible by that integer\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n    \n    # The integer we are looking for is the greatest common divisor of the differences\n    ans = gcd(gcd(diff1, diff2), diff3)\n    \n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 326):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle said 3 sentences to each of the other team members.\n    # If there are 'n' team members total (including Lovelle), she said 3 sentences to each of the n-1 members.\n    # There are 12 members who did not speak to Lovelle, so Lovelle spoke to n-1-12 members.\n    # The number of sentences Lovelle said is therefore 3 times the number of people she spoke to,\n    # which must also equal 3 times the number of team members she did not speak to (5 others plus herself).\n    # Therefore, we can create the following equation:\n    # 3 * (n-1-12) = 3 * 6\n    \n    # Simplifying, we get:\n    # 3n - 3 - 36 = 18\n    # 3n - 39 = 18\n    # 3n = 57\n    # n = 19\n    \n    # Lovelle and the 5 others who she spoke to, plus the 12 who did not speak to her,\n    # gives us a total of 19 team members.\n    \n    return 19\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_valid_permutations(word):\n    count = 0\n    for perm in set(permutations(word)):\n        perm_str = ''.join(perm)\n        if 'TT' not in perm_str:\n            count += 1\n    return count\n\ndef solution():\n    word = \"STATISTIC\"\n    total_permutations = factorial(len(word))\n    total_t_permutations = factorial(word.count('T'))\n    without_restriction = total_permutations // total_t_permutations\n    \n    return count_valid_permutations(word) - count_valid_permutations(word.replace('T', ''))\n    \nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n    \n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    avg_pieces_per_hour = 50\n    hours_needed = total_pieces / avg_pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number_to_round = 418\n    ans = round(number_to_round, -1)\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 1000): # search for a sensible upper bound\n        if (gums - 2) % 3 == 0: # condition for one third sharing\n            remaining_after_share = (gums - 2) * 2 // 3\n            if remaining_after_share % 4 == 0: # condition for equal amount in each of the next four lessons\n                return gums\n                \nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    # Equation 1: Sarah had $20 more Pokemon cards than Mark\n    equation1 = Eq(sarah, mark + 20)\n    # Equation 2: After buying 16 cards, Sarah had 3 times more cards than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    # Sarah's number of cards before buying new ones\n    return solutions[sarah]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) / 8\n    return result\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    return sum(i**2 for i in range(1, 26, 2))\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # observing the pattern, it looks like the sequence is increasing by 500, \n    # then decreasing by 200 in a repeating cycle\n    pattern = [2945, 3445, 3245, 3745]\n    missing_number = pattern[-1] + 500 - 200  # increase by 500 then decrease by 200\n    return missing_number\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # Each chest can only be opened by one key.\n    # For the first chest, the explorer needs to try at most 9 keys.\n    # For the second chest, the explorer may need to try at most 8 keys (since one has been used on the first chest).\n    # For the third chest, the explorer may need to try at most 7 keys, and so on.\n    # Summing these up gives us the maximum number of attempts needed.\n    max_attempts = 9 + 8 + 7 + 6\n\n    return max_attempts\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    # Start from the largest two-digit number and go backward\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    # The equation is 2h = 25 + h\n    # We need to isolate h, let's move h from the right side to the left side\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    # Solve for h\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    extra_mushrooms_first_hour = 26\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # Then the number of mushrooms gathered in the second hour is 40 - x\n    # If he gathered 26 more mushrooms in the first hour, he would have gathered x + 26 mushrooms\n    # According to the problem, x + 26 = 40 - x\n    # Solving the equation for x:\n    x = (total_mushrooms + extra_mushrooms_first_hour) / 2  # The mushrooms gathered in the first hour\n\n    # The number of mushrooms gathered in the second hour:\n    mushrooms_second_hour = total_mushrooms - x\n\n    return int(mushrooms_second_hour)\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n    remaining_value_fraction = (1 - depreciation_rate) ** years\n\n    value_after_years = initial_value * remaining_value_fraction\n\n    return value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for men and women\n    men = symbols('men')\n    women = 4 * men  # 4 times as many women as men\n\n    # Equation based on the problem statement\n    total_cupcakes = Eq(2 * women + 5 * men, 182)\n\n    # Solve for number of men\n    men_count = solve(total_cupcakes, men)[0]\n    # Calculate number of women\n    women_count = 4 * men_count\n\n    return women_count\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85\n    num_coins = 11\n\n    total_length = (num_coins - 1) * coin_diameter + coin_diameter\n\n    return total_length\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 / (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    n = 14\n    a1 = 5\n    a2 = 8\n    d = a2 - a1\n\n    an = a1 + (n-1)*d\n    sum_seq = (n * (a1 + an)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    # When people sit around a circular table, one person's position is fixed to break the symmetry.\n    # Then, the remaining (n-1) people can be arranged in any order.\n    # For 8 people, it's the factorial of 7 since we fix one person's position.\n    num_people = 8\n    num_ways = factorial(num_people - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2_power = pow(2, 2017, 10)\n    last_digit_3_power = pow(3, 2017, 10)\n    ans = (last_digit_2_power * last_digit_3_power) % 10\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_ants = symbols('initial_ants')\n\n    equation = Eq((1 - 3/4) * (1 - 2/5) * initial_ants + 185, 2 * initial_ants)\n\n    ans = solve(equation, initial_ants)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    difference_in_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_cost * (books_day1 + books_day2)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8 # n is the position of the next number in the sequence\n    next_number = n**2 # the sequence of square numbers is n squared\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(n):\n        n = n * 2 + 4\n        if n >= 100:\n            n = n % 100\n        return n\n        \n    current_number = 1\n    for _ in range(2021):\n        current_number = next_number(current_number)\n    \n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "from math import gcd\n\ndef solution():\n    red_flash_rate = 4\n    green_flash_rate = 6\n    minutes_in_an_hour = 60\n\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n    flashes_same_instant_per_minute = lcm // min(red_flash_rate, green_flash_rate)\n\n    total_flashes_same_instant = flashes_same_instant_per_minute * minutes_in_an_hour\n\n    return total_flashes_same_instant\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 41))  # primes under 41\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    first_term, common_difference = symbols('first_term common_difference')\n    \n    # Sum of the first four terms: S4 = 1/2 * 4 * (2*first_term + 3*common_difference)\n    sum_first_four = 2 * (first_term + (first_term + 3 * common_difference))\n    \n    # Sum of the last four terms: S8-S4\n    sum_last_four = 2 * ((first_term + 7 * common_difference) + (first_term + 4 * common_difference))\n    \n    # Setting up the equation according to the condition given\n    equation = Eq(sum_last_four - sum_first_four, 32)\n    \n    # Solving the equation for the common difference\n    common_diff_solution = solve(equation, common_difference)\n    \n    return common_diff_solution[0]\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    ans = (4.5 + 10.3) / 2\n    return ans\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percentage = 30\n    \n    cost_price = sale_price / (1 + profit_percentage / 100)\n    \n    desired_profit = 5000\n    \n    desired_profit_percentage = (desired_profit / cost_price) * 100\n\n    return desired_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n    \n    return solutions[1]  # Since we want the positive solution\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    juice = 120\n    drink_portion_as_water = 3/5\n    total_drink = juice / (1 - drink_portion_as_water)\n    water = total_drink - juice\n    water_for_six_bottles = water * 6\n\n    return water_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(5)\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):  # 5 digits each has to be different\n        s, e, n, d, m, o, r, y = p\n        if s == 0 or m == 0:  # Leading digit can't be 0\n            continue\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        money = m * 10000 + o * 1000 + n * 100 + e * 10 + y\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 7  # 2 bells + 2 stars + 2 red balls + 1 green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n    \n    # The number of different ways to string the decorations\n    ways = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    \n    return ways\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    times = [1, 2, 5, 10]  # Time each person takes to cross\n    total_time = 0\n\n    # 1. The two fastest cross together\n    # Eddie(1) and Jack(2) cross: 2 minutes\n    total_time += times[1]\n    # Jack returns with the flashlight: 2 minutes, total 4\n    total_time += times[1]\n    # 2. The two slowest cross together\n    # Rose(5) and Mary(10) cross: 10 minutes, total 14\n    total_time += times[3]\n    # Eddie returns with the flashlight: 1 minute, total 15\n    total_time += times[0]\n    # 3. The two fastest cross again to finish\n    # Eddie(1) and Jack(2) cross: 2 minutes, total 17\n    total_time += times[1]\n\n    return total_time\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Initial walking time for both Simon and friend\n    walk_time = 10\n\n    # Simon's initial walking speed and running speed\n    simon_walk_speed = 150  # feet per minute\n    simon_run_speed = 2 * simon_walk_speed  # twice of walking speed\n\n    # Friend's walking speed\n    friend_walk_speed = 200  # feet per minute\n\n    # Distance Simon walked initially and ran back\n    simon_walk_distance = simon_walk_speed * walk_time\n    # Time taken by Simon to run back to school\n    simon_run_time = simon_walk_distance / simon_run_speed\n    # Distance friend walked in total\n    friend_walk_distance = friend_walk_speed * (walk_time + simon_run_time)\n\n    # Distance between Simon and his friend when Simon is at school\n    distance_between = friend_walk_distance\n\n    return distance_between\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7 - 7\n    return n\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Litres\n    container_ratio = 0.25\n    cup_volume_ml = 150  # ml\n    number_of_cups = 14\n    ml_to_litres = 1 / 1000  # 1 litre = 1000 ml\n\n    container_volume = initial_volume * container_ratio\n    cups_volume_litres = (cup_volume_ml * number_of_cups) * ml_to_litres\n\n    water_left = initial_volume - (container_volume + cups_volume_litres)\n\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # Number of friends\n    n = 7\n\n    # Using the principle of Inclusion-Exclusion\n    def fact(n):\n        return 1 if n == 0 else n * fact(n - 1)\n    \n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # Recursively use the derangement formula D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    # The number of ways to seat the friends such that no one is in their personal chair (Derangements)\n    ans = derangement(n)\n    \n    return ans\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    harry_time = 24\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # For a number to be divisible by 99, it has to be divisible by both 9 and 11.\n    # Divisibility rule for 9: The sum of the digits must be a multiple of 9.\n    # Divisibility rule for 11: The difference between the sum of digits at odd places\n    # and the sum of digits at even places must be either 0 or a multiple of 11.\n    \n    # Given number template: 2?_?335. '_' is for unknown digits.\n    \n    # Applying the rule for 9:\n    # Let the two missing digits be a and b:\n    # Therefore, 2 + a + b + 3 + 3 + 5 should be multiple of 9.\n    fixed_sum = 2 + 3 + 3 + 5  # This is the sum of known digits\n    remainder_sum = fixed_sum % 9\n    pair_sum = 9 - remainder_sum  # The sum that a+b should make to be a multiple of 9.\n    if pair_sum == 9:  # If remainder is 0, a+b should also be 9 or 0 (a+b can't be 0 in this case).\n        pair_sum = 0  # So we choose 9 for a+b.\n\n    # Applying the rule for 11:\n    # The difference between the sum of digits at odd places\n    # and the sum of digits at even places should be 0 or a multiple of 11.\n    # Odd indexed sum (1-indexed): 2 + b + 5 = 7 + b\n    # Even indexed sum: a + 3 + 3 = a + 6\n    # Hence, (7 + b) - (a + 6) = b - a - (-1) \n    # It must be 0 or divisible by 11 for the number to be divisible by 11.\n    \n    # Find the pairs (a, b) where a+b = pair_sum, and b - a = +/- 1, +/- 11, ...\n    correct_number = ''\n    for a in range(0, 10):\n        for b in range(0, 10):\n            if (a + b == pair_sum) and ((b - a == 1) or (a - b == 1) or (b - a == 11) or (a - b == 11)):\n                correct_number = f'2{a}{b}335'\n\n    return int(correct_number)\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let x be the number of pages Anny writes per day\n    # Thus, Anny can finish x*8 pages in 8 days\n    # If she writes (x + 2) pages per day, she can finish in 6 days\n    # Which means she can finish (x + 2)*6 pages in 6 days\n    # Therefore, we have the equation: x*8 = (x + 2)*6\n    # Solving for x gives us the number of pages Anny writes each day originally\n    # Finally, the total number of pages is x*8\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x * 8, (x + 2) * 6)\n    x_value = solve(equation, x)[0]\n    total_pages = x_value * 8\n\n    return total_pages\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking bread is 5 loaves / 20 minutes\n    pip_rate = 5 / 20\n    \n    # Bud's rate of baking bread is 3 loaves / 15 minutes\n    bud_rate = 3 / 15\n    \n    # Calculate how many loaves they each bake in 40 minutes\n    loaves_pip = pip_rate * 40\n    loaves_bud = bud_rate * 40\n    \n    # Total number of loaves baked by both Pip and Bud in 40 minutes\n    total_loaves = loaves_pip + loaves_bud\n    \n    return total_loaves\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12*a)/4 + (2*a)*5\n    simplified_expr = simplify(expression)\n\n    return simplified_expr\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The increase in value is 10%, and the new value is 11,000 after increase\n    # Let x be the original price. Therefore, x * 1.10 = 11,000\n    increased_value = 11000\n    increase_percentage = 0.10\n    original_price = increased_value / (1 + increase_percentage)\n\n    # In the second year, the house loses 10% of its value\n    decrease_percentage = 0.10\n    decreased_value = original_price * (1 - decrease_percentage)\n\n    # The profit or loss comparing with the original price\n    profit_or_loss = decreased_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n    simplified_expression = simplify(expression)\n    \n    return simplified_expression\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # If Yohan takes out one of each of the other two colors first,\n    # he could end up with each of the 10 white socks being the last to be picked.\n    # Therefore, the maximum socks Yohan needs to take to ensure a pair of white socks is:\n    max_red_socks = 10  # all red socks\n    max_black_socks = 10  # all black socks\n    at_least_one_white_sock = 1  # one white to make sure the next one is a pair\n    \n    # Total amount of socks taken to ensure a pair of white socks\n    ans = max_red_socks + max_black_socks + at_least_one_white_sock\n    return ans\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for number in range(1, 10):\n        sequence.extend([number] * (number + 2))\n    \n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        ans = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        ans = sequence[median_index]\n    \n    return ans\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Add 3 to the number, multiply by 5, and the result is 35\n    # Let's use algebra to solve the inverse operation\n    # (number + 3) * 5 = 35\n    # number + 3 = 35 / 5\n    # number = (35 / 5) - 3\n    \n    number = (35 / 5) - 3\n    return number\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies = symbols('cookies')\n    \n    # Define the equation based on what was eaten and what remains\n    equation = Eq((3/8 + 1/6) * cookies + 33, cookies)\n    \n    # Solve the equation to find the original number of cookies\n    original_cookies = solve(equation, cookies)\n    \n    return original_cookies[0]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n    ans = barrel_volume // bucket_volume\n    return ans\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 5)  # May 5th, which is a Monday\n    end_date = datetime(2023, 6, 7)    # June 7th\n    current_date = start_date\n\n    sundays_count = 0\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1 / 4\n    left_handed = total_pupils * left_handed_fraction\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    packets = 25\n    \n    flour_per_packet = total_flour / packets\n    \n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the initial number of red marbles and y be the initial number of white marbles.\n    # Let p be the number of red marbles Pip adds, and b be the number of white marbles Bud adds.\n    x, y, p, b = symbols('x y p b')\n\n    # From the first ratio, we have 3/2 = x/y\n    equation1 = Eq(3*y, 2*x)\n    # After Pip adds red balls, the ratio becomes 5/3 = (x+p)/y\n    equation2 = Eq(5*y, 3*(x + p))\n    # After Bud adds white balls, the ratio becomes 5/4 = (x+p)/(y+b)\n    equation3 = Eq(5*(y + b), 4*(x + p))\n    # Bud puts 100 more balls than Pip: b = p + 100\n    equation4 = Eq(b, p + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, p, b))\n\n    # Return the initial amount of white balls\n    return solutions[y]\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # The businessman's initial expense to buy the horse\n    initial_purchase = 10\n    \n    # He sells the horse at a profit\n    first_sale_profit = 20 - initial_purchase\n    \n    # He buys the horse back at a higher price\n    buyback_cost = 30\n    \n    # He sells the horse again at a higher price\n    second_sale_profit = 40 - buyback_cost\n    \n    # The businessman's total earnings\n    total_earnings = first_sale_profit + second_sale_profit\n    \n    return total_earnings\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let cookies be represented by c and brownies by b\n    c, b = symbols('c b')\n\n    # Initial ratio condition 4:3 => 4b = 3c\n    initial_ratio = Eq(4 * b, 3 * c)\n    \n    # After giving away 6 brownies the ratio becomes 12:7 => 12(b - 6) = 7c\n    new_ratio = Eq(12 * (b - 6), 7 * c)\n\n    # Solve the system of equations\n    solution = solve((initial_ratio, new_ratio), (c, b))\n    \n    cookies_baked = solution[c]\n    brownies_baked = solution[b]\n\n    # Mama Bear baked cookies and brownies altogether\n    total_baked = cookies_baked + brownies_baked\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    total_workers = 4  # 4 construction companies\n    total_days = 5     # Can build 900m expressway in 5 days\n    work_rate = total_workers / total_days  # Work rate of current workers\n\n    new_length = 5400  # New expressway length\n    new_workers = 6    # 6 construction companies\n\n    # Work = workers x rate x time\n    # Total work done is proportionate to the length of the expressway\n    total_work_old = total_workers * total_days * 900\n    total_work_new = new_length\n\n    # The new time would be total work divided by the work rate of the new number of workers\n    days_required = total_work_new / (work_rate * new_workers)\n\n    return days_required\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam spends 93 pounds for 6 tickets, so the price per ticket is:\n    price_per_ticket = 93 / 6\n    # Claire spends 124 pounds, so the number of tickets she can buy is:\n    tickets_for_claire = 124 / price_per_ticket\n    # Return the number of tickets Claire buys as an integer\n    return int(tickets_for_claire)\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, each pair has 2 shoes\n    time_per_shoe = 2  # minutes to clean one shoe\n\n    # Since there are two cobblers, they can work together to clean the shoes.\n    # So, the shortest time to clean all the shoes is the total time needed to clean all shoes divided by 2 cobblers.\n    shortest_time = (total_shoes * time_per_shoe) / 2\n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, n+1)) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    highest_card = 0\n    player_one_sum = 23\n    all_cards = set(range(1, 9))  # Cards are numbered from 1 to 8\n    for card1 in all_cards:\n        for card2 in all_cards - {card1}:\n            for card3 in all_cards - {card1, card2}:\n                for card4 in all_cards - {card1, card2, card3}:\n                    if card1 + card2 + card3 + card4 == player_one_sum:\n                        player_two_cards = all_cards - {card1, card2, card3, card4}\n                        player_two_highest = max(player_two_cards)\n                        highest_card = max(highest_card, player_two_highest)\n    return highest_card\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    num_packets = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return num_packets\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    # We want to find the number of ways to choose 2 people out of 6 for a handshake, which is a combination\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n\n    return three_quarters\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    total_score = 168\n    correct_answer_score = 4\n    wrong_answer_score = -1\n    answered_questions = total_questions - unanswered_questions\n\n    for correct_answers in range(0, answered_questions + 1):\n        wrong_answers = answered_questions - correct_answers\n        score = correct_answers * correct_answer_score + wrong_answers * wrong_answer_score\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    # Find the least common multiple of marker pack sizes\n    from math import lcm\n    num_markers = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of markers needed, at least 1000\n    count = num_markers\n    while count < 1000:\n        count += num_markers\n\n    return count\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if (C * 1001 + B * 1010) + (C * 1010 + D * 100) == B * 1000 + D * 100 + E * 10 + C:\n            return B * 1000 + D * 100 + E * 10 + C\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_tailors = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_tailors * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Calculate factorial of n\n    def fact(n):\n        return factorial(n)\n\n    # Total number of arrangements without restriction\n    total_letters = 9  # C, H, A, L, L, E, N, G, E\n    repeats = {'L': 2, 'E': 2}\n    total_arrangements = fact(total_letters)\n\n    # Divide by the number of repeats for L and E\n    for letter, repeat in repeats.items():\n        total_arrangements //= fact(repeat)\n\n    # Treat the vowels A, E and E as one unit: 'AEE'.\n    # Since the two E's are indistinguishable, we divide by 2! once more.\n    vowel_arrangements = fact(3) // fact(2)\n\n    # The 'AEE' unit, along with the other 6 distinct consonants,\n    # make a total of 7 units that can be rearranged.\n    units_arrangements = fact(7)\n\n    # Multiply the two values together:\n    # - different orders in which the 7 units (AEE + 6 consonants) can be arranged\n    # - different orders the vowels can be arranged within the AEE unit\n    ans = units_arrangements * vowel_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Average expenses for different periods\n    jan_to_mar_average = 450\n    apr_to_jul_average = 350\n    aug_to_oct_total = 1250\n    nov_to_dec_average = 400\n\n    # calculate total expense for each period\n    jan_to_mar_total = jan_to_mar_average * 3\n    apr_to_jul_total = apr_to_jul_average * 4\n    nov_to_dec_total = nov_to_dec_average * 2\n\n    # calculate the total expense for the year\n    total_expense = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n\n    # calculate the average for the whole year\n    average_expense = total_expense / 12\n\n    return average_expense\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Since the divisor is equal to the quotient and we are looking for the least dividend,\n    # we can start with the smallest possible quotient, which is 1.\n    # However, since there is a remainder of 7, the smallest possible divisor (also the quotient in this case)\n    # cannot be 1, as the dividend must be larger than the remainder.\n    # Thus, the next possible quotient (and divisor) is 2.\n    quotient = divisor = 2\n    \n    # Calculate the dividend using the formula: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    \n    # Check to see if there are any smaller dividends which also satisfy the condition\n    while True:\n        # Try the next smallest possible quotient/divisor\n        quotient += 1\n        divisor = quotient\n        # Calculate possible new dividend\n        new_dividend = divisor * quotient + remainder\n        if new_dividend > dividend:\n            # If the calculated dividend is larger than the previously found one,\n            # we have found the least dividend, exit loop\n            break\n        else:\n            # Otherwise, update the least dividend\n            dividend = new_dividend\n            \n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, Integer\n\n    # Define the variables for cars, bikes, and lorries\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    \n    # Create the equations based on the given relationships\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    \n    # Setting the constraint for the total number being even and less than 100\n    for total in range(2, 100, 2):  # Increment by 2 for even numbers\n        equation3 = Eq(cars + bikes + lorries, total)\n\n        # Solve the system of equations\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        \n        # Ensure the solutions are all positive integers\n        if solutions and all(isinstance(value, Integer) and value > 0 for value in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    row_number = 12\n\n    # Calculate the number of seats in the 12th row using arithmetic progression formula:\n    # nth_term = first_term + (n - 1) * difference\n    nth_term = first_term + (row_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        if (245 * p) ** (1/3) % 1 == 0:\n            break\n        p += 1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # With one entrance, no line in 16 min\n    one_entrance_no_line = 16 \n\n    # Calculate total visitors in 16 min\n    total_visitors = one_entrance_no_line * visitors_per_minute\n\n    # Calculate time for no line with two entrances\n    two_entrances = total_visitors / (check_in_per_entrance * 2)\n\n    return two_entrances\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    # Correct calculation using the difference of squares formula\n    ans = (6 ** 2) - (4 ** 2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_percentage = 10\n    dvd_percentage = 20\n\n    money_spent_on_book = initial_amount * (book_percentage / 100)    \n    money_left_after_book = initial_amount - money_spent_on_book\n    \n    money_spent_on_dvd = money_left_after_book * (dvd_percentage / 100)    \n    money_left_after_dvd = money_left_after_book - money_spent_on_dvd\n    \n    return money_left_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # 1 divided by 3 gives 0.3333... (recurring decimal)\n    # so the first 1000 digits in the decimal part are all 3\n    digit_sum = 3 * 1000\n    return digit_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < 16:\n        day_count += 1   # the snail starts climbing this day\n        total_climbed += 5   # the snail climbs 5 meters\n\n        if total_climbed >= 16:\n            break   # the snail has reached the top of the burrow\n        total_climbed -= 3   # the snail slides down 3 meters at night\n\n    return day_count\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    \n    original_number_doubled = final_number - added_number\n    original_number = original_number_doubled / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    initial_ratio = Eq(oranges / lemons, 3/5)\n    final_ratio = Eq((oranges - 48) / lemons, 1/2)\n\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits and thus 7 non-empty subsets of choices (excluding the option of no fruit):\n    # 1. Apple only\n    # 2. Pear only\n    # 3. Cherry only\n    # 4. Apple & Pear\n    # 5. Apple & Cherry\n    # 6. Pear & Cherry\n    # 7. Apple, Pear & Cherry\n    \n    # By the Pigeonhole Principle, to ensure at least two students choose the same combination of fruits,\n    # we need one more than the number of possible combinations, which is 7.\n    \n    num_students = 7 + 1 # One more student to guarantee a match\n    \n    return num_students\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 0.10  # 10% discount\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n    \n    ans = burgers * sides * drinks\n    return ans\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent which is one-quarter of the initial amount\n    initial_amount = spent * 4  # Multiply by 4 to find the full amount\n    return initial_amount\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    students_A = 45\n    students_B = 75\n    students_C = 210\n\n    # Compute the greatest common divisor of all three numbers\n    ans = gcd(gcd(students_A, students_B), students_C)\n\n    return ans\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    num_teams = 11\n    # Each match involves two teams, so find combinations of 2 out of 11 teams\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(x-1), 9-2*(x+1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Define the number of legs for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n    \n    # Number of each animal\n    num_ducks = 3\n    num_parrots = 2\n    num_rabbits = 1\n    \n    # Total legs for the given animals (excluding cats)\n    total_given_legs = (num_ducks * duck_legs) + (num_parrots * parrot_legs) + (num_rabbits * rabbit_legs)\n    \n    # Total legs including cats\n    total_legs = 32\n    \n    # Since cats have 4 legs each, the number of cats can be found by subtracting the given legs from total legs\n    # and dividing by the number of legs per cat\n    num_cats = (total_legs - total_given_legs) // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    \n    # Judy's father is 33 years older than her\n    equation1 = Eq(father_age, judy_age + 33)\n    \n    # This year, the sum of their ages is 63 years.\n    equation2 = Eq(judy_age + father_age, 63)\n    \n    # Solve for current ages\n    present_ages = solve((equation1, equation2), (judy_age, father_age))\n    \n    # Find how many years ago her father's age was four times her age\n    equation3 = Eq(present_ages[father_age] - years_ago, 4 * (present_ages[judy_age] - years_ago))\n    \n    # Solve for the number of years ago\n    years_ago_solution = solve(equation3, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from sympy import lcm\n\n    # Find the Least Common Multiple (LCM) of the multiples\n    lcm_value = lcm([6, 8, 9, 15])\n\n    # Find the minimum number of markers that is more than 1000 and a multiple of the LCM\n    num_markers = (1000 // lcm_value) * lcm_value\n    if num_markers < 1000:\n        num_markers += lcm_value\n\n    return num_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # Equation when 4 people per room\n    equation1 = Eq(4 * rooms - 40, 0)\n    # Equation when 6 people per room\n    equation2 = Eq(6 * rooms + 24, 0)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (rooms,))\n    \n    return solutions[rooms]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # When the older brother was the younger brother's current age, the younger brother was 12 years old.\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27 years old.\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    first_term = tenth_term - (10 - 1) * common_difference\n\n    hundred_second_term = first_term + (102 - 1) * common_difference\n\n    return hundred_second_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    # Jane's current age\n    jane_age = 9\n    # John's current age\n    john_age = 5\n    # The number of years it will take for Jane to be 15\n    years_until_jane_15 = 15 - jane_age\n    # John's age when Jane is 15\n    john_age_when_jane_15 = john_age + years_until_jane_15\n    \n    return john_age_when_jane_15\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = (7 + 3) * 11 - (7 + (3 * 11))\n    return result\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    total_time_xy = 6\n    time_x = 10\n\n    rate_x = 1 / time_x\n    rate_xy = 1 / total_time_xy\n\n    rate_y = rate_xy - rate_x\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n    \n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n    \n    return total_students\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price, marked_price, selling_price, loss = symbols('cost_price marked_price selling_price loss')\n    \n    equation1 = Eq(marked_price, cost_price * 1.20)  # marked at 20% above the cost price\n    equation2 = Eq(selling_price, marked_price * 0.80)  # sold at 80% of the selling price\n    equation3 = Eq(loss, cost_price - selling_price)  # loss definition\n    equation4 = Eq(loss, 40)  # loss was $40\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (cost_price, marked_price, selling_price, loss))\n    \n    return solutions[cost_price]\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    # Equation representing the total number of markers they had originally\n    total_markers = Eq(xuanrui + yaokuan, 708)\n\n    # Equation representing the number of markers each had after the respective transactions\n    markers_left = Eq(xuanrui - 532, yaokuan - (3 / 7) * yaokuan)\n\n    # Solve the system of equations\n    solutions = solve((total_markers, markers_left), (xuanrui, yaokuan))\n\n    # Extract the solution for the number of markers Xuanrui had originally\n    xuanrui_markers = solutions[xuanrui]\n\n    return xuanrui_markers\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount = 0.12\n    discounted_price = usual_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([1, 2, 6, 24, 120, 720, 5040, 40320])\n    last_two_digits = factorial_sum % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_A = 300\n    concentration_A = 0.20\n    sugar_A = volume_A * concentration_A\n    \n    volume_B = 300\n    concentration_B = 0.30\n    sugar_B = volume_B * concentration_B\n    \n    total_sugar = sugar_A + sugar_B\n    total_volume = volume_A + volume_B\n    \n    concentration_mixture = total_sugar / total_volume\n    \n    return concentration_mixture\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    correct_points = 6\n    incorrect_points = -2\n    total_questions = 10\n    total_points = 44\n    \n    # Assume all answers are correct first\n    total_correct = total_points / correct_points\n\n    # The number of incorrect answers is total_questions - number of correct answers\n    # Each incorrect answer reduces the score from what it would be if the answer had been correct\n    # by correct_points - incorrect_points (i.e., 6 - (-2) = 8 points)\n    # Therefore, we can find the number of incorrect answers by dividing the score difference by the point difference.\n\n    score_difference = total_correct * correct_points - total_points\n    point_difference = correct_points - incorrect_points\n\n    # Now find the number of incorrect answers\n    incorrect_answers = score_difference / point_difference\n\n    # Finally, we find the number of correct answers\n    correct_answers = total_questions - incorrect_answers\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.5\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_twos = 175\n    # Let x be the number of original $2 notes, then (total_notes - x) is the number of $10 notes\n    # When exchanging $10 notes to $2 notes, we add 4 additional $2 notes for each $10 note\n    # Then the final number of $2 notes is x + 4 * (total_notes - x)\n    for x in range(total_notes + 1):\n        if x + 4 * (total_notes - x) == final_twos:\n            return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    train_length = 540\n    head_length = 10\n    carriage_length = 27\n    distance_between_carriages = 1\n    \n    carriages = (train_length - head_length) // (carriage_length + distance_between_carriages)\n    carriages += 1  # Including the head of the train\n    \n    return carriages\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Equation representing the total marbles\n    total_marbles_eq = Eq(ahmad + ryan, 1442)\n\n    # Equation representing Ahmad's marble count being 6 times Ryan's\n    ahmad_marbles_eq = Eq(ahmad, 6 * ryan)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, ahmad_marbles_eq), (ahmad, ryan))\n\n    # Calculate how many marbles Ahmad must give to Ryan for them to have equal amounts\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # ones place - There are 29 instances plus the number 288 itself\n    ones_place = (288 // 10) + 1\n    # tens place - There are 20 instances from 80 to 89 \n    # plus another 10 from 180 to 189, and one for 288\n    tens_place = (2 * 10) + 1\n    # hundreds place - The digit '8' does not appear in the hundreds place as it only goes up to 200\n\n    # Number of times the digit '8' appears\n    count = ones_place + tens_place\n\n    return count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    correct = symbols('correct')\n    incorrect = 50 - correct\n    \n    score = correct * 2 - incorrect * 1\n    equation = Eq(score, 82)\n    \n    correct_ans = solve((equation), (correct))\n    \n    # Since Shenjia claims to have answered 32 questions correctly, we validate it\n    if correct_ans[0] != 32:\n        return correct_ans[0]\n    else:\n        return 32\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    # We will solve this using a simple brute force search\n    # Starting with y = 0 and increasing it until we find the smallest x that satisfies the equation.\n    y = 0\n    while True:\n        # Calculating x using the equation 24x - 25y = 8\n        x = (25 * y + 8) / 24\n        # Check if x is a whole number\n        if x.is_integer():\n            return int(x)\n        y += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # x has to be a non-zero digit\n        for y in range(10):  # y can be any digit, including zero\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = original_price * 0.15\n    discounted_price = original_price - discount\n    increase = discounted_price * 0.15\n    new_price = discounted_price + increase\n    return new_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for each bag\n    price_per_kg_bag_1 = 5 / 2.5\n    price_per_kg_bag_2 = 7.70 / 4\n    \n    # Compare the price per kg to find out which is better value\n    if price_per_kg_bag_1 < price_per_kg_bag_2:\n        ans = '2.5 kg bag'\n    else:\n        ans = '4 kg bag'\n    \n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    number_of_books = 5\n    total_cost = book_price * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    subtraction_result = 19 + 65\n    ans = 365 - subtraction_result\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    \n    # The difference in mass between three quarters full and one quarter full\n    mass_half_full = mass_three_quarters_full - mass_quarter_full\n    \n    # Therefore, the mass of a one quarter full is twice the mass of the empty jar\n    mass_empty_jar = mass_quarter_full - mass_half_full\n    \n    return mass_empty_jar\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    # Distance marked by each color\n    red_mark = 5\n    blue_mark = 10\n    green_mark = 12\n\n    # Least common multiple will be the first point where they all meet\n    ans = lcm(red_mark, blue_mark, green_mark)\n    \n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Calculate the number of trees on one side (including both ends)\n    trees_per_side = (road_length // interval) + 1\n\n    # Since trees will be planted on both sides, we multiply by 2\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    correct_number = symbols('correct_number')\n    wrong_calculation = (correct_number / 4) - 25\n    correct_calculation = (correct_number * 4) + 25\n    equation = Eq(wrong_calculation, 2021)\n    \n    correct_number_value = solve(equation, correct_number)\n    \n    return correct_calculation.subs(correct_number, correct_number_value[0])\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for e in range(10):\n        if (2 + e + 3 + e + 2) % 9 == 0:\n            return e\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.5  # 50% above cost\n    discount_price = selling_price * 0.9  # 10% discount on the increased price\n    \n    profit = discount_price - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 1\n    while True:\n        original_students = m**2 + 5\n        n = m + 1\n        if (original_students + 18) == n**2:\n            break\n        m += 1\n    ans = original_students\n    return ans\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given ratio x:5 = y:3\n    # To find the relationship between x and y\n    # we know that the two ratios are equal, so we can set up an equation\n    # x/5 = y/3, which means x = (5/3) * y. This is a direct proportion.\n\n    # The relationship between x and y:\n    relationship = \"direct\"\n\n    # To find the value of y when x=5, we rearrange the equation to solve for y:\n    # y = (3/5) * x\n    x_value = 5\n    y_value = (3/5) * x_value\n    \n    return relationship, y_value\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let the first number be a and the second number be b.\n    # Therefore, the sequence is a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # Given that the fourth number is 6 and the sixth number is 15, we have:\n    # a + 2b = 6  (1)\n    # 3a + 5b = 15 (2)\n    \n    # Solving the equations for a and b\n    a_b_values = [(a, b) for a in range(1, 15) for b in range(1, 15) if a + 2*b == 6 and 3*a + 5*b == 15]\n    # There should only be one solution\n    a, b = a_b_values[0]\n    \n    # The seventh number in the sequence is 5a+8b, because the pattern follows Fibonacci sequence coefficients\n    seventh_number = 5*a + 8*b\n\n    return seventh_number\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    return 9+11+8+12+7+13+6+14+5+15\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # Find the GCD of three class sizes\n    ans = gcd(gcd(class_a, class_b), class_c)\n    return ans\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('5:00 PM', '%I:%M %p')\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    # Sum of the original 3 numbers\n    original_sum = original_average * total_numbers\n    # Sum of the new 3 numbers after one number is changed to 16\n    new_sum = new_average * total_numbers\n    # Difference is the number subtracted to get the new average. This is the change in one of the numbers.\n    difference = original_sum - new_sum\n    # Since one number is changed to 16, we need to find out what was subtracted from that number (what the original was)\n    original_number = 16 + difference\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    boys = 36 - girls\n\n    # Total score for girls\n    total_girls_score = girls * 88\n    \n    # Total score for boys\n    total_boys_score = boys * 91\n    \n    # Equation based on the average score\n    equation = Eq(total_girls_score + total_boys_score, 36 * 89)\n    \n    girls_count = solve(equation, girls)\n\n    return int(girls_count[0])\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    total_attempted = total_questions - not_attempted\n    score_for_correct = 4\n    score_for_incorrect = -2\n    rex_score = 66\n\n    # Let's hypothesize that Rex answered all attempted questions correctly.\n    # If later we find he has negative incorrect answers, it means our hypothesis is correct.\n    correct_answers = (rex_score + (score_for_incorrect * total_attempted)) / (score_for_correct - score_for_incorrect)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Analyze the question. It is a combinatorics problem.\n    # The shape is 3D, and we are asked to think in terms of Graph Theory,\n    # but the question statement itself is missing. This is a mistake.\n    # A typical 3D shape question might involve counting vertices, edges, and faces,\n    # and can relate to Euler's formula for polyhedra: V - E + F = 2 for a convex polyhedron.\n    # However, without the specific details about the shape or the question, there's no solution to be provided.\n    \n    # Since there is no specific question provided, we cannot write a function to solve it.\n    # A placeholder value is returned to indicate this.\n    return None\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution\n    david_sugar = 800 * 0.05\n    # Eugene's solution\n    eugene_sugar = 200 * 0.30\n    # Felix's solution\n    felix_sugar = 300 * 0.10\n\n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution\n    total_solution = 800 + 200 + 300\n\n    # Concentration of the resulting sugar solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Andrew and Gill's pencils\n    andrew, gill = symbols('andrew gill')\n    \n    # Equation1: Sum of Andrew and Gill's pencils\n    equation1 = Eq(andrew + gill, 62)\n    \n    # Equation2: Gill has 18 more pencils than Andrew\n    equation2 = Eq(gill - andrew, 18)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    # Return the number of pencils Gill has\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    # Amount of fruit juice in the first punch\n    fruit_juice_1 = 20 * 0.35\n    # Amount of fruit juice in the second punch\n    fruit_juice_2 = 30 * 0.60\n    \n    # Total amount of punch\n    total_punch = 20 + 30\n    # Total amount of fruit juice in the new mixture\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    \n    # Calculate the percent concentration of the new mixture\n    concentration = (total_fruit_juice / total_punch) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize the minimum possible number to a value higher than any three-digit number.\n    min_number = 1000\n\n    # Iterate through all three-digit numbers.\n    for i in range(100, 1000):\n        # Convert the number to a list of its digits.\n        digits = [int(d) for d in str(i)]\n        # Check if one of the digits is 7 and the differences between each pair is 4 or less.\n        if 7 in digits and all(abs(d1 - d2) <= 4 for d1 in digits for d2 in digits):\n            # If the conditions are met and the number is smaller than the current minimum, update the minimum.\n            min_number = min(min_number, i)\n    \n    return min_number\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the original number of badges\n    original_badges = symbols('original_badges')\n    \n    # Sold 5/7 on the first day\n    remaining_after_first_day = original_badges - (5/7) * original_badges\n    \n    # Sold 1/3 of the remaining on the second day\n    remaining_after_second_day = remaining_after_first_day - (1/3) * remaining_after_first_day\n    \n    # Made additional 354 badges\n    total_at_end = remaining_after_second_day + 354\n    \n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_at_end, 3 * original_badges)\n\n    # Solve for the original number of badges\n    solution = solve(equation, original_badges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # There are 4 people in a knockout tournament\n    # In a knockout tournament, in each match, one player is eliminated.\n    # To determine a winner, we need to eliminate 3 players.\n    # In every round, one match is played, and one player is eliminated.\n    # Therefore, we need at least 3 rounds to determine the winner.\n\n    rounds_needed = 3  # One round for each player that needs to be eliminated except winner\n    return rounds_needed\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    \n    produced_by_both = (not_produced_by_A + not_produced_by_B) - total_exhibits\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_number = \"0141705021\"\n    devil_number = \"4005220912\"\n    angel_sorted = sorted(angel_number)\n    devil_sorted = sorted(devil_number)\n    \n    if angel_sorted == devil_sorted:\n        return \"yes\"\n    else:\n        correct_password = ''.join(devil_sorted)\n        return correct_password\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blouse = symbols('blouse')\n    skirt = blouse + 14\n    \n    equation = Eq(3 * skirt + 2 * blouse, 317)\n    solution = solve(equation, blouse)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee picking at least one ball of each color, the magician could pick\n    # all balls of the two most numerous colors and then one more ball.\n    # This will ensure that at least one ball of the third color is picked.\n    \n    # The number of blue and red balls is less than the number of green balls.\n    # So we take all blue and red balls and one green ball.\n    \n    max_blue_red = 8 + 10\n    # We add one to guarantee the third color\n    min_picks_to_guarantee = max_blue_red + 1\n    \n    return min_picks_to_guarantee\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using Chinese Remainder Theorem\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    x, _ = solve_congruence(*congruences)\n    while x < 200:\n        x += 6 * 7 * 11\n    return x\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    final_value_after_increase = 110000\n    increase_percentage = 0.10  # 10%\n    decrease_percentage = 0.10  # 10%\n\n    # Reverse calculate the original price, before the 10% increase\n    original_price = final_value_after_increase / (1 + increase_percentage)\n\n    # Calculate the value after the slump (10% decrease)\n    final_value_after_decrease = original_price * (1 - decrease_percentage)\n\n    # Calculate the profit or loss comparing with the original price\n    profit_or_loss = final_value_after_decrease - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    ans = 1\n    while (ans * (ans + 1)) // 2 <= 60:\n        ans += 1\n    return ans - 1\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial as fact\n\n    num1 = fact(6)\n    num2 = fact(8)\n    count = 0\n\n    for m in range(num1, num2 + 1):\n        if m % num1 == 0 and num2 % m == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # There are 3 factorial ways to arrange the roses,\n    # 4 factorial ways to arrange the jasmines, and\n    # 1 factorial way to arrange the daisy. \n    # Since there are 3 groups, there are also 3 factorial ways to arrange the groups themselves.\n    \n    roses = factorial(3)\n    jasmines = factorial(4)\n    daisy = factorial(1)\n    groups = factorial(3)\n\n    # The total number of ways to arrange the flowers is the product of these possibilities.\n    total_ways = roses * jasmines * daisy * groups\n    \n    return total_ways\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since A and B are prime numbers and the expression 8A - 3B has to be a multiple of 3,\n    # we can look at the cases for A and B as prime numbers.\n\n    # Loop through possible prime values of A (considering it can't be 3 itself, since\n    # 8*3 - 3B = 24 - 3B would not be a multiple of 3 unless B was also 3, which can't be\n    # true since A and B are distinct primes. So we start looking from the next prime, which is 5.)\n    for A in range(5, 100):  # Arbitrary upper bound for searching\n        # Check if A is a prime number\n        if all(A % i != 0 for i in range(2, int(A**0.5) + 1)):\n            # Since 3|(8A - 3B), we must have B such that 3|8A. But 8A itself is not divisible by 3\n            # for any prime A, hence the subtraction of 3B must bring it into divisibility by 3.\n            # B itself must be a prime number, but it can't cancel out A's contribution to 8A modulo 3\n            # unless B is also a multiple of 3, which means B must be 3 because 3 is the only prime that is a multiple of 3.\n            if (8 * A - 3 * 3) % 3 == 0:\n                return A  # A is the value we want to find\n\n# Get the answer\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100.0)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):  # Assuming the number of pies is less than 100 for practicality\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml/min\n    minutes_per_hour = 60  # min/hour\n    ml_to_liters_conversion = 1000  # 1 liter = 1000 ml\n\n    total_leak_in_hour_ml = leak_rate_per_minute * minutes_per_hour\n    total_leak_in_hour_liters = total_leak_in_hour_ml / ml_to_liters_conversion\n\n    return total_leak_in_hour_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        s, e, x = p\n        if s != '0':  # 'S' cannot be zero because it's a 3-digit number SEE\n            see = int(s + e + e)\n            eex = int(e + e + x)\n            xes = int(x + e + s)\n            if see + eex + xes == 33 * int(s + e + x):\n                return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 1\n    while True:\n        if age % 2 == 1 and age % 3 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 0:\n            return age\n        age += 1\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces_after_cut = 16\n    pieces_cut_into_three = (total_pieces_after_cut - original_pieces) // 2\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # In the worst case, to ensure getting at least one pair of the same colour,\n    # she might pick 3 socks of all different colours first.\n    socks_picked = 3\n\n    # Then, the next sock picked must form a pair with one of the previously picked socks.\n    socks_picked += 1\n\n    return socks_picked\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # According to the worst-case scenario of the pigeonhole principle,\n    # we assume that the colors alternate as we pick them.\n    # We want to find how many apples we must take to be sure that\n    # we have 2 apples of the same color.\n    \n    # 1st apple we take could be either red or green, let's say red.\n    # 2nd apple we take could be green.\n    # At this point, we don't yet have 2 apples of the same color.\n    # We take a 3rd apple:\n    # If it's red, then we have 2 red apples.\n    # If it's green, then we have 2 green apples.\n    # In either case, we have achieved our objective.\n    \n    # Therefore, the answer is 3. We must take 3 apples to ensure we have 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    water_per_pail = 4\n    num_pails = 4\n    water_left = 7\n    original_volume = (water_per_pail * num_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    # Pairs of numbers to form whole numbers\n    # 6.3 + 8.7 forms a whole number, and 9.6 - 2.6 forms a whole number\n    pair1 = 6.3 + 8.7\n    pair2 = 9.6 - 2.6\n\n    # Calculate the total\n    total = pair1 + pair2\n\n    return total\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z')\n\n    # Set up the given equation x^20 * y^15 * z^5 = 243\n    equation = Eq(x**20 * y**15 * z**5, 243)\n\n    # Solve for x, y, z using sympy's solve function\n    # Since we are raising the equations to power we can make use of roots of 243 which are 3 and -3\n    solutions = solve(equation, (x, y, z))\n\n    # Filter valid solutions (positive roots in this context)\n    valid_solutions = [s for s in solutions if all(v.is_real and v > 0 for v in s)]\n\n    # Assuming valid solutions exist, use the first valid solution (x, y, z)\n    if valid_solutions:\n        solution = valid_solutions[0]\n\n        # Use the found values to calculate the required expression x^8 * y^6 * z^2\n        x_val, y_val, z_val = solution\n        ans = x_val**8 * y_val**6 * z_val**2\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    def last_non_zero_digit(n):\n        # Remove the factors of 10 (multiples of 2 and 5)\n        while n % 10 == 0:\n            n //= 10\n        # Reduce the number modulo 10\n        return n % 10\n\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        # Only keep the last non-zero digit at each multiplication step\n        product = last_non_zero_digit(product)\n    \n    ans = last_non_zero_digit(product)\n    return ans\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Determine the counts of numbers and the positions of the median\n    total_numbers = sum(range(2, 9))  # total count of numbers from two 1s to eight 8s\n    median_position = (total_numbers + 1) // 2  # position of the median in a sorted sequence\n\n    current_position = 0  # current position while iterating through the sequence\n\n    # Iterate through the sequence to find the median\n    for i in range(1, 9):  \n        current_position += i\n        if current_position >= median_position:\n            return i  # current number is the median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # Total height of the six players\n    total_height_six_players = 6 * 150\n\n    # Average height of four of them is 2 cm lower\n    average_height_four_players = 150 - 2\n\n    # Total height of the four players\n    total_height_four_players = 4 * average_height_four_players\n\n    # Total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n\n    # Average height of the other two players\n    average_height_two_players = total_height_two_players / 2\n\n    return average_height_two_players\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_pave_length = 50\n\n    days_needed = total_length / daily_pave_length\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    fodder_per_day_per_cattle = 10\n    number_of_cattles = 8\n    number_of_days = 4\n    \n    total_fodder = fodder_per_day_per_cattle * number_of_cattles * number_of_days\n    return total_fodder\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42 ** 2 // 42\n    factors_y = [2, 3, 7]  # Prime factors of 42, as y needs to have each factor only once\n    y = 1\n    for factor in factors_y:\n        y *= factor\n    return x + y\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    concentration = 0.22\n    \n    sugar_weight = total_weight * concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 100):\n        digits = [int(d) for d in str(i)]\n        total_sum += sum(digits)\n    return total_sum\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the original number of marbles that Larry had.\n    # After giving (5/12) to Mark, 30 to Nate, and 26 to Ollie, he had 35 left.\n    # So we can set up the equation:\n    # (1 - 5/12)*x - (30 + 26) = 35\n    # Solving for x will give us the original number of marbles.\n\n    # Simplify the equation:\n    # (7/12)*x = 35 + 30 + 26\n    # (7/12)*x = 91\n\n    # Solve for x:\n    x = (91 * 12) / 7\n    return int(x)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets be the number of sweets Jess has\n    # Let jill_sweets be the number of sweets Jill has\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Based on the problem, we can create two equations\n    # Before the transfer, Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n    # After giving 8 sweets to Jess, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = 1/4\n\n    money_given = total_money * portion_given\n\n    return money_given\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    birth_date = current_date - timedelta(days=(38*365.25)+6*30.4375)\n    return birth_date.year\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 99999):\n        # Construct the new numbers based on the original number\n        number_with_one_in_front = int('1' + str(number))\n        number_with_one_at_end = int(str(number) + '1')\n        \n        # Check the condition: number with 1 at end is three times number with 1 in front\n        if number_with_one_at_end == 3 * number_with_one_in_front:\n            return number\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    initial_length = 12.6\n    cut_length = 3.75\n    remaining_length = initial_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of one pie be x dollars and one cake be x + 13 dollars.\n    pie_cost, cake_cost = symbols('pie_cost cake_cost')\n    cake_cost = pie_cost + 13\n\n    # Let the number of pies sold be 4y and the number of cakes sold be y.\n    pies_sold, cakes_sold = symbols('pies_sold cakes_sold')\n    pies_sold = 4 * cakes_sold\n\n    # The ratio of money collected from pies to cakes is 15:7 i.e., 15x = 7(x + 13).\n    money_pies = 15 / 22 * 1848\n    money_cakes = 7 / 22 * 1848\n    total_pies_value = money_pies\n    total_cakes_value = money_cakes\n\n    # From the total sales, we can set the equations:\n    equation1 = Eq(pie_cost * pies_sold, total_pies_value)\n    equation2 = Eq(cake_cost * cakes_sold, total_cakes_value)\n\n    solutions = solve((equation1, equation2), (pie_cost, cakes_sold))\n\n    return solutions[cakes_sold]\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for number in range(40, 81):\n        if number % 4 == 0 and number % 7 == 0:\n            beads.append(number)\n    return beads[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    for perm in permutations(digits, 4):  # Choose 4 different digits\n        if perm[-1] in even_digits:  # Check if the last digit is even\n            if perm[0] != '0':  # The number cannot start with zero\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    initial_money = symbols('initial_money')\n\n    # After spending 1/4 of his money and additional $3 on CDs\n    remaining_after_CDs = initial_money - (1/4)*initial_money - 3\n\n    # After spending 3/5 of the remaining money and an additional $6 on batteries\n    remaining_after_batteries = remaining_after_CDs - (3/5)*remaining_after_CDs - 6\n\n    # He was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n    initial = solve(equation, initial_money)\n\n    return initial[0]\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    return (9**2015 + 9**2016) % 10\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Men can be arranged in any order, which is 5! ways\n    men_arrangements = factorial(5)\n\n    # If men are already seated, there are 6 possible positions for women\n    # We choose 3 out of these 6 positions: C(6, 3)\n    women_positions = permutations(6, 3)\n\n    # The total arrangements are the product of the two possibilities\n    total_arrangements = men_arrangements * women_positions\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marc_time_str = \"11:50 AM\"\n    marc_time_format = \"%I:%M %p\"\n    marc_time = datetime.strptime(marc_time_str, marc_time_format)\n    \n    # Adjusting for Marc's watch being 15 minutes slow\n    marc_actual_time = marc_time + timedelta(minutes=15)\n    \n    # Adjusting for George's watch being 7 minutes fast\n    george_time = marc_actual_time + timedelta(minutes=7)\n    \n    # Adding half an hour to George's time\n    george_future_time = george_time + timedelta(minutes=30)\n    \n    # Formatting the time to be in hours and minutes\n    ans = george_future_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # Qiqi's speed in m/min\n    weiling_speed = 72  # Weiling's speed in m/min\n    time_difference = 2  # Weiling starts 2 minutes later\n    early_arrival = 4  # Weiling arrives 4 minutes earlier than Qiqi\n\n    # Since Weiling arrives 4 minutes earlier even though she starts 2 minutes later,\n    # Weiling travels for 6 minutes less than Qiqi\n    time_weiling_travels_less = time_difference + early_arrival \n\n    # Let t be the time Qiqi travels in minutes\n    # Weiling travels for (t - 6) minutes\n    # The distance covered by both is the same. Hence, their speeds and times are related as follows:\n    # qiqi_speed * t = weiling_speed * (t - 6)\n\n    # Solve the equation for t\n    # t = weiling_speed * (t - 6) / qiqi_speed\n    # t * qiqi_speed = weiling_speed * t - 6 * weiling_speed\n    # t * (qiqi_speed - weiling_speed) = -6 * weiling_speed\n\n    # Calculating the time Qiqi travels\n    t = (-6 * weiling_speed) / (qiqi_speed - weiling_speed)\n\n    # Distance between the library and school is Qiqi's speed multiplied by the time she travels\n    distance = qiqi_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let the number of correct answers be x\n    # Then the number of wrong answers is 30 - x\n    # Each correct answer gives 5 marks, and each wrong answer deducts 1 mark.\n    # Total marks is given by: 5 * x - (30 - x) = 90\n    # Simplify the equation: 5 * x - 30 + x = 90\n    # Combine like terms: 6 * x = 120\n    # Solve for x: x = 120 / 6\n    correct_answers = 120 // 6\n    \n    return correct_answers\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_equation1 = Eq((T / 100) * 30000 + (T / 100 + 0.03) * (income - 30000), (T / 100 + 0.01) * income)\n    tax_equation2 = Eq(income, 30000)  # This represents the condition that income is above $30000.\n\n    solutions = solve((tax_equation1, tax_equation2), (T, income))\n\n    # Choose the solution where income is above $30000.\n    income_solution = [sol[income] for sol in solutions if sol[income] > 30000]\n    \n    return income_solution[0]\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    combined_rate = a_rate + b_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slip_down = 2\n    effective_jump = jump_up * 3 - slip_down * 2  # Effective height after 3 jumps and 2 slips\n    jumps_per_cycle = 3\n\n    # Calculate the number of complete cycles the squirrel can perform\n    # before reaching or exceeding the height of the tree\n    cycles = (total_height - 1) // effective_jump  # Subtract 1 to avoid the last slip down\n\n    # Calculate the number of jumps within the last (potentially incomplete) cycle\n    remaining_height = total_height - cycles * effective_jump\n    last_cycle_jumps = (remaining_height + jump_up - 1) // jump_up  # ceil division for last cycle jumps\n\n    # Total number of jumps is 3 jumps per cycle plus jumps in the last cycle\n    total_jumps = cycles * jumps_per_cycle + last_cycle_jumps\n\n    return total_jumps\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the difference in years between 2002 and when Gigi was 22\n    gigi_age_22_year = 2002 - (45 - 22)\n    \n    # Calculate the difference in years between 1995 and when Gigi was 22 years old\n    jenny_age_at_gigi_22 = (gigi_age_22_year - 1995) + 22\n    \n    return jenny_age_at_gigi_22\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Calculate the number of marbles that must be drawn to ensure 4 marbles of different colors.\n    # By Pigeonhole Principle, draw all marbles of the most abundant color, then draw one from each of the remaining.\n    \n    # Redrawing doesn't change the result because \"red\" appears twice in the question which seems like a typo.\n    # Since there are 12 red marbles, we ignore the repeated count for red and consider 3 more colors.\n    red = 12\n    blue = 9\n    yellow = 8\n    # Assuming \"3 red\" means a color different from red, yellow, and blue, which we will call \"green\".\n    green = 3\n    \n    # In the worst case, draw all but one color:\n    # (All reds + All blues + All yellows) - 1, and then draw one more to ensure four different colors\n    draw = (red + blue + yellow + green - 1) - green + 1\n    \n    return draw\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    while True:\n        num += 24 # since the number must be a multiple of both 3 and 8, it must be a multiple of 24\n        if str(num)[-1] == \"2\":\n            return num\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    missing_digit = 9 - (digits_sum % 9)\n    if missing_digit == 9:\n        missing_digit = 0\n    return missing_digit\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if (number % 3 == 0) and (number % 5 != 0) and (number % 9 != 0):\n            return last_digit\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "from math import sqrt, pow\n\ndef solution():\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    # There will be at least one apple in each group,\n    # and the groups must have different numbers of apples.\n    # If the total is 12, then the possible pairs of groups\n    # would be (1, 11), (2, 10), (3, 9), (4, 8), (5, 7).\n    # We don't count (6, 6) as the two groups wouldn't be different.\n    # Therefore, there are 5 different ways to divide 12 apples into two groups.\n    \n   # Calculate the number of ways directly\n    ans = (12 - 1) // 2  # Subtract 1 for the dividing apple count, then integer divide by 2\n    return ans\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_water + speed_current\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    cost_of_bracelets = 5 * 0.99\n    cost_of_cards = 2 * 1.98\n    total_cost = cost_of_bracelets + cost_of_cards\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_paid = 12.15\n    cupcake_price = 3.25\n    total_cupcakes_price = 3 * cupcake_price\n    total_drinks_price = total_paid - total_cupcakes_price\n    one_can_of_drink_cost = total_drinks_price / 2\n    return one_can_of_drink_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly,\n    # and y be the number of questions she answered incorrectly.\n    # We have two equations based on the problem statement:\n    # x + y = 20 (total number of questions)\n    # 5x - 2y = 51 (total score Olivia got)\n    \n    # We solve this linear system of equations for x and y:\n    for x in range(21):\n        y = 20 - x\n        if 5 * x - 2 * y == 51:\n            return x\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n    \n    # Calculate the least common multiple of the two known cycles\n    # Convert minutes to seconds: 0.5 min -> 30 sec, 0.75 min -> 45 sec, 9 min -> 540 sec\n    first_light = 30  # 30 seconds\n    second_light = 45  # 45 seconds\n    combined_cycle = 540  # 540 seconds\n\n    # Find the LCM of the first two lights\n    lcm_two_lights = lcm(first_light, second_light)\n\n    # Determine the possible cycles for the third light\n    third_light = lcm_two_lights\n    while third_light < combined_cycle:\n        third_light = lcm(third_light, combined_cycle)\n    \n    return third_light / 60  # Convert back to minutes\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # X = number of members in group A\n    # Y = number of members in group B\n    X, Y = symbols('X Y')\n    \n    # Equation 1: Extra members from A (11) plus the remaining from B (36 - 11) fill a bus\n    equation1 = Eq(11 + (Y % 36), 36)\n    \n    # Equation 2: All members of A take pictures with all members of B\n    # Then we calculate the extra frames in the last film roll\n    # Each film has 36 pictures, so we divide the total number of pictures by 36 and take the remainder\n    extra_pictures = (X * Y) % 36\n    \n    # Find solutions to the system of equations\n    solutions = solve(equation1, Y)\n    \n    # We are looking for the number of extra pictures; Y must also be a positive integer\n    Y = next(filter(lambda sol: sol.is_integer and sol > 0, solutions))\n    \n    # Re-arrange equation 1 to solve for X (substitute Y into equation 1)\n    X = solve(Eq(11 + (Y % 36), 36), X)[0]\n\n    return 36 - extra_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Compute the differences between consecutive terms\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n\n    # Compute the differences of differences\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n\n    # Since it's a double arithmetic sequence, second differences are constant\n    # Use the last second difference to compute the next difference\n    next_difference = differences[-1] + second_differences[-1]\n\n    # Now calculate the next term by adding the next difference to the last term\n    next_term = 50 + next_difference  # last term = 50\n\n    return next_term\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_count = 8\n\n    # Calculate total sum of all numbers using mean formula\n    total_sum = mean_value * total_count\n    \n    # Calculate sum of known numbers\n    sum_of_known_numbers = sum(known_numbers)\n    \n    # Find the missing number by subtracting sum of known numbers from total sum\n    missing_number = total_sum - sum_of_known_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n\n    # The nth term of the sequence can be defined as:\n    # nth_term = first_term + (n - 1) * common_difference\n    # We should find the largest n such that nth_term > 0\n\n    # We need to solve first_term + (n - 1) * common_difference > 0 for n\n    # Let's rearrange the inequality:\n    # n > - (first_term - 1) / common_difference\n\n    n = 1 - (first_term - 1) / common_difference\n\n    # Since n must be an integer and we are counting the number of terms,\n    # we take the floor of n and add 1 because we want to include the first term\n    ans = int(n)\n    \n    return ans\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # A can pass to B, C, or D initially (3 choices)\n    # The person who gets the ball first, can then pass to two others\n    # The last pass must be to A\n    # So for each of the first choices, there are 2 choices for the second pass\n    # Total = First choices * Second choices\n    total_methods = 3 * 2\n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    # Weight of one examination paper in grams\n    weight_per_paper = 25\n    \n    # Number of girls sitting the paper\n    num_girls = 250\n    \n    # Total weight in grams\n    total_weight_grams = weight_per_paper * num_girls\n    \n    # Convert grams to kilograms (1 kg = 1000 grams)\n    total_weight_kilograms = total_weight_grams / 1000\n    \n    return total_weight_kilograms\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum(((2 * i + 2) ** 2 - (2 * i) ** 2) for i in range(0, 500))\n    return ans\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards):\n        num1 = perm[0]*10 + perm[1]\n        num2 = perm[2]*10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let x be the length of the second bridge\n    # The time for the line to cross the entire first bridge (3 + 9 meters) is 8 seconds.\n    speed = (3 + 9) / 8  # speed = total distance / time\n\n    # The time for the line to cross the entire second bridge is 10 seconds.\n    # The total distance for the second bridge is the length of the people line plus the length of the bridge itself.\n    # So, we have distance = speed * time\n    # Therefore, x + 3 = speed * 10\n    # Solve for x\n    second_bridge_length = speed * 10 - 3\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    # Start from a reasonable even number and check for the consecutive even numbers\n    for i in range(2, int(2688 ** (1/3)) + 1, 2):\n        if (i * (i + 2) * (i + 4) == 2688):\n            return i + 4  # Return the largest of the consecutive numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # 11.55am in minutes\n    end_time = (13 * 60) + 40    # 1.40pm in minutes, converting 1pm to 13 in 24-hour format\n\n    play_time = end_time - start_time  # total playing time in minutes\n\n    return play_time\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is in one of the rows\n    # The people on the left and right of her belong to her row only\n    people_in_crystals_row = 11 + 1 + 7  # including Crystal\n    \n    # Since there are 2 rows, and the other row should have the same number of people\n    total_people = people_in_crystals_row * 2  \n    \n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 11 == 0:\n            if (i - 1) % 2 == 0 and (i - 1) % 7 == 0:\n                return i\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import divisors\n\n    num_factors = len(divisors(224))\n\n    return num_factors\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n\n    # Loop from 1 to half of total_cupcakes, as the second group will accordingly take the remainder \n    for group1 in range(1, total_cupcakes // 2 + 1):\n        group2 = total_cupcakes - group1\n        if group1 != group2:  # Ensure the groups have different numbers of cupcakes\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(a + 5, 10):\n            for c in range(b - 2, 10):\n                if (a + b + c) / 2 == b:\n                    abc = 100 * a + 10 * b + c\n                    return abc\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    # Greatest common divisor is the biggest number\n    # that divides exactly into given numbers\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_time = datetime.strptime('8:30', '%H:%M')\n    total_duration = timedelta(minutes=(3 * 45 + 2 * 5))\n    break_start_time = start_time + total_duration\n\n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fives, tens = symbols('fives tens')\n    total_notes = fives + tens\n    spent_tens = 0.6 * tens\n    spent_fives = 0.25 * fives\n    remaining_tens = tens - spent_tens\n    remaining_fives = fives - spent_fives\n\n    equation1 = Eq(total_notes, 57)\n    equation2 = Eq(remaining_tens, 2 * remaining_fives)\n    equation3 = Eq(spent_tens * 10 + spent_fives * 5, spent_tens * 10 + spent_fives * 5)\n    equation4 = Eq(remaining_tens + remaining_fives, 57 - (spent_tens + spent_fives))\n\n    solutions = solve((equation1, equation2, equation3, equation4), (fives, tens))\n\n    cost_of_bag = solutions[spent_tens] * 10 + solutions[spent_fives] * 5\n    return cost_of_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins_initially = solutions[troy] + solutions[adam]\n    \n    return total_coins_initially\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        product = 1\n        for digit in str(num):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):\n                if hundreds + tens + ones == 8 and len(set([hundreds, tens, ones])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    ans = (1 / 4) * 16 / (1 / 2)\n    return int(ans)\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Maximum beads Darrell could draw without getting 5 green beads\n    # In worst case scenario, draws all blue and white beads first\n    max_non_green = 5 + 6 \n    \n    # To then get the 5 green beads for sure, we add 5 to the non-green count\n    min_draws_to_get_5_green = max_non_green + 5\n    \n    return min_draws_to_get_5_green\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Hanson had at first\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, he has 3/4*x - 3 left\n    remaining_after_CDs = (3/4) * x - 3\n\n    # Then he spends 3/5 of the remaining money and an additional $6\n    remaining_after_batteries = (2/5) * remaining_after_CDs - 6\n\n    # Equation that represents he was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n    \n    # Solve for x\n    initial_money = solve(equation, x)\n\n    # Extract the solution (there should be only one)\n    return initial_money[0]\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "from math import comb\n\ndef solution():\n    group_stage_games = 0\n    # 4 groups, for each group, a single round-robin tournament with 4 contestants\n    for i in range(4):\n        group_stage_games += comb(4, 2)  # choose 2 out of 4 for each match\n\n    # Knockout round games including top 8, top 4, top 2, and the third-place match\n    knockout_round_games = 8 - 1  # each knockout eliminates one loser, until 1 winner remains\n\n    # The total games\n    total_games = group_stage_games + knockout_round_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Time taken by A to finish the job\n    a_time = symbols('a_time')\n    # Relation between A and B's time is given as a_time = b_time - 12\n    # A is twice as good, so B takes twice the time taken by A\n    b_time = 2 * a_time\n\n    # Equation representing the total work done by both (1/A's work + 1/B's work)\n    combined_work_eq = Eq((1/a_time) + (1/b_time), 1/(a_time - 12))\n\n    # Solve for A's time\n    a_time_solution = solve(combined_work_eq, a_time)\n\n    # Since our equation might give us more than one solution, we are interested in the positive value\n    # Calculate combined rate of work\n    combined_rate = 1/a_time_solution[0] + 1/(2 * a_time_solution[0])\n    \n    # Calculate the time it will take for A and B to complete the job together\n    combined_time = 1 / combined_rate\n    \n    return combined_time\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    n = 9  # total different potted plants\n    r = 4  # potted plants to arrange\n\n    # Number of ways to arrange 'r' out of 'n' is given by nPr (permutation)\n    # nPr = n! / (n - r)!\n    ways = factorial(n) // factorial(n - r)\n\n    return ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n    # Apply the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    initial_stickers = final_stickers - stickers_bought + stickers_given\n\n    return initial_stickers\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbolic variables for Rachel and Alice's candies\n    rachel, alice = symbols('rachel alice')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(rachel - 10, alice + 10)  # If Rachel gives Alice 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)  # If Alice gives Rachel 10 candies\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt, prod\n\n    # Since 15 and 21 are factors, their least common multiple is also a factor.\n    lcm_15_21 = (15 * 21) // math.gcd(15, 21)\n    \n    # The number must be the square of the lcm, because this gives it 8 factors.\n    number = lcm_15_21 * lcm_15_21\n\n    # Now, we'll find all the factors.\n    factors = set()\n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    # We will start from number 2, as we know the remainder is 2 with division by 3, 4, and 5\n    num = 2\n\n    # We iterate until we find a number that satisfies all conditions\n    while True:\n        # Check if the number leaves a remainder of 2 when divided by 3, 4, and 5, and no remainder when divided by 7\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n        # Since we're looking for a cyclical pattern with periods of lcm(3, 4, 5, 7), we can increase num by this step\n        num += 60  \n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    for perm in permutations(digits):\n        if perm[0] != '8':\n            continue\n        number = ''.join(perm)\n        if all(int(number[:i]) % i == 0 for i in range(2, 11)):\n            return int(number)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = symbols('matthew_tomatoes')\n\n    # Belinda has 36 tomatoes. After giving 7 to Matthew, both will have the same number.\n    equation = Eq(belinda_tomatoes - 7, matthew_tomatoes + 7)\n\n    # Solve the equation to find out how many tomatoes Matthew had at first.\n    matthew_initial_tomatoes = solve(equation, matthew_tomatoes)\n\n    return matthew_initial_tomatoes[0]\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_assembly_rate = 10\n    efficiency_increase = 50 / 100\n    new_assembly_rate = base_assembly_rate * (1 + efficiency_increase)\n    return new_assembly_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    difference = abs(2012 - 1274)\n    largest_d_minus_r = 0\n\n    for i in range(1, difference + 1):\n        if difference % i == 0:\n            d = difference // i\n            if d % 2 == 1:\n                r = 2012 % d\n                largest_d_minus_r = max(largest_d_minus_r, d - r)\n\n    return largest_d_minus_r\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Let's denote rabbits as 'r' and ducks as 'd'.\n    # Since each rabbit has 4 legs and each duck has 2 legs, we can write the following equations:\n    # r + d = 7 (total number of animals)\n    # 4r + 2d = 20 (total number of legs)\n\n    # We can solve this system of equations for 'r'.\n    for r in range(8):  # Only 7 animals in total, so there can't be more than 7 rabbits\n        d = 7 - r\n        if 4 * r + 2 * d == 20:\n            return r\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have three congruences based on the problem statement:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # The smallest number which satisfies all these congruences can\n    # be found using the Chinese Remainder Theorem\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5/7) * initial_amount\n    remaining_after_grace = initial_amount - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - given_to_evelyn\n\n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_4 = 4 ** (2009 % 4) if 2009 % 4 != 0 else 4\n    last_digit_6 = 6 ** (2010 % 4) if 2010 % 4 != 0 else 6\n\n    ans = (last_digit_4 + last_digit_6) % 10\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram in range(32):\n        for five_gram in range(13):\n            if 2 * two_gram + 5 * five_gram == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_of_two = total_height_for_two / 2\n\n    return average_height_of_two\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # In this game, a player wins if they can force the opponent to write the last number (52).\n    # The key is to work backwards and find a strategy that maintains control of the game.\n    # Let's define the winning positions as the ones in which the player who is about to play can win by playing optimally.\n\n    # A losing position is one in which whatever the player does, the opponent can always reach a winning position.\n    # If the player is left with a number that is exactly 1, 3, 4, or 6 less than a winning position, it's a losing position.\n\n    # Define the losing positions first. If we start at 52 and subtract the allowed numbers (1, 3, 4, 6),\n    # we get the winning positions. From each winning position, subtracting 1, 3, 4, 6 will give us the next losing positions.\n    # This process will be repeated until we reach 1.\n\n    # Start from 1, since it's a losing position.\n    winning_positions = []  # To record all winning positions.\n    losing_positions = [1]  # First position is a losing position.\n\n    # Loop through possible numbers on blackboard.\n    for i in range(2, 53):\n        if (i-1) in losing_positions or \\\n           (i-3) in losing_positions or \\\n           (i-4) in losing_positions or \\\n           (i-6) in losing_positions:\n            winning_positions.append(i)\n        else:\n            losing_positions.append(i)\n\n    # Now that we identified all losing positions, we can determine the first move.\n    # If the first position (1) is a losing position, it means the second player can always force a win.\n    # Therefore, to win, Betty must go second and ensure that Abby always ends her turn on a losing position.\n    # Knowing all the losing positions allows Betty to always pick a move that will land Abby back on a losing position.\n\n    # Strategy: Betty should go second and play optimally by choosing a number that leads to the next losing position.\n\n    return \"second\", losing_positions, winning_positions\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n\n    for correct_answers in range(total_questions):\n        incorrect_answers = total_questions - 1 - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_1_to_20 = sum(range(1, 21))\n    sum_1_to_19 = sum(range(1, 20))\n    \n    ans = sum_1_to_20 + sum_1_to_19\n    return ans\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let a be the first term and d be the common difference of the arithmetic sequence\n    # Use the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    # sum of first 8 terms (S_8) is 32 so we have 32 = 8/2 * (2a + 7d) which simplifies to 2a + 7d = 8\n    # sum of first 22 terms (S_22) is 44 so we have 44 = 22/2 * (2a + 21d) which simplifies to 2a + 21d = 4\n    # Now we solve these two equations for a and d\n    # From the first equation we can express a in terms of d: a = 4 - 3.5d\n    # Substituting a into the second equation: 4 - 3.5d + 21d = 4, we get d = 0\n    # So, if d = 0, from a = 4 - 3.5 * 0 we get a = 4\n    # Now we know the common difference d is 0 and first term a is 4, it's clear that all terms are 4\n    # Therefore, the sum of the first 15 terms is simply 15 * 4\n    return 15 * 4\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    num_ways = permutations(5, 4)\n\n    return num_ways\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the rate of A (tons per hour), y be the rate of B (tons per hour), \n    # z be the rate of C (tons per hour), and T be the total capacity of the pool (tons).\n    x, y, z, T = symbols('x y z T')\n\n    # Given: B's flow rate is twice that of A's\n    equation1 = Eq(y, 2 * x)\n\n    # If A and C are turned on, the pool can be filled and 18 tons are from A\n    equation2 = Eq(x * z / (x + z), 18)\n\n    # If B and C are turned on, the pool can be filled and 27 tons are from B\n    equation3 = Eq(y * z / (y + z), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z, T))\n\n    # T should be equal to x * z / (x + z)\n    ans = solutions[x] * solutions[z] / (solutions[x] + solutions[z])\n\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age must be two digits (from 10 to 99)\n        reversed_age = int(str(age)[::-1])  # reverse the digits\n        if age // 2 == reversed_age + 1:\n            return age\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_number = 9.32\n    increase_fraction = 1/10\n    ans = original_number * (1 + increase_fraction)\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n    return \"4/25\" if fraction > decimal else \"0.17\"\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_first = 20\n    meatballs_left_second = 10\n    meatballs_diff = meatballs_left_first - meatballs_left_second\n\n    # Let x be the number of meatballs each student gets.\n    # The additional student would take x meatballs, which is the difference \n    # between meatballs left after the first and second distribution.\n    \n    x = meatballs_diff\n\n    return x\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of questions\n    x = symbols('x')\n\n    # Define the equations based on the problem statement\n    day1 = Eq(7 + x/2, x - (x/2 + 5 + 23))\n    day2 = Eq(5 + x/4, (x/2 - 7) / 2)\n\n    # Solve the equations for x\n    solved = solve((day1, day2), x)\n\n    # Extract and return the solution for x as the number of questions\n    return solved[x]\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_volume = 1000  # ml (1 litre = 1000 ml)\n    cup_volume = 200   # ml for each cup\n    cups = 3           # number of cups\n\n    water_used = cup_volume * cups\n    water_left = jug_volume - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    # calculating the common difference\n    difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # calculating the 12th term based on the 10th term\n    twelfth_term = tenth_term + (12 - 10) * difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, d, m = symbols('r d m') # r is roses, d is daisies, m is months\n\n    # total flowers now\n    equation1 = Eq(r + d, 300)\n    # roses and daisies after m months\n    equation2 = Eq(r + m, 280)\n    equation3 = Eq(d + m, 180)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, m))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "import math\n\ndef solution():\n    # A light will be toggled if its number has an odd number of divisors\n    # Since divisors come in pairs, a number will have an odd number of divisors only if it is a perfect square\n    # Thus, we only need to count the perfect squares between 1 and 250 (inclusive)\n    # The highest perfect square less than or equal to 250 is 15^2 (since 16^2 = 256 > 250)\n    # Hence, there are 15 perfect squares (1^2, 2^2, 3^2, ..., 15^2)\n\n    ans = math.isqrt(250)  # int(math.sqrt(250))\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Lizzie's score on the 10-problem test\n    test1_score = 0.20 * 10\n    # Lizzie's score on the 20-problem test\n    test2_score = 0.80 * 20\n    # Lizzie's score on the 30-problem test\n    test3_score = 0.90 * 30\n    # Total problems\n    total_problems = 10 + 20 + 30\n    # Overall score\n    overall_score = (test1_score + test2_score + test3_score) / total_problems\n    # Convert to percentage\n    overall_percentage = overall_score * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    area_of_larger_brick = 6 * 6  # in decimeters squared\n    area_of_smaller_brick_cm2 = 64  # in cm squared\n    total_area_room_dm2 = 80 * area_of_larger_brick  # in decimeters squared\n    \n    # Convert the smaller brick area from cm^2 to dm^2\n    area_of_smaller_brick_dm2 = area_of_smaller_brick_cm2 / 100  # 1 dm^2 = 100 cm^2\n\n    # Calculate the number of smaller bricks needed\n    number_of_smaller_bricks = total_area_room_dm2 / area_of_smaller_brick_dm2\n    \n    return int(number_of_smaller_bricks)\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    greatest_number = 0\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > greatest_number:\n            greatest_number = number\n            \n    return greatest_number\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one bottle of water and one bag of fruit.\n    bottle, bag = symbols('bottle bag')\n    \n    # The first equation represents the total cost of two bottles and three bags.\n    equation1 = Eq(2 * bottle + 3 * bag, 2.55)\n    \n    # The second equation represents the difference in cost between one bottle and one bag.\n    equation2 = Eq(bottle - bag, 0.15)\n    \n    # Solve the system of equations for the cost of a bag and a bottle.\n    solution = solve((equation1, equation2), (bottle, bag))\n    \n    # Return the cost of one bag of fruit\n    return float(solution[bag])\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # Calculate the number of digits of A\n    num_digits = int(2018 * log10(4) + 2018 * log10(25)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_of_ribbon_A = 10\n    length_of_ribbon_B = 5 * length_of_ribbon_A\n    total_length = length_of_ribbon_A + length_of_ribbon_B\n    return total_length\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    num_students = 0\n    diff = 31\n    side_length = 1  # We start with the smallest possible square (1x1) and increase.\n\n    while True:\n        boys = side_length * 4 - 4 if side_length > 1 else 1  # For each square layer the number of boys is the perimeter minus the corners.\n        girls = (side_length - 2) * 4 if side_length > 2 else 0  # For girls it is the perimeter of the inner layer.\n        total_diff = boys - girls\n\n        if total_diff == diff:\n            # Calculate the total number of students by adding squares of odd side lengths for boys\n            # and squares of even side lengths for girls until the current side length.\n            num_boys = sum((2*i + 1)**2 for i in range(0, side_length//2))\n            num_girls = sum((2*i)**2 for i in range(1, (side_length + 1)//2))\n            num_students = num_boys + num_girls\n            break\n        side_length += 1\n\n    return num_students\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    num_players = 5\n    team_size = 3\n    num_teams = comb(num_players, team_size)\n    \n    return num_teams\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    cost_price = selling_price / (1 + profit_percentage / 100)\n    \n    profit_amount = 5000\n    new_profit_percentage = (profit_amount / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            for x3 in range(x2+1, 14):\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of apples Mr. Aziz had at first\n    x = symbols('x')\n\n    # Create an equation based on the information given\n    # Mr. Aziz sold 1/5 of the apples on Monday, 80 apples on Tuesday\n    # And was left with 30% of the apples he had at first.\n    equation = Eq(x - (x / 5) - 80, x * 30 / 100)\n\n    # Solve the equation for x\n    ans = solve(equation, x)[0]\n\n    # Calculate the number of apples he had in the end (30% of the initial amount)\n    apples_in_end = ans * 30 / 100\n\n    return apples_in_end\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_behind_danny = 16\n    people_in_front_of_emily = 25\n    danny_and_emily = 2\n    \n    total_people = people_behind_danny + people_in_front_of_emily + danny_and_emily\n    \n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_per_piece = total_length / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    afternoon_cookies = (total_cookies - morning_cookies) * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_m = 1.5 * 1000\n    return km_to_m\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    x = symbols('x')\n    # represent the seven consecutive even numbers as x, x+2, x+4, ..., x+12\n    fourth = x + 6  # the fourth number\n    first = x       # the first number\n    seventh = x + 12  # the seventh number\n    # the fourth number is 6 greater than one-third of the sum of the first and seventh\n    equation = Eq(fourth, one_third * (first + seventh) + 6)\n    # solve for x\n    solution = solve(equation, x)\n    x_value = solution[0]\n\n    # calculate the sum of the seven numbers by summing the arithmetic series\n    sum_seven_numbers = 7 * (x_value + x_value + 12) // 2\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total = red + blue + green\n    return total\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends as well, we add 1 to the count\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n\n    # Trees are planted on two sides of the highway\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the different colors of orchids\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(purple, 2 * yellow)         # Twice as many purple orchids as yellow\n    equation2 = Eq(yellow, 3 * white)          # Three times as many yellow orchids as white\n    equation3 = Eq(red + white, 38)            # Sum of red and white orchids is 38\n    equation4 = Eq(red, 28)                    # There are 28 red orchids\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Total number of orchids is the sum of all colors\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    nth_term = 20\n\n    ans = first_odd + (nth_term - 1) * difference\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # Equation representing the total number of pupils\n    equation1 = Eq(girls + boys, 500)\n\n    # Equation representing the difference in the number of girls and boys\n    equation2 = Eq(girls, boys + 30)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # Find the difference in age between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # When Eddie is 18, Mike will be Eddie's age plus the difference\n    mike_age_when_eddie_18 = 18 + age_difference\n    \n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place\n    # and overtook 5 cars, then there were 6 cars\n    # ahead of him at the beginning.\n    num_cars_ahead = 5\n    finishing_position = 2\n    \n    # Total number of cars is the number of cars he overtook\n    # plus his finishing position.\n    ans = num_cars_ahead + finishing_position\n    return ans\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n\n    total_paid = lily_book_price + amy_book_price\n\n    return total_paid\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += int('5' * i)\n    ans = total % 10000\n    return ans\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men = 0.25 * total_people\n    women = (1/5) * total_people\n    children = total_people - men - women\n    \n    return int(children)\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    sum_of_angles = (num_sides - 2) * 180\n    interior_angle = sum_of_angles / num_sides\n    return interior_angle\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 3 * 4 * 5  # product of the mods\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Given that it takes 2 men 3 days to build 1 wall\n    men_for_1_wall = 2\n    days_for_1_wall = 3\n\n    # One man-day is the amount of work one man can do in one day\n    # Calculate how many man-days are needed to build 1 wall\n    man_days_for_1_wall = men_for_1_wall * days_for_1_wall\n\n    # Define a function that calculates the days needed for y men to build x walls\n    def days_to_build(x, y):\n        # Total man-days needed to build x walls\n        total_man_days_for_x_walls = man_days_for_1_wall * x\n        # Days needed for y men to complete the job\n        days_needed = total_man_days_for_x_walls / y\n        return days_needed\n\n    # Variable x and y can be any positive integers\n    # For the purpose of solving this as a general case, let's take them as parameters for our solution function\n    # This way, if we need to test it or reuse it with different values for x and y, we can simply call solution(x, y)\n\n    return days_to_build\n\n# To get the final answer, call the solution function with specific values for x and y\nx = 7  # Replace with the number of walls to be built\ny = 5  # Replace with the number of men available\n\n# Obtain the function to calculate days and call it with x and y\ncalculate_days = solution()\nans = calculate_days(x, y)"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_number = 0\n    for hundreds in range(1, 10):\n        for tens in range(2, 10, 2):  # the tens digit must be divisible by 4, so it can be 0, 4 or 8\n            for ones in range(1, 10, 2):  # the number must be odd, so the ones digit must be odd\n                number = 100 * hundreds + 10 * tens + ones\n                if number % 9 == 0 and number > greatest_number:\n                    greatest_number = number\n    return greatest_number\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked_shirts = symbols('checked_shirts')\n    white_shirts = 7 * checked_shirts\n    total_shirts = Eq(checked_shirts + white_shirts, 72)\n\n    solutions = solve(total_shirts, checked_shirts)\n\n    return solutions[0] * 7\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Since the question itself is missing along with the pattern, I cannot provide a specific solution.\n    # Normally, the pattern would be studied to form a mathematical representation of that pattern.\n    # For example, if the pattern is a growing series of triangles where each triangle has a subsequent\n    # number of dots, then a formula could be derived to find the nth term of such a pattern.\n    \n    # However, without the actual pattern or a more specific description, \n    # the Python function I can provide will be a placeholder.\n    \n    # Placeholder for the actual calculation once the pattern is provided\n    ans = None\n    \n    # For example, if the pattern were the number of dots in a triangle (triangular numbers),\n    # we could calculate the nth triangular number with the formula n*(n+1)/2,\n    # where n is the position of the term in the pattern.\n    \n    # If provided with the pattern, the actual implementation of the logic would go here.\n    \n    return ans\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    approx_depreciation = 0.3596\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    ans = round(final_value, 2)\n\n    return ans\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # There are 3 pigeonholes (colors) and we want to ensure we get at least 2 balls of the same color.\n    # According to the Pigeonhole principle, if there are n pigeonholes and we want at least m pigeons in\n    # one of the pigeonholes, we need to distribute (n-1)*(m-1) + 1 pigeons at minimum.\n    # For this specific case, we want m=2, and there are n=3 pigeonholes (colors).\n    # Therefore, we must have at least (3-1)*(2-1) + 1 = 3 draws to ensure two balls of the same color.\n    return 3 + 1  # We add 1 because after the first 3 draws, we could have 1 ball of each color.\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    girls, boys = symbols('girls boys')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(girls + boys, 390)  # Total number of children\n    equation2 = Eq(girls / 3, boys / 2) # One-third of girls equal to one-half of boys\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def S(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    total = (three_quarters * 4) / 3\n    return total\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    days = 8.5\n    total_kg_per_5_days = 24\n    kg_per_day = total_kg_per_5_days / 5\n    total_kg_in_8_5_days = kg_per_day * days\n    return total_kg_in_8_5_days\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Calculate the total amount spent from January to April\n    jan_to_apr_total = 300 * 4  # 4 months\n\n    # Calculate the total amount spent from May to July\n    may_to_jul_total = 250 * 3  # 3 months\n\n    # The total amount spent from August to September is given as 750 dollars\n\n    # Calculate the total amount spent from October to December\n    oct_to_dec_total = 300 * 3  # 3 months\n\n    # Calculate the total amount spent in the year\n    total_spent = jan_to_apr_total + may_to_jul_total + 750 + oct_to_dec_total\n\n    # Calculate the average amount spent per month from January to December\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n\n    children_count = total_passengers - men_count - women_count\n    \n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    father_future_age = 70\n    tom_current_age = 10\n    father_current_age = symbols('father_current_age')\n    tom_future_age = father_future_age\n    \n    # When Tom reaches his father's current age, their age difference will remain the same.\n    age_difference = father_current_age - tom_current_age\n    \n    # Tom's age when he reaches his father's current age will be his current age plus the age difference\n    tom_future_age = tom_current_age + age_difference\n    \n    # At that point, Tom's father will be 70, so setting up the equation father_future_age = tom_future_age + age_difference\n    equation = Eq(tom_future_age + age_difference, father_future_age)\n    \n    # Solve for the father's current age\n    solution = solve(equation, father_current_age)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six = 1.10\n    cost_per_twelve = cost_per_six * 2\n\n    return cost_per_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # pence\n    total_money = 200  # pence (since £2 equals 200 pence)\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    solutions = []\n    for n in range(200):\n        # Convert number to base 4, 6 and 8 and sum their digits\n        sum_digits_base_4 = sum(int(d) for d in format(n, 'b4'))\n        sum_digits_base_6 = sum(int(d) for d in format(n, 'b6'))\n        sum_digits_base_8 = sum(int(d) for d in format(n, 'b8'))\n\n        # Check if the sums of the digits match the given constraints\n        if sum_digits_base_4 == 5 and sum_digits_base_6 == 8 and sum_digits_base_8 == 9:\n            solutions.append(n)\n    \n    return solutions\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    choices_for_first_digit = 2  # can be 2 or 3, not 0\n    choices_for_second_digit = 3  # can be 0, 2, or 3\n    choices_for_third_digit = 3  # can be 0, 2, or 3\n\n    total_combinations = choices_for_first_digit * choices_for_second_digit * choices_for_third_digit\n    return total_combinations\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # Since the fiction books are the same and the comic books are the same,\n    # we use combinations with repetition formula which is similar to permutations\n    # for indistinguishable objects.\n    # The number of ways to arrange n total objects with n1 identical objects of\n    # type 1, n2 identical objects of type 2, ..., is n! / (n1! * n2!).\n    \n    ans = factorial(total_books) / (factorial(fiction_books) * factorial(comic_books))\n    return int(ans)\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100, 2):  # Start with 2 and only consider even numbers\n        if num % 4 == 0 and num % 3 == 0 and (num ** 0.5).is_integer():\n            # Ensuring it's a multiple of 4 and 3, and also a perfect square\n            return num\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    difference_in_acorns = 14\n\n    # Let's denote the initial number of acorns Chip had as C and Dale had as D.\n    # After giving away acorns, Chip has C-14 and Dale has D+14.\n    # They end up with the same amount, so C-14 = D+14.\n    # We also know that C + D = 124.\n    # Combining these two equations, we can solve for C:\n    # C - 14 = (124 - C) + 14\n    # C - 14 = 124 - C + 14\n    # C - C = 124 + 14 + 14\n    # 2C = 124 + 28\n    # 2C = 152\n    # C = 152 / 2\n    # C = 76\n\n    chip_initial_acorns = (total_acorns + difference_in_acorns) / 2\n\n    return chip_initial_acorns\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Generate all primes less than 51\n    prime_sum = 51\n    min_count = float('inf')\n    \n    # Since the question does not specify, we'll assume that \"numbers can be the same\" means we can use the same prime multiple times\n    for prime in primes:\n        count = 0\n        sum = 0\n        while sum < prime_sum:\n            sum += prime\n            count += 1\n        if sum == prime_sum and count < min_count:\n            min_count = count\n\n    return min_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Let x represent the cost of one CD\n    total_cost = 8 * x  # The total cost for 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    used_apples_pie_kg = 750 / 1000\n    used_apples_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (used_apples_pie_kg + used_apples_juice_kg)\n    \n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    \n    total_people = people_in_front_of_amy + amy_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    number_of_weeks = 4\n    \n    growth_per_week = (final_height - initial_height) / number_of_weeks\n    \n    return growth_per_week\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    # Let's assume Oni wrote a 3-page letter to all 11 penpals, that would be 33 pages.\n    # The remaining pages (38 - 33) must have come from exchanging a 3-page letter for a 4-page letter.\n    # Each exchange adds 1 extra page. We need to find out how many exchanges are needed to make up the difference.\n    \n    pages_for_3_page_letters = 3 * total_penpals\n    remaining_pages = total_pages - pages_for_3_page_letters\n    \n    # Each exchange of a 3-page letter to a 4-page letter increases the total page count by 1.\n    # Thus, the number of exchanges is equal to the remaining_pages.\n    num_penpals_3_page_letter = total_penpals - remaining_pages\n\n    return num_penpals_3_page_letter\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    favorite_position_from_left = 14\n    books_to_the_right_of_favorite = 6\n\n    total_books = favorite_position_from_left + books_to_the_right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # The worst case scenario for getting 3 different colored balls happens when we draw all balls of two colors first.\n    # Let's draw all 5 red balls and all 5 white balls.\n    red_and_white_balls = 5 + 5\n    # Now, the very next ball we draw must be yellow.\n    # So we add 1 to the count to get our first yellow ball.\n    at_least_balls_drawn = red_and_white_balls + 1\n    return at_least_balls_drawn\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # Assume the original volume of the box is 1\n    new_volume = original_volume * (1/2) ** 3  # Volume is halved in each dimension, so cubic effect\n    grams_in_new_box = 1200 * new_volume  # Scale the original grams by the new volume\n\n    return grams_in_new_box\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the length of the two pieces of ribbon\n    x, y = symbols('x y')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(x, 2 * y)  # One piece is twice as long as the other\n    equation2 = Eq(x + y, 12.75)  # The total length of the ribbon is 12.75 m\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The longer piece is represented by x in our equations\n    return solutions[x]\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi_before, lily_before = 120, 24\n    gigi_got, lily_got = symbols('gigi_got lily_got')\n    \n    equation1 = Eq(gigi_before + gigi_got, 3 * (lily_before + lily_got))\n    equation2 = Eq(gigi_got, lily_got)\n    \n    solutions = solve((equation1, equation2), (gigi_got, lily_got))\n\n    return solutions[gigi_got]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import primerange\n\n    # Generate all prime numbers from 1 to 20\n    primes = list(primerange(1, 21))\n\n    # Number of cards from 1 to 20 is 20, number of primes will be subtracted from total cards\n    non_prime_cards = 20 - len(primes)\n\n    return non_prime_cards\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Given that Brian is 14 and his father is 41\n    # The difference in their ages is 41 - 14 = 27\n    age_difference = 27\n\n    # Now we need to find the next time Brian's age is the reverse of his father's age.\n    # We will check each year after Brian's 14th and stop when we find the first match.\n    # Let brian_age be Brian's age and father_age be his father's age.\n    for i in range(1, age_difference):\n        brian_age = 14 + i\n        father_age = 41 + i\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since each egg takes 5 minutes to boil, and you can boil them simultaneously,\n    # the least amount of time needed to boil 3 eggs is still 5 minutes\n    return 5\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # The sum of the digits is 11 and the number is odd, the last digit is 1, 3, 5, 7, or 9.\n    for hundreds in range(1, 10): # First digit ranges from 1 to 9 (since it's a 3-digit number)\n        for tens in range(0, 10): # Second digit ranges from 0 to 9\n            for ones in [1, 3, 5, 7, 9]: # Third digit is odd, so it can only be 1, 3, 5, 7, or 9\n                if hundreds + tens + ones == 11: # Sum of digits must be 11\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    dan_calories_yesterday = 1000\n    return f\"calories_today < {dan_calories_yesterday}\"\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    dough_per_cookie_g = 45\n    dough_per_brownie_g = 150\n    number_of_cookies = 240\n    number_of_brownies = 2\n    \n    total_dough_used_g = (dough_per_cookie_g * number_of_cookies) + (dough_per_brownie_g * number_of_brownies)\n    total_dough_used_kg = total_dough_used_g / 1000  # converting grams to kilograms\n\n    remaining_dough_kg = initial_dough_kg - total_dough_used_kg\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_money = 100\n    day_count = 1\n\n    while day_count <= 15:\n        if day_count % 2 != 0:\n            total_money += 5  # Deposit £5\n        else:\n            total_money -= 8  # Spend £8\n        day_count += 1\n\n    return total_money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    \n    index = (1004 - 1) % pattern_length  # Subtract 1 because list indices start at 0\n    \n    return pattern[index]\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining = 10\n\n    # Work backwards: before eating on the second day\n    before_second_day = (remaining + 2) * 2\n\n    # Before eating on the first day\n    before_first_day = (before_second_day + 4) * 2\n\n    return before_first_day\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n\n    wine_gums_per_child = total_wine_gums / children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (1 + 2*3 - 4/5) * 6 + 7%8 - 9 + 10\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    a1 = 10  # first term\n    an = 298  # last term\n    d = 3  # common difference\n    n = ((an - a1) // d) + 1  # number of terms\n\n    # sum of arithmetic sequence formula: n/2 * (a1 + an)\n    sum_of_sequence = n * (a1 + an) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    dividend = 84.8\n    divisor = 400\n    ans = dividend / divisor\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    equation1 = Eq(18 * friends + 41, chocolates)\n    equation2 = Eq(23 * friends, chocolates + 34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    remaining = chocolates - 20 * friends\n\n    return remaining.subs(solutions)\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Loop through all 3-digit numbers to find the one that satisfies the conditions\n    for number in range(100, 1000):\n        is_multiple_of_27 = (number % 27 == 0)\n        is_multiple_of_7 = (number % 7 == 0)\n        digits_sum_17 = sum(map(int, str(number))) == 17\n        is_perfect_square = int(number**0.5)**2 == number\n        is_factor_of_89100 = (89100 % number == 0)\n        \n        conditions = [is_multiple_of_27, is_multiple_of_7, digits_sum_17, is_perfect_square, is_factor_of_89100]\n        \n        # Check if exactly three conditions are True\n        if conditions.count(True) == 3:\n            return number\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    book_cost = total_money * 0.15\n    money_after_book = total_money - book_cost\n    dvd_cost = money_after_book * 0.30\n    money_left = money_after_book - dvd_cost\n    \n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 / 7\n    return ans\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n    return balloons_still_needed\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    games_played = 55\n    total_games = (teams - 1)  # In a knockout tournament, total games = teams - 1\n\n    games_left = total_games - games_played\n    return games_left\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # We are given that the best boy soldier can do 50 push-ups.\n    # Mulan can do more than that. Therefore, the inequality is:\n    # Mulan's push-ups (m) > 50\n    # Since we are asked for an inequality, not a specific number,\n    # we will represent this as a string in Python because we can't\n    # return an actual inequality.\n\n    return 'm > 50'\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Since Tom takes 4 stones from Stack B, we're left with:\n    # Stack A: 20 stones, Stack B: 16 stones\n    # To ensure a win, Jerry must take stones such that the number of stones remaining\n    # in Stack A and Stack B are the same, so that no matter what Tom does afterward,\n    # Jerry can always mirror Tom's move and be the one to take the last stone.\n    # Thus, Jerry must take 4 stones from Stack A, making both stacks equal.\n    stones_to_take = 4\n    stack_to_take_from = \"A\"\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.\"\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Start distributing candies from the least possible to each child, which is 1 candy\n    # to meet the condition that each child must have more candies than the previous.\n    candies = [i for i in range(1, 8 + 1)]  # [1, 2, 3, ..., 8]\n\n    # Calculate the initial sum of distributed candies\n    distributed_candies = sum(candies)\n\n    # Calculate the remaining candies to be distributed\n    remaining_candies = 88 - distributed_candies\n\n    # Add the remaining candies to the last child to get the least possible number for the child\n    # with the most candies.\n    # Since all other children have unique increasing counts, it ensures they have the least possible count\n    # with the given constraints.\n    # The last child will therefore get 8 + remaining_candies\n    least_candies_for_last_child = candies[-1] + remaining_candies\n    \n    return least_candies_for_last_child\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    water_per_pail = 4\n    num_pails = 4\n    water_left = 7\n\n    original_volume = (water_per_pail * num_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # calculate the sum of the sequence without mistake\n    correct_sum = sum(range(1, 3*37+1, 3))\n    \n    # difference between the correct sum and actual sum indicates the error value\n    error_diff = correct_sum - 2011\n    \n    # Since the mistake is to subtract instead of adding, the error will be twice the subtracted value\n    error_num = error_diff // 2 \n    \n    # find who make this mistakes\n    mistake_position = (error_num + 2) // 3\n    \n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let g be the number of girls and b be the number of boys.\n    # According to the problem, the ratio of girls to boys is 7:9,\n    # and there are 16 more boys than girls.\n    # Therefore, we can set up the following equations:\n    # g/b = 7/9\n    # b = g + 16\n\n    # Because g/b = 7/9, we can say g = 7k and b = 9k for some integer k.\n    # Substituting b with g + 16, we get: 9k = 7k + 16\n    # Solving for k, we get: 2k = 16, so k = 8\n\n    # Now we can find the number of girls and boys using k.\n    g = 7 * 8\n    b = 9 * 8\n\n    # The total number of pupils is the sum of the number of girls and boys.\n    total_pupils = g + b\n\n    return total_pupils\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a and the common difference be d\n    a, d, n = symbols('a d n', real=True)  # n is the number of terms\n\n    # Sum of the first 4 numbers: a + (a + d) + (a + 2d) + (a + 3d) = 124\n    sum_first_4_eq = Eq(4*a + 6*d, 124)\n\n    # Sum of the last 4 numbers: (a + (n-1)d) + (a + (n-2)d) + (a + (n-3)d) + (a + (n-4)d) = 156\n    sum_last_4_eq = Eq(4*a + (4*n - 10)*d, 156)\n\n    # Sum of all the numbers: (n/2) * (2a + (n-1)d) = 210\n    total_sum_eq = Eq(n*(2*a + (n-1)*d)/2, 210)\n    \n    # Solve the system of equations for a, d, and n\n    solutions = solve((sum_first_4_eq, sum_last_4_eq, total_sum_eq), (a, d, n))\n\n    # Filter the solutions to only get the positive integer value of n\n    num_terms = [s[n] for s in solutions if s[n].is_integer and s[n] > 0]\n\n    return num_terms[0]\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    number_of_shortcakes = 25 / milk_per_shortcake\n    return int(number_of_shortcakes)\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 2 * 100  # Convert 2 meters to centimeters\n    piece_length_cm = 6  # Length of one piece in centimeters\n    complete_pieces = stick_length_cm // piece_length_cm  # Floor division for complete pieces\n\n    return complete_pieces\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = 100 * hundreds + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reverse_M = 10 * hundreds + ones * 100\n                return reverse_M // S\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let the least number of balls be x,\n    # then the numbers are x, x+1, x+2, x+3, x+4\n    # The sum S of these numbers is given by S = 5x + 10 = 160\n    # Solving for x gives us x = (160 - 10) / 5\n    x = (160 - 10) // 5\n    \n    # The student with the most balls has x+4 balls\n    student_with_most_balls = x + 4\n\n    return student_with_most_balls\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "def solution():\n    from math import comb\n    \n    total_balls = 10\n    balls_to_select = 7\n\n    num_ways = comb(total_balls, balls_to_select)\n\n    return num_ways\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 52\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_points) + (incorrect_answers * incorrect_points) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # The ones digit repeats every 4 powers for base numbers from 2 to 9\n    # 8^1 has a ones digit of 8\n    # 8^2 has a ones digit of 4 (since 64 ends in 4)\n    # 8^3 has a ones digit of 2 (since 512 ends in 2)\n    # 8^4 has a ones digit of 6 (since 4096 ends in 6)\n    # 8^5 has a ones digit of 8 (repeating the cycle)\n\n    # 8^30 will have the same ones digit as 8^(30 % 4) because of the cycle every 4 powers\n    # 30 % 4 is 2, so 8^30 has the same ones digit as 8^2\n\n    return (8 ** (30 % 4)) % 10  # (8^2) % 10 gives us the ones digit\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n\n    # equation derived from 13/10 = 1 + 1 / (a + 1 / (b + 1 / c))\n    equation = Eq(13/10, 1 + 1 / (a + 1 / (b + 1 / c)))\n\n    # find the solution of the equation that has natural numbers for a, b, and c\n    solutions = solve(equation, (a, b, c))\n    \n    # filter solutions to only include those with whole numbers\n    whole_number_solutions = [s for s in solutions if all(x.is_integer and x > 0 for x in s)]\n    \n    if not whole_number_solutions:\n        return \"No solution found with whole numbers\"\n\n    # there should be only one solution that fits\n    sol = whole_number_solutions[0]\n\n    # calculate a + 2b + 3c\n    ans = sol[0] + 2 * sol[1] + 3 * sol[2]\n\n    return ans\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return int(ans)\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # To finish eating 100 peaches with different numbers each day,\n    # the monkey should eat 1 peach on the first day, 2 on the second,\n    # 3 on the third, and so on.\n    # Hence, we are looking for the maximum n such that\n    # 1 + 2 + ... + n <= 100.\n    # This is the sum of an arithmetic series: n * (n + 1) / 2 <= 100.\n    \n    n = 1\n    while n * (n + 1) / 2 <= 100:\n        n += 1\n    n -= 1  # The last increment of n went over 100, so we subtract 1\n    \n    return n\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    sugar_concentration = 0.48  # Sugar concentration as a decimal\n    sugar_weight = total_weight * sugar_concentration  # Weight of sugar in the solution\n    water_weight = total_weight - sugar_weight  # Weight of water = total weight - weight of sugar\n    return water_weight\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            ans = N\n            break\n    return ans\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    result = (19 + 199 + 1999 + 19999 + 199999) + (4/5)*5\n    return result\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_pence = 408\n    fraction = 5 / 8\n\n    result = amount_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # Loop through all possible values for a, b, c, and d\n    for a in range(1, 10): # a cannot be 0 as it is the first digit of a 4-digit number\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    # Construct the number based on place value principle\n                    num = (a * 1000) + (b * 100) + (c * 10) + d\n                    num_abc = (a * 100) + (b * 10) + c\n                    num_ab = (a * 10) + b\n                    # Check if the sum matches the given condition\n                    if num + num_abc + num_ab + a == 1370:\n                        return num\n    return None\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    youngest_age = symbols('y')\n    common_difference = 1  # because they were born in consecutive years\n\n    # youngest, youngest+1, youngest+2 are the youngest three dwarfs\n    # Their ages add up to 42: y + (y+1) + (y+2) = 42\n    sum_youngest_three_eq = Eq(youngest_age + (youngest_age + 1) + (youngest_age + 2), 42)\n    youngest_age_solution = solve(sum_youngest_three_eq)\n\n    # Since we need the age of the seventh(first) dwarf, we add 6 (because they are born in consecutive years)\n    oldest_age = youngest_age_solution[0] + 6\n    \n    # Then, we get the consecutive ages of the oldest three: oldest-2, oldest-1, oldest\n    # Their ages add up to: (oldest - 2) + (oldest - 1) + oldest\n    sum_oldest_three = (oldest_age - 2) + (oldest_age - 1) + oldest_age\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    years_later = symbols('years_later')\n\n    total_age_future = Eq(janice_age + years_later + sister_age + years_later, 35)\n\n    ans = solve(total_age_future, years_later)[0]\n\n    return ans\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_score = 75\n    total_tests = 3\n    total_score_two_tests = 172\n\n    total_score_all_tests = average_score * total_tests\n    score_remaining_test = total_score_all_tests - total_score_two_tests\n\n    return score_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    return solutions[dad]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 1  # Start with the initial 1\n    for i in range(2, 9):\n        ans += sum([j / i for j in range(1, i + 1)])  # Add fractions from 1/i to i/i\n        ans += sum([j / i for j in range(i - 1, 0, -1)])  # Add fractions from (i-1)/i to 1/i in reverse\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the variables\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n    \n    # Define the equations based on the information given\n    equation1 = Eq(6, (2 / 7) * milk_chocolates)\n    equation2 = Eq(milk_chocolates, (3 / 4) * total_sweets)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (milk_chocolates, total_sweets))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let's denote f as the price of one football and v as the price of one volleyball.\n    # According to the first sentence, we can write the first equation:\n    # f + 2v = 60 (equation 1)\n    \n    # According to the second sentence, we can write the second equation:\n    # 2f = 60 - 16 (equation 2)\n    \n    # Now, let's solve the linear equations to find the price of one volleyball.\n    # From equation 2:\n    f = (60 - 16) / 2\n    \n    # Using the value of f, we can solve for v using equation 1.\n    v = (60 - f) / 2\n    \n    return v\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    return factorial(3)\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    ans = math.ceil(math.log2(num_people))\n    return ans\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median\n    ages = [7, 7, 8] # Start with mode and median values. The mode value occurs at least twice.\n    remaining_sum = 9*5 - sum(ages) # Calculate remaining sum to fulfill the mean requirement.\n    min_age = 7 - 6 # Minimum age in range based on the given range and mode.\n    \n    # To find the second oldest, we need to find the oldest, assuming the minimum age is the age of the youngest member.\n    # We gradually increase the age of the youngest member and try to fit other ages.\n    for youngest in range(min_age, 7):\n        for second in range(youngest, youngest + 7): # Second youngest can't be older than the oldest possible.\n            for oldest in range(second, second + 7): # Oldest can't be more than 6 years older than mode age of 7.\n                if oldest - youngest == 6 and mean(ages + [youngest, second, oldest]) == 9 and median(ages + [youngest, second, oldest]) == 8:\n                    return second  # Return the second oldest member's age.\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A can stand on any of the three middle positions\n    positions_for_A = 3\n    \n    # The remaining 4 people can be arranged in any order in the remaining 4 positions\n    permutations_of_others = 4 * 3 * 2 * 1\n    \n    # Total number of ways\n    total_ways = positions_for_A * permutations_of_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let the number of yellow flowers be y\n    # Then the number of red flowers would be 3y\n    # And the number of pink flowers is y - 7\n    # According to the question, we have 3 pink flowers, so we can write:\n    # y - 7 = 3, solving for y gives us the number of yellow flowers.\n\n    yellow_flowers = 3 + 7\n    red_flowers = 3 * yellow_flowers\n    total_flowers = red_flowers + yellow_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Original ratio equation\n    equation1 = Eq(apples/oranges, 3/8)\n    \n    # New ratio equation after removing 1 apple\n    equation2 = Eq((apples - 1)/oranges, 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    v_numbers = 0\n    for i in range(1, 10):  # hundreds digit\n        for j in range(0, 10):  # ones digit\n            for k in range(0, 10):  # tens digit\n                if i > k and k < j and i != j:  # high-low-high condition\n                    v_numbers += 1\n    return v_numbers\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    \n    return ans\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_capacity = 9 * 36\n    second_floor_students = 500 - first_floor_capacity\n    return second_floor_students\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    max_color_pencils = 48 // 9\n    for color_pencils in range(max_color_pencils, -1, -1):\n        notebooks = 10 - color_pencils\n        if notebooks * 3 + color_pencils * 9 == 48:\n            return color_pencils\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    ratio = 2  # common ratio of the geometric sequence\n    last_term = 56  # last given number in the sequence\n    next_term = last_term * ratio  # next term is the last term multiplied by the common ratio\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From Peter's first guess and John's response, we can deduce that:\n    # Two digits are 1 and 7, and they are in the correct positions.\n    # Thus, the number has the format _7_1\n\n    # From Peter's second guess and John's response:\n    # Two of the digits are 7 and 1, but since their positions are wrong and we\n    # already know that 7's and 1's position is fixed from the first guess,\n    # no digits from the second guess should be in the number.\n\n    # From Peter's third guess and John's response:\n    # All digits are correct but in wrong positions. Therefore:\n    # 3 should be in the second or fourth position (but can't be fourth since 1 is there).\n    # 5 should be in the first or third position.\n    # 4 should be in the third position since 5 cannot be in the second or fourth position.\n    # Hence, the number is 5_4_1 where _ represents the positions we are not sure about.\n    # And since 3 can't be in 4th position, it has to be on the second position.\n\n    # Combining all the information together, the number should be 5341.\n\n    return 5341\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the six consecutive even numbers\n    n1, n2, n3, n4, n5, n6 = symbols('n1 n2 n3 n4 n5 n6')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(n1 + 2, n2)\n    equation2 = Eq(n2 + 2, n3)\n    equation3 = Eq(n3 + 2, n4)\n    equation4 = Eq(n4 + 2, n5)\n    equation5 = Eq(n5 + 2, n6)\n    equation6 = Eq(n1 + n2 + n3 + n4 + n5 + n6, 510)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (n1, n2, n3, n4, n5, n6))\n    \n    # Calculate the difference between the mean and the median\n    numbers = [solutions[n1], solutions[n2], solutions[n3], solutions[n4], solutions[n5], solutions[n6]]\n    mean = sum(numbers) / 6\n    median = (numbers[2] + numbers[3]) / 2\n    ans = mean - median\n\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    digit_count = 0\n    for number in range(3, 48):\n        digit_count += str(number).count('7')\n    return digit_count\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(1, 51):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    \n    ans = min(count_2, count_5)\n    \n    return ans\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n    \n    sugar_weight = total_weight * concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n\n    final_height = initial_height + climb_up_1 - climb_down + climb_up_2\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    # Define symbols\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Form equations based on the information given\n    # The number of boys was 50% more than the number of girls initially\n    morning_ratio = Eq(boys, 1.5 * girls)\n    \n    # After 12 boys and 12 girls joined, the ratio becomes 19:14\n    afternoon_ratio = Eq(boys + 12, (19/14) * (girls + 12))\n    \n    # Solve the system of equations\n    solutions = solve((morning_ratio, afternoon_ratio), (boys, girls))\n    \n    # Calculate the total number of children in the afternoon\n    total_children = solutions[boys] + 12 + solutions[girls] + 12\n    \n    return total_children\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5 ** 100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    helen, oliver, rounds = symbols('helen oliver rounds')\n\n    # Original amount of cards\n    initial_helen = 18\n    initial_oliver = 22\n\n    # After a few rounds, Helen has 10 more cards than Oliver\n    equation1 = Eq(helen, oliver + 10)\n    # The sum of their cards remains unchanged\n    equation2 = Eq(initial_helen + rounds, helen)\n    equation3 = Eq(initial_oliver - rounds, oliver)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (helen, oliver, rounds))\n\n    return solutions[helen]\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    # Let m be the mass of mangoes, and s be the mass of strawberries\n    from sympy import symbols, Eq, solve\n    \n    m, s = symbols('m s')\n\n    # We have two equations based on the problem statement\n    # m = s + 448 (There was 448g more mangoes than strawberries)\n    equation1 = Eq(m, s + 448)\n    \n    # s = 2 * (m - 900) (After 900g of mangoes were given away, \n    # the mass of strawberries was twice as much as the mass of mangoes)\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, s))\n    \n    # We need to return the mass of strawberries at first\n    return solutions[s]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 for the number 1 which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # If 'n' is the smallest of the 5 consecutive numbers, the numbers are n, n+1, n+2, n+3, n+4\n    # The sum of these numbers is: n + (n+1) + (n+2) + (n+3) + (n+4) = 40\n    # Simplifying this, we get 5n + 10 = 40\n    # Therefore, 5n = 40 - 10\n    # So, n = (40 - 10) / 5\n\n    n = (40 - 10) / 5\n    return n\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Given values\n    fourth_term = 39\n    twelfth_term = 57\n    \n    # Calculate the common difference\n    difference = (twelfth_term - fourth_term) / (12 - 4)\n    \n    # Calculate the first term\n    first_term = fourth_term - (3 * difference)\n\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    max_number = int(''.join(sorted(digits, reverse=True)))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    ans = 4000404\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    valid_numbers = []\n\n    for p in permutations(digits, 5):\n        if p[0] != 0 and sum(p) % 9 == 0:\n            valid_numbers.append(int(''.join(map(str, p))))\n\n    max_diff_div_9 = (max(valid_numbers) - min(valid_numbers)) // 9\n    return max_diff_div_9\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n    \n    # Find the incorrectly calculated second addend\n    incorrect_second_addend = incorrect_sum - incorrect_addend\n    \n    # Calculate the correct sum\n    correct_sum = correct_addend + incorrect_second_addend\n    \n    return correct_sum\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the amount of salt in each solution\n    salt_30_percent = 30 * 0.30\n    salt_20_percent = 20 * 0.20\n    \n    # Combine the salt amounts\n    total_salt = salt_30_percent + salt_20_percent\n    \n    # Calculate total weight of the mixture without additional water\n    total_weight_without_water = 30 + 20\n    \n    # Calculate weight of the water needed to dilute it to 10% solution\n    # Let x be the weight of the water needed.\n    # The equation is: total_salt = 0.10 * (total_weight_without_water + x)\n    x = total_salt / 0.10 - total_weight_without_water\n    \n    return x\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # Johnson's speed in m/min\n    vicky_speed = 250    # Vicky's speed in m/min\n    race_distance = 3000  # Distance of the race in meters\n\n    johnson_time = race_distance / johnson_speed\n    vicky_time = race_distance / vicky_speed\n\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    prime_count = len(primes)\n    total_cards = 20\n\n    proportion = prime_count / total_cards\n\n    return proportion\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the Pigeonhole Principle, if you pick one card from each number, you'll have 13 cards,\n    # each one a different number. When picking the next card (14th card), you are guaranteed that it will \n    # have the same number as one of the previously drawn cards. Thus, you could have 2 cards of the same \n    # number at this point.\n    # To ensure at least 3 cards of the same number, you must continue this pattern. Without getting a third\n    # card of the same number, you could draw 2 more sets of 13 cards with different numbers, leaving you\n    # with 2 cards of each number (13 * 2 = 26 cards).\n    # To ensure a third card of the same number, you must draw one more card after these 26. The 27th card\n    # will be the one that ensures at least 3 cards have the same number.\n    return 27\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To ensure we get 29 balls of one color, we have to consider the worst-case scenario for the other two colors.\n    # First, to avoid getting 29 balls of the same color, we draw all balls of the other colors plus one.\n    # This is 40 red balls + 30 white balls + 1 (to ensure we get another color) = 71 balls\n\n    # Next, we need to avoid getting 28 balls of the second color, we draw all balls of the remaining color plus one.\n    # That would be 40 red or 30 white (the one not picked before) + 1.\n    # We choose the larger number to guarantee we get 28 of the second color, which is 40 red balls + 1\n\n    # Lastly, we do not need to ensure the last color because by now we'll have 29 of one color and 28 of another.\n    # So we add 10 to get 10 of the last color.\n    \n    # Thus, we need to pick at least 71 + 40 + 1 + 10 balls to ensure we get 29, 28, and 10 of each color.\n    balls_needed = 71 + 40 + 1 + 10\n    ans = balls_needed\n    return ans\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean = 8\n    total_numbers = 8\n\n    sum_of_numbers = sum(numbers)\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum_of_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    initial_sum = 1275\n    initial_first_term = 1\n    shifted_first_term = 2\n\n    # The new sequence starts at 2 and ends at 51, which is one more than the last term of the initial sequence\n    new_last_term = 51\n\n    # The sum of the new sequence is just one term more minus the first term of the initial sequence.\n    new_sum = initial_sum + new_last_term - initial_first_term\n\n    return new_sum\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    total_prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            total_prices.add(notebook + calendar)\n\n    return len(total_prices)\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume transferred from each container\n    x = symbols('x')\n\n    # Initial amount of lime in each bottle\n    lime_A = 5 * 0.10\n    lime_B = 3 * 0.20\n    \n    # The final volume of each bottle after transfer\n    final_volume_A = 5 - x\n    final_volume_B = 3 + x\n    \n    # The final amount of lime in bottle A is the initial amount minus what was transferred out plus what was transferred in\n    final_lime_A = lime_A - 0.10 * x + 0.20 * x\n    \n    # The final amount of lime in bottle B is the initial amount plus what was transferred out minus what was transferred in\n    final_lime_B = lime_B + 0.10 * x - 0.20 * x\n    \n    # The concentrations will be the same, so we set them equal to each other and solve for x\n    equation = Eq(final_lime_A / final_volume_A, final_lime_B / final_volume_B)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for perm in permutations('ABCDEFGH'):\n        if perm.index('C') > perm.index('A') and perm.index('C') < perm.index('B') or \\\n           perm.index('C') > perm.index('B') and perm.index('C') < perm.index('A'):\n            if abs(perm.index('D') - perm.index('E')) == 1 and abs(perm.index('F') - perm.index('G')) == 1:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    length_painting = 90\n    length_lego = length_painting - 70.5\n    ratio_length_to_breadth = 5 / 2\n\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    return int(breadth_lego)\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    brothers_money = total / 3  # Since she has twice as much left, brother has a third before she loses the coin\n\n    for lost_coin in [50, 20, 10, 5]:\n        if total - lost_coin == 2 * brothers_money:\n            return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initialize the sum of the series\n    total_sum = 0\n\n    # Build the series by concatenating '123' and summing\n    number = ''\n    for i in range(123):\n        number += '123'\n        total_sum += int(number)\n\n    # Convert the total sum to string to find the hundreds digit\n    total_str = str(total_sum)\n    \n    # The hundreds digit is the third last digit in the string\n    hundreds_digit = total_str[-3] if len(total_str) >= 3 else '0'\n\n    return int(hundreds_digit)\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # converting pence to pounds\n\n    total_pay = (cake_price + milk_price) - voucher\n\n    return total_pay\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    normal_hours = 8\n    overtime_rate = normal_rate * (1 + 1/4)\n    hours_worked = 10\n    overtime_hours = hours_worked - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan finished 200m\n    jaan_speed = 8  # Jaan's speed in m/s\n    jaan_time = jaan_distance / jaan_speed  # Time taken by Jaan to finish 200m\n\n    kane_distance = jaan_distance - 12.5  # Kane was 12.5m behind\n    kane_speed = kane_distance / jaan_time  # Kane's speed\n\n    return kane_speed\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35/100 * 60\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for each person's work rate\n    john, raj, pete = symbols('john raj pete')\n    \n    # Convert minutes to hours for unified units\n    time_jr = 1 + 12/60  # John and Raj time in hours\n    time_rp = 1 + 30/60  # Raj and Peter time in hours\n    \n    # Set up equations based on the rates and given times\n    equation1 = Eq(1/john + 1/raj + 1/pete, 1)       # Together, they finish in 1 hour\n    equation2 = Eq(1/john + 1/raj, 1/time_jr)         # John and Raj finish in 1 hour and 12 minutes (time_jr)\n    equation3 = Eq(1/raj + 1/pete, 1/time_rp)         # Raj and Peter finish in 1 hour and 30 minutes (time_rp)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, raj, pete))\n    \n    # Find how long will Raj take to finish the job by himself (Convert hours to minutes)\n    raj_time = 1 / solutions[raj] * 60\n    \n    return raj_time\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Each block of '928' has a sum of digits equal to 19 \n    # Which has a remainder of 1 when divided by 9\n    # Since there are 33 blocks of '928' to make a 99-digit number\n    # We can simply calculate the remainder of 33 * 1 when divided by 9\n    total_remainder = (33 * 1) % 9\n\n    return total_remainder\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two brothers' ages.\n    y, e = symbols('y e')\n    \n    # Equation 1: The sum of the current ages of the two brothers is 42.\n    eq1 = Eq(y + e, 42)\n    \n    # Equation 2: A few years ago (let's say 'a' years ago), when the elder brother\n    # was at the current age of the younger brother, the younger brother was exactly\n    # half the elder brother's current age.\n    # This translates to: e - a = y and y - a = e / 2\n    # These combined give us: e - y = y / 2, which simplifies to e = 3y / 2\n    eq2 = Eq(e, 3*y / 2)\n    \n    # Now we solve the two equations simultaneously.\n    solution = solve((eq1, eq2), (y, e))\n    \n    # 'e' corresponds to the elder brother's age.\n    return solution[e]\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # We need to consider the worst-case scenario to make sure we have at \n    # least three of the same colour.\n    # If we take out 2 white, 2 blue, 2 green, and 2 orange,\n    # we have taken 8 balls in total but haven't ensured three of the same color.\n    # The next ball we take out (regardless of its color), \n    # will guarantee that we have at least three of one color.\n    # So the answer is 2 white + 2 blue + 2 green + 2 orange + 1 any color = 9\n    return 9\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = 10 * tens_digit + ones_digit\n            new_number = 10 * ones_digit + tens_digit\n            if new_number == (original_number / 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    kg_per_box = 14 / boxes_for_14kg\n    total_kg = 66.5\n    \n    boxes_needed = total_kg / kg_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let n be the number of teams\n    n = Symbol('n')\n\n    # Each team plays every other team twice, which is n-1 opponents, and 2 matches per opponent\n    # The total number of matches can be found by the combination n*(n-1) and then divided by 2, \n    # because each match is counted twice, once for each team.\n    equation = n*(n-1)/2 - 30\n\n    # Find the solution to the equation for the number of teams\n    num_teams = solve(equation, n)\n\n    # Filtering out the negative number since the number of teams cannot be negative\n    ans = [t for t in num_teams if t > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using the Pigeonhole Principle\n    countries = 11\n    participants_per_country_to_ensure_same_country = 5 - 1\n    max_participants_without_ensuring_same_country = countries * participants_per_country_to_ensure_same_country\n    # Add 1 to ensure at least one country will have 5 participants\n    min_participants_to_ensure_same_country = max_participants_without_ensuring_same_country + 1\n\n    return min_participants_to_ensure_same_country\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the rope and y be the perimeter of the tree\n    x, y = symbols('x y')\n    \n    # When the rope is wrapped 10 times, it is 3 meters longer than needed\n    equation1 = Eq(10*y + 3, x)\n    \n    # When the rope is wrapped 12 times, it is 3 meters shorter than needed\n    equation2 = Eq(12*y - 3, x)\n\n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Length of the rope for 8 turns around the tree\n    length_for_8_turns = 8 * solutions[y]\n\n    return length_for_8_turns\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    total_students = 31\n    tables_per_row = 5\n    rows_needed = (total_students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later for their sum of ages to be 40.\n    # If we consider the current sum of ages is 34, as years pass by,\n    # they both will age by x years. So the sum of their ages will increase by 2x (Because there are 2 people).\n    \n    # We can set up the following equation:\n    # Current sum of ages + 2 * x (increase for both) = Future sum of ages\n    # 34 + 2 * x = 40\n    # 2 * x = 40 - 34\n    # x = (40 - 34) / 2\n    \n    x = (40 - 34) / 2\n    return int(x)\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0:  # Leading digit can't be zero\n            continue\n        if (A*1000 + B*100 + C*10 + D) + (A*1000 + D*100 + C*10 + B) == (C*1000 + B*100 + B*10 + A):\n            return A + B + C + D\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    \n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n    \n    return solutions[kitty]\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    answer = 28\n    original_number = (answer - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    def new_operation(number, times):\n        return number - sum(range(1, times))\n\n    ans = new_operation(111, 7)\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    # Mary spent 3/7 of her money on a bag\n    spent = 3 / 7 * money\n    # Not used is the remaining\n    not_used = money - spent\n    # The difference between the amount spent and not used is 12\n    equation = Eq(spent - not_used, 12)\n\n    # Solve the equation\n    solutions = solve(equation, money)\n\n    # Calculate the amount spent on the bag\n    amount_spent = 3 / 7 * solutions[0]\n    return amount_spent\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    sticker_excess_diff = 190 - 50\n    stickers_per_pupil_diff = 17 - 13\n\n    pupils = sticker_excess_diff // stickers_per_pupil_diff\n    stickers = (pupils * 13) + 190\n\n    return stickers\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Then the ages of the youngest three are x, x + 1 and x + 2\n    # Their sum is given as 42\n    youngest_three_sum = 42\n    x = (youngest_three_sum - 3) // 3  # Since 3x + 3 = 42\n\n    # The ages of the oldest three are x + 4, x + 5, x + 6\n    oldest_three_sum = (x + 4) + (x + 5) + (x + 6)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let x, y, z be the number of toys made by Factory A, B, and C respectively.\n    # We have the following system of equations:\n    # x + y = 447\n    # y + z = 335\n    # x + y + z = 659\n    # We can rearrange the equations to find y:\n    # Add the first two equations to get x + 2y + z = 782,\n    # and then subtract the third equation from this sum to get y.\n\n    total_toys = 659\n    a_and_b = 447\n    b_and_c = 335\n\n    # x + 2y + z = a_and_b + b_and_c\n    # Subtract total_toys to get y\n    y = a_and_b + b_and_c - total_toys\n\n    return y\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n    \n    months_needed = debt_in_bitcoins / salary_per_month\n    \n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    # The formula for the sum of squares is: S = 1/6 * n * (n + 1) * (2n + 1)\n    # We need to adjust our formula to accomodate the series which starts from 5 and has increments of 5.\n    # Let's redefine our series in the form of 1^2, 2^2, ... (n/5)^2 to use the formula directly.\n    # The last term is 100, hence n/5 = 100/5 = 20. So n = 20.\n\n    n = 20\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1) \n    # Since our series is in the form of (5k)^2, we need to multiply our sum by 5^2 = 25 to adjust for this difference.\n    ans = 25 * sum_of_squares\n    \n    return int(ans)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    boys = (total_pupils - difference) / 2\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return float(total_cost)\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n    \nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    # Iterate through all 3-digit integers\n    for i in range(100, 1000):\n        digits = [int(x) for x in str(i)]  # Split the number into individual digits\n        if digits[1] < digits[0] > digits[2] and digits[1] < digits[2]:\n            count += 1  # Increment count if this is a V-number\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = (3 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray_sausages = 21\n    total_sausages = initial_trays * initial_mean + additional_tray_sausages\n    total_trays = initial_trays + 1\n    new_mean = total_sausages / total_trays\n    return new_mean\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (137 + 263) / 20\n    length_second_bridge = speed * 27 - 137\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total_money = rani + brenda\n    equal_amount = total_money // 2\n    money_to_give = brenda - equal_amount\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq((2/5) * blue, (3/5) * red)\n    equation2 = Eq(blue + red, 125)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # There are 7 books and we need to choose 1 book for the first student\n    ways_for_first_student = factorial(7) / factorial(6)  # 7C1\n\n    # Now 6 books are left and we need to choose 1 book for the second student\n    ways_for_second_student = factorial(6) / factorial(5)  # 6C1\n\n    # Now 5 books are left and we need to choose 1 book for the third student\n    ways_for_third_student = factorial(5) / factorial(4)  # 5C1\n\n    # The rest of the 4 books can be arranged in any order among the remaining 4 spots\n    # for the first student who has already 1 book.\n    remaining_books_arrangement = factorial(4)\n\n    # Multiply the number of ways to find the total different ways\n    total_ways = ways_for_first_student * ways_for_second_student * ways_for_third_student * remaining_books_arrangement\n    \n    return int(total_ways)\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of a watch and a handbag\n    watch, handbag = symbols('watch handbag')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n    \n    # Solve the equations for the price of a watch and a handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    # Calculate the total cost of 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n    \n    year_difference = 2008 - 1996\n    daughter_birth_year = 2008 - grandmother_age_2008\n    grandmother_age_at_daughter_birth = daughter_birth_year - (1996 - daughter_age_1996)\n    \n    return grandmother_age_at_daughter_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since A must get the ball back after 3 passes, we can consider the sequence of passes.\n    # Denote the sequence of passes by characters, starting with A, e.g., ABCA (A -> B -> C -> A).\n    # The first pass is always from A to another person, leaving 3 choices (B, C, or D).\n    # The second pass must be from this new person to someone who is not A and not themselves, leaving 2 choices.\n    # The third pass must be back to A.\n    # No need to choose for the last pass as it is fixed to be back to A.\n    # The number of different methods is the product of the choices for the first two passes.\n\n    # First pass (A to someone else): 3 choices\n    # Second pass (new person to another non-A): 2 choices\n    # No choice for the last pass as the ball must go back to A\n\n    num_methods = 3 * 2  # Multiply the choices\n\n    return num_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    result = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return result\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Since each child needs to get a different number of pieces,\n    # we start by giving each child one piece to satisfy the condition\n    # that each gets at least one piece.\n    # This leaves us with 88 - 8 = 80 pieces to distribute.\n    \n    pieces_left = 88 - 8\n    \n    # Now, we need to distribute the remaining pieces among 8 children differently.\n    # For the child with the most pieces to get the least amount possible,\n    # the other children should get as many pieces as possible. Hence, we distribute\n    # the pieces in such a way that after giving each child a distinct amount,\n    # the last child gets the remainder.\n    \n    # Starting from the second child, we give out pieces in increasing amounts.\n    # The first child already has 1 piece, for the second child we give 2 pieces more,\n    # for the third child, 3 pieces more than the second, and so on.\n    \n    # Formula for sum of first n natural numbers is n * (n + 1) / 2\n    \n    # So we need to find the largest n for which the sum of the first\n    # (n - 1) natural numbers (this excludes the highest child which we're trying to minimize)\n    # is less than or equal to the number of pieces left.\n    \n    # Find n such that (n * (n - 1)) / 2 <= pieces_left\n    # Use greedy strategy to get maximum n. Start with the highest n,\n    # since we are distributing to n-1 children, we start with 8\n    \n    n = 8\n    while n > 0:\n        if (n * (n - 1)) / 2 <= pieces_left:\n            break\n        n -= 1\n    \n    # Once we find such an n, the remaining pieces go to the child with the most pieces.\n    # The child with the most will have 1 (initial piece) + difference sum (pieces left after giving out to n - 1 children)\n    \n    most_pieces = 1 + (pieces_left - (n * (n - 1)) // 2)\n    \n    return most_pieces\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution_weight = 200\n    lenny_solution_weight = 300\n    leroy_salt_weight = leroy_solution_weight * 0.35\n    lenny_salt_weight = lenny_solution_weight * 0.50\n\n    total_solution_weight = leroy_solution_weight + lenny_solution_weight\n    total_salt_weight = leroy_salt_weight + lenny_salt_weight\n\n    concentration = total_salt_weight / total_solution_weight\n\n    return concentration * 100  # converting to percentage\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Total permutations for 8 people\n    total_permutations = factorial(8)\n\n    # Treat A and B as one person when they are together, so we have 7 entities to arrange\n    AB_together_permutations = factorial(7) * 2  # AB and BA\n\n    # When C and D are together, we have 7 entities to arrange (including CD/DC as one)\n    CD_together_permutations = factorial(7) * 2  # CD and DC\n\n    # Subtract the unwanted scenarios (when C and D are together) from total permutations\n    valid_permutations = total_permutations - CD_together_permutations\n\n    # Calculate final answer considering when A and B are together and C and D are not\n    ans = AB_together_permutations * (valid_permutations // total_permutations)\n\n    return ans\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    return int((12 ** (50/75)) // 1)\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    rotten_oranges = 34\n    bought_oranges = 25\n    final_count = 133\n\n    initial_count = final_count - bought_oranges + rotten_oranges\n\n    return initial_count\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    mike_left = 6\n    valeria_left = 22\n    \n    # Let x be the number of candies Valeria has.\n    # Let y be the number of candies Mike has.\n    # They both eat the same amount, say z candies each.\n    # Therefore, we have the following system of equations:\n    # x - z = valeria_left\n    # y - z = mike_left\n    # x + y = total_candy\n    \n    # Rearrange the equations:\n    # x = valeria_left + z\n    # y = mike_left + z\n    \n    # Substitute these into the total equation:\n    # (valeria_left + z) + (mike_left + z) = total_candy\n    # Simplify:\n    # 2 * z + valeria_left + mike_left = total_candy\n    # Solve for z:\n    z = (total_candy - valeria_left - mike_left) / 2\n\n    # Now find the amount of candy Valeria has:\n    valeria_candy = valeria_left + z\n    \n    return valeria_candy\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    ans = psi(psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 20))\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls be x\n    girls = symbols('girls')\n    boys = 36 - girls  # Since the total number of students is 36\n\n    # Total score of girls is 88 * girls\n    # Total score of boys is 91 * boys\n    # Total score of class is 89 * 36\n    equation = Eq(88 * girls + 91 * (36 - girls), 89 * 36)\n\n    # Solve the equation\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for different pets\n    legs_cats = 2 * 4  # 2 cats with 4 legs each\n    legs_dogs = 2 * 4  # 2 dogs with 4 legs each\n    legs_rabbit = 1 * 4  # 1 rabbit with 4 legs\n    legs_birds = 2  # Each bird has 2 legs\n    \n    # Total number of legs without birds\n    total_legs_without_birds = legs_cats + legs_dogs + legs_rabbit\n    \n    # Calculate the number of legs that the birds have\n    legs_birds_total = 28 - total_legs_without_birds\n    \n    # Each bird has 2 legs, so divide by 2 to get the number of birds\n    num_birds = legs_birds_total // legs_birds\n\n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Original work rate is 5 people for 6 hours\n    original_work_rate = 5 / 6\n    \n    # The neighbour's fence is twice as long, so the work needed is doubled\n    # Work = number_of_people * time\n    # We define required time to be less than 5 hours\n    required_time = 5\n    \n    # We need to find the minimum number of people, so we start with 1 person and increment\n    number_of_people = 1\n    while True:\n        neighbour_work_rate = number_of_people / required_time\n        \n        # Check if the neighbour's work rate is at least twice the original to ensure completion within 5 hours\n        if neighbour_work_rate >= 2 * original_work_rate:\n            return number_of_people\n        \n        # Increment the number of people if not sufficient\n        number_of_people += 1\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_new_amount = cookies_per_gram * 21.6\n    return cookies_with_new_amount\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_trip = 12  # time to walk from first to fifth floor\n    total_time_available = 30  # total time Alison has\n\n    # Calculate the number of flights Alison can walk in 30 minutes\n    num_flights = total_time_available / time_for_one_trip\n\n    return int(num_flights)\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert base 8 number to base 10\n    N = int('12345654321', 8)\n    # Find remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    # Sum of remainders\n    sum_remainders = remainder_7 + remainder_9\n    return sum_remainders\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_past_age = 7  # Three years ago\n    combined_future_age = combined_past_age + (3 + 4) * 2  # Add 3 years, and 4 more for each cat\n    return combined_future_age\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (1/6)*n*(n+1)*(n+2)\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    num = 2016\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and (i**0.5).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    # Let's denote the book's price as 'b' and the magazine's price as 'm'\n    b, m = symbols('b m')\n\n    # Two equations given from the problem\n    equation1 = Eq(2 * b + 3 * m, 24.90)\n    equation2 = Eq(b + m, 10)\n\n    # Solving the system of equations\n    solved_values = solve((equation1, equation2), (b, m))\n\n    # We want to find the price of one magazine\n    magazine_price = solved_values[m]\n\n    return magazine_price\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    for i in range(1, 60):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(1, 10): # A cannot be 0\n        for B in range(0, 10):\n            for C in range(1, 10): # C cannot be 0\n                for D in range(0, 10):\n                    if len({A, B, C, D}) == 4: # All digits must be different\n                        ABA = 100 * A + 10 * B + A\n                        CDC = 100 * C + 10 * D + C\n                        if ABA + CDC == 726:\n                            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # To ensure getting 1 yellow shirt, Annabella must go through the worst case scenario of picking all shirts that are not yellow first.\n    \n    # Number of non-yellow shirts\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # To get 1 yellow shirt for sure, Annabella must take out all non-yellow shirts plus one more, which will be yellow.\n    ans = non_yellow_shirts + 1\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n\n    return packs_needed\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100  # percentage\n    return concentration\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Sum the whole numbers and the fractions separately\n    whole_numbers_sum = 9 + 99 + 199 + 2999 + 39999\n    fractions_sum = (4/5) * 5 # There are five terms each with a fraction of 4/5\n\n    # Add the 1 to the sum of whole numbers\n    total_sum = whole_numbers_sum + fractions_sum + 1\n\n    return total_sum\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Since the sequence is descending and not arithmetic or geometric,\n    # we can guess the pattern by looking at the differences between the existing numbers.\n    difference1 = 94 - 80\n    difference2 = 80 - 73\n    difference3 = 73 - 66\n    \n    # Calculate the missing difference that follows the pattern\n    missing_difference = difference2 - (difference1 - difference2)\n    \n    # Apply the difference pattern to find the missing number\n    missing_number = 94 - missing_difference\n\n    return missing_number\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    bruno_position_from_front = 9\n    bruno_position_from_end = total_people - bruno_position_from_front + 1\n    return bruno_position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 / 20\n    return n\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    ml_in_litre = 1000\n\n    total_ml_sold = (wine_glasses_sold * wine_glass_ml) + (tumblers_sold * tumbler_ml)\n    cartons_needed = total_ml_sold / ml_in_litre\n\n    return int(cartons_needed) if total_ml_sold % ml_in_litre == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students_face_teacher = 0\n\n    for i in range(1, 61):\n        # Check if the number is a multiple of 3 or 5, but not both (multiples of 15).\n        if (i % 3 == 0) ^ (i % 5 == 0):\n            students_face_teacher += 1\n\n    return students_face_teacher\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, p, l = symbols('a p l')  # a is for avocados, p is for peaches, l is for lemons\n\n    original_ratio = Eq(a/p, 2/9) & Eq(p/l, 9/8)\n    new_ratio = Eq((p - 12) / (l - 60), 6/5)\n\n    sold_items = Eq(a - 52, 2 * (p - 12) / 9) & Eq(p - 12, 9 * (l - 60) / 8)\n\n    # We solve the system of equations to find the number of each fruit after selling\n    solutions = solve((original_ratio, new_ratio, sold_items), (a, p, l))\n\n    total_left = solutions[a] - 52 + solutions[p] - 12 + solutions[l] - 60\n\n    return total_left\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since the last digit of powers of 2 cycles every 4 steps: 2 -> 4 -> 8 -> 6 -> 2 ...\n    # Find the remainder of 859433 when divided by 4 to determine the position in the cycle\n    remainder = 859433 % 4\n    # Define the last digit cycle of powers of 2\n    cycle = {0: 6, 1: 2, 2: 4, 3: 8}\n    # Return the last digit based on the remainder\n    return cycle[remainder]\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm\n\n    # The least common multiple of 2, 4, and 6\n    lcm_of_2_4_6 = lcm(2, 4, 6)\n\n    # Start with the LCM and check for numbers that also satisfy the condition with 7\n    age = lcm_of_2_4_6\n    while True:\n        if age % 7 == 5:\n            return age\n        else:\n            # Increment the age by the LCM of 2, 4, and 6\n            age += lcm_of_2_4_6\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    equation1 = Eq(jill, 6/5 * jess)\n    equation2 = Eq((jill - 8), (4/7) * (jess + 8))\n\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for num_digits in range(1, 8):  # Try all lengths for the number\n        for subset in permutations(range(1, 8), num_digits):  \n            number = int(''.join(map(str, subset)))\n            if all(number % digit == 0 for digit in subset): # Check if divisible by all digits\n                max_number = max(max_number, number) # Update the maximum number\n    return max_number\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for i in range(1, 900, 2):\n        sum_odd = 0\n        length = 0\n        for n in range(i, 900, 2):\n            sum_odd += n\n            length += 1\n            if sum_odd == 900:\n                max_length = max(max_length, length)\n                break\n            elif sum_odd > 900:\n                break\n    return max_length\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = (120 // divisor + 1) * divisor + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A be Adam's weight, B be Ben's weight, and C be Carl's weight.\n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Sum all the equations to get 2(A + B + C):\n    total_sum = (102 + 97 + 93)  # A+B + B+C + A+C = 2*(A+B+C)\n\n    # Divide by 2 to get the total weight of Adam, Ben and Carl:\n    total_weight = total_sum / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_number = min(numbers)\n    return smallest_number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n    height_in_metres = height_metres + height_centimetres / 100\n\n    return height_in_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * 1.25\n    third_test = second_test * 0.80\n    \n    total_marks = first_test + second_test + third_test\n    \n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    # Create equations based on the word problem\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    # Return the result\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):   # 0 - 23 hours\n        for minute in range(60):   # 0 - 59 minutes\n            # Convert hour and minute to string and concatenate\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count how many times '4' appears in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    # Since we need to check if 233 can be divided evenly by any number of students\n    # greater than 1 and less than 233, we need to check if 233 is a prime number.\n    # Because if it's prime, it can't be divided evenly by any number other than 1 and itself.\n\n    # Check if 233 is a prime number\n    return isprime(233)\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum((7*i)**2 for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    return 4.22 + 31.49 + 0.76\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes_list = list(primerange(130, 151))\n    return len(primes_list)\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Sam's workings are incorrect. Let's find the correct number of multiples.\n\n    # Find the first multiple of 4 greater than or equal to 56\n    first_multiple = 56 if 56 % 4 == 0 else (56 // 4 + 1) * 4\n    \n    # Find the last multiple of 4 less than or equal to 92\n    last_multiple = 92 if 92 % 4 == 0 else (92 // 4) * 4\n    \n    # Calculate the number of multiples of 4 between the two\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    select_students = 2\n    ways_to_select = comb(total_students, select_students)\n    return ways_to_select\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Distance between the towns\n    distance = 144  # in km\n\n    # Speed of the ship in still water\n    speed_ship = 15  # in km/h\n\n    # Time taken to travel downstream\n    time_downstream = 8  # in hours\n\n    # Speed of the river current\n    # We can find the speed of the river by knowing that the ship travels distance in 8 hours downstream\n    speed_river = (distance / time_downstream) - speed_ship\n\n    # Now we calculate the time it would take to travel upstream\n    # The speed of the ship upstream would be the speed in still water minus the speed of the river\n    speed_upstream = speed_ship - speed_river\n\n    # Time taken to come back upstream is distance divided by the upstream speed\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    john_wait_time = datetime.strptime(\"3:15 PM\", \"%I:%M %p\")\n    tom_arrival_time = john_wait_time + timedelta(hours=1, minutes=25)\n    ans = tom_arrival_time.strftime(\"%I:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            ans += i/j\n\n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of food the hippo and kangaroo eat per day\n    hippo_daily, kangaroo_daily = symbols('hippo_daily kangaroo_daily')\n\n    # The system of equations based on the problem statement\n    # Equation 1: The hippo eats 45 kg more food than the kangaroo per day\n    equation1 = Eq(hippo_daily, kangaroo_daily + 45)\n    \n    # Equation 2: After 20 days, the total food consumed by the hippo is 10 times that of the kangaroo\n    equation2 = Eq(20 * hippo_daily, 10 * 20 * kangaroo_daily)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo_daily, kangaroo_daily))\n\n    # Calculate the total food consumed by the hippo in 20 days\n    hippo_total = 20 * solutions[hippo_daily]\n\n    return hippo_total\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Amount of work A can do in a day\n    a_rate = 1 / 15\n    # Amount of work B can do in a day\n    b_rate = 1 / 20\n    \n    # Amount of work done by both in 2 days\n    work_done = 2 * (a_rate + b_rate)\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    \n    # Days A needs to finish the remaining job alone\n    days_for_a = remaining_work / a_rate\n    \n    return days_for_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure that you have at least two balls of the same colour,\n    # in the worst case you would pick alternating colours.\n    # Since there are only two colours, after 3 picks you are guaranteed\n    # to have at least two balls of the same colour (pigeonhole principle).\n    return 3\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    students_needed = (zodiac_signs - 1) * 10 + 1\n    return students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for p in permutations(students):\n        if p.index('B') < p.index('A') < p.index('C') or p.index('C') < p.index('A') < p.index('B'):\n            if abs(p.index('D') - p.index('E')) == 1:\n                if abs(p.index('F') - p.index('G')) != 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Maximum balls that can be drawn without ensuring 10 balls of the same color\n    max_draw_without_10_same = (5 - 1) + (15 - 1) + (20 - 1)\n    # One more ball must be drawn to ensure at least 10 balls of one color\n    ans = max_draw_without_10_same + 1\n    return ans\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "from math import lcm\n\ndef solution():\n    florence_cycle_spaghetti = 7\n    florence_cycle_apple_pie = 3\n    \n    next_common_day = lcm(florence_cycle_spaghetti, florence_cycle_apple_pie)\n    return next_common_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the principle of inclusion-exclusion\n    # At least one group must be counted twice if we only have 30 children\n    overlap = (children_with_dogs + children_with_cats) - total_children\n\n    return overlap\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_candy_position = 3\n\n    last_candy_position = (first_candy_position + total_candies - 1) % total_children\n    if last_candy_position == 0:  # If the position is 0, it means the last candy goes to the 9th child.\n        last_candy_position = total_children\n\n    return last_candy_position\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data_set = [12, 145, 32, 77, 62]\n    range_of_data_set = max(data_set) - min(data_set)\n    return range_of_data_set\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    savings_per_month = 12\n    total_months = 3\n    total_savings = savings_per_month * total_months\n    return total_savings\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of skirts\n    skirts = symbols('skirts')\n\n    # Given that the number of shirts is 36 less than the number of skirts\n    shirts = skirts - 36\n\n    # After selling, she had 2/3 of shirts and 5/6 of skirts remaining\n    remaining_shirts = (2/3) * shirts\n    remaining_skirts = (5/6) * skirts\n\n    # The total number of shirts and skirts she had left was 72\n    equation = Eq(remaining_shirts + remaining_skirts, 72)\n\n    # Solving the equation for the number of skirts\n    solution_skirts = solve(equation, (skirts))\n\n    return solution_skirts[0]\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # distance to the place and back\n    total_distance = 120 * 2 # miles\n    # time taken to travel to the place at 20 miles per hour\n    time_to_place = 120 / 20 # hours\n    # total time for the round trip at an average speed of 30 miles per hour\n    total_time = total_distance / 30 # hours\n    # time taken to travel back from the place is total time minus time to place\n    time_back = total_time - time_to_place\n    # speed needed to travel back within the remaining time\n    speed_back = 120 / time_back # miles per hour\n    return round(speed_back, 2) # round to 2 decimal places for precision\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # The table is a representation of an arithmetic sequence where each term increases by a constant difference.\n    # I assume it's a traditional table structure where the difference between consecutive terms is uniform.\n    # Since the problem statement does not give explicit numbers, I will represent the table as an arithmetic\n    # sequence with a first term (a), the difference between terms (d), and the number of terms (n).\n\n    # We can calculate the sum of the arithmetic sequence using the formula: S = n/2 * (a + l)\n    # where:\n    # n is the number of terms\n    # a is the first term\n    # l is the last term of the sequence\n\n    # However, without the explicit values for the first term, the difference, and the number of terms,\n    # I will need to use symbolic variables and assume the sequence starts with term a, has n terms, and a common difference of d.\n\n    from sympy import symbols, solve, summation\n\n    # Define symbols\n    n, a, d = symbols('n a d')\n\n    # The last term (l) of an arithmetic sequence is given by the formula: l = a + (n - 1) * d\n    l = a + (n - 1) * d\n\n    # Sum of the arithmetic sequence formula\n    sum_formula = n / 2 * (a + l)\n\n    # Calculate the sum of the sequence\n    sum_seq = summation(sum_formula, (n, 1, n))\n\n    return sum_seq\n\n# Assign to variable ans the result returned by function solution\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = nell_sweets * (total_ratio / nell_ratio)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 35):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # Since it takes 2 minutes to make a single cut, creating 5 pieces\n    # will require 4 cuts in total (since the first cut gives 2 pieces,\n    # the second cut gives 3 pieces, and so on).\n    \n    # Number of cuts needed to create 5 pieces:\n    cuts_needed = 5 - 1\n    \n    # Total time taken to make those cuts:\n    total_minutes = cuts_needed * 2\n    \n    return total_minutes\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    hay_for_12_horses_for_15_days = 12 * 15\n    hay_per_horse_for_15_days = hay_for_12_horses_for_15_days / 12\n    days_for_20_horses = hay_per_horse_for_15_days / 20\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    total_original_numbers = 3\n    total_new_numbers = 4\n\n    # The total of the original three numbers\n    total_original_sum = original_average * total_original_numbers\n    # The total sum after adding the new number\n    total_new_sum = new_average * total_new_numbers\n\n    # The number to be added to get the new average\n    number_to_add = total_new_sum - total_original_sum\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, heman, sean = symbols('jovan heman sean')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, heman, sean))\n\n    total_marbles = solutions[jovan] + solutions[heman] + solutions[sean]\n\n    return total_marbles\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    n = (65 - 5) // common_difference + 1\n    sum_of_terms = (n * (first_term + 65)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    return 10.25 + 9.2 - 7\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "import math\n\ndef solution():\n    return math.gcd(math.gcd(6, 9), 12)\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_expressway / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean_value = sum(data) / len(data)\n    deviations = [abs(x - mean_value) for x in data]\n    mad = sum(deviations) / len(data)\n    return mad\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    num_oranges = 13\n    num_kids = 3\n\n    # Calculate all distributions of oranges where order does not matter and repetitions are allowed\n    distributions = combinations_with_replacement(range(num_oranges+1), num_kids)\n\n    # Filter out the combinations that do not sum to the total number of oranges\n    valid_distributions = [distribution for distribution in distributions if sum(distribution) == num_oranges]\n\n    # The number of valid distributions is the answer to our question\n    return len(valid_distributions)\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoes_per_set = 5\n    shoe_set_price = 78\n    sock_price = 12\n    aliens = 1 + 5\n    legs_per_alien = 5\n    total_legs = aliens * legs_per_alien\n\n    # Calculate the number of sets of shoes\n    shoe_sets_needed = total_legs // shoes_per_set\n    # Calculate the total cost for the shoes by multiplying the sets by the set price\n    total_shoe_cost = shoe_sets_needed * shoe_set_price\n\n    # Calculate the total cost for the socks by multiplying the total legs by the sock price\n    total_sock_cost = total_legs * sock_price\n\n    # Add the total cost of shoes and socks to get the final amount\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Using the fact that the original and the new numbers differ by 5877\n    # Using a bruteforce approach since the range is 0-9999 (4-digit numbers)\n    for n in range(1000, 10000):\n        # Get the digits of the original number\n        original_digits = str(n)\n        # Form the new number by swapping first and last digits\n        new_number = int(original_digits[-1] + original_digits[1:-1] + original_digits[0])\n        # Check if the new number is greater than the original by 5877\n        if new_number - n == 5877:\n            return n\n    return None\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    # Let's denote the number of $0.50 cookies as d and $0.10 cookies as j.\n    # According to the problem description, we have the following relationships:\n    # David's cookies cost 3 times as much as Jeremy's cookies.\n    # d * 0.50 = 3 * (j * 0.10)\n    # David had only $0.50 cookies and Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies.\n    # j = (3/5) * d\n    # There were 60 fewer $0.10 cookies than $0.50 cookies.\n    # d - j = 60\n    # Let's find the values of d and j using these equations.\n    \n    from sympy import symbols, Eq, solve\n\n    d, j = symbols('d j')\n\n    equation1 = Eq(d * 0.50, 3 * (j * 0.10))\n    equation2 = Eq(j, 3/5 * d)\n    equation3 = Eq(d - j, 60)\n\n    solutions = solve((equation1, equation2, equation3), (d, j))\n\n    # Jeremy's cookies worth is j * 0.10\n    jeremy_cookies_worth = solutions[j] * 0.10\n    \n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n\n    # Calculate the product of each combination of 2 and 3 cards and store it in a dictionary\n    for i, x in enumerate(numbers):\n        for j, y in enumerate(numbers[i+1:], i+1):\n            product_2 = x * y\n            for k, z in enumerate(numbers[j+1:], j+1):\n                product_3 = product_2 * z\n                if product_3 not in products:\n                    products[product_3] = [(x, y, z)]\n                else:\n                    products[product_3].append((x, y, z))\n            products.setdefault(product_2, []).append((x, y))\n\n    # Find a product that appears in both list (from 2 cards and from 3 cards)\n    common_product = next(\n        (product for product, freq in products.items() if len(freq) > 1), None)\n\n    # Find which number was not picked\n    picked_numbers = set()\n    for group in products[common_product]:\n        picked_numbers.update(group)\n    \n    not_picked = next(num for num in numbers if num not in picked_numbers)\n    \n    return not_picked\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [books for books in possible_totals if (books - 4) % 7 == 0]\n    return ans[0]  # assuming there is only one correct answer\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20\n    total_road_length = 200\n    \n    # Calculate the distance between each tree (interval)\n    interval = distance_between_first_and_fifth / (5 - 1)\n    \n    # Calculate the total number of trees including the first one\n    total_trees = (total_road_length / interval) + 1\n    \n    return int(total_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # Combined rate of both taps\n    \n    time_to_fill_half = (1/2) / combined_rate  # Time to fill half the tank\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Calculate the expression step by step as per Jason's homework\n    step1 = 36 * 21  # Result after multiplying 36 and 21\n    step2 = step1 / (6 * 7)  # Dividing step1 by the product of 6 and 7\n    step3 = 36 / 6 * 21 * 7  # According to Jason's workings, misplacing parentheses\n    step4 = (36 / 6) * 21 * 7  # Adding parentheses for the correct order of operations\n    ans = step4  # The correct result after proper operations\n    \n    # Check if Jason's final answer matches the correctly calculated result\n    is_correct = ans == 882\n\n    return (\"Correct\" if is_correct else \"Incorrect\", ans)\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    number_of_apples = total_fruit * fraction_apples\n    number_of_pears = total_fruit - number_of_apples\n    return int(number_of_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    boy_side_length = 1\n    \n    while True:\n        total_people = (boy_side_length + 1) ** 2\n        boys = total_people - girls\n        if boys == boy_side_length ** 2:\n            return boys\n        boy_side_length += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person\n    ann_position = 8\n    # 3 people between Ann and David\n    people_between = 3\n    # David is after the people between + Ann's position, and he is the second last person\n    david_position = ann_position + people_between + 1\n    \n    # Total people is David's position + 1 (since he's the second last)\n    total_people = david_position + 1\n    \n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8 = 0\n    page = 1\n    while count_8 < 22:\n        if '8' in str(page):\n            count_8 += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - first_number - second_number\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # n:8 = 9:12 can be written as n/8 = 9/12\n    # By cross multiplication we get n*12 = 9*8\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we get 29 balls of one color, we could pick every single ball except 1 from the other two colors.\n    # - To fail to get 29 blue balls, we could pick all 40 red and 30 white balls.\n    # - To fail to get 29 red balls, we could pick all 80 blue and 30 white balls.\n    # - To fail to get 29 white balls, we could pick all 80 blue and 40 red balls.\n    \n    # So we take maximum failed attempts + 1 to ensure the next ball picked will complete the requirement.\n    fail_blue = 40 + 30\n    fail_red = 80 + 30\n    fail_white = 80 + 40\n    \n    # By pigeonhole principle, we take the highest number of fail picks and add 1 to ensure success\n    max_fail_picks = max(fail_blue, fail_red, fail_white)\n    \n    # Plus one to ensure we get the 29 balls of a single color\n    picks_needed = max_fail_picks + 1\n    \n    return picks_needed\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 8 / 100  # 8%\n    time = 3  # years\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n    solution_dict = solve(equation, x)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england = 978\n    height_world = 8848\n    difference = height_world - height_england\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n    spent_alicia = alicia / 2\n    spent_beth = 60\n    spent_casey = 3 * spent_alicia\n\n    # money left for each person\n    left_alicia = alicia - spent_alicia\n    left_beth = beth - spent_beth\n    left_casey = casey - spent_casey\n\n    # equations based on the problem statement\n    equation1 = Eq(left_alicia, left_beth)\n    equation2 = Eq(left_beth, left_casey)\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 10! and larger all have the factor 10 (which is 2 * 5),\n    # the last digit of all factorials from 10! onwards will be 0.\n    # Therefore, the last digit of 2014! will also be 0.\n    return 0  # The last digit of 2014!\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    return 20 * 30 // 6\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    # Work backwards: reverse the operations in the opposite order\n    last_step = number + 8\n    previous_step = 8 * last_step\n    before_previous = previous_step / 3\n    original_sum = before_previous - 6\n\n    # Setting up the equation that represents the original question\n    equation = Eq(original_sum, number)\n\n    # Solving for the original number\n    original_number = solve(equation, number)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    # Calculate the product\n    product = 2*2*3*8*5*5*5\n    \n    # Initialize the counter for the number of zeros at the end\n    count_zeros = 0\n    \n    # Keep dividing the product by 10 as long as the remainder is 0\n    while product % 10 == 0:\n        count_zeros += 1\n        product //= 10  # Floor division to remove the last zero\n    \n    return count_zeros\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original number\n    original_number = symbols('original_number')\n\n    # Equation: original_number + 10 * original_number = 253\n    equation = Eq(original_number + 10 * original_number, 253)\n\n    # Solve the equation for the original number\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Let the number of cookies eaten on the first day be x.\n    # Then, the number of cookies eaten on each of the next 4 days are x+6, x+12, x+18, x+24 respectively.\n    \n    # The sum of an arithmetic sequence is given by the formula: Sum = n/2 * (first_term + last_term)\n    # Here, n (number of terms) is 5, the sum is 100, and the first term is x.\n    # The last term of the sequence (5th day) can be represented as x + 4 * 6, since the boy eats 6 more each day.\n    \n    # Summing the terms gives us the total number of cookies:\n    # Sum = 5/2 * (x + (x + 24))\n    # Solving for x:\n    # 100 = 5/2 * (2x + 24)\n    # 2 * 100 = 5 * (2x + 24)\n    # 200 = 10x + 120\n    # 200 - 120 = 10x\n    # 80 = 10x\n    # x = 8\n    \n    x = (100 * 2 - 5 * 24) / 10  # Calculation based on the derived equation\n    return x\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - (given_to_sister + given_to_friend) + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for i in range(1, 90):\n        if i % 9 == 0 and (i + 1) % 5 == 0 and (i + 2) in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89]:\n            return i\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    # Cayden completed 6 more questions than Sicheng\n    equation1 = Eq(cayden, sicheng + 6)\n    # Yixuan completed 2 times as many questions as Cayden\n    equation2 = Eq(yixuan, 2 * cayden)\n    # Yixuan completed 22 more questions than Sicheng\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    # Calculate the total number of questions\n    total_questions = sum(solutions.values())\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6*x), 48)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    # 4 men can be arranged in 4! ways\n    men_arrangements = factorial(4)\n    \n    # 4 women can be arranged in 4! ways\n    women_arrangements = factorial(4)\n    \n    # Since men and women want to stand alternately, there are 2 options,\n    # starting with a man or starting with a woman\n    start_options = 2\n\n    # Total arrangements\n    total_arrangements = men_arrangements * women_arrangements * start_options\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    word = 'HAPPY'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2 / 5\n    total_children = girls / (1 - fraction_boys)\n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    ans = 1\n    i = 2\n\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        ans *= count + 1\n        i += 1\n    if n > 1:\n        ans *= 2\n\n    return ans\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_Peter = 9\n    people_behind_John = 10\n    Peter_and_John = 2\n\n    total_people = people_in_front_of_Peter + Peter_and_John + people_behind_John\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.60 * 0.10 * 900\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([i if i % 4 == 2 else -i for i in range(50, 31, -2)])\n    return ans\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    # Assuming the time zone difference is not provided,\n    # and St Petersburg is in the Moscow Standard Time zone,\n    # which is 3 hours ahead of the Greenwich Mean Time.\n    time_zone_difference = 3\n\n    departure_time = 12  # in hours (noon)\n    flight_duration = 4  # in hours\n\n    arrival_time = (departure_time + flight_duration) % 24\n    time_in_st_petersburg = (arrival_time + time_zone_difference) % 24\n\n    return time_in_st_petersburg\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870  # Amount after 5 years\n    interest_rate = 0.09  # Annual interest rate\n    years = 5  # Number of years\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if len(set([N, O])) == 2:\n                NO = 10 * N + O\n                ON = 10 * O + N\n                if (NO + NO + ON) == 100 + NO:\n                    return NO\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    return 2.5 * 1000\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = ((1, 2), (2, 3), (3, 4), (4, 5))\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Number of colors\n    colors = 3\n    \n    # She needs to pick one more sock than there are colors to guarantee a pair.\n    socks_to_pick = colors + 1\n    \n    return socks_to_pick\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km per 5 cm on the map\n    distance_on_map_cm = 12\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    sweets_for_boy = 4\n    sweets_for_girl = 12\n    total_sweets = 360\n    fraction_boys = 3 / 8\n\n    # Find total number of children\n    # Let the total number of children be x\n    # Boys' sweets: (3/8)x * 4\n    # Girls' sweets: (5/8)x * 12\n    # Total sweets: (3/8)x * 4 + (5/8)x * 12 = 360\n    # Solve for x\n    x = total_sweets / (fraction_boys * sweets_for_boy + (1 - fraction_boys) * sweets_for_girl)\n\n    # Calculate the number of girls\n    num_girls = x * (1 - fraction_boys)\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    ans = product\n    return ans\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknown number as 'n'\n    n = symbols('n')\n\n    # Form equations based on the given information\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    # Sum of quotients\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n\n    # We filter out positive solutions since the number must be positive\n    valid_solutions = [sol.evalf() for sol in solutions if sol.is_real and sol > 0]\n\n    # We need to return the integer value of the solution, assuming there's only one valid solution\n    return int(valid_solutions[0])\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmph = 7.2  # speed in kilometers per hour\n    speed_mps = speed_kmph * 1000 / 3600  # convert speed to meters per second\n    time_seconds = 24  # time in seconds\n\n    distance_meters = speed_mps * time_seconds  # distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # According to the definition, the positive integer 1 is neither prime nor composite.\n    # Therefore, the statement is not entirely correct as it excludes the number 1.\n    is_pip_correct = False\n    return is_pip_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    language_students = 54\n\n    both_classes = (maths_students + language_students) - total_students\n    only_maths_students = maths_students - both_classes\n\n    return only_maths_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1  # Start with a product of 1\n    for i in range(2, 10): # From 2 to 9 (inclusive)\n        product *= (i + 1) / i  # Multiply by (i+1)/i\n\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(x1 + 1, 11):\n            for x3 in range(x2 + 1, 12):\n                x4 = 12 - x1 - x2 - x3\n                if x4 > x3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        potential_palindrome = 40309 + i\n        if str(potential_palindrome) == str(potential_palindrome)[::-1]:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kept_by_kasia = 13\n    sweets_to_share = total_sweets - kept_by_kasia\n    sweets_per_friend = sweets_to_share // 2\n    lucie_gives_to_joan = (2 / 7) * sweets_per_friend\n    lucie_keeps = sweets_per_friend - lucie_gives_to_joan\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boys_more_than_girls = 52\n    total_students = 0\n    i = 1\n\n    while True:\n        boys = (i * 2 + (i - 2) * 2) if i > 1 else i * i\n        girls = ((i - 2) ** 2) if i > 2 else 0\n        if boys - girls == boys_more_than_girls:\n            total_students = i * i\n            break\n        i += 1\n\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's denote his weekly pension as 1 (whole pension)\n    \n    # On Friday, he spends 1/4 of his pension\n    fraction_friday = 1 / 4\n    \n    # Remaining pension after Friday\n    remaining_after_friday = 1 - fraction_friday\n    \n    # On Saturday, he spends 1/3 of the remaining pension\n    fraction_saturday = remaining_after_friday / 3\n    \n    # Remaining pension after Saturday\n    remaining_after_saturday = remaining_after_friday - fraction_saturday\n    \n    # This is what's left for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n\n    adults = total_people * ratio_adults / (ratio_adults + ratio_children)\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    return num_school_bags * num_pencil_boxes\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # 5-litre pail overflows by 4 litres, so the tank's capacity is 5 - 4 litres\n    tank_capacity_with_5_litre_pail = 5 - 4\n    \n    # 3-litre pail requires 4 more pails to fill the tank, \n    # meaning 3 litres times 4 more pails plus one pail already used\n    tank_capacity_with_3_litre_pail = 3 * (4 + 1)\n    \n    # Since both calculations must equal the tank's actual capacity, we equate them\n    ans = tank_capacity_with_5_litre_pail  # This should also equal tank_capacity_with_3_litre_pail\n    return ans\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_needed = ginkgo_trees - 1\n    \n    return willow_trees_needed\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    i = 1\n    while True:\n        if (i * i + i + i + 1) == (i + 1) * (i + 1):\n            break\n        i += 1\n    total_soldiers = (i + 1) * (i + 1)\n    return total_soldiers\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of apples (a) and pears (p)\n    a, p = symbols('a p')\n\n    # Equation based on the initial ratio\n    equation1 = Eq(a/p, 3/4)\n\n    # Equation after replacing 36 pears by 36 apples\n    equation2 = Eq((a + 36)/(p - 36), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n\n    # Extract the number of apples from the solutions\n    num_apples = solutions[a]\n\n    return num_apples\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # Set up the repeating decimal part\n    repeating_decimal = '6129303'\n    \n    # The number of complete sequences of the repeating decimal in the first 212 digits\n    num_full_sequences = 212 // len(repeating_decimal)\n    \n    # The number of leftover digits after the full sequences\n    remaining_digits = 212 % len(repeating_decimal)\n    \n    # Calculate the sum of digits in the full sequences\n    sum_full_sequences = sum(map(int, repeating_decimal)) * num_full_sequences\n    \n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(map(int, repeating_decimal[:remaining_digits]))\n    \n    # Calculate the total sum of the first 212 digits\n    total_sum = sum_full_sequences + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2/3) * 729\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n = 12\n    ans = n * (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Number of trailing zeros in n! is determined by the number of times we can factor out 5 (since there are always more factors of 2)\n    # Start count of zeros (factors of 5) and value of n at 0\n    zeros_count = 0\n    n = 0\n\n    # Loop until we have found a factorial with 28 trailing zeros\n    while zeros_count < 28:\n        n += 1  # Increment n to check the next number\n        # Check how many times 5 is a factor in the current number\n        current = n\n        while current % 5 == 0:\n            current //= 5\n            zeros_count += 1\n\n    # Return the largest value of n which gives us 28 trailing zeros\n    return n\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = (5 * 1.09) + (6 * 0.55)\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')\n\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    sam_current_age = solve(equation, sam)\n\n    return sam_current_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # worst case without a pair:\n    # 1 black, 2 red, 4 white, 7 green, 8 yellow (all single socks one less than needed for a pair)\n    # Next sock ensures at least one pair of any color.\n    # After the first pair, worst case is not picking another pair of the same color:\n    # 1 black, 2 red, 4 white, 7 green, and 9 yellow, will ensure 1 pair of yellow.\n    \n    # 1 pair is already guaranteed; picking 5 more ensures another pair of the same color.\n    socks_needed = 1 + 2 + 4 + 7 + 8 + 5\n    return socks_needed\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the given digits\n    digits = ['3', '7', '2', '8']\n    all_permutations = list(permutations(digits))\n    \n    # Convert the tuples of digits to integers\n    all_numbers = [int(''.join(permutation)) for permutation in all_permutations]\n    \n    # Filter out the even numbers\n    odd_numbers = [num for num in all_numbers if num % 2 != 0]\n    \n    # Find the smallest odd number\n    smallest_odd_number = min(odd_numbers)\n    \n    return smallest_odd_number\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total letters in \"RAINBOW\" are 7: RAINBOW -> 4 consonants (R, N, B, W) and 3 vowels (A, I, O)\n    total_letters = 7\n    consonants = 4\n    vowels = 3\n\n    # Calculate total ways to arrange all 7 letters\n    total_arrangements = factorial(total_letters)\n\n    # Calculate ways to arrange vowels together\n    # Treat the three vowels as a single entity plus the 4 consonants\n    vowels_together = factorial(vowels + consonants - 1) * factorial(vowels)\n\n    # Subtract the number of arrangements where vowels are together from the total arrangements\n    # This gives us the arrangements where vowels are never together\n    arrangements_with_vowels_never_together = total_arrangements - vowels_together\n\n    return arrangements_with_vowels_never_together\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # The number is a multiple of 4, so check multiples of 4 between 10 and 20.\n    for num in range(12, 20, 4):  # 12 is the first multiple of 4 after 10, and 20 is the upper bound.\n        # The number is also a factor of 36, so check if 36 is divisible by this number.\n        if 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # The sum of first n terms of an arithmetic progression can be expressed as:\n    # S_n = n/2 * (2a + (n - 1)d), where a is the first term and d is the common difference\n    \n    # Given S_10 (sum of first 10 terms) is 20, we have:\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    \n    # Given S_30 (sum of first 30 terms) is 90, we have:\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n    \n    # From S_10, we have the equation:\n    # 5 * (2a + 9d) = 20 -> 2a + 9d = 4.....(1)\n    \n    # From S_30, we have the equation:\n    # 15 * (2a + 29d) = 90 -> 2a + 29d = 6.....(2)\n    \n    # Now we need to solve these two equations to find the common difference d.\n    # Let's subtract equation (1) from (2) to eliminate a:\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 2a + 29d - 2a - 9d = 2\n    # 20d = 2\n    # d = 1/10\n    \n    return 1/10\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n    \n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n    \n    return total_words_in_6_days\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let Amy's stickers be represented by 5x\n    # and Penny's stickers be represented by 4x\n    # Therefore, 5x + 4x = 117\n    # Solve for x:\n    total_stickers = 117\n    total_ratio = 5 + 4  # Amy's ratio part + Penny's ratio part\n    x = total_stickers / total_ratio\n    # Penny's stickers is 4 parts of this x\n    penny_stickers = 4 * x\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6        # Lucy's speed in kilometers per hour\n    time_seconds = 300     # Time in seconds\n\n    # Convert speed from km/h to m/s (1 km/h = 1000 m / 3600 s)\n    speed_ms = speed_kmh * (1000 / 3600)\n\n    # Calculate distance in meters\n    distance_meters = speed_ms * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Jack sold 40 apples which is 4/7 of the apples he brought yesterday.\n    apples_brought_yesterday = (40 * 7) / 4\n\n    # Yesterday he brought 1/2 of all apples he has.\n    total_apples = apples_brought_yesterday * 2\n\n    return total_apples\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_combinations = [''.join(p) for p in permutations(digits)]\n    closest_number = min(all_combinations, key=lambda x: abs(int(x) - 2978))\n    return int(closest_number)\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    parts = 1 + lines * (lines + 1) // 2\n    return parts\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d\n    # Given:\n    # (a + b) / 2 = 10 -> a + b = 20\n    # (c + d) / 2 = 22 -> c + d = 44\n    # (a + d) / 2 = 14 -> a + d = 28\n\n    # To find the average of the two middle numbers (b + c) / 2\n    # Using the equations above, we can express b and c in terms of a and d\n    # b = 20 - a\n    # c = 44 - d\n    # Now, substituting (a + d) = 28, we can find a and d\n    # a = 28 - d\n\n    # Therefore:\n    # b = 20 - (28 - d) = -8 + d\n    # c = 44 - d\n    # Average of b and c is:\n    # ((-8 + d) + (44 - d)) / 2 = (36) / 2 = 18\n    return 18\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Total number of terms can be calculated using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # n = ((last_term - first_term) / difference) + 1\n    num_rows = ((last_term - first_term) / difference) + 1\n\n    # Sum of an arithmetic sequence: (n/2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    # Check for 2-digit multiples of 7 whose product is 7007\n    for i in range(len(prime_factors)):\n        for j in range(i+1, len(prime_factors)):\n            num1 = prime_factors[i] * prime_factors[j]\n            num2 = 7007 // num1\n            if len(str(num1)) == 2 and len(str(num2)) == 2 and num1 % 7 == 0 and num2 % 7 == 0:\n                return num1 + num2\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    c = 19\n    sum_ab = 2 * average_ab  # Sum of A and B\n    sum_abc = sum_ab + c     # Total sum of A, B, and C\n    average_abc = sum_abc / 3  # Average of A, B, and C\n\n    return average_abc\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    return age\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the average age of Chinese, English, and Mathematics teachers be C, E, and M, respectively.\n    # We have the following equations based on the given averages:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n\n    # Summing all the equations, we get: 2(C + E + M) = 68 + 72 + 88\n    total_age_sum = 68 + 72 + 88 \n    # Divide by 2 to get the sum of the ages of the Chinese, English, and Mathematics teachers\n    C_E_M_sum = total_age_sum / 2\n\n    # The average age of the three teachers is the sum divided by 3\n    avg_age = C_E_M_sum / 3\n    return avg_age\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = ((21 + 1) * 7) - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # If the cakes are distributed evenly in 8 layers, then the 9th layer\n    # will have at least one more cake than the evenly distributed number.\n    # Using Pigeonhole principle, calculate the minimum in the most-filled layer.\n    cakes_in_most_layer = (total_cakes // layers) + (0 if total_cakes % layers == 0 else 1)\n\n    return cakes_in_most_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23**0.5)\n    square_perimeter = max_side_length * 4\n    remaining_rope = 23 - square_perimeter\n\n    return remaining_rope\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += ((2018 + i) / 5) - ((2018 + i) // 5)\n    return total\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    freq_1 = 2\n    freq_2 = freq_3 = freq_4 = 1\n\n    total_permutations = factorial(total_digits)\n    permutations_1 = factorial(freq_1)\n    permutations_2 = factorial(freq_2)\n    permutations_3 = factorial(freq_3)\n    permutations_4 = factorial(freq_4)\n\n    ans = total_permutations // (permutations_1 * permutations_2 * permutations_3 * permutations_4)\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the common difference be d\n    d = symbols('d')\n    \n    # The sum of an arithmetic progression is n/2*(2*a1 + (n-1)*d)\n    # where n is the number of terms, a1 is the first term and d is the common difference\n    n = 10  # We have 10 boxes\n    a1 = 11  # First box has 11 cookies\n    \n    # The sum equation for the number of cookies\n    sum_equation = Eq(n/2 * (2*a1 + (n-1)*d), 425)\n    \n    # Solve the equation to find the common difference\n    common_difference = solve(sum_equation, d)[0]\n    \n    return common_difference\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let the first term of the arithmetic sequence be n\n    # Then, the seven consecutive odd numbers are n, n+2, n+4, n+6, n+8, n+10, n+12\n    # The sum of these numbers is 7n + (2 + 4 + 6 + 8 + 10 + 12) = 7n + 42\n    # According to the problem, the sum is 357\n    # So, we have 7n + 42 = 357\n    # Solving for n gives us the first (smallest) term of the sequence\n    \n    total_sum = 357\n    sequence_sum = 42  # Sum of the differences: 2 + 4 + 6 + 8 + 10 + 12\n    \n    # Calculate the first term\n    n = (total_sum - sequence_sum) // 7\n    \n    return n\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    # 5 tables and 12 chairs cost $720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    \n    # Each table costs $25 more than each chair\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Even prime number\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem\n    # To find the smallest number x such that:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    # Let the speed of Carter be x metres per minute\n    # Then, the speed of Martin is x + 20 metres per minute\n    \n    # Time is inversely proportional to speed\n    # If the ratio of time taken by Martin and Carter is 9:13,\n    # then the ratio of their speeds is 13:9 (since speed = distance/time)\n    \n    # So, Speed of Martin / Speed of Carter = 13/9\n    # (x + 20) / x = 13/9\n    # 9*(x + 20) = 13*x\n    # 9*x + 180 = 13*x\n    # 13*x - 9*x = 180\n    # 4*x = 180\n    # x = 180 / 4\n    # x = 45 (Carter's speed in metres per minute)\n    \n    return 45\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    remaining_cloth = total_cloth - x\n    return remaining_cloth\n\nans = solution(x)  # x should be the amount of cloth used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    fred_work_rate = 1 / 9\n    combined_work_rate = 1 / 6\n    george_work_rate = combined_work_rate - fred_work_rate\n    george_time = 1 / george_work_rate\n    return george_time\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    # Worst case scenario: all apples of one color are taken out plus one more, which guarantees \n    # the next apple will be of the same color as the one we have the most.\n    apples_to_take = min(red_apples, yellow_apples) + 1 \n\n    return apples_to_take\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pens sold.\n    x = symbols('x')\n\n    # Initial ratio of red pens to black pens is 3:7, final ratio is 5:13\n    # Red pens left is 20, so initial red pens is 20 + x\n    # Let y be the initial total number of black pens.\n    # Then we have y - x (black pens left) in the ratio 5:13 with the 20 red pens left.\n\n    # Form the equations based on the ratios\n    equation1 = Eq((20 + x) / (y - x), 3/7)\n    equation2 = Eq(20 / (y - x), 5/13)\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Number of red pens sold is x\n    return solutions[x]\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    ways_for_each_person = 5  # Each person can choose from 5 entrances\n    \n    # Since the order in which they enter matters, we use permutations\n    total_ways = ways_for_each_person ** 4  # Each of the four people has 5 choices\n    \n    return total_ways\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    cats_legs = 2 * 4  # Cats have 4 legs; Tina has 2 cats\n    dogs_legs = 2 * 4  # Dogs have 4 legs; Tina has 2 dogs\n    rabbit_legs = 1 * 4  # Rabbits have 4 legs; Tina has 1 rabbit\n\n    total_legs_of_cats_dogs_rabbits = cats_legs + dogs_legs + rabbit_legs\n    birds_legs = 28 - total_legs_of_cats_dogs_rabbits  # total leg count - the counted legs\n    birds = birds_legs // 2  # each bird has 2 legs\n\n    return birds\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(11, 20) if 42 % i == 0]\n    return factors_of_42[0] if factors_of_42 else None\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Value of the house after the first year (increased by 5%)\n    value_after_first_year = 10500\n\n    # Calculate the original price before the increase\n    original_price = value_after_first_year / 1.05\n\n    # Calculate the new value after the second year (decreased by 5%)\n    value_after_second_year = original_price * 0.95\n\n    # Calculate the profit or loss comparing with the original price\n    profit_or_loss = value_after_second_year - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n    \n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    desired_average = 6\n    number_of_values = 4\n\n    total_sum_for_average = desired_average * number_of_values\n    missing_number = total_sum_for_average - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    bag_weight = 12\n\n    bags_needed = (total_gravel + bag_weight - 1) // bag_weight  # Ceiling division\n\n    return bags_needed\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a ruler and a pen\n    ruler, pen = symbols('ruler pen')\n\n    # We have two equations based on the problem statement\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)  # Total cost of rulers and pens\n    equation2 = Eq(ruler, pen + 0.90)           # A ruler costs $0.90 more than a pen\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    # Reverse the operations\n    result = 1126\n    # Step 8: Add 50\n    result += 50\n    # Step 7: Subtract the day of birth (unknown)\n    day = result % 100\n    result //= 100\n    # Step 6: Divide by 5\n    result //= 5\n    # Step 5: Add 20\n    result += 20\n    # Step 4: Divide by 5\n    result //= 5\n    # Step 3: Subtract 6\n    result -= 6\n    # Step 2: Divide by 4\n    month = result // 4\n    \n    return (month, day)\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_num = int(''.join(perm))\n        second_num = 2 * first_num\n        third_num = 4 * first_num\n        all_digits = set(str(first_num) + str(second_num) + str(third_num))\n        if len(all_digits) == 7 and all_digits == set(digits):\n            return third_num\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    # Check all numbers less than 50 that are two less than a multiple of 3 and two more than a multiple of 5\n    candidates = [i for i in range(1, 50) if i % 3 == 1 and i % 5 == 2]\n    \n    # Finding prime numbers\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Going through candidates to find which one is a prime number\n    for num in candidates:\n        if is_prime(num):\n            return num\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    common_difference = 4\n    last_term = 400\n\n    # Number of terms in the increasing sequence\n    num_terms_increasing = (last_term - first_term) // common_difference + 1\n\n    # Sum of increasing sequence\n    sum_increasing = (num_terms_increasing * (first_term + last_term)) // 2\n\n    # Sum of decreasing sequence is the same as the sum of increasing sequence\n    sum_decreasing = sum_increasing\n\n    # Total sum is the sum of both sequences\n    total_sum = sum_increasing + sum_decreasing - last_term # Subtract last term since it's included twice\n\n    return total_sum\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    richard_money = 10\n\n    if richard_money < cup_price:\n        return 0\n\n    # Subtract the price of the first cup from Richard's total money\n    richard_money -= cup_price\n\n    # Count how many refills he can get with the remaining money\n    num_refills = richard_money // refill_price\n\n    # Total cups of coke = first cup + number of refills\n    total_cups = 1 + num_refills\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_3_monkeys = 96\n    days_for_3_monkeys = 2\n    monkeys_for_5_days = 5\n    days_for_5_monkeys = 4\n\n    daily_peach_per_monkey = (total_peaches_3_monkeys / days_for_3_monkeys) / 3\n    total_peaches_5_monkeys = daily_peach_per_monkey * monkeys_for_5_days * days_for_5_monkeys\n\n    return total_peaches_5_monkeys\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations for story, comic, and science books\n    story_books_perms = factorial(2)\n    comic_books_perms = factorial(3)\n    science_books_perms = factorial(4)\n\n    # Calculate the permutations for arranging the types of books\n    types_arrangement_perms = factorial(3)\n\n    # Total permutations is the product of the individual permutations\n    # multiplied by the permutations of the arrangement of types of books\n    total_perms = story_books_perms * comic_books_perms * science_books_perms * types_arrangement_perms\n\n    return total_perms\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_50_tax = 0.06 * 50000\n    rest_tax = (0.06 + T / 100) * (income - 50000)\n    total_tax = first_50_tax + rest_tax\n\n    tax_paid = Eq(total_tax, 10000)\n    solution_T = solve(tax_paid, T)\n\n    return float(solution_T[0])\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # Since each friend gets at least 1 ice-cream, we distribute 1 to each first.\n    # This leaves us with 5 - 3 = 2 ice-creams to distribute.\n    remaining_icecreams = 5 - 3\n\n    # We distribute the remaining ice-creams to 3 friends, which is equivalent to the\n    # number of non-negative solutions to the equation x + y + z = 2\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups, which can be solved\n    # using the formula for combinations with repetition: comb(n + r - 1, r - 1)\n    ans = comb(remaining_icecreams + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Price of one serving of ice cream\n    price_per_serving = (3 * 2.30 + 0.30) / 3\n    \n    # Total money Sophie's mother gave her\n    total_money = 3 * price_per_serving - 0.30\n    \n    return total_money\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Number of months from January to March, April to July, August to October, and November to December\n    jan_to_mar_months = 3\n    apr_to_jul_months = 4\n    aug_to_oct_months = 3\n    nov_to_dec_months = 2\n\n    # Monthly expenses for given periods\n    jan_to_mar_expense = 450\n    apr_to_jul_expense = 350\n    aug_to_oct_total_expense = 1250\n    nov_to_dec_expense = 400\n\n    # Total expenses for each period\n    total_jan_to_mar = jan_to_mar_months * jan_to_mar_expense\n    total_apr_to_jul = apr_to_jul_months * apr_to_jul_expense\n    total_nov_to_dec = nov_to_dec_months * nov_to_dec_expense\n\n    # Total expenses for the year\n    total_expense_year = (total_jan_to_mar + total_apr_to_jul + \n                          aug_to_oct_total_expense + total_nov_to_dec)\n\n    # Total number of months in a year\n    total_months = 12\n\n    # Average expense per month for the year\n    average_expense = total_expense_year / total_months\n\n    return average_expense\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((3.5/(3*x+2)) + (2/(1.5*x+1)), (4.5/(5-6*x)) - (3/(2.5-3*x)))\n\n    ans = solve(equation, x)\n\n    return ans\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # Given walking speed\n    walk_speed = 40  # in meters/minute\n    # Given cycling speed\n    cycle_speed = 60  # in meters/minute\n\n    # Let's assume the distance between Sam's home and the library is d meters.\n    # It will be the same distance that he covers while walking and while cycling.\n    # Time taken to walk to the library = distance / walk_speed\n    # Similarly, time taken to cycle back = distance / cycle_speed\n\n    # However, we do not need to know the actual distance for calculating average speed.\n    # Average speed for the whole trip is defined as the total distance divided by the total time.\n    # Total distance covered is 2 times the distance to the library (there and back) = 2d\n    # Total time is the sum of time taken to walk and cycle.\n    # So the formula for average speed is:\n    # average_speed = total_distance / total_time = 2d / (d/walk_speed + d/cycle_speed)\n\n    # Substitute d = 1 (unit distance) since it will cancel out in the equation\n    average_speed = 2 / (1/walk_speed + 1/cycle_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9 / x, y / 2)\n\n    # To find the proportional relation when x = 3\n    x_val = 3\n    solution_y = solve(equation.subs(x, x_val), y)\n\n    ans = solution_y[0]\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Total number of sweets represented as 127M,\n    # where M is a digit making the sum divisible by 25 (bags)\n    # To find the sweets in each bag, this number should be divisible by 25.\n    # We iterate over possible values of M (0-9) and check divisibility by 25.\n    for M in range(10):\n        total_sweets = int(f\"127{M}\")\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['2', '3', '5', '6']\n    smallest_odd_number = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 != 0:\n            smallest_odd_number = min(smallest_odd_number, number)\n\n    return smallest_odd_number\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure we get at least two of the same color,\n    # we take out balls considering the worst-case scenario:\n    # First, we can take one green and one blue.\n    # Next, regardless of the color we pick, we will end up with two of the same color.\n    # Therefore, we need to take a maximum of 3 balls to ensure at least two of the same color.\n    return 3\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let the total bracelets Felicia had originally be F.\n    # Let the total bracelets Janice had originally be J = 96 (given).\n\n    # Felicia sold 3/5 of her bracelets, so she had 2/5 F left.\n    # Janice bought 2/5 of the bracelets Felicia sold, so Janice bought (2/5) * (3/5) * F = (6/25) * F.\n\n    # After the transaction, the ratio of Felicia's bracelets to Janice's bracelets is 5:7.\n    # So, (2/5)*F / J + (6/25)*F = 5 / 7.\n    # Plugging in the value of J = 96 and solving for F:\n    \n    F = 5 * (96 + (6/25)*96) / (7*2/5 - 6/25)  # Getting the value of F\n    \n    # The number of bracelets Janice bought from Felicia is (6/25) * F.\n    bracelets_bought = (6/25) * F\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n    \n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n    \n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # The maximum number of shirts Annabella can take out without getting a yellow shirt is the sum of all other shirts\n    max_non_yellow = 6 + 4 + 12  # orange + pink + brown shirts\n\n    # To make sure that she gets at least 1 yellow shirt, she needs to take out one more shirt than the max_non_yellow\n    ans = max_non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count_all = 9 * 10 * 10 # all possible three-digit numbers, excluding those starting with 0\n    count_no_sevens = 8 * 9 * 9 # numbers without any 7s at all\n\n    # The total number with at least two 7s is all possible minus the ones with no 7s\n    count_at_least_two_sevens = count_all - count_no_sevens \n\n    # Now we subtract the cases where there's exactly one 7\n    # Three cases: 7 is in the first, second or third position\n    # (7XX, X7X, XX7)\n    count_one_seven = 3 * 8 * 9 # Choose position for the 7, then fill the other two spots\n\n    count_at_least_two_sevens -= count_one_seven\n\n    return count_at_least_two_sevens\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    individual_total_cost = individual_packet_cost * 15\n\n    savings = individual_total_cost - multipack_cost\n    \n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal_amount = 20000\n    interest_rate = 0.05\n    time_in_years = 11\n\n    total_amount = principal_amount * (1 + interest_rate * time_in_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total_sum = (3/4) + (3/4) + (3/4)\n    missing_number = (total_sum - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    d = 2\n    S_n = 560\n\n    # Formula for the sum of an AP: S_n = n/2 * (2a + (n - 1)d)\n    # Solving for the first term 'a'\n    a = (S_n * 2 - n * (n - 1) * d) / (2 * n)\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    progress_per_day = climb_up - slip_down\n    days = 0\n    height = 0\n\n    while True:\n        days += 1\n        height += climb_up\n        if height >= depth:\n            break\n        height -= slip_down\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_four_days = 25 * 4\n    following_six_days = 40 * 6\n    last_five_days = 80\n\n    total_pages = first_four_days + following_six_days + last_five_days\n    total_days = 4 + 6 + 5\n\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_remaining = 14\n    brother_after = 12\n    difference = penny_remaining - brother_after\n\n    original_difference = difference - 10\n    brother_original = brother_after - original_difference\n\n    return brother_original\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50  # number of terms\n    first_term = 1\n    last_term = 50\n\n    sum_seq = (n * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            age = tens * 10 + ones\n            interchanged_age = ones * 10 + tens\n            if age / 2 == interchanged_age + 1:\n                return age\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number we start with.\n    # After performing the series of operations, we get the following expression:\n    ans = (((((x + 3) * 2) - 2) + 10) / 2) - x\n    # Simplifying the expression knowing that 'x' will cancel out.\n    ans = ((x * 2 + 6 - 2 + 10) / 2) - x\n    ans = (x + 5) - x\n    # After the cancellation, x is gone, and we are left with:\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percentage_sold = 0.60\n    tickets_remaining = 28\n    total_tickets = tickets_remaining / (1 - percentage_sold)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Tom could draw 3 cards of each suit without getting 4 of the same suit\n    cards_to_be_sure = 3 * 4 + 1\n    return cards_to_be_sure\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    spend = symbols('spend')\n    hayden = 1420\n    mitchell = 505\n\n    equation = Eq(hayden - spend, 4 * (mitchell - spend))\n\n    solved = solve(equation, spend)\n\n    return solved[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Initial money calculations (in dollars)\n    two_dollar_notes = 5 * 2\n    fifty_cent_coins = 7 * 0.5\n    \n    # Correct total money before buying\n    total_money = two_dollar_notes + fifty_cent_coins\n    \n    # Cost of the file\n    cost_of_file = 11.95\n    \n    # Correct money left after buying the file\n    money_left = total_money - cost_of_file\n    \n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_n = (n * (n + 1)) // 2\n    return sum_n\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    number = 15 * 4\n    two_thirds_of_number = (2/3) * number\n    return two_thirds_of_number\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let total_people be the total number of people at the party\n    # Let children be the number of children at the party\n    # total_people = adults + children\n    # adults = (3/7) * total_people\n    # children = total_people - adults\n    # children = total_people - (3/7) * total_people\n    # children = (4/7) * total_people\n    #\n    # Of the children, (3/8) were boys, hence (5/8) were girls.\n    # girls = (5/8) * children\n    # 45 girls = (5/8) * (4/7) * total_people\n    # total_people = 45 / ((5/8) * (4/7))\n    \n    total_people = 45 / ((5/8) * (4/7))\n    return int(total_people)\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    distance_climbed_per_day = 3\n    slide_down_per_night = 1\n    net_distance_per_day = distance_climbed_per_day - slide_down_per_night\n    total_distance_to_climb = 11\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance_to_climb:\n        days += 1\n        current_distance += distance_climbed_per_day\n        if current_distance >= total_distance_to_climb:\n            break\n        current_distance -= slide_down_per_night\n\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 18\n    pupils_to_seat = 3\n    ways = factorial(total_pupils) / factorial(total_pupils - pupils_to_seat)\n    return int(ways)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees = (ginko_trees - 1) * 2\n\n    return willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship_still_water = 28\n    speed_current = 3\n    speed_upstream = speed_ship_still_water - speed_current\n    distance = 150\n    time_upstream = distance / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts Andrew, Brian, and Christopher have\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Create the equations from the problem statement\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    # Calculate the total amount the boys have altogether by summing their individual amounts\n    total_money = sum(solutions.values())\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n    \n    total_weight_twice = adam_ben + ben_carl + adam_carl\n    total_weight = total_weight_twice / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the rates of Andy and Zack\n    andy_rate, zack_rate = symbols('andy_rate zack_rate')\n    \n    # Zack's rate is given as 150 aircrafts per hour\n    zack_rate = 150\n    \n    # The equation representing the total work done by Andy and Zack in 6 hours\n    total_aircrafts = 1200\n    equation = Eq((andy_rate + zack_rate) * 6, total_aircrafts)\n    \n    # Solve the equation for Andy's rate\n    solutions = solve(equation, andy_rate)\n    \n    # Calculate the time it takes for Andy to sell all the aircrafts by himself\n    andy_time = total_aircrafts / solutions[andy_rate]\n    \n    return andy_time\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6\n    total_volume = 300\n    orange_ratio = 7\n\n    volume_orange = (orange_ratio / total_ratio) * total_volume\n\n    return volume_orange\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total_amount = 400\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total_amount)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_price_per_kg = 7.48\n    cheese_weight = 500 / 1000  # convert g to kg\n    cheese_cost = cheese_price_per_kg * cheese_weight\n\n    apple_price_each = 12 / 100  # convert p to £\n    apple_quantity = 8\n    apple_cost = apple_price_each * apple_quantity\n\n    yoghurt_price_each = 46 / 100  # convert p to £\n    yoghurt_quantity = 2\n    yoghurt_cost = yoghurt_price_each * yoghurt_quantity\n\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    money_given = 10  # £10 note\n\n    change = money_given - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    money_saved = 1 * 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    total = original_amount + money_saved - lent_to_brother - spent_on_snacks\n    \n    return total\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    repayment = 10.50\n    remaining = total_money - repayment\n    spent_on_magazines = remaining / 2\n    left_over = remaining - spent_on_magazines\n    return left_over\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Initialize variable to count total number of people\n    total_people = 0\n    # Initialize difference between students and teachers\n    diff_stu_teach = 80\n    \n    # The number of students excess must be even, as we add 4 students per layer and no teachers in student layers.\n    # Hence, the number of layers must be diff_stu_teach divided by 4 to accommodate the excess students equally.\n    \n    # Calculate the total number of layers of students\n    student_layers = diff_stu_teach // 4\n    # Initialize the length of the side of the square\n    side_length = 0\n\n    # Calculate side length assuming outermost layer has one student width\n    # and increases by 2 widths for each inner layer (one on each side).\n    # We can iterate over possible side lengths to account for the layering of students and teachers.\n    for side in range(1, 1000, 2): # We increment by 2 to account for the next square layer\n        # Calculate the number of people in outer layer (4 sides hence side-1 multiplied by 4)\n        people_outer_layer = 4 * (side - 1)\n        total_people += people_outer_layer\n        # Calculate the number of layers we have added (half the number of sides we have processed)\n        layers_added = side // 2\n        # Check if we have added the required student layers, keep in mind the center might be a teacher or a student\n        if layers_added == student_layers + 1 or layers_added == student_layers:\n            break\n    # If we have an even number of total layers, the middle has to be a teacher, otherwise a student\n    middle_person = 1 if (side // 2) % 2 == 0 else 0\n    total_people += middle_person\n\n    return total_people\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number_of_factors = 0\n    n = 81\n    for i in range(1, n+1):\n        if n % i == 0:\n            number_of_factors += 1\n    return number_of_factors\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorize 44000\n    prime_factors = factorint(44000)\n\n    # Initialize q as 1\n    q = 1\n    \n    # For each prime factor, we need to make sure they contribute to a cube\n    # This means that the exponent of each prime in q must get the counts to a multiple of 3\n    for prime, count in prime_factors.items():\n        if count % 3 != 0:  # If count not a multiple of 3, we multiply q by \n                            # enough primes to make the count a multiple of 3\n            q *= prime ** (3 - (count % 3))\n                \n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for length and width\n    length, width = symbols('length width')\n\n    # Given conditions\n    equation1 = Eq(length, 2 * width)       # Length is twice the width\n    equation2 = Eq(2 * length + 2 * width, 72)  # The perimeter of the rectangle is 72 meters\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n\n    return common_difference\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied parallel to the floor in N\n\n    # Calculate the maximum possible static friction force:\n    max_static_friction = mass * 9.81 * coefficient_of_static_friction\n\n    # The actual static friction force is the minimum of the applied force and the maximum possible static friction force\n    force_of_static_friction = min(applied_force, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution salt mass\n    nick_salt_mass = 300 * 0.12\n    # Nicole's solution salt mass\n    nicole_salt_mass = 500 * 0.28\n    # Total salt mass\n    total_salt_mass = nick_salt_mass + nicole_salt_mass\n    # Total solution mass\n    total_solution_mass = 300 + 500\n    # Concentration of resulting solution\n    resulting_concentration = (total_salt_mass / total_solution_mass) * 100\n\n    return resulting_concentration\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m represent the original amount of money Mark had\n    m = symbols('m')\n    # Steve had $40 more than Mark\n    s = m + 40\n    # We don't know the original amount of Ryan, but we know the ratios\n    r = symbols('r')\n    \n    # If Steve paid for the meal, the money left would be in the ratio 3:8:9 for s:m:r respectively\n    equation1 = Eq((s - m - r) / 3, (m) / 8)\n    equation2 = Eq((s - m - r) / 3, (r) / 9)\n    \n    # If Ryan paid for the meal, in the ratio 5:4:1 for s:m:r respectively\n    equation3 = Eq((s) / 5, (m) / 4)\n    equation4 = Eq((s) / 5, (r - m - s) / 1)\n    \n    # If Mark paid for the meal, in the ratio 10:1:9 for s:m:r respectively\n    equation5 = Eq((s) / 10, (m - s - r) / 1)\n    equation6 = Eq((s) / 10, (r) / 9)\n    \n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (m, r))\n    \n    # Since s = m + 40, we replace m with the solution found\n    s = solutions[m] + 40\n    r = solutions[r]\n    \n    # The amount paid for the meal can be found from the difference in Steve's money\n    meal_cost_from_steve = s - (s / 3 + 40)\n    meal_cost_from_mark = solutions[m] - (solutions[m] / 8)\n    meal_cost_from_ryan = r - (r / 9)\n\n    # We can now return the result which should be the same from any of the above\n    return meal_cost_from_steve\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = (total_parts / total_hours) / total_workers\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    # Define the symbols\n    x, y = symbols('x y', integer=True)\n    \n    # Define the equation where a square is one more than the cube\n    equation = Eq(y**2, x**3 + 1)\n    \n    # Solve the equation for integer values\n    integer_solutions = solve(equation, (x, y))\n    \n    # Filter and return only the square number from the solutions\n    square_of_y = [sol[1]**2 for sol in integer_solutions if sol[1].is_real]\n    \n    return max(square_of_y)  # Return the largest square found\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the number of buttons James and Nina have\n    james, nina = symbols('james nina')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(james + nina, 24)  # Total buttons they have\n    equation2 = Eq(nina - 6, james + 6)  # After Nina gives James 6 buttons, they have the same amount\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    height_to_climb = 16\n    climb_day = 5\n    slide_night = 3\n    climbed = 0\n    day = 0\n    \n    while climbed < height_to_climb:\n        day += 1\n        climbed += climb_day\n        if climbed >= height_to_climb:\n            break\n        climbed -= slide_night\n        \n    return day\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    return max(8/100, 0.7)\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    mixed_to_improper = lambda whole, num, denom: (whole * denom + num) / denom\n\n    # Calculate the product of fractions\n    result = 3 * (4/5) * mixed_to_improper(1, 1, 9) * mixed_to_improper(5, 1, 2) * (3/11)\n\n    return result\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Assuming the relationship is linear y = mx + c, where:\n    # y is the tax charged\n    # x is the number of bags used\n    # m is the slope of the line or the rate of change\n    # c is the y-intercept or the tax charged when no bags are used\n\n    # Since we do not have additional information on the rate of change or the y-intercept,\n    # we can only define the relationship as a linear equation with unspecified coefficients.\n    # Hence, we can set the equation in the form y = mx + c\n    \n    # This line represents the equation in the required format\n    return \"y = mx + c\"\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(101-i))\n    return product\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_cost = 275\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    threshold_days = 5\n    \n    # Calculate cost for initial 5 days\n    initial_cost = flat_fee + daily_fee_short * threshold_days\n    \n    if total_cost <= initial_cost:\n        # If the total cost is less or equal to the initial cost, he had the car 5 days or less.\n        days = (total_cost - flat_fee) / daily_fee_short\n    else:\n        # If the total cost is more, we subtract the initial cost and then divide by the daily fee for extended days.\n        days = threshold_days + (total_cost - initial_cost) / daily_fee_long\n    \n    return int(days)\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height\n    \n    while initial_height > 0:\n        initial_height *= rebound_ratio\n        total_distance += initial_height * 2\n    \n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')  # Initial quantities of green and yellow cars\n\n    # Sam had an equal number of green and yellow toy cars.\n    equation1 = Eq(green, yellow)\n\n    # After giving away 60 green toy cars and 14 yellow toy cars\n    # He had thrice as many yellow toy cars as green toy cars.\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Calculate the number of green toy cars Sam had in the end\n    green_end = solutions[green] - 60\n\n    return green_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n    race_distance = 3000  # meters\n\n    buck_time = race_distance / buck_speed  # time taken by buck in minutes\n    elephant_time = race_distance / elephant_speed  # time taken by elephant in minutes\n\n    time_difference = elephant_time - buck_time  # difference in time\n\n    return time_difference\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Since the sheets are numbered in order after folding, and each sheet contributes \n    # 4 page numbers (2 on each side of the sheet), we can express the page numbers \n    # on a single sheet as n, n+1, n+2, n+3 for some starting number n.\n    # Also, after the fold, opposite pages sum up to the same number: (n + n+3) and (n+1 + n+2) are equal.\n    # Let's find the starting page number (n) and the total number of pages (n+3).\n    \n    # We start with the minimum possible value for n: 1\n    # and calculate the sum of pages until we reach the sum given in the question (58).\n    n = 1\n    while True:\n        if 4 * n + 6 == 58: # (n + n+1 + n+2 + n+3) = 4*n + 6\n            # After finding n, divide the last page number (n+3) by 4 to find the total number of sheets\n            total_sheets = (n + 3) // 4\n            break\n        n += 1\n        \n    return total_sheets\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n    bad_apples = (percentage_bad / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the first half of the sequence: 4+8+...+400\n    first_half_first_term = 4\n    first_half_last_term = 400\n    difference = 4\n    first_half_num_terms = (first_half_last_term - first_half_first_term) / difference + 1\n    first_half_sum = first_half_num_terms / 2 * (first_half_first_term + first_half_last_term)\n\n    # The second half of the sequence is the same as the first half, so we double the sum\n    total_sum = 2 * first_half_sum\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_of_12_pencils = 1.80\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    ratio_pen_to_pencil = 7 / 3\n    cost_of_1_pen = cost_of_1_pencil * ratio_pen_to_pencil\n    cost_of_5_pens = cost_of_1_pen * 5\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    common_difference = 2\n\n    num_terms = (last_term - first_term) // common_difference + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of options for each category\n    drinks = 2  # coffee and milk\n    food_items = 3  # hamburger, burrito, and bagel\n\n    # Using the Principle of Multiplication to get the total combinations\n    ans = drinks * food_items\n\n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_per_pancake = 3 / 2  # Time taken to cook one pancake\n    pancakes_in_12_minutes = 12 / time_per_pancake\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time in hours after 6:10 pm when Simon overtakes his wife\n    # Simon and his wife will have covered the same distance when he overtakes her\n    t = symbols('t')\n\n    # Distance covered by Simon = Speed of Simon * time\n    # Distance covered by Simon's wife = Distance between offices + Speed of wife * time\n    # The equation will be: Speed of Simon * time = Distance between offices + Speed of wife * time\n    equation = Eq(80 * t, 15 + 60 * t)\n\n    # Solve for 't'\n    time_to_overtake = solve(equation, t)[0]\n\n    # Convert the time to overtake into minutes and add it to 6:10 pm\n    overtaking_time_in_minutes = time_to_overtake * 60\n    hours_passed = int(overtaking_time_in_minutes // 60)\n    minutes_passed = int(overtaking_time_in_minutes % 60)\n\n    # Add the time passed to the start time of 6:10 pm\n    overtaking_hour = 18 + hours_passed  # 18 represents 6:00 pm in 24-hour format\n    overtaking_minute = 10 + minutes_passed\n\n    # If the minutes are 60 or more, adjust the hour and minutes\n    if overtaking_minute >= 60:\n        overtaking_hour += overtaking_minute // 60\n        overtaking_minute = overtaking_minute % 60\n\n    # Format the time in hh:mm format\n    overtaking_time = \"{:02d}:{:02d}\".format(overtaking_hour, overtaking_minute)\n\n    return overtaking_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initialize a list to represent the lockers\n    lockers = [False] * 100  # False for unlocked, True for locked\n\n    # Iterate through the locker numbers\n    for i in range(1, 101):\n        if i % 3 == 0:  # If the locker number is divisible by 3\n            lockers[i - 1] = not lockers[i - 1]  # Toggle the locker state\n        if i % 5 == 0:  # If the locker number is divisible by 5\n            lockers[i - 1] = not lockers[i - 1]  # Toggle the locker state\n\n    # Count how many lockers are unlocked (False)\n    unlocked_lockers = sum(not locker for locker in lockers)\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    length_per_day = total_length / total_days\n    return length_per_day\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Define a function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    # Define a function to calculate combinations (n choose r)\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Number of ways to reach the 5th step: 1 way to step 1,2,3,4 then 5\n    # Or 1 way to reach step 4 via 2,2 then 5\n    ways_to_5 = 1 + 1\n    \n    # Number of ways from 5 to 10: like the initial problem but for 5 steps\n    # Can be done in steps of 1,1,1,1,1 or combinations of 1 and 2 steps\n    # The steps can be arranged as follows: 11111, 1112, 1121, 1211, 2111, 221, 212, 122\n    # Calculating combinations for these arrangements:\n    ways_5_to_10 = (combinations(5, 5) + # 11111\n                    combinations(4, 3) + # 1112\n                    combinations(4, 2) + # 1121\n                    combinations(4, 2) + # 1211\n                    combinations(4, 1) + # 2111\n                    combinations(3, 1) + # 221\n                    combinations(3, 1) + # 212\n                    combinations(3, 2))  # 122\n\n    return ways_to_5 * ways_5_to_10\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # Using Pigeonhole Principle, where n is the number of pigeonholes (countries)\n    # and m is the minimum number of pigeons (participants) to ensure at least\n    # one pigeonhole has k pigeons (participants from the same country)\n    n = 18  # Number of countries\n    k = 9   # Minimum number of participants from the same country\n    \n    # The formula for the pigeonhole principle is m = n * (k - 1) + 1\n    ans = n * (k - 1) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    average = 2014 // 53\n    largest_number = average + (53 - 1) // 2\n    return largest_number\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    times = [5, 5, 9, 7]\n    times.sort()\n    total_time = 0\n\n    while len(times) > 3:\n        # Strategy 1: Send two slowest across, then return with fastest\n        option1 = times[0] + (2 * times[1]) + times[-1]\n        # Strategy 2: Send two fastest across, then return with fastest\n        option2 = (2 * times[0]) + times[-2] + times[-1]\n        # Choose the faster strategy\n        total_time += min(option1, option2)\n        # Two people have crossed the river, remove them from the list\n        times = times[:-2]\n\n    # Combine the last cases\n    if len(times) == 3:\n        total_time += times[0] + times[1] + times[2]\n    elif len(times) == 2:\n        total_time += times[1]\n    \n    return total_time\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6  # laps per minute\n    miller_speed = 5 / 10  # laps per minute\n    relative_speed = lucas_speed - miller_speed  # relative speed laps per minute\n    time_to_overtake = 1 / relative_speed  # time to meet first time in minutes\n\n    return time_to_overtake * 2  # double the time for second overtaking\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    # Sandra wrote 88 instead of 98 by mistake, and the result was 22.\n    # So, 88 / A = 22\n    equation = Eq(88 / A, 22)\n\n    # Solve the equation for A\n    A_value = solve(equation, A)[0]\n\n    # Calculate the correct answer: 98 divided by the value of A\n    correct_answer = 98 / A_value\n\n    return A_value, correct_answer\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # If the amount was rounded off to the nearest $10, then the greatest possible\n    # amount Rachel could have saved before rounding is $1670 + $4.99,\n    # since $1670 + $5 would round up to $1680.\n    greatest_amount = 1670 + 4.99\n    return greatest_amount\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours_to_minutes = 2.5 * 60\n    return int(hours_to_minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for total number of visitors\n    total_visitors = symbols('total_visitors')\n\n    # Equation based on the given information\n    equation = Eq((3/5) * total_visitors + 120, (1/4) * (2/5) * total_visitors)\n\n    # Solve the equation for the total number of visitors\n    solved = solve(equation, total_visitors)\n\n    return solved[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost = 0.8  # base cost for up to 15 minutes\n    total_cost = 1.4  # total cost in dollars\n    additional_cost_per_minute = 0.05  # cost per additional minute\n\n    # Total cost for additional minutes\n    additional_minutes_cost = total_cost - base_cost\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_minutes_cost / additional_cost_per_minute\n\n    # Call duration is the base 15 minutes plus any additional minutes\n    total_minutes = 15 + additional_minutes\n    \n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim_age = 8\n    tim_future_age, mother_future_age = symbols('tim_future_age mother_future_age')\n\n    # The difference in ages between Tim and his mother will always remain the same\n    age_difference = mother_future_age - tim_future_age\n\n    # Tim's future age will be his mother's current age\n    equation1 = Eq(tim_future_age, mother_future_age - age_difference)\n    \n    # Mother's future age when Tim reaches the mother's current age\n    equation2 = Eq(mother_future_age, 54)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tim_future_age, mother_future_age))\n\n    # Mother's current age is her future age minus the difference in age\n    mother_current_age = solutions[mother_future_age] - age_difference\n\n    return mother_current_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    orange_to_purple_ratio = 9.2\n\n    # Convert orange string length to cm\n    orange_length_cm = orange_length_m * 100\n\n    # Calculate the length of the purple string in cm\n    purple_length_cm = orange_length_cm / orange_to_purple_ratio\n\n    # Calculate the length of the green string in cm\n    green_length_cm = purple_length_cm + 24.9\n\n    # Convert the length of the green string back to meters\n    green_length_m = green_length_cm / 100\n\n    return green_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables, each representing a different digit\n    A, B = symbols('A B')\n    \n    # Since B is 0 to 9, A = 9 - B\n    equation = Eq(A, 9 - B)\n    \n    # Creating a list of possible solutions within the range 0 to 9 for B\n    possible_solutions = [solve(equation.subs(B, b), A) for b in range(0, 10)]\n    \n    # Flatten the list of solutions and filter unique values of A\n    unique_solutions = set([s[A] for s in possible_solutions if s])\n    \n    # Select the valid solution for A (only one digit so only one solution)\n    ans = unique_solutions.pop()\n    \n    return ans\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    amount_from_mum = 60\n    amount_from_dad = 40\n    days = 3\n\n    total_amount = (amount_from_mum + amount_from_dad) * days\n\n    return total_amount\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total = 36\n    ratio_sum = 4 + 5\n    apple_juice = (4 / ratio_sum) * total\n    return apple_juice\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    work_done_by_ivy_per_day = 1 / 24\n    work_done_by_kevin_per_day = 1 / 20\n    total_work = 1\n    \n    # Let x be the number of days Kevin takes off\n    # Total work done by Ivy = work done in 18 days\n    work_done_by_ivy = 18 * work_done_by_ivy_per_day\n    \n    # Total work done by Kevin = work done in (18 - x) days\n    work_done_by_kevin = (18 - x) * work_done_by_kevin_per_day\n    \n    # Together they complete the job\n    equation = work_done_by_ivy + work_done_by_kevin == total_work\n    \n    # Solve for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    days_off = solve(Eq(work_done_by_ivy + (18 - x) * work_done_by_kevin_per_day, 1), x)\n    \n    return days_off[0]\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the lengths of the two pieces of rope\n    longer_piece, shorter_piece = symbols('longer_piece shorter_piece')\n    \n    # Equation for the total length of the rope\n    equation1 = Eq(longer_piece + shorter_piece, 49.5)\n    # Equation representing the relationship between the longer and shorter pieces\n    equation2 = Eq(longer_piece, 5 * shorter_piece)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (longer_piece, shorter_piece))\n    \n    # Get the length of the longer piece and round to 1 decimal place\n    longer_length = round(solutions[longer_piece], 1)\n    \n    return longer_length\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    height = 25\n    climb_day = 4\n    slide_night = 1\n    accumulated_height = 0\n    day = 0\n\n    while accumulated_height < height:\n        day += 1\n        accumulated_height += climb_day\n        if accumulated_height >= height:\n            break\n        accumulated_height -= slide_night\n\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of work per day\n    nancy_rate = 1 / 6\n    # Combined rate of Nancy and Tim\n    combined_rate = 1 / 4\n    # Tim's rate of work per day is the combined rate minus Nancy's rate\n    tim_rate = combined_rate - nancy_rate\n    # Time taken for Tim to complete the work on his own\n    tim_time = 1 / tim_rate\n    \n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_amount = 100\n    days = 15\n\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # odd days, deposits £5\n            total_amount += 5\n        else:  # even days, spends £8\n            total_amount -= 8\n\n    return total_amount\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    x = symbols('x')\n    \n    # Normally, 20% of x are in year 7\n    year_7_normal = 0.20 * x\n    \n    # After some Year 7 girls miss school for a sports match\n    # The total left at school is 400, and year 7 is now 10% of this\n    remaining_year_7 = 0.10 * 400\n    \n    # The equation can be formed by expressing that the current remaining number\n    # of pupils normally in year 7 minus those who went to the match equals\n    # the remaining Year 7 pupils after the match\n    equation = Eq(year_7_normal - (year_7_normal - remaining_year_7), remaining_year_7)\n\n    # Solving the equation for x\n    total_pupils = solve(equation, x)[0]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    jump_up = 3\n    fall_down = 2\n    total_height = 31\n    effective_jump = jump_up - (fall_down // 3)\n\n    jumps_needed = (total_height - fall_down - 1) // effective_jump + 1\n\n    return jumps_needed\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_shoes = 40\n    remaining_after_dress = (remaining_after_shoes * 5) / 2\n    initial_amount = remaining_after_dress * 3\n\n    return initial_amount\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    def general_term(n):\n        if n == 1:\n            return 1 / (1 * 2)\n        else:\n            numerator = n\n            denominator = (n * (n - 1) + 1) * (n * (n - 1) + n)\n            return numerator / denominator\n\n    sum_of_series = sum(general_term(i) for i in range(1, 7))\n    sum_of_series += 1 / 22\n\n    return sum_of_series\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from math import factorial\n\ndef count_trailing_zeros(n):\n    count = 0\n    while n % 10 == 0:\n        n //= 10\n        count += 1\n    return count\n\ndef solution():\n    num_zeros_999 = count_trailing_zeros(factorial(999))\n    num_zeros_300 = count_trailing_zeros(factorial(300))\n    return num_zeros_999 - num_zeros_300\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Number of students on each side of the square on the outermost layer is one-fourth of the total students on the outer layer.\n    students_per_side = 60 // 4\n    \n    # The total number of layers can be found by adding 1 for the outermost layer,\n    # and then adding 1 for each subsequent layer moving inward.\n    # Since it's a square, the number of additional layers on each side is students_per_side // 2\n    total_layers = 1 + (students_per_side // 2)\n    \n    # The total number of students is the sum of the squares of numbers from 1 to total_layers\n    # As each layer forms a square with side length equal to the layer number.\n    num_students = sum((2 * i - 1) ** 2 for i in range(1, total_layers + 1))\n    \n    return num_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    total_conditions = []\n    \n    # Equations based on conditions\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    \n    for t in range(2, 100, 2): # Total is even and less than 100\n        # Equation for total number of vehicles\n        equation3 = Eq(cars + bikes + lorries, t)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        # Check if solutions are positive integers\n        if all(s.is_Integer and s > 0 for s in solutions.values()):\n            total_conditions.append(solutions)\n    \n    # Assuming we are interested in the first valid solution found\n    return total_conditions[0] if total_conditions else {}\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    result = 18 * 20132013 - 2013 * 180018\n    return result\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of buttons in box B at first\n    # Then box A has x + 64 buttons at first\n    # Ken adds y buttons to box A and removes 2y from box B\n    # The new number of buttons in box B is x - 2y\n    # The new number of buttons in box A is (x + 64 + y)\n    # The number of buttons in box B is now 28 fewer than before, so x - 2y = x - 28\n    # The ratio of the total number of buttons to the number of buttons in box B is 4:1\n    # (x + 64 + y + (x - 2y)) / (x - 2y) = 4 / 1\n    x, y = symbols('x y')\n    equation1 = Eq(x - 2*y, x - 28)\n    equation2 = Eq((x + 64 + y + (x - 2*y)) / (x - 2*y), 4/1)\n\n    solutions = solve((equation1, equation2), (x, y))\n    A_initial = solutions[x] + 64\n\n    return A_initial\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n\n    while (layer * 2 - 1)**2 <= total_tiles:\n        layer += 1\n\n    layer -= 1  # Get the last full layer that was laid\n    red_tiles = green_tiles = 0\n\n    for l in range(1, layer + 1):\n        side_length = (2 * l - 1)\n        tiles_in_layer = side_length**2 - (side_length - 2)**2 if l > 1 else 1\n        if l % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n\n    remaining_tiles = total_tiles - (red_tiles + green_tiles)\n    if layer % 2 == 0:\n        red_tiles += remaining_tiles\n    else:\n        green_tiles += remaining_tiles\n\n    difference = abs(red_tiles - green_tiles)\n    \n    if red_tiles > green_tiles:\n        return 'red', difference\n    else:\n        return 'green', difference\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval_between_bins = 10\n\n    # Number of intervals is one less than the number of bins\n    # because we place bins at both ends too\n    num_bins = (length_of_boulevard // interval_between_bins) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    for n in range(1, 1000):  # Arbitrary large number for upper limit\n        number = int(\"26\" + \"2011\" * n + \"7\")\n        if number % 33 == 0:\n            return n\n    return None\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n\n    total_flour = flour_per_cake * num_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let the number of wins be x, and the number of losses be y.\n    # We know that x + y = total_rounds and \n    # x * cards_per_win + y * cards_per_loss = total_cards.\n    # We can solve the two equations for y using substitution or elimination.\n    \n    # total_cards = x * cards_per_win + y * cards_per_loss\n    # total_cards = x * cards_per_win - y * 2\n    # Therefore, y = (x * cards_per_win - total_cards) / cards_per_loss\n\n    # Also, y = total_rounds - x\n    # By equating the two expressions for y we get:\n    # (x * cards_per_win - total_cards) / cards_per_loss = total_rounds - x\n\n    # Solve for x:\n    x = (total_cards + total_rounds * cards_per_loss) / (cards_per_win + cards_per_loss)\n\n    # Now calculate y using y = total_rounds - x\n    y = total_rounds - x\n\n    return int(y)\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Using stars and bars theorem for partitioning n identical items into k boxes\n    # Number of ways = (n + k - 1) choose (k - 1)\n    n = 7  # number of lollipops\n    k = 3  # number of plates\n    \n    ways = math.comb(n + k - 1, k - 1)\n    \n    return ways\n\nimport math\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # initial coins\n    rounds = 0  # number of rounds\n\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 2  # gives one to each other player and one to the discard pile\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob takes 3 minutes to make 3 cuts to get 4 pieces.\n    # Each cut takes 3/3 = 1 minute.\n    # For 8 pieces, 7 cuts are needed.\n    # Total time needed is 7 cuts * 1 minute per cut.\n    return 7 * 1\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n    \n    remaining_cards = initial_cards - duplicates + new_cards\n    \n    return remaining_cards\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chaiseng = symbols('rasidah chaiseng')\n\n    equation1 = Eq(rasidah, chaiseng - 48)\n    equation2 = Eq(rasidah - (3/5) * rasidah, 2 * (chaiseng - (6/7) * chaiseng))\n\n    solutions = solve((equation1, equation2), (rasidah, chaiseng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total = sum(1/i for i in range(1, 8))\n    return int(total)\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as one person, so there are 7 'people' to arrange\n    arrangement_for_7 = factorial(7)\n\n    # Amy and Judy can switch places with each other, so multiply by 2\n    arrangements_for_amy_judy = 2\n\n    # Since the table is circular, one of the arrangements is fixed to avoid identical rotations\n    fixed_rotation = 1 / 8\n\n    total_arrangements = arrangement_for_7 * arrangements_for_amy_judy * fixed_rotation\n    return int(total_arrangements)\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies Andy and Ben have\n    andy_original, ben_original = symbols('andy_original ben_original')\n\n    # Given condition\n    equation1 = Eq(andy_original + 84, ben_original)\n\n    # After buying more cookies\n    andy_final = andy_original + andy_original / 3\n    ben_final = ben_original + ben_original / 5\n\n    # Final condition\n    equation2 = Eq(andy_final, ben_final / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andy_original, ben_original))\n\n    # Andy's original number of cookies\n    andy_original_num = solutions[andy_original]\n\n    # Calculate the final number of cookies Andy has\n    andy_final_num = andy_original_num + andy_original_num / 3\n\n    return andy_final_num\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    bella_years = 5\n\n    # Compound Interest formula: A = P*(1 + r)^t\n    # where A = final amount, P = principal, r = interest rate per period, t = number of periods\n\n    # Calculate the number of years required for the principal to become the final amount\n    # Rearranging the formula: t = log(A/P) / log(1 + r)\n    from math import log\n    actual_years = log(final_amount / principal) / log(1 + interest_rate)\n\n    # If the actual number of years is close to what Bella said (+- 1 year), she is correct\n    # Otherwise, return the actual number of years, rounded to the nearest whole number\n    if abs(actual_years - bella_years) <= 1:\n        correct = True\n        return correct\n    else:\n        correct = False\n        return round(actual_years)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Observing the pattern in the sequence:\n    # The sequence is alternating between negative and positive numbers.\n    # The absolute values of the numbers are also increasing by 1 in each step.\n    # 18 (positive, 18), -16 (negative, 16), 19 (positive, 19), -15 (negative, 15), 20 (positive, 20), ...\n\n    # To find the next number 'n':\n    # The last number we have is 20 which is positive,\n    # so the next number should be negative.\n    # Additionally, the last negative number was -15,\n    # so the absolute value of the next negative number should be 15 + 1 = 16.\n\n    # Thus, the next number 'n' in the sequence is -16.\n    n = -16\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_fraction = 6 / 20\n    new_numerator = 12\n    new_denominator = new_numerator / original_fraction\n    return new_denominator\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since 4 students raised their hand for the first question and 6 for the second,\n    # and Tom raised his hand both times, \n    # the number on the slip of paper cannot be a multiple of 24 (otherwise everyone would know whether their number is divisible by it).\n    # It must, then, be a factor of 24 that is not 24 itself.\n\n    # The factors of 24 are 1, 2, 3, 4, 6, 8, 12 and 24.\n    # Since Tom raised his hand both times, \n    # his number must not be divisible by 24 and must be divisible by one of the other factors (other than 1, which all numbers are divisible by).\n    \n    # The numbers from 10 to 99 (two-digit numbers) that are divisible by these factors, \n    # excluding multiples of 24 and including each multiple only once, \n    # are as follows (we exclude 1 because it doesn't give us any additional information):\n    divisible_by_2 = [i for i in range(10, 100) if i % 2 == 0 and i % 24 != 0]\n    divisible_by_3 = [i for i in range(10, 100) if i % 3 == 0 and i % 24 != 0]\n    divisible_by_4 = [i for i in range(10, 100) if i % 4 == 0 and i % 24 != 0]\n    divisible_by_6 = [i for i in range(10, 100) if i % 6 == 0 and i % 24 != 0]\n    divisible_by_8 = [i for i in range(10, 100) if i % 8 == 0 and i % 24 != 0]\n    divisible_by_12 = [i for i in range(10, 100) if i % 12 == 0 and i % 24 != 0]\n    \n    # Now we will intersect the numbers to find common ones that 4 students might certainly have \n    # (since they were certain after the first number on the paper question)\n    certain_numbers = set(divisible_by_2) & set(divisible_by_3) & set(divisible_by_4) & set(divisible_by_6) & set(divisible_by_8) & set(divisible_by_12)\n    \n    # Now we also know that there are some students that were uncertain after the first round,\n    # but certain after the number 24 was introduced.\n    # These students' numbers must not be divisible by the factors we identified but must be divisible by 24.\n    uncertain_then_certain_numbers = [i for i in range(10, 100) if i % 24 == 0]\n    \n    # Combining all the numbers that are left, we have a situation where we have at least certain numbers for 4 students and certain numbers for other 2 students.\n    # The 3 uncertain students have numbers that aren't divisible by 24 nor by the factor on the slip.\n    # Hence, we remove those numbers and the remaining numbers would be those Tom has certainly seen on his friends' hat.\n    \n    all_two_digit_numbers = set(range(10, 100))\n    possible_numbers_tom_saw = list(all_two_digit_numbers - certain_numbers - set(uncertain_then_certain_numbers))\n    \n    # The sum of the remaining numbers is the answer.\n    return sum(possible_numbers_tom_saw)\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the four distinct positive whole numbers be a, b, c, and d\n    # We assume a > b > c > d\n    a, b, c, d = symbols('a b c d')\n\n    # The average of b, c, and d\n    avg_bcd = (b + c + d) / 3\n\n    # The average of a, b, and c\n    avg_abc = (a + b + c) / 3\n\n    # Based on the information given:\n    equation1 = Eq(d + avg_bcd, 39)\n    equation2 = Eq(a + avg_abc, 51)\n\n    # We also know that the numbers are distinct whole numbers\n    equation3 = Eq(a - b, 1)  # Since a is the next whole number after b\n    equation4 = Eq(b - c, 1)  # Since b is the next whole number after c\n    equation5 = Eq(c - d, 1)  # Since c is the next whole number after d\n\n    # Solving the system of equations to find the values of a, b, c, and d\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, d))\n\n    # The largest possible value of the largest number a\n    return max(solutions[a])\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils who passed at least one test\n    total_pass = 43\n    \n    # Pupils who passed each single subject\n    pass_math = 30\n    pass_science = 28\n    pass_english = 25\n    \n    # Use Inclusion-Exclusion Principle\n    # Sum of single subjects - (sum of pupils passing any two subjects) + all three subjects\n    # The minimum number of pupils passing any two subjects is 0 (extreme case to find maximum for all three)\n    # Therefore, maximum pupils passing all three equals to the Total - Sum of pupils in single subjects\n    max_all_three = total_pass - (pass_math + pass_science + pass_english)\n    \n    # If the number is negative, it means no students can be in all three sets, so the answer would be 0\n    # But the question asks for the maximum number, so the negative result implicates the need for overlapping\n    # Hence, we take the absolute value as it represents the minimum overlap needed\n    max_all_three = abs(max_all_three)\n    \n    return max_all_three\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    ahmad_speed = 80  # in meters per minute\n    brother_speed = 50  # in meters per minute\n    meet_distance_from_school = 210  # in meters\n\n    # Let the total distance from home to school be d meters.\n    # Time taken by Ahmad to cover d meters is d/80.\n    # Time taken by the brother to cover (d - 210) meters is (d - 210)/50.\n    # When Ahmad meets his brother, the time taken by both of them is the same.\n    # So the equation would be d/80 = (d - 210)/50.\n    # Solving for d gives us the distance between the school and their home.\n\n    # Cross-multiply to solve for d\n    d = (meet_distance_from_school * 80) / (80 - brother_speed)\n    \n    return d\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_8_place_value = 8000 # The first 8 holds the place value in thousands\n    second_8_place_value = 800 # The second 8 holds the place value in hundreds\n\n    difference_in_place_values = first_8_place_value - second_8_place_value\n    return difference_in_place_values\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common remainders\n    common_remainders = [(1, 5), (2, 6), (7, 11)]\n\n    # Step 2: Find the LCM of all the divisors\n    _, lcm = solve_congruence(*common_remainders)\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    unknown = lcm\n\n    return unknown\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical and the pencil cases are different, and no pencil case can be empty,\n    # we are essentially trying to partition the number 6 into 3 parts.\n    # Since each pencil case must contain at least one pen, we can start by placing one pen in each case. \n    # This leaves us with 3 pens to distribute freely among the 3 cases.\n    # We now need to find the number of solutions to the equation x + y + z = 3, where x, y, z are non-negative integers.\n    # This problem can be transformed into a stars and bars problem, where we want to find the number of ways to place two bars\n    # (which separate the three pencil cases) among the pens (3 pens + 2 bars = 5 items in total).\n    \n    pens_left = 3  # pens left after placing one in each case\n    bars = 2  # two bars to separate the pencil cases\n    total_items = pens_left + bars  # total number of items, pens and bars\n    \n    # The number of ways to arrange these items is given by the binomial coefficient C(total_items, bars)\n    from math import comb\n\n    ways = comb(total_items, bars)\n\n    return ways\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by 4, its last two digits must be divisible by 4\n    # For a number to be divisible by 5, its last digit must be 0 or 5\n    \n    # The last digit for divisibility by 5 can only be 0 or 5.\n    # Since the number also needs to be divisible by 4, the last two digits must form a number divisible by 4.\n    # Therefore, 'A' in the number has to be 0 since 5720 is divisible by 4 and 5, but 5725 is not divisible by 4.\n\n    A = 0\n    return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    original_number = 40309\n    while True:\n        original_number += 1\n        if str(original_number) == str(original_number)[::-1]:\n            return original_number - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    # Length of the ribbons\n    length1 = 16\n    length2 = 24\n    # Calculate the Greatest Common Divisor (GCD) of the two lengths\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The largest five-digit number is 99999 and the smallest is 10000.\n    # A number is a multiple of 45 if it's a multiple of 9 and 5.\n    # A number is a multiple of 5 if its last digit is 0 or 5.\n    # Since we are looking for a 5-digit palindromic number, its last digit must be 5\n    # because it must be the same as the first digit due to its palindromic nature\n    # and it cannot be 0 as it would not be a five-digit number then.\n    # In this case, to be a multiple of 9, the sum of the digits must be a multiple of 9.\n    \n    # Finding the largest 5-digit palindromic multiple of 45 by descending from the largest possible number\n    for i in range(99999, 10000, -45): # step should be 45 since we want a multiple of 45\n        str_i = str(i)\n        if str_i == str_i[::-1] and str_i[-1] == '5': # Check if palindromic and ends with 5\n            largest_palindrome = i\n            break\n    \n    # Finding the smallest 5-digit palindromic multiple of 45 by ascending from the smallest possible number\n    for i in range(10001, 99999, 45): # step should be 45 here as well\n        str_i = str(i)\n        if str_i == str_i[::-1] and str_i[-1] == '5': # Check if palindromic and ends with 5\n            smallest_palindrome = i\n            break\n    \n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind_luna = 4\n    \n    total_sheep = luna_position_from_front + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_wage\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the mean score of all 10 students\n    x = symbols('x')\n\n    # mean score of top 3 students is 92, which can be written as the sum 3*92\n    # mean score of last 7 students is x - 6, which can be written as the sum 7*(x - 6)\n    # equation representing the total score of all 10 students is the sum of above two equations\n    equation = Eq(3 * 92 + 7 * (x - 6), 10 * x)\n\n    # solve for x\n    mean_score = solve(equation, x)[0]\n\n    return mean_score\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = set(year_str)\n        if len(digits) == 4:  # Ensure 4 unique digits\n            for perm in permutations(digits, 4):\n                if int(''.join(perm)) == year:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed_km_per_hour = 550 / 5  # Speed is distance divided by time\n    distance_travelled_in_3_hours = speed_km_per_hour * 3  # Distance is speed multiplied by time\n    return distance_travelled_in_3_hours\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    total_marbles = sum(bags)\n\n    for red_marbles in bags:\n        remaining_bags = [b for b in bags if b != red_marbles]\n        for j1 in range(len(remaining_bags)):\n            for j2 in range(j1+1, len(remaining_bags)):\n                for j3 in range(j2+1, len(remaining_bags)):\n                    jaslin_bags = remaining_bags[j1] + remaining_bags[j2] + remaining_bags[j3]\n                    george_bags = total_marbles - red_marbles - jaslin_bags\n                    if jaslin_bags == 2 * george_bags:\n                        return red_marbles\n                    \nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # n = smallest even number\n    # Since they are consecutive even numbers, the sequence is: n, n+2, n+4, n+6, n+8\n    # According to the arithmetic sequence sum formula: S = n/2 * [2a + (n-1)d]\n    # Here, S = 100, n = 5 (since there are 5 terms), a = first term (unknown), d = 2 (difference between terms)\n    # Sum of 5 consecutive even numbers is: n + (n+2) + (n+4) + (n+6) + (n+8) = 5n + 20\n    # Setting the sum equal to 100: 5n + 20 = 100\n    n = (100 - 20) / 5\n    return int(n)\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    remaining_fraction = 1 - (2/5)\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    number_of_jumps = 14  # 15 - 1 because the first jump starts from post 1 to post 2\n\n    total_distance = distance_per_jump * number_of_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let 'a' be the number of sweets Andre has originally\n    # Let 'b' be the number of sweets Beth has originally\n    # According to the problem, a + b = 24 (Equation 1)\n    # After their teacher gave them 4 sweets each, Andre now has 6 sweets more than Beth\n    # So, (a + 4) = (b + 4) + 6\n    # which implies a = b + 6 (Equation 2)\n\n    # Now, we can substitute a from Equation 2 into Equation 1 to find the value of b\n    # (b + 6) + b = 24\n    # 2b + 6 = 24\n    # 2b = 24 - 6\n    # 2b = 18\n    # b = 18 / 2\n    # b = 9\n    \n    # Now we know that Beth originally had 9 sweets\n    # After receiving 4 more from their teacher, Beth now has\n    beth_now = 9 + 4\n    return beth_now\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from math import factorial\nfrom fractions import Fraction\n\ndef solution():\n    # There are 6 pairs of colors so there are factorial(6) ways to order these pairs.\n    pair_orderings = factorial(6)\n    \n    # For each pair of colors, there are 5 choices for the number of blocks between the pair (0, 2, 4, 6, 8).\n    # Since there are 6 pairs of colors, there are 5 ** 6 ways to choose the spaces between each pair.\n    spacing_options = 5 ** 6\n    \n    # Calculate the total number of even arrangements.\n    even_arrangements = pair_orderings * spacing_options\n    \n    # Calculate the total number of possible arrangements of the 12 blocks (considering the pairs indistinguishable).\n    # There are 12 blocks, but since there are 2 of each color, we must divide by factorial(2) for each color to avoid overcounting.\n    total_arrangements = factorial(12) // (factorial(2) ** 6)\n    \n    # Calculate the probability as a simplified fraction.\n    probability = Fraction(even_arrangements, total_arrangements)\n    \n    # Get m and n where probability is m/n.\n    m, n = probability.numerator, probability.denominator\n    \n    # Return m + n.\n    return m + n\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits (excluding chocolates)\n    friends = 6\n    fruits_per_friend = total_fruits // friends  # Division of fruits among friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Alan and Bob's combined rate\n    combined_rate = 1 / 4\n    # Bob's individual rate\n    bob_rate = 1 / 6\n    \n    # Alan's individual rate (subtract Bob's rate from combined rate)\n    alan_rate = combined_rate - bob_rate\n    \n    # Alan's individual time (inverse of Alan's rate)\n    alan_time = 1 / alan_rate\n    \n    return alan_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    \n    # Probability it will not rain on a day is 1 - probability it will rain\n    prob_not_rain_saturday = 1 - prob_rain_saturday\n    prob_not_rain_sunday = 1 - prob_rain_sunday\n    \n    # Probability it will not rain on both days\n    prob_not_rain_both_days = prob_not_rain_saturday * prob_not_rain_sunday\n    \n    # Probability that it will rain at least one day is 1 - probability it will not rain on both days\n    prob_rain_at_least_one_day = 1 - prob_not_rain_both_days\n    \n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rate of filling the pool by inlets A and B per minute\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n    \n    # Create a counter for the total time and a variable to keep track of the pool's fill level\n    total_time = 0\n    fill_level = 0\n    \n    # Boolean to keep track of which inlet is open, starting with A\n    inlet_A_open = True\n    \n    while fill_level < 1:\n        if inlet_A_open:\n            fill_level += rate_A  # fill for 1 minute with inlet A\n            total_time += 1  # increment total time by 1 minute\n            inlet_A_open = False  # switch to inlet B\n        else:\n            fill_level += rate_B * 2  # fill for 2 minutes with inlet B\n            total_time += 2  # increment total time by 2 minutes\n            inlet_A_open = True\n\n        # Alternate between 1 and 2 minutes for the next inlet opening sequence if pool is not full\n        if fill_level < 1:\n            if inlet_A_open:\n                fill_level += rate_A * 2  # fill for 2 minutes with inlet A\n                total_time += 2  # increment total time by 2 minutes\n                inlet_A_open = False  # switch to inlet B\n            else:\n                fill_level += rate_B  # fill for 1 minute with inlet B\n                total_time += 1  # increment total time by 1 minute\n                inlet_A_open = True\n                \n    return round(total_time)\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    count_of_twos = 0\n    count_of_fives = 0\n\n    # Loop to increment n until we have enough trailing zeros\n    while True:\n        # Current value to factorize\n        current = n\n\n        # Factorize current value with 2\n        while current % 2 == 0:\n            count_of_twos += 1\n            current //= 2\n\n        # Factorize current value with 5\n        while current % 5 == 0:\n            count_of_fives += 1\n            current //= 5\n\n        # Every pair of 2 and 5 gives one trailing zero\n        if min(count_of_twos, count_of_fives) >= 28:\n            break\n        else:\n            n += 1\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard + 3.24, henry)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    # Assume 'c' is the number of correct answers\n    # Assume 'w' is the number of wrong answers\n    # Given that there are a total of 10 questions\n    # We know that: c + w = 10\n    # Incorrect answers will result in a loss of 3 point, which is -3 points\n    # Given that each correct answer is awarded 10 points\n    # The total points Eddie gained: 10c - 3w = 48\n    # We substitute 'w' with (10 - c) from the first equation into the second\n    # we get: 10c - 3(10 - c) = 48\n    # Now we solve for 'c':\n    \n    for c in range(11):   # Since we cannot have more than 10 correct answers\n        w = 10 - c\n        if 10 * c - 3 * w == 48:\n            return w\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2*x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    empty_bottles = 10  # Initial empty bottles after drinking bought water\n    total_drinks = 10  # Total bottles Lucas can drink initially\n    lent_can = 1       # The shop owner lends him 1 empty bottle\n\n    empty_bottles += lent_can  # Add the lent bottle to his empty bottles\n\n    # Exchange empty bottles as long as he has more than one empty bottle\n    while empty_bottles > 1:\n        new_drinks = empty_bottles // 2  # Exchange bottles\n        total_drinks += new_drinks       # Add to total drinks\n        empty_bottles = new_drinks + (empty_bottles % 2)  # Update empty bottles\n\n    return total_drinks\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_pos = 10\n    andrea_pos_from_end = 12\n    \n    andrea_pos_from_start = total_children - andrea_pos_from_end + 1\n    \n    children_between = andrea_pos_from_start - vanessa_pos - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number_string = f\"281{digit}\"\n        number = int(number_string)\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n\n    unfenced_path = total_path - fenced_path\n\n    return unfenced_path\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Rate at which pool A drains per minute\n    rate_A = 1 / 10\n    # Rate at which pool B drains per minute\n    rate_B = 1 / 6\n\n    # Let t be the time in minutes after which A's waterline will be 3 times B's waterline\n    # Initial height of water in both pools is considered as 1 (same base and height)\n    # Pool A's height after t minutes = 1 - rate_A * t\n    # Pool B's height after t minutes = 1 - rate_B * t\n    # We want to find t such that (1 - rate_A * t) = 3 * (1 - rate_B * t)\n    # Solve for t\n    t = symbols('t')\n    equation = Eq(1 - rate_A * t, 3 * (1 - rate_B * t))\n    \n    # Use sympy's solve function to find the solution for t\n    solution = solve(equation, t)\n    \n    # Return the solution for t (time in minutes)\n    return solution[0]\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    weeks = 7\n    initial_sweets = 320\n    sweets_bought_each_week = 30\n    sweets_left_after_weeks = 348\n    \n    sweets_eaten_each_week = ((initial_sweets + (sweets_bought_each_week * weeks)) - sweets_left_after_weeks) / weeks\n    \n    return int(sweets_eaten_each_week)\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # There is only one way to distribute 1.\n    return 1\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has\n    # Chenxi has x + 5 sweets\n    \n    # When Chenxi gives 10 sweets to Yue Ying,\n    # Chenxi will have (x + 5 - 10) sweets and Yue Ying will have (x + 10) sweets\n    \n    # The difference in number of sweets they will have now is\n    # |(x + 10) - (x + 5 - 10)| = |20 - 5| = 15\n    \n    return 15\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 70))\n    for prime in primes:\n        if (69 - prime) in primes:\n            return abs(69 - 2 * prime)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours for consistency\n    late_time = 12 / 60  # 12 minutes late in hours\n    early_time = -8 / 60  # 8 minutes early in hours\n\n    # Let the distance be 'd' and the time taken at 3 km/h be 't'\n    # At 3 km/h, he is 12 minutes late, so actual time to reach on time would be 't - 12/60'\n    # At 7 km/h, he is 8 minutes early, so actual time to reach on time would be 't + 8/60'\n\n    # Distance = Speed * Time\n    # For the first case: d = 3 * (t + late_time)\n    # For the second case: d = 7 * (t - early_time)\n\n    # Equating both distances:\n    # 3 * (t + late_time) = 7 * (t - early_time)\n    t = (3 * late_time + 7 * early_time) / (7 - 3)\n\n    # Calculate the distance using either of the two speed-time equations.\n    d = 3 * (t + late_time)\n\n    return d\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the original number of students in school A\n    # Let b represent the original number of students in school B\n    a, b = symbols('a b')\n\n    # We have two equations based on the problem statement:\n    # Equation 1: a + b = 1050 (Total students in school A and B)\n    # Equation 2: (a - 20) = (b + 20) + 10 (School A after transferring 20 students still has 10 more students than school B)\n    equation1 = Eq(a + b, 1050)\n    equation2 = Eq(a - 20, b + 20 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    return solutions[a]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from sympy import symbols, Mul, Add, Max\n\ndef solution():\n    x = symbols('x')\n    expressions = [\n        Mul(Add(15, 5), Add(5, 15), evaluate=False) - 6 + 7,\n        15 + Mul(Add(5, 5), Add(15, -6), evaluate=False) + 7,\n        Mul(Add(15, 5), 5) + Mul(Add(15, -6), 7, evaluate=False),\n        Add(15, Mul(5, Add(5, Mul(15, Add(-6, 7, evaluate=False), evaluate=False), evaluate=False), evaluate=False)),\n        Add(15, Mul(5, Add(5, 15, evaluate=False), evaluate=False)) - Mul(6, -7, evaluate=False)\n    ]\n    max_expression = Max(*[expr.evalf() for expr in expressions])\n    return max_expression\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n    \n    for correct_answers in range(total_questions + 1):  # +1 because range is exclusive\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['8', '0', '7', '2', '0', '0', '3']\n    primes = []\n    \n    for i in range(1, len(digits) + 1):\n        for p in permutations(digits, i):\n            number = int(''.join(p))\n            if number < 50 and isprime(number) and number not in primes:\n                primes.append(number)\n    \n    ans = max(primes) if primes else None\n    return ans\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # Average of five numbers\n    average_five = 54\n    # Total sum of five numbers\n    total_sum_five = average_five * 5\n    \n    # Average of first two numbers\n    average_first_two = 48\n    # Total sum of first two numbers\n    total_sum_first_two = average_first_two * 2\n    \n    # Total sum of last three numbers\n    total_sum_last_three = total_sum_five - total_sum_first_two\n    \n    # Average of last three numbers\n    average_last_three = total_sum_last_three / 3\n    \n    return average_last_three\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age = symbols('teddy_age father_age')\n    # When Teddy was 5, his father's age was 7 times his age\n    equation1 = Eq(father_age, 7 * 5)\n    # When his father is 40 years old, we need to find Teddy's age at that time\n    equation2 = Eq(father_age - teddy_age, 40 - 5)\n\n    # Father's current age according to equation1\n    current_father_age = solve(equation1, father_age)[0]\n\n    # Now solve equation2 taking into account father's current age\n    teddy_future_age = solve(equation2.subs(father_age, current_father_age), teddy_age)[0]\n\n    return teddy_future_age\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Max number of slices after each cut follows the sequence: 1, 2, 4, 7, 11, ...\n    # Each number in sequence is sum of the cut number and the previous term\n    # In general, the number of slices after n cuts is: n*(n+1)/2 + 1\n    \n    cuts = 4\n    max_slices = (cuts * (cuts + 1)) // 2 + 1  # // is used for integer division\n\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Number of toys in the row\n    total_toys = 40\n    \n    # Position of the elephant from left to right\n    elephant_position_left_to_right = 10\n    \n    # Number of toys from the rabbit to the elephant\n    toys_between_rabbit_and_elephant = 5\n    \n    # Calculate the rabbit's position from left to right\n    # Since the elephant is on the left side of the rabbit,\n    # we add the toys between them to the elephant's position\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between_rabbit_and_elephant\n    \n    # Now calculate the rabbit's position from right to left\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n    \n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Let's denote the total number of people at the play as P.\n    # According to the problem, 2/7 of the audience were adults.\n    adults_fraction = 2 / 7\n    \n    # The remaining audience is 1 - 2/7 = 5/7.\n    remaining_fraction = 1 - adults_fraction\n    \n    # Out of the remaining audience, 4/5 were boys\n    boys_fraction_of_remaining = 4 / 5\n    \n    # The rest were girls, which is 1 - 4/5 = 1/5 of the remaining audience\n    girls_fraction_of_remaining = 1 - boys_fraction_of_remaining\n    \n    # Therefore, girls are 1/5 of 5/7 of the total audience\n    girls_fraction_of_total = girls_fraction_of_remaining * remaining_fraction\n    \n    # We are given that there are 80 more adults than girls\n    # Let's calculate the difference in fraction between adults and girls\n    adults_minus_girls_fraction = adults_fraction - girls_fraction_of_total\n    \n    # From the problem statement: Adults - Girls = 80\n    # We can find P with: P * (difference in fraction) = 80\n    # Therefore, P = 80 / (difference in fraction)\n    P = 80 / adults_minus_girls_fraction\n    \n    return int(P)\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for number in range(1, 110):  # including 109\n        sum_digits += sum(int(digit) for digit in str(number))\n    return sum_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p be the number of pink dolphins\n    # Since the number of gray dolphins is 11 times the number of pink dolphins,\n    # we can express the total number of dolphins as p + 11*p = 48\n    # Simplifying that we get 12*p = 48\n    # Solving for p, we get p = 48 / 12\n    p = 48 // 12\n\n    return p\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54  # area in cm^2\n    base = 9   # base length in cm\n    # Area of a triangle is 1/2 * base * height\n    # Therefore, height = (2 * Area) / base\n    height = (2 * area) / base\n    \n    return height\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 0.35 * 700\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original number of tables and chairs\n    x = symbols('x')\n    \n    # Equation representing the final relationship\n    equation = Eq((x + 24), 4 * (x - 42))\n\n    # Solving for x\n    num_chairs = solve(equation, x)[0]\n\n    return num_chairs\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    return 4 + 1 + 7  # Cabinets to the left, Candy's cabinet, cabinets to the right\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n\n    # Using the inclusion-exclusion principle, calculate students taking only one class\n    only_writing_class_students = total_students - neither_classes_students - (math_students - both_classes_students)\n\n    return only_writing_class_students\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for units in range(10):\n                if hundreds + tens + units == 7 and units % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression, using the fact that 4^982 = (2^2)^982 = 2^1964\n    # The expression becomes 2^2019 / (2^1964 - 2^1963)\n    # Since we only need the remainder when divided by 5, we can use modulo properties\n\n    # Calculate 2^2019 mod 5\n    numerator = pow(2, 2019, 5)\n\n    # Calculate (2^1964 - 2^1963) mod 5\n    term_1964 = pow(2, 1964, 5)\n    term_1963 = pow(2, 1963, 5)\n    denominator = (term_1964 - term_1963) % 5\n\n    # Since we are looking for the remainder, determine the multiplicative inverse\n    # of the denominator modulo 5, because denominator * inverse ≡ 1 (mod 5)\n    \n    # In modulo 5, the multiplicative inverses are: \n    # 1 ≡ 1 (mod 5), 2 ≡ 3 (mod 5), 3 ≡ 2 (mod 5), 4 ≡ 4 (mod 5)\n    # We need to find the inverse of denominator in mod 5\n    \n    # If denominator is 0, there is no multiplicative inverse and the division is undefined\n    if denominator == 0:\n        raise ValueError('Division by zero is undefined')\n    \n    inverse_denominator = pow(denominator, -1, 5)\n    remainder = (numerator * inverse_denominator) % 5\n\n    return remainder\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10): \n        if (1060 + y) % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    cookies_eaten = 6\n    remaining_cookies = total_cookies - cookies_eaten\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    return 8 * 5\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for num in range(99, -1, -1):\n        full_number = int(f\"49{num:02d}\")\n        if full_number % 2 == 0 and full_number % 3 == 0 and full_number % 5 == 0:\n            return full_number\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    \n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of motorcycles, cars, and lorries as m, c, and l respectively.\n    m, c, l = symbols('m c l')\n\n    # Total number of vehicles is 27.\n    vehicle_eq = Eq(m + c + l, 27)\n\n    # Total number of wheels is 96.\n    wheels_eq = Eq(2*m + 4*c + 6*l, 96)\n\n    # Number of cars is equal to the number of lorries.\n    car_lorry_eq = Eq(c, l)\n\n    # Solve the system of equations.\n    solutions = solve((vehicle_eq, wheels_eq, car_lorry_eq), (m, c, l))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    kristoff_height = solutions[kristoff]\n    ana_height = solutions[ana]\n\n    return kristoff_height - ana_height\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let the mass of the jar be 'j' and the mass of one chocolate be 'c'.\n    # We can write two equations based on the given:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # We want to find the mass of the jar with 10 chocolates, which is:\n    # j + 10c\n\n    # We can solve the two equations to find 'j' and 'c'\n    # Subtracting the first equation from the second, we get:\n    # 12c = 317 - 185\n    c = (317 - 185) / 12\n\n    # Now we can substitute the value of 'c' into the first equation to find 'j':\n    j = 185 - 5 * c\n\n    # Finally, calculate the mass of the jar with 10 chocolates:\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 0.1\n    return result\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    # The total number of intervals is one less than the number of trees\n    total_intervals = 21 - 1\n    \n    # The length of each interval is the total length of the road divided by the number of intervals\n    interval_length = 800 / total_intervals\n    \n    return interval_length\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n    \n    total_second_half = average_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Generate the possible combinations for the remaining three digits\n    # since the number should be divisible by 5, the last digit (units place) must be either 0 or 5\n    min_number = float('inf')\n    for d in range(10):  # tens place\n        for e in range(10):  # hundreds place\n            for f in [0, 5]:  # units place (must be 0 or 5 for divisibility by 5)\n                # Construct the seven-digit number with the given pattern\n                number = 1992000 + (d * 100) + (e * 10) + f\n                # Check for divisibility by 2, 3, and 11\n                if number % 2 == 0 and number % 3 == 0 and number % 11 == 0:\n                    # if it's smaller than the current minimum, update min_number\n                    min_number = min(min_number, number)\n    ans = min_number\n    return ans\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of each fruit John bought\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    \n    # The cost per apple is given\n    cost_per_apple = 0.60\n    \n    # The ratios provide equations for the cost spent on each fruit\n    # Money spent on apples: 3 parts\n    # Money spent on pears: 2 parts\n    # Money spent on mangoes: (1/5 part of pears) * 5 = 1 part\n    # Therefore 3 parts for apples, 2 parts for pears, 1 part for mangoes\n    \n    # Equation for the number of fruits based on the ratios given\n    equation1 = Eq(pears, (4/5) * apples)         # Pears are 4/5 as many as apples\n    equation2 = Eq(mangoes, (2/5) * apples)       # Mangoes are 2/5 as many as apples\n    \n    # Equation for the total cost\n    equation3 = Eq(3*0.60*apples + 2*0.60*(4/5)*apples + 0.60*(2/5)*apples, 150)\n    # 3 parts for apples at $0.60 each, 2 parts for pears (pears are 4/5 of apples), 1 part for mangoes (mangoes are 2/5 of apples)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, pears, mangoes))\n    \n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    letters = \"ELEMENT\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    ways = factorial(len(letters))\n    \n    for count in letter_counts.values():\n        ways //= factorial(count)\n    \n    return ways\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n    while b:\n        a, b = b, a % b\n    return a\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    # The number of terms in the sequence can be determined using the formula:\n    # n = (last_term - first_term) / common_difference + 1\n    # Here, the common difference is 1, so n = (11 - 4) + 1 = 8\n    num_terms = (last_term - first_term) + 1\n    # The sum of an arithmetic sequence can be found using the formula:\n    # sum = n/2 * (first_term + last_term)\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    avg_total = 92\n    avg_first_five = 94\n    total_assignments = 6\n\n    total_score_first_five = avg_first_five * (total_assignments - 1)\n    total_score_all = avg_total * total_assignments\n\n    score_sixth_assignment = total_score_all - total_score_first_five\n\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n    \n    # Calculating profit per pair\n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n    \n    # Calculating total pairs sold\n    total_pairs_sold = total_profit / profit_per_pair\n    \n    # Calculating total pairs purchased initially including the remaining pairs\n    initial_pairs_purchased = total_pairs_sold + remaining_pairs\n    \n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_now = 30\n    cars_exited = 10\n    cars_entered = 8\n    \n    cars_initial = cars_now - cars_entered + cars_exited\n    return cars_initial\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_duration_str = '1:45'  # Time from 5:30 PM to 7:15 PM which is half of the duration\n    half_duration = datetime.strptime(half_duration_str, '%H:%M')\n    half_duration_td = timedelta(hours=half_duration.hour, minutes=half_duration.minute)\n    \n    midpoint_time_str = '17:30'  # The midpoint time at 5:30 PM\n    midpoint_time = datetime.strptime(midpoint_time_str, '%H:%M')\n    \n    start_time = midpoint_time - half_duration_td  # Start time\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    filled = 0\n    days = 0\n\n    while filled < 59:\n        days += 1\n        if days == 1:\n            filled += 3\n        else:\n            filled += (10 - 3)\n        if filled >= 59:\n            break\n\n    return days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    for x in range(1000):  # loop through a range of possible numbers\n        if (x * 2 / 4)**2 == (6 * 10 + 4):  # perform the given operations and check if it equals to the desired result\n            return x\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "from math import gcd\n\ndef solution():\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    current_sum = 0\n    while total_seconds > 0:\n        digits = len(str(current_number))\n        if total_seconds < digits:\n            break\n        current_sum += current_number\n        total_seconds -= digits\n        current_number += 1\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    \n    min_amount = min(amounts)\n    max_amount = max(amounts)\n    \n    return max_amount - min_amount\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    duration = timedelta(minutes=225)\n    start_time = end_time - duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    max_non_green = 5 + 9 + 2  # Number of blue, white, and black marbles\n    # Darrell must pick all non-green marbles plus one more to guarantee a green\n    return max_non_green + 1\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    # Each pair of teams plays exactly one match, so we need the number of combinations of 20 teams taken 2 at a time\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # 6 days * 6 metres/day + 2 metres on the 7th day\n    total_height = 20\n    remaining_after_day_7 = total_height - total_climbed\n    slide_down = 6 - remaining_after_day_7  # 6 metres climbed - the remaining height after day 7\n\n    return slide_down\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbit_count = 32\n    years = 3\n    for _ in range(years):\n        initial_rabbit_count = 3 * initial_rabbit_count / 2  # 3 times as many rabbits, then half of them die\n    return int(initial_rabbit_count)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    candy_speed = symbols('candy_speed')\n\n    # Ivy has a head start of 6 minutes, so she walks for 18 minutes in total\n    ivy_time = 18  # in minutes\n    candy_time = 12  # Candy walks for 12 minutes\n\n    ivy_speed = candy_speed + 20  # Ivy's speed is 20m/min more than Candy's\n\n    # Ivy's distance = ivy_speed * ivy_time\n    # Candy's distance = candy_speed * candy_time\n    # The sum of the distances they each walked should equal 1200 meters\n    equation = Eq((ivy_speed * ivy_time) + (candy_speed * candy_time), 1200)\n\n    solutions = solve(equation, candy_speed)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # Since there are 8 players, and each has a different number of wins, the maximum number\n    # of wins is 7 (as no one can win against themselves).\n    # Each player has to lose at least once because there can't be two players with the same number of wins.\n    # Hence, the champion can win a maximum of 7 - 1 = 6 games.\n\n    return 6\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the number of years we are looking for\n    edward_age = 8 + x\n    mother_age = 32 + x\n\n    equation = Eq(mother_age, 3 * edward_age)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm on the plan represents 6 meters in reality\n    playground_plan_length_cm = 5\n    # Calculate the actual length by multiplying the length in the plan by the scale ratio\n    playground_real_length_m = playground_plan_length_cm * scale_ratio\n    \n    return playground_real_length_m\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6\n    weight_metal2 = 14\n    nickel_percentage1 = 45\n    nickel_percentage2 = 60\n\n    total_nickel = (weight_metal1 * nickel_percentage1 / 100) + (weight_metal2 * nickel_percentage2 / 100)\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_concentration_percentage = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration_percentage\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 100):  # Assuming the number of students is less than 10000 (100 squared)\n        initial_square = n ** 2\n        students = initial_square + 11\n        new_square = (n + 1) ** 2\n        if new_square - students == 12:\n            return students\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    # Initialize the largest product to 0.\n    # Since we are looking for the largest product,\n    # we start with the lowest possible product.\n    largest_product = 0\n  \n    # We iterate through all possible combinations\n    # of four numbers that add up to 13.\n    # This brute force approach is feasible because the\n    # number of combinations is small.\n    for a in range(1, 13):\n        for b in range(1, 13 - a):\n            for c in range(1, 13 - a - b):\n                d = 13 - a - b - c  # The sum must be 13\n                # Calculate the product of the four numbers\n                product = a * b * c * d\n                \n                # If the current product is greater than the \n                # largest_product found so far, update the largest_product.\n                if product > largest_product:\n                    largest_product = product\n                    \n    # Return the largest product found.\n    return largest_product\n\n# Call the solution function and assign the result to 'ans'\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    num_boxes = total_money // cookie_box_price\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - (4000000 + 800)\n    return missing_number\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    tank_b = tank_a + 56\n    return tank_b\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # £15 million\n\n    richie_share = total_wealth * (1 / 3)\n    remaining_after_richie = total_wealth - richie_share\n    \n    thrifty_share = remaining_after_richie * (1 / 2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    \n    bounty_share = remaining_after_thrifty * (2 / 5)\n    archie_share = remaining_after_thrifty - bounty_share\n    \n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volleyballs, basketballs = symbols('volleyballs basketballs')\n\n    # Total number of balls equation\n    total_balls = Eq(volleyballs + basketballs, 12)\n    # Total cost equation\n    total_cost = Eq(25 * volleyballs + 30 * basketballs, 340)\n\n    solutions = solve((total_balls, total_cost), (volleyballs, basketballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_average = 30\n    total_average = 26\n\n    # Let the number of girls be 'girls'\n    # Using the formula for average: (Sum of quantities) / (Total number of quantities) = Average\n    # Sum of quantities picked by boys = boys * boys_average\n    # Sum of quantities picked by everyone = (boys + girls) * total_average\n\n    # Let's set up the equation based on the information given:\n    # (boys * boys_average) + (girls * 20) = (boys + girls) * total_average\n\n    # Now let's solve for 'girls':\n    # girls = ((boys + girls) * total_average - boys * boys_average) / 20\n\n    # We can then rearrange to find expression for girls:\n    # girls = ((boys + girls) * total_average) / 20 - (boys * boys_average) / 20\n\n    # Simplifying the equation by substituting the known values:\n    # girls = ((15 + girls) * 26) / 20 - (15 * 30) / 20\n\n    # Now we solve for girls by moving all terms involving 'girls' to one side of the equation:\n    # girls / 20 = (15 + girls) * 26 / 20 - (15 * 30) / 20\n\n    # Multiply through by 20 to get rid of the denominator:\n    # girls = (15 + girls) * 26 - 15 * 30\n\n    # Equivalent to:\n    # girls = 390 + 26*girls - 450\n    # girls - 26*girls = -390 + 450\n    # -25*girls = 60\n    # girls = -60 / -25\n    # girls = 2.4\n\n    # Since the number of girls must be an integer, we conclude that\n    # there is a mistake in the setup or the problem is unsolvable as stated.\n    return \"unsolvable with current constraints\"\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = total_candy * (3 / 4)\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = remaining_candy * (1 / 3)\n    candy_remaining = remaining_candy - candy_given_to_brother\n    return candy_remaining\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/i for i in range(2, 61)))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Roy's share be r and Dennis' share be d\n    r, d = symbols('r d')\n\n    # Total sum of their money\n    total_sum_equation = Eq(r + d, 340)\n\n    # After spending their money\n    roy_left_equation = Eq(r - (2/3) * r, d / 2)\n\n    # Solve the system of equations\n    solutions = solve((total_sum_equation, roy_left_equation), (r, d))\n\n    dennis_end_money = solutions[d] - solutions[d] / 4\n\n    return dennis_end_money\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n\n    saturday = friday + 27\n    sunday = friday - 14\n\n    equation = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve(equation, friday)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let strawberry, chocolate, and mint be the variables for their respective weights in the first container\n    # Let x be the multiplier for the second container size, and y for the third\n    strawberry, chocolate, mint, x, y = symbols('strawberry chocolate mint x y')\n\n    # Create equations based on the given fractions and conditions\n    # Container 1 equations\n    equation1 = Eq(strawberry, (2 / 5) * (strawberry + chocolate + mint))\n    equation2 = Eq(chocolate, (3 / 5) * (strawberry + chocolate + mint) - mint)\n    # Using equation2 to express the ratio of chocolate to mint to simplify future equations\n\n    # Container 2 equations\n    equation3 = Eq(x * strawberry, (2 / 7) * (x * (strawberry + chocolate + mint)))\n    equation4 = Eq(x * chocolate, (5 / 7) * (x * (strawberry + chocolate + mint)) - mint)\n    # Container 3 equations\n    equation5 = Eq(y * strawberry, (2 / 9) * (y * (strawberry + chocolate + mint)))\n    equation6 = Eq(y * chocolate, (7 / 9) * (y * (strawberry + chocolate + mint)) - mint)\n\n    # Total mass equation\n    total_mass = strawberry + chocolate + mint + x * (strawberry + chocolate + mint) + y * (strawberry + chocolate + mint)\n    equation7 = Eq(total_mass, 1371)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (strawberry, chocolate, mint, x, y))\n\n    # Calculate the total mass of strawberry candies across all the containers\n    total_strawberry = solutions[strawberry] + solutions[x] * solutions[strawberry] + solutions[y] * solutions[strawberry]\n\n    return total_strawberry\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Initial count of digits used up to page number 9 is 9 (single digits)\n    digits_used = 9\n    # Starting from page 10 to 99, we have 90 pages each using 2 digits.\n    # Check if adding these pages exceeds the 300 digit limit\n    if digits_used + (90 * 2) > 300:\n        # Find the last page number where the total digits used is equal or less than 300\n        pages = (300 - digits_used) // 2\n        return pages + 9\n    else:\n        # Update the count of digits used\n        digits_used += (90 * 2)\n    \n    # Starting from page 100, pages use 3 digits. \n    # Check how many of such pages we can have without exceeding 300 digits used.\n    if digits_used + (900 * 3) > 300:\n        # Find the last page number where the total digits used is equal or less than 300\n        pages = (300 - digits_used) // 3\n        return pages + 99\n    else:\n        # Update the count of digits used\n        digits_used += (900 * 3)\n\n    # Any additional logic for pages beyond 999 would be here (with 4 or more digits each),\n    # but as we have only 300 digits, it is not needed in this scenario.\n\n    return None\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    # Total cost spent on balls\n    total_cost_balls = 8 * 20.45\n    \n    # Total cost spent on hula hoops (remaining from the total payment)\n    total_cost_hoops = 235.60 - total_cost_balls\n    \n    # Number of hula hoops\n    num_hoops = 6\n    \n    # Calculate the cost of each hula hoop\n    cost_per_hoop = total_cost_hoops / num_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    last_digit_13 = 3 ** (242 % 4)\n    last_digit_17 = 7 ** (379 % 4)\n    last_digit_4 = 4 ** (2012 % 2)\n    \n    return (last_digit_13 + last_digit_17 * last_digit_4) % 10\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    import math\n\n    def prime_factors(n):\n        factors = {}\n        # Even number divisible\n        while n % 2 == 0:\n            factors[2] = factors.get(2, 0) + 1\n            n //= 2\n\n        # n reduced to be odd\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                n //= i\n\n        # If n is a prime\n        if n > 2:\n            factors[n] = factors.get(n, 0) + 1\n\n        return factors\n\n    def smallest_square_factor(num):\n        factors = prime_factors(num)\n        product = 1\n        for prime, power in factors.items():\n            if power % 2 != 0:\n                product *= prime\n\n        return product\n\n    return smallest_square_factor(693)\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters_initial = 8 * 3  # Total volume of juice bought\n    total_liters_remaining = total_liters_initial - 9  # Total volume after drinking 9 liters\n    containers_needed = -(-total_liters_remaining // 5)  # Total containers needed (ceil division)\n\n    return containers_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n\n    # Position from the end is total_people - position_from_start + 1\n    position_from_end = total_people - position_from_start + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n\n    # Mary had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry_initial, (7/5) * alexis_initial)\n\n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    marry_final = marry_initial - (marry_initial * 0.2)\n    alexis_final = alexis_initial - (alexis_initial * 0.2)\n    charlotte_final = charlotte_initial + (marry_initial * 0.2) + (alexis_initial * 0.2)\n\n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial * 1.8)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation3 = Eq(marry_final, charlotte_final + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry_initial, alexis_initial, charlotte_initial))\n\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3 1/2 kg in decimal form\n    steak_cost_per_kg = 7.50  # £7.50 per kg\n    money_available = 20  # £20 note\n\n    total_steak_cost = steak_weight * steak_cost_per_kg  # total cost for the steak\n    extra_money_needed = total_steak_cost - money_available if total_steak_cost > money_available else 0\n    \n    return extra_money_needed\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for light and heavy bowling ball masses\n    light_ball, heavy_ball = symbols('light_ball heavy_ball')\n\n    # Given the relationship between heavy and light bowling balls\n    equation1 = Eq(heavy_ball, 2 * light_ball)\n    \n    # The total mass of the bowling balls given\n    equation2 = Eq(6 * light_ball + 6 * heavy_ball, 65.7)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (light_ball, heavy_ball))\n\n    # Find the mass of a light bowling ball and round it to the nearest kg\n    light_ball_mass = solutions[light_ball].evalf()\n    return round(light_ball_mass)\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # The first digit cannot be 0\n        for digit2 in range(0, 10):  # The second digit can be 0-9\n            # Since it's a palindromic number, the last digit must be the same as the first and the second to last the same as the second\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n\n    return sweets_C\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    A, B, C = solutions[A], solutions[B], solutions[C]\n\n    average_abc = (A + B + C) / 3\n\n    return average_abc\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let x be the number of pens Denise has.\n    # Then Jay has 6 times as many pens as Denise, so Jay has 6 * x pens.\n    # Together, they have x + 6 * x = 126 pens.\n\n    # We can now create an equation to solve for x:\n    # x + 6 * x = 126\n    # 7 * x = 126\n    # x = 126 / 7\n    # x = 18\n    \n    denise_pens = 126 // 7\n    return denise_pens\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = 650\n    total_balls = 250\n\n    # Equation 1: Number of children\n    equation1 = Eq(boys + girls, total_children)\n    \n    # Equation 2: Relation between boys, girls and number of balls\n    equation2 = Eq(boys / 3 + girls / 2, total_balls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    g, b = symbols('g b')\n\n    # eq1: girls left in classroom is 2/3 of boys after 25 girls went outside\n    eq1 = Eq(g - 25, 2/3 * b)\n    # eq2: boys left in classroom equals to girls left when 15 boys went to play\n    eq2 = Eq(b - 15, g - 25)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (g, b))\n\n    girls_init = solutions[g]\n    boys_init = solutions[b]\n\n    # Total number of students at first\n    total_students = girls_init + boys_init\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be at least 1 (can't be zero for a three-digit number)\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Ones digit must be even, so step by 2\n                if hundreds + tens + ones == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the cost of 5 chocolate bars\n    chocolate_bar_cost = 5 * 1.26\n    # Since 6 cookies cost the same as 5 chocolate bars, find the price per cookie\n    cookie_cost = chocolate_bar_cost / 6\n    # Calculate the cost of 4 cookies\n    total_cost_for_cookies = 4 * cookie_cost\n    # Subtract the cost of 4 cookies from the initial amount of money\n    remaining_money = 9.05 - total_cost_for_cookies\n    \n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for x in range(1, 100):  # assuming the missing number is less than 100 for practical reasons\n        if 8 * 11 == x * 9 + 34:\n            return x\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    spent = 6400\n    discount = 0.8\n    original_price = spent / (1 - discount)\n    savings = original_price - spent\n    return savings\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 7590  # in cents\n    ratio_10 = 8\n    ratio_50 = 3\n    ratio_sum = ratio_10 + ratio_50\n    value_50 = (total_value * ratio_50) / ratio_sum\n\n    return value_50\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    remaining_base_area = (base_side_length ** 2) - (hole_side_length ** 2)\n    volume = 320\n    height = volume / remaining_base_area\n    \n    return height\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    # Given equation: 3x = 10y\n    # Weight of one x: 1.5g\n    weight_x = 1.5\n    \n    # Calculate the weight of one y\n    # weight_y = (weight of 3 x's) / (10 y's)\n    weight_y = (3 * weight_x) / 10\n    \n    return weight_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    triangle_number = lambda n: n * (n + 1) // 2\n\n    count = 0\n    current_triangle_number = 0\n    n = 1\n    \n    while count < 2008:\n        current_triangle_number = triangle_number(n)\n        if count + n >= 2008:\n            break\n        count += n\n        n += 1\n\n    ans = 2008 - count\n    return ans\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Amy and Judy forming a block, so we treat them as one person.\n    # That means we have 7 'entities' to arrange (Amy&Judy block + 6 other people).\n    arrangements_of_seven = factorial(7)\n\n    # Amy and Judy can swap places within their block.\n    arrangements_within_block = factorial(2)\n\n    # Considering the table rotation, we can fix one person's position \n    # (since rotating the table would not change the relative order).\n    # Therefore, we are arranging the remaining six people around a fixed point.\n    # This eliminates duplicates due to rotation.\n\n    # Thus, the total arrangements is the product of these options.\n    total_arrangements = arrangements_of_seven * arrangements_within_block\n\n    return total_arrangements\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    # To find the number of terms, we calculate the difference between the last (26) and first term (6),\n    # divide by the common difference (4) and add 1\n    n_terms = ((26 - first_term) / common_difference) + 1\n    last_term = 26\n\n    # Here we use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_of_sequence = n_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers\n    for i in range(100, 1000):\n        # Calculate the sum of the digits of i\n        digits_sum = sum(map(int, str(i)))\n        # Check if the sum of digits is 5\n        if digits_sum == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    # The sequence of numbers between 1 to 100 that leave a remainder of 2 when divided by 5\n    # start at 2 and increase by 5 each time (i.e., an arithmetic sequence with first term 2 and common difference 5)\n    # The last term will be the greatest number less than or equal to 100 that leaves a remainder of 2 when divided by 5\n    \n    first_term = 2\n    common_difference = 5\n    n = 1\n    while (first_term + common_difference * (n - 1)) <= 100:\n        n += 1\n    \n    n -= 1  # Correct the term count since the loop goes one term too far\n    last_term = first_term + common_difference * (n - 1)\n\n    # Sum of the arithmetic sequence\n    sum_seq = n * (first_term + last_term) / 2\n    \n    return int(sum_seq)\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # A cannot be zero since it's a 3-digit number.\n            return A*100 + B*10 + C\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # number of terms n is given as 31\n    n = 31\n\n    # the 16th term a_16 is 100\n    a_16 = 100\n\n    # difference d is given as 6\n    d = 6\n\n    # Calculate the first term a_1 using the formula a_n = a_1 + (n-1)*d\n    # where a_n is the nth term, and solving for a_1 gives us a_1 = a_n - (n-1)*d\n    # a_1 = a_16 - (16-1)*d\n    a_1 = a_16 - (16-1)*d\n\n    # Calculate the sum of the first n terms of an arithmetic sequence\n    # using the formula S_n = n/2 * (2*a_1 + (n-1)*d)\n    S_n = n / 2 * (2 * a_1 + (n - 1) * d)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure Chris's victory, he must force Dylan into a position where\n    # no matter Dylan takes 1 or 2 matches, Chris will be able to take the last match.\n    # If Chris takes 1 match at first, then there will be 6 matches left.\n    # This is a losing position for Chris because:\n    # - If Dylan takes 1 match, 5 will be left and Chris can only take 1 or 2,\n    #   in which case Dylan will always be able to take the last match.\n    # - If Dylan takes 2 matches, 4 will be left and it is the same situation\n    #   as when there were 6 matches.\n\n    # By similar logic, if Chris takes away 2 matches first, this will leave 5 matches.\n    # Chris is again putting himself in a losing position for the same \n    # reasoning as above with 6 matches left.\n\n    # However, if Chris takes away 1 match, he can force Dylan to take either 1 or 2 matches,\n    # and then adjust his strategy to always leave a multiple of 3 for Dylan's turn.\n    # This way whenever Dylan plays, Chris can adjust his turn to make the total matches\n    # taken 3, leaving another multiple of 3 for Dylan until the matches run out.\n\n    # The victory strategy for Chris is to take away 1 match to leave 6 matches.\n    # Dylan can take away 1 or 2 matches, but Chris can always adjust to take away 2 or 1 matches\n    # to leave 3 matches for Dylan's next turn, ensuring the victory for Chris.\n\n    # So Chris should take away 1 match in the first turn.\n    num_matches_chris_takes = 1\n    return num_matches_chris_takes\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    # Iterate through all permutations of numbers 0-9\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:  # Skip if A or D is 0 because they are the first digit of a number\n            continue\n        \n        # Construct the numbers based on the permutation\n        ABAC = A*1000 + B*100 + A*10 + C\n        DBEC = D*1000 + B*100 + E*10 + C\n        ACEDC = A*10000 + C*1000 + E*100 + D*10 + C\n        \n        # Check if the numbers satisfy the given equation\n        if ABAC + DBEC == ACEDC:\n            return DBEC  # Return the 4-digit number represented by DBEC\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    # Convert 9.23am to minutes\n    time_am = 9 * 60 + 23\n    \n    # Convert 1.06pm to minutes\n    time_pm = 13 * 60 + 6  # 1pm is equal to 13 in 24 hours format\n    \n    # Calculate the difference\n    difference = time_pm - time_am\n\n    return difference\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    result = (64 + 36) * (64 - 36)\n    return result\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Since we don't have the details of the number of restaurants available\n    # to choose from, we cannot calculate the exact number of different choices.\n    # We can assume the variable 'restaurants' represents the number of\n    # restaurants to choose from.\n    # If 'restaurants' is the total number of restaurants he can pick from,\n    # then the number of different choices is equal to the number of restaurants\n    # since he can only choose one restaurant to eat at, which equates to the\n    # number of ways to choose 1 from 'n' options (which is 'n' itself).\n    \n    restaurants = symbols('restaurants')\n\n    # The number of ways to choose one restaurant from the total number\n    # of restaurants is simply the number of restaurants itself.\n    num_choices = restaurants\n\n    # Assuming we have the number of restaurants\n    # For example, if there were 10 restaurants to choose from,\n    # num_choices = 10\n    \n    return num_choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # The sequence from 1 to 9\n    first_sum = sum(range(1,10))\n    \n    # The sequence from 8 to 1\n    second_sum = sum(range(1,9))\n\n    # The total sum\n    total_sum = first_sum + second_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for a single notebook, pencil case, and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Initial equations based on the problem statement\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    sumation = 0\n    for i in range(53, 22, -6):\n        sumation += i - (i - 3)\n    return sumation\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, E, I = p\n        if A == 0:  # A cannot be 0 since it's the first digit in AEEA\n            continue\n        aeea = 1000 * A + 110 * E + A\n        iea = 10 * I + E\n        ieaaiea = 10000 * I + 1010 * E + A + iea\n        if ieaaiea == aeea:\n            return aeea\n    return None\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25  # Total age of the family\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_age - (harry_age + mom_age + sister_age)  # Age of Harry's dad\n\n    return dad_age\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    page_count = 0\n    used_digits = 0\n    \n    while used_digits < 450:\n        page_count += 1\n        if page_count >= 10 ** digits_per_page:\n            digits_per_page += 1\n        used_digits += digits_per_page\n    \n    return page_count\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # A typical classroom door is about 2 meters or 200 centimeters in height.\n    # We convert all the provided measurements to centimeters for easier comparison.\n    measurements_cm = {\n        '83 m': 83 * 100,\n        '200 cm': 200,\n        '8 cm': 8,\n        '1/2 m': 0.5 * 100\n    }\n    \n    # The standard height for a classroom door in centimeters is approximately 200 cm.\n    standard_door_height_cm = 200\n    \n    # Find the measurement closest to the standard height in cm.\n    closest = min(measurements_cm, key=lambda x: abs(measurements_cm[x] - standard_door_height_cm))\n    return closest\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Find the remaining fraction of money after buying lunch\n    remaining_after_lunch = 1 - 5/12\n    # Find the remaining fraction of money after buying dinner\n    remaining_after_dinner = 1 - 2/7\n    # Calculate the final remaining fraction of the initial money\n    final_remaining_fraction = remaining_after_lunch * remaining_after_dinner\n    # Since we know the final remaining money, we can find the initial money\n    initial_money = 45 / final_remaining_fraction\n\n    return initial_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits_per_page = 1\n    page_count = 0\n    count = 0\n\n    while count < total_digits:\n        page_count += 1\n        count += digits_per_page\n        if page_count >= 10 ** digits_per_page:\n            digits_per_page += 1\n\n    return page_count\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Total number of games is combination of 5 taken 2 at a time\n    wins_by_lily_eva_tina_emma = 2 + 1 + 4 + 3  # Sum of the games won by the four players\n    wins_by_gina = total_games - wins_by_lily_eva_tina_emma  # Remaining wins must be by Gina\n    return wins_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    return 2 * difference\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants\n    distance = 400  # Distance along the slope in meters\n    incline_angle = 20  # Incline angle in degrees\n    coefficient_of_friction = 0.2  # Coefficient of kinetic friction\n    \n    # Conversion from degrees to radians\n    incline_angle_radians = math.radians(incline_angle)\n\n    # Acceleration due to gravity in m/s^2\n    g = 9.81\n\n    # Net acceleration along the slope\n    # Net force = gravitational force along slope - frictional force\n    # Net acceleration = net force / mass (mass gets canceled out in the equation)\n    net_acceleration = g * math.sin(incline_angle_radians) - coefficient_of_friction * g * math.cos(incline_angle_radians)\n\n    # Final velocity using kinematic equation: v^2 = u^2 + 2as\n    # Starting from rest implies initial velocity u is 0\n    final_velocity = math.sqrt(2 * net_acceleration * distance)\n\n    return final_velocity\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    eddie_advantage = 15\n\n    # Let's assume Avril scores 'x' questions correctly, which gives her 10*x points.\n    # Eddie got 15 more points, so he scores 'x + (eddie_advantage / 10)' questions correctly.\n    # The total number of correctly answered questions will be 'x + x + (eddie_advantage / 10)'.\n    # Incorrectly answered or skipped questions will deduct 5 points for each question not correctly answered.\n    # Total points = Avril's correct points + Avril's incorrect points + Eddie's correct points + Eddie's incorrect points\n    # 155 = 10*x + (5*(10 - x)) + 10*(x + (eddie_advantage / 10)) + (5*(10 - (x + (eddie_advantage / 10))))\n\n    # Simplify and solve for x\n    for avril_correct in range(11):  # Avril can only score from 0 to 10\n        eddie_correct = avril_correct + (eddie_advantage / 10)\n        points = 10 * avril_correct + 5 * (10 - avril_correct) + 10 * eddie_correct + 5 * (10 - eddie_correct)\n        if points == total_points:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    total_spent = 300\n    cost_per_shirt = 5\n    cost_per_bag = 10\n    \n    # Marcus' calculation: groups = total_spent / (cost_per_shirt + cost_per_bag)\n    marcus_groups = total_spent / (cost_per_shirt + cost_per_bag)\n    marcus_shirts = marcus_groups * 4  # He mistakenly multiplied by 1 instead of 4\n    \n    # Correct calculation:\n    # Each group consists of 4 shirts and 1 bag, which cost 4*5 + 10 = $30\n    cost_per_group = 4 * cost_per_shirt + cost_per_bag\n    groups = total_spent // cost_per_group\n    shirts = groups * 4  # 4 shirts per group\n    \n    return shirts if shirts != marcus_shirts else \"Marcus' solution is correct\"\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men can complete the job in 5 days, so 1 man can complete the job in 6*5 days.\n    man_days = 6 * 5\n    # Similarly, 5 women can complete the job in 6 days, so 1 woman can complete the job in 5*6 days.\n    woman_days = 5 * 6\n\n    # 1 man's work per day\n    man_work_per_day = 1 / man_days\n    # 1 woman's work per day\n    woman_work_per_day = 1 / woman_days\n    \n    # Work per day for 10 men and 5 women\n    total_work_per_day = 10 * man_work_per_day + 5 * woman_work_per_day\n    \n    # Total days to complete the job by 10 men and 5 women\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls initially\n    g = symbols('g')\n    # The initial number of boys is then 3 times the number of girls\n    b = 3 * g\n    # When 12 boys leave, the new count for boys is b - 12\n    # When 20 girls join, the new count for girls is g + 20\n    # In the end, the number of boys equals the number of girls\n    equation = Eq(b - 12, g + 20)\n\n    # Solve for the number of girls\n    num_girls = solve(equation, g)\n\n    # Calculate the initial number of boys using the relation to the number of girls\n    num_boys = 3 * num_girls[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "from math import gcd\n\ndef solution():\n    A = 56\n    B = 96\n    C = 120\n\n    # Find the greatest common divisor of all three weights\n    greatest_mass = gcd(gcd(A, B), C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    number = 35\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    sum_factors = sum(factors)\n    return sum_factors\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # If each child gets at least one apple, we will distribute one apple to each child first.\n    # That reduces the number of apples to 30 - 6 = 24\n    apples_left = 30 - 6\n    \n    # The remaining 24 apples can be distributed to any of the 6 children.\n    # We want to minimize the maximum number of apples one child can get.\n    # Therefore, we distribute apples as evenly as possible.\n    # The maximum number of apples one child can get is achieved by dividing the 24 apples \n    # among 5 children (leaving one child to get the minimum) and then adding the extra (remainder) to the maximum.\n    \n    # We distribute 24 apples among 5 children to find the quotient and remainder.\n    quotient = apples_left // 5\n    remainder = apples_left % 5\n    \n    # The child with the most apples will get quotient + 1 (from the initial distribution) + remainder (if any)\n    most_apples = quotient + 1 + (1 if remainder > 0 else 0)\n\n    return most_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    total_fruits = 24\n    # Let a be the number of apples, therefore 2a is the number of bananas and 3a is the number of oranges.\n    # We have the equation: a + 2a + 3a = 24\n    # Solving for a gives us a = 24 / 6\n    a = total_fruits / 6\n    # Number of bananas is 2 times the number of apples\n    bananas = 2 * a\n    return int(bananas)\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age_now = 8\n    mother_age_now = 44\n\n    years = symbols('years')\n    equation = Eq(mother_age_now + years, 3 * (anna_age_now + years))\n    result = solve(equation)\n\n    return result[years]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Let n be the number of long ribbons May has.\n\n    # Total length of May's ribbons in cm\n    might_length = lambda n: 7 * 40 + n * 70\n\n    # Total length of Nancy's ribbons in cm\n    nancy_length = lambda n: n * 40 + 18 * 70\n\n    # May's length is 2.4m (240cm) longer than Nancy's\n    find_n = lambda n: might_length(n) - nancy_length(n) == 240\n\n    # Since they have equal number of ribbons:\n    # Total ribbons May has is 7(n of short ribbons) + n(n of long ribbons)\n    for n in range(1, 100):\n        if find_n(n):\n            ans = n + 7\n            return ans\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_legs = 34\n    total_animals = 12\n    \n    # Assume all animals are chickens (with 2 legs each)\n    chicken_legs = 2 * total_animals\n    extra_legs = total_legs - chicken_legs\n    \n    # Since rabbits have 4 legs, we divide the extra legs by 2 to find the number of rabbits\n    rabbits = extra_legs // 2\n    \n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 0.52 + 7.6 * 0.52\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # Start from the largest two-digit number and go backwards\n    for num in range(99, 9, -1):\n        # Check if the number meets the condition for both divisors\n        if (num % 4 == 3) and (num % 5 == 3):\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_paint = 1  # 1 litre of Purple Fire paint\n    ratio_sum = 3 + 1\n    red_paint = (total_paint * 3) / ratio_sum\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    ans = 345 * 67\n    return ans\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_of_numbers = 6\n    total_numbers = 8\n    \n    total_sum = mean_of_numbers * total_numbers\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    quarter_amount = total_amount / 4\n    remaining_amount = total_amount - quarter_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    # Equation: blue = 2 * red\n    equation1 = Eq(blue, 2 * red)\n\n    # Equation: blue + red = 18\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    rate_per_cow_for_10_days = 1 / (8 * 10)\n    rate_per_cow_for_15_days = 1 / (4 * 15)\n\n    # assuming rate_per_cow_for_10_days == rate_per_cow_for_15_days\n    rate_per_cow = (rate_per_cow_for_10_days + rate_per_cow_for_15_days) / 2\n\n    total_grass_rate_for_5_days = 1 / 5\n    number_of_cows = total_grass_rate_for_5_days / rate_per_cow\n    \n    return int(number_of_cows)\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12_packets = 1.02  # total mass for 12 packets in kg\n    mass_per_packet = total_mass_of_12_packets / 12  # mass of one packet in kg\n    total_mass_of_4_packets = mass_per_packet * 4  # total mass for 4 packets in kg\n    return total_mass_of_4_packets\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Since each child must have a different number of apples, let's start with the smallest possible distribution\n    # that satisfies the condition(each child has at least one apple), which is a sequence of consecutive numbers.\n    \n    # Thus we start distributing 1, 2, 3, ... apples to the first 7 children respectively.\n    # To minimize the number of apples for the 8th child, we use the smallest sum for the first 7 children.\n    \n    # Sum of first n natural numbers = n*(n+1)/2\n    # Here, we need the sum of first 7 numbers since the 8th child gets the remainder.\n    sum_first_7 = 7 * (7 + 1) // 2\n    \n    # Now, subtracting this sum from the total number of apples gives us the apples the 8th child will get.\n    apples_8th_child = 50 - sum_first_7\n    \n    return apples_8th_child\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let the cost of each compact disc be x.\n    # Therefore, the total cost of 4 compact discs is 4x.\n    # Given that each tape costs £9, the total cost of 3 tapes is 3 * £9.\n    # The total cost of 4 compact discs and 3 tapes is £83.\n    # We can write this as an equation:\n    # 4x + 3 * 9 = 83\n    \n    # Now we will solve for x.\n    cost_of_tape = 9\n    total_cost = 83\n    number_of_tapes = 3\n    number_of_cds = 4\n    \n    # Calculate the total cost of tapes\n    total_tape_cost = cost_of_tape * number_of_tapes\n    \n    # Now subtract the total tape cost from the total cost to find the cost of CDs\n    total_cd_cost = total_cost - total_tape_cost\n    \n    # Since we want to find the cost of each CD, divide by the number of CDs\n    cost_per_cd = total_cd_cost / number_of_cds\n    \n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the true result\n    x = symbols('x')\n    \n    # Will forgot to put down the decimal point, so he actually divided by 122 instead of 1.22\n    # The incorrect result is the true result multiplied by 100 (because 122 is 100 times larger than 1.22)\n    # The incorrect result is also the true result minus 99.396 (as given by the problem)\n    # So we set up the equation: 100 * true_result = true_result - 99.396\n    # We solve for the true result x\n    equation = Eq(100 * x, x - 99.396)\n    \n    # Solve the equation for x\n    true_result = solve(equation, x)[0]\n    \n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham had\n    # Then Melissa had 2x cards\n    # Their total is 3x, and we set it equal to the total number of cards\n    # So, 3x = 876, which means x = 876 / 3\n    cards_hisham = total_cards // 3\n    cards_melissa = 2 * cards_hisham\n\n    # To have the same number of cards, we find the average of their current cards\n    avg_cards = total_cards // 2\n\n    # Melissa should give the difference between her cards and the average to Hisham\n    cards_to_give = cards_melissa - avg_cards\n\n    return cards_to_give\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Set up the equation 3x + 8 = 35\n    # We need to find x\n    # Perform inverse operations to isolate x\n\n    # Subtract 8 from both sides\n    result = 35 - 8\n    \n    # Divide by 3 to get the original number\n    original_number = result / 3\n    \n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_num_groups = gcd(boys, girls)\n\n    return greatest_num_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000\n    return n\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    \n    # We have two equations based on the Fibonacci-like sequence:\n    # third = first + second\n    # fifth = third + fourth\n    # Also, fourth = 6 and sixth = fourth + fifth = 6 + fifth\n    # So, sixth = 15 implies fifth = 15 - 6 = 9\n    # Hence, third = fifth - fourth = 9 - 6 = 3\n    # Now we can write third (3) as first + second, which means first + second = 3\n    # Finally, we solve for the first two numbers of the sequence:\n    equation1 = Eq(a + b, 3)\n    equation2 = Eq(a + (a + b), 6)  # since fourth number which is (second + third) is equal to 6\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Finding the first and second number of the sequence:\n    first_number = solutions[a]\n    second_number = solutions[b]\n    \n    # third number is already calculated as 3\n    # fourth number is given as 6\n    # So, fifth number is the sum of third and fourth, which is 9 (already calculated)\n    # And, sixth number is given as 15\n    # Finally, the seventh number is the sum of the fifth and sixth numbers:\n    seventh_number = 9 + 15\n    \n    return seventh_number\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    result = 36 * (sum(1 / (x * (x + 5)) for x in range(1, 36, 5)))\n    return result\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    all_combinations = sorted([''.join(p) for p in permutations(digits)])\n    \n    for num_str in all_combinations:\n        num = int(num_str)\n        if num % 2 != 0 and len(num_str) == 5:  # checking for odd and 5 digits\n            return num\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Rate of work for men and women\n    men_rate = 1 / (24 * 16) # work done by one man in one day\n    women_rate = 1 / (16 * 24) # work done by one woman in one day\n    \n    # Combined rate of 10 men and 6 women\n    combined_rate = 10 * men_rate + 6 * women_rate\n    \n    # Total time required to complete the work by 10 men and 6 women\n    total_time = 1 / combined_rate\n    \n    return total_time\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    # Initial number of regions created by the first rectangle\n    regions = 1 + rectangles\n    # Calculate new regions created by each successive rectangle\n    for i in range(2, rectangles + 1):\n        regions += i * 2 - 1\n        \n    return regions\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # There are 5 people in total\n    total_people = 5\n    # Calculate all possible permutations\n    total_permutations = factorial(total_people)\n    \n    # In this scenario, there are 4 possible middle positions for Eddie (2nd, 3rd, 4th, 5th positions)\n    # but we want to exclude the middle one (3rd position), leaving us with 3 options for Eddie\n    eddie_positions = 4\n    \n    # Calculate the number of ways Eddie can be placed in the 3 allowed positions\n    eddie_permutations = factorial(total_people - 1) * eddie_positions\n    \n    # Subtract the number of permutations where Eddie is in the middle (we calculated with total_permutations),\n    # from the total number of permutations to find the number of acceptable variations.\n    ans = total_permutations - eddie_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    second_term = 96\n    fourth_term = 24\n    ratio = fourth_term / second_term\n    n = second_term * ratio\n    \n    return int(n)\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    \n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    \n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    # Calculate the total earnings\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    spent_watch = total_money / 3\n    spent_tie = 56\n    remaining_money = 3 * total_money / 8\n\n    equation = Eq(total_money - spent_watch - spent_tie, remaining_money)\n    \n    total_money_solution = solve(equation, total_money)[0]\n    \n    return float(spent_watch.evalf(subs={total_money: total_money_solution}) + spent_tie)\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789'):\n        num = int(''.join(perm))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    passing_time = 10  # seconds\n\n    # Relative speed of the train with respect to Eddie\n    relative_speed = train_speed + eddie_speed  # m/s\n\n    # Length of the train is relative speed times the passing time\n    train_length = relative_speed * passing_time\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n\n    operations = ['+', '*']\n    max_value = 0\n\n    for combo in product(operations, repeat=3):\n        expression = f\"1{combo[0]}2{combo[1]}3{combo[2]}4\"\n        value = eval(expression)\n        if value > max_value:\n            max_value = value\n\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    correct_marks = 8\n    incorrect_deduction = 3\n    total_marks = 63\n    total_questions = 12\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_marks - incorrect * incorrect_deduction == total_marks:\n            return correct\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # train length in meters\n    bridge_length = 900  # bridge length in meters\n    speed = 400  # speed in meters per minute\n\n    total_distance = train_length + bridge_length  # total distance to be covered to entirely cross the bridge\n    time = total_distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(2, 1997):\n        a, b = b, a + b\n        a, b = a % 3, b % 3\n    return b % 3\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    hazel_current_age, hazel_future_age, mom_future_age, mom_current_age = symbols('hazel_current_age hazel_future_age mom_future_age mom_current_age')\n\n    # Equations based on the problem statement\n    equation1 = Eq(hazel_future_age, 3 * hazel_current_age)\n    equation2 = Eq(hazel_future_age, hazel_current_age + 12)\n    equation3 = Eq(mom_future_age, 3 * hazel_future_age)\n    equation4 = Eq(mom_future_age, mom_current_age + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (hazel_current_age, hazel_future_age, mom_future_age, mom_current_age))\n\n    # We need to find mom_current_age\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Calculate the average of the first 5 numbers in the sequence\n    average_first_5 = 10 / 5\n    # Calculate the average of the last 5 numbers in the sequence\n    average_last_5 = 120 / 5\n    \n    # Calculate the average of all numbers in the sequence\n    # This is the average of the average of the first 5 and the average of the last 5 numbers\n    total_average = (average_first_5 + average_last_5) / 2\n    \n    # The sum of all numbers in the sequence is the total average times the number of terms\n    sum_of_all_numbers = total_average * 60\n    \n    return sum_of_all_numbers\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Current ages\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    \n    # Age difference between Peter and the sum of his sons' ages\n    age_difference = peter_age - (pip_age + pit_age)\n    \n    # Since Peter and his sons all age at the same rate (1 year per year),\n    # Peter will be twice his current age minus the difference\n    # when the sum of his sons' ages equals his age.\n    ans = peter_age + age_difference\n    \n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent the original number of stickers Peter had\n    # Then Sam originally had p + 40 stickers\n    p = symbols('p')\n\n    # Sam gives 20% of his stickers to Peter: 0.20 * (p + 40)\n    # Peter gives 25% of his stickers to Sam: 0.25 * p\n\n    # After exchanging stickers, Sam has:\n    # (100% - 20%) * (p + 40) + 25% * p stickers\n    sam_final = 0.80 * (p + 40) + 0.25 * p\n\n    # After exchanging stickers, Peter has:\n    # (100% + 20%) * p - 20% * (p + 40) stickers\n    peter_final = 1.20 * p - 0.20 * (p + 40)\n\n    # Sam ended up having 96 more stickers than Peter\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Solve the equation to find the original number of stickers Peter had\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # With 13 different numbers and the requirement for consecutive numbers,\n    # drawing 14 will ensure at least two cards have consecutive numbers,\n    # because the worst-case scenario is drawing all cards of a different number before getting a consecutive pair.\n    return 14\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    total_pages = 36\n    sheet_number = 5\n    pages_per_sheet = 4\n    \n    # Calculate the last page number of the previous sheet\n    last_page_previous_sheet = (sheet_number - 1) * pages_per_sheet\n\n    # Page numbers on the fifth sheet (Sheet 5) = [2 * n - 1, 2 * n, 73 - 2 * n, 74 - 2 * n],\n    # where n is the last page number of the previous sheet.\n    n = last_page_previous_sheet\n    page_numbers = [\n        2 * n - 1,\n        2 * n,\n        total_pages + 1 - 2 * n,\n        total_pages + 2 - 2 * n\n    ]\n\n    return sum(page_numbers)\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    answer_when_halved = 10\n    original_number = answer_when_halved * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    return (124 + 231) / 5\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    a = 7\n    b = 9\n    c = 28\n    # Starting with the smallest possible remainders that fit the pattern\n    for r1 in range(0, a):\n        for r2 in range(0, b):\n            for r3 in range(a):\n                for r4 in range(0, c):\n                    # Check increasing arithmetic pattern\n                    if r2 - r1 == r3 - r2 == r4 - r3:\n                        # Check each remainder for divisibility\n                        M = a * b * c\n                        if (M + r1) % a == r1 and (M + r1) % b == r2 and (M + r1) % c == r4:\n                            # Since it's the first combination found, it will be the smallest M\n                            return M + r1\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let x be the total number of laptops James bought at first.\n    # Let c be the original cost of each laptop.\n    # Therefore, the selling price of each laptop is $2000.\n    # The total profit for selling all laptops at the original cost is $60000.\n    # The profit from selling one laptop at the original cost is then $2000 - c.\n    # So the total cost at the original price is x * c.\n    # Since he makes $60000 profit, the total sales is x * $2000 = x * c + $60000.\n\n    # Now, the cost of each laptop decreased by 1/5, so the new cost is c - c/5 = 4c/5.\n    # The new profit is 30% higher than the original profit, so it is $60000 * 1.30.\n    # The new profit from selling one laptop is $2000 - (4c/5).\n    # Therefore, the new total profit = x * ($2000 - (4c/5)) = x * c + $60000 * 1.30.\n\n    # From the above information, we can derive two equations:\n    # Equation 1: x * $2000 = x * c + $60000\n    # Equation 2: x * ($2000 - (4c/5)) = x * c + $60000 * 1.30.\n\n    # We can simplify and solve these equations to find the value of x.\n\n    from sympy import symbols, Eq, solve\n\n    x, c = symbols('x c')\n\n    # Equation 1:\n    equation1 = Eq(x * 2000, x * c + 60000)\n    # Equation 2:\n    equation2 = Eq(x * (2000 - 4*c/5), x * c + 78000)  # 30% increase on 60000\n\n    # Solving the equations for x and c\n    solutions = solve((equation1, equation2), (x, c))\n\n    # The number of laptops (x) will always be an integer\n    return solutions[x]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    # The problem describes an arithmetic sequence with the first term a1=48, and last term an=80.\n    # Each row has four more seats than the row in front, which indicates a common difference of d=4.\n    # We need to find the total number of terms (rows) n and then calculate the sum of this sequence.\n    \n    # Find the number of terms n using the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n - 1) * d\n    # 80 = 48 + (n - 1) * 4\n    # (n - 1) * 4 = 32\n    # n - 1 = 32 / 4\n    # n = 8 + 1\n    # n = 9 (Total number of rows)\n    \n    first_term = 48\n    last_term = 80\n    common_difference = 4\n    num_rows = (last_term - first_term) // common_difference + 1\n    \n    # Sum of seats in arithmetic sequence S_n = (n/2)*(a1 + an)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Initialize counter for the number of digits\n    digit_count = 0\n\n    # For each number from 1 to 129\n    for number in range(1, 130):\n        # Add the number of digits in this number\n        digit_count += len(str(number))\n    return digit_count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # The difference in the total number of boys and girls is 36.\n    difference = 36\n    # Total number of students\n    total_students = 0\n\n    # Start with the first odd square as the innermost layer and keep adding until\n    # the difference is the square of an even number.\n    girl_layers = 0\n    boy_layers = 0\n    i = 1\n\n    # Keep adding students alternatively into boy and girl layers\n    while True:\n        # Add to girl layer if i is odd\n        if i % 2 != 0:\n            girl_layers += i * i\n        # Add to boy layer if i is even\n        else:\n            boy_layers += i * i\n\n        # If the number of boys exceeds the number of girls by the given difference,\n        # we have found the correct total size of the array.\n        if boy_layers - girl_layers == difference:\n            total_students = boy_layers + girl_layers\n            break\n        i += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # The original group of three men takes two days to dig 120 metres.\n    # This means that one man would take three times longer to dig the same trench, \n    # so it would take one man 6 days to dig the 120 metres trench.\n\n    # Calculate the rate at which one man digs the trench per day.\n    # Since 1 man takes 6 days to dig 120 metres,\n    # per day, 1 man digs 120m / 6days = 20 metres.\n\n    one_man_rate_per_day = 120 / (3 * 2)\n\n    # Now, we need to determine how many days it would take for four men to dig 880 metres.\n    # Since 1 man digs 20 metres in a day, 4 men would dig 4 * 20 metres in a day.\n    four_men_rate_per_day = 4 * one_man_rate_per_day\n\n    # The number of days it takes for four men to dig 880 metres is the total length \n    # divided by the rate at which four men can dig per day.\n    days_for_four_men = 880 / four_men_rate_per_day\n\n    # Since we are interested in the number of days, we return the result.\n    return days_for_four_men\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    # Total number of people they need to interview\n    total_people = 400\n    \n    # Number of people Ellie can interview each week\n    ellie_per_week = 60\n    \n    # Number of weeks Ellie and Gloria work together\n    together_weeks = 4\n    \n    # Total number of people Ellie can interview in 'together_weeks' weeks\n    ellie_total = ellie_per_week * together_weeks\n    \n    # The remaining number of people that are interviewed when they work together\n    # which equals to the number of people Gloria can interview in 'together_weeks' weeks\n    gloria_total = total_people - ellie_total\n    \n    # Since Gloria and Ellie together interview all people in 'together_weeks' weeks\n    # Gloria's interviewing rate per week is:\n    gloria_per_week = gloria_total / together_weeks\n    \n    # The time it takes Gloria to finish interviewing all people alone\n    weeks_gloria_alone = total_people / gloria_per_week\n\n    return weeks_gloria_alone\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = (2 * 15) // 5\n    return numerator\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class\n    # We have the following conditions:\n    # 5 pupils are in the band\n    # (3/4)*(x - 5) pupils are in the choir\n    # (2/9)*x pupils are neither in the band nor choir\n\n    # Hence the sum of pupils in band, choir and neither equals the total number of pupils:\n    # 5 + (3/4)*(x - 5) + (2/9)*x = x\n\n    # Solving the equation for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation representing all pupils in terms of x\n    equation = Eq(5 + (3/4)*(x - 5) + (2/9)*x, x)\n\n    # Solving for x\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_to_cross = 20  # time in seconds\n    distance = 300  # distance in meters\n    \n    speed = distance / time_to_cross  # speed in meters per second\n    \n    return speed\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first to the second shelf.\n    # After moving:\n    # The first shelf will have 18 - x books.\n    # The second shelf will have 24 + x books.\n\n    # According to the condition, the second shelf must have twice as many books as the first shelf:\n    # 24 + x = 2 * (18 - x)\n\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    solved = solve(equation)\n\n    return solved[x]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n\n    denom = 1/7 + 1/11 + 1/13\n\n    ans = (num1 + num2 + num3) / denom\n\n    return ans\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Applying inclusion-exclusion principle to find out the total lollipops\n    # Let's assume total lollipops as l\n    # When 4 lollipops per box, 32 are left, therefore (l - 32) % 4 == 0\n    # When 7 lollipops per box, last box has 3, therefore (l - 3) % 7 == 0\n\n    # Starting to check for l from 32, as this is the minimum possible number of lollipops\n    l = 32\n    while True:\n        # Check if both conditions are satisfied\n        if (l - 32) % 4 == 0 and (l - 3) % 7 == 0:\n            return l\n        l += 1  # Check next number\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # We want to find the number of long tubes, so let's denote the number of long tubes as x\n    # and the number of short tubes as y.\n\n    # We can then set up the following system of equations:\n    # 8x + 5y = 47 (1), which represents the total number of tennis balls\n    # The number of long tubes (x) must be as large as possible, so we will try to minimize y\n\n    # We'll try to find the maximum value of x such that 8x + 5y = 47 still holds true\n    # and y is non-negative.\n  \n    for x in range(47 // 8, -1, -1):  # 47 // 8 gives the maximum possible number of long tubes without regard to short tubes\n        y = (47 - 8 * x) / 5\n        if y.is_integer():  # We have found the number of long tubes that makes y an integer\n            return x\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Define the list of numbers whose cubes we want to sum\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    \n    # Calculate the sum of cubes\n    ans = sum([n**3 for n in numbers])\n    \n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    reduced_price = original_price * (1 - discount)\n\n    return reduced_price\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n\n    # Calculate the common difference d\n    # a_n = a_1 + (n-1)*d  => a_9 = a_1 + 8*d and a_3 = a_1 + 2*d\n    # From the two equations we can express a_1 in terms of d and then find d\n    # a_9 - a_3 = 8*d - 2*d => 26 - 8 = 6*d => d = (26 - 8) / 6\n    d = (ninth_term - third_term) / (9 - 3)\n\n    # Now that we have the common difference, we find the 11th term\n    # a_11 = a_3 + (11-3)*d\n    eleventh_term = third_term + (11 - 3) * d\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let f be the original number of bracelets Felicia had\n    # Janice originally had 96 bracelets\n    janice_original = 96\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 3/5 * f\n    # After selling, Felicia has 2/5 * f bracelets left\n    # Now the ratio of Felicia's bracelets to Janice's bracelets is 5:7\n    # So, (2/5 * f) / (janice_original + 2/5 * (3/5 * f)) = 5/7\n    # Solving for f gives us Felicia's original number of bracelets\n    # Then we find the number of bracelets Janice bought, which is 2/5 * (3/5 * f)\n    \n    from sympy import symbols, solve\n    \n    f = symbols('f')\n    # equation representing the new ratio after transactions\n    equation = ((2/5) * f) / (janice_original + (2/5) * (3/5) * f) - (5/7)\n    \n    # solve the equation for f\n    felicia_original = solve(equation, f)[0]\n    \n    # calculate the number of bracelets Janice bought\n    janice_bought = (2/5) * (3/5) * felicia_original\n    \n    return janice_bought\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let's call the missing decimal point multiplier 'x'.\n    # The number without the decimal point is 432.\n    \n    # The equation representing the problem is:\n    # 432 * x = 2138.4 + 4.32 * x\n    \n    # Let's solve for x:\n    x = 2138.4 / (432 - 4.32)\n\n    # Now, the true result is simply 4.32 * x\n    true_result = 4.32 * x\n    \n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Calculate the differences between the pairs of numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    diff3 = 3670 - 2017\n\n    # The possible value for A must be a divisor of the greatest common divisor (GCD)\n    # of these differences, because A must divide into each number with the same remainder\n    from math import gcd\n    # First find the gcd of the first pair, then use that to find the gcd with the third number\n    possible_gcd = gcd(diff1, gcd(diff2, diff3))\n\n    # Next, find the divisors of the calculated GCD which are the possible values for A\n    divisors = []\n    for i in range(1, possible_gcd + 1):\n        if possible_gcd % i == 0:\n            divisors.append(i)\n\n    # However, number itself (2758-2017) must not be included as it's not a valid remainder,\n    # so we remove it if it is there\n    divisors.remove(possible_gcd)\n\n    # Sum the possible values of A\n    return sum(divisors)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum = 9 + 99 + 999 + 9999\n    return sum\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy was given 5 candies, each girl was given 3 candies\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n\n    # There were 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of children is the sum of boys and girls\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n\n    # original ratio 7:9\n    equation1 = Eq(milk / fruit, 7/9)\n\n    # after eating 8 milk candies, the ratio becomes 2:3\n    equation2 = Eq((milk - 8) / fruit, 2/3)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # grandmother's age in 2008\n    grandmother_age_2008 = 80 \n    # mum's age in 1996\n    mum_age_1996 = 40 \n\n    # number of years from 1996 to 2008\n    years_between = 2008 - 1996 \n\n    # grandmother's age in 1996\n    grandmother_age_1996 = grandmother_age_2008 - years_between \n\n    # mum's age when she was born (0 years old)\n    mum_age_birth = 0\n\n    # grandmother's age when mum was born\n    grandmother_age_birth = grandmother_age_1996 - mum_age_1996 + mum_age_birth\n\n    return grandmother_age_birth\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 51):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, solve\n\n    # let x be the number of lemonade bottles and y be the number of \"1000 Plus\" bottles\n    x, y = symbols('x y')\n\n    # create equations based on the problem statement\n    income_equation = 4*x + 7*y - 2012  # Ronald's total income from selling the drinks\n    bottles_equation = x + y - 350      # Total number of bottles initially\n\n    # Since we need the \"minimum\" number of \"1000 Plus\" bottles that Ronald could have sold,\n    # we look for the maximum number of lemonade bottles that could have been sold.\n    # We rearrange the income equation for x and substitute into bottles_equation\n    x_expr = solve(income_equation, x)[0]\n    min_y_expr = solve(bottles_equation.subs(x, x_expr), y)\n\n    # evaluate the expression for minimum y\n    min_y = min_y_expr[0].evalf()\n\n    return int(min_y)\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples = 60\n    apples_per_friend = 4\n    \n    num_friends = total_apples // apples_per_friend\n    apples_needed_after_increase = (apples_per_friend + 1) * num_friends\n    \n    return apples_needed_after_increase\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Since we need a pair of white socks and we want the worst case,\n    # assume we pick all the red and black socks first; each time we pick one of these, \n    # there's no guarantee we get a white pair.\n    # There are 10 red and 10 black socks, so we can pick all 20 socks without getting a pair of white.\n    # Next, we need to pick a maximum of 2 white socks to guarantee a pair.\n    max_socks_to_ensure_white_pair = 20 + 2\n    return max_socks_to_ensure_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n\n    ans = meters * centimeters_per_meter\n\n    return ans\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 since it's the first digit\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and A != C and B != C:  # Ensure all digits are different\n                    ABC = 100 * A + 10 * B + C\n                    return ABC\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # number of students\n    students = 112\n    # total number of groups\n    total_groups = 24\n\n    # Assume x groups have 4 students and y groups have 6 students\n    for x in range(total_groups + 1):  # +1 because range goes from 0 to (total_groups-1)\n        y = total_groups - x\n        if (x * 4 + y * 6) == students:\n            return y\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_per_rabbit = 3 / 2\n    rabbits_per_wheat = 3 / 4\n    wheat_per_fish = 1 / (fish_per_rabbit * rabbits_per_wheat)\n\n    fish_for_eight_wheat = wheat_per_fish * 8\n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Let x1, x2, x3 be the first three numbers, and x4 be the fourth number\n    # The sum of the first three numbers\n    sum_of_first_three = 3 * 60\n    \n    # The sum of all four numbers to have an average of 90\n    total_sum_with_fourth = 4 * 90\n    \n    # The value of the fourth number\n    fourth_number = total_sum_with_fourth - sum_of_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    # Calculate the total cost of the items\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    \n    # Calculate the change from 20 pounds\n    change = 20 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # Let x be the original price of the purse before the discount.\n    # Handbag discount = 428 * 20%, which is already applied in the price after discount\n    handbag_discount = 428 * 0.20\n    # Total discount given for both handbag and purse\n    total_discount = 121\n    # Purse discount = total discount - handbag discount\n    purse_discount = total_discount - handbag_discount\n    # The price of the purse after 28% discount is its original price - purse discount.\n    # Let's denote the original price of the purse as x.\n    # purse_discount = x * 28%\n    # Therefore, x = purse_discount / 28%\n    x = purse_discount / 0.28\n    return x\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n\n    total_dances = dances_per_week * weeks\n\n    return total_dances\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    for i in range(2, n+1):\n        while i % 5 == 0:\n            count += 1\n            i /= 5\n    return count\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    days = 0\n    distance_climbed = 0\n    \n    while True:\n        days += 1\n        distance_climbed += 4  # Climb during the day\n        if distance_climbed >= 25:  # Check if the snail has climbed out\n            break\n        distance_climbed -= 1  # Slide down at night\n        \n    return days\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since the recurring decimal is 0.A22A2... and we need to sum the first 20 digits,\n    # we can calculate the number of full patterns A2 observed in 20 digits and\n    # the number of remaining digits after these full patterns.\n\n    # A full pattern consists of two digits: A and 2, therefore we have\n    # 20 // 2 = 10 full patterns in the first 20 digits.\n\n    # The sum of digits in each full pattern A2 is A + 2.\n    # The sum of 10 full patterns is 10 * (A + 2).\n\n    # We also know the sum of the first 20 digits is 80, so we have:\n    # 10 * (A + 2) = 80\n    # A + 2 = 80 / 10\n    # A = 8 - 2\n    # A = 6\n    \n    # Assigning the value of A\n    A = 6\n    \n    return A\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n    lcm = a * b // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    jogging_time = 0.5  # Time spent jogging from 6:30 AM to 7:00 AM, in hours\n    walking_time = 1    # Time spent walking from 7:00 AM to 8:00 AM, in hours\n\n    jogging_speed = 6   # Speed during jogging, in miles per hour\n    walking_speed = 5   # Speed during walking, in miles per hour\n\n    distance_jogging = jogging_speed * jogging_time\n    distance_walking = walking_speed * walking_time\n\n    total_distance = distance_jogging + distance_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # By Pigeonhole Principle, at least one layer will have (total number of books // number of layers) + 1 books\n    books_in_most_layer = (total_books // layers) + 1\n    return books_in_most_layer\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had.\n    # He spent $120 on a chair, so he is left with x - 120.\n    # He then spent 40% of the remainder, which is 0.4 * (x - 120) on a jacket.\n    # After shopping, he had 30% of his original amount of money left: 0.3 * x.\n    # The equation can be written as:\n    # x - 120 - 0.4 * (x - 120) = 0.3 * x\n    # This simplifies to:\n    # x - 120 - 0.4x + 48 = 0.3x\n    # Combining like terms, we get:\n    # 0.3x + 0.4x = 120 - 48\n    # 0.7x = 72\n    # Now, divide both sides by 0.7 to find x:\n    x = 72 / 0.7\n    \n    return x\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 4):  # 0 cannot be in the hundred's place\n        for tens in range(4):  # 0-3\n            for ones in range(4):  # 0-3\n                if hundreds != tens and tens != ones and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4\n    \n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        num_terms += 1\n        term += difference\n    \n    return num_terms\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let x be the original number of books\n    # Average cost of these books is $3.50 each\n    # Total cost of the original books is 3.50 * x\n\n    # He bought another 2 books at $6 each\n    # Total cost of the additional books is 2 * 6\n\n    # The new average cost of all books is $4\n    # Total number of books is now x + 2\n    # The total cost of all books is 4 * (x + 2)\n\n    # Setting up the equation:\n    # 3.50 * x + 2 * 6 = 4 * (x + 2)\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(3.5 * x + 2 * 6, 4 * (x + 2))\n\n    # Solve the equation for x\n    x_value = solve(equation, x)\n\n    # Total number of books is the original number plus the extra 2 books\n    total_books = x_value[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n    total_weight_g = total_weight_kg * 1000\n    num_pieces = total_weight_g / piece_weight_g\n    return int(num_pieces)\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "from sympy import symbols, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True, positive=True)\n    sum_eq = a + b + c - 31\n    product = a * b * c\n    # Using AM-GM inequality: AM >= GM, equality holds when a=b=c\n    # Assuming a is the smallest, b and c can be equal and bigger than a to maximize the product\n    # Let's check b = c and a + 2b = 31 to maximize the product\n    sols = solve((sum_eq, b - c), (a, b))\n    a_val = sols[a]\n    b_val = sols[b]\n    c_val = sols[c]\n    max_product = a_val * b_val * c_val\n    return max_product\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is approximately 1.056688 quarts\n    liters_to_quarts = 2.5 * 1.056688\n    # Cup capacity in quarts\n    cup_capacity = 0.5\n    # Number of cups\n    num_cups = liters_to_quarts / cup_capacity\n    # Round to the nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # F cannot be 0 as it's a digit in a four-digit number \"FACE\"\n                    ABCDEF = int(f\"{A}20{C}0{E}\")\n                    EFABCD = int(f\"{E}F{A}20{C}\")\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    \n    total_shapes = squares + circles + triangles\n    \n    return total_shapes\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Calculate the distance covered during jogging from 6:30 AM to 7:30 AM\n    jogging_time_hours = 1  # From 6:30 AM to 7:30 AM is 1 hour\n    jogging_speed_mph = 6  # Jogging speed in miles per hour\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Calculate the distance covered while walking from 7:30 AM to 9:30 AM\n    walking_time_hours = 2  # From 7:30 AM to 9:30 AM is 2 hours\n    walking_speed_mph = 5  # Walking speed in miles per hour\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance covered is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel_before, belle = symbols('angel_before belle')\n\n    # Angel had 5/6 as many sweet wrappers as Belle before throwing away\n    equation1 = Eq(angel_before, (5/6) * belle)\n\n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel_before - 58, (75/100) * belle)\n\n    solutions = solve((equation1, equation2), (angel_before, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4/9) * 36\n    return result\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment = 120.75\n    final_amount = initial_amount + payment\n    return final_amount\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len({vase1, vase2, vase3}) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 because the vases are identical\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    money = 70 * children  # if each child gets 70p\n    equation1 = Eq(money - 20, 70 * children - 70)  # if there was 20p less, one less child could be given 70p\n    equation2 = Eq(money + 210, 60 * children)  # if each child gets 60p, 2.10 pounds are left\n\n    solutions = solve((equation1, equation2), (children))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # A simple brute force approach\n    for i in range(10**9):\n        if str(i)[-1] == '9' and int('9' + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2 March', '%d %B')\n    end_date = datetime.strptime('15 April', '%d %B')\n\n    # Adjust for the year, assuming non-leap year\n    start_date = start_date.replace(year=2023)\n    end_date = end_date.replace(year=2023)\n\n    # Calculate the difference in days\n    difference = end_date - start_date\n    return difference.days + 1  # inclusive of both start and end dates\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 45 / 100\n    increased_cost = initial_cost * (1 + increase_percentage)\n    return increased_cost\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n\n    # Eddie takes one spot on the left end\n    # Avril can either stand to the immediate right of Eddie (1 way)\n\n    # The remaining 5 students can be arranged in any order\n    # This is a permutation of 5 students\n    arrangements_for_5_students = math.factorial(5)\n    \n    # Total arrangements are for the 1 way Avril can stand\n    total_arrangements = arrangements_for_5_students\n\n    return total_arrangements\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Number of gloves Dilly has to pick to guarantee a matching pair\n    # For blue gloves, Dilly can pick up to 1 left-hand and 3 right-hand before getting a pair\n    max_blue_without_pair = 1 + 3\n\n    # For green gloves, Dilly can pick up to 2 left-hand and 4 right-hand before getting a pair\n    max_green_without_pair = 2 + 4\n\n    # To guarantee a matching pair, Dilly has to pick at least one more than the sum \n    # of maximum number of gloves that can be picked without getting a pair\n    min_gloves_for_pair = max(max_blue_without_pair, max_green_without_pair) + 1\n\n    return min_gloves_for_pair\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers_sum = 9 + 7 + 5 + 4 + 1 + 8 + 8\n    total_numbers = 8\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - known_numbers_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    initial_distance = 3\n    new_distance = 5\n\n    # Calculate the number of holes already dug\n    initial_holes = 30\n    \n    # The distance covered by the initially dug holes\n    initial_covered_distance = initial_holes * initial_distance\n    \n    # Remaining distance to be covered with new distance\n    remaining_distance = circumference - initial_covered_distance\n    \n    # Calculate the number of additional holes required with the new interval\n    additional_holes = remaining_distance // new_distance\n    \n    # If there is a remainder, one extra hole will be needed\n    if remaining_distance % new_distance > 0:\n        additional_holes += 1\n\n    return additional_holes\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n\n    ans = types_of_pasta * types_of_sauces * types_of_toppings\n    return ans\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Ways to reach the 5th step: 1 step at a time (1 way), or 1-1-1-2 or 1-1-2-1 or 1-2-1-1 or 2-1-1-1 or 2-2-1 (5 ways)\n    ways_to_5th_step = 1 + 5\n\n    # Ways to reach the 10th step from the 5th step: \n    # This is the same problem as counting the ways to reach the 5th step from the start\n    ways_from_5th_to_10th = ways_to_5th_step\n\n    # Total ways to reach the 10th step by stepping on the 5th step\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of sweets Rachel has and a be the number of sweets Alice has.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of sweet, then they would have the same number of sweets.\n    eq1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces of sweet, Rachel has 3 times as many pieces of sweet left over as Alice.\n    eq2 = Eq((r - 8) / 3, a - 8)\n\n    # Find the solution for r and a\n    solution = solve((eq1, eq2), (r, a))\n    rachel_sweets, alice_sweets = solution[r], solution[a]\n\n    # Calculate the total number of sweets they had originally.\n    total_sweets = rachel_sweets + alice_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the original number\n    original_number = symbols('original_number')\n\n    # Equation representing the given condition\n    equation = Eq((original_number + 3) / 4, 12)\n\n    # Solve for the original number\n    solved = solve(equation, original_number)\n\n    # Return the solution\n    return solved[0]\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_numbers = [i for i in range(1, 51) if '3' in str(i)]\n    return sum(erased_numbers)\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length > 0:\n        num_pipes += 1\n    return num_pipes\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_per_page = [0]  # Index with pages, value with digits used up to this page\n    total_digits = 792\n    current_page = 1\n    while digits_per_page[-1] < total_pages:\n        digits_for_this_page = len(str(current_page))\n        digits_per_page.append(digits_per_page[-1] + digits_for_this_page)\n        current_page += 1\n    # Subtract one because the loop exits after overshooting the total digits\n    return current_page - 1\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    ivan_total = ivan_average * 5\n    billy_average = 89\n    billy_total = billy_average * 4\n    \n    desired_billy_average = ivan_average + 10\n    desired_billy_total = desired_billy_average * 5\n\n    score_needed = desired_billy_total - billy_total\n    \n    return score_needed\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Given Expression: 15+5*5+15-6+7\n    # To maximize the result, we want to maximize the product and minimize the subtraction\n    # Possible ways to insert brackets:\n    # (15+5)*(5+15)-(6+7)\n    # ((15+5)*5)+(15-(6+7))\n    # We calculate both and return the maximum result\n\n    # First option\n    option1 = (15+5)*(5+15)-(6+7)\n\n    # Second option\n    option2 = ((15+5)*5)+(15-(6+7))\n\n    # Return the maximum result\n    return max(option1, option2)\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(1260)\n    m = 1\n    \n    for base, exponent in factors.items():\n        if exponent % 2 != 0:\n            m *= base\n    \n    return m\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Start counting from 1 because 0 + 1000 is not considered a sum of two whole numbers\n    # We count up to 500, because after that, we would be repeating the pairs in reverse\n    count = sum(1 for i in range(1, 501))\n    return count\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Finding the common difference from the given sequence terms\n    common_difference = 44 - 39\n    \n    # Calculating the first term using the 7th term and its position\n    first_term = 39 - (7 - 1) * common_difference\n    \n    # Calculating the 100th term using the first term,\n    # common difference, and position of the term\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity)  # Ceiling division\n    return boats_needed\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_when_divided_by_4 = 3\n    remainder_when_divided_by_7 = 3\n    num_piles_of_28 = 0\n    \n    while True:\n        cards = (num_piles_of_28 * 28) + remainder_when_divided_by_4\n        if cards % 7 == remainder_when_divided_by_7:\n            break\n        num_piles_of_28 += 1\n\n    remainder_when_divided_by_28 = cards % 28\n    return remainder_when_divided_by_28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 8 == 6 and num % 11 == 6:\n            return num\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit of 9^1 is 9\n    # The ones digit of 9^2 is 1 (because 9 * 9 = 81)\n    # The ones digit of 9^3 is 9 (because 81 * 9 = 729)\n    # The ones digit of 9^4 is 1 (because 729 * 9 = 6561)\n    \n    # We notice that the ones digit alternates between 9 and 1 for odd and even exponents, respectively.\n    # Since 999^99 has an odd exponent, the ones digit will be the same as the ones digit of 9^1, which is 9.\n\n    return 9\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away_stickers = 9\n    \n    total_stickers_left = (animal_stickers + fruit_stickers) - given_away_stickers\n    return total_stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the 5 other ponies\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    # Average value of the ponies in the small stable without Rein Beau\n    equation1 = Eq(((x - 250000) / 2) + 10000, x / 3)\n    # When Rein Beau moves to the large stable, it causes the average of both stables to rise by £10000\n    equation2 = Eq(((x + 250000) / 4) + 10000, (x / 3) + 10000)\n\n    # Solve the equations\n    total_value = solve((equation1, equation2), (x))\n\n    # The total value of all six ponies, x plus the value of Rein Beau (£250,000)\n    return total_value[x] + 250000\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar_ounces = 7\n    water_ounces = 21\n    total_ounces = sugar_ounces + water_ounces\n\n    concentration_percent = (sugar_ounces / total_ounces) * 100\n\n    return concentration_percent\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    # Assume the magician's calculation results in a number 'calc_result'\n    calc_result = 1234\n    \n    # Reverse the calculation process\n    calc_result += 50  # Reverse of step (5)\n    \n    # Since the result was added twice with the day of birth in step (4)\n    # and day of birth cannot exceed 31, we check from 1 to 31\n    for day in range(1, 32):\n        temp_result = calc_result - 2 * day  # Reverse of step (4)\n        \n        # Now check if the temp_result is divisible by 50, which it should be\n        # according to the reverse of step (3)\n        if temp_result % 50 == 0:\n            # Reverse of step (3)\n            temp_result //= 50\n            \n            # Then reverse step (2) and (1)\n            temp_result -= 1\n            temp_result //= 4\n            \n            # We find a month value in range 1 to 12 (inclusive)\n            # Since we know the max multiplication in step (1) was by 48 (4*12),\n            # we'll find a unique month this way\n            if 1 <= temp_result <= 12:\n                # Return birthday in the format (month, day)\n                return (temp_result, day)\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 8  # Total number of pupils\n    group_pupils = 4  # Number of pupils who want to stand together\n\n    # Treat the group of 4 pupils who want to stand together as one entity.\n    # So we have 5 entities to arrange: (4 grouped pupils) + 4 individual pupils.\n    # Calculate the permutations of these 5 entities.\n    permutations_of_entities = factorial(total_pupils - group_pupils + 1)\n    \n    # Calculate the permutations of the 4 pupils within the group.\n    permutations_within_group = factorial(group_pupils)\n    \n    # The total permutations is the product of the two permutations calculated above.\n    total_permutations = permutations_of_entities * permutations_within_group\n    \n    return total_permutations\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n\n    total_lamb_price = lamb_price_per_kg * 7\n    total_beef_price = beef_price_per_kg * 30\n\n    total_price = total_lamb_price + total_beef_price\n\n    return total_price\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Since the numbers are consecutive, let the first number be x, \n    # then the other two will be x+1 and x+2\n    # According to the problem, x + (x + 1) + (x + 2) = 60\n    # Simplify this to 3x + 3 = 60\n    \n    # Solve for x\n    x = (60 - 3) // 3\n    \n    # The largest number will be x + 2\n    return x + 2\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # We can define x to be the number of gold medals and y to be the number of silver medals.\n    # Therefore, we can form two equations based on the given information:\n    # 5x + 4y = 331 points in total\n    # x + y = 80 medals in total\n\n    # We can now solve this system of equations.\n    # From the second equation, we can express y in terms of x: y = 80 - x.\n    # Substituting y in the first equation, we have:\n    # 5x + 4(80 - x) = 331\n    # 5x + 320 - 4x = 331\n    # x = 331 - 320\n    # x = 11\n\n    # There were 11 gold medals won.\n    gold_medals = 11\n\n    return gold_medals\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the rates of work for the master and apprentice\n    rate_master, rate_apprentice = symbols('rate_master rate_apprentice')\n\n    # Equation for 1 master and 3 apprentices completing the work in 4 days\n    eq1 = Eq(1 * rate_master + 3 * rate_apprentice, 1/4)\n\n    # Equation for 2 masters and 1 apprentice completing the work in 3 days\n    eq2 = Eq(2 * rate_master + 1 * rate_apprentice, 1/3)\n\n    # Solve the system of equations to find the rates of work for master and apprentice\n    rates = solve((eq1, eq2), (rate_master, rate_apprentice))\n\n    # Calculate the time it takes for 1 apprentice to complete the work alone\n    time_for_apprentice = 1 / rates[rate_apprentice]\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    total_dolls = 10 + 9 - 1  # We subtract one because one doll is counted twice.\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Let x be the total number of spectators.\n    # According to the problem, 1/3 are children, so 2/3 are adults (men + women).\n    # Of the adults, 5/8 are men.\n    # This means that (2/3)*(3/8) = 1/4 of the total are women, since 1 - 5/8 = 3/8 are not men.\n    # So, if 1/4 of the total are 80 women, we can find the total number by dividing 80 by 1/4.\n    total_spectators = women / (1 / 4)\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Since we can't directly determine the operation \"★\" from the provided results,\n    # we can start by finding patterns between the given pairs and their results.\n    \n    # Observing from the examples given:\n    # 5★2 = 8, which equals 5 + 2 + 1 (the result is the first number + the second number + 1)\n    # 2★5 = 5, which equals 2 + (5 - 2) (the result is the first number + (the second number - the first number))\n    # 6★3 = 15, which equals 6 + 3 + (6 - 3) (the result is the first number + the second number + (the first number - the second number))\n    # 8★2 =14, which equals 8 + 2 + (8 - 2) (the result again follows the pattern above)\n    \n    # Therefore, the operation seems to be:\n    # a ★ b = a + b + (a - b) when a >= b\n    # a ★ b = a + (b - a) when a < b\n    \n    # Following this pattern for 11★10:\n    # The first number (a = 11) is greater than the second number (b = 10),\n    # hence we follow the first case of the operation.\n    \n    a = 11\n    b = 10\n    if a >= b:\n        result = a + b + (a - b)\n    else:\n        result = a + (b - a)\n    \n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    total_students = 0\n    for girls_side_length in range(1, 100, 2):  # Only considering odd side lengths for girls\n        # Calculate boys (outer layer area minus inner layer area)\n        boys_side_length = girls_side_length + 2\n        boys = boys_side_length ** 2 - girls_side_length ** 2\n        \n        # Calculate girls (inner layer area)\n        girls = girls_side_length ** 2\n        \n        # Check if the boys outnumber girls by 32\n        if boys - girls == 32:\n            total_students = boys + girls\n            break\n            \n    return total_students\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    prime_list = list(primerange(50, 61))\n    prime_sum = sum(prime_list)\n    \n    return prime_sum\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    nth_term = 102\n    first_term = tenth_term - (10 - 1) * common_difference\n\n    nth_number = first_term + (nth_term - 1) * common_difference\n\n    return int(nth_number)\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n\n    # Let the number of comics be x\n    # Then the number of Chinese books will be 2x\n    # x + 2x = non_english_books\n    comics = non_english_books // 3\n\n    return comics\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of roses and daisies in the park now\n    roses_now, daisies_now = symbols('roses_now daisies_now')\n\n    # The total number of flowers in the park now is 300\n    total_now = Eq(roses_now + daisies_now, 300)\n\n    # After planting equal numbers, there will be 280 roses and 180 daisies\n    # Let 'r' be the number of roses planted each month, which is equal to the number of daisies planted\n    r = symbols('r')\n    roses_future = Eq(roses_now + r, 280)\n    daisies_future = Eq(daisies_now + r, 180)\n\n    # Solve the system of equations\n    solutions = solve((total_now, roses_future, daisies_future), (roses_now, daisies_now, r))\n\n    return solutions[roses_now]\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_accurate_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    beef_weight = 0.6\n    cost_per_kilogram = total_cost / beef_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Since every child should get at least one apple, and all amounts must be different,\n    # we first distribute one apple to each child.\n    distributed_apples = 8\n\n    # Now, we have 50 - 8 apples left to distribute\n    remaining_apples = 50 - distributed_apples\n    \n    # The maximum number a child can get is when other children get the least possible\n    # apples which are distinct and increase consecutively (1, 2, 3, 4, ...)\n    # Let's find the maximum number needed to make 7 natural numbers distinct:\n    min_apples_other_children = 7 * (7 + 1) // 2  # Sum of first 7 natural numbers\n\n    # The least possible number of apples the child with the most can get\n    # is the remaining apples minus the number distributed to other children.\n    least_apples_max_child = remaining_apples - min_apples_other_children\n\n    return least_apples_max_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate each part of the expression separately using Fraction for exact arithmetic\n    part1_numerator = Fraction(1, 30) + Fraction(1, 6)\n    part1_denominator = Fraction(2, 25)\n    part1 = part1_numerator / part1_denominator\n    \n    part2_numerator = 2 - Fraction(2, 3)\n    part2_denominator = Fraction(8, 3)\n    part2 = part2_numerator / part2_denominator\n    \n    # Combine the two parts\n    ans = part1 + part2\n\n    # Convert the final answer to the simplest form\n    return ans\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    eggs_count = 158\n    box_capacity = 12\n    boxes_needed = (eggs_count + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        for j in range(1, 8 - i):\n            k = 8 - i - j\n            if k > 0 and len(set([i, j, k])) == len([i, j, k]):\n                count += 1\n    return count // 3  # To remove duplicates from permutation\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    return solutions[orange]\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 350 * 0.20 * 0.50\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104   # meters per second\n\n    total_distance = train_length + tunnel_length\n    time_to_pass = total_distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n    # According to the inclusion-exclusion principle\n    # min(bow_ties + spectacles - total_men, 0) = number of men wearing both\n    # Therefore, the maximum of men wearing neither is:\n    max_neither = total_men - (bow_ties + spectacles - total_men)\n    return max_neither\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    blue, red, green = symbols('blue red green')\n    \n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Find the ratio of fish to rabbit\n    fish_to_rabbit_ratio = 3 / 2\n    \n    # Find the ratio of rabbits to packs of wheat\n    rabbit_to_wheat_ratio = 3 / 4\n\n    # Simplify the combined ratio of fish to packs of wheat\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Calculate how many fishes for 8 packs of wheat\n    fishes_for_wheat = fish_to_wheat_ratio * 8\n\n    return int(fishes_for_wheat)\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Initialize max_apples to 1, as each child must have at least 1 apple.\n    max_apples = 1\n    while True:\n        # Calculate the number of apples remaining after giving max_apples to one child.\n        remaining_apples = 19 - max_apples\n        # Initialize a counter for the number of children.\n        children = 1\n        # Starting from 1 apple, distribute remaining apples to other children.\n        other_child_apples = 1\n        while other_child_apples < max_apples and children < 5:\n            # Deduct these apples from the remaining pile\n            remaining_apples -= other_child_apples\n            # Increment the number of children and the number of apples for the next child.\n            children += 1\n            other_child_apples += 1\n        # If we reached 5 children or couldn't distribute all apples, we have gone too far.\n        if children == 5 and remaining_apples >= other_child_apples and remaining_apples < max_apples:\n            # This is a valid distribution, so break the loop.\n            break\n        else:\n            # Try the next larger number for max_apples.\n            max_apples += 1\n    \n    return max_apples\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    digits_count = 0\n    for i in range(1, 140 + 1):\n        digits_count += len(str(i))\n    return digits_count\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Dan is fixed at the furthest left, so we treat the remaining 4 individuals to be arranged\n    # Ali and Bala must stand together, so we treat them as a single entity - AB\n    # So we have AB, Charles, Ella - 3 entities to arrange\n    num_arrangements_3_entitites = factorial(3)\n    \n    # However, within AB, Ali and Bala can switch places\n    ali_bala_arrangements = factorial(2) \n    \n    # Total arrangements is the product of the arrangements of 3 entities and the arrangements within AB\n    total_arrangements = num_arrangements_3_entitites * ali_bala_arrangements \n    \n    return total_arrangements\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Serene mistook the tens place in the subtrahend as 5 instead of 3 and one's place as 3 instead of 2.\n    # This resulted in an incorrect subtraction of difference 36. We need to find out what the correct difference should be.\n    \n    # The incorrect subtrahend is 10 less than the correct subtrahend due to the tens place being 3 instead of 5.\n    # The incorrect subtrahend is also 1 more than the correct subtrahend due to the ones place being 3 instead of 2.\n    # Hence, the incorrect subtrahend is 10 - 1 = 9 less than the correct subtrahend.\n\n    incorrect_difference = 36\n    correct_difference = incorrect_difference + 9  # Add back the 9 difference due to the tens and ones place.\n\n    return correct_difference\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    count = 0\n    for perm in permutations(digits, 3):\n        if perm[0] != 0:  # Ensuring the first digit is not 0 for a three-digit number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    tax_on_first_50k = 0.06 * 50000\n    tax_on_rest = (0.06 + T) * (120000 - 50000)\n    total_tax_paid = tax_on_first_50k + tax_on_rest\n\n    equation = Eq(total_tax_paid, 10000)\n\n    T_value = solve(equation, T)[0]\n    return T_value\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Drawing all balls of one colour and one more ensures we have a second colour.\n    # We have to consider the worst case scenario, so we draw the most abundant balls first.\n    red_balls = 15\n    white_balls = 9\n    yellow_balls = 6\n    \n    # Worst case: we draw all white and all yellow balls but still we don't have a red ball\n    # So we need one more draw to guarantee a red ball.\n    draws = white_balls + yellow_balls + 1\n    \n    return draws\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # Ellen's equation after giving away 12 sweets.\n    equation1 = Eq(ellen - 12, (13 / 24) * (ellen + lenny))\n\n    # Lenny's equation after giving away 12 sweets.\n    equation2 = Eq(lenny - 12, (3 / 8) * (ellen + lenny))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Compute the total number of sweets.\n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    tunnel_length = 500  # length of the tunnel in meters\n    speed = 10  # speed of the train in meters per second\n\n    total_distance = train_length + tunnel_length  # total distance to be covered by the train to completely pass through the tunnel\n    duration = total_distance / speed  # time = distance/speed\n\n    return duration\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Sort the digits from 0 to 9 in ascending order\n    # Assign the smallest digit to the second number to minimize the difference\n    digits = sorted(range(10))\n\n    # Create the largest and smallest numbers from the sorted digits\n    # but skip the 0 for the first digit of the smaller number\n    smaller = digits[1] * 10**4 + digits[0] * 10**3 + digits[2] * 10**2 + digits[3] * 10 + digits[4]\n    larger = digits[9] * 10**4 + digits[8] * 10**3 + digits[7] * 10**2 + digits[6] * 10 + digits[5]\n\n    # Calculate the difference\n    difference = larger - smaller\n\n    return difference\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost_in_pence = cost_per_pound * pounds_bought\n    total_cost_in_pounds = total_cost_in_pence / 100\n    money_given = 1\n    change = money_given - total_cost_in_pounds\n    return change\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_presents = 7\n    total_children = 5\n    gifts_for_richard = ['toy car', 'puzzle']\n    gifts_for_kevin = ['toy car', 'calculator']\n    presents = ['toy car', 'puzzle', 'calculator', 'gift1', 'gift2', 'gift3', 'gift4']\n    \n    # Remove two presents for Richard and Kevin, since they have specific wishes\n    remaining_presents = [present for present in presents if present not in gifts_for_richard + gifts_for_kevin]\n    \n    count = 0\n    for perm in permutations(remaining_presents, total_children - 2):\n        # Try all permutations where the first two presents are for Richard and Kevin\n        for richard_present in gifts_for_richard:\n            for kevin_present in gifts_for_kevin:\n                if richard_present != kevin_present:\n                    current_perm = (richard_present, kevin_present) + perm\n                    # Since the other three children don't have specific wishes, we can just multiply by 3! for their arrangements\n                    count += 6  # 6 is 3! (factorial of the remaining children)\n    return count\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_percentage = 0.15\n    \n    sugar_weight = total_weight * sugar_percentage\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all numbers are prime\n        if (isprime(n) \n                and isprime(n + 4) \n                and isprime(n + 6) \n                and isprime(n + 132) \n                and isprime(n + 250)):\n            # Return the first set of prime numbers found\n            return n\n        n += 1\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4 * i ** 2) for i in range(1, 2021, 2))\n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time_to_meet = 10  # time in hours it took for them to meet\n\n    # Relative speed is the difference in speeds as they are traveling in the same direction\n    relative_speed = jack_speed - rose_speed\n\n    # Distance between A and B can be found by multiplying the relative speed and time they meet\n    distance_between_AB = relative_speed * time_to_meet\n\n    return distance_between_AB\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the cost of each rabbit\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(second_rabbit, first_rabbit + 2)  # second costs £2 more than the first\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)  # third costs 80p (£0.8) less than the second\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)  # total cost for all rabbits\n\n    # Solve the equations to find the cost of the first rabbit\n    solution = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solution[first_rabbit]\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    remainder = 48739 % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    total_numbers = 5000\n    multiples_of_7 = total_numbers // 7\n    multiples_of_13 = total_numbers // 13\n    multiples_of_7_and_13 = total_numbers // (7 * 13)\n    \n    # Inclusion-exclusion principle\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    total_tshirts = 145\n\n    # Calculate the price per T-shirt\n    price_per_shirt = money_left / (total_tshirts - tshirts_bought)\n\n    # Calculate the total amount Josephine had initially\n    total_amount = price_per_shirt * total_tshirts\n\n    return total_amount\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'SUCCESS'\n    unique_letters = set(word) - {'S'}\n    num_s = word.count('S')\n    # Calculate total permutations without restriction\n    total_permutations = factorial(len(word)) // (factorial(num_s) * factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    \n    # Calculate the number of permutations with S together\n    perm_with_ss_together = 0\n    # Consider SS as a single element and recalculate the total permutations\n    for i in range(1, num_s + 1):\n        new_word = 'SS'*i + ''.join(unique_letters)\n        length = len(new_word) - i  # subtract the merged 'SS' elements\n        perm_with_ss_together += factorial(length) // (factorial(num_s - i) * factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    \n    return total_permutations - perm_with_ss_together\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n*(n+1)//2) ** 2\n    sum_of_integers = n*(n+1)//2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # David's work rate is 1/10 per day\n    # Emma's work rate is 1/18 per day\n    # Let x be the number of days David worked solo\n    \n    x = symbols('x')\n    \n    # David worked for x days. The portion of work he did is x/10\n    # Emma worked for (14-x) days. The portion of work she did is (14-x)/18\n    # David's work + Emma's work should be equal to the whole work which is 1\n    \n    equation = Eq(x/10 + (14-x)/18, 1)\n    \n    # Solve for x to find the number of days David worked\n    days_david_worked = solve(equation, x)[0]\n    \n    # The number of days Emma worked is the total days minus the days David worked\n    days_emma_worked = 14 - days_david_worked\n    \n    return days_emma_worked\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    avg = 119\n    total_numbers = 14\n    # Since the numbers are consecutive and even, the middle two numbers will be the average.\n    # So the 7th number (7th term) will be one less than the average and the 8th will be one more.\n    # to find the first term we subtract 6 * 2 (difference in an even sequence)\n    smallest_number = avg - (total_numbers//2)*2\n\n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = original_pay_per_hour * (1 + increase_percentage)\n    \n    return new_pay_per_hour\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Total different heights\n    diff_heights = 132 - 124 + 1\n    \n    # Pigeonhole Principle: (n-1) * pigeonholes + 1 = number of pigeons\n    # Assume each height is a pigeonhole and we need at least 4 students (pigeons) of the same height\n    class_size = (diff_heights - 1) * 4 + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to make 4 cuts to create 5 sections.\n    # Therefore, each cut takes her 12 / 4 = 3 minutes.\n    time_per_cut = 12 / 4\n    \n    # If she needs to cut the wood 5 times, then she will make 5 cuts.\n    # So she needs 5 cuts * 3 minutes per cut.\n    total_time = 5 * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_money = 126  # Convert £1.26 to pence for simplicity\n    \n    # Let number of each coin be x\n    # Then total money will be 2x pence from 2p coins, 5x pence from 5p coins\n    # Hence, 2x + 5x = total_money\n    # Solving for x gives us the number of each type of coin, the total number of coins would be 3x (since we have equal number of 2p and 5p coins)\n    \n    x = total_money / (2 + 5)  # Simplified equation for x\n    total_coins = 3 * x  # Total number of coins is 3 times x\n    return int(total_coins)\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girl_fraction = 1 - (5/9)\n    non_adults_fraction = 1 - (2/5)\n    total_girls_fraction = girl_fraction * non_adults_fraction\n\n    total_people = 36 / total_girls_fraction\n\n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5  # The number must be at least a multiple of 2 (even) and 5.\n    while True:\n        if (num ** 0.5) % 1 == 0:  # Check if num is a square number\n            return num\n        num += 2 * 5  # Increment by the lowest common multiple of 2 and 5 to maintain the constraints\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_final = 2\n\n    work_per_man_initial = days_initial / men_initial\n    days_final = work_per_man_initial * men_final\n\n    return days_final\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    child_ticket_cost = 30\n\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of powers of 3 follow a repeating pattern: 3, 9, 7, 1, ...\n    # This pattern has a length of 4.\n    \n    # Find the remainder when 2009 is divided by 4 to determine the position in the cycle\n    remainder = 2009 % 4\n\n    # Create a list to represent the cycle of ones digits for powers of 3\n    ones_cycle = [3, 9, 7, 1]\n\n    # The ones digit is found by using the remainder as an index for the cycle\n    ones_digit = ones_cycle[remainder - 1]  # Subtract 1 as the list is zero-indexed \n\n    return ones_digit\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n    will_future = will_now + 8\n    will_past = will_now - 4\n\n    equation = Eq(will_future, 4 * will_past)\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, Function\n\ndef solution():\n    # Each of the 4 kids can get any number of books from 0 to 20\n    # We will use stars and bars combinatorial method to solve this problem\n    # Placing 3 bars among the 20 books to create 4 sections (for 4 kids)\n    # There will be 20 + 3 places and we choose 3 places for the bars\n    n_books = 20\n    n_bars = 3\n    n_places = n_books + n_bars\n    \n    # Calculate combinations C(n_places, n_bars) using factorial division\n    ans = math.comb(n_places, n_bars)\n\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_to_finish = total_pages / pages_per_day\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # Law of Multiplication for independent events: number of ways to perform a series of tasks\n    # is the product of the number of ways to perform each task.\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # The number of ways to chose a mode of transport from A to B is the sum of all the possible\n    # ways, given that you can only pick one mode of transport at a time (train, car, boat).\n    # This can be calculated using the Law of Addition.\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return round(balance, 4)\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    one_direction_fans = 20\n    the_vamps_fans = 17\n    both_fans = 15\n\n    neither_fans = total_girls - (one_direction_fans + the_vamps_fans - both_fans)\n\n    return neither_fans\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Since each kid gets at least two books, we distribute 2 books to each kid first.\n    # This leaves us with 30 - (5 * 2) = 20 books to distribute.\n    remaining_books = 30 - (5 * 2)\n    \n    # Now we have to find the number of ways to distribute remaining books to 5 kids.\n    # This is equivalent to the problem of finding the number of non-negative integer solutions\n    # to the equation x1 + x2 + x3 + x4 + x5 = 20.\n    # This can be solved using the formula for combinations with repetition:\n    # C(n + k - 1, k), where n is the number of types (books) and k is the number of parts (kids).\n    ans = comb(remaining_books + 5 - 1, 5 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the cost of one jug and one cup\n    jug, cup = symbols('jug cup')\n\n    # Creating equations based on the information given\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solving the equations to find the cost of the jug and the cup\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef calculate_term(fraction1, operation, fraction2):\n    if operation == '+':\n        return fraction1 + fraction2\n    elif operation == '-':\n        return fraction1 - fraction2\n    elif operation == '*':\n        return fraction1 * fraction2\n    elif operation == '/':\n        return fraction1 / fraction2\n\ndef solution():\n    fractions = [(1/2, 1/9), (1/3, 1/8), (1/4, 1/7), (1/5, 1/6)]\n    operations = ['+', '-', '*', '/']\n    \n    max_sum = 0\n    second_largest_term = 0\n    for ops in permutations(operations):\n        terms = [calculate_term(frac[0], ops[i], frac[1]) for i, frac in enumerate(fractions)]\n        current_sum = sum(terms)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = sorted(terms)[-2]  # Get the second largest term\n    \n    # Convert the second largest term to a fraction\n    from fractions import Fraction\n    fraction = Fraction(second_largest_term).limit_denominator()\n    A = fraction.numerator\n    B = fraction.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    return sum((-1)**(i % 2) * i for i in range(1, 89))\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > 0.505\n    solution_set = solve(inequality, x)\n    \n    # Since x must be an integer and less than 47.5, we take the floor of 47.5\n    x_max = int(solution_set[0].evalf()) - 1\n    return x_max\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_A = 235\n    room_B = 567\n    # Total number of pupils\n    total_pupils = room_A + room_B\n    # After the transfer, each room will have the same number, which is half of the total\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_amount = 89.65\n    remaining_amount = 20.35\n\n    initial_amount = spent_amount + remaining_amount\n    return initial_amount\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # British currency coins: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), £2 (200p)\n    # Susan's bus fare is 44p, we assume she paid with a larger coin\n    # To minimize the number of coins, she would use the largest coin smaller than the amount, then driver gives change\n\n    # Find the smallest number of coins that can change hands (including the coin Susan uses to pay the fare)\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\n    \n    # Assuming Susan pays with a £1 coin which is 100p, since 44p cannot be directly paid with a single coin \n    paid = 100\n    change = paid - 44  # The change she should get back\n    \n    # Starting with the largest possible coin to give as change\n    coin_count = 1  # Susan will use one coin to pay\n    for coin in reversed(coins):\n        while change >= coin:\n            change -= coin\n            coin_count += 1\n            if change == 0:  # Exact change has been given\n                return coin_count\n\n    # If for some reason change was not possible (should not happen in this case)\n    return -1\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given information\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    \n    # Calculate the 12th number in the sequence\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n    \n    return twelfth_number\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def term(n):\n        if n == 0:\n            return 1 / 1\n        else:\n            return n / ((n ** 2 - 1) * (n ** 2 + n - 1))\n\n    ans = sum(term(i) for i in range(8))\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a_students = 24\n    class_b_students = 36\n    class_c_students = 42\n\n    # Calculate the Greatest Common Divisor (GCD) for the three classes\n    gcd_ab = gcd(class_a_students, class_b_students)\n    gcd_abc = gcd(gcd_ab, class_c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # Any three points can form a triangle.\n    # However, for a right-angled triangle, the hypotenuse has to be the diameter of the circle (Thales' theorem).\n    # Since there are 12 points, there are 6 diameters possible.\n    # For each diameter, there are 8 points remaining to form a right angle (excluding the endpoints of the diameter).\n    # Hence, for each diameter, we can form 8 right-angled triangles.\n\n    num_diameters = 12 / 2\n    points_remaining_per_diameter = 12 - 2\n    right_angled_triangles_per_diameter = points_remaining_per_diameter\n\n    total_right_angled_triangles = num_diameters * right_angled_triangles_per_diameter\n\n    return int(total_right_angled_triangles)\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum((-1)**((i-1)//2) * i for i in range(1, 201))\n    return ans\n    \nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    num_children = 200\n    cost_per_lunch = 4.36\n    num_days = 5\n\n    total_cost = num_children * cost_per_lunch * num_days\n\n    return total_cost\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    ans = (3/8) * 16\n    return ans\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = total_sheep * 5/8\n    white_sheep = total_sheep * 1/4\n    brown_sheep = total_sheep - (black_sheep + white_sheep)\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -3\n    total_points = 76\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_points + wrong * wrong_points == total_points:\n            return correct\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price + 0.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = selling_price - cost_price\n    \n    equation = Eq(profit, 120)\n    cost_price_solution = solve(equation, cost_price)\n    \n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    balls_in_6_boxes = balls_per_box * 6\n    return balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    ways_with_four_different_socks = factorial(4)\n    ways_with_two_pairs_of_socks = factorial(4) // (factorial(2) * factorial(2))\n    return ways_with_four_different_socks, ways_with_two_pairs_of_socks\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    return (number1 + number2) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):      # a cannot be 0 in a two-digit number\n        for b in range(10):     # b can be from 0 to 9\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    return comb(num_points, num_vertices)\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # After receiving 4 sweets each, Andre has total sweets (andre + 4),\n    # and Beth has (beth + 4)\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4, (beth + 4) + 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4  # Including the 4 sweets given by the teacher\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of chair and table\n    mass_chair, mass_table = symbols('mass_chair mass_table')\n\n    # Equation representing the total mass equivalence\n    equation1 = Eq(3 * mass_table, 4 * mass_chair)\n\n    # Equation representing the mass difference between a table and a chair\n    equation2 = Eq(mass_table, mass_chair + 2)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (mass_chair, mass_table))\n\n    return solution[mass_table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea should aim to leave a number of apples such that\n    # 18 - number of apples is a multiple of 4 (1+3, 2+2, or 3+1), so Ben can never\n    # pick the last apple regardless of his choice.\n    for anthea_first_pick in range(1, 4):\n        apples_left = 18 - anthea_first_pick\n        if apples_left % 4 == 0:\n            return anthea_first_pick\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    \n    # Judy can stand in 2 positions (either end of the line)\n    judy_positions = 2\n    \n    # The other 5 friends can be arranged in any order, hence 5!\n    friends_permutations = math.factorial(5)\n    \n    # Total ways they can perform is Judy's positions multiplied by the permutations of friends\n    total_ways = judy_positions * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_of_six_bars = 3.18\n    cost_of_one_bar = cost_of_six_bars / 6\n    cost_of_five_bars = cost_of_one_bar * 5\n    return round(cost_of_five_bars, 2)\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    total_sweets_before = Eq(andre + beth, 24)\n    andre_now = andre + 4\n    beth_now = beth + 4\n    difference_now = Eq(andre_now - beth_now, 6)\n    \n    solutions = solve((total_sweets_before, difference_now), (andre, beth))\n    \n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Let x be the number that we are thinking of\n    x = (2 * 12) + 6\n    return x\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Let's denote the total sum of the four numbers as total.\n    # We know that the average of these four numbers is 130, so:\n    total = 4 * 130\n    \n    # We also know that if one number is removed, the average of the remaining three numbers becomes 110, so:\n    remaining_sum = 3 * 110\n    \n    # The number which is removed is simply the difference between the total and the remaining sum.\n    removed_number = total - remaining_sum\n\n    return removed_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    # m_elder = time in minutes elder sister spent on maths\n    # m_younger = time in minutes younger sister spent on maths\n    # e_elder = time in minutes elder sister spent on English\n    # e_younger = time in minutes younger sister spent on English\n    \n    m_elder, m_younger, e_elder, e_younger = symbols('m_elder m_younger e_elder e_younger')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(m_elder, m_younger + 10)  # Elder spent 10 minutes more on maths\n    equation2 = Eq(e_younger, e_elder + 4)   # Younger spent 4 minutes more on English\n    equation3 = Eq(m_elder + e_elder, 88)    # Total time elder spent\n    equation4 = Eq(m_younger, e_younger - 12)  # Younger spent 12 minutes less on maths than English\n    \n    # Solve the system of equations\n    solution_values = solve((equation1, equation2, equation3, equation4), (m_elder, m_younger, e_elder, e_younger))\n    e_younger_time = solution_values[e_younger]\n    \n    return e_younger_time\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert all times to seconds to work with integers\n    light1 = 60  # 1 minute in seconds\n    light2 = 90  # 1.5 minutes in seconds\n    # Find the least common multiple of the first two lights\n    lcm_first_two = lcm(light1, light2)\n    \n    # Now we need to find a multiple of the lcm that is more than 30 seconds\n    # since the third light needs to change at least every 30 seconds.\n    third_light = 30\n    while lcm_first_two % third_light != 0 or third_light < 30:\n        third_light += 1  # Increment by 1 second until a suitable multiple is found\n\n    # Convert the time back to minutes for the answer\n    ans = third_light / 60\n    return ans\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # If Leo picks 1 apple, Mia can then pick 2 apples. So Leo should avoid this situation.\n    # If Leo picks 2 apples, no matter Mia picks 1 or 2 apples, Leo can always keep the number of apples not divisible by 3.\n    # Hence, to win the game, Leo must ensure that the number of apples is always a multiple of 3 when it's Mia's turn.\n    # Given that there are 14 apples, if Leo takes 2 apples initially, he will leave 12 apples for Mia, which is divisible by 3.\n    # No matter how many apples Mia takes (1 or 2), Leo can always pick in such a way to leave a multiple of 3 for Mia.\n    # Eventually, Mia will be forced to leave 1 or 2 apples, and Leo can win the game by picking the last apple.\n    # Therefore, Leo must take away 2 apples to ensure his victory.\n\n    return 2\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let value of each silver spoon be s and each gold ring be g\n    # According to the question, 12s = (3/4) * 6g\n    # This simplifies to 12s = 4.5g\n    # We need to find the number of silver spoons equivalent to 3 gold rings, let this number be x\n    # So we have xs = 3g\n    # To find x, we can equate the two equations: 12s / 4.5 = xs / 3\n    # Solving for x gives us x = (12 / 4.5) * 3\n\n    x = (12 / 4.5) * 3\n\n    return int(x)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    # Let x be the total weight of all the teachers, and y be the number of female teachers\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y', real=True, positive=True)\n\n    # Equation for the average weight of all teachers\n    equation1 = Eq((3*75 + y*60) / (3 + y), 65)\n\n    # Solving for y\n    solutions = solve(equation1, y)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Let n be the side length of the outer boys layer square\n    # and m be the side length of the girls layer square.\n    # Each time we go one layer inside, we subtract 2 from the side length.\n    # Since there are 55 more boys than girls, we set up the equation:\n    # n^2 - (n-2)^2 + (n-4)^2 - (n-6)^2 + ... = 55\n    # This is a series of squares of odd numbers.\n    # We can calculate the difference between the number of boys and girls\n    # by summing the series of odd squares until we reach a difference of 55.\n    boys_more_than_girls = 55\n    total_students = 0\n    n = 1\n    while True:\n        # Add boys (n^2 students)\n        total_students += n**2\n        # Subtract girls ((n-1)^2 students)\n        if n > 1:\n            total_students -= (n-1)**2\n        # Check if the difference matches 55\n        if total_students - (total_students - n**2) == boys_more_than_girls:\n            break\n        # Move to the next possible square size for boys\n        n += 2\n    \n    # Once we find the total number of boys that are 55 more than girls,\n    # we add the square of numbers to find the total students\n    # Boys squares: n^2, (n-2)^2, ... 1 or 0 (if n is odd or even)\n    # Girls squares: (n-1)^2, (n-3)^2, ... 1 or 0 (if n is odd or even)\n    boys = sum(i**2 for i in range(n, 0, -2))\n    girls = sum(i**2 for i in range(n-1, 0, -2))\n\n    return boys + girls\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    marker_cost = 3\n    paintbrush_cost = 1\n    total_cost = 28\n    total_items = 12\n\n    # Assume all items were paintbrushes initially which cost $1 each\n    all_paintbrushes_cost = total_items * paintbrush_cost\n    # Calculate the excess cost if all were paintbrushes\n    excess_cost = total_cost - all_paintbrushes_cost\n    # Since each marker costs $2 more than a paintbrush, we divide the excess cost by $2\n    # to find the number of markers\n    num_markers = excess_cost // (marker_cost - paintbrush_cost)\n\n    return num_markers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_left = 2\n    from_right = 4\n    from_front = 5\n    from_back = 7\n\n    total_columns = from_left + from_right - 1\n    total_rows = from_front + from_back - 1\n\n    total_students = total_columns * total_rows\n    return total_students\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Prime factors of 33 are 3 and 11.\n    # Prime factors of 55 are 5 and 11.\n    # To make the product a square number, each prime factor must occur an even number of times.\n    # We have 3^1 * 5^1 * 11^2 from 33 and 55, so we need one more 3 and one more 5 to make it a square.\n    # Therefore, m needs to be 3 * 5 = 15.\n\n    m = 3 * 5\n    return m\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    # Since Star must be the first runner, we only need to arrange the remaining 4 teammates.\n    # The number of ways to arrange the remaining 4 teammates is 4! (4 factorial).\n    remaining_runners_factorial = factorial(4)\n    \n    return remaining_runners_factorial\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (a**2) + (a * b) + (b**2)\n    \n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(i + 1, 10):\n            for k in range(j + 1, 10):\n                for l in range(k + 1, 10):\n                    num1 = i * 1000 + j * 100 + k * 10 + l\n                    num2 = l * 1000 + k * 100 + j * 10 + i\n                    num3 = 26352 - num1 - num2\n                    if sorted(str(num3)) == sorted(str(num1)):\n                        return min(num1, num2, num3)\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_for_31_segments = 60  # in minutes\n    cuts_for_31_segments = 31 - 1  # because 31 segments require 30 cuts\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n\n    cuts_for_50_segments = 50 - 1  # because 50 segments require 49 cuts\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    # Use Chinese Remainder Theorem to find the solution\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be written as:\n    # x ≡ 1 (mod 3)\n    # x ≡ 3 (mod 5)\n    # x ≡ 5 (mod 7)\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the number in the specified range [100, 200]\n    while number < 100:\n        number += 3 * 5 * 7\n    \n    return number if number < 200 else None\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    # Since each plate must have at least 2 pieces, we start with 2 on each plate\n    # and distribute the remaining 2 pieces among the 3 plates\n    base_pieces = 2\n    plates = 3\n    remaining_candy = 8 - (base_pieces * plates)\n\n    # Now we are looking for the number of solutions to the equation\n    # x1 + x2 + x3 = remaining_candy, where x1, x2, x3 are non-negative integers\n\n    # We can use stars and bars method, where we have remaining_candy stars\n    # and (plates - 1) bars (because we have 3 plates, so we need 2 bars to partition the candy)\n    # Number of ways to arrange these is (remaining_candy + plates - 1) choose (plates - 1)\n    from math import comb\n\n    count = comb(remaining_candy + plates - 1, plates - 1)\n    return count\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(number - 0.3 * number, 210)\n    solution = solve(equation, number)\n    return solution[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = \"ARRANGE\"\n    frequency = {letter: word.count(letter) for letter in set(word)}\n    numer = factorial(len(word))\n    denom = 1\n    for freq in frequency.values():\n        denom *= factorial(freq)\n    ans = numer // denom\n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy_now, flowers_given = symbols('candy_now flowers_given')\n\n    # Candy gives flowers to Nancy, so we subtract flowers_given from Candy's original flowers\n    equation1 = Eq(candy_now, 11 - flowers_given)\n\n    # Nancy receives flowers from Candy, so we add flowers_given to Nancy's original flowers\n    equation2 = Eq(candy_now + 8, 9 + flowers_given)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candy_now, flowers_given))\n\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n\n    total_days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * total_days\n\n    return total_money\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_term = 1\n    difference = 1\n    while current_term <= 50:\n        difference += 1\n        current_term += difference\n    return current_term\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St Petersburg, Russia as of 2023 is approximately 5.4 million.\n    population = 5400000\n    return population\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    total_money = 10    # in pounds\n    pen_cost = 0.43     # in pounds\n    booklet_cost = 1.85 # in pounds\n\n    total_spent = 3 * pen_cost + 4 * booklet_cost\n    change = total_money - total_spent\n\n    return round(change, 2)  # rounding to 2 decimal places for currency\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    her_place_from_back = 14\n\n    # Total people = People in front of her + 1 (herself) + people behind her\n    # Since she's the 14th from the back, it means there are 13 people behind her.\n    people_behind = her_place_from_back - 1\n    total_people = people_in_front + 1 + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import isprime, primerange\n    \n    # Generate a list of prime numbers\n    prime_numbers = list(primerange(1, 12))\n    \n    # Get the third prime number\n    third_prime = prime_numbers[2]\n    \n    return third_prime\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit numbers\n    for number in range(100, 1000):\n        str_num = str(number)\n        # Check if the absolute difference between any two adjacent digits is at least 7\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for th in range(5, 10):  # Thousands digit must be > 5 to satisfy the condition.\n        for h in range(0, 10):  # Hundreds digit can be 0-9.\n            for t in range(0, 10):  # Tens digit can be 0-9.\n                for o in range(0, 10):  # Ones digit can be 0-9.\n                    # Avoid division by zero and check if thousands digit is divisible by others.\n                    if h != 0 and t != 0 and o != 0 and th % h == 0 and th % t == 0 and th % o == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_terms = 10\n\n    total_coins = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n    return int(total_coins)\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average = 65\n    male_count = 3\n    male_average = 75\n    female_average = 60\n\n    female_count = ((male_count * male_average) - (male_count * total_average)) / (total_average - female_average)\n\n    return female_count\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate_of_interest = 1.5 / 100\n    final_amount = 37100\n    years_claimed = 5\n\n    amount_after_claimed_years = principal * ((1 + rate_of_interest) ** years_claimed)\n    \n    if amount_after_claimed_years == final_amount:\n        return True, 5  # Bella is right, 5 years\n    else:\n        # Calculate actual number of years\n        years_actual = (final_amount / principal) ** (1 / rate_of_interest) - 1\n        return False, int(years_actual)\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given equations based on the problem statement\n    average_ABC = Eq((A + B + C) / 3, 95)\n    average_BCD = Eq((B + C + D) / 3, 94)\n    E_score = Eq(E, 96)\n    score_above_91 = (A > 91, B > 91, C > 91, D > 91, E > 91)\n\n    # Additional information deduced from the problem statement\n    highest_score = Eq(A, E + 1)  # Since E is the second highest with a score of 96\n    BC_compared = Eq(B - C, 0)  # Not directly given, but can be deduced from A having the highest score\n                                # and E having the second highest, implying that B and C can't be higher than E\n    BD_same = Eq(B, D)  # B and D have the same score\n\n    # Solve the system of equations\n    solutions = solve((average_ABC, average_BCD, E_score, highest_score, BC_compared, BD_same) + score_above_91, (A, B, C, D, E))\n\n    # Return the mark scored by D\n    return solutions[D]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # since 1258 has all digits wrong, the correct combination cannot have the digits 1,2,5 or 8\n    # let's remove these from the possibilities\n    possible_digits = set(range(10)) - {1, 2, 5, 8}\n\n    # Analyze the first attempt: 5648 - two digits are wrong -> 6 and 4 are possible as 5 and 8 are wrong\n    possible_digits &= {6, 4}\n\n    # Analyze the second attempt: 3628 - two digits are wrong -> possible_digits should contain only 3 or 6 but not both, 6 is already possible so 3 is not\n    possible_digits -= {3}\n\n    # Analyze the third attempt: 3147 - two digits are wrong -> 7 is in since 3 and 1 are not and 6,4 are already there\n    possible_digits.add(7)\n\n    # Analyze the fourth attempt: 5629 - two digits are wrong -> 9 can't be included as 5 and 2 are already wrong and 6 is correct\n    possible_digits -= {9}\n\n    # Now, we have 6 and 4 as correct digits and 7 is also added in possibilities. We need to find the fourth one.\n    # we can deduce the correct combination by analyzing the remaining two attempts: 5648 and 3628\n    # since in both attempts the last digit (8) is wrong and we already have two correct digits (6, 4)\n    # and they both have 6 as the first digit, then 6 must be the first correct digit.\n    # And since 4 is also correct and it appears in 5648 second, that means 4 is the second correct digit.\n\n    # The possible digits are now 6, 4 and 7, which coincide with attempts 5648, 3147 and 3628.\n    # The common thing between 3147 and 3628 that is not possible is digit 3, leaving only digit 7 to be correct from both.\n    # Therefore, 3 is not the correct digit but 7 is.\n    # Based on the given attempts, the correct order so far is 6_47.\n\n    # The last digit cannot be from the given attempts because they all have two incorrect digits.\n    # So the remaining digit must be 0 since it's not present in any of the attempts and is in the possible_digits.\n    possible_digits -= {6, 4, 7}\n    correct_combination = '6' + str(possible_digits.pop()) + '47'\n\n    return correct_combination\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    # Father's age 6 years ago is 5 times the son's age 6 years ago\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    # The sum of their ages now is 78\n    equation2 = Eq(father + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    # Mass of the jar when 1/4 full\n    mass_one_quarter = 250\n    # Mass of the jar when 3/4 full\n    mass_three_quarter = 350\n\n    # The difference in mass is due to the mass of 1/2 content of the jar\n    mass_half_content = mass_three_quarter - mass_one_quarter\n    \n    # Since mass_half_content represents 1/2 of the jar's content,\n    # the full content of the jar has a mass of 2 * mass_half_content\n    mass_full_content = 2 * mass_half_content\n    \n    # Now we can find the mass of the empty jar\n    # by subtracting the full content's mass from the mass of the jar when 3/4 full\n    mass_empty_jar = mass_three_quarter - (mass_full_content * 3/4)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n    \n    m = 2.0  # mass of block in kg\n    k = 500  # force constant in N/m\n    A = 0.08  # amplitude in meters (converted from cm to m)\n    x = 0.04  # position from equilibrium in meters (converted from cm to m)\n\n    # Total energy (E) of the oscillator in a simple harmonic motion is given by E = (1/2) * k * A^2\n    E = 0.5 * k * A**2\n\n    # Speed (v) of the block when it's x meters from equilibrium can be found using the energy conservation principle\n    # E = (1/2) * k * A^2 = (1/2) * m * v^2 + (1/2) * k * x^2\n    # v = sqrt((2/m) * (E - (1/2) * k * x^2))\n    v = sqrt((2/m) * (E - 0.5 * k * x**2))\n\n    return (E, v)\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda = 13.15  # total soda in liters\n    bottle_fraction = 1/7  # fraction of the bottle to fill\n    bottle_capacity = 9.1  # bottle capacity in liters\n    cup_capacity = 350 / 1000  # cup capacity in liters (350 ml)\n    num_cups = 4  # number of cups to fill\n\n    # Calculate soda used to fill part of the bottle\n    soda_for_bottle = bottle_capacity * bottle_fraction\n    \n    # Calculate total soda used to fill cups\n    soda_for_cups = cup_capacity * num_cups\n    \n    # Calculate the amount of soda left in the bucket\n    soda_left = total_soda - (soda_for_bottle + soda_for_cups)\n    \n    return soda_left\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**(1/2)\n    b = -2023**(1/2)  # The other square root is the negative of a\n\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount = 45  # in pounds\n    coin_value = 0.05  # value of one 5p coin in pounds\n    number_of_coins = total_amount / coin_value\n    return int(number_of_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose wants to win, she needs to make sure the number of marbles\n    # left after her turn is a multiple of 3.\n    # This is because whatever Kylie takes (1 or 2 marbles),\n    # Rose can then take 3 minus that amount, which ensures that\n    # she can always leave a multiple of 3 after her turn.\n    # Eventually, Kylie will be forced to take from 2 marbles down to 1\n    # or from 1 marble to 0, allowing Rose to take the last one.\n    # Since 14 is not a multiple of 3, Rose should try to leave 12 marbles,\n    # which is the nearest multiple of 3.\n    # Therefore, she needs to take away 14 - 12 = 2 marbles.\n\n    return 2\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance run by Bud per minute as 'b' and by Pip as 'p'.\n    p, b = symbols('p b')\n\n    # Pip runs 20 meters more than Bud per minute.\n    equation1 = Eq(p, b + 20)\n\n    # Both Pip and Bud have run 540 meters together in 3 minutes.\n    equation2 = Eq(3 * (p + b), 540)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (p, b))\n\n    # Extract the distance Pip runs per minute and multiply by 3 for the total distance in 3 minutes.\n    distance_pip = solutions[p] * 3\n\n    return distance_pip\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_num1 = \"2A3\"\n    hex_num2 = \"17B\"\n\n    # Convert hexadecimal to decimal\n    decimal_num1 = int(hex_num1, 16)\n    decimal_num2 = int(hex_num2, 16)\n\n    # Perform the addition in decimal\n    decimal_sum = decimal_num1 + decimal_num2\n\n    # Convert the sum back to hexadecimal\n    hex_sum = hex(decimal_sum)\n\n    # Remove the '0x' prefix that appears in Python hexadecimal strings\n    ans = hex_sum[2:].upper()\n\n    return ans\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of coins in Box B initially\n    x = symbols('x')\n\n    # Box A contains 4 times as many coins as Box B\n    coins_in_A = 4 * x\n\n    # 6% of Box A is removed and transferred to Box C\n    transfer_A_to_C = 0.06 * coins_in_A\n\n    # 20% of Box B is removed and transferred to Box C\n    transfer_B_to_C = 0.20 * x\n\n    # After transfer, Box C has 1220 coins\n    # which is 22% more than the original number of coins in Box C\n    # Let y be the original number of coins in Box C\n    y = symbols('y')\n    final_C = y + transfer_A_to_C + transfer_B_to_C\n\n    # The final number of coins in Box C is given to be 1220\n    equation1 = Eq(final_C, 1220)\n    \n    # 1220 coins is 22% more than the original number of coins in Box C\n    equation2 = Eq(1.22 * y, 1220)\n    \n    # Solve the simultaneous equations\n    solved_values = solve((equation1, equation2), (x, y))\n\n    # Number of coins in Box A initially\n    coins_in_A_initial = 4 * solved_values[x]\n\n    return coins_in_A_initial\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 300 * 0.4 * 0.3 * 0.25\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n    average_price = total_price / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    for tricycles in range(25):\n        cars = 24 - tricycles\n        total_wheels = 3 * tricycles + 4 * cars\n        if total_wheels == 86:\n            return tricycles\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Initial percentage of coffee and tea\n    initial_coffee_percent = 60\n    initial_tea_percent = 100 - initial_coffee_percent\n\n    # Final percentage of coffee after adding more tea\n    final_coffee_percent = 40\n    final_tea_percent = 100 - final_coffee_percent\n    \n    # Initial ratio of coffee to tea\n    initial_ratio_coffee_to_tea = initial_coffee_percent / initial_tea_percent\n    \n    # Final ratio of coffee to tea is 40:60, which simplifies to 2:3\n    final_ratio_coffee_to_tea = final_coffee_percent / final_tea_percent\n    \n    # Initial amount of coffee and tea (in terms of a common variable x)\n    # Since the percentages refer to the same total amount, let's use coffee as the common variable\n    initial_coffee = 1  # Represented by x\n    initial_tea = initial_coffee / initial_ratio_coffee_to_tea  # This is x/(60/40) = x/(3/2) = 2x/3\n    \n    # Final amount of coffee and tea (in terms of the same common variable x)\n    # Since the amount of coffee is the same, the amount of tea has increased\n    final_coffee = 1  # Still x, since the coffee amount hasn't changed\n    final_tea = final_coffee / final_ratio_coffee_to_tea  # This is x/(40/60) = x/(2/3) = 3x/2\n    \n    # Calculate the percentage increase in tea\n    increase_in_tea = final_tea - initial_tea\n    percent_increase_in_tea = (increase_in_tea / initial_tea) * 100\n    \n    return percent_increase_in_tea\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Time taken for each task in minutes\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Total time required to finish making juice\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_p = 110 # Conversion from £1.10 to pence\n\n    total_money_p = lewis_money_p + james_money_p\n    ans = total_money_p / 100 # Convert back to pounds\n\n    return ans\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")  # Total number of letters in the word WINNING\n    w_count = 1  # Count of W\n    i_count = 2  # Count of I\n    n_count = 3  # Count of N\n    g_count = 1  # Count of G\n\n    # Calculate total permutations and then divide by the permutations of the repeated letters\n    total_permutations = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    \n    return total_permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Since each stack must have at least 3 books, we start from 3 and calculate the rest\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        # Subproblem recurrence relation\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    # Calculate derangement for 6 students\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in m/s\n    time = 4  # in seconds\n\n    # Using the formula F = m * (v / t) where v is the final velocity and t is the time\n    force = mass * (final_velocity / time)\n    \n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    total_income = 2012\n\n    # price for lemonade (L) and \"1000 Plus\" (P)\n    price_L = 4\n    price_P = 7\n\n    # to minimize the number of bottles of \"1000 Plus\", we need to maximize the number of lemonade bottles\n    # since the price of \"1000 Plus\" is higher, we start by selling only lemonade bottles\n    # until the total income exceeds what you will get by selling only lemonade bottles\n    \n    # maximum number of lemonade bottles that can be sold without exceeding total income\n    max_L = total_income // price_L\n    \n    # start with max_L bottles of lemonade and calculate number of \"1000 Plus\" bottles incrementally\n    for num_L in range(max_L, -1, -1):\n        num_P = (total_income - num_L * price_L) / price_P\n        if num_P.is_integer() and num_L + num_P <= total_bottles:\n            return int(num_P)\n    return None\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    blue_pens_initial, red_pens_initial, blue_pens_added = symbols('blue_pens_initial red_pens_initial blue_pens_added')\n\n    # Equation based on initial conditions\n    equation1 = Eq(blue_pens_initial + red_pens_initial, 96)  # total pens initially\n    equation2 = Eq(blue_pens_initial/red_pens_initial, 3/5)   # initial ratio of blue to red pens\n    \n    # Solve the system for initial numbers\n    solutions_initial = solve((equation1, equation2), (blue_pens_initial, red_pens_initial))\n\n    # Extract the initial number of blue and red pens\n    blue_pens_initial = solutions_initial[blue_pens_initial]\n    red_pens_initial = solutions_initial[red_pens_initial]\n\n    # Total red pens after adding 60\n    red_pens_after = red_pens_initial + 60\n\n    # Equation based on final condition after adding pens\n    total_pens_after = red_pens_after + blue_pens_initial + blue_pens_added\n    equation3 = Eq((blue_pens_initial + blue_pens_added)/total_pens_after, 0.4)  # 40% of total pens are blue\n\n    # Solve to find the number of blue pens added\n    blue_pens_added_solution = solve(equation3, blue_pens_added)\n\n    return blue_pens_added_solution[0]\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\n\ndef solution():\n    def num_factors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    # Generate all combinations of the numbers\n    all_combinations = list(combinations(range(1, 14), 9))\n    \n    # Find all combinations with exactly two numbers with the unique number of factors\n    valid_combinations = []\n    for combo in all_combinations:\n        factors_count = [num_factors(num) for num in combo]\n        unique_factors_count = set(factors_count)\n        if len(factors_count) == len(unique_factors_count) + 7:  # 7 non-unique and 2 unique\n            valid_combinations.append(combo)\n\n    # Deduce numbers based on Alice and May's statements and identify the remaining four numbers\n    final_combinations = []\n    for combo in valid_combinations:\n        for number in combo:\n            if num_factors(number) == 2 and number % 2 == 1:  # Assuming Alice has a prime number (2 factors)\n                may_number = number - 2\n                if may_number in combo and num_factors(may_number) == len(set(num_factors(m) for m in combo if m != number)):\n                    full_set = set(range(1, 14))\n                    remaining_numbers = full_set - set(combo)\n                    final_combinations.append(remaining_numbers)\n\n    # Calculate the product of the remaining four numbers for each valid combination,\n    # if there's only one unique product, then it's the answer\n    products = [1]\n    for numbers in final_combinations:\n        product = 1\n        for n in numbers:\n            product *= n\n        products.append(product)\n    unique_products = set(products)\n    \n    if len(unique_products) == 1:\n        ans = unique_products.pop()\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    total_friends = 11\n    \n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / total_friends\n    \n    return round(cost_per_person, 2)  # Round the answer to 2 decimal places as we're dealing with currency\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # This classic problem is known as the Chicken McNugget Theorem or the Frobenius Coin Problem.\n    # The largest number that cannot be obtained by a combination of 3x + 7y is (3*7) - 3 - 7.\n    largest_non_purchasable = (3 * 7) - 3 - 7\n    return largest_non_purchasable\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    correct, incorrect = symbols('correct incorrect')\n    \n    # number of correct answers is 12 more than the three times the number of incorrect answers\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    \n    # for each correct answer Jane gains 5 points, for each incorrect or unanswered she loses 2 points\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n    \n    return solutions[correct]\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    first_number_base10 = int('45', 7)\n    second_number_base10 = int('66', 7)\n    sum_base10 = first_number_base10 + second_number_base10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # The total number of games for 7 players where each player plays with every other player exactly once\n    # is given by the formula for combination C(7, 2), as we are choosing 2 players out of 7 for each game\n    from math import comb\n    total_games = comb(7, 2)\n    \n    # Now, since each match involves two players, the total matches played will be twice the number of games\n    # because each game is counted for both players. Thus, the sum of matches played by individual players\n    # should be equal to twice the total number of games.\n    sum_of_matches_played = 2 * total_games\n    \n    # The sum of matches played by all players except F\n    sum_except_f = 4 + 6 + 2 + 1 + 3 + 5\n    \n    # The number of matches played by F will be the total sum of matches minus the sum of matches played by\n    # all other players.\n    matches_played_by_f = sum_of_matches_played - sum_except_f \n\n    return matches_played_by_f\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Since N can be divided by 18 out of the first 20 natural numbers,\n    # the only two that cannot divide N are consecutive numbers.\n    # Let's try each pair of consecutive numbers from 1 to 19 as the pair that\n    # cannot divide N, and check the N's divisibility by checking the LCM of the other 18.\n    from math import gcd\n    from functools import reduce\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcm_of_list(lst):\n        return reduce(lcm, lst)\n\n    for i in range(1, 20):\n        numbers = set(range(1, 21)) - {i, i + 1}\n        numbers_lcm = lcm_of_list(list(numbers))\n\n        if numbers_lcm % i != 0 and numbers_lcm % (i + 1) != 0:\n            # These are the two numbers that do not divide N\n            return i + (i + 1)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be Cici's age when she was born (0) and l be Linda's age at that time (11)\n    c, l = symbols('c l')\n    \n    # Four years later, their ages would be c+4 and l+4 respectively\n    four_years_later_sum = Eq(c + l + 8, 37)  # The sum of their ages in 4 years is 37\n    \n    # We know Linda's age when Cici was born which is 11\n    linda_birth_age = Eq(l, 11)\n    \n    # Solving the equations\n    solutions = solve((four_years_later_sum, linda_birth_age), (c, l))\n    \n    # Linda's age 3 years later would be her age when Cici was born plus 3\n    linda_age_3_years_later = solutions[l] + 3\n    \n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(161, 15*15):  # The numbers will be less than 15*15 since beyond that, the quotient will exceed the remainder\n        if i % 15 == i // 15:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let's denote the number of Natasha's stamps as n and Jamie-Anne's as j.\n    # We are given the ratio j:n = 5:3 and the difference j - n = 18.\n\n    # From the ratio, we can write j = (5/3) * n\n    # From the difference, we can write j - n = 18\n\n    # Now we solve the two equations:\n    # (5/3) * n - n = 18\n    # (2/3) * n = 18\n    # n = 18 / (2/3) = 18 * (3/2) = 27\n\n    n = 27\n    j = (5/3) * n\n\n    # The total number of stamps they have in total is j + n:\n    total_stamps = j + n\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300  # distance from home to school\n    distance_downhill = 300  # distance from school to home\n    speed_uphill = 10  # speed uphill\n    speed_downhill = 30  # speed downhill\n\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_downhill / speed_downhill\n\n    total_distance = distance_uphill + distance_downhill\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "from math import factorial\n\ndef solution():\n    entrances = 5\n    people = 4\n    # Any of the 4 people can choose any of the 5 entrances, independently of each other\n    ways = entrances ** people\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    \n    num_bags = total_peaches // peaches_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy has two choices for her position, first or last place\n    judy_choices = 2\n    # The other five friends can be arranged in any order\n    friends_permutations = factorial(5)\n\n    # Total ways is the product of judy's choices and the permutations of her friends\n    total_ways = judy_choices * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n\n    for i in range(1, lcm + 1):\n        if lcm % i == 0 and i != 1 and i != 2 and number % i != 0:\n            return i\n    return None\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of apples, pears, and oranges that can be distributed\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Find the greatest common divisor (GCD) of the distributable fruits\n    gcd_result = gcd(distributable_apples, gcd(distributable_pears, distributable_oranges))\n\n    return gcd_result\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    current_number = 1\n    written_digits = ''\n\n    while len(written_digits) < 200:\n        written_digits += str(current_number)\n        current_number += 1\n        \n    ans = int(written_digits[199])  # Index 199 because Python uses 0-based indexing\n    return ans\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    selling_price = price * 0.8\n    profit = selling_price - cost\n    \n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    points_per_qualified = 5\n    points_per_unqualified = -18\n    total_points = 9931\n    tvs_per_day = 500\n\n    # Let x be the total number of qualified products\n    # Then total_days * tvs_per_day - x is the total number of unqualified products\n    # Set up the equation based on the total points earned\n\n    # points_per_qualified * x + points_per_unqualified * (total_days * tvs_per_day - x) = total_points\n    x = (total_points - points_per_unqualified * total_days * tvs_per_day) / (points_per_qualified - points_per_unqualified)\n\n    return x\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Daniel's age and daughter's age\n    daniel, daughter = symbols('daniel daughter')\n\n    # Equation representing the relation two years ago\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n\n    # Equation representing the relation two years from now\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Daniel's age this year is daniel\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hens, roosters = symbols('hens roosters')\n    \n    initial_condition = Eq(hens, 6 * roosters)\n    final_condition = Eq(hens + 60, 4 * (roosters + 60))\n    \n    solutions = solve((initial_condition, final_condition), (hens, roosters))\n    \n    initial_chickens = solutions[hens] + solutions[roosters]\n\n    return initial_chickens\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    ans = sum(range(1, 9)) + sum(range(7, 0, -1)) + 3  # The last 1+2 is added directly as 3\n    return ans\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    initial_mean = 12\n    initial_total = initial_mean * 7\n    \n    new_mean = 11\n    new_total = new_mean * 8\n    \n    eighth_number = new_total - initial_total\n\n    return eighth_number\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = '538462'\n    position = 2021\n    index = (position - 1) % len(recurring_sequence)\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    nums = [375, 753, 537, 357, 573, 735]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for number in range(1, 101):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let x be the speed at which Baye is walking\n    # Let y be the speed at which April walks\n    # Since April walks to Q and then meets Baye at 800m from Q, the distance April covers is 1800 + (1800 - 800) = 2800m\n    # In the same time, Baye covers 1800 - 800 = 1000m\n    # Thus, April's speed is 2.8 times Baye's speed (2800/1000)\n    # April then turns back and runs at 4 times her walking speed until reaching P\n    # During the time April runs back from the meeting point to P, Baye continues to walk towards Q\n    # We need to find the distance covered by Baye in this time\n    # Let t be the time April takes to run back to P\n    # Then, April runs back at a speed of 4 * 2.8 * x (4 times her original speed, which is 2.8 times Baye's speed)\n    # So, the distance April runs back is 4 * 2.8 * x * t\n    # Since April meets Baye 800m away from Q, and then runs back to P (1800 m), we have 4 * 2.8 * x * t = 1800\n    # The distance Baye covers in the same time is x * t\n    # We need to solve for x * t, knowing that 4 * 2.8 * x * t = 1800\n    \n    # Rewriting the equation for Baye's distance when April runs back to P\n    t = 1800 / (4 * 2.8)  # Time taken by April to run back to P\n    # The distance Baye walks in this time\n    baye_distance = t  # Since Baye's speed is x and time is t, the distance is x * t, which equals to t, as x is our unknown\n    \n    remaining_distance = 1800 - (1000 + baye_distance)\n    \n    return remaining_distance\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total money that Bud had initially.\n    x = symbols('x')\n    \n    # Bud spent 1/3 on a book and 2/5 on a bag, and their total cost is £132.\n    equation = Eq((1/3) * x + (2/5) * x, 132)\n    \n    # Solve for x\n    total_money = solve(equation, x)[0]\n\n    return total_money\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    ans = ((1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)) - ((1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34))\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Taking the worst case scenario using the Pigeonhole Principle\n    # Darrell could draw all blue and white beads before getting 5 green beads.\n    max_blue_white_beads = 5 + 6\n    # To ensure 5 green beads, Darrell must draw one more than the total of blue and white beads.\n    beads_to_draw_for_5_green = max_blue_white_beads + 5\n\n    return beads_to_draw_for_5_green\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    count = 0\n    for i in range(1, 216):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the masses of parcels A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 5 * B)         # A is 5 times the mass of B\n    equation2 = Eq(C, B - 75)        # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)   # Total mass is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Get the mass of Parcel A\n    return solutions[A]\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    total_numbers = 105\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (5 * 7)\n\n    # Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):  # Page numbers go from 1 to 81\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = (5 * a) - (2 * b)\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    floors_walked = 4 - 1  # from first to fourth floor\n    time_for_3_floors = 12  # 12 minutes for 3 floors\n\n    # Use the proportion of floors walked to determine the time taken for 7 floors (first to eighth)\n    total_floors_to_walk = 8 - 1\n    time_for_total_floors = (time_for_3_floors / floors_walked) * total_floors_to_walk\n    \n    return time_for_total_floors\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # This is a problem of partitioning an integer into a sum of integers.\n    # Since the order of the baskets doesn't matter, we can use \"stars and bars\"\n    # the number of ways to put n indistinguishable items into k distinguishable\n    # boxes is given by the formula C(n+k-1, k-1) where C is the binomial coefficient.\n    \n    from math import comb\n\n    apples = 6  # Number of apples\n    baskets = 3  # Number of baskets\n    # Now we use the formula to calculate the number of ways\n    ans = comb(apples + baskets - 1, baskets - 1)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_per_month = 15\n    number_of_months = 5  # March to July is 5 months\n\n    total_pizzas = average_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Let the initial number of birds be 8x and squirrels be 5x\n    # After 1 year, the number of squirrels is increased by 20%\n    # So the new number of squirrels becomes 5x * 1.2 = 6x\n    # The total number of birds and squirrels remains the same so,\n    # 8x (initial birds) + 5x (initial squirrels) = new number of birds + 6x (new squirrels)\n    # Let y be the new number of birds\n    # Therefore, y = 8x + 5x - 6x = 7x\n    # The percentage of birds that flew away is ((8x - 7x) / 8x) * 100\n    # Simplify the expression ((1x) / 8x) * 100\n    percentage_flew_away = (1 / 8) * 100\n\n    return percentage_flew_away\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increase = 4\n\n    num_days = ((last_day_pages - first_day_pages) / daily_increase) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - a // b\n\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    # Total juice in cartons initially\n    total_juice = 8 * 3\n\n    # Juice remaining after drinking\n    remaining_juice = total_juice - 9\n\n    # Number of containers needed\n    containers_needed = -(-remaining_juice // 5)  # Using ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    term_number = 5  # since we want the next term after 4 terms\n\n    next_term = first_term + (term_number - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    ans = sum(range(1, 51))\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # Since 9/A should be less than 1, A has to be greater than 9\n        if 5/9 < 9/A:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_sum_art = 0\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_sum_art = max(max_sum_art, A + R + T)\n    return max_sum_art\n\n# Fixing C to be a digit outside of the D, A, R, T set\nfor C in range(1, 10):\n    if C not in (D, A, R, T):\n        ans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    # There are 4 friends, each sends a card to every other friend.\n    # Since each of the 4 friends sends a card to 3 others, we have\n    # 4 friends * 3 cards each = 12 cards sent\n    # However, each card exchange is only between 2 friends, so we don't need to double count.\n    # Hence, the total cards sent is 12, and no division by 2 is required as we're not counting exchanges but individual sent cards.\n    \n    return 4 * 3\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # The equation representing 1/4 of boys equal to 2/5 of girls\n    equation1 = Eq(boys / 4, (2 / 5) * girls)\n    \n    # The equation representing the total number of students\n    equation2 = Eq(boys + girls, 39)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the difference between the number of boys and girls\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_tanya = 3\n    right_of_tanya = 5\n    tanya = 1  # Tanya herself\n\n    total_members = left_of_tanya + tanya + right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import isprime\n\n    # Start from the largest four-digit number, 9999, and go backwards\n    for i in range(9999, 1000, -1):\n        # Check if it's a factor of 87878 and if it's a prime number\n        if 87878 % i == 0 and isprime(i):\n            return i\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # The total weight of 24 crates each weighing 5 tonnes\n    van_capacity = 12      # The capacity of each van in tonnes\n    number_of_vans = (total_weight + van_capacity - 1) // van_capacity  # The minimum number of vans needed\n    return number_of_vans\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # First segment\n    first_distance = 280\n    first_speed = 7\n    first_time = first_distance / first_speed\n    \n    # Middle segment\n    middle_distance = 400\n    middle_speed = 5\n    middle_time = middle_distance / middle_speed\n    \n    # Final segment\n    final_distance = 800 - first_distance - middle_distance\n    final_speed = 8\n    final_time = final_distance / final_speed\n    \n    # Total time\n    total_time = first_time + middle_time + final_time\n    \n    return total_time\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        elif n < 0 or max_value == 0:\n            return 0\n        else:\n            return count_partitions(n - max_value, max_value) + count_partitions(n, max_value - 1)\n\n    return count_partitions(5, 5)\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    daniel, patrick = symbols('daniel patrick')\n\n    # Initial situation: Daniel and Patrick have the same number of stickers\n    equation1 = Eq(daniel, patrick)\n\n    # Situation after changes: Patrick has twice as many stickers as Daniel\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    # Return Daniel's original number of stickers\n    return solutions[daniel]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82\n    plane_height = 569\n\n    distance = plane_height - whale_depth\n\n    return distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # All the boys could be right-handed\n    boys = total_pupils - girls\n    # The smallest number of right-handed girls would be when all the boys are right-handed\n    right_handed_boys = min(boys, right_handed)\n    # The remaining right-handed pupils would have to be girls\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        total_skirts += day * skirts_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = float('inf')\n    num_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    from itertools import permutations\n    all_permutations = permutations(num_array)\n    \n    for perm in all_permutations:\n        for other_perm in all_permutations:\n            num1 = int(''.join(map(str, perm)))\n            num2 = int(''.join(map(str, other_perm)))\n            if num1 != num2:\n                diff = abs(num1 - num2)\n                if diff < smallest_diff:\n                    smallest_diff = diff\n                    if smallest_diff == 1:\n                        return 1  # Since 1 is the smallest non-zero difference possible\n    return smallest_diff\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    difference = 5\n    qiqi_pizza = jenny_pizza + difference\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruit = symbols('total_fruit')\n    \n    apples = (2 / 3) * total_fruit\n    bananas = (1 / 9) * total_fruit\n    lemons = total_fruit - apples - bananas\n    \n    # Equation: apples = lemons + 12\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation\n    solution = solve(equation, total_fruit)\n    \n    # Calculate number of lemons\n    lemons_count = solution[0] - (2 / 3) * solution[0] - (1 / 9) * solution[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n    brothers_erasers = (total_erasers - difference) / 2\n    return brothers_erasers\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    total_taps = 5\n    time_for_1_litre = 2  # minutes\n    volume_of_jug = 0.5  # 500 ml is 0.5 litres\n\n    # Time for one tap to fill 1 litre jug\n    time_for_one_tap_to_fill_1_litre = time_for_1_litre * total_taps\n    \n    # Time for one tap to fill 0.5 litre jug\n    time_for_one_tap_to_fill_half_litre = time_for_one_tap_to_fill_1_litre * volume_of_jug\n    \n    return time_for_one_tap_to_fill_half_litre\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    return 360 / (70 - 4 * 16)\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    perm = permutations(digits, 3)\n    max_sum = 0\n\n    for first_num in perm:\n        remaining = set(digits) - set(first_num)\n        for second_num in permutations(remaining, 3):\n            sum_value = int(''.join(map(str, first_num))) + int(''.join(map(str, second_num)))\n            max_sum = max(max_sum, sum_value)\n\n    return max_sum\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    # Volume of the cola in the bottle initially in millilitres (1 litre = 1000 millilitres)\n    initial_volume_ml = 2 * 1000\n    \n    # Volume drank in millilitres\n    drank_volume_ml = 350\n    \n    # Remaining volume in the bottle in millilitres\n    remaining_volume_ml = initial_volume_ml - drank_volume_ml\n    \n    return remaining_volume_ml\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    # Let x be the total number of visitors at the fair\n    # 3/5 of the visitors were children, so the number of children is (3/5) * x\n    # The remaining visitors are x - (3/5) * x = (2/5) * x\n    # 1/2 of the remaining visitors were men, so the number of men is (1/2) * (2/5) * x = (1/5) * x\n    # There were 140 more children than men, so (3/5) * x = (1/5) * x + 140\n    # We can solve for x from the above equation\n\n    # (3/5) * x - (1/5) * x = 140\n    # (2/5) * x = 140\n    # x = 140 / (2/5)\n    # x = 140 * (5/2)\n    \n    x = 140 * (5/2)\n    return int(x)\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches_played = 20\n    payment_per_match = 500\n    goals_per_game = 2\n    payment_per_goal = 100\n\n    total_payment_for_matches = matches_played * payment_per_match\n    total_payment_for_goals = matches_played * goals_per_game * payment_per_goal\n\n    total_earnings = total_payment_for_matches + total_payment_for_goals\n\n    return total_earnings\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Define the initial terms\n    terms = [1, 8, 16, 23, 46, 53]\n    # Define the alternating step sizes\n    steps = [7, 8]\n    # Find the next number in the pattern\n    next_term = terms[-1] + steps[len(terms) % 2]\n    return next_term\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rates of the pipes A, B, C as a, b, and c\n    # Let V be the volume of the pool\n\n    a, b, c, V = symbols('a b c V')\n    \n    # If A and C are on, the pool is filled and A contributes 18 tons\n    # So the volume of the pool V = A's contribution + C's contribution\n    equation1 = Eq(18 * a + V * c, V)\n    \n    # If B and C are on, the pool is filled and B contributes 27 tons\n    # The volume of the pool V = B's contribution + C's contribution\n    equation2 = Eq(27 * b + V * c, V)\n    \n    # Given B's rate is twice A's rate\n    equation3 = Eq(b, 2 * a)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c, V))\n\n    return solutions[V]\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n\n    cost_per_kg = total_cost / total_kg\n\n    return cost_per_kg\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    length = 10\n    end = start + (length - 1) * 2\n    ans = sum(range(start, end + 1, 2))\n    return ans\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0:\n            continue\n        math_num = M * 1000 + A * 100 + T * 10 + H\n        htam_num = H * 1000 + T * 100 + A * 10 + M\n        if math_num + htam_num == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let G be the total amount of grass on the grassland.\n    # Let H be the daily amount of grass eaten by one horse.\n    # Let S be the daily amount of grass eaten by one sheep.\n    # We know that 1 horse eats as much as 4 sheep: H = 4S\n    \n    # From the provided information, we have:\n    # 20 horses eat all grass in 12 days, so total grass G = 20 * H * 12\n    # 60 sheep eat all grass in 24 days, so total grass G = 60 * S * 24\n    # Equating the two expressions for G we get:\n    # 20 * H * 12 = 60 * S * 24\n    # Using H = 4S we get: 20 * 4S * 12 = 60 * S * 24\n    # Simplifying, we find that S (the daily amount of grass eaten by one sheep) cancels out, so we don’t need its value.\n    \n    # Now we need to find out how many days 12 horses and 88 sheep will take to eat all the grass:\n    # G = (12 * H + 88 * S) * X, where X is the number of days we want to find.\n    # We know H = 4S, so we can substitute H in terms of S:\n    # G = (12 * 4S + 88 * S) * X\n    # G = (48S + 88S) * X\n    # G = 136S * X\n    # We know from the previous calculation that G = 60 * S * 24\n    # Therefore: 60 * S * 24 = 136S * X\n    # We can now solve for X:\n    # X = (60 * 24) / 136\n    X = (60 * 24) / 136\n    \n    return int(X)\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_combinations = 9 * 10 * 10  # Total number of 3 digit numbers\n    no_sevens = 8 * 9 * 9  # Numbers without any 7\n    \n    # Subtracting numbers without any 7 from total combinations gives numbers with at least one 7\n    at_least_one_seven = total_combinations - no_sevens\n    \n    # Numbers with exactly one 7\n    one_seven_only = (3 * 8 * 9) + (2 * 9 * 9)  # 7XX, X7X, XX7 \n    \n    # Numbers with at least two sevens will be those with at least one 7 minus those with only one 7\n    at_least_two_sevens = at_least_one_seven - one_seven_only\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    sweets_total = 60\n    sweets_eaten = sweets_total / 2\n    sweets_remaining = sweets_total - sweets_eaten\n    sweets_given_away = sweets_remaining / 3\n\n    sweets_left = sweets_remaining - sweets_given_away\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    # Halfway between two numbers is the average of the two numbers\n    num1 = 1.9\n    num2 = 1.99\n    halfway_num = (num1 + num2) / 2\n    \n    return halfway_num\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes originally.\n    x, y = symbols('x y')\n\n    # Total number of notes originally is 55.\n    total_notes_eq = Eq(x + y, 55)\n\n    # She spent 1/3 of the $2 notes.\n    spent_2_notes = x / 3\n\n    # Received another 8 $5 notes.\n    received_5_notes = 8\n\n    # After transactions, the number of $5 notes is 3/7 of the remaining total.\n    remaining_notes_eq = Eq(y + received_5_notes, 3 / 7 * (x - spent_2_notes + y + received_5_notes))\n\n    # Solve the system of equations.\n    solutions = solve((total_notes_eq, remaining_notes_eq), (x, y))\n\n    # Total money she had originally is $2 times the number of $2 notes plus $5 times the number of $5 notes.\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Treat Mr. Spencer and his 2 children as a single unit since \n    # he wants to sit between them ensuring they always sit together.\n    # So, there are 4 units to arrange (Mr. Spencer and his 2 children, and 3 other people)\n    units_to_arrange = factorial(4)\n    \n    # Since there are 2 children and their arrangement matters,\n    # we have 2! ways to arrange the children around Mr. Spencer.\n    children_arrangements = factorial(2)\n    \n    # Multiple the arrangements of the units and the children to get\n    # the total number of different possible seating arrangements.\n    total_arrangements = units_to_arrange * children_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_score = -2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_score + wrong * wrong_score == 23:\n            return correct\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # meters per minute\n    time = distance / speed  # time in minutes\n    return time\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_52 = [i for i in range(1, 53) if 52 % i == 0]\n\n    smallest_sum = float('inf')\n    for b in factors_24:\n        if b in factors_52:\n            a = 24 // b\n            c = 52 // b\n            smallest_sum = min(smallest_sum, a + c)\n\n    return smallest_sum\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    final_number = 18\n    original_number = (final_number - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # A, B, and C grouped together can be considered as a single entity (ABC group).\n    # Similarly, E and F grouped together can be considered as another single entity (EF group).\n    # So instead of 8 individuals, we have 6 entities to arrange (ABC group, EF group, D, G, H, and I).\n    \n    # First, we calculate the permutations of these 6 entities.\n    entity_permutations = factorial(6)\n    \n    # ABC can be arranged in 3! ways internally because A, B, and C want to stand together.\n    abc_permutations = factorial(3)\n    \n    # EF can be arranged in 2! ways internally because E and F want to stand next to each other.\n    ef_permutations = factorial(2)\n    \n    # The total permutations is the product of the permutations of entities and the internal permutations of the ABC and EF groups.\n    total_permutations = entity_permutations * abc_permutations * ef_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n\n    original_duration = 6\n    increased_production = 24\n    reduced_duration = 4  # 2 days earlier than the original 6 days\n\n    # Original plan equation: total_scarfs = scarfs_per_day * original_duration\n    equation1 = Eq(total_scarfs, scarfs_per_day * original_duration)\n    \n    # New plan equation: total_scarfs = (scarfs_per_day + increased_production) * reduced_duration\n    equation2 = Eq(total_scarfs, (scarfs_per_day + increased_production) * reduced_duration)\n\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let the number of sweets Mr. Lim has be x\n    # Let the number of students be n\n    # The problem states that:\n    # x - 6n = -26  [1] (if he gives each student 6 sweets, he is short of 26)\n    # x - 5n = -5   [2] (if he gives each student 5 sweets, he is short of 5)\n    # We now have two equations with two unknowns. We can solve this system of equations.\n    \n    from sympy import symbols, Eq, solve\n    \n    x, n = symbols('x n')\n    equation1 = Eq(x - 6 * n, -26)\n    equation2 = Eq(x - 5 * n, -5)\n    \n    solutions = solve((equation1, equation2), (x, n))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    original_ratio = Eq(boys / girls, 5 / 3)\n    new_ratio = Eq((boys - 15) / girls, 5 / 6)\n\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n\n    return int(solutions[boys] + solutions[girls])\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15+1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(1, 15):\n            for x3 in range(1, 15):\n                if x1 + x2 + x3 == 15 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the 3 numbers\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(675)\n    b_factors = {}\n\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            b_factors[prime] = 1\n\n    B = 1\n    for prime, power in b_factors.items():\n        B *= prime ** power\n\n    return B\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_age_now = 65\n    josh_age_5_years_ago = (3/5) * (shelby_age_now - 5)\n    josh_age_now = josh_age_5_years_ago + 5\n    return josh_age_now\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695\n    individual_cost_pence = 65 * 12\n    savings = individual_cost_pence - multipack_cost_pence\n\n    return savings\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote:\n    # Adam's weight as A\n    # Ben's weight as B\n    # Carl's weight as C.\n\n    # From the problem we have:\n    adam_and_ben = 102\n    ben_and_carl = 97\n    adam_and_carl = 93\n\n    # The total weight will then be:\n    # (A + B) + (B + C) + (A + C) = 2*(A + B + C)\n    # Total weight is 2 times any of the individuals weight\n    # So we add the weights of Adam and Ben, Ben and Carl, and Adam and Carl,\n    # and we divide that by 2 to get the total weight of Adam, Ben, and Carl\n    total_weight = (adam_and_ben + ben_and_carl + adam_and_carl) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')  # 'a' for apples, 'b' for banana\n    equation1 = Eq(3 * a + b, 32)\n    equation2 = Eq(6 * a + b, 53)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the time Alan takes to paint the room on his own\n    a = symbols('a')\n    \n    # Alan and Bob's combined work rate is 1/4 of the room per hour\n    combined_rate = 1 / 4\n    \n    # Bob's work rate is 1/6 of the room per hour\n    bob_rate = 1 / 6\n    \n    # Alan's work rate is 1/a of the room per hour\n    alan_rate = 1 / a\n    \n    # Equation representing combined work rate of Alan and Bob\n    equation = Eq(alan_rate + bob_rate, combined_rate)\n    \n    # Solve for Alan's time\n    alan_time = solve(equation, a)[0]\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    ans = (55 / 100) * 80\n    return ans\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n\n    # We'll first calculate for four-digit numbers (since 3267 is a four-digit number)\n    # and we make sure the first digit is within the correct range to be higher than 3267.\n    for first in range(3, 6):  # The first digit can only be 3, 4 or 5\n        if first == 3:\n            # If the first digit is 3, the second digit can be any from 2, 4, 5, 6 (1 is too low)\n            for second in [2, 4, 5, 6]:\n                # The third and fourth digits can then be any remaining digits\n                for third in [d for d in [1, 2, 4, 5, 6] if d not in [first, second]]:\n                    for fourth in [d for d in [1, 2, 4, 5, 6] if d not in [first, second, third]]:\n                        total_count += 1\n        else:\n            # If the first digit is 4 or 5, we can have any remaining digits in the second, third and fourth places\n            for second in [d for d in [1, 2, 3, 4, 5, 6] if d != first]:\n                for third in [d for d in [1, 2, 3, 4, 5, 6] if d not in [first, second]]:\n                    for fourth in [d for d in [1, 2, 3, 4, 5, 6] if d not in [first, second, third]]:\n                        total_count += 1\n\n    # Now we calculate for five-digit numbers. Since our range starts at 5120, the\n    # first digit can only be 5 and we exclude it for the rest of the digits\n    for second in [1, 2, 3, 4, 6]:\n        for third in [d for d in [1, 2, 3, 4, 6] if d != second]:\n            for fourth in [d for d in [1, 2, 3, 4, 6] if d not in [second, third]]:\n                for fifth in [d for d in [1, 2, 3, 4, 6] if d not in [second, third, fourth]]:\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # Since the interest is compounded yearly, n = 1\n\n    account_balance = principal * ((1 + rate) ** time)\n\n    return account_balance\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    weeks = 26\n    total_food = weekly_food * weeks\n    return total_food\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n    votes_others = 22 + 27\n\n    # To be elected without fail, Peter needs more than half of the total votes\n    half_votes = total_votes // 2\n    \n    # Peter must have one more vote than half of the total votes to guarantee a win\n    required_votes_for_win = half_votes + 1\n\n    # Calculate extra votes needed for Peter to reach the winning threshold\n    additional_votes_needed = required_votes_for_win - current_votes_peter\n    \n    return additional_votes_needed\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    \n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n\n    # alex - 58 = money left for Alex after spending\n    # nicholas - 13 = money left for Nicholas after spending\n    # money left for Nicholas is 6 times money left for Alex\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n    # Initially, Alex and Nicholas have the same amount of money\n    equation2 = Eq(alex, nicholas)\n\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    # Total money they had at first is Alex's amount + Nicholas's amount\n    total_money = solutions[alex] + solutions[nicholas]\n\n    return total_money\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour_g = 600\n    remaining_flour_g = 21\n\n    flour_used_g = initial_flour_g - remaining_flour_g\n\n    return flour_used_g\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    # Assuming the cube-root of a**2 equals 9\n    # We need to find the value of a\n    \n    # Let's take both sides to the power of 3/2 to get rid of the fractional exponent\n    a_to_2 = 9**(3/2)\n    \n    # Now, take the square-root (which is the same as raising to the power of 1/2) to find 'a'\n    ans = a_to_2**(1/2)\n    \n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    number_of_days_later = 28\n    \n    day_code = (number_of_days_later % days_in_week) + 1\n    \n    # Since day_code is calculated from Monday (which is denoted by 1),\n    # and we want to use the format given in the instruction, \n    # we need to adjust the day_code by a certain mapping where:\n    # Monday -> 0001, Tuesday -> 0002, ..., Sunday -> 0007.\n    # Since we already start from Monday and adding 28 days (which is a multiple of 7),\n    # we land on the same day of the week which is Monday itself.\n    ans = f\"{day_code:04d}\"\n\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value = 6 * 10**(-3)\n    return value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length / interval) - 1\n\n    return int(num_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # Let r be the number of rulers, then the number of pencils is r + 10.\n    # The total number of pencils and rulers is 52: r + (r + 10) = 52\n    # 2r + 10 = 52\n    # 2r = 42\n    # r = 21\n    # Therefore, Alison has 21 rulers.\n    r = (52 - 10) // 2\n    return r\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean = 11\n    total_numbers = len(numbers) + 1  # Including x\n    total_sum = mean * total_numbers\n    sum_of_known_numbers = sum(numbers)\n    x = total_sum - sum_of_known_numbers\n    return x\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The place value of the first 7 is in the thousands place (10^3), which is 7 * 1000.\n    # The place value of the second 7 is in the tens place (10^1), which is 7 * 10.\n    first_seven_value = 7 * 1000\n    second_seven_value = 7 * 10\n\n    # The difference between the values of the two 7s.\n    difference = first_seven_value - second_seven_value\n    return difference\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_to_girls_ratio = 5 / 6\n    number_of_boys = 200\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 6 / 5\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red, yellow = symbols('blue red yellow')\n    \n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = \"3\" * 1000  # The decimal part of 1/3 is repeating \"3\"s\n    ans = sum(int(digit) for digit in decimal_part)  # Sum of the first 1000 digits\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 0.15 * 29\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To guarantee 4 marbles of the same color, we first take the worst-case scenario for each color.\n    # That is, we take 3 marbles of each color, but this doesn't guarantee 4 of the same color yet.\n    # Since there are 3 colors, after taking 3 of each, the next marble we take must be the 4th of some color.\n    num_red = 3\n    num_yellow = 3\n    num_blue = 3\n\n    # The next marble we take, no matter what color, will ensure 4 marbles of the same color.\n    additional_marble = 1\n\n    # The total number of marbles we need to take out is sum of the worst case plus one additional marble.\n    total_marbles = num_red + num_yellow + num_blue + additional_marble\n    return total_marbles\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    count = (end // step) - (start // step) + 1\n    return count\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    return round(fraction + percentage + decimal, 3)\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    total_people = 5\n    pair_people = 2\n\n    ways_without_pair = math.factorial(total_people - pair_people + 1)\n    ways_to_arrange_pair = math.factorial(pair_people)\n\n    return ways_without_pair * ways_to_arrange_pair\n\nimport math\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_boxes_first_3_days = 33\n    average_last_4_days = 18\n    total_boxes_last_4_days = average_last_4_days * 4\n    total_boxes_whole_week = total_boxes_first_3_days + total_boxes_last_4_days\n    average_per_day_whole_week = total_boxes_whole_week / 7\n    return average_per_day_whole_week\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the two products of their ages\n    ages_2016 = factorint(2016)\n    ages_1377 = factorint(1377)\n\n    # The prime factorization of 2016 = 2^5 * 3^2 * 7\n    # The prime factorization of 1377 = 3 * 459 = 3 * 3 * 7 * 23 \n\n    # The ages multiplied last year must have been divisible by 23,\n    # because 1377 has a prime factor of 23, and 2016 does not.\n    youngest_age_last_year = 23\n\n    for age in ages_2016:\n        # Since they were younger, divide by the age difference (subtract 2 years in total from today)\n        if age in ages_1377:\n            ages_1377[age] -= ages_2016[age]\n        else:\n            ages_1377[age] = -ages_2016[age]\n\n    # Reconstruct ages from the remainders\n    ages_2_years_ago = 1\n    for age, power in ages_1377.items():\n        ages_2_years_ago *= age ** (power + 1)\n\n    return ages_2_years_ago * youngest_age_last_year\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    # Let x be the concentration of the solution that we put into container A originally\n    # Container A:\n    # Holds 30 grams of pure water, we add 10 grams of solution with concentration x%\n    # So the amount of pure substance in A is 10 * (x / 100)\n\n    # When we put 10 grams of solution from A to B, it has the same concentration as A\n    # Container B:\n    # Initially holds 40 grams of pure water\n    # Gets 10 grams of solution of concentration x% from container A\n    # So the amount of pure substance in B is now 10 * (x / 100)\n\n    # When we put 10 grams of solution from B to C, it has the same concentration as B\n    # Container C:\n    # Initially holds 50 grams of pure water\n    # Gets 10 grams of solution from container B\n    # The final concentration in C is 0.5%\n    # That means the amount of pure substance in C is 0.5 * (50 + 10) / 100\n\n    # Let's set up the final equation\n    # The amount of pure substance transferred from B to C is 10 * (10 * (x / 100)) / (40 + 10)\n    # and the concentration of the solution is 0.5% = (10 * (10 * (x / 100)) / (40 + 10) + 50) / (60)\n\n    # Solving the equation\n    from sympy import symbols, Eq, solve\n\n    pure_substance_in_C = 0.5 * (50 + 10) / 100\n    x = symbols('x')\n    equation = Eq(10 * (10 * x / 100) / 50 + 50, pure_substance_in_C * (50 + 10))\n\n    concentration = solve(equation, x)\n\n    return concentration[x]\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    mass1 = 12  # mg\n    mass2 = 13  # mg\n    nickel_percentage1 = 40 / 100  # 40% as a decimal\n    nickel_percentage2 = 60 / 100  # 60% as a decimal\n\n    nickel_mass1 = mass1 * nickel_percentage1\n    nickel_mass2 = mass2 * nickel_percentage2\n\n    total_mass = mass1 + mass2\n    total_nickel_mass = nickel_mass1 + nickel_mass2\n\n    nickel_concentration = (total_nickel_mass / total_mass) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Since there are no ties and everyone has different number of wins,\n    # and there are 8 players, the possible number of wins are from 0 to 7.\n    # The champion would be the one with the highest number of wins, which is 7.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        correct_sum = n * (n + 1) // 2\n        if correct_sum > 3405:\n            break\n        if (3405 - correct_sum) <= n:\n            return 3405 - correct_sum\n        n += 1\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Original number of chickens in each pen\n    x = symbols('x')\n\n    # Originally we have 24 pens\n    # After building 6 more pens, we will have 24 + 6 = 30 pens\n    # The number of chickens has reduced by 6 per pen\n    # So, the equation would be: 24 * x = 30 * (x - 6)\n    equation = Eq(24 * x, 30 * (x - 6))\n\n    # Solving the equation\n    chickens_per_pen = solve(equation, x)\n    total_chickens = chickens_per_pen[0] * 24\n\n    return total_chickens\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio = 7 / 8\n    total_history_club = total_math_club * ratio\n    return int(total_history_club)\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Calculate the common difference using the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # Where:\n    # S_n is the sum of the first n terms,\n    # n is the number of terms,\n    # a is the first term, and\n    # d is the common difference.\n\n    # For the sum of the first 6 terms:\n    # S_6 = 64 = 6/2 * (2a + (6 - 1)d)\n    # 64 = 3 * (2a + 5d)\n    \n    # For the sum of the first 12 terms:\n    # S_12 = 156 = 12/2 * (2a + (12 - 1)d)\n    # 156 = 6 * (2a + 11d)\n\n    # Now we have two equations:\n    # 1) 3 * (2a + 5d) = 64\n    # 2) 6 * (2a + 11d) = 156\n\n    # Divide the second equation by 2 to make it easier to solve the system:\n    # 2a + 11d = 26\n\n    # Now we subtract the first equation from the modified second one:\n    # (2a + 11d) - (2a + 5d) = 26 - 64 / 3\n    # 6d = 26 - 64 / 3\n\n    # Solve for d:\n    d = (26 - (64 / 3)) / 6\n\n    # Now we can find the first term (a) using the first equation:\n    # 2a + 5d = 64 / 3\n    # a = (64 / 3 - 5d) / 2\n\n    a = (64 / 3 - 5 * d) / 2\n\n    # Finally, we calculate the sum of the first 18 terms using the formula:\n    # S_18 = 18/2 * (2a + (18 - 1)d)\n    S_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n\n    return S_18\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reversing the digits of the given numbers\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n    \n    # Subtracting the reversed numbers\n    result = num1 - num2\n    \n    # Reversing the result to get the answer as it would be written on the planet Zog\n    ans = int(str(result)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n\n    return brother_current_age\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage_score = 60  # Hebe's score in percentage\n    total_marks = 60  # Total marks of the test\n\n    hebe_score = (hebe_percentage_score / 100) * total_marks  # Convert Hebe's percentage to marks\n    more_marks = hebe_score - emily_score  # The difference in marks between Hebe and Emily\n\n    return int(more_marks)\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # Distance covered by the train to pass the bridge completely is the length of the train plus the length of the bridge.\n    # This distance is also equal to the speed of the train multiplied by the time it takes to pass the bridge.\n    # distance = train_length + bridge_length\n    # distance = train_speed * time_to_pass\n\n    train_length = 160  # meters\n    distance = train_speed * time_to_pass\n\n    # To find the bridge length, we subtract the train length from the total distance.\n    bridge_length = distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Calculate the time in hours Star spends jogging\n    jogging_start_time = 6.5  # 6:30 am in hours\n    jogging_end_time = 7.0    # 7:00 am in hours\n    jogging_time = jogging_end_time - jogging_start_time\n    \n    # Calculate the distance covered while jogging\n    jogging_speed = 9  # in km/h\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Calculate the time in hours Star spends walking\n    walking_start_time = 7.0  # 7:00 am in hours\n    walking_end_time = 8.0    # 8:00 am in hours\n    walking_time = walking_end_time - walking_start_time\n    \n    # Calculate the distance covered while walking\n    walking_speed = 7.5  # in km/h\n    walking_distance = walking_time * walking_speed\n    \n    # Calculate total distance covered\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    result = (55 - 44) * common_factor\n    return result\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # The first digit can't be 0, so we have 2 choices for the first digit (3 or 4)\n    first_digit_choices = 2\n    # The second and third digits can be 0, 3, or 4, so we have 3 choices for each of these two digits\n    other_digits_choices = 3 * 3\n\n    # The total number of different numbers is the product of the choices for each position\n    total_numbers = first_digit_choices * other_digits_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n\n    equation = Eq(wins, 2 * losses)\n    total_games = Eq(wins + losses, 63)\n\n    solutions = solve((equation, total_games), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the original number of cows, and g be the original number of goats.\n    c, g = symbols('c g')\n    \n    # 65% of the animals in the farm were cows and the rest were goats.\n    eq1 = Eq(c / (c + g), 65 / 100)\n    \n    # When 240 more cows and goats were added, the percentage of cows increased by 20%\n    # Now cows are 85% = 65% (original) + 20% (increase)\n    eq2 = Eq((c + 240) / (c + g + 240), 85 / 100)\n    \n    # The number of goats doubled.\n    eq3 = Eq(2 * g, g + 240)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (c, g))\n    \n    # We want to find the initial number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of Triangle X (equilateral triangle)\n    area_X = (3**2 * (3**0.5)) / 4\n    \n    # The area of Triangle Y (equilateral triangle)\n    area_Y = (9**2 * (3**0.5)) / 4\n\n    # How many times can Triangle X fit into Triangle Y?\n    ans = area_Y / area_X\n\n    return ans\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Equation represents the total money spent on pens and pencils\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    return comb(5, 2)\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n    # Define the factorial function shortcut\n    fact = factorial\n\n    # The three girls can be arranged amongst themselves in 3! ways.\n    girls_permutations = fact(3)\n\n    # We consider the girls as a single unit with the teachers, making it 4 units.\n    # These four units can be arranged in 4! ways.\n    units_permutations = fact(4)\n\n    # Now we place the boys in the gaps between the units (girls+teachers)\n    # There are 5 possible positions for boys (before the first unit, between the four units, and after the last unit) \n    # but only 3 boys to arrange, so this can be done in P(5,3) ways, which is 5! / (5-3)!\n    boys_positions = fact(5) / fact(5-3)\n\n    # The total number of ways is the product of the three permutations calculated above.\n    total_permutations = girls_permutations * units_permutations * boys_positions\n\n    return int(total_permutations)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    large_product = 8 * 9 * 10\n    small_product = 1 * 2 * 3\n    difference = large_product - small_product\n    \n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 201):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    n = 8  # number of terms\n    a1 = 6  # first term\n    an = 41  # last term\n    sum_arithmetic_sequence = (n * (a1 + an)) / 2\n    return sum_arithmetic_sequence\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # 1 soup of the day + 1 option not to choose soup\n    desserts = 3  # 2 desserts + 1 option not to choose dessert\n    \n    # Calculate the combinations\n    total_combinations = appetisers * main_courses * soups * desserts\n    \n    return total_combinations\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    # Let x be the number of blue balls in the bag\n    # Total balls in the bag = 4 red + x blue\n    # Total ways to choose 2 balls from (4 + x) balls is combin(4 + x, 2)\n    # Total ways to choose 2 red balls from 4 red balls is combin(4, 2)\n    # The probability that both balls are red is (combin(4, 2) / combin(4 + x, 2))\n    \n    from math import comb\n\n    # We have the equation: (comb(4, 2) / comb(4 + x, 2)) = 2/7\n    # Solve for x\n\n    for x in range(1, 100):  # Iterate through possible values of x \n        total_balls = 4 + x\n        total_ways = comb(total_balls, 2)\n        red_ways = comb(4, 2)\n        probability = red_ways / total_ways\n        \n        if probability == 2 / 7:\n            return x\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let \"total_slices\" be the total number of slices Terry had at first\n    # We know that 3/5 of the cake was eaten by her family,\n    # 2 slices were given to friends and 4 slices were left,\n    # Thus, 2 + 4 slices constitute the remaining 2/5 of the cake.\n    remaining_slices = 2 + 4\n    total_slices = remaining_slices * 5 // 2\n    return total_slices\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    weight_ratio_dog_to_rabbit = 8\n    weight_ratio_rabbit_to_chicken = 2\n\n    weight_ratio_dog_to_chicken = weight_ratio_dog_to_rabbit * weight_ratio_rabbit_to_chicken\n\n    return weight_ratio_dog_to_chicken\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    numbers = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    position_difference = 1000 - 1  # The difference in position for the two 3's is in the thousands and ones place.\n    return position_difference\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the rate of work for Mike and Danny\n    mike_rate, danny_rate = symbols('mike_rate danny_rate')\n    \n    # Equation for the combined work for 10 hours to finish the job\n    equation1 = Eq(10 * (mike_rate + danny_rate), 1)\n    \n    # Equation for Mike's 8 hours and Danny's 13 hours to finish the job\n    equation2 = Eq(8 * mike_rate + 13 * danny_rate, 1)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (mike_rate, danny_rate))\n    \n    # Time for Danny to finish the job alone is the reciprocal of Danny's rate of work\n    danny_time = 1 / solutions[danny_rate]\n    \n    return danny_time\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    min_pencils_in_one_case = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_op(a, b):\n        return a + sum(a + i for i in range(1, b + 1))\n    \n    # To find m using m ⊕ 10 = 66, we need to solve for m\n    for m in range(66):  # Because m ⊕ 10 cannot exceed 66, can start at 0 and go up to 65\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance_between_chess = 3\n\n    # Subtracting the corners as they will be counted twice (once for each side)\n    chess_per_side = (side_length // distance_between_chess) - 1 \n\n    # There are 4 sides, and adding the 4 corners\n    total_chess = (chess_per_side * 4) + 4\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the number of red squares, each digit should appear at most 4 times\n    # There are 10 possible digits (0-9), and each can appear 4 times without being painted red\n    # So maximum non-red squares = 10 digits * 4 times = 40 squares\n\n    # Total squares - non-red squares = red squares\n    red_squares = 100 - 40  # 100 total squares - 40 non-red squares\n\n    return red_squares\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4 / 5\n    remaining_money = initial_money - spent_money + father_gave\n    \n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef solution():\n    # The product of 10 digits is 2^27. Since each digit ranges from 1 to 9, we need to factor 2^27 into its prime factors.\n    # The only relevant prime factor here is 2, since we're limited by the digits 1 to 9.\n    # So we need powers of 2 that add up to 27 across 10 digits, and each digit can be 2, 4, or 8 (2^1, 2^2, 2^3 respectively).\n    # Define combinations with repetition for our 3 possible digits \n    def combinations_with_repetition(n, r):\n        return factorial(n + r - 1) // (factorial(r) * factorial(n - 1))\n\n    # We can have 9 2's (2^1) and 1 8 (2^3) to make 2^27.\n    # We can arrange these in 10!/(9!1!) ways, but we must divide by 2^9 for the duplicate 2's.\n    comb_9_2s_1_8 = combinations_with_repetition(10, 2) // (2**9)\n    \n    # We can have 7 2's and 2 4's (2^2) equivalent to one 8.\n    # We can arrange these in 10!/(7!2!1!) ways, but we must divide by 2^7 for the duplicate 2's and by 2 for the duplicate 4's.\n    comb_7_2s_2_4s = combinations_with_repetition(10, 3) // (2**7 * 2)\n    \n    # And we can have 5 2's and 4 4's (each 4 is 2^2)\n    # We can arrange these in 10!/(5!4!1!) ways, but we must divide by 2^5 for the duplicate 2's and by 4! for the duplicate 4's.\n    comb_5_2s_4_4s = combinations_with_repetition(10, 4) // (2**5 * factorial(4))\n    \n    # Lastly, we can have 3 2's and 6 4's \n    # We can arrange these in 10!/(3!6!1!) ways, but we must divide by 2^3 for the duplicate 2's and by 6! for the duplicate 4's.\n    comb_3_2s_6_4s = combinations_with_repetition(10, 5) // (2**3 * factorial(6))\n    \n    # Add all the possible combinations\n    count = comb_9_2s_1_8 + comb_7_2s_2_4s + comb_5_2s_4_4s + comb_3_2s_6_4s\n    return count\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # Starts at 32 because 31**2 is less than 1000 and ends at 99 because it's the last two-digit number\n        square = i ** 2\n        if str(square)[1] == str(square)[0] and str(square)[2] == str(square)[3]:\n            return square\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # -4\n    n = 1  # Start counting from the first term\n    \n    while first_term > 0:  # Continue until the term becomes negative\n        first_term += common_difference\n        n += 1\n        \n    return n - 1  # Subtract 1 because we want the term just before the first negative one\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    distance_left = 130\n    speed_tim = 56\n    speed_bob = 74\n    speed_combined = speed_tim + speed_bob\n\n    distance_covered = initial_distance - distance_left\n    time = distance_covered / speed_combined\n\n    return time\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    total_numbers = 5\n    other_numbers_sum = 3 + 4 + 6 + 10\n\n    total_sum = mean_value * total_numbers\n    fifth_number = total_sum - other_numbers_sum\n\n    return fifth_number\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_height = 11\n    climb_up = 3\n    slide_down = 1\n    net_climb = climb_up - slide_down\n    day = 0\n    distance_covered = 0\n\n    while distance_covered < total_height:\n        day += 1\n        distance_covered += climb_up\n        if distance_covered >= total_height:\n            break\n        distance_covered -= slide_down\n    \n    return day\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # Prime factorization of the factorial will give us the number of zeros\n    # Zero is made by 10, which is 2*5. Count the pairs of 2 and 5 in prime factors.\n    count_5 = 0\n    n = 1  # Starting from 1 because 0 factorial is 1, which has no zeros\n    \n    # Since there are always more 2s than 5s in factorials, we just count the number of 5s\n    while count_5 < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:  # Count the number of 5s in the factors of n\n            count_5 += 1\n            temp_n //= 5\n    \n    return n\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = [int(d) for d in str(year)]\n        sorted_digits = sorted(digits)\n        if sorted_digits == list(range(min(digits), min(digits) + 4)):\n            if len(set(permutations(digits))) == 24:  # 4! permutations for 4 unique digits\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = '8354'\n    \n    sum_digits = sum(int(decimal_part[i % len(decimal_part)]) for i in range(84))\n\n    return sum_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie, jenny, jason = 15, 10, 8\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    interval_duration = 43 - (6 * 3)  # from the given data: total time minus the duration of all chimes for 6 strikes\n    intervals = 6 - 1  # for 6 strikes, there are (6-1) intervals\n    interval_time = interval_duration / intervals  # time per interval\n\n    total_strikes_12 = 12\n    total_intervals_12 = total_strikes_12 - 1  # for 12 strikes, there are (12-1) intervals\n    total_time_12 = (total_strikes_12 * 3) + (total_intervals_12 * interval_time)\n\n    return total_time_12\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Using stars and bars method, with n = 20 - 6 (because each child gets at least one)\n    # and k = 6 - 1 (because we are dividing into 6 - 1 partitions).\n    n = 20 - 6\n    k = 6 - 1\n    return combinations(n + k, k)\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m_squared_plus_5 = 5  # Start by assuming the smallest square with leftovers is 5 (e.g., 0x0 square with 5 leftover)\n    while True:\n        m = int((m_squared_plus_5 - 5) ** 0.5)  # Find m by taking the square root of (m^2 + 5 - 5)\n        n_squared = m_squared_plus_5 + 18  # If 18 more students join, they form a perfect square n^2\n        n = int(n_squared ** 0.5)\n        if m * m + 5 == m_squared_plus_5 and n * n == n_squared:\n            original_students = m_squared_plus_5 - 5\n            break\n        m_squared_plus_5 += 1\n    return original_students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    total_work = 6 * 15\n    people_needed = total_work / 2\n    return people_needed\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    num_quizzes = 4\n    total_time_minutes = time_per_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60  # convert minutes to hours\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No leading zeros\n    non_zero_three_digit_numbers = 9 * 9 * 8  # No zeros at all\n\n    at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n    \n    # Kinetic energy = 1/2 * mass * speed^2\n    kinetic_energy = 0.5 * mass * speed ** 2\n    \n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for i in range(100, 201):\n        if i % 3 == 1 and i % 4 == 1 and i % 5 == 1 and i % 7 == 2:\n            return i\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    \n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    sol, _ = solve_congruence(*congruences)\n    while sol < 300:\n        return int(sol)\n        sol += 5*6*7\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    for i in range(1, 10):  # Loop to find the thousands digit (cannot be 0)\n        for j in range(10):  # Loop to find the hundreds digit\n            for k in range(10):  # Loop to find the tens digit\n                if i != j and i != k and j != k and i != 9 and j + k == 13:\n                    return int(f\"{i}{j}{k}9\")  # Create the smallest 4-digit number with 9 as the ones digit\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    # Let's assume the speed of Jerry is 's', therefore Kevin's speed is '1.5s'.\n    # Since they are moving towards each other, their relative speed is 's + 1.5s = 2.5s'.\n    # Let's denote the time taken to meet as 't', then we can write the equation: 2.5s * t = 225.\n    # This gives us the following relation for the distance traveled by Jerry 's * t'.\n\n    # They meet at a point where the distance travelled by Jerry plus the distance travelled by Kevin equals the total\n    # distance between them (225 miles). Let's denote the proportion of the total distance covered by Jerry as 'p', so\n    # Kevin covers '1-p' of the distance. Since Kevin's speed is 1.5 times Jerry's speed, we can write the equation:\n    # (1-p)/p = 1.5, solving for 'p' gives us the proportion of the distance Jerry covers.\n    p = 1 / (1 + 1.5)\n    \n    # The distance Jerry has driven is then 'p' times the total distance.\n    distance_jerry = p * total_distance\n    \n    return distance_jerry\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # one more piece than there are cuts\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    num_pictures = 10\n\n    space_needed_for_pictures = picture_width * num_pictures\n    remaining_space = total_width - space_needed_for_pictures\n    space_between_pictures = remaining_space // (num_pictures - 1)\n\n    # Since the first picture is on the extreme left, \n    # we need to find the center of the third picture.\n    # The center of the third picture will be \n    # 1 full picture width + 1.5 times the space between pictures \n    # from the left end of the wall.\n\n    center_of_third_picture_from_left = (1 * picture_width) + (1.5 * space_between_pictures)\n\n    # The center of the wall is at half its width\n    center_of_wall = total_width / 2\n\n    # Distance of third picture's center from the wall's center\n    distance_from_wall_center = center_of_wall - center_of_third_picture_from_left\n\n    return distance_from_wall_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height = 1  # you can assume original height as 1 or 100%, it doesn't affect the relative calculation\n    bounce_count = 0\n    while height >= 0.25:  # while the height is >= 25% of the original\n        height *= 0.75  # it reaches 75% of the previous height each bounce\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n\n    # Let x be the number of years it takes for Doris to reach her uncle's current age.\n    # When Doris is as old as her uncle's current age, her uncle will be 40 years old.\n    # So we have: current_age_uncle = doris_age + x\n    # And in x years, uncle's age will be: current_age_uncle + x = 40\n    \n    # From the above equation, we get: doris_age + x + x = 40\n    # Which simplifies to: 2x = 40 - doris_age\n    # Solving for x gives us: x = (40 - doris_age) / 2\n    \n    x = (uncle_future_age - doris_age) / 2\n    \n    # Uncle's current age is Doris's age plus x\n    current_age_uncle = doris_age + x\n    \n    return current_age_uncle\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for i in range(1, 10):\n        if 5 + i > 8:  # regrouping happening\n            if 10 + 8 + (5 + i - 10) == 15:  # after regrouping \n                return i\n    return 7  # Assuming Timothy is correct\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each girl has\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    # Set the equations based on the problem statement\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    equation = Eq(original_money - 200 - (2/7) * (original_money - 200), (1/3) * original_money)\n    \n    ans = solve(equation, original_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "from math import factorial\n\ndef solution():\n    # Consider Tom and Harry as a single entity (T_H), adding Ronda (R), 5 entities in total to arrange.\n    total_arrangements = factorial(5)  \n\n    # Tom and Harry can switch places with each other.\n    tom_harry_arrangements = factorial(2)  \n\n    # Ronda must be on the furthest right, but the other 4 places can be arranged freely.\n    # Considering Tom and Harry as one entity, there are 4! ways to arrange the 4 entities\n    # Then Tom and Harry as two people can swap their positions, so we have an additional 2! ways.\n    ans = total_arrangements * tom_harry_arrangements  \n\n    return ans\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n    \n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # Ryna's suggested price\n    ryna_suggested_price = 125001\n    # Lower bound for rounding to 125000 to the nearest 100\n    lower_bound = 124950\n    # Upper bound for rounding to 125000 to the nearest 100\n    upper_bound = 125049\n\n    # Check if Ryna's suggestion is in the correct range\n    if lower_bound <= ryna_suggested_price <= upper_bound:\n        ans = (True, ryna_suggested_price)\n    else:\n        ans = (False, lower_bound + 1)  # '+1' to get to the nearest dollar\n\n    return ans\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "from sympy import symbols, Eq, solve, ceiling\n\ndef solution():\n    # Define symbols\n    n = symbols('n', integer=True, positive=True) # Number of additional tests\n    total_score_current = 89 * 4 # Total score from 4 tests\n\n    # Equation for average score after n more tests\n    equation = Eq((total_score_current + 100 * n) / (4 + n), 95)\n\n    # Solve for n\n    n_value = solve(equation, n)\n    n_value_ceiling = ceiling(n_value[0])\n\n    return n_value_ceiling\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    speed1 = 9\n    time1 = distance1 / speed1  # Time = Distance / Speed\n\n    distance2 = 300\n    speed2 = 6\n    time2 = distance2 / speed2\n\n    # The final remaining distance to cover is total distance minus the two previous distances\n    distance3 = 1000 - (distance1 + distance2)\n    speed3 = 10\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the usual speed of the car in km/h\n    # Let t be the usual time it takes to travel from P to Q in hours\n    r, t = symbols('r t')\n\n    # Distance between P to Q is the same in both cases\n    # Usual distance = usual speed * usual time\n    # Distance = r * t\n\n    # In the first case, when the speed is increased by 20%\n    # New speed = 1.2 * r\n    # New time = t - 1\n    # New distance = new speed * new time\n    # r * t = 1.2 * r * (t - 1)\n\n    equation1 = Eq(r * t, 1.2 * r * (t - 1))\n\n    # In the second case, for the first 200km, the car travels at usual speed\n    # Then the remaining distance race is completed at 25% increased speed\n    # New speed = 1.25 * r\n    # New time for first 200km = 200 / r\n    # Remaining distance = r * t - 200\n    # Time for remaining distance at new speed = (r * t - 200) / (1.25 * r)\n    # Total time for the second case = time for first 200km + time for remaining distance\n    # t = time for first 200km + time for remaining distance + 12/60 (12 minutes earlier)\n\n    equation2 = Eq(t, 200/r + (r * t - 200) / (1.25 * r) + 12/60)\n\n    # We have two equations with two unknowns, we can solve them now\n    solutions = solve((equation1, equation2), (r, t))\n\n    # Substitute the time into the first equation to find the distance\n    distance = solutions[r] * solutions[t]\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    # Number of classes\n    classes = 18\n    # Lia and Liz each prepares an extra performance\n    extra_performances = 2\n    \n    # Total performances\n    total_performances = classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250  # Length of the train in meters\n    bridge_length = 260  # Length of the bridge in meters\n    speed = 30  # Speed of the train in m/s\n\n    # Total distance to be covered by train to entirely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge entirely\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sheep_begin, cows_begin = symbols('sheep_begin cows_begin')\n    \n    # Original ratio of sheep to cows\n    equation1 = Eq(sheep_begin, 5/7 * cows_begin)\n    \n    # Ratio after adding 21 sheep and removing 7 cows\n    equation2 = Eq(cows_begin - 7, 3/4 * (sheep_begin + 21))\n    \n    # Solving the equations \n    solutions = solve((equation1, equation2), (sheep_begin, cows_begin))\n\n    return solutions[sheep_begin]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_difference = (9 * 60 + 25) - (8 * 60 + 30)\n    return time_difference\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_time = 6\n    B_time = A_time * 2\n\n    A_rate = 1 / A_time\n    B_rate = 1 / B_time\n\n    combined_rate = A_rate + B_rate\n\n    total_time = 1 / combined_rate\n\n    return total_time\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n    \n    # Two equations based on the given information\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50  # cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of a packet of Mamee is 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # cost of a big packet of jelly is 6 times a packet of Mamee\n    return big_jelly_cost\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Assuming Geoff's age is G and his sister's age is S\n    # G + S = 22 is the current sum of their ages\n    # Every year, both Geoff and his sister will grow 1 year older.\n    # After Y years, the new sum of their ages will be G + Y + S + Y = 30\n    # Which simplifies to 2*Y + (G + S) = 30\n    # Since G + S = 22, substituting that in,\n    # we get 2*Y + 22 = 30\n    # Finally, 2*Y = 8. So Y = 8 / 2 = 4.\n\n    Y = (30 - 22) / 2\n    return int(Y)\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32 // 36\n    return numerator\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the total number of candies as a symbol\n    total_candies = symbols('total_candies')\n\n    # Given that Anna received 3/8 of the candies\n    anna_candies = (3/8) * total_candies\n\n    # Belle received 1/4 of the candies\n    belle_candies = (1/4) * total_candies\n\n    # Cathy and Dawn's candies combined\n    cathy_dawn_candies = total_candies - anna_candies - belle_candies\n\n    # Given that Anna and Belle received 90 more candies than Cathy and Dawn\n    equation = Eq(anna_candies + belle_candies, cathy_dawn_candies + 90)\n\n    # Solving the equation for total number of candies\n    solutions = solve(equation, total_candies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x denote the number of fish balls Mr. Tan made at first\n    x = symbols('x')\n\n    # Mr Tan sold 3/4 of the fish balls in the morning, so he has 1/4 left\n    morning_left = x * (1 - 3/4)\n\n    # Mr Tan sold 1/3 of the remaining fish balls in the afternoon\n    afternoon_left = morning_left * (1 - 1/3)\n\n    # Mr Tan made another 506 fish balls\n    total_after_made_more = afternoon_left + 506\n\n    # He had twice the number of fish balls he made at first\n    # Set up the equation and solve for x\n    equation = Eq(total_after_made_more, 2 * x)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_plants = symbols('initial_plants')\n    # Ethan removes initial_plants/2 - 1\n    ethan_removes = initial_plants / 2 - 1\n    # Valerie removes (initial_plants - ethan_removes)/2 - 3\n    valerie_removes = (initial_plants - ethan_removes) / 2 - 3\n    # Joel removes (initial_plants - ethan_removes - valerie_removes)/2 - 2\n    joel_removes = (initial_plants - ethan_removes - valerie_removes) / 2 - 2\n\n    # equation representing the final number of plants\n    equation = Eq(initial_plants - ethan_removes - valerie_removes - joel_removes, 4)\n  \n    # solving the equation\n    solution = solve(equation, initial_plants)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare the symbols for the cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry', integer=True)\n    \n    # Use the information given to set up the equations\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate - chocolate/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n    \n    # Calculate how many chocolate cupcakes were sold\n    chocolate_sold = chocolate_cupcakes / 6\n    \n    # Return the number of sold chocolate cupcakes\n    return chocolate_sold\n\n# Call the solution function and assign the answer to 'ans'\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    \n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 400:\n        ans += 3 * 5 * 7\n    if ans > 500:\n        return None\n    return ans\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = 0\n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors += 2 if i != n // i else 1\n\n    return factors\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples = pigs\n    red_apples = pigs / 2\n    total_apples = green_apples + red_apples\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    grown_seeds = total_seeds - died_seeds\n    return int(grown_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    # Andy alternates between depositing and spending.\n    # He makes a transaction every day, depositing on odd days and spending on even days.\n    \n    # Find the total number of deposit days and spending days within 15 days\n    deposit_days = (15 + 1) // 2  # because 15 is an odd number, there's one more deposit day\n    spending_days = 15 // 2\n    \n    # Calculate the total amount of money deposited and spent\n    total_deposits = deposit_days * 10\n    total_spends = spending_days * 8\n    \n    # Andy's final money amount is his initial amount plus total deposits minus total spends\n    final_amount = 100 + total_deposits - total_spends\n    \n    return final_amount\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences based on the problem statement\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Minimum number of pencils satisfying the conditions\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n\n    durians_left = total_durians - sold_durians\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_result = 54\n    pre_division = final_result * 4\n    pre_addition = pre_division - 178\n    original_number = pre_addition / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    avg_apples = sum(apples) / len(apples)\n    return avg_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let Alexis' stickers be 5x and Mary's stickers be 7x at first.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Mary and Alexis each gave 20% of their stickers to Charlotte.\n    mary_gives = 0.20 * 7*x\n    alexis_gives = 0.20 * 5*x\n    # Charlotte's stickers increased by 80%.\n    charlotte_new = (mary_gives + alexis_gives) / 0.80\n    # If Mary had 20 stickers more than Charlotte in the end,\n    # After giving 20%, Mary has 80% left\n    mary_remaining = 0.80 * 7*x\n    equation = Eq(mary_remaining - charlotte_new, 20)\n\n    # Solve the equation for x, and use it to determine the original amount of Alexis' stickers\n    x_value = solve(equation, x)[0]\n    alexis_stickers = 5 * x_value\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # 4! ways to seat 4 people without restrictions\n    # There are 2 ways for Claire and Tony to sit across from each other.\n    # For each of these arrangements, there are 2 ways to arrange the remaining 2 players.\n    restricted_ways = 2 * 2\n    # Subtract the restricted arrangements from the total arrangements\n    ans = total_ways - restricted_ways\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the prices of banana and pear\n    banana, pear = symbols('banana pear')\n\n    # Form equations based on the information given in the question\n    equation1 = Eq(banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)      # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # We are only interested in the cost of 1 banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let's denote the original speed as s (in km/h).\n    # Original time to travel is 8 hours.\n    # Distance is thus speed multiplied by time: d = s * 8\n    # If she wants to arrive an hour earlier, the time will then be 7 hours.\n    # New speed needs to be s + 5 km/h to arrive an hour earlier.\n    # New distance will be the same, but traveled at a higher speed, so new distance formula: d = (s + 5) * 7\n    # Since both distances are the same, we can set the equations equal to each other:\n    # s * 8 = (s + 5) * 7 <=> 8s = 7s + 35 <=> s = 35\n    # We substitute s back into one of the distance formulas to find the distance.\n    speed_original = 35\n    time_original = 8\n    distance = speed_original * time_original\n    \n    return distance\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    perm = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = perm[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    num_bottles = 1000\n    test_tubes = 0\n    while (2 ** test_tubes) < num_bottles:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    chairs_with_10 = 10 - 1  # Since chairs are placed at the ends as well, we have 9 intervals\n    chairs_with_7 = 7 - 1  # After removing 3 chairs, we have 6 intervals\n\n    distance_between_10_chairs = total_distance / chairs_with_10\n    new_total_distance = distance_between_10_chairs * chairs_with_7 \n\n    distance_between_each = new_total_distance / chairs_with_7\n    return distance_between_each\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother gets at least two books,\n    # start with 2 books for each, then distribute the remaining 4 books.\n    for brother1 in range(2, 8):\n        for brother2 in range(2, 8):\n            brother3 = 10 - (brother1 + brother2)\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the four angles of the quadrilateral as A, B, C, and D\n    # We know that A and B are right angles, so A = B = 90 degrees\n    # Let's denote D as 'x' and then C would be '5x'\n    x = symbols('x')\n    \n    # The sum of angles in a quadrilateral is 360 degrees\n    # We have two right angles (A and B), so we have 2*90 degrees\n    # Then we add 'x' for angle D and '5x' for angle C\n    equation = Eq(2*90 + x + 5*x, 360)\n    \n    # Solve the equation for 'x'\n    solution = solve(equation, x)\n    \n    # Now calculate the largest angle, which is '5x'\n    largest_angle = 5 * solution[0]\n    \n    return largest_angle\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # To solve this problem, we can use dynamic programming.\n    # The number of ways to reach step i is equal to the sum of ways to reach step (i-1), (i-2), and (i-3)\n    # However, since we need to avoid the fifth step, the 5th value in our solution array will be 0.\n    \n    # Initialize an array to store the number of ways to reach each step\n    ways_to_climb = [0] * 11  # We need 11 spots since we're considering steps 0 to 10\n    \n    # Base cases:\n    # 0 ways to start below step 1, but we consider step 0 the starting point\n    ways_to_climb[0] = 1 \n    # 1 way to get to the first step (one step)\n    ways_to_climb[1] = 1\n    # 2 ways to get to the second step (one step + one step, or two steps at once)\n    ways_to_climb[2] = 2\n    # 4 ways to get to the third step (1+1+1, 1+2, 2+1, 3)\n    ways_to_climb[3] = 4\n    # No way to get to the fifth step directly as Jimmy needs to avoid it\n    ways_to_climb[5] = 0\n\n    # Loop from steps 4 to 10 (excluding 5)\n    for i in range(4, 11):\n        if i != 5:  # Skip the fifth step\n            # Number of ways to get to step i = sum of ways to get to three previous steps,\n            # except when i is 6 which will not include ways_to_climb[5] as we can't step on the fifth step\n            ways_to_climb[i] = ways_to_climb[i - 1] + ways_to_climb[i - 2] + ways_to_climb[i - 3]\n\n    # The number of ways to reach the 10th step is our answer\n    return ways_to_climb[10]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 // 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')  # Start with an infinitely large number of boxes\n    for small in range(0, 54 // 5 + 1):\n        for medium in range(0, (54 - 5 * small) // 7 + 1):\n            large = (54 - 5 * small - 7 * medium) / 10\n            if large.is_integer():  # Check if it's possible to use a whole number of large boxes\n                total_boxes = small + medium + int(large)\n                min_boxes = min(min_boxes, total_boxes)  # Keep the smallest number of total boxes\n\n    # If min_boxes has not been updated, there's no solution; otherwise, return min_boxes\n    ans = min_boxes if min_boxes != float('inf') else 0\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    # Generate the sequence up to 9, since 10 appears for the first time after all 9s\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    # Since the sequence is already sorted, we can find the median directly\n    n = len(sequence)\n    if n % 2 == 1:\n        median = sequence[n // 2]\n    else: # For even number of elements, median is the average of the two middle values\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    # Given equation is (x + 6) / 3 = 5\n    # Multiply both sides by 3 to get rid of the fraction\n    # x + 6 = 5 * 3\n    x_plus_6 = 5 * 3\n    # Subtract 6 from both sides to find x\n    # x = (5 * 3) - 6\n    x = x_plus_6 - 6\n    return x\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    n = 7007\n    i = 7\n    \n    # Since we are looking for 2-digit multiples of 7, we start with 7 and go up to 99\n    while i <= 99:\n        if n % i == 0 and n // i < 100:\n            # Check if other factor is also a two-digit number\n            factors.append((i, n // i))\n        i += 7  # Skip to the next multiple of 7\n    \n    # There should be only one pair of two-digit multiples of 7 that satisfy the condition\n    if len(factors) == 1:\n        return sum(factors[0])  # Return the sum of the two factors\n    else:\n        return None\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n\n    total_carrots = carrots_per_week * weeks\n\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers_per_mile = 1.60934\n    kilometers = miles * kilometers_per_mile\n    return kilometers\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    # Number of visitors that join the line each minute\n    visitors_per_minute = 10\n    # Number of visitors checked in per minute at one entrance\n    check_in_per_entrance = 25\n    # Number of minutes after which there is no one waiting with one entrance\n    time_with_one_entrance = 16\n\n    # Total number of visitors that have lined up in 16 minutes\n    total_visitors = visitors_per_minute * time_with_one_entrance\n\n    # Number of entrances\n    num_entrances = 2\n\n    # Number of visitors checked in per minute with two entrances\n    check_in_with_two_entrances = check_in_per_entrance * num_entrances\n\n    # Time taken for no one to be waiting in the line with two entrances\n    time_with_two_entrances = total_visitors / check_in_with_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_day = 5\n    slide_night = 3\n    net_distance_per_day = climb_day - slide_night\n    current_distance = 0\n    day = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_night\n        \n    return day\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_frogs, initial_dragonflies = symbols('initial_frogs initial_dragonflies')\n    equation1 = Eq(initial_frogs - initial_dragonflies, 9)\n    equation2 = Eq(initial_frogs - (11 - initial_dragonflies), initial_dragonflies + (11 - initial_frogs))\n    \n    solutions = solve((equation1, equation2), (initial_frogs, initial_dragonflies))\n    \n    return solutions[initial_frogs]\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq((3/4) * muffins + (5/8) * cookies, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 25 == 0:\n            return num\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_numbers = sum(range(1, n + 1))\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    metro_ticket_price = 0.5  # define the price of one metro ticket\n    coffee_price = 1  # define the price of one cup of coffee\n    entry_ticket_price = 10  # define the price of one entry ticket to the game\n\n    # Richard also needs a return metro ticket and entry to the game, so we subtract this from the total amount\n    richard_expenses = (metro_ticket_price * 2) + coffee_price + entry_ticket_price\n    remaining_money = 40 - richard_expenses\n\n    # Each friend needs a return metro ticket, a cup of coffee and an entry ticket\n    friend_expense = (metro_ticket_price * 2) + coffee_price + entry_ticket_price\n\n    # The number of friends Richard can treat is the money he has left divided by the cost for one friend\n    num_friends = remaining_money // friend_expense\n\n    return int(num_friends)\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 0\n    for i in range(40, 49):\n        if i % 2 == 0:\n            ans += i\n        else:\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # A twelve-digit even number is not divisible by 5 means A cannot be 5 or 0\n    # The number is even which means A must be even and can only be 2, 4, 6, or 8\n    # A number is divisible by 9 if the sum of its digits is divisible by 9\n    base_sum = sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) # sum of the given digits\n\n    for possible_A in [2, 4, 6, 8]: # check each even digit\n        if (base_sum + 3 * possible_A) % 9 == 0: # check if the sum of digits is divisible by 9\n            return possible_A\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver to reach the destination be t minutes.\n    # The time taken by the cyclist will be t + 143 minutes.\n    \n    # Given the speed ratio of the driver to cyclist is 13:2,\n    # we know that time ratio is the inverse of the speed ratio.\n    # Therefore, the time ratio of driver to cyclist is 2:13.\n    \n    # We have a system of linear equations:\n    # (1) (driver's time) / (cyclist's time) = 2 / 13\n    # (2) cyclist's time = driver's time + 143\n    \n    # Substituting (2) into (1) we get:\n    # t / (t + 143) = 2 / 13\n    # 13t = 2(t + 143)\n    # 13t = 2t + 286\n    # 11t = 286\n    t = 286 / 11\n    \n    return t\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    num_trains = 4\n    num_cars = 3\n    num_flights = 2\n\n    total_ways = num_trains + num_cars + num_flights\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Statement 1: If this statement is true, then all statements are true, which is a contradiction.\n    # Statement 2: If this statement is true, then it contradicts itself.\n    # Statement 3: If this statement is true, then exactly one of the above statements is true, which is a contradiction.\n    # Statement 4: If this statement is true, then all statements above are true, which is a contradiction.\n    # Statement 5: If this statement is true, then none of the above statements are true. This is the only statement that doesn't contradict itself.\n\n    # Only statement 5 can be correct without creating a contradiction.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n\n    # Let coins be the total number of coins\n    # Before flipping: heads = coins / 4\n    # After flipping 2 more: heads = (coins / 4) + 2\n    # After flipping 2 more coins show heads, the new fraction is 1/3 of the total coins\n    equation = Eq((coins / 4) + 2, coins / 3)\n\n    # Solve the equation for coins\n    solution = solve(equation, coins)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3  # Total number of shows\n    # Number of ways to arrange singing shows\n    num_ways_singing = factorial(total_shows - 3)  # one less comedy show because of the non-consecutive rule\n\n    # Place 3 comedy shows in the 6 possible positions (5+1)\n    # C(6, 3) ways to select the positions out of the 6 slots for the comedy shows\n    num_ways_comedy = factorial(total_shows - 3) // (factorial(3) * factorial((total_shows - 3) - 3))\n    \n    # Multiply both to get the total arrangements\n    ans = num_ways_singing * num_ways_comedy\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n\n    middle_value_index = len(values) // 2\n    \n    return values[middle_value_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original number\n    original_number = symbols('original_number')\n    \n    # Define the equation based on the problem statement\n    equation = Eq((original_number * 5 + 7) / 4, 8)\n    \n    # Solve the equation\n    solutions = solve(equation, original_number)\n    \n    # There should be only one solution\n    return solutions[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Define the recurring pattern length and initialize the sum\n    pattern_length = 9\n    total_sum = 0\n    \n    # The recurring decimals are:\n    # 0.222222222... + 0.030303030... + 0.004040404... + 0.000505050... + 0.000060606...\n    # Each of these can be written as fraction like 2/9, 3/99, 4/999, etc.\n    # The pattern repeats every 9 digits, we can calculate the sum of one pattern\n    one_pattern_sum = 2*(1/9) + 3*(1/99) + 4*(1/999) + 5*(1/9999) + 6*(1/99999)\n\n    # Calculate the sum of the digits within the 9-digit pattern\n    pattern_digit_sum = int(one_pattern_sum * (10**pattern_length-1)) # Scale to get rid of decimal\n\n    # Sum the digits of the pattern_digit_sum, which is an integer now\n    digits = [int(digit) for digit in str(pattern_digit_sum)]\n    sum_of_pattern_digits = sum(digits)\n\n    # Calculate full patterns included in 2100 digits\n    full_patterns = 2100 // pattern_length\n\n    # Calculate the sum of all full patterns\n    full_pattern_sum = full_patterns * sum_of_pattern_digits\n    \n    # Calculate the number of remaining digits after full patterns\n    remaining_digits = 2100 % pattern_length\n    \n    # Calculate the sum of the remaining digits\n    remaining_pattern_sum = sum(digits[:remaining_digits])\n    \n    # The total sum is sum of full patterns and the remaining digits\n    total_sum = full_pattern_sum + remaining_pattern_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # Subtract 1 from the number of people since the arrangement is circular,\n    # so any rotation would be considered the same arrangement.\n    num_people = 6\n    num_seats = 8\n\n    # Circular permutations: (n-1)!\n    num_orders = factorial(num_people - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['4', '5', '7', '9']\n    min_even_number = float('inf')\n\n    for p in permutations(digits):\n        if p[-1] in ['0', '2', '4', '6', '8']:  # the last digit should be even\n            num = int(''.join(p))\n            min_even_number = min(min_even_number, num)\n\n    return min_even_number\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let's denote the original number as x.\n    # According to the statement:\n    # (x / 2) - 9 = 12\n    # To find x, we perform inverse operations.\n    # First, we add 9 to both sides of the equation:\n    # (x / 2) = 12 + 9\n    # Next, we multiply both sides by 2 to get x alone:\n    # x = (12 + 9) * 2\n\n    x = (12 + 9) * 2\n    return x\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    total_quarters = total_dollars * quarters_in_one_dollar\n    return int(total_quarters)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Calculate the total spent\n    total_spent = (10 - 3.88) * 100  # Convert from pounds to pence\n\n    # Calculate the cost of the chocolate bar\n    chocolate_cost = 72\n\n    # Calculate the cost of the balloons\n    balloons_cost = total_spent - chocolate_cost\n\n    # Calculate the number of balloons\n    number_of_balloons = balloons_cost / 20\n\n    return int(number_of_balloons)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45 / 100\n    total_length = 2000\n    ans = percentage * total_length\n    return ans\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let 'e' be the number of steps of the escalator.\n    # Let 's' be the speed of the escalator in steps per second.\n    \n    # When Peter walks at 1 step per second, it takes him 10 seconds (10 steps at 1 step/second).\n    # So, the escalator moves '10s' steps during this time.\n    # The total number of steps Peter covers is his steps plus the escalator steps.\n    # Hence, e = 10 + 10s -- Equation (1)\n    \n    # When Peter walks at 2 steps per second, it takes him 8 seconds (16 steps at 2 step/second).\n    # So, the escalator moves '8s' steps during this time.\n    # The total number of steps Peter covers is his steps plus the escalator steps.\n    # Hence, e = 16 + 8s -- Equation (2)\n    \n    # Now we solve the two equations (1) and (2) for 'e' and 's'.\n    # 10 + 10s = 16 + 8s\n    \n    # Simplifying the equation we get,\n    # 2s = 6\n    # s = 3\n    \n    # Substituting s = 3 in Equation (1)\n    # e = 10 + 10*3\n    # e = 40\n    return 40\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = (students + kayak_capacity - 1) // kayak_capacity\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = 4*3**(1/2)\n    x = symbols('x')\n    equation = Eq(3*a, 3**(1/2) * x**(1/2))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n    \n    # Let the cost of one slice of pizza be x, then the cost of one cupcake is (3/2)x.\n    # He bought 5 cupcakes and 6 slices of pizza, so 5*(3/2)*x + 6*x = money_spent\n    # Solving for x gives us x = money_spent / (15/2 + 6)\n    cost_per_pizza = money_spent / ((15/2) + 6)\n    cost_per_cupcake = (3/2) * cost_per_pizza\n\n    # Now we find out how many cupcakes he can buy with the remaining money.\n    cupcakes_bought = money_left // cost_per_cupcake\n\n    return int(cupcakes_bought)\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15  # Calculate the common difference from the first two terms\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    three_digit_numbers = list(permutations(digits, 3))\n    count = len(three_digit_numbers)\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_papers = 10\n    total_papers = 16\n    cut_into_three = 0\n\n    while original_papers + cut_into_three * 2 < total_papers:\n        cut_into_three += 1\n\n    return cut_into_three\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # According to the question, we have an arithmetic sequence with a common difference of 1 year.\n    # Let the age of the youngest dwarf be x. Then the ages of the younger three are x, x+1, and x+2.\n    # Their sum is given as 42:\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (Age of the youngest)\n\n    # The ages of the oldest three dwarfs will then be x+4, x+5, and x+6.\n    # Sum of their ages:\n    # (x+4) + (x+5) + (x+6)\n    # 3x + 15\n    \n    youngest_age = 13\n    sum_oldest_three = (youngest_age + 4) + (youngest_age + 5) + (youngest_age + 6)\n    return sum_oldest_three\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    for i in range(1, 6):\n        number = int(\"2\" + \"5\" * i)\n        if int(sqrt(number)) == sqrt(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    \n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # get all divisors of 2240\n    divs = divisors(2240)\n    \n    # find the largest divisor which results in a square when 2240 is divided by it\n    for d in reversed(divs):\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of workers initially\n    workers_initial = 6\n    # Number of parts produced initially\n    parts_initial = 120\n    # Time taken initially\n    time_initial = 4\n    \n    # Number of workers later\n    workers_later = 3\n    # Time taken later\n    time_later = 10\n\n    # Calculate the parts produced by one worker in one minute\n    parts_per_worker_per_minute = parts_initial / (workers_initial * time_initial)\n\n    # Calculate the total parts produced by 3 workers in 10 minutes\n    total_parts = parts_per_worker_per_minute * workers_later * time_later\n\n    return int(total_parts)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1 / 4\n\n    total_apples = trees * apples_per_tree\n    non_rotten_apples = total_apples * (1 - rotten_fraction)\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    increase = final_value - initial_value\n    percentage_increase = (increase / initial_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.70\n    swimming_girls = 200\n    non_swimming_boys_percent = 0.40\n    \n    # Let the number of girls be 'g' and boys be 'b'\n    # We know that total pupils = number of girls + number of boys\n    # Hence, g + b = 380... (1)\n    \n    # We also know that 40% of boys cannot swim, which means 60% can swim\n    # Therefore, the number of swimming boys = 0.60 * b\n    \n    # Swimming pupils are the sum of swimming boys and swimming girls\n    # Hence, swimming_girls + 0.60 * b = swimming_pupils... (2)\n    \n    # From (2), we get 200 + 0.60 * b = 0.70 * 380\n    # From which we can calculate 'b'\n    b = (swimming_pupils - swimming_girls) / 0.60\n    \n    # From (1), we can now calculate 'g'\n    g = total_pupils - b\n    \n    return int(g)\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation for the total amount of sugar from both solutions\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    # Original price of the bag with only 20% discount\n    discounted_price = 32\n    # Extra discount given to Henry\n    henry_additional_discount = 4\n    # Calculate the final price paid by Henry\n    final_price = discounted_price - henry_additional_discount\n    # Calculate the price before any discount (let's call it the original price, before the 20% discount)\n    original_price = discounted_price / 0.8\n    # Calculate the total discount in currency\n    total_discount = original_price - final_price\n    # Calculate the total percentage discount\n    total_percentage_discount = (total_discount / original_price) * 100\n    \n    return total_percentage_discount\n \nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def number_of_divisors(n):\n        # Initialize count of divisors\n        count = 0\n        # Iterate from 1 to sqrt(n)\n        for i in range(1, int(n**0.5) + 1):\n            # If i is a divisor of n, increment the count\n            if n % i == 0:\n                count += 1\n                # Check if divisors are equal\n                if n // i != i:\n                    count += 1\n        # return count of divisors - 1 (to exclude the number itself)\n        return count - 1\n\n    ans = number_of_divisors(200)\n    return ans\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j be the mass of the empty jar\n    # Let c be the mass of one chocolate\n    # Based on the given information, we can form two equations:\n    # j + 5c = 185 (1)\n    # j + 17c = 317 (2)\n    \n    # We want to find the mass of the jar with 10 chocolates, which is:\n    # j + 10c (3)\n    \n    # Now we can solve the two equations to find the values of j and c.\n    # Subtracting (1) from (2), we get:\n    # 12c = 317 - 185\n    # 12c = 132\n    c = 132 / 12\n    \n    # Now we can find j using equation (1)\n    # j = 185 - 5c\n    j = 185 - 5 * c\n    \n    # Finally, let's calculate the mass of the jar with 10 chocolates using (3)\n    # j + 10c\n    ans = j + 10 * c\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # The perimeter of the field\n    perimeter = 2 * (144 + 204)\n\n    # Subtract the corners, as they already have a wheat\n    total_wheat_spaces = 116 - 4\n\n    # The distance between every 2 wheat is the perimeter divided by the number of spaces between wheat\n    distance_between_wheat = perimeter / total_wheat_spaces\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_holiday = symbols('total_holiday')\n    equation = Eq(total_holiday / 2 / 2 - 4, 14)\n\n    days = solve(equation, total_holiday)\n\n    return days[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # minutes\n    # The number of cats does not change the time taken to catch a single fish\n    # since each cat is catching its own fish independently.\n    time_for_5_cats_to_catch_5_fish = time_per_cat_per_fish\n\n    return time_for_5_cats_to_catch_5_fish\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Lana’s and Mark's initial amount of sweets\n    lana, mark = symbols('lana mark')\n\n    # Set the equations based on the problem statement\n    equation1 = Eq(lana - lana / 3, mark - 34)  # After giving and eating, they have the same number\n    equation2 = Eq(lana + mark, 674)  # The total number of sweets they initially had\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    # Find the difference between Lana's and Mark's initial sweets\n    difference = solutions[lana] - solutions[mark]\n\n    return difference\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pineapple = symbols('pineapple')\n    watermelon = 5 * pineapple\n    equation = Eq(watermelon - pineapple, 5.6)\n\n    sol = solve(equation, pineapple)\n\n    watermelon_weight = sol[0] * 5\n\n    return watermelon_weight\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total length of both sides minus the corners\n    total_length = (144 * 2) + (204 * 2) - 4\n\n    # Number of intervals between wheat plants\n    # 116 total wheat, 4 in corners, 112 wheat to be distributed along the sides\n    number_of_intervals = 116 - 4\n\n    # The distance between every 2 wheat plants\n    distance = total_length / number_of_intervals\n    \n    return distance\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * (2 / 7)\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = remainder_bracelets * (3 / 5)\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    return more_bracelets_needed\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3/8\n    whole_number = 48\n    ans = fraction * whole_number\n    return ans\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total number of people to interview\n    total_people = 200\n    \n    # Number of people Ellie can interview per week\n    ellie_per_week = 40\n    \n    # Number of weeks Ellie and Gloria work together to finish the work\n    total_weeks_together = 4\n    \n    # Total number of people Ellie can interview in 4 weeks\n    ellie_total = ellie_per_week * total_weeks_together\n    \n    # Since they finish the work together in 4 weeks, the rest must be done by Gloria\n    # Total people interviewed by Gloria when working together\n    gloria_total_together = total_people - ellie_total\n    \n    # The rate at which Gloria can interview people per week\n    gloria_per_week = gloria_total_together / total_weeks_together\n    \n    # Total weeks it would take Gloria to finish interviewing everyone by herself\n    gloria_weeks_alone = total_people / gloria_per_week\n    \n    return gloria_weeks_alone\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    rice_A = 15 * 0.4\n    total_rice = total_weight * 0.28\n    rice_B = total_rice - rice_A\n    percent_rice_B = (rice_B / 60) * 100\n    return percent_rice_B\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 4):\n        if p[2] == '2' and p[0] == '0':\n            ABCDEF = int(''.join(['2', p[1], '0', p[2], p[3], p[4]]))\n            EFABCD = int(''.join([p[3], p[4], '2', p[1], '0', '2']))\n            if 5 * ABCDEF == 6 * EFABCD:\n                FACE = int(''.join([p[2], p[1], p[3], p[0]]))\n                return FACE\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # ml per minute\n    total_minutes = 2 * 60  # 2 hours in minutes\n    total_ml = rate_per_minute * total_minutes  # Total ml in 2 hours\n    total_litres = total_ml / 1000  # Convert ml to litres\n\n    return total_litres\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + pen, 12)\n    equation2 = Eq(book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let the four numbers be a > b > c > d\n    # a + (b + c + d) / 3 = 51 -> 3a + b + c + d = 153\n    # d + (a + b + c) / 3 = 39 -> a + b + c + 3d = 117\n\n    # From the two equations we get:\n    # 2a - 2d = 36 -> a - d = 18\n\n    # Given a > b > c > d and all are positive whole numbers\n    # The smallest gap between each number would maximize 'a'\n    # To maximize the value of 'a', start with the smallest sequence gap\n    # Let's assume the smallest gap is 1, then d = a - 18\n    # To maximize 'a', let's assume b = a - 1 and c = a - 2\n    # Then d must be a - 18\n    # We can then solve for 'a':\n\n    for a in range(51, 0, -1):  # 51 is the sum of largest and average, so we start from there and go downward\n        d = a - 18\n        b = a - 1\n        c = a - 2\n        if a + (b + c + d) / 3 == 51 and d + (a + b + c) / 3 == 39 and a > b and b > c and c > d:\n            return a\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2 * 10 + 5 * 5 + 4 * 0.20\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_for_one_plate = 3\n    total_time = 18\n    num_plates = total_time // time_for_one_plate\n    return num_plates\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let d be the distance to the shopping mall from their starting point\n    # Let t be the time it took for Barbara to reach the shopping mall\n\n    # Barbara's distance = d = Barbara's speed * time\n    # Catherine's distance = d - 60 = Catherine's speed * time\n\n    # Since both start at the same time and Barbara reaches the shopping mall first,\n    # we can equate the time it took for both of them to cover their respective distances.\n\n    # Therefore, Barbara's speed * t = Catherine's speed * t + 60\n\n    # Solving for distance d:\n    d = (60 * 45) / (60 - 45)  # distance = relative_speed * extra_distance\n    return d\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total_money = 200\n    \n    # Equation based on the ratio A:B = 4:3\n    equation1 = Eq(A/B, 4/3)\n    \n    # Equation based on the total amount A + B + C = 200\n    equation2 = Eq(A + B + C, total_money)\n    \n    # Equation based on the information that A has £20 more than C\n    equation3 = Eq(A, C + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    facing_teachers = 0\n    \n    for student_number in range(1, 51):\n        # Turn backwards for multiples of 4 and for multiples of 6\n        if student_number % 4 == 0 or student_number % 6 == 0:\n            continue\n        # If not a multiple of 4 or 6, still facing the teacher\n        facing_teachers += 1\n    \n    return facing_teachers\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Nini's age and Dad's age\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Nini's dad is twenty-five years older than Nini this year\n    equation1 = Eq(dad_age, nini_age + 25)\n\n    # After five years, the age of Nini's dad will be 8 less than two times that of Nini\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * (2/5)\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * (7/9)\n\n    return sold_second_day\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(10, 100):\n        if isprime(i):\n            reversed_i = int(str(i)[::-1])\n            if reversed_i != i and isprime(reversed_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    probability_in_each_bar = 1 / 3\n    probability_not_in_two_bars = probability_in_each_bar\n    return probability_not_in_two_bars\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # If at least one student gets at least 3 apples,\n    # we can first give 3 apples to one student\n    remaining_apples = 29 - 3\n\n    # The rest of the apples can be distributed in such\n    # a way that each student gets at least 1 apple.\n    # Each student getting 1 apple is the minimum number\n    # required to fulfill the conditions, so we distribute\n    # the remaining apples (1 per student) until we have no more apples.\n\n    # The number of students will be the student with 3 apples\n    # plus the students who receive the remaining apples.\n    # This follows the Pigeonhole Principle, where every student\n    # is a pigeonhole and we distribute the remaining 26 apples.\n\n    class_size = 1  # Counting the student who already got 3 apples.\n    class_size += remaining_apples\n\n    return class_size\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    # Create an equation based on the problem statement\n    equation1 = Eq(blue - (2/5) * blue, green - 28)\n    equation2 = Eq(green + blue, 140)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # The portion of marked fish in the second catch is expected to be the same as the\n    # portion of marked fish in the pond. Let x be the total number of fish in the pond.\n\n    # portion of marked fish = number of marked fish / total number of fish\n    # In this case, we can say that 100 marked fish / x total number of fish = 16 second catch marked fish / 100 second catch total fish\n    # Hence, we can set up the equation: 100/x = 16/100\n    # Solving for x gives us the estimate for the total number of fish in the pond.\n\n    # Cross multiply to solve for x.\n    x = (100 * 100) / 16\n\n    return x\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n    # In 4 years' time Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # Calculate cousin's age in 4 years\n    cousin_age_then = solutions[cousin] + 4\n\n    return cousin_age_then\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    nancy_distance = symbols('nancy_distance')\n\n    # nancy_distance + 2m = randy_distance\n    equation = Eq(nancy_distance / 2, (nancy_distance + 10) / 3)\n\n    distance = solve(equation, nancy_distance)\n\n    total_distance = distance[0] + distance[0] / 2 + 10\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    # Elaine's current age\n    elaine_age_now = 6\n    # Mandy's current age\n    mandy_age_now = 35\n\n    # Elaine's age when she will be 12 is after 12 - 6 = 6 years\n    years_after = 12 - elaine_age_now\n\n    # Mandy's age after same number of years will be her current age plus 6\n    mandy_age_then = mandy_age_now + years_after\n\n    return mandy_age_then\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # Ali has 5 marbles less than the average of Bronson’s and Charlie’s\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    # Bronson has twice as many marbles as Ali\n    equation2 = Eq(bronson, 2 * ali)\n    \n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    # Add all the numbers in the first parentheses\n    sum1 = sum(range(10, 21, 2))\n    # Add all the numbers in the second parentheses\n    sum2 = sum(range(9, 20, 2))\n    # Subtract the sum of the second parentheses from the first\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = int(str(i) + '2')\n        new_number = int('2' + str(i))\n        if new_number == original_number // 3:\n            return original_number\n    return None\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    repeating_decimal = \"2014\"\n    non_repeating = \"20\"\n\n    # Convert the non-repeating and repeating parts to whole numbers\n    non_repeating_num = int(non_repeating)\n    repeating_num = int(repeating_decimal)\n\n    # The denominator for the repeating part has the same number of 9s as there are digits in the repeating sequence, \n    # followed by the same number of 0s as there are digits in the non-repeating sequence\n    denominator = int('9' * len(repeating_decimal) + '0' * len(non_repeating))\n\n    # Get the equivalent fraction for the repeating decimal\n    total_value = non_repeating_num * (denominator // 10) + repeating_num\n\n    # Simplify the fraction\n    from math import gcd\n    greatest_common_divisor = gcd(total_value, denominator)\n\n    x = (total_value // greatest_common_divisor) * (9900 // denominator)\n\n    return x\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):  # Even number constraint for the last digit\n                if hundreds + tens + units == 8 and len({hundreds, tens, units}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first - (total_students - failed_second - passed_second_failed_first)\n    \n    return passed_only_first\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n\n    remainder = total_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    while number < 500:\n        number += 5 * 8 * 9\n\n    return number if number < 1000 else None\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = int(f\"{a}{b}\")\n            ba = int(f\"{b}{a}\")\n            product = ab * ba\n            if product % 100 == 0 and product >= 1000:\n                return ab\n    return None\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit will appear in each place (hundreds, tens, units) twice\n    # because we have 3! = 6 permutations and 6 / 3 (places) = 2\n    place_repeats = 2\n\n    # Sum for one place is the sum of the digits times the repeats\n    place_sum = (a + b + c) * place_repeats\n\n    # We can now build the overall sum by considering the place values\n    ans = place_sum * 100 + place_sum * 10 + place_sum\n\n    return ans\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    least_5_digit_palindrome = int(\"10001\")\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    large, small = symbols('large small')\n    \n    equation1 = Eq(large, small * 1.2)\n    equation2 = Eq(large + small, 77)\n    \n    solutions = solve((equation1, equation2), (large, small))\n    \n    return int(solutions[large])\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    # Let x be the number of oranges at first\n    # Let y be the number of apples at first\n    # We have two unknowns and the following two conditions:\n    # 1. x + y = 125 (the total number of oranges and apples)\n    # 2. x - 35 = (y / 2) (after selling half of the apples and 35 oranges)\n    # We need to solve for x.\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 125)\n    equation2 = Eq(x - 35, y / 2)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    number = 1200\n\n    # Count the total number of digits from 1 to 1200\n    for i in range(1, number + 1):\n        total_digits += len(str(i))\n    \n    # Counts from the right\n    current_position_from_left = total_digits - 2010\n\n    # Identify the number and the specific digit at that position\n    digit_count = 0\n    for i in range(1, number + 1):\n        digit_count += len(str(i))\n        if digit_count >= current_position_from_left:\n            # The digit is in the current number i\n            return int(str(i)[current_position_from_left - (digit_count - len(str(i))) - 1])\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    n = 50 // 5\n    sum_multiples = n * (5 + (n * 5)) // 2\n    return sum_multiples\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins as x\n    x = symbols('x')\n    \n    # 1/4 of coins are heads initially\n    initial_heads = x / 4\n    \n    # After flipping 2 coins, 1/3 of coins are heads\n    # Therefore, we set up the equation x/4 + 2 = x/3\n    equation = Eq(initial_heads + 2, x / 3)\n    \n    # Solve for x\n    total_coins = solve(equation, x)[0]\n    \n    return total_coins\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    distance_travelled_by_first_planet = 30 * 5  # speed * time\n    distance_travelled_by_second_planet = 40 * 5  # speed * time\n    total_distance_apart = distance_travelled_by_first_planet + distance_travelled_by_second_planet\n\n    return total_distance_apart\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "from itertools import product\n\ndef solution():\n    digits = '012345'\n    two_digit_numbers = list(product(digits[1:], digits))  # Exclude '0' for the first digit\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, n = symbols('a n')\n    # equations based on the remainders given\n    eq1 = (190 - a) % n\n    eq2 = (137 - (a + 4)) % n\n    eq3 = (101 - (a + 6)) % n\n\n    # find the numbers that satisfy all 3 conditions\n    solutions = solve((eq1, eq2, eq3), (a, n))\n    \n    # getting the value of n\n    n_value = solutions[0][1]\n    \n    # now we find the remainder when 299 is divided by n_value\n    remainder = 299 % n_value\n\n    return remainder\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let's denote the number of cars as c and the number of motorbikes as m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # The total number of vehicles is cars plus motorbikes, which is 140.\n    # The total number of tyres is 4 times the number of cars plus 2 times the number of motorbikes, which is 490.\n    # Thus, we have the following system of equations:\n    # c + m = 140 (1)\n    # 4c + 2m = 490 (2)\n    # We can multiply equation (1) by 2 and subtract it from equation (2) to find the number of cars.\n    \n    c, m = 0, 0\n    # 2(c + m) = 2 * 140 -> 2c + 2m = 280\n    # (4c + 2m) - (2c + 2m) = 490 - 280\n    # 2c = 210\n    # c = 210 / 2\n    c = 210 // 2\n    # As we are looking for the integer number of cars, we can use integer division.\n    \n    return c\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    rounded_number = round(number, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_progress = day_distance - night_distance\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_distance\n        \n    return days\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    subtracted = result - 12\n    original_number = subtracted / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5)*25/100 + (1/4)*2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import isprime\n\ndef solution():\n    max_sum = 0\n    for y in range(2, 200):\n        if isprime(y):\n            x = (200 + y) / (2 + y)\n            if x.is_integer() and isprime(x) and x != y:\n                max_sum = max(max_sum, int(x + y))\n    return max_sum\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    portion = 1/4\n    original_amount = spent / portion\n    return original_amount\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    return 6 * 3 + 7 - 4\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repetitions_2 = 2\n    repetitions_3 = 2\n    # The number 4 and 5 appear once each, so we do not need to account for their repetitions\n\n    ans = factorial(total_digits) // (factorial(repetitions_2) * factorial(repetitions_3))\n    return ans\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    # Total teams\n    teams = 8\n\n    # Each team plays against all the other teams once\n    # so we use the formula for choosing 2 teams out of total teams\n    # which is n*(n-1)/2 for a round-robin tournament\n    rounds = (teams * (teams - 1)) // 2\n\n    return rounds\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Given conditions\n    equation_doc_happy = Eq(doc, happy + 10)\n    equation_happy_dopey = Eq(happy, dopey + 10)\n    equation_sleepy = Eq(sleepy, 80)\n    equation_sum_heights = Eq(doc + sleepy, dopey + sneezy)\n\n    # Since Dopey, Sneezy, Bashful, and Grumpy are the same height, we can use just one variable for all\n    sneezy = dopey\n    bashful = dopey\n    grumpy = dopey\n\n    solutions = solve((equation_doc_happy, equation_happy_dopey, equation_sleepy, equation_sum_heights),\n                      (doc, happy, dopey))\n\n    # Now we can calculate the total height of the seven dwarfs\n    total_height = solutions[doc] + solutions[happy] + 4 * solutions[dopey] + solutions[sleepy]\n\n    return total_height\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 9]\n    permuted_numbers = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    fifth_number = permuted_numbers[4]\n\n    return int(fifth_number)\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n    denom = Fraction(1, 6) + Fraction(1, 5)\n\n    result = (num1 + num2) / denom\n    return result\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate = 1000 / 5  # meters per day\n    days_needed = 2600 / rate\n    return days_needed\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_in_5_hours = 5\n    time_in_3_hours = 3\n\n    speed_per_hour = distance_in_5_hours / time_in_5_hours\n    distance_in_3_hours = speed_per_hour * time_in_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first = 12\n    last = 90\n    # Since the difference between consecutive terms is 1, the parity of the sum is determined by the number of terms\n    num_terms = last - first + 1\n    # if the number of terms is odd, the sum will have the same parity as the first term,\n    # if the number of terms is even, the sum will have opposite parity to the first term.\n    parity_of_sum = (num_terms % 2 == 0) ^ (first % 2 == 0)\n    if parity_of_sum:\n        return \"even\"\n    else:\n        return \"odd\"\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for each person's hat number\n    qiang, rory, sophia = symbols('qiang rory sophia')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(qiang + rory, 22)\n    equation2 = Eq(qiang + sophia, 17)\n    equation3 = Eq(rory + sophia, 11)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n    \n    # Get the largest number among the solutions\n    largest_number = max(solutions[qiang], solutions[rory], solutions[sophia])\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    intervals = 30 - 1\n    \n    # Each interval is 5 meters\n    length_of_each_interval = 5\n    \n    # Total length of the road is the number of intervals times the length of each interval\n    total_length_of_road = intervals * length_of_each_interval\n    \n    return total_length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i + 1, i)\n\n    ans = result\n\n    return ans\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 346):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 20))\n    count = 0\n    for prime in primes:\n        if isprime(prime + 6) or isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division\n    return buses_needed\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Convert minutes to hours\n    time_first_30 = 30 / 60\n    time_second_30 = 30 / 60\n    time_last_30 = 30 / 60\n\n    # Calculate distance travelled in each time interval\n    distance_first_30 = x * time_first_30\n    distance_second_30 = (x - 20) * time_second_30\n    distance_last_30 = (x + 10) * time_last_30\n\n    # The total distance is the sum of distances in each interval\n    equation = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "from math import factorial\n\ndef solution():\n    ways_for_coach = 1  # The coach has only one way to stand (in the middle).\n    positions_for_captain = 2  # The captain can stand on either side of the coach.\n    ways_for_other_players = factorial(5)  # The other five players can be arranged in any order.\n\n    # Apply the multiplication principle\n    total_ways = ways_for_coach * positions_for_captain * ways_for_other_players\n\n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    fish_left_for_three = 25\n    fish_for_six_and_one_short = 1\n\n    for penguins in range(1, 1000):  # fix a reasonable upper range for manual loop breaking\n        if (penguins * 3) + fish_left_for_three == (penguins * 6) - (5 + fish_for_six_and_one_short):\n            return penguins\n        \nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from fractions import Fraction\n    \n    # Fraction of the total prize money Denise got\n    denise_share_singles = Fraction(1, 5)\n    denise_share_doubles = Fraction(1, 15)\n\n    # Total amount Denise got\n    total_denise_got = 360\n\n    # Calculate total prize money\n    total_prize_money = total_denise_got / (denise_share_singles + denise_share_doubles)\n\n    return total_prize_money\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Initial number of students assumed to form a complete square layer.\n    # Start from 1 (1x1 square) and increment by 2 (3x3, 5x5, etc.)\n    side_length = 1\n    total_boys = 0\n    total_girls = 0\n    layer = 0\n\n    while True:\n        if layer % 2 == 0:\n            # Boys occupy the outermost layer\n            total_boys += side_length * 4 - 4 if side_length > 1 else 1\n        else:\n            # Girls occupy the next inner layer\n            total_girls += side_length * 4 - 4\n\n        # If boys exceed girls by 20, break\n        if total_boys - total_girls == 20:\n            break\n        \n        side_length += 2\n        layer += 1\n    \n    total_students = total_boys + total_girls\n    return total_students\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    number = 1\n    while number * (number + 1) // 2 <= 30:\n        sum_terms += number * number\n        number += 1\n\n    remaining_terms = 30 - (number * (number - 1) // 2)\n    sum_terms += remaining_terms * number\n\n    return sum_terms\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n\n    # Cindy needs one more vote than the sum of maximum votes the others could have\n    votes_needed = max(alice_votes, betty_votes) + 1 - cindy_votes\n    \n    # If there are not enough remaining votes to surpass the leading candidate\n    if votes_needed > remaining_votes:\n        return 0  # No more votes needed since she is already guaranteed to win.\n\n    return votes_needed\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3 * chelsia, 4 * (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Calculate Gina's birth year\n    gina_birth_year = 2005 - 50\n    \n    # Calculate James's birth year\n    james_birth_year = 1997 - 20\n    \n    # Calculate Gina's age when James was born by subtracting James's birth year from Gina's birth year\n    gina_age_when_james_born = gina_birth_year - james_birth_year\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    sales = symbols('sales')\n    \n    # Setting up the piecewise commission structure\n    commission = 0.02 * sales if sales <= 25000 else 0.02 * 25000 + 0.05 * (sales - 25000)\n    total_salary = 2500 + commission\n    \n    # Equation for sales based on total salary\n    sales_equation = total_salary - 3300\n    \n    # Solving the equation\n    sales_amount = solve(sales_equation, sales)\n    \n    return sales_amount[0]\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Part 1: 7 divided by -3.33 (repeating 3)\n    part1_numerator = 7\n    part1_denominator = -10/3\n    part1 = part1_numerator / part1_denominator\n\n    # Part 2: cube root of -0.027\n    part2 = (-0.027) ** (1/3)\n\n    # Part 3: 2^3 divided by 4^2\n    part3_numerator = 2 ** 3\n    part3_denominator = 4 ** 2\n    part3 = part3_numerator / part3_denominator\n\n    # Part 4: 0.125 times (1.8 - 1.4)\n    part4_multiplicand = 0.125\n    part4 = part4_multiplicand * (1.8 - (0.2 * 7))\n\n    # Part 5: 0.1 divided by 0.142857 repeating\n    part5_numerator = 0.1\n    part5_denominator = 1/7  # 0.142857 repeating is 1/7\n    part5 = part5_numerator / part5_denominator\n\n    # Part 6: (2 times 0.3)\n    part6 = (2 * 0.3)\n\n    # Combine all parts to form the expression\n    ans = (part1 / part2) + (part3 / part4) - (part5 + part6)\n\n    return ans\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    pages, digits = 0, 0\n    while digits < 1014:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # After buying and giving away marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_six = 6 * 150   # Total height of the six players\n    total_height_four = 4 * (150 - 2)   # Total height of the four players\n\n    total_height_two = total_height_six - total_height_four  # Total height of the other two players\n    average_height_two = total_height_two / 2  # Average height of the other two players\n\n    return average_height_two\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_A_to_B = 2\n    routes_B_to_C = 3\n\n    ans = routes_A_to_B * routes_B_to_C\n\n    return ans\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_needed = total_pieces / pieces_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    last_term = 50 - (30 - 1)  # Subtracting (n-1) because we start counting from 0\n    num_terms = 30\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_seq = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_seq)\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on first attempt\n    p_first = 0.4\n    \n    # Probability of passing on second attempt if the first is failed\n    # P(fail first) * P(pass second) = (1 - P(pass first)) * P(pass second)\n    p_second = (1 - p_first) * 0.5\n    \n    # Probability of passing on third attempt if the first and second are failed\n    # P(fail first) * P(fail second) * P(pass third) \n    # = (1 - P(pass first)) * (1 - P(pass second)) * P(pass third)\n    # Note: We use p_second without the initial probability of failing the first test,\n    # because it already includes the probability of failing the first test.\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n    \n    # The total probability of passing before the fourth attempt is the sum of the probabilities of\n    # passing on the first, second, or third attempt\n    p_pass_before_fourth = p_first + p_second + p_third\n    \n    return p_pass_before_fourth\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    from math import factorial\n    n = factorial(15)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution_age = solve(equation, age)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    day_reduced_climb = 3\n    day_reached_top = 6\n\n    # Calculate the total distance climbed in 5 days\n    total_climbed_in_5_days = daily_climb * (day_reached_top - 1)\n\n    # Calculate the remaining distance climbed on the 6th day\n    remaining_distance_on_6th_day = total_distance - total_climbed_in_5_days\n\n    # Calculate how much the snail slid down during the night\n    nightly_slide = daily_climb - (remaining_distance_on_6th_day - day_reduced_climb)\n\n    return nightly_slide\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    total_students = 0\n    layer = 0\n    while True:\n        # Number of boys in the current outer layer\n        boys = (layer * 2 + 1) ** 2 - (layer * 2 - 1) ** 2 if layer > 0 else 1\n        # Number of girls in the next inner layer\n        girls = ((layer + 1) * 2 + 1) ** 2 - ((layer + 1) * 2 - 1) ** 2 if layer >= 0 else 0\n        # Update total students\n        total_students += boys + girls\n        # If the difference of boys and girls is 44, break\n        if boys - girls == 44:\n            break\n        # Go to the next inner layer\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Strategy: Make the slowest people cross together, mitigate the slowdown with faster rowers returning the boat.\n    # Eddie(1m), Jack(2m), Rose(5m), Mary(10m).\n    # Step 1: Eddie (1m) and Jack (2m) cross - Time: 2 minutes. Eddie returns - Time: 3 minutes.\n    # Step 2: Rose (5m) and Mary (10m) cross - Time: 13 minutes. Jack returns - Time: 15 minutes.\n    # Step 3: Eddie (1m) and Jack (2m) cross again - Time: 17 minutes.\n    total_time = 2 + 1 + 10 + 2 + 2\n    return total_time\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second_student = 0\n    total_apples = 48\n\n    for i in range(1, total_apples - 3):\n        for j in range(i + 1, total_apples - 2):\n            for k in range(j + 1, total_apples - 1):\n                l = total_apples - (i + j + k)\n                if l > k:\n                    max_apples_for_second_student = max(max_apples_for_second_student, j)\n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length be l and the original width be w.\n    # If the length is increased by 12 cm, the new length is l + 12.\n    # The perimeter of the new rectangle is 38 cm.\n    # Perimeter of a rectangle is given by P = 2(l + w).\n    # For the new rectangle with increased length, P_new = 2((l + 12) + w) = 38.\n    # Hence, we can write: 2(l + 12 + w) = 38\n    # Simplifying we get: l + 12 + w = 19\n    # This means the sum of the original length and width is 19 - 12 = 7 cm.\n    # The perimeter of the original rectangle is P_original = 2(l + w) = 2 * 7 = 14 cm.\n    return 14\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 4):\n        ans += (i ** 2 - (i + 1) ** 2) + ((i + 2) ** 2 - (i + 3) ** 2)\n    return ans\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    num_students = 4\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # The first day Jenny eats chocolate, so we will consider the options for the second and third day.\n    # If Jenny eats peaches on the second day, she can only have strawberries on the third day.\n    # If Jenny eats strawberries on the second day, she can only have peaches on the third day.\n    # So for each choice on the second day, there is only one choice on the third day, making 2 different ways in total.\n    return 2\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    total = 8\n    ways = 0\n    for i in range(1, total//2 + 1):\n        ways += 1\n    return ways\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(6)  # (n-1)! because the table rotation means we fix one person and arrange the rest\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Almaz's salary as 'salary'\n    salary = symbols('salary')\n\n    # Almaz spent 5/9 of her salary on the television\n    television_cost = (5/9) * salary\n\n    # Remaining salary after buying the television\n    remaining_salary = salary - television_cost\n\n    # Then, she spent 3/4 of the remainder on a table\n    table_cost = (3/4) * remaining_salary\n\n    # Almaz had $160 left\n    left_money = remaining_salary - table_cost\n\n    # The equation now looks like this: left_money = $160\n    equation = Eq(left_money, 160)\n\n    # We solve for 'salary'\n    full_salary = solve(equation, salary)[0]\n\n    # Now that we have the full salary, we calculate the television cost\n    television_cost_value = (5/9) * full_salary\n\n    return television_cost_value\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earning = 70\n    number_of_working_days = 6\n    total_earnings = average_daily_earning * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n    \n    total_sheets = sheets_per_quire * quires_per_ream * reams\n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's and Emma's ages\n    john, emma = symbols('john emma')\n\n    # In 3 years' time, the sum of John's and Emma's ages will be 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n    \n    # Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_people = symbols('total_people')\n    \n    # 1/4 chose tea\n    tea_people = total_people / 4\n    \n    # 7 people chose coffee\n    coffee_people = 7\n    \n    # 30% chose cola\n    cola_people = total_people * 30 / 100\n    \n    # The rest chose water, represented by 36 degrees on the pie chart\n    # Since a full circle is 360 degrees, the proportion of water choosers is 36/360\n    water_people = total_people * (36 / 360)\n    \n    # The sum of all people who chose each type of drink is equal to total_people\n    equation = Eq(tea_people + coffee_people + cola_people + water_people, total_people)\n    \n    solutions = solve(equation, total_people)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 1 - 2/5\n    num_present = 18\n    total_pupils = num_present / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children, dogs = symbols('children dogs')\n    # Each child has 2 legs, each dog has 4 legs\n    # 3 times as many dogs as children\n    equation1 = Eq(dogs, 3 * children)\n    # Total number of legs\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n    \n    solutions = solve((equation1, equation2), (children, dogs))\n    \n    return solutions[children]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    tom_speed = 48  # Tom's speed in km/h\n    jack_speed = 50  # Jack's speed in km/h\n    jack_delay = 3  # Jack started 3 hours later\n    time_to_meet = 5  # Time after Jack starts when they are 15 km apart\n\n    # Calculate the distance Tom has driven when they are 15 km apart\n    tom_distance = (jack_delay + time_to_meet) * tom_speed\n\n    # Calculate the distance Jack has driven when they are 15 km apart\n    jack_distance = time_to_meet * jack_speed\n\n    # Total distance between A and B\n    distance_ab = tom_distance + jack_distance + 15  # Plus the 15 km still separating them\n\n    return distance_ab\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    # The perimeter of the rectangle is 2*(length + width)\n    perimeter = 2 * (50 + 30)\n    \n    # One tree is already planted at the starting corner\n    # The number of trees needed would be (perimeter // distance between trees)\n    # Since the tree at the starting corner is already counted, we subtract 1\n    num_trees = (perimeter // 2) - 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 3 / 100\n    tax_payment = income * tax_rate\n    remaining_income = income - tax_payment\n    return remaining_income\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    number_of_people = 3\n    sweets_each = total_sweets // number_of_people\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for num in range(10, 10000):  # Limiting the search within a reasonable range\n        num_with_nine_moved = int(str(9) + str(num)[:-1])\n        if num_with_nine_moved == 4 * num:\n            return num\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n    children_count = 0\n\n    for adults_count in range(2, total_charge // adult_price + 1):\n        if (total_charge - adults_count * adult_price) % child_price == 0:\n            children_count = (total_charge - adults_count * adult_price) // child_price\n            break\n\n    return children_count\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    ans = (180 / (0.6 * 100))\n    return ans\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    squash_part = 1\n    water_part = 9\n    total_parts = squash_part + water_part\n    squash_volume_ml = 750  # volume in milliliters\n    \n    total_volume_ml = (squash_volume_ml / squash_part) * total_parts  # total volume in milliliters\n    bottle_volume_ml = 1000  # volume of 1 bottle in milliliters\n    \n    num_bottles = total_volume_ml // bottle_volume_ml\n    \n    return int(num_bottles)\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    last_two_digits = (6**2015 + (2015 * 6) + 2015**6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas' interpretation is incorrect because he equated spending 1/3 on a book and 1/2\n    # of the remainder on a bag to spending 5/6 of the total money, but they are sequential not simultaneous.\n    # Let's solve the problem correctly.\n\n    total_cost = 132\n    # Let x be the total amount of money Li Yan had initially.\n    # She spent 1/3 of it on a book, so she had 2/3x left.\n    # Then she spends 1/2 of the remainder (2/3x) on a bag, that is 1/2 * 2/3x = 1/3x.\n    # So the cost of the book plus bag is (1/3x) + (1/3x) = 2/3x.\n    # Set up the equation: 2/3 * x = 132, now solve for x.\n\n    x = (total_cost * 3) / 2\n    return x\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "from itertools import permutations\n\ndef solution():\n    # B and D are given\n    B = 2\n    D = 0\n    # Generate all permutations for the remaining digits ensuring they are all distinct \n    for perm in permutations([i for i in range(10) if i not in {B, D}], 4):\n        A, C, E, F = perm\n        # Reconstruct the two numbers from their digits\n        ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n        EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n        # Check if the condition is met\n        if 5 * ABCDEF == 6 * EFABCD:\n            # Return the number FACE if the condition is met\n            return F*1000 + A*100 + C*10 + E\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percent = 10\n    discount_amount = original_price * (discount_percent / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    from sympy import divisors\n    from itertools import combinations\n\n    # We know that factors come in pairs for any number, so if there are 8 factors, there are 4 pairs.\n    # We are given the first 5 factors which include 1 and the number itself.\n    # We need to find the last three factors.\n\n    # Since 7 is a prime number and it's one of the factors, the number must be a multiple of 7.\n    # Also, because 4 (2^2) is another factor, our number must have a factor of 2^3 to have 8 as a factor.\n    # Hence the smallest such number is 7 * 2^3.\n\n    factor_candidates = [7 * (2 ** i) for i in range(3, 9)]\n    for candidate in factor_candidates:\n        divs = divisors(candidate)\n        if len(divs) == 8 and all(x in divs for x in [1, 2, 4, 7, 8]):\n            return candidate\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # As Amy is directly behind Jolene, Amy's position from front is Jolene's position plus 1\n    amy_front = 6 + 1\n\n    # Total number of children in the queue can be found by adding Amy's positions from front and back, then subtract 1\n    total_children = amy_front + 8 - 1\n\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n    net_gain_per_period = (jump_up * jumps_per_period) - slide_down\n    periods = 0\n    \n    while (periods * net_gain_per_period) < (height - jump_up):\n        periods += 1\n\n    total_jumps = (periods * jumps_per_period) + 1  # Add 1 for the final jump to reach or exceed the height\n\n    return total_jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of animals initially be x\n    # Then, the initial number of cows is 0.65x and goats is 0.35x\n    x = symbols('x')\n\n    # After adding 240 animals, the total number becomes x + 240\n    # The number of cows becomes 0.65x + 240\n    # Percentage of cows increases by 20%, so it becomes (65% + 20%) 85% of (x + 240)\n    # The number of goats doubles, so it becomes 2 * 0.35x\n    \n    # We have two equations now:\n    # Equation 1: 0.85 * (x + 240) = 0.65x + 240\n    equation1 = Eq(0.85 * (x + 240), 0.65*x + 240)\n    \n    # Equation 2: 2 * 0.35x + (0.65x + 240) = x + 240\n    equation2 = Eq(2 * 0.35*x + (0.65*x + 240), x + 240)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x))\n\n    # Number of goats initially is 0.35x\n    initial_goats = 0.35 * solution[x]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Total sunflowers along the sides, without double counting the corners\n    sunflowers_along_sides = (side_length // distance_apart - 1) * 5\n\n    # Sunflowers on the corners\n    sunflowers_on_corners = 5\n\n    # Total number of sunflowers\n    total_sunflowers = sunflowers_along_sides + sunflowers_on_corners\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300\n\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let's define x as the total number of cookies in the box\n    # James sold 1680 cookies in the first month and kept the rest\n    # In the second month he sold 7/20 more, so he sold 1680 + 7/20 * x\n    # The number of cookies he kept decreases by 3/20, so he kept x - (1680 + 7/20 * x) - (x - 1680) * 3/20\n    # Therefore, (x - 1680) - (x - 1680) * 3/20 = 1680 + 7/20 * x\n    # Moving the terms involving x to one side and constants to the other we get:\n    # (1 - 3/20)(x - 1680) = 1680 + 7/20 * x\n    # 17/20 * x - 17/20 * 1680 = 1680 + 7/20 * x\n    # Combining like terms:\n    # 17/20 * x - 7/20 * x = 1680 + 17/20 * 1680\n    # 10/20 * x = 1680 * (1 + 17/20)\n    # x = 1680 * (20/10) * (1 + 17/20)\n    # Simplify the expression:\n    # x = 1680 * 2 * (37/20)\n    # x = 1680 * 2 * 1.85\n    \n    x = 1680 * 2 * 1.85\n    return int(x)\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_duration = 2\n    # For each round trip, the boat can carry 7 people, but one needs to return with the boat\n    # Therefore, each round trip effectively transports boat_capacity - 1 people\n    # The last trip doesn't require a return, so we add one full boat capacity to account for this\n    total_trips = (adventurers - boat_capacity) // (boat_capacity - 1) + 1\n    # Each trip consists of going to the other side and coming back\n    # The last trip doesn't need a return trip\n    total_time = (total_trips - 1) * 2 * trip_duration + trip_duration\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let 't' be the time Ryan usually takes to drive to London at 45 miles/hour\n    # Let 'd' be the distance from Ryan's starting point to London\n    \n    # We have two scenarios:\n    # 1) d = 45 * t  (Without traffic)\n    # 2) d = 30 * (t + 2) (With traffic)\n    \n    # Since the distance 'd' is the same in both scenarios, we can set the equations equal to each other\n    # 45 * t = 30 * (t + 2)\n    # Now solve for 't'\n    \n    # 45t = 30t + 60\n    # Bring all terms related to 't' on one side\n    # 45t - 30t = 60\n    # 15t = 60\n    # Divide by 15 to find 't'\n    t = 60 / 15\n    \n    # Return the value of 't', which is the usual driving time\n    return t\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for i in range(10):\n        number = int(f\"976{i}3\")\n        if number % 3 == 0:\n            return i\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    ans = sum(range(3, 11)) + sum(range(3, 7))\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    first = 3\n    second = 10\n    for _ in range(3, 1998):\n        next_term = first + second\n        first = second\n        second = next_term\n    return second % 3\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    memo = {}\n\n    def split_number(n, max_val):\n        if n == 0:\n            return 1\n        if (n, max_val) in memo:\n            return memo[(n, max_val)]\n        ways = 0\n        for i in range(1, min(n, max_val) + 1):\n            ways += split_number(n - i, i)\n        memo[(n, max_val)] = ways\n        return ways\n        \n    ans = split_number(5, 5) - 1  # subtract 1 to exclude the number itself as a way\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let 'x' be the number of students\n    x = Symbol('x')\n\n    # Creating equations based on the given information\n    # If each student gets 6 sweets, Mr.Lim will be short of 26 sweets\n    # 6x + 26 = total number of sweets\n    eq1 = 6*x + 26\n\n    # If each student gets 5 sweets, Mr.Lim will be short of 5 sweets\n    # 5x + 5 = total number of sweets\n    eq2 = 5*x + 5\n\n    # Since the total number of sweets is the same in both scenarios,\n    # we can set the equations equal to each other and solve for x\n    students = solve(eq1 - eq2, x)\n\n    # Calculate the total number of sweets using the number of students\n    total_sweets = 6*students[0] + 26\n\n    return total_sweets\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n    equation = Eq(6 * blue + blue, 63)\n\n    solutions = solve(equation, (white, blue))\n    return solutions[white]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo_age, son_age = symbols('leo_age son_age')\n\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n    equation2 = Eq(son_age + (leo_age - son_age), 70)\n\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # The sum of 8 numbers which have a difference of 1 between each neighboring number\n    # means the numbers form an arithmetic sequence with a common difference of 1.\n    # Let's say the first term of the sequence is 'a', then the terms will be:\n    # a, a+1, a+2, a+3, a+4, a+5, a+6, a+7\n    # The sum S of an arithmetic sequence is given by:\n    # S = n/2 * (2a + (n-1)d)\n    # Where n is the number of terms, a is the first term and d is the common difference.\n    # For our case, S = 225, n = 8, d = 1. We need to find 'a'.\n\n    # 225 = 8/2 * (2a + 7*1)\n    # 225 = 4 * (2a + 7)\n    # 225/4 = 2a + 7\n    # (225/4 - 7)/2 = a\n\n    a = (225 / 4 - 7) / 2\n\n    # Check if 'a' is an integer because the number of fruits cannot be a fraction\n    if not a.is_integer():\n        # If 'a' is not an integer, it is not possible to have such a distribution of fruits among the trees\n        return \"It is not possible\"\n    else:\n        # If 'a' is an integer, we have found a valid sequence\n        # a, a+1, ..., a+7 must be the solution\n        return f\"The first tree has {a} fruits\"\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of years into the future (x) when Dad's age is 4 times Heidi's age\n    x = symbols('x')\n    \n    # Equations representing the problem\n    heidi_age = 8 + x\n    dad_age = 50 + x\n    equation = Eq(dad_age, 4 * heidi_age)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # First, calculate the permutations for the 4 singing performances\n    singing_permutations = factorial(4)\n    \n    # There are 5 places where we can insert the 3 dancing performances\n    # We use (4+1) to determine positions between and at the ends of the 4 singing performance\n    # Example: _ S _ S _ S _ S _, S for singing and _ for possible dancing spots\n    spots_for_dancing = 5\n    \n    # Calculate combinations for placing 3 dancing performances in the 5 spots\n    dance_combinations = factorial(spots_for_dancing) // (factorial(3) * factorial(spots_for_dancing - 3))\n    \n    # Calculate total ways by multiplying the permutations of singing performances\n    # with the combinations of possible dancing spots\n    total_ways = singing_permutations * dance_combinations\n    \n    return total_ways\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    original_average = 120\n    new_average = 150\n    original_sum = original_average * 3\n    new_sum = new_average * 4\n    \n    fourth_number = new_sum - original_sum\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    def trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    ans = trailing_zeros(60)\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    import math\n\n    r = 1\n    while not math.sqrt(216 * r).is_integer():\n        r += 1\n\n    return r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3/13) * 52\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_per_day = 8\n    slide_per_night = 3\n    effective_climb = climb_per_day - slide_per_night\n\n    # Determine the total height climbed after the 8th night (before the 9th day)\n    height_after_8th_night = effective_climb * (9 - 1)\n\n    # On the 9th day, the snail climbs out of the well\n    final_climb = climb_per_day\n    total_height = height_after_8th_night + final_climb\n\n    return total_height\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # Using the inclusion-exclusion principle\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n\n    # Teachers who know only French\n    only_french_teachers = french_teachers - both_languages_teachers\n    \n    return only_french_teachers\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor is always 1 greater than the remainder\n    smallest_possible_divisor = remainder + 1\n    # Dividend = (Divisor * Quotient) + Remainder\n    smallest_possible_dividend = (smallest_possible_divisor * quotient) + remainder\n    return smallest_possible_dividend\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4  # the common difference between terms (46 - 50)\n\n    # Find the term that is just less than 0\n    terms_before_negative = 0\n    term = first_term\n    while term > 0:\n        term += difference\n        terms_before_negative += 1\n\n    return terms_before_negative\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of a bag of sweets as \"s\" and the cost of a can of drink as \"d\"\n    s, d = symbols('s d')\n\n    # Rachel's purchase: 3 bags of sweets + 5 cans of drink = £4.90\n    equation1 = Eq(3 * s + 5 * d, 4.9)\n\n    # Rosie's purchase: 1 bag of sweets + 3 cans of drink = £2.70\n    equation2 = Eq(s + 3 * d, 2.7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, d))\n\n    # The solution will give us the cost of one bag of sweets\n    return solutions[s]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways to arrange 6 people in a line\n    total_arrangements = factorial(6)\n\n    # Restriction: Teddy cannot be on the furthest left,\n    # so we find the number of ways Teddy can be the first (furthest left)\n    teddy_first_arrangements = factorial(5)\n\n    # Subtracting the restricted arrangements from the total\n    valid_arrangements = total_arrangements - teddy_first_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pennies = 963\n    fraction = 4 / 9\n    result = total_pennies * fraction\n    return result\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def difference_of_squares(a, b):\n        return (a + b) * (a - b)\n    \n    ans = (difference_of_squares(1000, 990) +\n           difference_of_squares(980, 970) +\n           difference_of_squares(20, 10))\n    \n    return ans\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        digits_sum = sum(int(digit) for digit in str(i))  # Sum the digits of the number\n        if digits_sum % 7 == 0:  # Check if the sum is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Let the first term of the sequence be x\n    # Then the other terms will be (x+1), (x+2), ..., (x+6)\n    # The sum of these seven numbers will then be:\n    # x + (x+1) + (x+2) + ... + (x+6) = 7x + (1+2+...+6) = 280\n    # Simplify the sum of the sequence 1+2+...+6\n    sum_sequence = sum(range(1, 7))\n    # Solve for x:\n    x = (280 - sum_sequence) / 7\n    # The largest number will be (x+6):\n    largest_number = x + 6\n    return int(largest_number)\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return max(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    sum = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            sum -= i\n        else:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    total_sum = sum(terms)\n    return total_sum\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Since 75 is a factor of A and B, both A and B are multiples of 75.\n    # The smallest 3-digit multiple of 75 is 100 and the largest is 975.\n    # A 3-digit number with two equal digits can have the form XYZ where:\n    # X = Y or X = Z or Y = Z\n    \n    highest_sum = 0\n    \n    # Iterate over the possible multiples of 75\n    for A in range(100, 1000, 75):\n        for B in range(A+75, 1000, 75): # B should be greater than A\n            # Convert A and B to string to easily check digits\n            strA = str(A)\n            strB = str(B)\n            \n            # Checking for two equal digits in A\n            if len(set(strA)) in [2, 3] and len(set(strB)) in [2, 3]:\n                common_factors = gcd(A, B)\n                if common_factors == 75:\n                    # Update the highest sum of A and B\n                    highest_sum = max(highest_sum, A+B)\n    \n    return highest_sum\n\n# Include gcd function from the math library\nfrom math import gcd\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    wait = False\n\n    for throw in throws:\n        if wait:\n            position -= throw\n            wait = False\n        elif throw == 6:\n            wait = True\n        else:\n            position += throw\n    return position\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of permutations for placing 5 storybooks (S) with 4 slots of magazines (M) between them\n    # as M-S-M-S-M-S-M-S-M, leaving one magazine to freely place in 5 different positions  \n    placements = factorial(5)  # places to insert final magazine\n    \n    # Calculate the permutations for the 5 magazines and 5 storybooks independently\n    magazines_perm = factorial(5)\n    storybooks_perm = factorial(5)\n\n    # Calculate the total permutations\n    total_permutations = placements * magazines_perm * storybooks_perm\n    \n    return total_permutations\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    amount_given = (james - kate) / 2\n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n\n    # Equation represents the total sum of money both had initially\n    equation1 = Eq(alex + brayden, 756)\n    \n    # Alex gave $65 to Brayden, so Alex has alex-65, Brayden has brayden+65\n    # After giving the money, Alex had three times as much as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for total_gums in range(1, 1000):  # set a reasonable upper limit for the search\n        remaining_after_music = total_gums - 2  # ate 2 during music lesson\n        shared_at_break = remaining_after_music // 3  # shared one third\n        if remaining_after_music % 3 == 0:  # check if it divides perfectly by 3\n            remaining_after_break = remaining_after_music - shared_at_break\n            if remaining_after_break % 4 == 0:  # check if it divides perfectly into 4 equal parts\n                return total_gums\n    return None  # return None if no solution is found, though this should not happen\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # Average of 10 numbers is 10\n    remaining_sum = 9 * 9  # Average of 9 numbers is 9\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_km_per_hour = 3.6\n    time_seconds = 300\n    speed_m_per_second = (speed_km_per_hour * 1000) / (60 * 60)\n    distance_meters = speed_m_per_second * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    def sum_of_cubes(n):\n        sum_of_numbers = (n * (n + 1) // 2)\n        return sum_of_numbers ** 2\n\n    number_of_terms = (21 + 1) // 2\n    ans = sum_of_cubes(number_of_terms)\n    return ans\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the original sum of money\n    total_sum = symbols('total_sum')\n\n    # If the sum is shared among 3 brothers and a sister (4 people), each gets total_sum/4\n    # If the sum is shared among 3 brothers only, each gets total_sum/3\n    # According to the condition, total_sum/3 = total_sum/4 + 20\n    # Solving this equation will give us the original sum of money\n    equation = Eq(total_sum/3, total_sum/4 + 20)\n\n    # Solve the equation for the total_sum\n    solution = solve(equation, total_sum)\n\n    # Return the original sum of money\n    return solution[0]\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    art_fraction = 1/3\n    science_fraction = 4/5\n\n    science_books = (art_books * art_fraction) / science_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n\n    equation1 = Eq(2 * green, red)  # 2 times as many red beads as green beads\n    equation2 = Eq(red, blue + 50)  # blue beads are 50 fewer than red beads\n    equation3 = Eq(red + green + (blue - 112), 350)  # Total of 350 beads after giving away\n\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    initial_blue = solutions[blue] + 112\n\n    return initial_blue\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1 ** 2\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let x be the number of stickers Katelyn has.\n    # Then Jared has 60 more stickers which can be expressed as x+60.\n    # According to the ratio 2:5, we can write it as 2x = 5(x+60).\n    # Solving for x gives us the number of stickers Katelyn has.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 60), 5 * x)\n    \n    stickers_katelyn = solve(equation, x)[0]\n    stickers_jared = stickers_katelyn + 60\n    \n    # Altogether they have stickers_katelyn + stickers_jared stickers.\n    total_stickers = stickers_katelyn + stickers_jared\n    return total_stickers\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Since the average of four of the five numbers is given, we can calculate the total sum of the four numbers\n    sum_4_numbers = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n\n    # To find the sum of all five numbers, we have to find a common sum greater than all four-number sums\n    # Since the fifth number is not included in the sums above, it must be added to the largest sum_4_numbers to calculate the total sum\n    total_sum = max(sum_4_numbers) + max(sum_4_numbers) // 4\n\n    # The largest number can be found by subtracting the smallest sum from the total sum\n    largest_number = total_sum - min(sum_4_numbers)\n\n    return largest_number\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(n, -2) for n in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Finding GCD of the given textbook volumes\n    greatest_common_divisor = gcd(gcd(42, 63), 28)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Total work done by 4 companies in 1 day\n    work_per_day_by_4_companies = 900 / 5\n\n    # Total work done by 1 company in 1 day\n    work_per_day_by_1_company = work_per_day_by_4_companies / 4\n\n    # Days needed for 1 company to build a 2700m expressway\n    days_needed_by_1_company = 2700 / work_per_day_by_1_company\n\n    return days_needed_by_1_company\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work done by Star per hour and n be the work done by Nini per hour\n    s, n = symbols('s n')\n\n    # If Star works for 5 hours and Nini for 20 hours, the job is done\n    equation1 = Eq(5*s + 20*n, 1)\n\n    # If Star works for 20 hours and Nini for 8 hours, the job is done\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solving the two equations to find the values of s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # The time it takes for Nini to finish the job by herself is the reciprocal of her work rate\n    nini_time = 1/solutions[n]\n\n    return nini_time\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # If we have 16 sausages and need to share them among 24 people,\n    # each person should get 16/24 sausages.\n    # Each sausage must be cut into 24/16 = 1.5 parts, theoretically.\n    # But since we can only make whole cuts, we can't cut a sausage into 1.5 parts.\n    # The smallest number of parts each sausage can be cut into that is greater\n    # than or equal to 1.5 is 2 parts per sausage.\n    # Thus, we need at least 1 cut per sausage to achieve this.\n    \n    cuts_per_sausage = 1  # Minimum cuts required per sausage\n    total_sausages = 16  # Total number of sausages\n    \n    total_cuts = cuts_per_sausage * total_sausages\n    \n    return total_cuts\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    return kg * kg_to_lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference_height = 45\n    ben_height = jane_height - difference_height\n    return ben_height\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Assuming the information holds the following:\n    # Manchester is in the UK, which is in the timezone UTC+0\n    # St Petersburg is in Russia, which is in the timezone UTC+3\n    # The plane meets at 12 noon St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    travel_time = timedelta(hours=3)  # time difference between Manchester and St Petersburg\n    manchester_departure_time = st_petersburg_time - travel_time\n    \n    return manchester_departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Time taken by Qiqi to reach school\n    # Weiling arrives 4 minutes earlier, and also starts 2 minutes later.\n    time_qiqi = 4 + 2  # The difference in time they started and Weiling's early arrival\n    \n    # Speed of Qiqi and Weiling\n    speed_qiqi = 60  # in m/min\n    speed_weiling = 72  # in m/min\n    \n    # If Weiling takes t minutes to reach the school,\n    # Qiqi takes (t + time_qiqi) minutes to reach the school.\n    # In t minutes, Weiling covers 72t meters, Qiqi covers 60(t + 6) meters.\n    # Both distances are equal, since they start from the same point and end at the same point.\n\n    # So we get 72t = 60(t + 6).\n    # Solving for t\n    t = (speed_qiqi * time_qiqi) / (speed_weiling - speed_qiqi)\n\n    # Now we calculate the distance using Weiling's speed and time.\n    distance = speed_weiling * t\n    \n    return distance\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    total_people = ben_position + people_between + frank_position_from_back\n\n    if ben_position + people_between < frank_position_from_back:\n        return False\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n    \n    total_ratio = coffee_ratio + milk_ratio\n    total_liters = (coffee_liters / coffee_ratio) * total_ratio\n    \n    return total_liters\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_positive = sum(range(4, 33, 4))\n    sum_negative = sum(range(2, 31, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    ans = 72 / 100 * 140\n    return ans\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663**2) % 9\n    return remainder\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from fractions import Fraction\n\n    yellow = 96\n    red_fraction = Fraction(2, 5)\n    green_fraction = Fraction(1, 3)\n\n    common_denominator = red_fraction.denominator * green_fraction.denominator\n    red_multiplier = common_denominator // red_fraction.denominator\n    green_multiplier = common_denominator // green_fraction.denominator\n\n    red_plus_green = red_fraction * red_multiplier + green_fraction * green_multiplier\n    yellow_multiplier = common_denominator - (red_multiplier + green_multiplier)\n\n    total_marbles = yellow * common_denominator // yellow_multiplier\n\n    return total_marbles\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_val = 0\n    for i in range(1, 2016):\n        sum_val += int('1' * i)\n    return sum_val % 10000\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Since there are only 2 colors, if you pick 3 marbles,\n    # at least 2 of them must be of the same color due to the Pigeonhole Principle.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3  # the sequence is decreasing\n    term_position = 7\n\n    # Using the formula for the n-th term of an arithmetic sequence:\n    # nth_term = first_term + (term_position - 1) * common_difference\n    nth_term = first_term + (term_position - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize the answer\n    ans = None\n    \n    # Loop through possible ages for Mary (since John is one year older, Mary should be sufficiently younger than 2019)\n    for mary in range(1, 45):  # naive upper limit considering age constraints and multiplier effects\n        john = mary + 1\n        # Check if the product of John and Mary's age this year is less than 2019\n        if john * mary < 2019:\n            # Loop through possible ages for the eldest child\n            for eldest in range(1, 20):  # naive upper limit considering age constraints\n                middle = eldest - 2\n                youngest = eldest - 4\n                # Check if the product of the three children's ages this year is less than 2019\n                if eldest * middle * youngest < 2019:\n                    # Check if next year both products are greater than 2020\n                    if (john + 1) * (mary + 1) > 2020 and (eldest + 1) * (middle + 1) * (youngest + 1) > 2020:\n                        # Calculate the sum of all five ages this year\n                        ans = john + mary + eldest + middle + youngest\n                        # Return the found answer\n                        return ans\n    # In case no valid ages are found, return None\n    return ans\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote x as the original sum of money Mrs. Chen had.\n    # According to the problem, we have:\n    # x - 36 = (3/4) * (x - 36)\n    # And we are also told that Mrs. Chen had (1/6) of the original sum left, so:\n    # x - 36 - (3/4) * (x - 36) = (1/6) * x\n    # Now we solve for x.\n\n    # Simplify the left side of the equation by distributing (3/4)\n    # (1/4) * (x - 36) = (1/6) * x\n    # Multiply both sides by 24 (LCM of 4 and 6) to clear the fractions\n    # 6 * (x - 36) = 4 * x\n    # 6x - 216 = 4x\n    # Bring 4x to the left side and 216 to the right side\n    # 6x - 4x = 216\n    # 2x = 216\n    # Now we divide both sides by 2 to solve for x\n    # x = 108\n\n    x = 216 / 2\n    return x\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30 / 60  # 2 minutes and 30 seconds in minutes\n    time_per_hour = 60  # 60 minutes in an hour\n\n    miles_in_1_hour = time_per_hour / time_per_mile_minutes\n\n    return miles_in_1_hour\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a power can be found by looking at the cycles of the unit digits.\n    # For base 13, the cycle is (3, 9, 7, 1) which repeats every 4 powers.\n    # Since 242 % 4 == 2, the unit digit of 13^242 is the same as the unit digit of 13^2, which is 9.\n\n    # For base 17, the cycle is (7, 9, 3, 1) which repeats every 4 powers.\n    # Since 379 % 4 == 3, the unit digit of 17^379 is the same as the unit digit of 17^3, which is 3.\n\n    # For base 4, the cycle is just (4, 6) which repeats every 2 powers.\n    # Since 2012 % 2 == 0, the unit digit of 4^2012 is the same as the unit digit of 4^0, which is 1.\n\n    # Now we can find the unit digit of the entire expression\n    # 13^242 has unit digit 9\n    # 17^379 has unit digit 3\n    # 4^2012 has unit digit 1\n    # Thus, unit digit of 17^379 * 4^2012 is 3 * 1 = 3\n    # Now, we add the unit digit of 13^242 which is 9\n    # 9 + 3 = 12, so the unit digit of the final result is 2\n\n    ans = (9 + 3) % 10 # The unit digit of the sum\n\n    return ans\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = p\n        abc = a * 100 + b * 10 + c\n        bcd = b * 100 + c * 10 + d\n        cde = c * 100 + d * 10 + e\n        def_num = d * 100 + e * 10 + f\n        efg = e * 100 + f * 10 + g\n        fgh = f * 100 + g * 10 + h\n        ghi = g * 100 + h * 10 + i\n        max_sum = max(max_sum, abc + bcd + cde + def_num + efg + fgh + ghi)\n    return max_sum\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    count = 0\n    for a in range(2, 15):      # At least 2 envelopes in A\n        for b in range(4, 15):  # At least 4 envelopes in B\n            for c in range(3, 15):  # At least 3 envelopes in C\n                d = 15 - (a + b + c)  # Remaining envelopes for D\n                if d >= 0:  # Check if the number of envelopes in D is non-negative\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(2, 21, 2))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    number = 8  # Start with the leftmost digit being 8.\n    \n    # Because we start with 8 as the first number and then continue with 80, 81, and so on,\n    # For every power of 10, we have 9 times the previous count (as we add a digit to the list),\n    # Starting with the single-digit '8', then '80' to '89', then '800' to '899', and so on.\n    while count < 2012:\n        # Iterate through the numbers starting with 8 and count them.\n        step = 10 ** len(str(number)[1:])  # The step size depends on the number of zeros after 8.\n        next_threshold = (number // step + 1) * step  # The next threshold when the number of digits increases.\n        \n        if count + (next_threshold - number) / step <= 2012:\n            # If adding all numbers up to the next threshold still doesn't reach 2012,\n            # Jump to the next threshold and update the count accordingly.\n            count += (next_threshold - number) // step\n            number = next_threshold\n        else:\n            # If the next threshold exceeds 2012, find the exact number that corresponds to the 2012th position.\n            number += (2012 - count) * step\n            break  # We have found the 2012th number, so we can exit the loop.\n    \n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Since we have an arithmetic sequence with a difference of 1 \n    # and we know the sum of the sequence, we can express it as follows:\n    \n    # Let the middle term of this arithmetic sequence be 'm' (the third student)\n    # Then the terms can be expressed as (m-2), (m-1), m, (m+1), (m+2)\n    # The sum of these five terms, which are consecutive natural numbers, is 160:\n    # (m-2) + (m-1) + m + (m+1) + (m+2) = 160\n    # 5 * m = 160\n    # m = 160 / 5\n    # m = 32\n    \n    # The student with the most balls will be the last term, which is (m+2):\n    # (32 + 2) = 34\n    return 32 + 2\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    # Two watermelons and three honeydews cost $48\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    # Each honeydew costs twice as much as each watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n    \n    # Equation representing the tax calculation\n    tax_equation = Eq(0.15 * 20000 + 0.20 * (income - 20000), 7000)\n    \n    # Solving for income\n    solution = solve(tax_equation, income)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Fraction 1/13 is a recurring decimal\n    recurring_cycle = \"076923\"  # The recurring cycle for the fraction 1/13\n\n    # Find the position in the recurring cycle\n    # The 0 before the decimal is not included in the cycle count, so subtract 1 from position\n    position_in_cycle = (2022 - 1) % len(recurring_cycle)\n\n    # Get the digit at that position\n    digit = recurring_cycle[position_in_cycle]\n\n    return int(digit)\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor (GCD) of the three rope lengths\n    gcd_rope1_rope2 = gcd(rope1, rope2)\n    gcd_all = gcd(gcd_rope1_rope2, rope3)\n\n    return gcd_all\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Since a chicken has 2 legs and a rabbit has 4,\n    # Let x be the number of chickens and (total_animals - x) be the number of rabbits.\n    # 2x + 4(total_animals - x) = total_legs\n    # Simplify to find the number of chickens (x).\n    x = (4 * total_animals - total_legs) / 2\n    return int(x)\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A - 290, B / 3)\n    equation2 = Eq(B, A)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A] + solutions[B]\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_first_5_days = 720\n    total_sets_needed = 3600\n    days_for_first_sets = 5\n\n    rate_per_day = sets_made_first_5_days / days_for_first_sets\n    total_days_needed = total_sets_needed / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    num = 36\n    factors = set()\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors)\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    \n    # Given \"3 of the 5 students who went home were boys\"\n    boys_went_home = 3\n    total_went_home = 5\n    \n    # Since 3 boys went home, the remaining boys either had school or packed lunch\n    boys_school_or_packed_lunch = boys - boys_went_home\n    \n    # Given \"7 girls had a school lunch\", and since there are 30-17=13 girls\n    girls = total_students - boys\n    girls_packed_or_home = girls - girls_school_lunch  # Girls who didn't have school lunch\n    \n    # So the students who had packed lunch are all the boys except those who went home plus the girls who didn't have school lunch\n    # subtract the boys who we know had a packed lunch\n    students_packed_lunch = boys_school_or_packed_lunch + girls_packed_or_home - boys_packed_lunch\n    \n    # Since these include those who went home and we only want the ones with a packed lunch, we subtract those too\n    students_packed_lunch -= (total_went_home - boys_went_home)\n    \n    return students_packed_lunch\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 12 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x + 1) - 5*(x + 1) - 28, 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # train speed in m/s\n    time_seconds = 19  # passing time in seconds\n\n    # length of the train = speed * time\n    length_of_train = speed * time_seconds\n\n    return length_of_train\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n\n    total_dark_chocolate = 20\n    total_milk_chocolate = 20\n    total_strawberry_chocolate = 20\n\n    total_cost = (total_dark_chocolate * dark_chocolate_price +\n                  total_milk_chocolate * milk_chocolate_price +\n                  total_strawberry_chocolate * strawberry_chocolate_price)\n\n    total_pieces = (total_dark_chocolate + total_milk_chocolate + total_strawberry_chocolate)\n\n    average_cost = total_cost / total_pieces\n\n    return average_cost\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    tricycles = 6\n    total_wheels = wheels_per_tricycle * tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18  # Number of pears\n    total_strawberries = 30  # Number of strawberries\n    total_chocolates = 18  # Number of boxes of chocolates\n    friends_count = 6\n\n    # Calculate the number of fruits each friend gets\n    fruits_per_friend = (total_fruits + total_strawberries + total_chocolates) // friends_count\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    group_of_books = 3\n    free_books = 1\n    desired_books = 5\n\n    sets_of_books = desired_books // (group_of_books + free_books)\n    individual_books = desired_books % (group_of_books + free_books)\n\n    total_price = (sets_of_books * group_of_books * book_price) + (individual_books * book_price)\n\n    return total_price\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of people be p\n    # Let the number of women be w, men m, and children c\n    p, w, m, c = symbols('p w m c')\n\n    # Equations based on the problem statement\n    equation1 = Eq(w, 2*p/5)\n    equation2 = Eq(m, 3*c)\n    equation3 = Eq(w, c + 190)\n    \n    # Total number of people is sum of women, men, and children\n    equation4 = Eq(p, w + m + c)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (p, w, m, c))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n    \n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n    \n    solution = solve(equation, sam_number)\n\n    return solution[sam_number]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression = -154  # Base of Turpan Depression below sea level\n    mount_fuji = 3776         # Tip of Mount Fuji above sea level\n\n    distance = abs(turpan_depression) + abs(mount_fuji)  # Total distance between the two points\n\n    return distance\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let the total work be the capacity of one full barrel of orange juice (W)\n    # Let the man's work rate per day be M and his wife's work rate per day be Wf\n\n    # The man can finish the barrel alone in 15 days, so M = W / 15\n    # Together they can finish the barrel in 12 days, so M + Wf = W / 12\n\n    # From the two equations above, we can get Wf (the wife's work rate)\n    # First express W in terms of M: W = 15 * M\n    # Substitute W into the second equation: M + Wf = (15 * M) / 12\n    # This simplifies to: Wf = (15 * M) / 12 - M\n\n    # Simplify the above expression for Wf: Wf = M * (15/12 - 1) = M * (3/12) = M * (1/4)\n\n    # Since Wf = W / Dw, where Dw is the number of days the wife would take on her own\n    # We have W / Dw = M / 4, where W = 15 * M\n\n    # Now we solve for Dw: Dw = 4 * W / M = 4 * (15 * M) / M = 4 * 15 = 60\n\n    # The wife will take 60 days to finish drinking the same barrel on her own\n    return 60\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils  # Total pencils by average\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n\n    # Let the number of boys be x and girls be (40 - x).\n    # According to the question,\n    # boys_pencils_avg * x + girls_pencils_avg * (40 - x) = total_pencils\n    # Solving for x:\n    x = (total_pencils - girls_pencils_avg * total_pupils) / (boys_pencils_avg - girls_pencils_avg)\n\n    return int(x)\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        return 0\n    else:\n        return 4 - remainder\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    last_two_digits_sum = 0\n    for i in range(1, 51):\n        num = int('1' * i)\n        last_two_digits_sum += num % 100\n    return last_two_digits_sum % 100\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both_competitions = 20\n    \n    total_students = coding_only + math_only + both_competitions\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    divisor_without_decimal = 211\n    incorrect_result_decrement = 98.01\n    \n    # Since the true result is less by 98.01 when multiplied by 211, the quotient is 98.01 / divisor_without_decimal\n    true_result = incorrect_result_decrement / divisor_without_decimal\n\n    return true_result\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    cost_apple, cost_banana = symbols('cost_apple cost_banana')\n\n    # Define the equations based on the problem\n    equation1 = Eq(6 * cost_apple + 7 * cost_banana, 8 * cost_apple + 4 * cost_banana)\n    equation2 = Eq(6 * cost_apple + 7 * cost_banana, 8 * cost_apple + 4 * cost_banana)\n\n    # Solve the equations for the costs of apples and bananas\n    solutions = solve((equation1, equation2), (cost_apple, cost_banana))\n\n    # Equation for the total cost if Einstein bought only bananas\n    cost_only_bananas = 8 * cost_apple\n\n    # Calculate the number of bananas he could afford\n    number_of_bananas = cost_only_bananas / solutions[cost_banana]\n\n    return int(number_of_bananas)\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    # There must be at least 2 envelopes in A, 4 in B and 3 in C, meaning 9 envelopes are already placed.\n    # So we have 15 - 9 = 6 envelopes left to distribute in any of the 4 mailboxes.\n    envelopes_left = 15 - (2 + 4 + 3)\n    mailboxes = 4\n\n    # Use stars and bars method: we are distributing 'envelopes_left' envelopes into 'mailboxes' mailboxes.\n    # The number of ways to distribute n indistinguishable items into k distinguishable bins is (n+k-1) choose (k-1).\n    from math import comb\n    ways = comb(envelopes_left + mailboxes - 1, mailboxes - 1)\n    return ways\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining = 15\n    half_remaining_plus_four = remaining * 2 + 4\n    total_minus_five = half_remaining_plus_four * 2 - 5\n    initial_amount = total_minus_five\n\n    return initial_amount\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the money John and Choon Mui had originally as 'x'.\n    x = symbols('x')\n    \n    # Equation representing the scenario:\n    # Leftover money of John: x - 30\n    # Leftover money of Choon Mui: x - 150\n    # John's leftover is four times of Choon Mui's leftover\n    equation = Eq(x - 30, 4 * (x - 150))\n    \n    # Solving for x\n    solution = solve(equation, x)\n    \n    # John's leftover after spending $30\n    john_leftover = solution[0] - 30\n    \n    return john_leftover\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60  # 15 minutes converted to hours\n    distance_miles = speed_mph * time_hours\n    conversion_factor = 1.609344  # 1 mile is approximately 1.609344 kilometers\n    distance_km = distance_miles * conversion_factor\n\n    return distance_km\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    f, m = symbols('f m')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(m, f + 450)                       # m = f + 450\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)        # 1.15f + 0.82m = 1354\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    increase_percentage = 10 / 100\n    increased_amount = initial_amount + (initial_amount * increase_percentage)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # Actual length of the yacht in meters.\n    scale_ratio = 1 / 20  # Scale ratio (model to actual).\n    model_length_m = actual_length_m * scale_ratio  # Length of the model in meters.\n    model_length_cm = model_length_m * 100  # Convert meters to centimeters.\n\n    return model_length_cm\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    \n    return likes_neither\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # This problem is an example of a derangement, where no element appears in its original position.\n    # The formula for the number of derangements of n elements is !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    n = 4  # There are 4 people A, B, C, D\n\n    # Calculating the derangement of 4 (also known as !4 or subfactorial 4)\n    derangement = factorial(n)\n    for i in range(n + 1):\n        derangement += (-1)**i / factorial(i)\n\n    return int(derangement)\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_distance_per_day = day_climb - night_slide\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for number in range(2, 100):\n        if number % 7 == 2 and number % 13 == 2:\n            return number\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_earnings = hourly_rate * 8 * 5\n    \n    if total_earnings < 700:\n        shortfall = 700 - total_earnings\n    else:\n        shortfall = 0\n    \n    return shortfall\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n\n    arjun_cycle = 14  # Arjun's cycle in days (2 weeks)\n    yahya_cycle = 10  # Yahya's cycle in days\n\n    ans = lcm(arjun_cycle, yahya_cycle)\n    \n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # A Number Puzzle where each line adds up to the next prime number after 40\n    # Since the last prime number before 40 is 37, we add 3 to get the next prime number = 40\n    # Thus, A is the difference between C and B or B+C=40, A = 40 - C (or B)\n\n    # Define prime numbers after 40: 41, 43, 47, ...\n    primes = [41, 43, 47]\n\n    # Since B and C are on the leading diagonal of the puzzle and add up to the same\n    # prime number (40 for the purpose of this puzzle), they must be equal\n    # Therefore A, B, and C are all the same number.\n    # A = C and B = C and A + B = 40 thus A = B = C = 20\n    A = primes[0] // 2\n\n    return A\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    time1 = 280 / 7\n    time2 = 400 / 5\n    time3 = (800 - (280 + 400)) / 8\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n\n    num_trees = (highway_length - tree_spacing) // tree_spacing\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    money_paid_back = 50\n\n    # Loss = Cost of shoes + Money Paid Back (fake note)\n    total_loss = cost_of_shoes + money_paid_back\n\n    return total_loss\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n\n    # A number is divisible by 5 if its last digit is either 0 or 5.\n    # Since we need a four-digit number, the last digit must be 0 or 5. But to\n    # maximize, we only consider 0 here because 5 would make it a three-digit number.\n    last_digit = 0\n\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    for middle_digit in range(10):\n        if (2 + middle_digit + 9 + last_digit) % 3 == 0:\n            sum_of_numbers += int(f\"2{middle_digit}9{last_digit}\")\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5/7) * 112\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # In the worst case scenario, you would have to pick all the blue balls before getting a white ball.\n    # Since there are 6 blue balls, after picking 6, the next ball you pick has to be white.\n    num_blue_balls = 6\n    return num_blue_balls + 1  # Add one for the guaranteed white ball pick\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n    \n    # Treat A, B, and C as a single block, so we have 8 objects to permute (the block and the other 7 students).\n    block_permutations = factorial(8)\n\n    # Permute A, B, and C within the block.\n    abc_permutations = factorial(3)\n\n    # Total arrangements are the product of permutations of the block and permutations within the block.\n    total_arrangements = block_permutations * abc_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # The number formed by concatenating numbers from 1 to 30 is ascending.\n    # Removing 46 digits to get the smallest number, we should remove digits from the left.\n    # Since 1 to 9 are single digits, we will start by removing 9 of them => 46 - 9 = 37 digits left to remove\n    # 10 to 30 are two digits each, so removing 37 digits will be removing 18 full numbers and one digit from 19th number\n    # So we're left with: 191011...2930\n    # We removed a '1' from '19', so the smallest number we can get starts with '9'\n    # Build the result number from the remaining digits\n    smallest_number = '9' + ''.join(str(i) for i in range(20, 31))\n    return int(smallest_number)\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    length_of_each_ruler = 20  # cm\n    overlap_length = 3  # cm\n    number_of_rulers = 3\n\n    total_length = (number_of_rulers * length_of_each_ruler) - (overlap_length * (number_of_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james_marbles = 24\n    linda_marbles = james_marbles / 2\n    ben_marbles = linda_marbles / 4\n\n    total_marbles = james_marbles + linda_marbles + ben_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000\n    difference = 222\n    ans = number - difference\n    return ans\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time spent jogging: 1 hour (from 6:30 to 7:30)\n    # Time spent walking: 2 hours (from 7:30 to 9:30)\n    \n    # Speed while jogging: 6 mph\n    # Speed while walking: 5 mph\n    \n    distance_while_jogging = 6 * 1  # Speed * Time\n    distance_while_walking = 5 * 2  # Speed * Time\n    \n    total_distance = distance_while_jogging + distance_while_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n    while total_used_cups >= 7:\n        # Create new cups from the used ones\n        made_now = total_used_cups // 7\n        new_cups += made_now\n\n        # Use up the used cups and recycle the new ones\n        total_used_cups = total_used_cups - made_now * 7 + made_now\n    \n    return new_cups\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages = total_pages / total_days\n    return average_pages\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing = 15  # Spacing between each cauliflower in centimeters\n    start_offset = 20  # Distance from start of plot to first cauliflower in centimeters\n    cauliflower_width = 45  # Width of each cauliflower in centimeters\n\n    # Total space each cauliflower occupies including the space on either side\n    total_space_per_cauliflower = cauliflower_spacing + cauliflower_width\n\n    # The effective length of the plot taking into account the start offset\n    effective_plot_length = plot_length_cm - start_offset\n    \n    # Number of cauliflowers that can be planted is the integer division of the\n    # effective plot length by the total space each cauliflower occupies\n    num_cauliflowers = effective_plot_length // total_space_per_cauliflower\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Calculate GCD of the three classes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # in meters per second\n    distance = 1.5 * 10**3  # converting kilometers to meters\n    time = distance / speed_of_sound  # time = distance / speed\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(72)\n    return len(factors)\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton_members, bowling_members = symbols('badminton_members bowling_members')\n\n    # Equations based on the given information\n    equation1 = Eq(badminton_members, 3 * bowling_members)\n    equation2 = Eq(badminton_members - 36, bowling_members - 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (badminton_members, bowling_members))\n\n    # Number of members each club had at the end\n    badminton_end_members = solutions[badminton_members] - 36\n    bowling_end_members = solutions[bowling_members] - 4\n\n    return badminton_end_members, bowling_end_members\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n    return num1 - num2\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien.\n    equation1 = Eq(wendy, 2*vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago.\n    equation2 = Eq(vivien - 10, (wendy - 10)/4)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time.\n    wendy_future_age = solutions[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    n = 999\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, n + 1):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1 / i for i in range(10, 20))\n    return int(sum_of_fractions)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 3\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Given\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # The number of cards\n    num_cards = total_value // average_value\n\n    # If the difference between the largest and smallest value is 6,\n    # and the smallest value is an odd number, then the cards must be in consecutive odd number order.\n    # Since there are 4 cards, and the difference between each consecutive odd number is 2,\n    # the smallest and largest numbers would be represented as:\n    # smallest, smallest + 2, smallest + 4, smallest + 6\n    \n    # However, the average value is not the average of smallest and largest,\n    # because it is not evenly distributed due to increment by 2 (odd numbers only).\n    # To find the set of numbers which their average is 126,\n    # we will use the nature of consecutive numbers and the fact that\n    # the middle two numbers' average will be the average of the set.\n    # Since the average of the four numbers is 126, we can reason that the two middle numbers are 125 and 127.\n\n    # Therefore the four numbers are 123, 125, 127, 129\n    smallest_number = 123\n\n    return smallest_number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds of the rabbit and turtle\n    speed_rabbit = 330\n    speed_turtle = 30\n\n    # Time when the rabbit starts sleeping (in minutes)\n    sleep_start = 10\n\n    # The rabbit sleeps for 215 minutes\n    sleep_duration = 215\n    \n    # Calculate distance covered by rabbit before sleeping\n    distance_before_sleep = speed_rabbit * sleep_start\n\n    # Calculate time taken by the turtle to cover the race distance\n    time_for_turtle = 6990 / speed_turtle\n    \n    # Calculate the time when the rabbit wakes up\n    wakeup_time = sleep_start + sleep_duration\n    \n    # Calculate the remaining distance for the rabbit to cover after waking up\n    remaining_distance_rabbit = 6990 - distance_before_sleep\n    \n    # Calculate the time taken by the rabbit to cover the remaining distance\n    time_for_rabbit_remaining = remaining_distance_rabbit / speed_rabbit\n    \n    # Total time taken by the rabbit to finish the race\n    total_time_rabbit = wakeup_time + time_for_rabbit_remaining\n    \n    # Check who reached the finish line first\n    if total_time_rabbit < time_for_turtle:\n        winner = \"rabbit\"\n        # Calculate the distance turtle covered when the rabbit finished\n        distance_turtle_covered = time_for_rabbit_remaining * speed_turtle\n        # Calculate the distance between them when the rabbit finished\n        distance_between = 6990 - distance_turtle_covered\n    else:\n        winner = \"turtle\"\n        # Calculate the time at which the turtle finished\n        time_when_turtle_finished = 6990 / speed_turtle\n        # Calculate the distance rabbit covered when the turtle finished\n        distance_rabbit_covered = (time_when_turtle_finished - sleep_start - sleep_duration) * speed_rabbit\n        # Calculate the distance between them when the turtle finished\n        distance_between = 6990 - distance_rabbit_covered\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    # Use the Inclusion-Exclusion Principle\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of girls and boys\n    girls, boys = symbols('girls boys')\n    \n    # Given ratios\n    girls_swim = 31 / 80  # girls who can swim\n    girls_cannot_swim = 49 / 80  # girls who cannot swim\n\n    boys_swim = symbols('boys_swim')\n    boys_cannot_swim = symbols('boys_cannot_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim * girls + boys_swim, boys_swim + 120)  # 120 fewer boys can swim than cannot\n    equation3 = Eq(girls + boys, 1690)  # The total number of pupils is 1690\n    equation4 = Eq(boys_cannot_swim, boys_swim + 120)  # The number of boys who can swim is 120 less than those who cannot\n    equation5 = Eq(girls_swim * girls + boys_swim + girls_cannot_swim * girls + boys_cannot_swim, 1690)  # Total pupils is sum of swimmers and non-swimmers\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (girls, boys, boys_swim, boys_cannot_swim))\n\n    # Number of pupils who can't swim\n    not_swim = girls_cannot_swim * solutions[girls] + solutions[boys_cannot_swim]\n\n    return int(not_swim)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(7)\n    bad_permutations = factorial(3) * factorial(5)\n\n    ans = total_permutations - bad_permutations\n    return ans\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 0.10  # 10% increase\n    # We calculate the initial amount before the increases over two years.\n    initial_amount = final_amount / ((1 + increase_rate) ** 2)\n    return initial_amount\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10 \n    fourth_term = 25 \n    total_rows = 25 \n    difference = (fourth_term - first_term) // 3 \n    last_term = first_term + (total_rows - 1) * difference \n    total_athletes = (first_term + last_term) * total_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 5 == 0:\n            count += 1\n            n //= 5\n        return count\n\n    zeros = 0\n    for i in range(1, 790):\n        zeros += count_trailing_zeros(i)\n\n    return zeros\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n    sum_seq = (num_terms * (first_term + last_term)) / 2\n    return int(sum_seq)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    # If each school had exactly 3 participants, that would be the maximum number\n    # of schools attending without any school having 4 or more participants.\n    # Using the Pigeonhole Principle, we divide the total number of participants\n    # by 3 and then add 1 to account for at least one school having 4 participants.\n    total_participants = 100\n    max_participants_per_school = 3  # to guarantee at least one school with 4\n\n    # The number of schools is the total number of participants divided by the\n    # maximum number of participants that can be in a school to ensure one has at least 4\n    max_schools = (total_participants + max_participants_per_school - 1) // max_participants_per_school\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Average score of A * number of students in A + Average score of B * x = \n    # Total score of A and B combined\n    \n    # (Average score of A * number of students in A + Average score of B * x) / (number of students in A + x) = \n    # Average score of both teams combined\n    \n    # Plugging the given values into the equation\n    # (76 * 20 + 67 * x) / (20 + x) = 70\n    \n    # Solve for x:\n    # 1520 + 67x = 70 * (20 + x)\n    # 1520 + 67x = 1400 + 70x\n    # 3x = 120\n    # x = 40\n    \n    # Number of students in Team B\n    x = 40\n    \n    return x\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 3)\n    products = []\n\n    for p in perms:\n        number_1 = p[0] * 100 + p[1] * 10 + p[2]\n        for q in permutations(set(digits) - set(p), 3):\n            number_2 = q[0] * 100 + q[1] * 10 + q[2]\n            products.append(number_1 * number_2)\n\n    return min(products)\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25 - 1  # Since Sam is at the 1st position\n    max_dice_value = 6  # Maximum value on a regular die\n    min_rolls = min_steps // max_dice_value  # Minimum rolls needed\n    \n    # Check if there's a need for an additional roll if we have a remainder\n    if min_steps % max_dice_value != 0:\n        min_rolls += 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    # Initialize the minimum and maximum product to None\n    min_product, max_product = None, None\n    \n    # Generate all permutations of the numbers 1 through 9 (since A-G are different and from 1-9)\n    for perm in permutations(range(1, 10), 7):\n        # Assign digits to A, B, C, D, E, F, G\n        A, B, C, D, E, F, G = perm\n        # Construct the 4-digit and 3-digit numbers\n        ABCD = A * 1000 + B * 100 + C * 10 + D\n        EFG = E * 100 + F * 10 + G\n        # Check if the sum of the two numbers is 1993\n        if ABCD + EFG == 1993:\n            # Calculate the product\n            product = ABCD * EFG\n            # Set max_product and min_product accordingly\n            if max_product is None or product > max_product:\n                max_product = product\n            if min_product is None or product < min_product:\n                min_product = product\n\n    # Calculate the difference between the largest and smallest product\n    ans = max_product - min_product\n    return ans\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 30))\n    return max(primes)\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of -100.\n    # To find the number of terms, we use the formula for the nth term: a_n = a_1 + (n - 1)d\n    # Where a_1 is the first term (2019), d is the common difference (-100), and a_n is the nth term.\n    # We solve for n when a_n = 19 (the last term in the sequence).\n    \n    a_1 = 2019\n    a_n = 19\n    d = -100\n    \n    # (a_n - a_1) / d = (n - 1)\n    # n = ((a_n - a_1) / d) + 1\n    n = int(((a_n - a_1) / d) + 1)\n\n    # Now that we have n, we can use the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (a_1 + a_n)\n    S_n = (n/2) * (a_1 + a_n)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    progress_per_hour = 40 - 10\n    final_progress_hour = 40\n    goal_depth = 220\n    hours = 0\n\n    while goal_depth > 0:\n        hours += 1\n        goal_depth -= final_progress_hour if goal_depth <= final_progress_hour else progress_per_hour\n\n    return hours\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n    \n    total_amount_spent = cabbage_price * cabbages_bought\n    lettuce_price = total_amount_spent / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_plants = 11\n    removed_plants = 8\n    remaining_plants = initial_plants - removed_plants\n    \n    initial_intervals = initial_plants - 1\n    new_intervals = remaining_plants - 1\n    \n    initial_spacing = total_distance / initial_intervals\n    new_spacing = initial_spacing * (initial_intervals / new_intervals)\n    \n    return new_spacing\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    remaining_typists = original_typists - sick_typists\n    original_words = 6000\n    target_words = 9000\n    original_time_minutes = 20\n\n    words_per_minute_per_typist = original_words / (original_typists * original_time_minutes)\n\n    total_time_needed = target_words / (words_per_minute_per_typist * remaining_typists)\n    \n    return total_time_needed\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes\n    end_time = (14 * 60) + 5     # Convert end time to minutes\n    duration = end_time - start_time  # Calculate the duration of the call\n    cost_per_minute = 14  # Cost per minute to ring Paris\n\n    total_cost = duration * cost_per_minute  # Calculate the total cost of the call\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from math import sqrt\n    \n    def factors(n):\n        result = set()\n        for i in range(1, int(sqrt(n)) + 1):\n            div, mod = divmod(n, i)\n            if mod == 0:\n                result |= {i, div}\n        return result\n    \n    ans = sum(factors(20))\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "from itertools import product\n\ndef solution():\n    digits = ['2', '3']\n    count = 0\n    for combo in product(digits, repeat=3):\n        if '2' in combo and '3' in combo:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    cost_of_pen = 5.50\n    cost_of_ruler = 7.60\n    total_cost = cost_of_pen + cost_of_ruler\n\n    return total_cost\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17/10/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('20/12/2023', '%d/%m/%Y')\n\n    num_sundays = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 represents Sunday\n            num_sundays += 1\n        current_date += timedelta(days=1)\n\n    return num_sundays\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import gcd\nfrom sympy import lcm\n\ndef solution():\n    first_light_period = 0.5  # in minutes\n    second_light_period = 0.75  # in minutes\n    total_green_period = 9  # in minutes\n\n    # Least common multiple of the first two traffic lights' periods\n    lcm_first_second = lcm(first_light_period, second_light_period)\n\n    # Greatest common divisor of the total green period and the lcm of first two lights\n    gcd_total_lcm = gcd(lcm_first_second, total_green_period)\n    \n    # The third light period must be a multiple of the gcd for all three to sync every 9 minutes\n    third_light_period = gcd_total_lcm\n\n    return third_light_period\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    total_skiboards = 5\n    total_people = 5\n\n    number_of_ways = factorial(total_skiboards)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of tarts\n    s, a = symbols('s a')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(a, 2 * s)  # She bought twice as many apple tarts as strawberry tarts\n    equation2 = Eq(0.40 * s + a * (0.40 - 0.40), 40)  # She spent a total of $40\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, a))\n    \n    # Calculate the total number of tarts\n    total_tarts = solutions[s] + solutions[a]\n    \n    return total_tarts\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    fitted_after_day_1 = total_pieces * 0.20\n    fitted_after_day_2 = fitted_after_day_1 + 60\n    unfitted_after_day_2 = total_pieces - fitted_after_day_2\n\n    ratio_eq = Eq(fitted_after_day_2 / unfitted_after_day_2, 2/5)\n\n    total_pieces_solution = solve((ratio_eq), (total_pieces))\n\n    return total_pieces_solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n    \n    henry_position_from_right = total_children - henry_position_from_left + 1\n    children_between_henry_and_tony = abs(henry_position_from_right - tony_position_from_right) - 1\n    \n    return children_between_henry_and_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres_per_metre = 1000\n    ans = metres * millimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    \n    percentage = (not_multiples_of_10 / total_numbers) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    amount_borrowed = 4\n    percent_paid_back = 30\n\n    amount_paid_back = amount_borrowed * (percent_paid_back / 100)\n    amount_still_owed = amount_borrowed - amount_paid_back\n\n    return amount_still_owed\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10  # Time they traveled before meeting in hours\n\n    # The distance between A and B is the sum of the distances each of them covered\n    distance = (jack_speed + rose_speed) * time\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = (36 / 12) + 1\n    return x\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for cats, dogs, rabbits, and birds\n    legs_cat = 4\n    legs_dog = 4\n    legs_rabbit = 4\n    legs_bird = 2\n\n    # Number of each pet\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Calculate total legs for cats, dogs, and rabbits\n    total_legs_cd_r = (num_cats * legs_cat) + (num_dogs * legs_dog) + (num_rabbits * legs_rabbit)\n\n    # Total legs of all pets is 28, subtract legs of cats, dogs, and rabbits from total legs to get legs of birds\n    legs_birds = 28 - total_legs_cd_r\n\n    # Calculate number of birds\n    num_birds = legs_birds // legs_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    candy_products = set(a * b for a, b in candy_combinations)\n    candice_products = set(a * b * c for a, b, c in candice_combinations)\n\n    common_products = candy_products.intersection(candice_products)\n\n    for product in common_products:\n        used_numbers = []\n        for card in cards:\n            if product % card == 0:\n                used_numbers.append(card)\n        if len(used_numbers) == 5:\n            not_picked = list(set(cards) - set(used_numbers))[0]\n            return not_picked\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(filter(lambda x: x % 2 != 0 and 24 % x == 0, range(1, 25)))\n    return n\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    # This is an arithmetic sequence where a=2 (first term), d=2 (common difference), and l=100 (last term)\n    a = 2\n    d = 2\n    l = 100\n    # The number of terms n can be found by (l - a)/d + 1\n    n = (l - a) // d + 1\n    # The sum of an arithmetic sequence is given by n/2 * (a + l)\n    sum_sequence = n * (a + l) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    nelson_original = melvin_original * (5/8)\n    oliver_original = 0\n    \n    # After first round\n    melvin_after_first_round = melvin_original + nelson_original\n    nelson_after_first_round = melvin_original - nelson_original\n    \n    # After second round\n    each_lost_to_oliver = melvin_original * (1/4)\n    melvin_after_second_round = melvin_after_first_round - each_lost_to_oliver\n    nelson_after_second_round = nelson_after_first_round - each_lost_to_oliver\n    oliver_after_second_round = oliver_original + each_lost_to_oliver * 2\n    \n    # After final round\n    melvin_gain_final = melvin_original * (1/8)\n    melvin_final = melvin_after_second_round + melvin_gain_final\n    nelson_final = nelson_after_second_round - melvin_gain_final\n    \n    # Since all have the same number of cards after the final round\n    total_cards_initially = melvin_final * 3\n\n    return total_cards_initially\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = (part1, part2)\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n\n    total_sweets = initial_sweets + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Polly's age and her children's ages\n    polly_age, child1_age, child2_age, child3_age = symbols('polly_age child1_age child2_age child3_age')\n    \n    # Equations based on the problem statement\n    # Polly's age is her current age minus her age when she had her first child, which is 20.\n    equation1 = Eq(child1_age, polly_age - 20)\n    # Polly had her second child two years after the first, so the second child's age is the first child's age minus 2.\n    equation2 = Eq(child2_age, child1_age - 2)\n    # Polly had her third child two years after the second, so the third child's age is the second child's age minus 2.\n    equation3 = Eq(child3_age, child2_age - 2)\n    # Polly's age is equal to the sum of her three children's ages.\n    equation4 = Eq(polly_age, child1_age + child2_age + child3_age)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (polly_age, child1_age, child2_age, child3_age))\n    \n    # Return Polly's age\n    return solutions[polly_age]\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20   # The total weight with presents\n    multiplication_factor = 5         # The suitcase weighs 5 times as much as before\n\n    # Let suitcase_weight be the weight of the suitcase without presents\n    # suitcase_weight + 20 = 5 * suitcase_weight\n    # 4 * suitcase_weight = 20\n    suitcase_weight = 20 / (multiplication_factor - 1)\n\n    return suitcase_weight\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        for small_boxes in range(10):\n            if (big_boxes * 6 + small_boxes * 4 == 50) and (big_boxes + small_boxes < 10):\n                return big_boxes\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago\n    combined_age_4_years_ago = 10\n    \n    # Each year each dog ages 1 year, so together they age 2 years\n    # In four years, the combined age will increase by 4 years * 2 dogs\n    increase_over_4_years = 4 * 2\n    \n    # Combined age now\n    combined_age_now = combined_age_4_years_ago + increase_over_4_years\n    \n    # In two years, they will each age 2 more years\n    increase_over_2_years = 2 * 2\n    \n    # Combined age in 2 years\n    combined_age_in_2_years = combined_age_now + increase_over_2_years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be s and the larger number be l\n    # From the problem statement we know that:\n    # l - s = 39 (difference between two numbers)\n    # l + s = 59 (sum of the two numbers)\n    # Adding the two equations, we get 2l = 98, so l = 49\n    # then we can solve for s using the sum of the two numbers\n    l = 49\n    s = 59 - l\n\n    return s\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14*m, 8*(10+m) - 3)\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Since A, B, C are natural numbers pick the solution that respects that\n    for sol in solutions:\n        if all(s.is_integer and s > 0 for s in sol):\n            A, B, C = sol\n            break\n    \n    return A + B + C\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_now = x - 12 + y\n    return passengers_now\n\n# Example of calling the function\nans = solution(100, 20)  # Replace 100 and 20 with the initial number of passengers and the number of passengers that get on, respectively."
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent = 15\n    total_amount = 340\n\n    ans = (percent / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    \n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n    \n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    fact = 1  # Initialize the factorial result variable\n    for i in range(1, 11):  # Loop from 1 to 10\n        fact *= i  # Multiply the current number to the previous factorial result\n    return fact  # Return the computed factorial of 10\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    # Loop over possible values of a, b, and c\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                # Check if the condition holds true\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0\n    # We can use the point (4,8) to find the slope 'm'\n    # Slope (m) is change in y over change in x: m = (y2 - y1) / (x2 - x1)\n    \n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # Given point\n    \n    m = (y2 - y1) / (x2 - x1)  # Calculating the slope\n    \n    # Therefore, the equation of the line is y = mx\n    # Where m is the slope we just calculated\n    equation = f\"y = {m}x\"\n    \n    return equation\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Cora and Qingle's initial number of sweets\n    cora, qingle = symbols('cora qingle')\n    \n    # Create equation based on the condition given\n    equation = Eq(qingle + 8, cora - 8 + 4)\n    \n    # Solve the equation\n    solutions = solve(equation)\n    \n    # Find the initial difference in the number of sweets\n    initial_difference = solutions[cora] - solutions[qingle]\n    \n    return initial_difference\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    max_number = 0\n    current_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        current_number += warren_add\n        max_number = max(max_number, current_number)\n        current_number -= naida_subtract\n        warren_add -= 1\n        naida_subtract += 1\n\n    return max_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucets_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucets_rate\n    time_to_fill = 1 / combined_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Jane's and Eric's seashells\n    jane, eric = symbols('jane eric')\n\n    # The initial ratio of Jane's to Eric's seashells\n    equation1 = Eq(jane, (5/7) * eric)\n\n    # The new ratio after Eric gives Jane 6 seashells\n    equation2 = Eq((jane + 6) / (eric - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jane, eric))\n\n    # Calculate the total number of seashells they have\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(''.join(map(str, p))) for p in permutations(digits) if p[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils // 4\n    \n    play_either_or_both = piano_pupils + violin_pupils - piano_and_violin\n    play_neither = total_pupils - play_either_or_both\n    \n    return play_neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    interest = principal * rate * time\n    amount = principal + interest\n\n    return amount\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from math import factorial\n    \n    # Prime factorization of each number to count the number of 2s and 5s\n    def prime_factors_count(n, p):\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        return count\n    \n    # Product of given numbers\n    numbers = [48, 925, 38, 435]\n    twos = fives = 0\n    \n    # Count the prime factors 2 and 5 for all numbers\n    for number in numbers:\n        twos += prime_factors_count(number, 2)\n        fives += prime_factors_count(number, 5)\n    \n    # The number of zeros at the end of the product is equal to the minimum of twos and fives\n    ans = min(twos, fives)\n    return ans\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, pi, integrate, simplify\n\n    # Set up coordinate system: right angle vertex is at origin (0, 0)\n    # The other two vertices are at (2, 0) and (0, 2)\n    x, y = symbols('x y')\n\n    # Integrate over the triangle to get the area where the condition is met\n    # The condition is the circle with radius 1 centered at the origin\n    # This circle intersects the triangle, so we need to find the area of the\n    # sector of the circle that lies within the triangle\n    condition_area = integrate(y, (x, 0, 1), (y, 0, (1-x**2)**0.5))\n\n    # Area of the isosceles right triangle\n    triangle_area = 1/2 * 2 * 2\n\n    # Probability is the condition area divided by the triangle area\n    probability = condition_area / triangle_area\n\n    return simplify(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10): # since A is the first digit it can't be 0\n        for D in range(1, 10, 4): # D has to be a multiple of 4 since A is 1/4 of D\n            B = A - 1\n            C = (4 * D) // 10 # when ABCD is multiplied by 4, C has to be a tenths digit of that result\n            if (D == A * 4) and (A != B) and (A != C) and (A != D) and (B != C) and (B != D) and (C != D):\n                ABCD = 1000 * A + 100 * B + 10 * C + D\n                if ABCD * 4 == 1000 * D + 100 * C + 10 * B + A:\n                    return ABCD\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    subtracted_value = 10\n    divisor = 3\n\n    original_number = (result - subtracted_value) * divisor\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    # Time when Hannah left school\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n\n    # Time when Hannah caught the bus\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n\n    # Bus trip duration in minutes\n    bus_trip_duration = 18\n\n    # Time when Hannah get home\n    get_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate walking time before catching the bus\n    walking_to_bus_stop = (catch_bus - leave_school).seconds // 60\n\n    # Time when bus trip ended\n    bus_trip_end = (catch_bus + timedelta(minutes=bus_trip_duration)).time()\n\n    # Calculate walking time after bus trip\n    walking_after_bus_trip = (get_home - datetime.combine(get_home.date(), bus_trip_end)).seconds // 60\n\n    # Total walking time\n    total_walking_time = walking_to_bus_stop + walking_after_bus_trip\n\n    return total_walking_time\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_constant = 30000 + 452\n    missing_number = (left_side - right_side_constant) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    ans = 0.20 * 8880\n    return ans\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    cut_pieces = 2\n    length_per_piece_m = (total_length_cm / cut_pieces) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # List of known numbers\n    mean_value = 5  # The mean of all numbers including the unknown 'a'\n    \n    # Calculate the sum of known numbers\n    sum_of_known_numbers = sum(numbers)\n\n    # The mean is calculated as sum of all numbers divided by the count of numbers\n    # Let's find the total sum of all numbers using the mean value\n    total_sum = mean_value * (len(numbers) + 1)  # +1 to include 'a' in the count\n\n    # The value of 'a' can be found by subtracting the sum of known numbers from the total sum\n    a = total_sum - sum_of_known_numbers\n\n    return a\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 7 + 1  # Pupils to left, right and Victoria herself\n    total_rows = 1 + 8 + 1  # Rows in front, behind and the row of Victoria\n    total_pupils = pupils_per_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_marks = 75\n    total_marks_for_3_tests = average_marks * 3\n    total_marks_for_2_tests = 172\n    marks_remaining_test = total_marks_for_3_tests - total_marks_for_2_tests\n\n    return marks_remaining_test\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Worst case scenario, she needs to pick at least:\n    # 1 white + 1 grey + 1 black sock to ensure that she doesn't have a pair.\n    # After this, the next sock she picks, no matter the color, will form a pair.\n    \n    # Number of socks picked without having a guaranteed pair\n    no_pair_socks = 1 + 1 + 1\n    \n    # The next sock will definitely form a pair\n    next_sock_for_pair = 1\n    \n    # Total socks to pick to guarantee at least one pair\n    total_socks_for_pair = no_pair_socks + next_sock_for_pair\n    \n    return total_socks_for_pair\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100  # Convert percentage to decimal\n    time = 1  # in years\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((x + 3) / 4) * 9, 81)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/(i*(20-i+11)) for i in range(11, 16))\n    \n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Mr. Smith's mixture\n    mr_smith_sugar = 300 * 0.5 + 600 * 0.2\n    mr_smith_total = 300 + 600\n    \n    # Mrs. Smith's mixture\n    mrs_smith_sugar = 700 * 0.1 + 300 * (x / 100)\n    mrs_smith_total = 700 + 300\n    \n    # Equation for equal sugar percentage\n    equation = Eq(mr_smith_sugar / mr_smith_total, mrs_smith_sugar / mrs_smith_total)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    x_value = round(solution[0], 2)\n    return x_value\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candies = 36\n    given_to_lily = (3 / 4) * initial_candies\n    remaining = initial_candies - given_to_lily\n    given_to_brother = (1 / 3) * remaining\n    final_remaining = remaining - given_to_brother\n    \n    return final_remaining\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    start_time = datetime.strptime(\"08:00\", \"%H:%M\")\n    halfway_time = datetime.strptime(\"08:30\", \"%H:%M\")\n    \n    distance_at_start = 6300  # Distance at 8:00 am\n    distance_at_halfway = 1800  # Distance at 8:30 am\n    distance_covered_in_half_hour = distance_at_start - distance_at_halfway\n    \n    total_distance = distance_at_start\n    time_to_cover_total_distance = (total_distance / distance_covered_in_half_hour) * 30  # in minutes\n    \n    arrival_time = start_time + timedelta(minutes=time_to_cover_total_distance)\n    \n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k be the current age of Kenny, and b be the age of his brother.\n    kenny, brother = symbols('kenny brother')\n\n    # Kenny is 2 years older than his brother.\n    equation1 = Eq(kenny, brother + 2)\n\n    # Sum of the ages of Kenny and his brother when May is 10.\n    # May will be 10 after 3 years.\n    # Therefore, we need to add 3 years to Kenny's and his brother's current age.\n    sum_ages_future = (kenny + 3) + (brother + 3)\n\n    # The sum is 3 times May's age when she is 10.\n    equation2 = Eq(sum_ages_future, 3 * 10)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    # Kenny's current age\n    kenny_age = solutions[kenny]\n\n    # May is currently 7 years old, subtract 7 from Kenny's age to find the difference\n    age_difference = kenny_age - 7\n\n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Price per item\n    muffin_price = 6 / 3  # $2 each\n    donut_price = 10 / 7  # Approach $1.42857 each\n\n    # Let x be the number of muffins and x + 54 be the number of donuts\n    # Amy spent half of her money on donuts, and half on muffins.\n    # So the total cost for donuts is equal to the total cost for muffins.\n    # (donut_price) * (x + 54) = (muffin_price) * x\n    # (muffin_price) * x = money / 2\n    # money = 2 * (muffin_price) * x\n\n    # Since price per donut is not exact (repeating decimal), use the multiples of prices (scale up) to avoid floating point arithmetic\n    scaled_donut_price = 10\n    scaled_muffin_price = 7\n    scaled_donut_count = scaled_donut_price // donut_price  # The number of donuts Amy can buy with 10$\n\n    # Scaled equation: (10/7 * x = 10/(10/7) * (x + 54))\n    # Solve for x using scaled prices:\n    x = (scaled_donut_count * 54) // (scaled_muffin_price - scaled_donut_price)\n\n    # Now calculate the amount of money Amy had using the original muffin price and the number of muffins\n    money = 2 * muffin_price * x\n\n    return money\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Initial cost of 5 kg of sweets\n    cost_price = 10  # in pounds\n\n    # Selling price per bag of sweets (250g each)\n    selling_price_per_bag = 0.65  # in pounds\n\n    # Since 1 kg = 1000g, Renee makes 1000 / 250 = 4 bags per kg\n    # Total number of bags from 5 kg\n    total_bags = 5 * 4  # 5 kg times 4 bags per kg\n\n    # Total selling price for all bags\n    total_selling_price = total_bags * selling_price_per_bag\n\n    # Profit is selling price minus cost price\n    profit = total_selling_price - cost_price\n\n    # Percentage profit is (Profit / Cost Price) * 100\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Total apples\n    total_apples = 14\n    # Total children\n    total_children = 5\n    # Each child gets at least one apple\n    min_apples = 1\n    \n    # The maximum number of apples one child can get\n    # is the total minus the minimum needed for the other children\n    max_apples = total_apples - (total_children - 1) * min_apples\n\n    return max_apples\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n    # Grandmother's age in 1996 when the mum was 40\n    grandmother_age_1996 = grandmother_age_2008 - (2008 - 1996)\n\n    # Mum's age when grandmother was her age in 1996\n    mum_age_1996 = 40\n    # Mum's age when she was 25\n    mum_age_when_25 = 25\n\n    # The age difference between mum and grandmother remains constant\n    age_difference = grandmother_age_1996 - mum_age_1996\n\n    # Grandmother's age when her mum was 25\n    grandmother_age_when_mum_25 = mum_age_when_25 + age_difference\n\n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total_sum = 46563 + 9785 + 859\n    return total_sum\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5!  # Total ways without restrictions\n    adjacent_ways = 2 * 4!  # Ways in which the two people stand next to each other\n\n    ans = total_ways - adjacent_ways\n    return ans\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between teeth is constant.\n    # The distance between the 4th and 9th teeth is the distance for 5 intervals (between 4, 5, 6, 7, 8, and 9)\n    # Calculate the distance for one interval (between two consecutive teeth).\n    one_interval_distance = 30 / 5  # mm\n    \n    # Since there are 100 teeth, there are 99 intervals.\n    total_intervals = 99  # since there are 100 teeth\n    \n    # The total length in millimeters \n    total_length_mm = one_interval_distance * total_intervals\n    \n    # Convert the total length to centimeters\n    total_length_cm = total_length_mm / 10  # 10 mm in 1 cm\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    return math.comb(5 - 1, 3 - 1)\n\nimport math\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = (2 / 3) * total_vegetables\n    remaining_vegetables = total_vegetables - monday_sold\n    tuesday_sold = (2 / 5) * remaining_vegetables\n    sold_on_monday_and_tuesday = monday_sold + tuesday_sold\n    \n    return sold_on_monday_and_tuesday\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Max number of balls without getting 16 of one color and 13 of another is \n    # the sum of one less than each amount since getting one more would ensure 16 of one color\n    max_without_16_of_one = (16 - 1) + (26 - 1) + (34 - 1) + (24 - 1) + (40 - 1)\n    \n    # To ensure we get at least 16 of one color and 13 of another, we have to pick one more than the max_without_16_of_one\n    balls_needed = max_without_16_of_one + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    # Since the sequence alternates between addition and subtraction, we can pair the numbers:\n    # (5 - 10) + (15 - 20) + ... + (845 - 850) + 855\n    # Each pair has a net value of -5, except the last number which is unpaired and is +855.\n    \n    # First we calculate the number of complete pairs.\n    num_pairs = (855 - 5) // 10  # Each pair occupies 10 units (e.g., 5 to 15)\n\n    # Now, calculate the sum based on number of pairs and the last remaining number 855.\n    total_sum = num_pairs * (-5) + 855\n\n    return total_sum\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n    \n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_biscuits = total_biscuits * (1/4)\n    remaining_biscuits = total_biscuits - given_biscuits\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Set up the equations\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    original_money = spent / (1 - remaining_fraction)\n    return original_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 * 75 / 100\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n\n    total_coins = joann_coins + sana_coins + nancy_coins\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_ratio = 3/5\n\n    # When they are 4 miles apart, they have covered (20 - 4) miles together.\n    distance_covered = total_distance - remaining_distance\n\n    # Total parts when combined Lucas's and mother's speeds\n    total_parts = 3 + 5\n\n    # Lucas's part of the distance\n    lucas_distance = (distance_covered * lucas_to_mother_ratio) / (1 + lucas_to_mother_ratio)\n    \n    return lucas_distance\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * common_difference\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    pizzas_per_person = pizzas_initial / people_initial\n    pizzas_needed = pizzas_per_person * people_final\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    # 16 teams start the competition\n    teams = 16\n    rounds = 0  # counter for rounds\n\n    # Each round halves the number of teams\n    while teams > 1:\n        rounds += 1\n        teams //= 2  # divide by 2 for the next round\n    \n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n    \n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    # big_class students receive 2 apples and 3 oranges each\n    # small_class students receive 2 apples and 2 oranges each\n    # Total fruits distributed: 48 apples and 55 oranges\n\n    # Equations based on the total number of fruits given out\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)  # Total apples\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)  # Total oranges\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    upper_limit = 2016 * 72\n\n    for i in range(1, int(math.sqrt(upper_limit)) + 1):\n        if i * i <= upper_limit:\n            square = i * i\n            if square % 72 == 0 and square // 72 <= 2016:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    danny, efron, years = symbols('danny efron years')\n\n    equation1 = Eq(danny - efron, 30)\n    equation2 = Eq(danny / efron, 8 / 3)\n    equation3 = Eq((danny + years) / (efron + years), 5 / 3)\n\n    solutions = solve((equation1, equation2, equation3), (danny, efron, years))\n\n    return solutions[years]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on problem statement\n    # x % 5 == 0 (groups of 5 with no one sitting out)\n    # x % 7 == 6 (one child had to sit out, so remainder is 6)\n    # x % 8 == 7 (one child had to sit out, so remainder is 7)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    # Solve the system of congruences\n    x, modulo = solve_congruence(*congruences)\n\n    # Return the number of children at the party\n    return x\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    return sum(marks) / len(marks)\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_pencil_ruler = pencils * rulers\n    ways_pencil_pen = pencils * pens\n    ways_ruler_pen = rulers * pens\n\n    total_ways = ways_pencil_ruler + ways_pencil_pen + ways_ruler_pen\n    \n    return total_ways\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of games in group stage for each group\n    # Each team plays with every other team in a group\n    # For n=4 (number of teams in a group), the number of matches is C(n, 2) = n*(n-1)/2\n    games_per_group = 4*(4-1)//2\n    \n    # Total games in group stage for 8 groups\n    group_games_total = games_per_group * 8\n    \n    # Number of games in knockout stages\n    # Round of 16, quarter-finals, semi-finals, third place and final\n    knockout_games_total = 16 + 8 + 4 + 2 + 1  # Add 1 for the third-place match\n    \n    # Total number of games\n    total_games = group_games_total + knockout_games_total\n    \n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):  # since it's a 3-digit number, the second digit cannot be 0\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:  # if the first digit is 10 or more, it's no longer a single digit\n            break\n        for third_digit in range(0, 10):  # the third digit can be 0-9\n            if 10 <= first_digit + second_digit + third_digit < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return int(ans)\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = solutions[banana] * 5\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while n * (n - 1) / 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n\n    number = 224\n    factors_dict = factorint(number)\n    factors_count = 1\n\n    for exponent in factors_dict.values():\n        factors_count *= exponent + 1\n\n    return factors_count\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    num = 210 / 0.7\n    return num\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    ans = pencils * rulers * pens\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * points_for_correct + wrong_answers * points_for_wrong == total_points:\n            return correct_answers\n\n    return None  # In case there is no solution, though there should be.\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, tshirt = symbols('shorts tshirt')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, tshirt))\n    \n    return solutions[tshirt]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if 0 <= ones < 10:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n\n    third_term = second_term + difference\n\n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # Since there are 4 lamp posts, there are 3 gaps between them\n\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of triangles be t\n    t = symbols('t')\n    \n    # There are 2 pentagons, so there are 2*5 sides from pentagons\n    pentagons = 2 * 5\n    \n    # The number of quadrilaterals is 82 more than the number of triangles\n    # So, quadrilaterals have (t + 82)*4 sides\n    quadrilaterals = (t + 82) * 4\n    \n    # Triangles have t*3 sides\n    triangles = t * 3\n    \n    # All the shapes combined have 394 sides\n    equation = Eq(triangles + quadrilaterals + pentagons, 394)\n    \n    # Solve the equation for the number of triangles t\n    number_of_triangles = solve(equation, t)\n    \n    # Calculate the number of quadrilaterals by adding 82 to the number of triangles\n    number_of_quadrilaterals = number_of_triangles[0] + 82\n    \n    return number_of_quadrilaterals\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    rachel, alice = symbols('rachel alice')\n\n    # Equations based on the problem statement\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / (alice - 8), 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Calculate least common multiple of 3, 5 and 7\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"6{i}{j}\")\n            if number % lcm == 0:\n                return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let g be the number of all-girl teams.\n    # There are 15 teams with only 1 boy, so there are 15 girls in these teams.\n    # There are 27 teams with two or more boys, but we don't know how many are all-boys yet.\n    # The number of all-boy teams is twice the number of all-girl teams, so let 2g be the all-boy teams.\n    # We know the total number of teams is 150/3 = 50 teams.\n    \n    # Calculate the number of all-girl teams\n    # Total teams = all-girl teams (g) + 1-boy teams (15) + teams with 2 or more boys (thus includes all-boy teams, i.e., 2g)\n    # 50 = g + 15 + 27\n    # 50 = g + 15 + all-boy teams + remaining teams with boys (but not all-boy teams)\n    # 50 = g + 15 + 2g + (27 - 2g) because the all-boy teams are part of the 27 teams with two or more boys\n    # 50 = 3g + 15 + 27 - 2g\n    # g = 50 - 15 - 27\n    g = 50 - 15 - 27\n\n    # The number of girls in all-girl teams is 3 times the number of all-girl teams.\n    girls_in_all_girl_teams = 3 * g\n\n    # The number of girls in 1-boy teams is also known (15 teams, each with 2 girls).\n    girls_in_1_boy_teams = 15 * 2\n\n    # The total number of girls in the level is the sum of girls in all-girl teams and girls in 1-boy teams.\n    total_girls = girls_in_all_girl_teams + girls_in_1_boy_teams\n\n    return total_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weights of the fruits\n    apples, peaches, pears = symbols('apples peaches pears')\n    \n    # Create equations based on the given information\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, -2 + 3 * pears)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    time_at_10kmh = 10  # arrival time when speed is 10 km/h\n    time_at_15kmh = 8   # arrival time when speed is 15 km/h\n    desired_time = 9    # desired arrival time\n\n    # Calculate the time taken to travel at each speed\n    # time = distance / speed\n    # Assume distance between Town A and Town B is d km.\n    # At 10km/h Ben will take d/10 hours to travel.\n    # At 15km/h Ben will take d/15 hours to travel.\n    # We can represent the differences in arrival times in terms of d as follows:\n    # d/10 - d/15 = 2 (which is the difference between arriving at 10 am and 8 am)\n    # Simplifying, we get (3*d - 2*d) / 30 = 2\n    # d = 60 km.\n\n    distance = 60  # Computed from the equation above\n\n    # We now find the speed to arrive at 9 am.\n    # Let the required speed be v km/h.\n    # distance = v * time\n    # time to travel at speed v would be distance / v\n    # But we know that time taken at 10 km/h minus time taken at desired speed v equals 1 hour\n    # (Because Ben wants to arrive at 9 am instead of 10 am)\n    # So, 60/10 - 60/v = 1\n    # simplifying we get v = (60 * 10)/(60 - 10)\n\n    required_speed = (distance * 10) / (distance - 10)\n\n    return required_speed\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert numbers from base 10 to base 7\n    num1 = int('61', 7)\n    num2 = int('34', 7)\n\n    # Perform subtraction in base 10\n    difference = num1 - num2\n\n    # Convert the difference back to base 7\n    ans = ''\n    while difference > 0:\n        ans = str(difference % 7) + ans\n        difference //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    dog_to_chickens_ratio = 8 * 2\n    return dog_to_chickens_ratio\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # Total candies before the new student joins\n    total_students = 5 + 1  # Including the new student\n    candies_per_student = total_candies // total_students  # Divide the candies equally among the students\n\n    return candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 4),\n        (4, 5),\n        (6, 7)\n    ]\n    \n    cards, _ = solve_congruence(*congruences)\n    \n    return cards\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Since Dilly cannot differentiate between left-hand and right-hand gloves,\n    # she needs to ensure she has at least one pair of the same color.\n    # We use the Pigeonhole Principle to solve this problem.\n    \n    # There are 2 pigeonholes (blue and green gloves).\n    # Grabbing all 4 right green + 1 right blue = 5 gloves guarantees not getting a pair.\n    # Thus, to guarantee a pair, Dilly must grab one more glove.\n    # Therefore, the minimum number of gloves Dilly needs to take out is 6.\n\n    return 6\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_value_after_years = 0.8154\n\n    value_after_years = initial_value * approximate_value_after_years\n\n    return value_after_years\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    boys_more = 52\n    total_students = 0\n    for n in range(1, 100):  # assume a reasonably large number for the size of the square\n        if n % 2 == 0:  # even layer, girls\n            girls = (n * n) - ((n - 2) * (n - 2))\n        else:  # odd layer, boys\n            boys = (n * n) - ((n - 2) * (n - 2))\n            if boys - girls == boys_more:\n                total_students = n * n  # total number of students is the area of the square\n                break\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of pins Eugene and Yuna have\n    eugene, yuna = symbols('eugene yuna')\n    \n    # Initial condition: Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(eugene, 3 * yuna)\n    \n    # Final condition: After Yuna bought 76 pins, she had 7/9 as many pins as Eugene\n    equation2 = Eq(yuna + 76, (7/9) * eugene)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    freq = {letter: word.count(letter) for letter in set(word)}\n\n    ways = factorial(len(word))\n    for key, value in freq.items():\n        ways //= factorial(value)\n\n    return ways\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percent = 35\n    discount_amount = (discount_percent / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must also be divisible by 9.\n    sum_of_digits = 1 + 2 + 3 + 4 + 5  # Sum of the known digits\n    # To find the possible value(s) for A, we look for a digit that would make the sum of digits divisible by 9\n    for A in range(10):  # A can be any digit from 0 to 9\n        if (sum_of_digits + A) % 9 == 0:\n            six_digit_number = int(f\"12345{A}\")\n            break\n    \n    # The remainder when the number is divided by 4 depends only on the last two digits.\n    # This is because 100 is divisible by 4, hence we can ignore the first four digits.\n    remainder = six_digit_number % 4\n\n    return remainder\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = 5 + Fraction(1, 7) + 3 + Fraction(3, 11) + 1 + Fraction(13, 23)\n    denominator = 3 + Fraction(3, 7) + 2 + Fraction(2, 11) + 1 + Fraction(1, 23)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n+1) * (2*n+1)\n    return int(ans)\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure her victory, Kelly must leave a number of matches that is a multiple of 3 for Dan.\n    # This is because no matter if Dan takes 1 or 2 matches, Kelly can always take 2 or 1 matches to make the number a multiple of 3 again.\n    # So working backward from the end, the last move should leave 1 match which is 2 (1 or 2 matches) away from a multiple of 3.\n    # Thus, the multiple of 3 before the last match is 3.\n    # If Kelly leaves 3 matches for Dan after her first move, she can always respond to Dan's move to keep the number of matches a multiple of 3 until there is only 1 match left for her to win.\n    # Therefore, Kelly needs to take away (11 - 3) matches in her first turn to leave 3 matches for Dan.\n\n    matches_to_take = 11 - 3  # Ensure Dan picks from a position where 3 matches are left.\n    return matches_to_take\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    num_ways = math.factorial(num_kids)\n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # To solve for the box (let's call it 'x'), we need to perform the inverse operation\n    # of the equation given.\n    # The equation is: 4 * x - 3 = 65\n    # We start by adding 3 to both sides of the equation.\n    lhs = 65 + 3\n    # Now we have 4 * x = lhs, and we solve for x by dividing both sides by 4.\n    x = lhs / 4\n    return x\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for cars and motorcycles\n    cars, motorcycles = symbols('cars motorcycles')\n\n    # Each car has 4 wheels and each motorcycle has 2 wheels\n    wheel_equation = Eq(4 * cars + 2 * motorcycles, 78)\n    # There are 27 vehicles in total\n    vehicle_equation = Eq(cars + motorcycles, 27)\n\n    # Solve the system of equations\n    solutions = solve((wheel_equation, vehicle_equation), (cars, motorcycles))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    new_length_ratio = 1.10\n    new_breadth_ratio = 4 / 5\n    new_height_ratio = 11 / 10\n\n    new_volume_ratio = new_length_ratio * new_breadth_ratio * new_height_ratio\n    new_volume_percentage = new_volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_count in range(39): # Maximum possible 2 gram weights is 38 since 2*39 = 78 which is greater than 77\n        for three_gram_count in range(26): # Maximum possible 3 gram weights is 25 since 3*26 = 78 which is greater than 77\n            if 2 * two_gram_count + 3 * three_gram_count == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # convert km to m\n    number_of_intervals = 9 - 1  # marshals create 9 - 1 intervals\n    distance_between_marshals = total_distance_m / number_of_intervals\n    return distance_between_marshals\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    # Let's denote the number of stickers Nicole had originally as N.\n    # According to the problem,\n    # After giving away 18 stickers, Jason has 20 + 18 = 38 stickers.\n    # At that point, Nicole has N - 18 stickers.\n    # We are told that Jason has 5 fewer stickers than Nicole after the exchange.\n    # Therefore, Nicole has 38 + 5 stickers after giving away 18.\n    # Which means initially Nicole had (38 + 5) + 18 stickers.\n\n    stickers_nicole_after = 38 + 5\n    initial_stickers_nicole = stickers_nicole_after + 18\n    return initial_stickers_nicole\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03\n    interest_first_year = initial_amount * interest_rate\n    amount_end_first_year = initial_amount + interest_first_year\n    interest_second_year = amount_end_first_year * interest_rate\n    total_interest = interest_first_year + interest_second_year\n    return total_interest\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    ans = round(1 + (4/7), 1)\n    return ans\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80  # 1 hour and 20 minutes is 80 minutes\n    number_of_pictures = total_minutes // minutes_per_picture\n    return number_of_pictures\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize total number of tiles and dominant color variable\n    total_tiles = 400\n    dominant_color = None\n    more_tiles = 0\n    \n    # Calculate the size of the square wall\n    side_length = int(total_tiles ** 0.5)\n    \n    # Initialize counters for red and green tiles\n    red_tiles = 0\n    green_tiles = 0\n    \n    # Calculate number of tiles of each color\n    for layer in range(1, side_length // 2 + 1):\n        if layer % 2 == 1:  # odd layer, red tiles\n            red_tiles += (side_length - 2 * (layer - 1)) ** 2 - (side_length - 2 * layer) ** 2\n        else:  # even layer, green tiles\n            green_tiles += (side_length - 2 * (layer - 1)) ** 2 - (side_length - 2 * layer) ** 2\n    \n    # Determine which color has more tiles\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n        \n    return {\n        'dominant_color': dominant_color,\n        'more_tiles': more_tiles\n    }\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # The sequence of digits that repeats\n    position = 69 - 1  # Adjust for 0-indexing\n    index_in_sequence = position % len(recurring_sequence)  # Find the index within the repeating sequence\n    ans = int(recurring_sequence[index_in_sequence])\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_weight = 300 + 200\n    dylan_salt = 0.35 * 300\n    daisy_salt = 0.50 * 200\n    total_salt = dylan_salt + daisy_salt\n    concentration = total_salt / total_weight\n\n    return round(concentration * 100, 2)\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # In 2014, Vastco sold 68% more widgets than Megacorp, hence Vastco sold 1.68 * x\n    # In 2015, Vastco's sales rose by 32%, hence its sales are 1.32 * 1.68 * x\n    # In the same year, Vastco sold 44% more widgets than Megacorp, hence Vastco sold 1.44 * y, where y is the number of widgets Megacorp sold in 2015\n    # Therefore, 1.32 * 1.68 * x = 1.44 * y\n    # Solving for y in terms of x gives y = (1.32 * 1.68 * x) / 1.44\n\n    # Substitute the y in the above equation to find the percentage increase in sales for Megacorp from 2014 to 2015\n    # Percentage increase = ((y - x) / x) * 100%\n    # Replace y in terms of x: percentage increase = ((((1.32 * 1.68 * x) / 1.44) - x) / x) * 100%\n\n    # Simplify the expression to calculate the percentage\n    percentage_increase = ((((1.32 * 1.68) / 1.44) - 1) * 100)\n    return percentage_increase\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let the total cost of the goods be 100 units (for simplicity).\n    total_cost = 100\n    # Planned profit is 50% of the total cost.\n    planned_profit = 0.50 * total_cost\n    # Actually achieved profit is 82% of the planned profit.\n    actual_profit = 0.82 * planned_profit\n    # On the first day, Ken sold 70% of the goods with 50% profit.\n    first_day_sales = 0.70 * total_cost\n    first_day_profit = 0.50 * first_day_sales\n    # Remaining goods to sell on the second day is 30% of the total goods.\n    remaining_goods = 0.30 * total_cost\n    # Since we know the actual profit, we can find the second day's profit.\n    second_day_profit = actual_profit - first_day_profit\n    # Now let's calculate the selling price on the second day.\n    second_day_sales = remaining_goods + second_day_profit\n    # Calculate the discount rate based on the expected sales and actual sales on the second day.\n    expected_second_day_sales = remaining_goods * (1 + 0.50)  # 50% profit on remaining goods\n    discount_rate = (expected_second_day_sales - second_day_sales) / expected_second_day_sales\n\n    return discount_rate * 100  # Convert to percentage\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Create equations based on the given information\n    equation_sum = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation_sons = Eq(younger_son - older_son, 3)\n    equation_daughters = Eq(older_daughter - younger_daughter, 2)\n    equation_son_daughter = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation_sum, equation_sons, equation_daughters, equation_son_daughter),\n                      (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Get the age of the younger daughter (youngest child)\n    return min(solutions[younger_daughter], solutions[older_daughter], solutions[older_son], solutions[younger_son])\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # The first 9 numbers (1-9) have 1 digit each\n    count_1_digit = 9 * 1\n\n    # The next 90 numbers (10-99) have 2 digits each\n    count_2_digits = (99 - 9) * 2\n\n    # The remaining numbers (100-113) have 3 digits each\n    count_3_digits = (113 - 99) * 3\n\n    # The total count of digits is the sum of the above counts\n    total_digits = count_1_digit + count_2_digits + count_3_digits\n\n    return total_digits\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        # For each exchange you get new bottles and also have empty bottles left\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n\n    # Consider borrowing 1 bottle\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pearls = symbols('pearls')\n    equation = Eq(pearls/2 + pearls/4 + pearls/6 + 3, pearls)\n    solutions = solve(equation, pearls)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    people = [\"Len\", \"Joe\", \"Angle\", \"Jack\"]\n    for entrance_permutation in permutations(people, 4):\n        entrances = set(entrance_permutation)\n        if len(entrances) >= 3:  # Each entrance must be entered by at least one person\n            count += 1\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Set up the equation: x is Mayank's number\n    # Equation: 2 * x + 4 = 40\n\n    # Perform the inverse operations to isolate x\n    result = (40 - 4) / 2\n\n    return result\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit_per_glass = 1\n    loss_per_broken_glass = -1\n    \n    # Let the number of glasses broken be x\n    # Then, the number of glasses delivered safely is (total_glasses - x)\n    # The profit made from safely delivered glasses is profit_per_glass * (total_glasses - x)\n    # The loss made from broken glasses is loss_per_broken_glass * x\n    # According to the problem, profit - loss = $92\n\n    # Set up the equation: (total_glasses - x) * profit_per_glass + x * loss_per_broken_glass = 92\n    \n    # Solve for x\n    for x in range(total_glasses + 1):  # We iterate through all possible values of x (0 to 100 inclusive)\n        if (total_glasses - x) * profit_per_glass + x * loss_per_broken_glass == 92:\n            return x\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boats, people = symbols('boats people')\n    \n    # If the number of boats is reduced by 1, each boat will take 9 people\n    equation1 = Eq((boats - 1) * 9, people)\n    \n    # If the number of boats is increased by 1, each boat will take 6 people\n    equation2 = Eq((boats + 1) * 6, people)\n    \n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2), (boats, people))\n    \n    return solutions[people]\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = (12 * 100) - total_cost  # Convert £12 to pence for subtraction\n    return change / 100  # Convert result back to pounds\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "import math\n\ndef solution():\n    # In a round-robin tournament, each team plays every other team exactly once.\n    # The total number of matches is given by the formula: num_matches = n * (n - 1) / 2\n    # where n is the number of teams.\n    # We have the total number of rounds (num_matches) as 45, so we need to find n that satisfies the equation.\n    # Rearranging the formula: n * (n - 1) = num_matches * 2\n    \n    num_matches = 45\n    n = symbols('n', integer=True)\n    equation = Eq(n * (n - 1) / 2, num_matches)\n    \n    # Since we're solving for an integer value of n, we can use solve from sympy.\n    team_count = solve(equation, n)\n    \n    # solve gives us two solutions, one negative and one positive. We're interested in the positive one.\n    for count in team_count:\n        if count > 0:\n            return count\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest odd integer be x\n    # The next two consecutive odd integers would be x+2 and x+4\n    # Their sum is given to be 57\n    # Therefore, we have the equation x + (x+2) + (x+4) = 57\n    # Simplifying this, we get 3x + 6 = 57\n    # Further simplifying, we get 3x = 51\n    # So, x = 51 / 3\n    smallest_integer = 51 // 3\n    \n    return smallest_integer\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in (2, 6, 1, 10, 5, 3):\n        if num * 3 == 6:\n            return num\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60  # Total percentage marks before the fifth test\n    total_marks_after = total_marks_before + 70  # Total percentage marks after the fifth test\n    average_after = total_marks_after / 5  # New average percentage marks after the fifth test\n\n    return average_after\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cookies John and Peter initially have\n    john, peter = symbols('john peter')\n\n    # Equation representing that John had 180 more cookies than Peter initially\n    equation1 = Eq(john - 180, peter)\n\n    # After selling cookies, John has 4/5 left, while Peter has 3/10 sold meaning he has 7/10 left\n    # The second equation represents that John has half as many cookies as Peter left\n    equation2 = Eq(john * (4/5), (peter - (peter * (3/10))) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, peter))\n\n    # Return the number of cookies that John had initially\n    return solutions[john]\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "import itertools\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    for perm in itertools.permutations(digits, 4):\n        number1 = perm[0] * 10 + perm[1]\n        number2 = perm[2] * 10 + perm[3]\n        current_sum = number1 + number2\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if (i + j) < 10:  # ensuring the sum of i and j is a single digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples_eaten = (total_horses * apples_per_horse) + \\\n                         (total_pigs * apples_per_pig) + \\\n                         (total_rabbits * apples_per_rabbit)\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_eaten_per_animal = total_apples_eaten / total_animals\n\n    return average_apples_eaten_per_animal\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    nearest_hundred = round(number / 100) * 100\n    return nearest_hundred\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_full_price = full_price_per_cup * 6\n\n    discount_1 = 0.1  # 10% discount for buying 3 or more cups\n    discount_2 = 0.15  # 15% discount for buying 5 or more cups\n    total_discount = 0\n\n    if 6 >= 5:\n        total_discount = total_full_price * discount_2\n    elif 6 >= 3:\n        total_discount = total_full_price * discount_1\n\n    final_price = total_full_price - total_discount\n\n    return final_price\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = S % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in Class A and B, and the total peaches\n    A_students, B_students, peaches = symbols('A_students B_students peaches')\n\n    # Equation for Class A: 5 per student + 10 leftover = total peaches\n    equation1 = Eq(5 * A_students + 10, peaches)\n\n    # Equation for Class B: 8 per student - 2 shortage = total peaches\n    equation2 = Eq(8 * B_students - 2, peaches)\n\n    # Given that Class A has 3 more students than Class B\n    equation3 = Eq(A_students, B_students + 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A_students, B_students, peaches))\n\n    # Get the total number of peaches\n    return solutions[peaches]\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    water_in_orange_drink = total_orange_drink * fraction_water\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n\n    # Benson spent $74, so we represent Benson's amount after spending as benson_left + 74\n    # Jayden spent $120, so we represent Jayden's amount after spending as jayden_left + 120\n    # Benson's amount left is three times Jayden's amount left -> benson_left = 3 * jayden_left\n    # Both had a total of $590 originally -> benson_left + 74 + jayden_left + 120 = 590\n\n    equation1 = Eq(benson_left, 3 * jayden_left)\n    equation2 = Eq(benson_left + 74 + jayden_left + 120, 590)\n\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    betty_speed_per_minute = 900 / (6 + 3)  # Betty's speed in meters per minute\n    kevin_speed_per_minute = 150 / 6         # Kevin's speed in meters per minute\n\n    # Distance Kevin travels in total to reach the store\n    total_distance_kevin_travels = kevin_speed_per_minute * (6 + 3)\n\n    # Total time Betty travelled to be 900 meters away (in minutes)\n    total_time_betty_travels = (total_distance_kevin_travels + 900) / betty_speed_per_minute\n\n    # Finding the difference in minutes between Betty's departure and Kevin's departure\n    difference_in_minutes = total_time_betty_travels - (6 + 3)\n\n    return difference_in_minutes\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ]
}