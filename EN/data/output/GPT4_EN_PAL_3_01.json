{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "from datetime import datetime\n\ndef solution():\n    format_str = '%H:%M' # The format\n    start_time = datetime.strptime('9:00', format_str)\n    end_time = datetime.strptime('10:00', format_str)\n\n    duration = end_time - start_time\n    return duration.seconds // 60 # convert duration to minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_money = 90\n    # Let's denote the original amount of money as 'x'.\n    # After spending 20% on a bag, Jia Jia has 80% of her money left, which is 0.8 * x.\n    # Then she spends 40% of the remainder on a skirt, so she has 60% of the remainder left, which is 0.6 * 0.8 * x.\n    # Now we can set up the equation: 0.6 * 0.8 * x = remaining_money\n    # Solve for x: x = remaining_money / (0.6 * 0.8)\n    x = remaining_money / (0.6 * 0.8)\n    return x\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # The formula to calculate the sum of squares from 1 to n is n(n + 1)(2n + 1) / 6\n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of squares from 1 to 15\n    sum_to_15 = sum_of_squares(15)\n    \n    # Calculate the sum of squares from 1 to 4, since we start at 5\n    sum_to_4 = sum_of_squares(4)\n    \n    # The desired sum is the difference between these two sums\n    ans = sum_to_15 - sum_to_4\n    \n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # Limiting the loop to 100 as an arbitrary large number\n        initial_square = n**2  # The initial square array\n        extended_square = (n + 1)**2  # The larger square array after adding one row and column\n\n        if initial_square + 5 + 26 == extended_square:\n            num_students = initial_square + 5\n            return num_students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    \n    # Let x be the number of apples Amy gives to John.\n    # After giving x apples, Amy will have (amy_apples - x) apples,\n    # and John will have (john_apples + x) apples.\n    # We want to find x such that (amy_apples - x) = (john_apples + x) + 4.\n    x = (amy_apples - john_apples - 4) / 2\n    \n    return x\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to choose 4 out of 9 plants is combination,\n    # but since we are arranging them, it's actually a permutation.\n    num_plants = 9\n    num_to_arrange = 4\n\n    # Calculate the number of permutations: P(n,r) = n! / (n-r)!\n    num_ways = factorial(num_plants) / factorial(num_plants - num_to_arrange)\n    \n    return int(num_ways)\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # If Fred takes 1, 2, or 3 oranges initially, we need to ensure that he \n    # leaves a multiple of 4 oranges for George, so that he can always \n    # win by maintaining the multiple of 4.\n    \n    # The winning strategy involves reducing the pile to a multiple of 4 after George's turn.\n    # Hence, Fred needs to take (15 mod 4) oranges to create this situation.\n    # After this, no matter how many oranges George takes (1, 2, or 3),\n    # Fred can always take a number of oranges that makes the remaining count a multiple of 4.\n    oranges_to_take = 15 % 4\n    return oranges_to_take\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    selling_price = 99000\n\n    # Let c1 be the cost of the first house and c2 be the cost of the second house.\n    # We are given that he sold each for 99000. Profit of 10% on the first and loss of 10% on the second.\n\n    # Profit on first house is 10% so selling price is 110% of cost.\n    # 1.10 * c1 = 99000 -> c1 = 99000 / 1.10\n\n    c1 = selling_price / 1.10\n\n    # Loss on the second house is 10% so selling price is 90% of cost.\n    # 0.90 * c2 = 99000 -> c2 = 99000 / 0.90\n\n    c2 = selling_price / 0.90\n\n    # Overall profit or loss is combined selling prices minus combined costs.\n    # profit_or_loss = (selling_price + selling_price) - (c1 + c2)\n\n    profit_or_loss = (selling_price * 2) - (c1 + c2)\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    shirt_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = shirt_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    tom_solution = solve(equation, tom_age)\n\n    return tom_solution[0]\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = \"3/20\" if fraction_value > decimal_value else \"0.16\"\n\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    jogging_time_hours = 2  # from 6.30am to 8.30am\n    jogging_speed_kmph = 8  # jogging speed in km per hour\n    walking_time_hours = 1  # from 8.30am to 9.30am\n    walking_speed_kmph = jogging_speed_kmph / 2  # half the jogging speed\n\n    jogging_distance = jogging_time_hours * jogging_speed_kmph\n    walking_distance = walking_time_hours * walking_speed_kmph\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    return 74 * 15 * 8 * 250\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for notes_count in range(1, 280):\n        sum_of_money = 5 * notes_count + 10 * notes_count + 20 * notes_count\n        if sum_of_money == 280:\n            return 3 * notes_count\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    # Number of students participating in skipping rope\n    skipping_rope = 40\n    # Number of students participating in long jump\n    long_jump = 31\n    # Number of students participating in both events\n    both_events = 21\n\n    # Calculating the number of students participating in only one event\n    # using the Inclusion-Exclusion Principle\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for x in range(1, 10):   # Hundreds place (cannot be 0)\n        for y in range(0, 10): # Tens place\n            # For a number to be palindromic, the hundreds and ones place should be the same\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2 = (2 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n\n    ans = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_operation(M, N):\n        return M * N + N + 1\n    \n    def square_operation(M, N):\n        return 8 * M - N * N\n    \n    diamond_result = diamond_operation(7, 6)\n    ans = square_operation(diamond_result, 9)\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Start with the smallest prime number.\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The sum of the squares of the first n odd numbers is given by\n    # (1^2 + 3^2 + 5^2 + ... + (2n−1)^2 ) = n(4n^2 - 1)/3\n    # In this case, we want to sum up to 19^2, which is the 10th odd number (n=10)\n    \n    n = 10  # because 19 is the 10th odd number\n    ans = n * (4 * n ** 2 - 1) // 3\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "from itertools import combinations\n\ndef solution():\n    marbles = 16\n    for biggest_pile in range(marbles, 0, -1):\n        for combo in combinations(range(1, biggest_pile), 3):\n            if sum(combo) + biggest_pile == marbles and len(set(combo)) == 3:\n                return biggest_pile\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    if students % capacity == 0:\n        minibusses = students // capacity\n    else:\n        minibusses = (students // capacity) + 1\n    return minibusses\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # The time taken from the first to fourth floor is 12 minutes\n    # Assuming the floors are evenly spaced and the speed is constant,\n    # the time to go from first to second floor should be a quarter of that time.\n\n    total_time_first_to_fourth = 12\n    num_intervals_first_to_second = 1  # one interval from first to second floor\n    num_total_intervals = 3  # three intervals from first to fourth floor\n    \n    time_first_to_second = total_time_first_to_fourth / num_total_intervals * num_intervals_first_to_second\n\n    return time_first_to_second\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n**2 + (n+1)**2) / (n * (n+1))\n    return round(total)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # The average height was initially recorded as 159cm instead of 163cm\n    # This means that the sum of heights was underestimated by 162 - 126 = 36cm\n    # The average height has been decreased by 163 - 159 = 4cm\n    # The number of girls is the total error divided by the error per girl\n    total_error = 36\n    error_per_girl = 4\n    \n    num_girls = total_error // error_per_girl\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = 24 / 100 * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = (46 * 879) / (4089 / 9)\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Calculate the sum of the first n odd numbers, which is (1 + 2 + ... + n)^2 where n is (13 + 1) / 2\n    n = (13 + 1) // 2\n    sum_odd_numbers = (n * (n + 1) // 2) ** 2\n    return sum_odd_numbers\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n    \n    ans = 200\n    for b in range(199, 0, -1):\n        ans = hash_op(ans, b)\n        \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    # calculate the product of the series using fractions\n    from fractions import Fraction as F\n\n    result = F(1, 1) # Start with fraction 1/1\n    for i in range(2, 10): # Loop from 2 to 9\n        result *= F(i, i+1) # Multiply the current result with i/(i+1)\n\n    return result.numerator / result.denominator # Return the float value of the fraction\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    beth = symbols('beth')\n    ken = beth + 75\n    equation = Eq(4/5 * beth, 2/5 * ken)\n    \n    num_seashells_beth = solve(equation, beth)[0]\n    num_seashells_ken = num_seashells_beth + 75\n    total_seashells = num_seashells_beth + num_seashells_ken\n    \n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    \n    num_containers = -(-total_apples // container_capacity)\n    \n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Calculate the greatest common divisor\n    gcd_two_ribbons = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_two_ribbons, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # We have two equations based on the problem\n    # David had a total of 40 notes\n    equation1 = Eq(x + y, 40)\n\n    # After spending, he had 4/5 as many $10 notes as $2 notes\n    # Spent 40% of $10 notes: 0.6 * x\n    # Spent 25% of $2 notes: 0.75 * y\n    # The ratio of $10 notes to $2 notes left is 4/5\n    equation2 = Eq(0.6 * x, (4/5) * 0.75 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount spent for the gift\n    total_spent = (0.4 * solutions[x] * 10) + (0.25 * solutions[y] * 2)\n\n    return float(total_spent)\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    start_time = 9\n    end_time = 10\n    class_duration = end_time - start_time\n    return class_duration\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Every child must get at least 2 oranges, so start by giving 2 oranges to each\n    total_oranges = 13 - 2 * 3\n    # Now we have 7 oranges left to distribute\n    # Use the stars and bars combinatorial method to distribute the remaining oranges\n    # which is comb(n+k-1, k-1) where n is the number of items to distribute \n    # and k is the number of partitions (children) \n    # Here, n = 7 (oranges) and k = 3 (children)\n    ans = comb(total_oranges + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 7 + 8 + 9\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    # Let's denote the two original numbers as x and y\n    # We know that x + y = 11.63 (1)\n    # When Oliver shifted the decimal point, we'll assume it happened to y and thus y became y/10\n    # And according to the mistake, x + y/10 = 5.87 (2)\n    # We have two equations and two unknowns, we can solve for x and y\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the difference between the two original numbers\n    difference = solutions[x] - solutions[y]\n    \n    # Multiply the difference by 100\n    ans = 100 * difference\n    \n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    return 2010\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)                     # Bill is twice as old as his son.\n    equation2 = Eq(son, father - 50)                  # Son is 50 years younger than Bill's father.\n    equation3 = Eq(bill + son + father, 142)          # Sum of their ages is 142.\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n    equation = Eq(dad_age, 4 * tom_age - 5)\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be zero as it's the first digit in a 4-digit number\n            continue\n        paso = p*1000 + a*100 + s*10 + o\n        soap = s*1000 + o*100 + a*10 + p\n        if paso + soap == 10889:  # Given condition PASO + SOAP = 10889\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):\n        if (number % 7 == 1) and (number % 9 == 5):\n            return number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Initial number of math questions done\n    monday_questions = 3\n    # Common difference, 3 more questions each day\n    daily_increase = 3\n    # Total days from Monday to Sunday\n    total_days = 7\n\n    # Total questions solved using the formula for the sum of an arithmetic sequence\n    # Sum = n/2 * (2a + (n-1)d), where 'n' is the number of terms, 'a' is the first term, and 'd' is the common difference\n    n = total_days\n    a = monday_questions\n    d = daily_increase\n    total_questions = n / 2 * (2 * a + (n - 1) * d)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let x be the number of days it would take for his wife to finish the barrel on her own\n    # Therefore, the man's rate of drinking is 1/15 barrel per day\n    # and the wife's rate of drinking is 1/x barrel per day.\n    \n    # When they drink together, their combined rate is 1/12 barrel per day.\n    # Hence, we can write the equation:\n    # 1/15 + 1/x = 1/12\n    \n    # Solve for x, which is the number of days it would take for his wife to finish the barrel on her own.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1/15 + 1/x, 1/12)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for white in range(1, 7):  # Since at least 3 and at most 8 white balls should be left, we can pick from 1 to 6 white balls\n        for red in range(0, 4):  # Since there should be at least 2 red balls left, we can pick from 0 to 3 red balls\n            for black in range(0, 5):  # Since there should be at most 3 black balls left, we can pick from 0 to 4 black balls\n                if white + red + black == 10:  # The total number of balls picked should be 10\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Since the piles must have a different number of marbles,\n    # and there are 16 marbles in total, we start by creating the largest pile.\n    # We then minimize the largest pile by maximizing the number of marbles\n    # in the other piles. The minimum number for a pile is 1 marble.\n    # Hence, we start with the following distribution: 1, 2, 3, (16-1-2-3)\n    other_piles_sum = 1 + 2 + 3 # sum of the smallest numbers in three piles\n    biggest_pile = 16 - other_piles_sum\n\n    return biggest_pile\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # hundreds digit, cannot be zero\n        for j in range(10): # tens digit\n            for k in range(10): # units digit\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    n = (19 + 1) // 2  # n is the number of terms, and we use integer division since terms are odd numbers\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6  # apply the given formula\n    return sum_squares\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = 2**10 % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let the total number of pearls originally on the strand be x\n    from fractions import Fraction\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(Fraction(1, 2) * x + Fraction(1, 4) * x + Fraction(1, 6) * x + 3, x)\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    original_mean = 120\n    new_mean = 150\n    number_of_original_numbers = 3\n\n    total_original_sum = original_mean * number_of_original_numbers\n    total_new_sum = new_mean * (number_of_original_numbers + 1)\n\n    fourth_number = total_new_sum - total_original_sum\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away_mass = 0.76\n    remaining_mass = initial_mass - given_away_mass\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_basket = 80\n    half_full_basket = 60\n    empty_basket = 2 * half_full_basket - full_basket\n    return empty_basket\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n\n    common_difference = (fourth_term - first_term) // 3\n    last_term = first_term + (number_of_rows - 1) * common_difference\n    \n    total_athletes = (first_term + last_term) * number_of_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip was the 6th counting from the front\n    # Bud was the 6th from the end\n    # There were 5 children between Pip and Bud\n    # To find the total count in the queue, add the positions of Pip and Bud and the 5 children in between\n    pip_position = 6  # Pip's position from the front\n    bud_position = 6  # Bud's position from the end\n    children_between = 5  # Children between Pip and Bud\n\n    # Adding Pip's position, Bud's position, and the children between gives the total\n    # We subtract one because we are counting Pip twice: once from the front and once as part of the children between\n    total_children = pip_position + bud_position + children_between - 1\n\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    sale_price = 99000\n    \n    # Let cost_price_profit be the cost price of the house sold at a profit\n    # Let cost_price_loss be the cost price of the house sold at a loss\n    # Since he made a 10% profit on one and a 10% loss on the other,\n    # cost_price_profit * (1 + 10%) = sale_price => cost_price_profit = sale_price / (1 + 10%)\n    # cost_price_loss * (1 - 10%) = sale_price => cost_price_loss = sale_price / (1 - 10%)\n    \n    cost_price_profit = sale_price / 1.1\n    cost_price_loss = sale_price / 0.9\n    \n    # The total cost price is the sum of the cost prices of the two houses\n    total_cost_price = cost_price_profit + cost_price_loss\n    \n    # The total sale price is the sum of the sale prices of the two houses\n    total_sale_price = 2 * sale_price\n    \n    # If total_sale_price > total_cost_price, then it is a profit otherwise a loss\n    # Profit or Loss amount is the difference between the total sale price and the total cost price\n    profit_or_loss_amount = total_sale_price - total_cost_price\n    \n    return profit_or_loss_amount\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_family_now = 29 * 6\n    total_age_parents_now = total_age_family_now - 64\n    total_age_parents_three_years_ago = total_age_parents_now - 3 * 2\n    average_age_parents_three_years_ago = total_age_parents_three_years_ago / 2\n    return average_age_parents_three_years_ago\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    papers = 18\n    interval = 3\n\n    leaves = papers // (interval + 1)\n\n    return leaves\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings = 56\n    completed_paintings = 35\n    days_taken = 5\n    \n    paintings_per_day = completed_paintings / days_taken\n    remaining_paintings = total_paintings - completed_paintings\n    more_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(more_days_needed)\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    # The final power of 2 in the denominator will be (2^0 + 2^1 + ... + 2^2009)\n    # which is a geometric series.\n    n = sum(2**i for i in range(2010))\n    \n    # Since the result is to be matched with the format 2^(2^n), we need to find n\n    # such that 2^n equals the sum we calculated.\n    # This requires taking a log base 2 on both sides of the equation 2^n = sum\n    from math import log2\n    ans = int(log2(n))\n    return ans\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8       # 5th term\n    term_12 = 50     # 12th term\n    # The common difference (d) can be calculated using the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # term_12 = term_5 + (12 - 5) * d\n    # Solving for d:\n    d = (term_12 - term_5) / (12 - 5)  # Difference in terms divided by difference in term numbers\n    return d\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    last_term = 242\n    # Calculate the total number of terms in the sequence\n    total_terms = ((last_term - first_term) // common_difference) + 1 \n    # Since each time we erase the first three numbers, we repeat this process (total_terms - 3) times\n    for _ in range(total_terms - 3):\n        sum_of_first_three = first_term + (first_term + common_difference) + (first_term + 2 * common_difference)\n        first_term += (3 * common_difference)\n        last_term = sum_of_first_three\n    # after the process, the second number will be the first_term + common_difference\n    second_number = first_term + common_difference\n\n    return second_number\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's denote the weights of Pip, Bud, and Bob as P, B, and Bo respectively.\n    # According to the problem, we have the following equations:\n    # (P + B) / 2 = 30  -->  P + B = 60  (Equation 1)\n    # (P + Bo) / 2 = 33  -->  P + Bo = 66  (Equation 2)\n    # (B + Bo) / 2 = 36  -->  B + Bo = 72  (Equation 3)\n\n    # From Equation 1: P = 60 - B\n    # From Equation 2: P = 66 - Bo\n    # From Equation 3: B + Bo = 72\n\n    # Using Equation 1 and 2, we set them equal to solve for Bo:\n    # 60 - B = 66 - Bo\n    # Bo = 66 - 60 + B\n    # Bo = 6 + B  (Equation 4)\n\n    # Substitute Equation 4 into Equation 3:\n    # B + (6 + B) = 72\n    # 2B + 6 = 72\n    # 2B = 72 - 6\n    # 2B = 66\n    # B = 33\n\n    # Now we can find P from Equation 1:\n    # P = 60 - B\n    # P = 60 - 33\n    # P = 27\n\n    return 27\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_speed, distance, time_rain = symbols('original_speed distance time_rain')\n\n    # Time for 2400m at reduced speed (80% of original speed)\n    time_for_2400 = 2400 / (0.8 * original_speed)\n\n    # Equation 1: Distance = speed * time (normal condition)\n    equation1 = Eq(distance, original_speed * 30)\n\n    # Equation 2: Total Distance = speed * (time until rain) + 2400m at reduced speed\n    equation2 = Eq(distance, original_speed * (30 + 5 - time_rain) + 2400)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (original_speed, distance, time_rain))\n\n    return solution[distance]\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    work_done_by_one_person_in_one_day = 1 / (initial_people * initial_days)\n    work_needed_in_target_days = 1 / target_days\n    total_people_needed = work_needed_in_target_days / work_done_by_one_person_in_one_day\n\n    additional_people_needed = total_people_needed - initial_people\n\n    # As we can't have a fraction of a person, round up to the nearest whole number\n    return int(math.ceil(additional_people_needed))\n\nimport math\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_depreciation = 0.6957\n\n    final_value = initial_value * approximate_depreciation\n    return final_value\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = total // 3\n    return ans\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # Temperature at 5:00 am\n    rate_of_rise = 2  # Degrees Celsius per hour\n    hours_passed = 5.5  # Hours passed from 5:00 am to 10:30 am\n\n    current_temp = initial_temp + hours_passed * rate_of_rise\n\n    return current_temp\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let x be the number of students in school A originally\n    # Let y be the number of students in school B originally\n    # We have two equations based on the problem:\n    # Equation (1): x + y = 1050 (total students in both schools)\n    # Equation (2): x - 20 = y + 10 + 20 (school A has 10 more students than school B after moving 20 students)\n    # Simplify Equation (2): x - y = 50 (combining terms)\n    \n    # Importing simultaneous equation solver from sympy\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for the variables\n    x, y = symbols('x y')\n    \n    # Formulating equations based on the problem\n    equation1 = Eq(x + y, 1050) # The sum of students in both schools\n    equation2 = Eq(x - y, 50)   # School A has 10 more students than school B after the transfer\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Accessing the solution for x, which represents the original number of students in school A\n    return solutions[x]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Mrs. Chan had\n    x = symbols('x')\n\n    # Mrs. Chan spent half of her money plus $1 on clothing\n    remaining_after_shop_A = (x / 2) - 1\n\n    # Mrs. Chan spent half of the remaining money plus $2 on a pair of shoes\n    remaining_after_shop_B = (remaining_after_shop_A / 2) - 2\n\n    # Mrs. Chan spent 1/3 of the remaining plus $3 on a bag and had $49 left\n    remaining_after_shop_C = remaining_after_shop_B - (remaining_after_shop_B / 3) - 3\n\n    # The amount remaining after shopping at shop C is $49\n    equation = Eq(remaining_after_shop_C, 49)\n\n    # Solve the equation for x\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell can pick 3 blue, then 3 white, and then he must pick a green pencil\n    # because there are only green pencils left. This is the worst-case scenario.\n    total_pencils = 3 + 3 + 1  \n    return total_pencils\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books on the top shelf\n    x = symbols('x')\n\n    # Total number of books is the sum of an arithmetic series starting at x and with common difference -3\n    # Formula for the sum of an arithmetic series: n/2 * (first_term + last_term)\n    # Here, n = 7 (number of shelves)\n    total_books_eq = Eq(7/2 * (2*x + (7 - 1) * -3), 280)\n\n    # Solve for x\n    num_books_top_shelf = solve(total_books_eq, x)\n\n    return num_books_top_shelf[0]\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n    \n    # Iterate over the divisors to find which ones turn 2240/n into a square number\n    for d in divs:\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    return lcm(3, 5, 9, 3*7)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = (math_competition + art_competition) - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    total_sum = 0\n    for i in range(1, 310 + 1):\n        total_sum += sum_of_digits(i)\n    \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kids, candies = symbols('kids candies')\n\n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(kids * 18, candies + 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kids, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_for_9_items = 6.30\n    cost_per_item = cost_for_9_items / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import sqrt, pow\n\n    expression = 16.7 - pow((pow(-4.56, 2) - pow(8.1, 3)) / pow(7.2, 3) / (-sqrt(6.75) - (-30.15)), 1/3)\n    \n    ans = round(expression, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    target_age_sum = 48\n    years_later = (target_age_sum - (oliver_age_now + lin_age_now)) // 2\n    return years_later\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # The sum of the scores of 5 students\n    total_score_5_students = 5 * 87\n    # The sum of the scores of 6 students (including Jim)\n    total_score_6_students = 6 * 88\n    # Jim's score is the difference between the sums\n    jims_score = total_score_6_students - total_score_5_students\n    return jims_score\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Jayden's speed is 7k, and Carter's speed is 4k.\n    # They meet when Jayden has walked 7 parts of the distance and Carter has walked 4 parts.\n    \n    # Let d be the distance Jayden walks before meeting Carter the first time.\n    # Thus, Carter walks 440 - d in the same period.\n    \n    # The ratio of speeds is the ratio of distances covered in the same amount of time.\n    # Jayden:Carter = 7:4\n    # Therefore, d / (440 - d) = 7 / 4\n    # Solve for d: 4d = 7(440 - d)\n    \n    # 4d = 7 * 440 - 7d\n    # 4d + 7d = 7 * 440\n    # 11d = 7 * 440\n    d = (7 * 440) / 11\n    \n    # After meeting, Jayden turns around and walks back towards Carter.\n    # They meet when Jayden has walked d more.\n    # So the meeting point is d away from place A.\n    return d\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_lims_age, mrs_lims_age = symbols('mr_lims_age mrs_lims_age')\n    \n    # Creating equations based on the given information\n    equation1 = Eq((mr_lims_age - 7) / (mrs_lims_age - 7), 6/5)\n    equation2 = Eq(mr_lims_age + mrs_lims_age, 69)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (mr_lims_age, mrs_lims_age))\n    \n    return solutions[mr_lims_age]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    return 58 + 63 + 59 + 62 + 63 + 56 + 61\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # given that one-fifth of the length is 6cm\n    total_length = one_fifth_length * 5  # calculate the total length\n    one_third_length = total_length / 3  # calculate one-third of the total length\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_reduction = initial_price * 0.10\n    price_after_first_reduction = initial_price - first_reduction\n    second_reduction = price_after_first_reduction * 0.20\n    final_price = price_after_first_reduction - second_reduction\n    return final_price\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity_per_minibus = 6\n    \n    minibusses_needed, remainder = divmod(total_boys, capacity_per_minibus)\n\n    if remainder > 0:\n        minibusses_needed += 1\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bats = symbols('bats')\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n    \n    # Total cost price for all bats\n    total_cost = bats * cost_price_per_bat\n    \n    # Total selling price for all but 3 bats\n    total_sales = (bats - remaining_bats) * selling_price_per_bat\n    \n    # Set up the equation total_sales = total_cost + profit\n    equation = Eq(total_sales, total_cost + profit)\n    \n    # Solve the equation for the number of bats\n    solutions = solve(equation, bats)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money both had at first\n    x = symbols('x')\n\n    # After spending the money, Raja has (x - 286), Kumar has (x - 109)\n    # According to the problem, Kumar has 4 times as much money as Raja\n    equation = Eq((x - 109), 4 * (x - 286))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution (amount of money they had at first)\n    return solution[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # Total sum of all 10 numbers\n    total_sum = 10 * 1111\n\n    # If x is the mean of the last 6 numbers\n    # then (x - 240) is the mean of the first 4 numbers\n    # 4 * (x - 240) + 6 * x = total_sum\n    # Solve for x\n    x = (total_sum + 4 * 240) / 10\n\n    return x\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a table and a chair\n    table, chair = symbols('table chair')\n\n    # Equation: The table costs $160 more than the chair\n    equation1 = Eq(table, chair + 160)\n\n    # Equation: The cost for 1 table and 5 chairs is $328\n    equation2 = Eq(table + 5 * chair, 328)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    # Assign and return the solution for the cost of one chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60  # in pence\n    bud_money = 110  # 1.10 in pence (£1 = 100p)\n\n    total_money_pence = pip_money + bud_money\n    total_money_pounds = total_money_pence / 100  # convert pence to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate the time for each stage of the race\n    time1 = 280 / 7  # time to cover first 280 meters at 7 m/s\n    time2 = 400 / 5  # time to cover middle 400 meters at 5 m/s\n    distance3 = 800 - (280 + 400)  # remaining distance to cover\n    time3 = distance3 / 8  # time to cover remaining distance at 8 m/s\n\n    # Total time for the entire race\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution() "
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # Create the equation based on the problem statement\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    return total_candies\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's symbolize the rates in terms of volume per minute\n    hot_rate, cold_rate = symbols('hot_rate cold_rate')\n    \n    # Set up the equations\n    # Both taps fill the bath in 10 minutes\n    equation1 = Eq(1 / (hot_rate + cold_rate), 10)\n    \n    # Cold tap runs at twice the rate of hot tap\n    equation2 = Eq(cold_rate, 2*hot_rate)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hot_rate, cold_rate))\n    \n    # With only the cold tap, the time to fill the bath is 1 divided by the rate of the cold tap\n    time_with_cold_only = 1 / solutions[cold_rate]\n    \n    return time_with_cold_only\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    number_of_years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** number_of_years)\n\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from itertools import permutations\n    \n    # Create a permutation of all possible unique digits\n    for p in permutations('0123456789', 4):\n        i, s, p_ = int(p[0]), int(p[1]), int(p[2]) * 10 + int(p[3])\n        # Ensure that P is not 0, as it is the first digit\n        if p_ // 10 == 0:\n            continue\n        # Check the equation IS + IS + IS + IS = PI\n        if (i * 100 + s) * 4 == p_:\n            return p_\n    return None\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2\n    ratio_jocye_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_lori\n    time = 10\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = pow(-4.56, 2) - pow(8.1, 3)\n    denominator = pow(7.2, 3) / (-sqrt(27 / 4) + 30.15)\n    expression = 16.7 - pow(numerator / denominator, 1/3)\n\n    return round(expression, 3)\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1 * 1000 + 500) + (1 * 1000 + 200) + 900\n    weight_per_tin = total_weight_grams / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(i/j for i in range(1, 11) for j in range(i, 11))\n    return ans\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 0\n    pages = 0\n    \n    for i in range(1, total_digits+1):\n        if i < 10:\n            digits_per_page = 1\n        elif i < 100:\n            digits_per_page = 2\n        elif i < 1000:\n            digits_per_page = 3\n        \n        total_digits -= digits_per_page\n        if total_digits < 0:\n            break\n        pages += 1\n    \n    return pages\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have 2 choices each (left or right)\n    choices_for_A_and_B = 2 * 2\n    \n    # C and D have 2! ways to arrange themselves in the middle\n    arrangements_for_C_and_D = 2\n\n    # The total number of different ways they can line up\n    total_ways = choices_for_A_and_B * arrangements_for_C_and_D\n\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    result = (20 / 30) * 27\n    return result\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # We apply the Pigeonhole Principle to find out the minimum number\n    # she must draw to guarantee at least 4 marbles of the same color.\n    \n    # If Janice takes 3 marbles of each color, she could end up with\n    # 3 red, 3 blue, and 3 green, which is 9 marbles and still has no 4 marbles of the same color.\n    # On the next draw, no matter what color she gets, she will have 4 marbles of that color.\n\n    min_marbles = (3 * 3) + 1\n    return min_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    all_possible_combinations = set(permutations(digits, 2))\n    ans = len(all_possible_combinations)\n    return ans\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it is the ten's place of A\n        for y in range(10):  # y can be 0-9\n            A = 10*x + y\n            B = 200 + 20*x + 2*y\n            if B == 6*A + 25:\n                return A\n    return None  # should never reach here if there is a valid solution\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done_by_3_workers_in_3_days = workers * days\n\n    # Work done by 1 worker in the same 3 days would be a third of 3 workers\n    work_done_by_1_worker_in_3_days = work_done_by_3_workers_in_3_days / workers\n\n    # Hence, 1 worker will take 3 times longer to do the same amount of work done by 3 workers in 3 days\n    days_for_1_worker = work_done_by_3_workers_in_3_days / work_done_by_1_worker_in_3_days\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the operation without any brackets as a baseline\n    baseline = 285 + 15 / 5 - 2\n\n    # Using set to store unique results when inserting brackets\n    results = set()\n\n    # Adding brackets in different ways and calculating the results\n    # Case 1: Only one pair of brackets\n    results.add((285 + 15) / 5 - 2)\n    results.add(285 + (15 / 5 - 2))\n\n    # Case 2: Two pairs of brackets (One around the division and another elsewhere)\n    results.add(((285 + 15) / 5) - 2)\n    results.add(285 + (15 / (5 - 2)))\n\n    # Filter out the baseline result as it has no brackets\n    results.discard(baseline)\n    \n    # The number of unique results excluding the baseline\n    return len(results)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked = 100  # initially all lockers are unlocked\n    for i in range(1, 101):\n        if i % 3 == 0:  # Lock the lockers divisible by 3\n            unlocked -= 1\n        if i % 5 == 0:  # Toggle the state for lockers divisible by 5\n            unlocked += -1 if i % 3 == 0 else 1\n    return unlocked\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations(\"ABCDEFG\"):\n        p = \"\".join(p)\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or \\\n           p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            if 'DE' not in p and 'ED' not in p:\n                if 'FG' in p or 'GF' in p:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Ratio of speeds\n    nicolas_speed = 3\n    yiding_speed = 2\n    \n    # When Nicolas is at level 16, find Yiding's level\n    yiding_level = (yiding_speed / nicolas_speed) * 16\n\n    return int(yiding_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    # Let x be the cost of one cake and y be the amount of money Lucy has\n    # If she buys 10 cakes and borrows $11: 10x - y = 11\n    # If she buys 13 cakes and borrows $26: 13x - y = 26\n    # We can set up simultaneous equations to solve for x and y:\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    equation1 = 10 * x - y - 11\n    equation2 = 13 * x - y - 26\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    cake_cost = solutions[x]\n\n    return cake_cost\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / 10\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n    \n    number = divisor * quotient + remainder\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_scores = 5 * 40\n    known_scores = 37 + 53 + 29 + 41\n    x = total_scores - known_scores\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "def solution():\n    from math import factorial\n\n    total_letters = len(\"CHEESE\")  # Total number of letters in the word\n    c_count = 1  # Number of 'C's\n    h_count = 1  # Number of 'H's\n    e_count = 3  # Number of 'E's\n    s_count = 1  # Number of 'S's\n\n    # The number of arrangements of the word 'CHEESE' is given by the\n    # formula for permutations of a multiset: n! / (n1! * n2! * ... * nk!)\n    # where n is the total number of items, and ni is the number of occurrences of the i-th type of item\n    ans = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    \n    # Counting numbers with no '7's.\n    no_sevens = 8 * 9 * 9  # 1-6,8-9 for hundreds, 0-6,8-9 for tens and units\n    \n    # Counting numbers with exactly one '7'.\n    one_seven = (8 * 9 * 1) + (8 * 1 * 9) + (1 * 9 * 9)  # (7xx, x7x, xx7) without repetitions\n    \n    # At least two sevens = Total - no sevens - one seven\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for the number of goats\n    goats = symbols('goats')\n\n    # Cows are initially 65% of the total animals. So, goats are 35%.\n    initial_total = goats / 0.35\n    cows = initial_total * 0.65\n\n    # 240 more cows and goats were added. The number of goats doubled.\n    new_goats = 2 * goats\n    new_total = initial_total + 240\n    new_cows = new_total * 0.85  # 65% + 20% increase means 85%\n\n    # Equations based on the problem statement.\n    equation = Eq(new_cows, cows + 240)\n\n    # Solve the equation for the original number of goats\n    original_goats = solve(equation, goats)\n\n    return original_goats[0]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for number in range(10000, 100000):\n        original_number = int(str(number) + '9')\n        new_number = int('9' + str(number))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # Smallest possible non-zero positive divisor\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    ans = sum(j/i for i in range(2, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n    \n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n    \n    # All possible digits for A, B, C, D\n    digits = range(10)\n    \n    for perm in permutations(digits, 4):\n        A, B, C, D = perm\n        # Skip impossible situations\n        if A == 0 or C == 0:  # No leading zero\n            continue\n\n        # Form the numbers and check the equation\n        if (A * 101 + B * 10) + (C * 101 + D * 10) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for Jonathan and Abigail's current ages\n    jonathan_age, abigail_age = symbols('jonathan_age abigail_age')\n\n    # Abigail is 6 years older than Jonathan\n    eq1 = Eq(abigail_age, jonathan_age + 6)\n    \n    # Six years ago, she was twice as old as he was\n    # Abigail's age six years ago: abigail_age - 6\n    # Jonathan's age six years ago: jonathan_age - 6\n    eq2 = Eq(abigail_age - 6, 2 * (jonathan_age - 6))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (jonathan_age, abigail_age))\n\n    # Return Jonathan's age\n    return solutions[jonathan_age]\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)  # The total number of candies\n    equation2 = Eq(pip - bud, 2)   # Pip has 2 more candies than Bud\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the cost of one apple as 'a' and one banana as 'b'\n    a, b = symbols('a b')\n    \n    # Creating two equations based on the information given\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculating the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = \"2020202020220202020\"\n    length_of_sequence = len(sequence)\n    full_repeats = 535 // length_of_sequence\n    remaining_digits = 535 % length_of_sequence\n    count_twos_full = sequence.count(\"2\") * full_repeats\n    count_twos_partial = sequence[:remaining_digits].count(\"2\")\n    count_twos = count_twos_full + count_twos_partial\n    return count_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 1\n    for i in range(36, 42):\n        product *= i\n        product %= 7  # Find the remainder at each step to avoid large numbers\n    \n    return product\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    total_days = symbols('total_days')\n    total_pages = symbols('total_pages')\n\n    # Form equations based on the problem statement\n    equation1 = Eq(total_pages, 30 * (total_days + 2))\n    equation2 = Eq(total_pages, 39 * (total_days - 4))\n    \n    # Solve the equations\n    solution = solve((equation1, equation2), (total_days, total_pages))\n    \n    # Retrieve the solutions\n    days_to_finish = solution[total_days]\n    pages_in_book = solution[total_pages]\n    \n    return days_to_finish, pages_in_book\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Given three examples\n    # 4 Δ 1 = 17 -> 4*1 + 4 + 1\n    # 5 Δ 4 = 29 -> 5*4 + 5 + 4\n    # 8 Δ 16 = 80 -> 8*16 + 8 + 16\n    \n    # Find the pattern based on the examples above\n    # It seems that \"a Δ b = a*b + a + b\" for each combination.\n    \n    a = 10\n    b = 9\n    ans = a * b + a + b  # Apply the pattern to find 10 Δ 9\n    \n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked = 85 + 135\n    cookies_given_away = 55\n    cookies_left = cookies_baked - cookies_given_away\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = 5 * adults + 3 * children\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    # given relations\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    # solving equations\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    # Calculate the difference between the cost of the dress and the shirt\n    difference = solutions[dress] - solutions[shirt]\n\n    return difference\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of fifty-cent coins and one-dollar coins\n    fifty_cent, one_dollar = symbols('fifty_cent one_dollar')\n    \n    # Equation for the number of coins before the mother gave him more\n    initial_equation = Eq(fifty_cent, (2/7) * (fifty_cent + one_dollar))\n    \n    # Equation after the mother gave him 10 one-dollar coins and 5 dollars in fifty-cent coins (i.e., 10 fifty-cent coins)\n    final_equation = Eq(one_dollar + 10, 2 * (fifty_cent + 10))\n\n    # Solve the system of equations\n    solutions = solve((initial_equation, final_equation), (fifty_cent, one_dollar))\n    \n    # The total number of coins he had at first is the sum of fifty-cent and one-dollar coins\n    total_coins_initially = solutions[fifty_cent] + solutions[one_dollar]\n    \n    return total_coins_initially\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    andy_total_savings = 378\n    brenda_daily_savings = 6\n\n    days_passed = andy_total_savings // andy_daily_savings\n    brenda_total_savings = brenda_daily_savings * days_passed\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume factor is 1 (100%)\n    original_volume_factor = 1\n\n    # New length factor is 110% or 1.1\n    new_length_factor = 1 + (10 / 100)\n\n    # New breadth factor is 4/5 or 0.8\n    new_breadth_factor = 4 / 5\n\n    # New height factor is 11/10 or 1.1\n    new_height_factor = 11 / 10\n\n    # Calculate new volume factor by multiplying the individual factors\n    new_volume_factor = new_length_factor * new_breadth_factor * new_height_factor\n\n    # Convert new volume factor to percentage of original volume\n    new_volume_percentage = new_volume_factor * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person initially had\n    anna_initial, betsy_initial, charlene_initial = symbols('anna_initial betsy_initial charlene_initial')\n\n    # Equations based on the problem statement\n    equation1 = Eq(anna_initial + betsy_initial + charlene_initial, 168)\n    equation2 = Eq(betsy_initial + 15 - 8, anna_initial + 8)\n    equation3 = Eq(charlene_initial - 15, charlene_initial * (7 / (2 + 5 + 7)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (anna_initial, betsy_initial, charlene_initial))\n\n    return solutions[betsy_initial]\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2 / 3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_points = 44\n    correct_answer_points = 6\n    incorrect_answer_points = -2\n    number_of_questions = 10\n\n    # Let x be the number of correct answers Eddie got\n    # Each correct answer gives 6 points, so 6*x points come from correct answers\n    # The remaining questions are incorrect, thus (10-x) incorrect answers\n    # Each incorrect or skipped answer results in -2 points, so -2*(10-x) points from incorrect answers\n    # The total points are the sum of points from correct and incorrect answers:\n    # 6*x + (-2)*(10-x) = 44\n\n    # Solving the equation 6*x - 20 + 2*x = 44\n    # 8*x = 44 + 20\n    # 8*x = 64\n    # x = 64 / 8\n    # x = 8\n\n    # Eddie answered 8 questions correctly\n    correct_answers = (total_points + incorrect_answer_points * number_of_questions) / (correct_answer_points - incorrect_answer_points)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    contestants = 8\n    prizes = 3  # gold, silver, and bronze\n\n    ans = factorial(contestants) // factorial(contestants - prizes)\n\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    total_points = 10\n    points_in_triangle = 3\n    number_of_triangles = comb(total_points, points_in_triangle)\n    return number_of_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percent = 60\n    total_masks = remaining_masks / ((100 - completed_percent) / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour.\n    # Then (40 - x) is the number of mushrooms gathered in the second hour.\n\n    # According to the problem, if he gathered 26 more mushrooms in the first hour,\n    # the number of mushrooms would be equal to the second hour.\n    # So, x + 26 = 40 - x\n\n    # Solving for x\n    x = (40 - 26) / 2  # Simplifies to x = 7\n\n    # Number of mushrooms gathered in the second hour is 40 - x\n    second_hour_mushrooms = 40 - x\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Scan and Ted's current ages\n    scan, ted = symbols('scan ted')\n\n    # Given conditions\n    condition_now = Eq(scan / ted, 1 / 4)\n    condition_future = Eq((scan + 4) / (ted + 4), 1 / 3)\n\n    # Solve the system of equations\n    ages_now = solve((condition_now, condition_future), (scan, ted))\n\n    scan_age_now = ages_now[scan]\n    ted_age_now = ages_now[ted]\n\n    # Iterate over previous years to find when the ratio was 1:9\n    for years_ago in range(1, ted_age_now):\n        if (scan_age_now - years_ago) / (ted_age_now - years_ago) == 1 / 9:\n            return years_ago\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The largest number of questions Noa can solve would mean the other four\n    # classmates have to solve the smallest numbers of questions possible.\n    # Since each student must solve at least one question and no two students\n    # can solve the same number of questions, we start by assigning\n    # the smallest unique numbers of questions to the classmates.\n\n    # Allocate questions to the four classmates such that each gets at least\n    # one and each gets a different number. We start from 1 and go up to 4.\n    # This minimizes the number of questions they solve.\n    classmates_total = sum(range(1, 5))  # this is 1 + 2 + 3 + 4\n\n    # The remaining questions will be the maximum Noa can solve.\n    noa_max_questions = 40 - classmates_total\n\n    return noa_max_questions\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    \n    difference = hottest - coldest\n    \n    return difference\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Speed for jogging and walking.\n    jog_speed = 6.5  # miles per hour\n    walk_speed = 4.5  # miles per hour\n\n    # Time spent jogging and walking.\n    jog_time = 1  # from 6:30 AM to 7:30 AM\n    walk_time = 2  # from 7:30 AM to 9:30 AM\n\n    # Distance traveled while jogging and walking.\n    jog_distance = jog_speed * jog_time\n    walk_distance = walk_speed * walk_time\n\n    # Total distance traveled.\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    sequence = \"2020020202202002\"  # One full cycle of the sequence\n    cycle_length = len(sequence)  # Length of the cycle\n    count_2_in_cycle = sequence.count('2')  # Count of '2's in one full cycle\n\n    full_cycles = 535 // cycle_length  # Number of full cycles within 535 digits\n    remaining_digits = 535 % cycle_length  # Remaining digits after the full cycles\n\n    count_2 = full_cycles * count_2_in_cycle  # Count of '2's in full cycles\n    count_2 += sequence[:remaining_digits].count('2')  # Count of '2's in the remaining part of the sequence\n\n    return count_2\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let x be the number of guppies\n    # From the information given:\n    # The number of goldfish is 2 * x\n    # The number of mollies is 2 * (2 * x) = 4 * x\n    # And it's given that there are 276 mollies, so:\n    # 4 * x = 276\n    # Solving for x gives us the number of guppies\n    x = 276 / 4\n\n    # The difference between the number of mollies and guppies is:\n    # 276 (number of mollies) - x (number of guppies)\n    difference = 276 - x\n\n    return int(difference)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    model_tree_height_cm = real_tree_height_m * scale_ratio * 100  # convert meters to cm\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'f' be the number of foldable bicycles, 'n' the number of non-foldable bicycles\n    f, n = symbols('f n')\n    \n    # Given that there were 476 bicycles in total\n    total_bicycles_eq = Eq(f + n, 476)\n    \n    # After 208 bicycles were sold\n    bicycles_sold = 208\n    \n    # The remaining bicycles are (476 - 208)\n    remaining_bicycles = 476 - bicycles_sold\n        \n    # Given that 5/9 of the non-foldable bicycles are left in the shop\n    # Therefore, 4/9 of the non-foldable bicycles were sold\n    non_foldable_sold_eq = Eq(n * (4/9), bicycles_sold - f * (3/7))\n    \n    # The fraction of foldable bicycles sold is 3/7 because 4/7 are left, implying that 3/7 are sold\n    # Total sold bicycles is the sum of sold non-foldable and foldable bicycles\n    total_sold_eq = Eq(bicycles_sold, n * (4/9) + f * (3/7))\n    \n    # Solve the two equations simultaneously\n    solutions = solve((total_bicycles_eq, total_sold_eq), (f, n))\n    \n    # Calculate the number of foldable bicycles sold (3/7 of total foldable bicycles 'f')\n    foldable_sold = solutions[f] * (3/7)\n    \n    return int(foldable_sold)\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "from sympy import divisors\n\ndef solution():\n    factors = divisors(20)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_marks = 8\n    wrong_penalty = -4\n    total_score = 100\n\n    # Assume Isabelle got x questions correct, then she must have got (20-x) questions wrong.\n    # Her score will be 8x - 4(20-x) which equals 100.\n    # Solve for x to find the number of correct answers.\n    \n    for x in range(1, total_questions + 1):\n        score = x * correct_marks + (total_questions - x) * wrong_penalty\n        if score == total_score:\n            return x\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    students = 20\n    min_pieces_per_student_to_guarantee_3 = 3\n    max_students_with_less_than_3 = students - 1\n    # Each of the other students might have only 2 pieces, \n    # so calculate the pieces required to guarantee one student gets at least 3 pieces.\n    candies = max_students_with_less_than_3 * (min_pieces_per_student_to_guarantee_3 - 1) + min_pieces_per_student_to_guarantee_3\n    \n    return candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    # Use sympy to solve the system of equations\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of fifty-cent coins\n    # Let y be the initial number of one-dollar coins\n    x, y = symbols('x y')\n\n    # Given equations based on the problem\n    # Initial distribution of coins is 2/7 and 5/7\n    equation1 = Eq(x, 2/7 * (x + y))\n    \n    # After receiving additional coins\n    equation2 = Eq(2 * (x + 5*2), (y + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the original total number of coins\n    original_total_coins = solutions[x] + solutions[y]\n\n    return original_total_coins\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 60 / 100 * 765\n    return result\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum = 0\n    for n in range(1, 20, 2):\n        sum += n\n    return sum\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals initially be x\n    # Let the initial number of goats be y\n    x, y = symbols('x y')\n\n    # Initial conditions\n    # cows = 65% of x\n    # goats = y = 100% of x - 65% of x = 35% of x\n    equation1 = Eq(0.65 * x, x - y)\n\n    # New conditions after 240 more animals are added:\n    # total number of animals = x + 240\n    # cows = (65% + 20%) of (x + 240) = 85% of (x + 240)\n    # goats doubled = 2 * y\n    equation2 = Eq(0.85 * (x + 240), x - y + 240)\n    equation3 = Eq(2 * y, y + y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # Book counting from the left\n    left_books = 6\n    # Position from the right\n    right_position = 14\n\n    # Total books is the sum of books on the left, the favorite book, and the books on the right\n    # But as we count the favorite book as 14th from right, we already include the favorite book\n    # in right_position, so we do not need to add it separately\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    temperature_diff = 17\n    initial_temperature = 8\n    final_temperature = initial_temperature - temperature_diff\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return 48 / (4/5)\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**-12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    friends = 6\n\n    sweets_for_friends = (total_sweets - for_sister) // friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12  # The length of the side of the square lawn\n    edge_distance = 1.5  # The distance of each bush from the edge of the garden\n    bush_distance = 3  # The distance between each bush\n\n    # Calculate the effective length available for planting bushes\n    effective_length = side_length - 2 * edge_distance\n\n    # Calculate the number of bushes that can be planted on one side\n    # Subtracting edge_distance at the end ensures that the last bush is also at least edge_distance away from the corner\n    number_bushes_per_side = int(effective_length / bush_distance)\n\n    # Since bushes are planted on all four sides, multiply the number per side by 4\n    total_bushes = number_bushes_per_side * 4\n\n    return total_bushes\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132\n    speed_van_2 = 78\n    time = 8\n\n    distance_apart = (speed_van_1 + speed_van_2) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3*x + 1), 1/6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 0.60\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    remaining_work = 360\n    percentage_completed = 60\n\n    total_masks = remaining_work / ((100 - percentage_completed) / 100)\n    \n    return int(total_masks)\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    count = 0\n    for bags in range(2, num_apples + 1, 2):\n        if num_apples % bags == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # 9 rabbits for 3 goats means 3 rabbits for 1 goat\n    rabbit_to_goat = 3\n\n    # 2 goats for 4 cows means 1 goat for 2 cows\n    goat_to_cow = 2\n\n    # Calculating how many rabbits can be exchanged for 2 cows\n    # First calculate how many goats are needed for 2 cows\n    goats_for_2_cows = 2 / goat_to_cow\n\n    # Then calculate how many rabbits are needed for the required goats\n    rabbits_for_2_cows = goats_for_2_cows * rabbit_to_goat\n\n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    \n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n    \n    # Let's say Amna answered 'correct' questions correctly.\n    # The rest 'attempted_questions - correct' would be wrong.\n    # 4 * correct - (attempted_questions - correct) = total_score\n    # 5 * correct = total_score + attempted_questions\n    # correct = (total_score + attempted_questions) / 5\n    \n    correct = (total_score + attempted_questions) // 5\n    \n    return correct\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    pencils, pens = symbols('pencils pens')\n\n    # Original ratio\n    ratio_original = Eq(pencils / pens, 4 / 5)\n    # New ratio after exchange\n    ratio_new = Eq((pencils + 1) / (pens - 1), 7 / 8)\n\n    # Solve the system of equations\n    solutions = solve((ratio_original, ratio_new), (pencils, pens))\n\n    total_items = solutions[pencils] + solutions[pens]\n    return total_items\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n    last_term = first_term + (num_rows - 1) * difference\n\n    total_seats = (num_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = custom_op(custom_op(custom_op(custom_op(custom_op(custom_op(10, 9), 8), 7), 6), 5), 4)\n    return ans\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    percent_boys = 40 / 100\n    percent_girls = 1 - percent_boys\n    num_girls = 72\n\n    total_children = num_girls / percent_girls\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    # Let g be the number of guppies\n    g = symbols('g')\n    # According to the problem, the number of mollies (m) is 2 * goldfish (g),\n    # and goldfish (gf) is 2 * guppies (g). Therefore, mollies (m) is 4 * guppies (g).\n    m = 4 * g\n    # Given that the number of mollies is 276\n    equation = Eq(m, 276)\n    # Solve for the number of guppies (g)\n    guppies = solve(equation, g)[0]\n    # Calculate the difference between the number of mollies and guppies\n    more_mollies_than_guppies = 276 - guppies\n    return more_mollies_than_guppies\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    model_tree_height_cm = real_tree_height_m * scale_ratio * 100  # converting meters to centimeters\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total cost of the books; Let y be the discount rate on the second day\n    x, y = symbols('x y')\n\n    # Amount of profit planned\n    planned_profit = 0.6 * x\n    \n    # Amount sold the first day\n    first_day_sales = 0.7 * (1.6 * x)  # 70% of books at a 60% profit\n    \n    # Amount sold the second day\n    second_day_sales = 0.3 * x * (1 - y)  # remaining 30% of books with a discount of y%\n    \n    # Total profit is 80% of planned profit\n    total_profit = 0.8 * planned_profit\n    \n    # First day profit plus second day sales should equal the total profit\n    equation = Eq(first_day_sales + second_day_sales - x, total_profit)\n\n    # Solve for discount rate y\n    solution = solve(equation, y)\n\n    return solution[y]\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    from math import factorial\n\n    total_contestants = 8\n    num_prizes = 3\n    \n    ways = factorial(total_contestants) // factorial(total_contestants - num_prizes)\n    return ways\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n    total_cost = 39.60\n    tuna_puffs = 12\n    curry_puffs = 19\n\n    equation1 = Eq(tuna_puff_price - curry_puff_price, 0.20)\n    equation2 = Eq(tuna_puff_price * tuna_puffs + curry_puff_price * curry_puffs, total_cost)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2 and (10 * d1 + d2) % 2 != 0:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Every boy got 2 balloons.\n    # Every girl got 4 balloons.\n    # There were a total of 38 kids.\n    # There were a total of 126 balloons.\n    \n    equation1 = Eq(boys + girls, 38)  # total number of children\n    equation2 = Eq(2 * boys + 4 * girls, 126)  # total number of balloons\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    first_count = 10\n    last_count = 25\n    ans = last_count - first_count + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_per_minute = 36  # meters per minute\n    time_in_seconds = 200  # seconds\n    \n    # Convert minutes to seconds for the speed (1 minute = 60 seconds)\n    speed_per_second = speed_per_minute / 60\n    \n    # Calculate the distance covered in 200 seconds\n    distance = speed_per_second * time_in_seconds\n    \n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    result = 1\n    for i in range(3, 20, 2): # 3 to 19, with steps of 2\n        result *= (1 + 2/i)\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_cm = 85\n    roll_length_cm = 2000\n    strings_needed = 400\n\n    total_length_needed_cm = string_length_cm * strings_needed\n    rolls_needed = total_length_needed_cm / roll_length_cm\n\n    # If the number of rolls needed is not an integer, we need to buy one more roll\n    if rolls_needed > int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1\n    else:\n        rolls_needed = int(rolls_needed)\n    \n    return rolls_needed\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x for the total number of animals initially, and y for the number of goats initially.\n    x, y = symbols('x y')\n\n    # Originally, 65% were cows, so 35% were goats.\n    # Equation representing the original number of goats\n    equation1 = Eq(y, 0.35 * x)\n\n    # After 240 animals were added, cows became 85% of all animals.\n    # New total number of animals is x + 240\n    # New number of cows is 0.85 * (x + 240)\n    # Since number of goats doubled, new number of goats is 2 * y\n    # Equation representing the new totals after adding 240 animals\n    equation2 = Eq(0.85 * (x + 240), x - y + 240)\n\n    # Solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want to find the initial number of goats, which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n    equation1 = Eq(john, emma + 7)\n    equation2 = Eq(emma + john + 2*3, 27)\n    \n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for num_cookies in range(1, 40):\n        if (num_cookies - 5) % 6 == 0 and (num_cookies + 3) % 5 == 0:\n            return num_cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    # Let the s be the total salary\n    from sympy import symbols, Eq, solve\n    s = symbols('s')\n\n    # He donates 1/4 of his salary to charity\n    donation = s / 4\n\n    # He spends 5/6 of the remainder (s - donation) on food\n    food = 5 / 6 * (s - donation)\n\n    # He spends 78 more on food than on donation to charity\n    equation = Eq(food, donation + 78)\n\n    # Solve the equation for s\n    salary = solve(equation, s)\n\n    return salary[0]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time David walks at 150m per minute\n    x = symbols('x')\n\n    # David walks 150m/min for x minutes before increasing his speed\n    initial_distance = 150 * x\n\n    # David continues to walk at 200m/min for (x - 10) minutes after increasing his pace\n    # This is because he increased his speed 10 minutes later\n    final_distance = 200 * (x - 10)\n\n    # The total distance walked is the sum of distances at both speeds\n    total_distance = Eq(initial_distance + final_distance, 3700)\n\n    # Solve for x\n    time_spent = solve(total_distance, x)\n\n    return time_spent[0]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    n = 15 - 7\n    \n    common_difference = (a15 - a7) / n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equations = [\n        Eq(x % 2, 1),\n        Eq(x % 3, 2),\n        Eq(x % 5, 4),\n        Eq(x % 7, 6)\n    ]\n    \n    sol = solve(equations, x)\n    # Filter out the solutions less than 400\n    ans = [s.evalf() for s in sol if s.is_real and s < 400][0]\n\n    return ans\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number only depends on the last digit of factors\n    # The last digit of powers of 2 cycles every 4: 2 -> 4 -> 8 -> 6 -> 2 -> ...\n    # The last digit of powers of 3 cycles every 4: 3 -> 9 -> 7 -> 1 -> 3 -> ...\n    # Since we have 2017 elements which exceeds the cycle of 4, we only need \n    # to consider the last digit of powers with exponent modulo 4\n\n    # For 2^2017, the exponent 2017 mod 4 equals 1, so the last digit is the same as 2^1\n    last_digit_2 = 2\n    \n    # For 3^2017, the exponent 2017 mod 4 equals 1, so the last digit is the same as 3^1\n    last_digit_3 = 3\n    \n    # The last digit of the product is last digit of the product of last digits of individual numbers\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # The sum of the digits of a number divisible by 9 must also be divisible by 9\n    # The fixed digits sum up to 4 + 7 + 1 + 9 = 21\n    fixed_sum = 21\n    # We will now check for all combinations for A, B, C where A, B, C are different and between 0 to 9\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                # Check if A, B, C are different from each other and from fixed digits 4, 7, 1, and 9\n                if len({A, B, C, 4, 7, 1, 9}) == 7:\n                    # Check if the sum of all digits is divisible by 9\n                    if (fixed_sum + A + B + C) % 9 == 0:\n                        return A + B + C, f\"47A1B9C\".replace('A', str(A)).replace('B', str(B)).replace('C', str(C))\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_bought_per_week = 45\n    sweets_eaten_per_week = 60\n    sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week  # Net change in sweets per week\n    target_sweets = 150\n    \n    # Calculate the weeks required\n    weeks = (sweets_left - target_sweets) / sweets_change_per_week\n    \n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + 1 * orange, 40)\n    equation2 = Eq(1 * apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_apple = solutions[apple]\n    carrie_orange = solutions[orange]\n\n    carrie_pays = carrie_apple + carrie_orange\n\n    return carrie_pays\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    i = 1\n    while True:\n        if all((i % j == 2) for j in [3, 4, 5, 6]):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n\n    fifth_number = first_number * (ratio ** (5 - 1))  # Subtract 1 because the first term is already given\n\n    return fifth_number\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial cost of the books be x\n    # Total Planned Profit = 0.6x\n    total_planned_profit = 0.6\n\n    # Total Actual Profit = 0.8 * Total Planned Profit = 0.8 * 0.6x\n    total_actual_profit = 0.8 * total_planned_profit\n\n    # Let y be the discount rate on the second day\n    y = symbols('y')\n\n    # First day profit from the 70% of the books = 70% of the books * 60% profit\n    first_day_profit = 0.7 * 0.6\n\n    # The remaining 30% of the books are sold at a y% loss, which is (1 - y) of the cost\n    second_day_profit = 0.3 * (1 - y)\n\n    # Total Actual Profit = First day profit + Second day profit\n    equation = Eq(first_day_profit + second_day_profit, total_actual_profit)\n\n    # Solve for the discount rate on the second day (y)\n    discount_rate = solve(equation, y)[0]\n\n    return discount_rate\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # After drawing 8 balls, you might have a situation where you have drawn all 4 balls of two colours\n    # To ensure you have 3 different coloured balls, you need to draw one more.\n    # This is the worst case scenario according to the Pigeonhole Principle.\n    ans = 8 + 1  # Because after 8 balls you could have all balls of only two colours\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_gain_per_week = 4\n    jed_chocolates = 137\n    jed_loss_per_week = 6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_gain_per_week\n        jed_chocolates -= jed_loss_per_week\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    total_points = 12\n    # Every set of 3 points which includes 2 adjacent points will form a right angle.\n    # Thus, if we select any point as the right angle vertex, there will be 2 choices for\n    # the point on one side of it and 9 choices for the point on the other side (excluding \n    # the 2 adjacent points already considered).\n    # So, for each of the 12 points selected as the vertex of the right angle,\n    # there are 2 * 9 = 18 possible right triangles.\n    # Thus, the total number is 12 * 18.\n    right_triangles = total_points * 2 * 9 \n    return right_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n\n    return total_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    left_durians = total_durians - sold_durians\n\n    return int(left_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    # The number of ways to divide the apples corresponds to the number of positive even factors of 78.\n    # First, let's calculate the factors of 78\n    factors = [i for i in range(1, 79) if 78 % i == 0]\n    \n    # Now, let's count the number of even factors\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    \n    return even_factors_count\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the weights of the racket and shuttlecock\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    # Equation 1: 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    \n    # Equation 2: 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    # Solve the equations to find the weight of the racket \n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    # Extract the weight of the racket from the solutions\n    racket_weight = solutions[racket]\n    \n    return racket_weight\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    # Expand the equation: 5*(6c - 1) = -35\n    # 30c - 5 = -35\n\n    # Add 5 to both sides: 30c = -30\n\n    # Divide both sides by 30: c = -1\n    c = -30 / 30\n\n    return c\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th animal and also in the exact middle,\n    # it means there are 10 animals in front of the tiger and 10 animals behind the tiger.\n    total_animals = 10 + 1 + 10  # animals in front + tiger + animals behind\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # The initial division of roses into 3 vases\n    initial_roses = 24\n\n    # Nancy redistributed the roses into 4 vases\n    # The amount in each of the 4 vases must be a multiple of 3, as originally there were 3 vases\n    # Let's denote the common multiple as m\n    # Since 4 * m = 3 * n where n is the number of roses initially in each vase,\n    # We can conclude that m must be a multiple of 3\n\n    # Find the smallest common multiple greater than the original amount per vase (24 / 3)\n    roses_per_vase_initially = initial_roses / 3\n    roses_per_vase_after = roses_per_vase_initially\n\n    while roses_per_vase_after % 4 != 0:\n        roses_per_vase_after += 1\n\n    # Calculate the total number of roses after redistribution\n    total_roses_after = roses_per_vase_after * 4\n\n    return total_roses_after\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    result = 36.42 * 1000\n    return result\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # cost in dollars\n    mamee_cost = haribo_cost - 0.30\n    big_jelly_cost = 6 * mamee_cost\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    from num2words import num2words\n    return num2words(number)\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon = 2\n    cherry = 7\n    mint = 1\n\n    # Will hates to eat candy in mint flavour\n    # So we will not count the mint candy\n    return lemon + cherry\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if B != A and C not in [A, B] and D not in [A, B, C]:\n                        AB = A * 10 + B\n                        BC = B * 10 + C\n                        CD = C * 10 + D\n                        ABC = A * 100 + B * 10 + C\n                        BCD = B * 100 + C * 10 + D\n                        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 \\\n                                and ABC % 9 == 0 and BCD % 11 == 0:\n                            return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    last_page_before_missing = 14\n    first_page_after_missing = 35\n    \n    # Each sheet contains 2 page numbers (front and back), starting from 1.\n    # Hence, if the last page is an even number, it was the back of the sheet,\n    # and if the last page is an odd number, it was the front of the sheet.\n    \n    # Check if the last_page_before_missing is even or odd\n    # If even, add 1 to get the front page number of the first missing sheet\n    # If odd, the last_page_before_missing itself is the front of the first missing sheet\n    front_page_missing = last_page_before_missing + 1 if last_page_before_missing % 2 == 0 else last_page_before_missing\n    # Check if the first_page_after_missing is even or odd\n    # If even, subtract 1 to get the back page number of the last missing sheet\n    # If odd, the first_page_after_missing itself is the back of the last missing sheet\n    back_page_missing = first_page_after_missing - 1 if first_page_after_missing % 2 == 0 else first_page_after_missing\n\n    # Calculate the number of missing pages\n    number_of_missing_pages = back_page_missing - front_page_missing + 1\n    # Calculate the number of missing sheets\n    number_of_missing_sheets = number_of_missing_pages // 2\n\n    return number_of_missing_sheets\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # price of strawberry cake\n    strawberry_cake = 3\n    \n    # price of marble cake\n    marble_cake = strawberry_cake + 2\n    \n    # price of cheese cake\n    cheese_cake = 3 * marble_cake\n    \n    # price of 2 cheese cakes\n    price_two_cheesecake = 2 * cheese_cake\n    \n    return price_two_cheesecake\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if (num % 2 == 1) and (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    speed_per_minute = 36  # meters per minute\n    speed_per_second = speed_per_minute / 60  # meters per second\n    time_seconds = 200\n\n    distance = speed_per_second * time_seconds\n    \n    return distance\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    positive_sum = sum(range(16, 21))\n    negative_sum = sum(range(11, 16))\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each child: older son (s1), younger son (s2),\n    # older daughter (d1), and younger daughter (d2)\n    s1, s2, d1, d2 = symbols('s1 s2 d1 d2', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(s2 - s1, 3)             # two sons were born three years apart\n    equation2 = Eq(d1 - d2, 2)             # two daughters were born two years apart\n    equation3 = Eq(s2, 2 * d1)             # younger son is twice the age of the older daughter\n    equation4 = Eq(s1 + s2 + d1 + d2, 55)  # sum of the children's ages is 55\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (s1, s2, d1, d2))\n    \n    # Find the age of the youngest child\n    youngest_age = min(solutions[d1], solutions[d2], solutions[s1], solutions[s2])\n    \n    return youngest_age\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a wallet and watch\n    wallet, watch = symbols('wallet watch')\n\n    # Define the two equations based on the question\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations for the wallet and watch prices\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    # We are interested in the price of a wallet\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_digits = [4, 2, 8, 5, 7, 1]\n    num_recurring_digits = len(recurring_digits)\n    \n    total_sum = sum(recurring_digits * (58 // num_recurring_digits)) + \\\n                sum(recurring_digits[:58 % num_recurring_digits])\n    \n    return total_sum\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Number of ways to arrange the books taking into account the repetitions\n    ans = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to exchange between A and B\n    x = symbols('x')\n\n    # Original amount of sugar in A and B\n    sugar_A = 50 * 0.11\n    sugar_B = 50 * 0.47\n\n    # After exchanging x grams, the concentration of sugar in A becomes\n    # (sugar_A - 0.11*x + 0.47*x) / (50 - x + x)\n\n    # Similarly, the concentration of sugar in B becomes\n    # (sugar_B + 0.11*x - 0.47*x) / (50 - x + x)\n\n    # Set the concentrations in A and B equal to each other\n    equation = Eq((sugar_A - 0.11*x + 0.47*x) / 50, (sugar_B + 0.11*x - 0.47*x) / 50)\n\n    # Solve the equation for x\n    solution = solve((equation), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    haribo_cost = 0.50\n    mamee_cost = haribo_cost - 0.30\n    jelly_cost = 6 * mamee_cost\n    return jelly_cost\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100\n    distance_between_cauliflowers_cm = 40\n    distance_from_end_cm = 20\n\n    available_length_cm = plot_length_cm - 2 * distance_from_end_cm\n    number_of_cauliflowers = available_length_cm // distance_between_cauliflowers_cm + 1\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candy = 15\n    piles = 4\n    count = 0\n    \n    # Generate all possible combinations of piles-1 integers in the range from 1 to candy - piles + 1\n    # We use piles-1 because the last pile amount will be automatically determined\n    for combo in combinations(range(1, candy - piles + 2), piles - 1):\n        if len(set(combo)) == piles - 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    \n    for n in range(1, 51):\n        if isprime(n) and isprime(n + 6) and isprime(n - 6):\n            primes.append(n)\n            \n    return len(primes), primes\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Given three digits: 1, 3, 6\n    digits = [1, 3, 6]\n    \n    # Three-digit number: _ _ _\n    # Each position can have 3 possible digits\n    # Since the cards can be rotated, we can use the same digit in all three positions\n    # Therefore, the number of different three-digit numbers is simply 3*3*3\n    \n    count = len(digits) * len(digits) * len(digits)\n    \n    return count\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30 / 100\n    base_value = 250\n    result = percentage * base_value\n    return result\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100\n    to_subtract_metres = 2 + 7 / 100\n    ans = total_metres - to_subtract_metres\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for banana and pear prices\n    banana, pear = symbols('banana pear')\n\n    # Two equations based on the problem statement\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    # Solve the system of equations for banana and pear prices\n    prices = solve((equation1, equation2), (banana, pear))\n\n    # Get the price of one banana\n    return prices[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while a < 21:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    recurring_part = [4, 2, 8, 5, 7, 1]\n    sum_of_digits = 0\n    for i in range(58):\n        sum_of_digits += recurring_part[i % len(recurring_part)]\n    return sum_of_digits\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_box, orange_box = symbols('apple_box orange_box')\n\n    equation1 = Eq(3 * apple_box + 5 * orange_box, 270)\n    equation2 = Eq(3 * apple_box + 7 * orange_box, 342)\n\n    solutions = solve((equation1, equation2), (apple_box, orange_box))\n\n    return solutions[apple_box], solutions[orange_box]\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_integers = 35\n    max_product = 0\n\n    for i in range(1, sum_of_integers//2 + 1):\n        j = sum_of_integers - i\n        product = i * j\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    num_days = 6  # Monday to Saturday\n\n    total_earnings = daily_earnings * num_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books for Alice, Becky, and Crystal\n    average_abc = 60\n    \n    # Total number of books for Alice, Becky, and Crystal\n    total_abc = average_abc * 3\n    \n    # Average number of books when Dennis is included\n    average_abcd = average_abc + 10\n    \n    # Total number of books when Dennis is included\n    total_abcd = average_abcd * 4\n    \n    # Number of books that Dennis has\n    dennis_books = total_abcd - total_abc\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    # Expand the left side of the equation\n    expanded_left = 5 * (6 * c - 1)\n \n    # The equation becomes 30c - 5 = -35\n    # Bring -5 to the right side of the equation to get 30c = -35 + 5\n    # So, 30c = -30\n    # Divide both sides by 30 to get c\n    c = -30 / 30\n \n    return c\n\nc = symbols('c')\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = next(primerange(10, 100))\n    \n    # Find the largest two-digit square number\n    largest_square = 1\n    for i in range(10, 32):  # 32 squared is 1024, which is a three-digit number\n        if i**2 < 100: \n            largest_square = i**2\n    \n    ans = smallest_two_digit_prime * largest_square\n    return ans\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    from itertools import combinations\n\n    # Find all combinations of 4 numbers that add up to 15\n    possible_combinations = combinations(range(1, 15), 4)\n    count = sum(1 for combo in possible_combinations if sum(combo) == 15)\n    \n    # Multiply by 4! to account for permutations of each combination\n    ans = count * 24\n    return ans\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # The distance between the 1st and 4th flag represents 3 intervals.\n    # Since the distance between the 1st and 4th flag is 9m, each interval is 9m / 3 = 3m.\n    interval_distance = 9 / 3\n    \n    # The distance between the 1st and 9th flag represents 8 intervals.\n    # To find the distance between the 1st and 9th flag, we multiply the interval distance by 8.\n    distance_1st_to_9th = interval_distance * 8\n    \n    return distance_1st_to_9th\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    number = ones + tenths / 10 + hundredths / 100\n\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_still_water = 22\n    speed_current = 3\n    distance = 200\n    \n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    # Define the variables\n    peaches = None\n    students_A = None\n    students_B = None\n    \n    # Given that when all the peaches are given to Class A, each student gets 5 and there will be 10 left\n    # So the total number of peaches can be written as 5 * students_A + 10\n    \n    # Also given that when all the peaches are given to Class B, each student gets 8 but we will need 2 more\n    # So the total number of peaches can also be written as 8 * students_B - 2\n    \n    # It is know that Class A has 3 more students than Class B\n    # So we can write students_A = students_B + 3\n    \n    # Now we have two equations:\n    # 1) peaches = 5 * students_A + 10\n    # 2) peaches = 8 * students_B - 2\n    # and students_A = students_B + 3\n    \n    # Solving these equations:\n    for students_B in range(1, 100):  # Assuming a reasonable upper limit for number of students\n        students_A = students_B + 3\n        peaches_class_A = 5 * students_A + 10\n        peaches_class_B = 8 * students_B - 2\n        if peaches_class_A == peaches_class_B:\n            peaches = peaches_class_A\n            break\n    \n    return peaches\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers or skipped questions\n    # Since Justin answers all questions, x + y = 10\n    # For correct answers: 6 points each, total points from correct answers: 6x\n    # For incorrect or skipped: -2 points each, total points deducted: -2y\n    # In total, Justin gets 36 points, so the equation is 6x - 2y = 36\n\n    # From the first equation, we can express y in terms of x: y = 10 - x\n    # Substitute y in the second equation: 6x - 2(10 - x) = 36\n    # Simplify and solve for x\n    # 6x - 20 + 2x = 36\n    # 8x - 20 = 36\n    # 8x = 56\n    # x = 7\n\n    # Justin answers 7 questions correctly\n    return 7\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    num_trains = 4\n    num_buses = 3\n    num_flights = 2\n\n    total_ways = num_trains + num_buses + num_flights\n\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    ans = (888 * 999) % 100\n    return ans\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Place the 3 playing a sketch performances first. There are 3! ways to arrange these.\n    sketch_ways = factorial(3)\n\n    # We have 4 slots (_S_S_S_) around the sketches where the 7 dancing performances can go, with at least 1 dancer in each slot.\n    # We can think of this as \"stars and bars\" problem. Here we have 4 bars (the slots) and need to distribute 7 stars (the dances).\n    # So, we have 7 dances and 3 dividers (taking 1 dance for each slot in advance).\n\n    remaining_dances = 7 - 3 # As we place 1 dance initially in each slot\n    total_slots = 3 + 1 # slots for remaining dancers\n    dance_ways = factorial(remaining_dances + total_slots - 1) // (factorial(remaining_dances) * factorial(total_slots - 1))\n\n    # Multiply the ways to arrange sketches and dances to get the final answer\n    return sketch_ways * dance_ways\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    cube_root = int(28512 ** (1/3))\n    h = 28512 // cube_root ** 3\n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # We consider the worst-case scenario for each color to determine the minimum number of M&M's needed.\n    \n    # Since we want 2 M&M's of different colors, the worst-case scenario would be taking out all M&M's of one color before getting to a different color.\n\n    # If we start with red, we could take out 3 red,\n    # then we need to take at least 1 yellow to guarantee we have 2 different colors.\n\n    # If we start with yellow, we could take out 4 yellow,\n    # then we would need to take at least 1 red to guarantee we have 2 different colors.\n\n    # If we start with brown, we do not consider it for worst-case because it has the highest number of chips.\n\n    # It does not matter if we start with red or yellow, we need to take out all of one + 1 of the other.\n    # The smallest number between red and yellow is 3 (red), thus taking all reds (3) and one yellow,\n    # we would need a minimum of 3 (red) + 1 (yellow) = 4 chips to guarantee 2 different colors.\n\n    return 4\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    def derangement(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    # Each family has one father, mother and child, which makes it 3 individuals per family\n    individuals_per_family = 3\n\n    # Each father shakes hands with individuals of other families (3 individuals per each of the 9 families)\n    father_handshakes = total_families * (total_families - 1) * individuals_per_family\n\n    # Each mother shakes hands only with fathers and children of other families (2 individuals per each of the 9 families)\n    mother_handshakes = total_families * (total_families - 1) * (individuals_per_family - 1)\n\n    # Each child shakes hands only with fathers and mothers of other families (2 individuals per each of the 9 families)\n    child_handshakes = total_families * (total_families - 1) * (individuals_per_family - 1)\n\n    # Total handshakes are the sum of all handshakes; every handshake is counted twice (once for each person participating), so divide by 2\n    total_handshakes = (father_handshakes + mother_handshakes + child_handshakes) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Since 31415926^2 - 31415927 * 31415925 is a difference of two squares,\n    # it can be represented as (a + b)(a - b) where a and b are consecutive integers.\n    # In this case, a = 31415926 and b = 31415925.\n    # So the expression simplifies to 1 using the formula (a^2 - b^2 = (a + b)(a - b))\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # Total number of odd digits (1, 3, 5, 7, 9)\n    odd_digits = 5\n    \n    # Applying the multiplication principle:\n    # 1st digit can be any of the 5 odd digits but can't be 0\n    # 2nd digit can be any of the 5 odd digits\n    # 3rd digit can be any of the 5 odd digits\n    # Total 3-digit numbers where all digits are odd = 5 * 5 * 5\n    total_numbers = odd_digits * odd_digits * odd_digits\n    \n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    repeating_sequence = \"85274\"\n    position_in_sequence = (79 - 1) % len(repeating_sequence)\n    ans = repeating_sequence[position_in_sequence]\n    return int(ans)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # Since the three-digit number plus 2009 must be divisible by both 17 and 19,\n    # it must be divisible by the least common multiple of 17 and 19.\n    lcm = 17 * 19  # 17 and 19 are coprime, so their LCM is their product\n\n    # Now, find the largest number less than 1000, which when added to 2009, \n    # is a multiple of lcm.\n\n    # Start with the largest three-digit number, 999.\n    for number in range(999, 99, -1):  \n        if (number + 2009) % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Cost calculation using the given segment pricing and constraints\n    def parking_cost(hours):\n        if hours > 60:\n            return (hours - 60) * 15 + (60 - 50) * 8 + (50 - 40) * 5\n        elif hours > 50:\n            return (hours - 50) * 8 + (50 - 40) * 5\n        elif hours > 40:\n            return (hours - 40) * 5\n        else:\n            return 0\n    \n    # Find the number of hours for which the cost matches the bill\n    for hours_parked in range(40, 101):  # Assuming the max parking hours in a week can't exceed 100\n        if parking_cost(hours_parked) == 82:\n            return hours_parked\n            \nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    tim_sum = 1939\n    missing_page = total_sum - tim_sum\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # We can use the pigeonhole principle to determine the worst case scenario.\n    # First, we draw 1 red, 1 green, 1 blue which is the worst case for each color as we want 4 different ones.\n    # Next, to ensure we have an orange marble, we must draw all the remaining marbles of one color.\n    # Drawing the remaining marbles of the color with the most marbles ensures that we will have an orange.\n    # In this case, the color with the most remaining marbles is green with 7 marbles.\n    # So we must draw 7 more (to account for worst case of not getting an orange in earlier draws)\n    # Then we draw the 2 orange marbles, to make sure we have all four colors.\n\n    red, green, blue, orange = 4, 7, 6, 2\n\n    # Drawing the worst case for three colours\n    must_draw = 1 + 1 + 1\n\n    # Drawing all the green marbles (which is the largest number) to ensure we get an orange\n    must_draw += green\n\n    # Adding the orange marbles to make sure we have all four colors\n    must_draw += orange\n\n    return must_draw\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket1 in range(0, 1000):\n        ticket2 = 777 - ticket1\n        if ticket1 + 1 == ticket2: \n            next_ticket = ticket2 + 1\n            return next_ticket\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10 \n    years = 5\n\n    value_after_depreciation = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_depreciation\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    decimal_part = \"85274\"\n    index = (79 - 1) % len(decimal_part)  # 79th digit means index 78 in 0-based indexing\n    ans = int(decimal_part[index])\n    return ans\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a memoization dictionary to store the number of ways to reach each step\n    memo = {}\n\n    def climb(stairs, banned_step):\n        # If the number of stairs is less than 1, there are no ways to climb\n        if stairs < 1:\n            return 0\n        # If the stairs to climb is the banned step, there are no ways to climb\n        if stairs == banned_step:\n            return 0\n        # If we are at the ground level (0 stairs left), there's 1 way to stay put\n        if stairs == 0:\n            return 1\n        # Check if the result is already in the memoization dictionary\n        if stairs in memo:\n            return memo[stairs]\n\n        # Calculate the number of ways to reach the current step by climbing 1, 2, or 3 steps at a time\n        # only if the target step is not the banned step\n        ways = 0\n        for i in range(1, 4):\n            if stairs - i != banned_step:\n                ways += climb(stairs - i, banned_step)\n\n        # Store the result in the memoization dictionary and return it\n        memo[stairs] = ways\n        return ways\n\n    # Calculate the number of ways to climb the stairs without stepping on the fifth step\n    ans = climb(10, 5)\n    return ans\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earning = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earning * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    one_hundred_less = number - 100\n    return one_hundred_less\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # average number of books for Alice, Becky, and Crystal\n    average_ABC = 60\n    \n    # total number of books for Alice, Becky, and Crystal\n    total_ABC = 3 * average_ABC\n    \n    # new average after including Dennis\n    new_average_ABCD = average_ABC + 10\n    \n    # total number of books for Alice, Becky, Crystal, and Dennis\n    total_ABCD = 4 * new_average_ABCD\n    \n    # Dennis's number of books\n    books_Dennis = total_ABCD - total_ABC\n    \n    return books_Dennis\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    climb_up = 5\n    slide_down = 3\n    distance_to_climb = 16\n    net_distance = climb_up - slide_down\n    days = 0\n    total_climbed = 0\n    \n    while total_climbed < distance_to_climb:\n        days += 1\n        total_climbed += climb_up\n        if total_climbed >= distance_to_climb:\n            break\n        total_climbed -= slide_down\n    \n    return days\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_for_first_30k = T / 100 * 30000\n    tax_for_rest = (T + 3) / 100 * (income - 30000)\n    total_tax = tax_for_first_30k + tax_for_rest\n\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n    solutions = solve((equation, income > 30000), (income, T))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda num: abs(num - 1))\n    return closest_number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return n\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Let x be the number of 50-cent coins and y be the number of 20-cent coins\n    # We have two equations based on the problem statement:\n    # x + y = 21 (total number of coins)\n    # 0.50x + 0.20y = 6.30 (total value of coins)\n    \n    # We can solve these equations using algebraic methods such as substitution or elimination.\n    # Here, we'll use a simple loop to iterate through the possible values of x and y\n    # since we know x and y are integers and must add up to 21.\n\n    for x in range(22): # x can be 0 to 21\n        y = 21 - x\n        if 0.50*x + 0.20*y == 6.30:\n            return x\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Alan as 'a' meters per minute\n    # Philip walks 'a + 15' meters per minute (15 meters more than Alan)\n    a = symbols('a')\n\n    # Philip takes 12 minutes to arrive at B\n    # Alan takes 12 + 3 = 15 minutes to arrive at B\n    # Distance covered by Philip is the same as the distance covered by Alan when they reach B\n\n    # Let's set up the equation considering the distance:\n    # Distance = Speed * Time\n    # For Philip: Distance = (a + 15) * 12\n    # For Alan: Distance = a * 15\n    # Since both distances are equal, we equate them and solve for 'a'\n    equation = Eq((a + 15) * 12, a * 15)\n\n    # Solve the equation for 'a'\n    alan_speed = solve(equation, a)[0]\n\n    # Now that we have Alan's speed, we can find the distance\n    distance = alan_speed * 15\n\n    return distance\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    coins = 213\n    children = 5\n\n    remainder = coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n\n    count = 0\n    number = 2\n\n    while number <= 255555:\n        root = math.isqrt(number)\n        if root * root == number:\n            count += 1\n        number = number * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_left_less = 25.40\n\n    # Alice's money after spending is Tom's money minus the difference after she spent $36\n    alice_after_spent = tom_money - alice_left_less\n\n    # Alice's original amount of money is what she had after spending plus what she spent\n    alice_original_money = alice_after_spent + alice_spent\n\n    return alice_original_money\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_of_five = 28\n    mean_of_twelve = 11\n    \n    total_of_five = mean_of_five * 5\n    total_of_twelve = mean_of_twelve * 12\n    \n    total_numbers = 5 + 12\n    grand_total = total_of_five + total_of_twelve\n    \n    combined_mean = grand_total / total_numbers\n    \n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20 / 100\n    discount_amount = original_price * discount_percentage\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74\n    space_between_benches = 7\n    number_of_benches = 9\n\n    total_spacing = (number_of_benches - 1) * space_between_benches\n    bench_length = (total_length - total_spacing) / number_of_benches\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of students in class B\n    # Hence, number of students in class A will be 2x\n    # Let's denote y as the number of candies Miss Jenny has\n\n    x, y = symbols('x y')\n    \n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # So equation for class A: 4 * 2x = y - 20\n    equation1 = Eq(4 * 2 * x, y - 20)\n    \n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # So equation for class B: 6 * x = y + 16\n    equation2 = Eq(6 * x, y + 16)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of candies Miss Jenny has\n    return solutions[y]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Since there are 6 gold and 6 silver coins,\n    # taking out 7 coins guarantees at least 2 different colored coins.\n    return 7\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Given that the distance from the 1st tree to the 5th tree is 20 cm\n    # Which means that there are 4 intervals between them (since 5 - 1 = 4)\n    distance_1_to_5 = 20\n    intervals_1_to_5 = 4\n\n    # Calculate the distance of each interval\n    interval_distance = distance_1_to_5 / intervals_1_to_5\n\n    # Calculate the number of intervals from the 8th tree to the 14th tree\n    # Which is 14 - 8 = 6\n    intervals_8_to_14 = 14 - 8\n\n    # Calculate the distance from the 8th tree to the 14th tree\n    distance_8_to_14 = interval_distance * intervals_8_to_14\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def is_mutually_exclusive(a, b):\n        return gcd(a, b) == 1\n    \n    numbers = list(range(1, 25))\n    max_count = 0\n\n    # function to check if the circle formed with selected numbers is valid\n    def is_valid_circle(selected_numbers):\n        for i in range(len(selected_numbers)):\n            if is_mutually_exclusive(selected_numbers[i], selected_numbers[(i + 1) % len(selected_numbers)]):\n                return False\n        return True\n\n    # function to calculate the maximum numbers that can be selected\n    def find_max_count(selected_numbers, remaining_numbers):\n        nonlocal max_count\n        if is_valid_circle(selected_numbers):\n            max_count = max(max_count, len(selected_numbers))\n        for i, num in enumerate(remaining_numbers):\n            find_max_count(selected_numbers + [num], remaining_numbers[i + 1:])\n\n    find_max_count([], numbers)\n    \n    return max_count\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The sum of the 10 different whole numbers is 2021.\n    # The third greatest number is 246 which means there are two numbers greater than 246.\n    # To minimize the fourth greatest number, we need to maximize the sum of the other nine numbers.\n\n    # Start with the maximum possible values for the first two numbers just greater than 246, then 245 for the third,\n    # and then decrease each following number by 1 to get the minimum value for the fourth number.\n\n    # Let's start by assigning the highest possible values to the two numbers greater than the third highest number.\n    first_max = 247\n    second_max = 248\n\n    # Let's start by assigning the maximum  value to the number  just lower than the third highest number.\n    fifth_max = 245\n\n    # Calculate the sum of first_max, second_max, 246, and fifth_max\n    sum_first_four_max = first_max + second_max + 246 + fifth_max\n\n    # Calculate the total sum of the remaining numbers\n    remaining_sum = 2021 - sum_first_four_max\n\n    # To minimize the fourth number, we would want to maximize the sum of numbers from 5th to 10th place.\n    # Starting from fifth_max - 1, assign the maximum possible value to each remaining number,\n    # each one being 1 less than the previous number\n    remaining_numbers = []\n    current_value = fifth_max - 1\n    for _ in range(6):\n        remaining_numbers.append(current_value)\n        current_value -= 1\n\n    # Calculate the sum of the remaining numbers\n    sum_remaining_numbers = sum(remaining_numbers)\n\n    # If this sum is less than the remaining sum, we need to readjust the fourth number accordingly\n    if sum_remaining_numbers < remaining_sum:\n        # Calculate the difference we need to add to the fourth number\n        difference = remaining_sum - sum_remaining_numbers\n        # The minimum value for the fourth greatest number is fifth_max plus the difference\n        min_fourth_number = fifth_max + difference\n    else:\n        # The minimum value for the fourth greatest number is just the fifth_max\n        min_fourth_number = fifth_max\n\n    return min_fourth_number\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    recurring_part = \"85274\"\n    index = (79 - 1) % len(recurring_part)\n    ans = int(recurring_part[index])\n    return ans\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey_age, father_age = symbols('grey_age father_age')\n    # Create an equation representing the father's age when Grey was born\n    equation1 = Eq(father_age - grey_age, 30)\n    # Create an equation representing the current relationship of their ages\n    equation2 = Eq(father_age, 3 * grey_age)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n    # Return the father's age\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Representing the number of apples Bud has as 1 part,\n    # then Pip has 5 parts.\n    bud_parts = 1\n    pip_parts = 5 * bud_parts\n\n    # The \"parts\" graph is a visual representation,\n    # where one bar represents the parts of Bud's apples\n    # and the other bar represents the parts of Pip's apples.\n    # We can't draw the graph in the Python code,\n    # but we can create a textual representation of it.\n    graph = \"Bud :\" + \"■\" * bud_parts + \"\\n\" + \"Pip :\" + \"■\" * pip_parts\n\n    return graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Using the Pigeonhole Principle, at least one layer will have\n    # ceil(total_books / layers) books\n    least_books_on_most = -(-total_books // layers)\n    return least_books_on_most\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    common_difference = 4\n    last_term = 80\n    total_terms = ((last_term - first_term) // common_difference) + 1\n\n    sum_of_sequence = (total_terms / 2) * (first_term + last_term)\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    count = len(list(permutations(digits, 3)))\n\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 3):  # The first digit cannot be 0 for a three-digit number\n        for second_digit in range(0, 3):  # The second digit can be 0, 1, or 2\n            for third_digit in range(0, 3):  # The third digit can be 0, 1, or 2\n                if len(set([first_digit, second_digit, third_digit])) == 3:  # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor_minimum = 1\n    \n    dividend = divisor_minimum * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    \n    hazel_current_age = y - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n    \n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of cows be 'c' and initial number of goats be 'g'\n    c, g = symbols('c g')\n\n    # 65% of animals were cows at first, hence 35% were goats\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # After adding 240 more cows and goats, the percentage of cows increased to 85%\n    # Number of goats doubled\n    equation3 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation4 = Eq(2 * g, (c + g + 240) - (c + 240))\n\n    # Solving the equations\n    solution = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solution[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10  # convert mm to cm\n\n    # Calculate the total width\n    total_width = section1 + section2 + section3\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    # Let's denote Melanie's current age as M and her uncle's current age as U.\n    M_current = 8\n    U_future = 38\n\n    # The difference in age between Melanie and her uncle will remain the same.\n    age_difference = U_future - M_current\n\n    # Thus, her uncle's current age is Melanie's current age + the age difference.\n    U_current = M_current + age_difference\n\n    return U_current\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pound = 100\n    total_pence = 3 * pence_in_pound\n    percentage = (15 / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    still_facing = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            still_facing -= 1\n    return still_facing\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('3:25 PM', '%I:%M %p')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    from sympy import Symbol, degree\n\n    x = Symbol('x')\n    y = Symbol('y')\n    n = Symbol('n')\n\n    monomial = -x**3 * y**(2*n)\n    \n    # Knowing the degree is 5\n    deg = degree(monomial)\n    for possible_n in range(deg + 1):  # We loop through possible values of n\n        if 3 + 2*possible_n == 5:\n            return possible_n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    # Representing mixed numbers as Fractions\n    first_number = 2 + Fraction(3, 8)\n    second_number = 6 + Fraction(9, 12)\n    third_number = 1 + Fraction(14, 16)\n\n    # Calculate the sum of the Fractions\n    result = first_number + second_number + third_number\n\n    # Convert the Fraction result into a mixed number\n    mixed_number = result.numerator // result.denominator\n    fractional_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    # Final answer as a mixed number (if the fractional part is 0, we only return the integer part)\n    ans = mixed_number + fractional_part if fractional_part else mixed_number\n    \n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    sister_age_in_3_years = amy_age_now - 5\n    sister_age_now = sister_age_in_3_years - 3\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different numbers/letters in each suit and 4 suits total.\n    max_unique_cards = 13 * 4\n\n    # Due to the pigeonhole principle, to ensure getting at least two cards \n    # with the same number/letter we need to draw one more than the number \n    # of different cards there are (representing each number/letter in all suits).\n    cards_to_draw = max_unique_cards // 13 + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/k for k in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for num in range(100, 1000, 2):  # Iterate through even 3-digit numbers\n        if sum(map(int, str(num))) == 21:  # Check if the sum of digits is 21\n            return num\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fraction = 3/5\n    part_value = 18\n\n    whole_amount = part_value / fraction\n\n    return whole_amount\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    sum_even_squares = sum([i**2 for i in range(2, 21, 2)])\n    sum_odd_squares = sum([i**2 for i in range(1, 20, 2)])\n    ans = sum_even_squares - sum_odd_squares\n    return ans\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cacti and s be the number of sunflowers\n    c, s = symbols('c s')\n\n    # Each cactus costs $2 and each sunflower costs $7\n    # Lavi spent $156 in total\n    equation1 = Eq(2 * c + 7 * s, 156)\n    \n    # He bought 6 more cacti than sunflowers\n    equation2 = Eq(c, s + 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, s))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_cost = symbols('book_cost')\n    \n    # Sarah's total cost\n    sarah_total = 8 * book_cost + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_cost + 8 * 0.40\n    \n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n    \n    # Solve for the cost of a book\n    book_cost_value = solve(equation, book_cost)\n\n    return book_cost_value[0]\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    poured_water = 2 * 6\n    remaining_water = total_water - poured_water\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_initial, manchester_initial = symbols('liverpool_initial manchester_initial')\n\n    equation1 = Eq(liverpool_initial - manchester_initial, 1000)\n    equation2 = Eq(manchester_initial + 4836, 3 * (liverpool_initial + 472))\n\n    solutions = solve((equation1, equation2), (liverpool_initial, manchester_initial))\n\n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    # Sarah's cost = 8 * book_price + 3 * pencil_price\n    # Rebecca's cost = 3 * book_price + 8 * pencil_price\n    # pencil price in £ is 0.40 (since 40p = £0.40)\n    pencil_price = 0.40\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1.00)\n    \n    # Solve the equation for the book_price\n    sol = solve(equation, book_price)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # Add back the $2 given to Mike\n    original_after_nini = remaining_after_mike * 2  # Reverse the half given to Nini\n    original_after_bob = original_after_nini * 2  # Reverse the half given to Bob\n    original_total = original_after_bob * 2  # Reverse the half given to the mother\n    return original_total\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A_students, B_students, peaches = symbols('A_students B_students peaches')\n    \n    # Class A: If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left.\n    equation1 = Eq(peaches, 5 * A_students + 10)\n    \n    # Class B: If all peaches are given to Class B and each student can get 8 peaches, we will need 2 more peaches.\n    equation2 = Eq(peaches, 8 * B_students - 2)\n    \n    # It is known that Class A has 3 more students than Class B\n    equation3 = Eq(A_students, B_students + 3)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A_students, B_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    \n    equation1 = Eq(8 * t_shirts, 5 * caps)  # Ratio of t-shirts to caps\n    equation2 = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)  # Money collected from sold items\n    \n    solutions = solve((equation1, equation2), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Initial variables\n    digit_counter = 0\n    number = 1\n    requested_digit = 2023\n    \n    # Count digits and find the number where the 2023th digit lies.\n    while digit_counter < requested_digit:\n        digit_counter += len(str(number))\n        number += 1\n\n    # The loop goes one number too far, so we decrease it by 1\n    number -= 1\n    \n    # Find the position of the digit in the number\n    position = requested_digit - (digit_counter - len(str(number)))\n    \n    # Convert the number to string and get the required digit\n    return int(str(number)[position - 1])\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    today_year = 98\n    birth_year = today_year - 11\n    target_year = 1  # Year 01 is considered as 101\n\n    # The difference between the year 01 (101) and the birth year\n    age_on_31_12_01 = (100 + target_year) - birth_year\n\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    smallest_odd = float('inf')  # Initialize with infinity\n\n    for perm in permutations([4, 6, 2, 5]):\n        num = int(''.join(map(str, perm)))\n        if num % 2 == 1 and num < smallest_odd:\n            smallest_odd = num\n\n    return smallest_odd\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    max_per_boat = 6\n    \n    if students % max_per_boat == 0:\n        trips = students // max_per_boat\n    else:\n        trips = (students // max_per_boat) + 1\n    \n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n\n    ordinal_number = (nth_term - first_term) // common_difference + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of game cards Joe and Eric have initially\n    joe_cards, eric_cards = symbols('joe_cards eric_cards')\n\n    # Define the equation based on the problem statement\n    equation1 = Eq(joe_cards, 7 * eric_cards)  # Joe has 7 times the amount of Eric\n    equation2 = Eq(joe_cards - eric_cards, 168 * 2)  # After giving some cards, they both have 168 cards\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (joe_cards, eric_cards))\n\n    # Calculate the number of cards Joe needs to give to Eric\n    cards_to_give = solutions[joe_cards] - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import primerange\n\ndef solution():\n    prime_digits = list(primerange(0, 10))\n    two_digit_primes = list(primerange(10, 100))\n    count = 0\n    \n    for prime in two_digit_primes:\n        if int(str(prime)[0]) in prime_digits and int(str(prime)[1]) in prime_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    additional_catch = 9\n\n    total_catch = initial_catch - run_away + additional_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # time in minutes to paint one picture\n    total_time = 80  # total available time in minutes (1 hour and 20 minutes)\n    num_pictures = total_time // time_per_picture  # integer division to find out how many whole pictures can be painted\n    \n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    num_difference = abs(6 - 19)\n    num_people = num_difference * 2\n    return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        x2 = 10 - x1\n        if x1 != x2:\n            count += 1\n    return count // 2  # Each split is counted twice, so divide by 2\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    # There are 5 students to arrange in a line, which is a permutation problem\n    # The number of ways to arrange n distinct objects in n places is n!\n    num_students = 5\n    num_ways = factorial(num_students)\n    \n    return num_ways\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_swims = amy_swims - joanne_swims\n    return more_swims\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the digits as symbols\n    a, b, c, d = symbols('a b c d')\n\n    # Create the equation according to the problem statement\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    # Solve the equation for the variables\n    solutions = solve(equation, (a, b, c, d))\n\n    # Extract the solution for abcd\n    abcd_value = 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n\n    return abcd_value\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    time_taken = 1 / combined_rate\n    return time_taken\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    \n    # If Anne gives Charlie 6 pears, they will have the same amount.\n    # Let's denote Anne's pears as A and Charlie's pears as C.\n    # A - 6 = C + 6\n    # A + C = 38 (total number of pears)\n    # By substituting C from the first equation into the second, we get:\n    # A - 6 + A = 38\n    # 2A - 6 = 38\n    # 2A = 44\n    # A = 22 (Anne’s pears at first)\n    \n    anne_pears = (total_pears + 6) // 2\n\n    return anne_pears\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # initial condition equation: isaac = 5 * joseph\n    equation1 = Eq(isaac, 5 * joseph)\n\n    # after receiving stamps: joseph = (9/10) * isaac - 154\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the octal number to base 10\n    N = int('12345654321', 8)\n    \n    # Calculate the remainder when N is divided by 7 and 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum of the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters\n    # Linda's speed ratio is 3, Ted's speed ratio is 4, so the total ratio is 3 + 4 = 7\n    # Linda's distance is 1200m when they meet.\n    # The remaining distance Ted needs to cover is x - 1200m when they meet.\n    # The distance they covered together is equal to the length of the path.\n    # Distance covered by Linda plus distance covered by Ted equals the total path length.\n    # (1200 / 3) * 7 = x\n    # Multiply both sides of the equation by 3 to get rid of fraction.\n    # 1200 * 7 = 3x\n    # Divide by 3 to find x.\n    # (1200 * 7) / 3 = x\n    x = (1200 * 7) // 3\n    return x\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    percentage_spent_on_bag = 70\n    percentage_remaining = 100 - percentage_spent_on_bag\n    fraction_spent_on_purse = 3/8\n    percentage_spent_on_purse = fraction_spent_on_purse * percentage_remaining\n    \n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2018 * 10 + A) % 9 == 0:\n            return (2018 * 10 + A) % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "It looks like you're referring to a file with a name that follows a naming convention that typically indicates a versioned JSON file, possibly for or from GPT-4 (the hypothetical fourth version of OpenAI's Generative Pre-trained Transformer model). However, as of my knowledge cut-off in 2023, GPT-4 has not been officially released. Additionally, I am unable to directly interact with external files or databases. If you have a question about the contents of such a file, you would need to provide the relevant data or information here, and then I could potentially answer questions or provide insights based on the provided information."
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    \n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_to_build = 3\n\n    total_work = workers * days_to_build\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "import math\n\ndef solution():\n    # This problem is an example of a derangement problem, which can be solved using the\n    # subfactorial formula or !n formula.\n\n    # Subfactorial can be calculated using the recursive formula:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2%\n\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    total_amount = 45\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    total_sum = sum(i for i in range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age_now = symbols('jack_age_now')\n\n    equation = Eq(jack_age_now - 5, (jack_age_now + 8) / 2)\n\n    solution_age = solve(equation, jack_age_now)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the original number of pupils in School P\n    # Let y be the original number of pupils in School Q\n    # According to the question, we have the following relationships:\n    # x / y = 2 / 3  (1)\n    # (x + 240) / (y + 240) = 3 / 4  (2)\n    \n    # From equation (1), we get y = (3/2) * x\n    # Substitute y in equation (2) with (3/2) * x:\n    # (x + 240) / ((3/2) * x + 240) = 3 / 4\n    # Multiply both sides by 4 * ((3/2) * x + 240) to clear the fractions:\n    # 4 * (x + 240) = 3 * ((3/2) * x + 240)\n    \n    # Solve the equation for x:\n    # 4x + 960 = (9/2)x + 720\n    # 8x + 1920 = 9x + 1440\n    # 1920 - 1440 = 9x - 8x\n    # 480 = x\n    \n    return 480\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    spent_on_bag_percentage = 70\n    spent_on_bag = spent_on_bag_percentage / 100\n\n    remaining_after_bag = 1 - spent_on_bag\n    spent_on_purse_fraction = 3 / 8\n\n    spent_on_purse = remaining_after_bag * spent_on_purse_fraction\n    spent_on_purse_percentage = spent_on_purse * 100\n\n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of straws each child used\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(timmy, kenny - 12)  # Timmy used 12 fewer straws than Kenny\n    equation2 = Eq(ron, kenny + 20)     # Ron used 20 more straws than Kenny\n    equation3 = Eq(kenny + timmy + ron, 284)  # The three used 284 straws altogether\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'EDUCATION'\n    vowels = 'AEIOU'\n    num_total = factorial(len(word))\n\n    num_vowels_together = 0\n    for perm in permutations(vowels):\n        temp_word = ''.join(perm)\n        num_vowels_together += factorial(len(word) - len(vowels)) * len([i for i in range(len(word) - len(vowels) + 1) if temp_word not in word[i:i+len(vowels)]])\n\n    return num_total - num_vowels_together\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n\n    total_trees_first_3_days = first_3_days_avg * 3\n    total_trees_last_5_days = last_5_days_avg * 5\n\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    total_days = 8\n\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_each = 12\n    total_candies = initial_students * candies_each\n    new_students = initial_students + 1\n    new_candies_each = total_candies // new_students\n    return new_candies_each\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    initial_sweets = 11\n    wrappers = initial_sweets\n\n    while wrappers >= 3:\n        exchange_sweets = wrappers // 3\n        initial_sweets += exchange_sweets\n        wrappers = wrappers % 3 + exchange_sweets\n    \n    return initial_sweets\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP are angle bisectors, they divide the angles at B and C into two equal parts.\n    # Let's assume m∠ABP = x and m∠ACP = y\n    # Since BP is an angle bisector, m∠ABC = 2x\n    # Since CP is an angle bisector, m∠ACB = 2y\n    # The sum of the angles in triangle ABC is 180 degrees, so we have:\n    # m∠BAC + m∠ABC + m∠ACB = 180\n    # 50 + 2x + 2y = 180\n    # 2x + 2y = 130\n    # x + y = 65\n\n    # The angle BPC can be expressed as the sum of the two adjacent angles:\n    # m∠BPC = m∠ABP + m∠ACP\n    # m∠BPC = x + y\n    # We already know that x + y = 65\n\n    # Therefore, m∠BPC is 65 degrees.\n    angle_BPC = 65\n    return angle_BPC\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    ans = None\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_weight_kg = 5\n    total_cost_pounds = 10\n    bag_weight_g = 250\n    sell_price_per_bag_p = 65\n\n    # Convert kg to g for total weight\n    total_weight_g = total_weight_kg * 1000\n    \n    # Calculate number of bags\n    num_bags = total_weight_g / bag_weight_g\n    \n    # Calculate total sales in pounds\n    total_sales_p = num_bags * sell_price_per_bag_p\n    total_sales_pounds = total_sales_p / 100  # Convert pence to pounds\n    \n    # Calculate profit\n    profit = total_sales_pounds - total_cost_pounds\n    \n    # Calculate percentage profit\n    percentage_profit = (profit / total_cost_pounds) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    ways_Ayton_Beeton = 4\n    ways_Beeton_Ceeton = 5\n    ways_Ceeton_Deeton = 6\n    ways_Ayton_Deeton_direct = 3\n\n    # Multiplication for the combined ways through all towns\n    ways_through_all_towns = ways_Ayton_Beeton * ways_Beeton_Ceeton * ways_Ceeton_Deeton\n\n    # Addition for the direct ways and combined ways\n    total_ways = ways_Ayton_Deeton_direct + ways_through_all_towns\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 3\n    denominator = (15 / 20) * numerator\n    return denominator\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    n_difference = 15 - 10\n\n    common_difference = (nth_term_15 - nth_term_10) / n_difference\n\n    nth_term_12 = nth_term_10 + common_difference * (12 - 10)\n    \n    return nth_term_12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of each bird be as follows:\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Creating equations based on the problem statement:\n\n    # The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n\n    # The number of three-tailed birds is 2 more than half the number of six-talied birds\n    equation2 = Eq(three_tailed, 2 + (1 / 2) * six_tailed)\n\n    # Total number of their tails is 2 less than four times as many as the total number of their heads\n    equation3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n\n    # The difference between the total number of their heads and their tails is 241\n    # The total number of heads is: two_tailed + three_tailed + six_tailed + 2 * eight_tailed\n    # The total number of tails is: 2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed\n    # heads - tails = 241\n    equation4 = Eq((two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        factors = set()\n        if num % 2 == 0:\n            factors.add(2)\n        if num % 3 == 0:\n            factors.add(3)\n        if num % 4 == 0:\n            factors.add(4)\n        # If the number has exactly two distinct prime factors, it's underlined twice\n        if len(factors) == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for Joe's initial amount of money\n    joe_initial = symbols('joe_initial')\n    \n    # Write the equation based on the information given\n    # Sally had $3.75, and Joe had some unknown amount of money\n    # After spending $2.50 each, they together have $5 left\n    equation = Eq(3.75 - 2.50 + joe_initial - 2.50, 5)\n    \n    # Solve the equation for Joe's initial amount\n    joe_money = solve(equation, joe_initial)\n    \n    return joe_money[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    avg_first_days = 135\n    avg_last_days = 151\n\n    total_trees_first = first_days * avg_first_days\n    total_trees_last = last_days * avg_last_days\n    total_days = first_days + last_days\n\n    total_trees = total_trees_first + total_trees_last\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit even numbers\n    for num in range(100, 1000, 2):  # Increment by 2 to ensure the number is even\n        # Convert number to string to sum individual digits\n        digits = [int(d) for d in str(num)]\n        if sum(digits) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Choosing 2 out of 4 lunch options\n    # Combination of salad and soup, salad and vegetable, salad and sandwich,\n    # soup and vegetable, soup and sandwich, and vegetable and sandwich\n    comb_salad_soup = comb(salads, 1) * comb(soups, 1)\n    comb_salad_vegetables = comb(salads, 1) * comb(vegetables, 1)\n    comb_salad_sandwiches = comb(salads, 1) * comb(sandwiches, 1)\n    comb_soup_vegetables = comb(soups, 1) * comb(vegetables, 1)\n    comb_soup_sandwiches = comb(soups, 1) * comb(sandwiches, 1)\n    comb_vegetables_sandwiches = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    total_combinations = (comb_salad_soup + comb_salad_vegetables +\n                          comb_salad_sandwiches + comb_soup_vegetables +\n                          comb_soup_sandwiches + comb_vegetables_sandwiches)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_lasting = total_plasters // 20\n    return days_lasting\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and\n            isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let m be the mass of mangoes and s be the mass of strawberries at first\n    m, s = symbols('m s')\n    \n    # first condition: m = s + 448\n    condition1 = Eq(m, s + 448)\n    \n    # second condition: after giving away 900g of mangoes, s = 2 * (m - 900)\n    condition2 = Eq(s, 2 * (m - 900))\n    \n    # solve the equations\n    solutions = solve((condition1, condition2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    \n    # Equation: 2/3 of the total items were apples\n    apples = 2 / 3 * total_items\n    \n    # Equation: 1/9 of the total items were bananas\n    bananas = 1 / 9 * total_items\n    \n    # Equation: The rest were lemons\n    lemons = total_items - apples - bananas\n    \n    # Equation: She bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation\n    solution = solve(equation, total_items)\n\n    # Calculate the number of lemons\n    num_lemons = solution[0] - (2 / 3 * solution[0]) - (1 / 9 * solution[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    # When Max buys the chocolates\n    equation1 = Eq((max_money - 12) / anthony_money, 2 / 5)\n\n    # When Anthony buys the chocolates\n    equation2 = Eq(max_money / (anthony_money - 12), 8 / 13)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    exponent_cycle = 2 # 4^1 = 4, 4^2 = 16, the unit digit of powers of 4 cycles every 2 steps: 4, 6, 4, 6, ...\n\n    # Since 2022 is even, it will be equivalent to 4^2 (the second term in the cycle), giving unit digit of 6.\n    cycle_position = 2022 % exponent_cycle\n\n    if cycle_position == 0:\n        ans = 6\n    elif cycle_position == 1:\n        ans = 4\n\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Since the piles must have different numbers of marbles,\n    # let's start with the smallest possible piles and increase\n    # until the sum reaches 16 marbles.\n    # The piles can be represented as [1, 2, 3, x] where x is unknown.\n    for x in range(4, 16):\n        if 1 + 2 + 3 + x == 16:\n            return x\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of stickers Liz had originally be x (both red and blue)\n    r = b = symbols('r b')\n    \n    # She gave away 2/3 of her red stickers, so she has 1/3 left\n    # She also has 1/4 of the total stickers left in the end\n    # We need to find the fraction of blue stickers she gave away, which is (b - remaining_blue)/b\n    # Since the remaining stickers are 1/4 of the total, we have the equation:\n    # (1/3)*r + remaining_blue = (1/4)*(r + b)\n    \n    # Now, we substitute remaining_blue with b - given_away_blue, and given_away_blue with y*b\n    y = symbols('y')\n    \n    # So we get the equation:\n    # (1/3)*r + (b - y*b) = (1/4)*(r + b)\n    # Simplify the equation:\n    remaining_blue = b - y*b\n    total_remaining = (1/3)*r + remaining_blue\n    total_original = r + b\n    equation = Eq(total_remaining, (1/4)*total_original)\n    \n    # Since r = b, we can also substitute r with b\n    equation = equation.subs(r, b)\n    \n    # Now we solve the equation to find y, the fraction of blue stickers given away\n    solutions = solve(equation, y)\n    return solutions[0]\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "import math\n\ndef solution():\n    # If each child gets at least one pen, we have 20 pens - 6 pens (one for each) = 14 pens remaining\n    # This is now a problem of distributing 14 indistinguishable pens to 6 kids\n    # This is equivalent to placing 5 dividers among the 14 pens, which can be solved by\n    # combinations of (14 + 5) pens and dividers taken 5 at a time (for the dividers).\n    # This is calculated using the formula for combinations C(n + k - 1, k - 1)\n    total_pens = 14\n    dividers = 5  # 6 kids - 1\n    ways = math.comb(total_pens + dividers, dividers)\n    return ways\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    difference = smallest_6_digit - largest_5_digit\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    # Generating all permutations of the three digits\n    perm = permutations([1, 2, 3, 4, 5, 6], 3)\n    \n    # Filter out permutations that are not odd (last digit must be odd) and convert to integer\n    numbers = [int(''.join(map(str, p))) for p in perm if p[2] % 2 != 0]\n    \n    # Counting only the odd three-digit numbers\n    count = len(numbers)\n    \n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to a common unit, choosing millimetres\n    lengths_in_mm = {\n        '10mm': 10,\n        '100cm': 100 * 10,  # 1 cm = 10 mm\n        '10m': 10 * 1000,  # 1 m = 1000 mm\n        '2km': 2 * 1000000,  # 1 km = 1000 m = 1000 * 1000 mm\n        '2800cm': 2800 * 10,  # 1 cm = 10 mm\n        '2500m': 2500 * 1000,  # 1 m = 1000 mm\n        '100mm': 100,\n        '100m': 100 * 1000  # 1 m = 1000 mm\n    }\n\n    # Find the smallest length by comparing the millimetre values\n    smallest_length_key = min(lengths_in_mm, key=lengths_in_mm.get)\n    ans = lengths_in_mm[smallest_length_key]\n\n    # Return the smallest length in original units\n    return smallest_length_key\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # Arithmetic sequence sum formula: S_n = n/2 * (first_term + last_term)\n    first_term = 3\n    last_term = 19\n    common_difference = 4\n\n    n = int((last_term - first_term) / common_difference) + 1\n\n    ans = n/2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2 / 3 * B)\n    equation2 = Eq(B, 4 / 5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    \n    # A function to check if a number is a palindrome\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    # Loop until we find the next palindrome\n    while True:\n        current_steps += 1\n        if is_palindrome(current_steps):\n            break\n\n    # Calculate the difference between the next palindrome and the original step count\n    ans = current_steps - 1991\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n\n    for page in range(1, 201):\n        count += str(page).count('4')\n\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of bookmarks be x and the number of pupils be y\n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    # If he gives each of his pupils 4 bookmarks, he has 8 left:\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    \n    # If he gives each of his pupils 6 bookmarks, he is short of 10 bookmarks:\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    # Return the number of bookmarks\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # let cows be x and ducks be y\n    # we have two equations:\n    # x + y = 25\n    # 4x + 2y = 68\n    # we can solve these equations to find the number of ducks (y)\n \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 25)\n    equation2 = Eq(4*x + 2*y, 68)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    x_square = 7\n    x_quad = x_square ** 2\n    return x_quad\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Let f(n) be the maximum number of regions formed by n triangles on a plane\n    # We can use inductive reasoning to add one triangle at a time and see how many new regions can be created\n    # The first triangle (n=1) divides the plane into 2 regions (inside and outside the triangle)\n    # Each new triangle can potentially intersect with all the previous triangles' sides and itself\n    # This can be generalized into f(n) = f(n-1) + n\n    \n    # Start with 1 triangle\n    n = 1\n    regions = 2 # f(1) is 2\n\n    # Add triangles up to the 5th and calculate the new regions formed\n    while n < 5:\n        n += 1\n        regions += n\n\n    return regions\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the average heights\n    avg_height_girls, avg_height_boys = symbols('avg_height_girls avg_height_boys')\n\n    # Total number of children\n    total_children = 11 + 5\n    # Given average height of the group\n    avg_height_group = 122.5\n    # Given that the average height of the girls is 3.2 cm more than the average height of the boys\n    diff_avg_height = 3.2\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(avg_height_girls, avg_height_boys + diff_avg_height)\n    equation2 = Eq((11 * avg_height_girls + 5 * avg_height_boys) / total_children, avg_height_group)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (avg_height_girls, avg_height_boys))\n\n    return solutions[avg_height_girls]\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    # creating the equations based on the problem statement\n    equation1 = Eq(girls + boys, 70)  # total students\n    equation2 = Eq(girls * 70 + boys * 63, 70 * 66)  # total scores\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Total number of consecutive odd numbers\n    n = 9\n    # Sum of the consecutive odd numbers\n    total_sum = 1503\n    # Since the numbers are consecutive and odd, the difference between each term is 2, and they form an arithmetic sequence\n    # The mean of an arithmetic sequence is equal to the sum of the sequence divided by the number of terms\n    mean = total_sum / n\n    # The smallest value is 'mean' subtracting 4 times the common difference (2)\n    smallest_value = mean - (n-1)\n    return int(smallest_value)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n\n    # Calculate the common difference\n    common_difference = (term_108 - term_32) / (108 - 32)\n    \n    # Calculate the first term using the formula:\n    # a_n = a_1 + (n - 1) * d where \"n\" is the term number\n    first_term = term_32 - (32 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of candies as 'c'\n    c = symbols('c')\n\n    # Donna keeps half of the candies plus 3, so she gave the rest to Jane\n    donna_keeps = (1/2) * c + 3\n    donna_gives = c - donna_keeps\n\n    # Jane eats 1/3 of what she received plus 4 candies\n    jane_eats = (1/3) * donna_gives + 4\n    jane_gives = donna_gives - jane_eats\n\n    # Kate eats 1/4 of what she received and has 42 candies left\n    kate_eats = (1/4) * jane_gives\n    kate_has_left = jane_gives - kate_eats\n\n    # Kate has 42 candies left, which is the remaining after she eats\n    equation = Eq(kate_has_left, 42)\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Since A makes the first pass, and we need the ball to return to A after 3 passes,\n    # the total number of different methods is equivalent to the number of ways to choose\n    # the second and third players (since the fourth must be A).\n\n    # There are 3 options for the second player (can't be A)\n    # For the third player, it again can't be A, and also can't be the second player, \n    # which leaves 2 options.\n\n    # Thus, the total number of different methods is 3 * 2 = 6.\n    return 3 * 2\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    return (36 * 21) // (6 * 7)\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    # We are looking for the least common multiple (LCM) of 4 and 10\n    from math import lcm\n    \n    ans = lcm(4, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    numbers = [27, 28, 29, 30, 31, 32, 33]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let's denote Jason's storybooks as J and Anthea's as A.\n    # According to the problem, J = 30 (Jason has 30 storybooks).\n    # If Jason gives 4 storybooks to Anthea, they will have the same number.\n    # So, J - 4 = A + 4 (after giving 4 books to Anthea).\n    # The question asks for the initial difference, which is (J - A).\n    \n    # We know the value of J\n    J = 30\n    \n    # We also know after giving away 4 books, Jason will have J - 4 books.\n    # And Anthea will have A + 4 books.\n    # Since they have the same number of books, we can equate them:\n    # J - 4 = A + 4\n    # 30 - 4 = A + 4\n    # 26 = A + 4\n    # A = 26 - 4\n    A = 22\n    \n    # Now we compute the initial difference of storybooks, which is J - A.\n    difference = J - A\n\n    return difference\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # speed in meters per second\n    time_s = 12 * 60  # time in seconds (12 minutes)\n\n    distance = speed_m_per_s * time_s  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Q and P are different digits, so they have 10 possibilities each (0-9)\n    # but they are not the same so we do not need to consider the case where Q = P\n    Q, P = symbols('Q P', integer=True)\n    \n    # Equations based on the problem statement\n    equations = [\n        Q != P,  # Different digits\n        Q > 0,   # Q is a non-zero digit since it's the first digit of a 2-digit number\n        P >= 0   # P can be zero although it is not in this specific problem\n    ]\n    \n    # We also know that all the different letters stand for different digits\n    # In the provided code block, there is no further information, implying we might be missing a part of the problem\n    # Since there's no way to continue without additional constraints, let's assume it is a straightforward question of Q and P being any two different digits\n    # However, as for QP being a 2-digit number, there are 9 options for Q (1-9) and 10 options for P (0-9) minus 1 because P cannot be same as Q\n    \n    # The solution will be the number of pairs of (Q, P) we can have such that the conditions are satisfied\n    solution_set = []\n    for q_val in range(1, 10):\n        for p_val in range(10):\n            if q_val != p_val:\n                solution_set.append((q_val, p_val))\n    \n    # Since the question asks for the value of the 2-digit number QP,\n    # we'll return the value as a 2-digit number by combining Q and P\n    # Assuming we need the first valid solution\n    Q_val, P_val = solution_set[0]  # Taking the first solution pair from the solution set\n    QP = int(f\"{Q_val}{P_val}\")  # Construct the 2-digit number from Q and P\n\n    return QP\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    # Using the distributive property to extract common factors\n    ans = (2020 * 68) + (505 * 128)\n    return ans\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change_received = 4.83\n    cost_of_newspaper = 2.20\n\n    cost_of_tissues = total_paid - change_received - cost_of_newspaper\n\n    return cost_of_tissues\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's solution\n    xavier_sugar = 100 * 0.25\n    # Yelena's solution\n    yelena_sugar = 500 * 0.55\n    # Carol's solution\n    carol_sugar = 400 * 0.35\n    \n    # Total sugar\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    \n    # Total solution weight\n    total_weight = 100 + 500 + 400\n    \n    # Concentration of resulting sugar solution\n    concentration = (total_sugar / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol 'b' for B's time to finish the job alone\n    b = symbols('b')\n\n    # A's time to finish the job alone is b/2, since A is twice as efficient as B\n    # The time difference between A and B is 12 days\n    \n    # Equation representing the difference in time to finish the job\n    equation = Eq(b / 2 + 12, b)\n\n    # Solving the equation to find B's time to finish the job alone\n    b_days = solve(equation, b)[0]\n\n    # A's time to finish the job alone\n    a_days = b_days / 2\n\n    # A's work rate is 1/a_days\n    # B's work rate is 1/b_days\n    # Together, their work rate is 1/a_days + 1/b_days\n    \n    # Time to complete the job when A and B work together\n    # is the reciprocal of the combined work rate\n    total_time_together = 1 / (1/a_days + 1/b_days)\n\n    return total_time_together\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let x be the total number of boys (and girls) at the exhibition initially.\n    # After 3/5 of the boys and 42 girls left, there were x - 3/5*x boys and x - 42 girls left.\n    # According to the problem, the number of boys left was 12 more than the number of girls left.\n    # Thus we have the equation: x - 3/5*x = (x - 42) + 12\n    # Simplifying the equation gives: 2/5*x = 54\n    # Solving for x gives: x = 54 / (2/5) = 54 * 5 / 2 = 135\n    # The total number of students at the exhibition at first is x (boys) + x (girls) = 2 * x\n    x = (54 * 5) // 2\n    total_students = 2 * x\n    \n    return total_students\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    # 1 digit number\n    one_digit = permutations([1, 2, 3], 1)\n    # 2 digits number\n    two_digits = permutations([1, 2, 3], 2)\n    # 3 digits number\n    three_digits = permutations([1, 2, 3], 3)\n    \n    # Count all the unique permutations of different lengths\n    ans = len(list(one_digit)) + len(list(two_digits)) + len(list(three_digits))\n    return ans\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late = 12 / 60\n    early = -4 / 60\n\n    # The difference in time is the sum of being late and being early\n    time_difference = late - early\n\n    # Inverse proportion between speed and time: (speed1 / speed2) = (time2 / time1)\n    # Let d be the distance from Mike’s home to office\n    # Time taken at 3 km/h: d / 3\n    # Time taken at 5 km/h: d / 5\n    # (d / 3 − d / 5) = time_difference\n    # (2d / 15) = time_difference\n    # d = (time_difference * 15) / 2\n    distance = (time_difference * 15) / 2\n    return distance\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Rachel, Alice = symbols('Rachel Alice')\n\n    equation1 = Eq(Rachel - 10, Alice + 10)\n    equation2 = Eq(Rachel + 10, 3 * (Alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (Rachel, Alice))\n\n    total_candy = solutions[Rachel] + solutions[Alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12 = cost_per_case * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_last_night = -8\n    temperature_today = 13\n\n    temperature_increase = temperature_today - temperature_last_night\n\n    return temperature_increase\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of units each boy counts before more children joining\n    # Let y be the number of units each girl counts before more children joining\n    boys, girls = symbols('boys girls')\n    \n    # The original ratio of boys to girls is 3 : 2\n    equation1 = Eq(boys/girls, 3/2)\n    \n    # After 12 boys and 12 girls joined, the ratio is 19 : 14\n    equation2 = Eq((boys + 12)/(girls + 12), 19/14)\n    \n    # Solve the system of equations for boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate the total number of children in the Botanic Gardens\n    total_children_afternoon = solutions[boys] + solutions[girls] + 12 + 12\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    # After the transfer, each room will have half of the total pupils\n    pupils_per_room = total_pupils // 2\n    \n    return pupils_per_room\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # When there are four different colored socks\n    ways_with_diff_socks = factorial(4) # 4!\n    \n    # When there are two different colored pairs of socks (2 socks of each color)\n    # We divide by the factorial of the number of socks in each pair to eliminate the repeated arrangements within those pairs\n    ways_with_pairs = factorial(4) // (factorial(2) * factorial(2)) # (4!)/(2! * 2!)\n    \n    return ways_with_diff_socks, ways_with_pairs\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar1 = 23\n    length_iron_bar2 = 37\n    welded_part = 3\n\n    full_length = length_iron_bar1 + length_iron_bar2 - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Period T1 of pendulum on Earth with gravity g1\n    T1 = 1  # seconds\n    g1 = 9.8  # m/s^2, acceleration due to gravity on Earth\n\n    # g2, acceleration due to gravity on the Moon\n    g2 = g1 / 6\n\n    # Calculate the ratio of the gravities\n    gravity_ratio = sqrt(g1 / g2)\n\n    # Calculate the period on the Moon T2 using the gravity ratio and T1\n    T2 = T1 * gravity_ratio\n\n    return T2\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Start with imagining the first layer as one tile\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    # Calculate the total number of layers needed for 400 tiles\n    # Each layer will be formed by (layer*2 - 1)**2 tiles\n    while (layer*2 - 1)**2 <= 400:\n        tiles_in_layer = (layer*2 - 1)**2\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        layer += 1\n\n    # Calculate the difference in the number of red and green tiles\n    tile_difference = abs(red_tiles - green_tiles)\n\n    # Dominant color check\n    if red_tiles > green_tiles:\n        dominant_color = \"red\"\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = \"green\"\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n    delta = end_date - start_date\n    return delta.days + 1  # +1 to include the start date\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(10):\n        top_number = int(f\"9{A}8{A}7\")\n        bottom_number = int(f\"{A}65\")\n        if top_number % bottom_number == 0:\n            return A\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let's denote the number of correct answers by Justin as j and by William as w.\n    # According to the problem, we have the following system of equations:\n    # 6j - 2(10 - j) + 6w - 2(10 - w) = 96 (total points)\n    # 6j - 6w = 24 (Justin has 24 more points than William)\n\n    # We can simplify the system to:\n    # 8j + 8w = 96 + 40 (because -2(10 - j) and -2(10 - w) adds 20 each to the total)\n    # j - w = 4 (dividing both sides of 6j - 6w = 24 by 6)\n\n    # Now solving for j and w:\n    # Adding the two equations we get\n    # 9j = 136\n    # j = 136 / 9\n\n    # Since the number of correct answers must be an integer, let's find the closest integer that satisfies the equations\n    for j in range(1, 11):\n        # Calculate w using the second equation j - w = 4\n        w = j - 4\n        # Substitute back into the first equation and check if it holds true\n        if 8 * j + 8 * w == 136:\n            # Return the number of correct answers by William\n            return w\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    import math\n    # Calculate the square root of 100 to find the length of one side \n    # since they are standing in a square array.\n    side_length = int(math.sqrt(100))\n\n    # Calculate the total number of people on the perimeter (outermost layer)\n    # which is all four sides minus the four corners (since they are counted twice)\n    outermost_people = 4 * side_length - 4\n\n    return outermost_people\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # The amount of job A can do in one day\n    A_work_per_day = 1/15\n    # The amount of job B can do in one day\n    B_work_per_day = 1/10\n\n    # The amount of job done by A and B together in 3 days\n    work_done_in_3_days = 3 * (A_work_per_day + B_work_per_day)\n\n    # The amount of job remaining after 3 days\n    remaining_work = 1 - work_done_in_3_days\n\n    # The number of days B takes to finish the remaining job\n    days_B_to_finish = remaining_work / B_work_per_day\n\n    return days_B_to_finish\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n\n    count = 0\n    while term > 0:\n        term += common_difference\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let the original amount of cash be x\n    # After giving 3/7 of his cash to his sister, Hugo is left with 4/7 of his cash\n    # Then, Hugo gave 1/8 of the remaining cash to his mum, which is 1/8 * 4/7 of the original cash (x)\n    # Finally, he is left with 280, which is the original cash (x) minus the cash given to his sister and mum\n    \n    # Therefore, we have the equation:\n    # x - (3/7)x - (1/8)(4/7)x = 280\n    # Simplifying the equation, we will find the value of x\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - (3/7)*x - (1/8)*(4/7)*x, 280)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n    total_balls = 34\n\n    eq1 = Eq(red/white, 1/2)\n    eq2 = Eq(white/black, 3/4)\n    eq3 = Eq(red + white + black, total_balls)\n\n    solutions = solve((eq1, eq2, eq3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    num_people = 8\n    amount_per_person = total_amount / num_people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Factorials of numbers greater than 4 end with a 0 because they include 2 and 5 as factors,\n    # which when multiplied give a trailing zero. The trailing zeroes accumulate as the factorial increases.\n    # Therefore, the last non-zero digit of 2014! would be 0. \n    return 0\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # There is a well-known strategy in this type of game called \"Nim\":\n    # the winning strategy is to always leave an even number of piles \n    # of the same size during your turn.\n\n    # Calculating the Nim-sum of the initial state of the piles.\n    nim_sum = 88 ^ 52\n\n    # If the nim-sum is not zero, then there exists a winning strategy\n    # for the first player (Tom). Otherwise, no matter how well Tom plays,\n    # if Jane does not make a mistake, she will win the game.\n\n    # Tom's strategy:\n    # He needs to make a move such that the new nim-sum of the piles is zero.\n    # We do this by finding which pile to draw from, and how many cards to take\n    # to create a pair of equal piles (resulting in a nim-sum of zero).\n\n    if nim_sum != 0:\n        # Find which pile to reduce\n        if nim_sum <= 52: \n            # Reduce pile B\n            cards_to_take = 52 - nim_sum\n            return (\"B\", cards_to_take)  # B is the pile, cards_to_take is the number of cards to take from pile B\n        else:\n            # Reduce pile A\n            cards_to_take = 88 - nim_sum\n            return (\"A\", cards_to_take)  # A is the pile, cards_to_take is the number of cards to take from pile A\n    else:\n        # If the nim-sum is zero, Tom cannot secure a win assuming Jane plays optimally. \n        # But since we're assuming Tom can win, this shouldn't happen with the initial setup.\n        return (\"No winning strategy\", 0)\n        \n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    return cost\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2*i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    pencils_per_pen = pen_cost // pencil_cost\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    return sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_side_length = 5  # Side length of the square base in cm\n    hole_side_length = 1  # Side length of the square hole in cm\n    total_volume = 480  # Total volume of the prism in cm^3\n\n    base_area = base_side_length ** 2  # Area of the square base in cm^2\n    hole_area = hole_side_length ** 2  # Area of the square hole in cm^2\n    effective_base_area = base_area - hole_area  # Effective area in cm^2\n\n    height = total_volume / effective_base_area\n    return height\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of yellow beads be 3x and green beads be 2x\n    x = symbols('x')\n\n    # Initial numbers\n    initial_yellow = 3 * x\n    initial_green = 2 * x\n\n    # New numbers after buying more beads\n    new_yellow = initial_yellow + 5\n    new_green = initial_green + 20\n\n    # Now the ratio of green to yellow is 2:3, i.e., new_green / new_yellow = 2 / 3\n    equation = Eq(new_green / new_yellow, 2 / 3)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    # Calculate the initial total number of beads\n    initial_total_beads = 3 * solution_x[0] + 2 * solution_x[0]\n\n    return int(initial_total_beads)\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    return 12 + 102 + 1002 + 10002\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n    \n    # Total marbles given to his 2 sisters\n    marbles_given_to_sisters = 2 * marbles_given_to_each_sister\n    \n    # Calculate the total initial marbles Henry had\n    initial_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left_with_henry\n    \n    return initial_marbles\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum(2*i+1 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        ""
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Palindromes between 10 and 100\n    # The number of palindromes with two digits (10-99) will be 9 (11, 22, ..., 99)\n    count += 9\n    \n    # Palindromes between 100 and 1000\n    # For three-digit palindromes (100-999), they must be in the form of 'aba',\n    # Where 'a' can be 1-9 and 'b' can be 0-9.\n    # So there are 9 options for 'a' and 10 options for 'b'.\n    count += 9 * 10\n    \n    return count\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] % 2 == 0 and perm[0] != 0:  # Ends with an even digit and does not start with 0\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    \n    # x + y = 50 (Total questions)\n    # 4x - y = 110 (Total score)\n    \n    # We can solve this system of equations as follows:\n    # x = (50 + 110) / 5\n    # x = 160 / 5\n    x = (50 + 110) / 5\n    \n    return int(x)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    # Since the ratio of lemon to chocolate cakes is 4:5, we can represent\n    # the number of lemon cakes as 4x and chocolate cakes as 5x, where x is \n    # the common multiplier.\n    # Then 4x + 5x = total remaining cakes\n    # => 9x = total remaining cakes\n    # Solving for x gives us the common multiplier, and multiplying that by 4 gives us lemon cakes.\n    \n    x = remaining_cakes / 9\n    lemon_cakes = 4 * x\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # first digit can't be 0 because it's a three-digit number\n        for digit2 in range(10):  # second digit can be 0-9\n            for digit3 in range(10):  # third digit can be 0-9\n                digits = [digit1, digit2, digit3]\n                if len(set(digits)) == 2:  # there have to be exactly 2 different digits\n                    count += 1\n    # Subtract combinations that are permutations of two identical digits\n    # as they were counted three times instead of just once\n    count -= (9 * 9)  \n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    numbers_sum = 5 * 5  # Mean multiplied by the number of values\n    known_sum = 3 + 4 + 6 + 10\n    fifth_number = numbers_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    ways = 0\n    for first_receiver in ['Cici', 'April']:\n        for second_receiver in ['Cici', 'Lily', 'April']:\n            if first_receiver != second_receiver:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    average_first_four = 89\n    score_fifth = 94\n    \n    total_score_first_four = average_first_four * 4\n    total_score_five_assignments = total_score_first_four + score_fifth\n    average_five_assignments = total_score_five_assignments / 5\n    \n    return average_five_assignments\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Judy has and y be the number of books Lily has\n    x, y = symbols('x y')\n    \n    # Lily sends y - x books to Judy to have the same amount\n    equation = Eq((y - (y - x)) / 2, x + (y - x))\n\n    # Solving the equation\n    solutions = solve(equation)\n\n    # The number of books Lily has more than Judy is y - x\n    return solutions[y] - solutions[x]\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        ""
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's amount collected\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Given data\n    alan_amount = 74\n    bilal_amount = 86\n\n    # Equations based on the problem statement\n    equation1 = Eq(alan, alan_amount)\n    equation2 = Eq(bilal, bilal_amount)\n    equation3 = Eq(chloe, 2 * david)  # chloe collects twice as much as David\n    equation4 = Eq(david, 3 * emily)  # David raises three times as much as Emily\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)  # Total amount raised\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones) == 15 and tens == 2 * hundreds and hundreds == ones + 1:\n                    return int(f\"{hundreds}{tens}{ones}\")\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    # Number of wibbles\n    num_wibbles = 11\n    # Number of arms per wibble\n    arms_per_wibble = 6\n    # Total number of arms at the conference\n    total_arms = 81\n    # Calculate the number of arms that wibbles have in total\n    arms_from_wibbles = num_wibbles * arms_per_wibble\n    # Calculate the remaining number of arms, which should be from wobbles\n    remaining_arms_for_wobbles = total_arms - arms_from_wibbles\n    # Number of arms per wobble\n    arms_per_wobble = 5\n    # Calculate the number of wobbles based on the remaining arms\n    num_wobbles = remaining_arms_for_wobbles / arms_per_wobble\n    \n    return int(num_wobbles)\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        ""
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15 # km/h\n    kelvin_speed = 10 # km/h\n    speed_difference = maverick_speed - kelvin_speed # km/h\n\n    maverick_claim_time = 24 # minutes\n    maverick_claim_time_hours = maverick_claim_time / 60 # hours\n\n    kelvin_lead = 10 # km\n    time_for_maverick_to_catch_up = kelvin_lead / speed_difference # hours\n\n    # Kelvin is correct if the time for Maverick to catch up is greater than what Maverick claimed\n    kelvin_is_correct = time_for_maverick_to_catch_up > maverick_claim_time_hours\n\n    # If Kelvin is correct, calculate the time it actually took in minutes\n    if kelvin_is_correct:\n        actual_time_minutes = time_for_maverick_to_catch_up * 60\n        return int(actual_time_minutes)\n    else:\n        return int(maverick_claim_time)\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Given the custom operation a # b = a + b - (ab / 910)\n    # we can try to spot a pattern that will help compute the final result.\n    def custom_operation(a, b):\n        return a + b - ((a * b) / 910)\n\n    # Let's try to find the pattern by computing the operation step by step\n    # starting with the smallest numbers.\n    current_result = custom_operation(1, 2)\n\n    # Now, we iterate over the remaining numbers applying the custom operation.\n    for i in range(3, 2017):\n        current_result = custom_operation(current_result, i)\n\n    # The custom operation essentially reduces to incrementing the current result\n    # by 1, since a # b = a + b - (ab / 910) and (ab / 910) tends to 1 as a and b increase.\n    # Thus, the final answer is one less than the sum of the sequence from 1 to 2016.\n    ans = current_result + 1\n\n    return int(ans)\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n\n    # Calculate the number of ways to pick one boy and one girl\n    ans = num_boys * num_girls\n\n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Calculate total length of the road using the plum trees information\n    # There are 41 trees, hence there will be 40 intervals of 4m each\n    plum_tree_intervals = 40\n    distance_between_plum_trees = 4  # in meters\n    total_length_of_road = plum_tree_intervals * distance_between_plum_trees\n\n    # Now, using the total length, calculate the number of pine trees\n    # Considering that there are trees planted at opposite ends of the road\n    # So, the interval will be one less than the number of pine trees\n    distance_between_pine_trees = 5  # in meters\n    pine_tree_intervals = total_length_of_road / distance_between_pine_trees\n    number_of_pine_trees = int(pine_tree_intervals) + 1  # add one for the tree at the beginning\n\n    return number_of_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is older man's current age, y is younger man's current age\n    equation1 = Eq(x - y, y - 4)  # When older was the age of the younger, younger was 4\n    equation2 = Eq(x + (x - y), 61 + y)  # When younger becomes the age of the older, younger will be 61\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        ""
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    incorrect_deduction = -2\n\n    for correct_answers in range(7):\n        incorrect_answers = 6 - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_deduction == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    initial_people = 10\n    initial_time = 9\n    target_time = 3\n\n    # Work is the same, so initial_people * initial_time = required_people * target_time\n    required_people = (initial_people * initial_time) / target_time\n\n    return int(required_people)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_litres = week1 + week2 + week3\n\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    fraction_remaining_after_book = 1 - 1 / 3\n    fraction_spent_on_bag = 2 / 5\n\n    # Find the money left after buying the book\n    money_left_after_book = bag_cost / fraction_spent_on_bag\n    # Find the original money\n    original_money = money_left_after_book / fraction_remaining_after_book\n\n    return original_money\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 13 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # As the order doesn't matter, divide count by 6 (3! for permutations of 3 numbers).\n    return count // 6\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 0.6\n    remaining_watermelons = 48\n\n    initial_watermelons = remaining_watermelons / (remaining_after_first_day * remaining_after_second_day)\n\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n\n    # Since Jessica sits in front of Judy, the total desks will be:\n    # Desks in front of Jessica + 1 (for Jessica's desk) + 1 (for Judy's desk) + Desks behind Judy\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    # Calculate the square of sums from 1 to 15\n    sum_squares_15 = (1/6) * 15 * (15 + 1) * (15 + 2)\n    \n    # Calculate the square of sums from 1 to 4 (since we want to start from 5, not 1)\n    sum_squares_4 = (1/6) * 4 * (4 + 1) * (4 + 2)\n    \n    # Subtract the sum of squares from 1 to 4 from the sum of squares from 1 to 15\n    # To get the sum of squares from 5 to 15\n    ans = sum_squares_15 - sum_squares_4\n    \n    return int(ans)\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    # Transform the percentage to a decimal and solve for x\n    x = (2.5 + 5) / 0.75\n    return x\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start_amount = 1000\n    difference = 11\n    term = start_amount\n    term_number = 1\n\n    while term >= 0:\n        term = start_amount - difference * term_number\n        term_number += 1\n\n    first_negative_number = term\n\n    return first_negative_number\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # We have two equations based on the problem statement\n    # 1. Total number of students is the sum of boys and girls (b + g = 152)\n    # 2. Removing 1/11 of boys and 5 girls results in equal numbers ((b - b/11) = (g - 5))\n    equation1 = Eq(b + g, 152)\n    equation2 = Eq(b - b/11, g - 5)\n\n    # Solving the simultaneous equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    middle = 0.126\n    one_number = 0.11\n    difference = middle - one_number\n    other_number = middle + difference\n    \n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_chocolate = 7 / 12\n    toffees = chocolates * toffees_per_chocolate\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in [i for i in range(1, num+1) if num % i == 0]:\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_price_per_case = 56\n    mango_cases = 24\n    lychee_cases = 19\n    total_cost = 2826\n\n    lychee_cost_per_case = (total_cost - (mango_price_per_case * mango_cases)) / lychee_cases\n    \n    return lychee_cost_per_case\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time for each game\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_as_decimal = 65 / 100\n    fraction_as_decimal = 1 / 4\n\n    total_sum = percentage_as_decimal + 0.507 + fraction_as_decimal\n    return total_sum\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                total = coin1 + coin2 + coin3\n                unique_totals.add(total)\n    \n    return len(unique_totals)\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    all_combinations = set(permutations(cards, 3))\n    valid_combinations = set(filter(lambda x: x[0] != '0', all_combinations))\n    distinct_three_digit_numbers = len(valid_combinations)\n    return distinct_three_digit_numbers\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if (100*P + 10*Q + R) * 3 == P*1000 + Q*100 + Q*10 + R:\n                    return P + Q + R\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # If the numbers are consecutive, let the middle number be x.\n    # Thus, the sum of the five consecutive numbers would be:\n    # (x - 2) + (x - 1) + x + (x + 1) + (x + 2) = 5x\n    # Since the sum of these five numbers is 100:\n    # 5x = 100\n    # Find the middle number first\n    x = 100 // 5\n\n    # The smallest number would be two less than the middle number\n    smallest_number = x - 2\n\n    return smallest_number\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid £10.\n    # Let y be the number of children who paid £15 to have their name put onto the shirts.\n    # x + y = 50 (total number of children)\n    # 10x + 15y = 555 (total amount paid)\n    \n    # We can rearrange the first equation to find x in terms of y:\n    # x = 50 - y\n    \n    # Now we can substitute x in the second equation:\n    # 10(50 - y) + 15y = 555\n    \n    # Now we'll solve for y:\n    y = (555 - 10 * 50) // 5 # (The // is used for integer division)\n    \n    return y\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs from 7:30 a.m. to 8:30 a.m. for 1 hour at a speed of 5 mph\n    jogging_distance = 5 * 1 \n    \n    # Susan walks from 8:30 a.m. to 10:30 a.m. for 2 hours at a speed of 3 mph\n    walking_distance = 3 * 2\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_numbers = [i**3 for i in range(1, 351)]\n    for cn in cube_numbers:\n        if 44000 % cn == 0:\n            q = 44000 // cn\n            if (q**(1/3)).is_integer():\n                return q\n    return None\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    \n    return oranges_left\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    # All possible digits for A, B, C\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # First number 5A3\n        num1 = 500 + A*10 + 3\n        # Second number B7C\n        num2 = B*100 + 70 + C\n        # Multiplication result\n        result = num1 * num2\n        # Check if result has the exact format of the given multiplication\n        if f\"{result}\"[:2] == \"3\" + str(B) and f\"{result}\"[4:6] == \"1\" + str(A):\n            return A + B + C\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    number_of_bags = (total_balls - 2) // balls_per_bag\n\n    return number_of_bags\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        ""
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    road_length = 800\n    intervals = total_trees - 1\n\n    distance_between_trees = road_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possible cards based on given conditions by suit and numbers\n    possible_cards = {\n        'spades': ['A', 'J', 'K'],\n        'hearts': ['3', '5', 'K'],\n        'diamonds': ['2', '7', 'J'],\n        'clubs': ['A', '7']\n    }\n\n    # After Eddie's first statement, we can rule out any suit with an Ace (A)\n    # because if it were an Ace, Eddie would know the card immediately.\n    del possible_cards['spades']\n    del possible_cards['clubs']\n\n    # Avril then says that she knows the card after Eddie's statement.\n    # For Avril to know, the number must be unique among the remaining suits.\n    # We find these unique numbers:\n    unique_numbers = set(possible_cards['hearts']).symmetric_difference(\n        set(possible_cards['diamonds']))\n\n    # Now, we look for a unique number which cannot be a 'K' because both suits have a King\n    unique_numbers = [number for number in unique_numbers if number != 'K']\n\n    # There should be only one unique number that Avril could know for sure now\n    the_number = unique_numbers[0]\n\n    # Now we find the suit that has this unique number\n    the_suit = ''\n    for suit in possible_cards:\n        if the_number in possible_cards[suit]:\n            the_suit = suit\n            break\n\n    # Eddie now knows as well, which means the card is identified\n    return the_suit + the_number\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_gaps = 9 + 1  # Number of trees plus one\n    distance_between_each_tree = distance_between_buildings / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Total notebooks Andy has initially\n    total_andy = 149\n    # Notebooks given to sister\n    given_to_sister = 38\n\n    # After Andy gives 38 notebooks to his sister, they have the same amount, then Andy has:\n    total_andy_after_giving = total_andy - given_to_sister\n\n    # Joey's calculation is 38 divided by 2 equals 19 and then 149 minus 19 equals 130, which is wrong.\n    # Correct calculation:\n    # We will divide the remaining notebooks of Andy by 2 to get the initial number of notebooks sister had.\n    total_sister_initial = total_andy_after_giving / 2\n\n    return total_sister_initial\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    # Change the hundreds digit\n    for i in [1] + list(range(3, 10)):  # start from 1 and 3 to 9 (200 is not prime, so we skip it)\n        number = int(f\"{i}00\")\n        if isprime(number):\n            count += 1\n\n    # Change the tens digit\n    for i in range(10):\n        number = int(f\"2{i}0\")\n        if isprime(number):\n            count += 1\n\n    # Change the units digit\n    # Skip 0 and 5 as prime numbers greater than 5 do not end in 0 or 5\n    for i in [1, 2, 3, 7, 9]:\n        number = int(f\"20{i}\")\n        if isprime(number):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_dollars = cost_in_euros * euro_to_dollar_rate\n    return cost_in_dollars\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    four_numbers_sum = 3 + 4 + 6 + 10\n    total_sum = 5 * 5  # Mean times number of values\n    fifth_number = total_sum - four_numbers_sum\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_back = 14\n    people_in_front_of_emily = 25\n\n    total_people = emily_position_from_back + people_in_front_of_emily\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma needs 12 minutes to cut a piece of wood into 4 sections.\n    # This means she makes 3 cuts in 12 minutes (since 4 sections require 3 cuts).\n    # Hence the time taken for each cut is 12 minutes / 3 cuts.\n    time_per_cut = 12 / 3\n\n    # To cut the wood 5 times, she would need to make 5 cuts.\n    # Total time needed for 5 cuts is time per cut multiplied by the number of cuts.\n    total_time_for_5_cuts = time_per_cut * 5\n\n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    total_pages = 0\n    count_5s = 0\n    \n    while count_5s < 30:\n        total_pages += 1\n        count_5s += str(total_pages).count('5')\n\n    return total_pages\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the deadline in days, and p be the total number of pages in the storybook.\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, the total number of days will be p/30, which is 2 days more than the deadline.\n    # If Vanessa reads 39 pages a day, the total number of days will be p/39, which is 4 days less than the deadline.\n    equation1 = Eq(p / 30, d + 2)\n    equation2 = Eq(p / 39, d - 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    solution = solve(equation, x)\n    \n    # Celeste made a mistake in simplification. Let's correct it.\n    # The correct equation is:\n    # 13 - 4x + 6 = 5 - x + 2\n    # -4x + x = 5 + 2 - 13 - 6\n    # -3x = -12\n    # x = -12 / -3\n    # x = 4\n    # So the correct answer is x = 4.\n\n    return solution[0]  # Return the correct solution for x\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = (total_rooms / (rooms_per_day_per_worker * workers))\n\n    return days\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges.\n    equation1 = Eq(apple + 2 * orange, 48)\n    # Jade buys 1 apple and 1 orange.\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # We need to find the cost of 1 orange\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the cost of one tennis ball and y the total pocket money\n    x, y = symbols('x y')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(4 * x + 27, y)  # Week 1 spending 4 tennis balls + 27p = total pocket money\n    equation2 = Eq(2 * x + 151, y)  # Week 2 spending 2 tennis balls + £1.51 = total pocket money\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the total pocket money, which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        digits = str(num)\n        if digits.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, will, tom = symbols('jason will tom')\n    \n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n    \n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Elias had 5 times as many stickers as Aileen\n    equation1 = Eq(elias, 5 * aileen)\n    # After Elias gave away 88 stickers and Aileen lost 8 stickers, they had the same number of stickers left\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Get the final number of stickers for each\n    final_elias = solutions[elias] - 88\n    final_aileen = solutions[aileen] - 8\n\n    return final_elias, final_aileen\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtracting Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let the number of pieces Gerald eats be g\n    # Then, Thomas eats 5/3 * g pieces of cheese\n\n    # Total pieces eaten is the sum of pieces eaten by both\n    # g + 5/3 * g = 104\n    # Multiply through by 3 to clear the fraction\n    # 3 * g + 5 * g = 312\n    # 8 * g = 312\n    # g = 312 / 8\n    # g = 39\n    gerald_pieces = 312 // 8\n    \n    # Thomas pieces\n    thomas_pieces = (5 * gerald_pieces) // 3\n\n    # How many more pieces did Thomas eat\n    more_pieces = thomas_pieces - gerald_pieces\n\n    return more_pieces\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    \n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls, adults, children = symbols('boys girls adults children')\n    \n    # Since boys = 2/7 * girls, we set up the first equation\n    equation1 = Eq(boys, (2/7) * girls)\n    \n    # Since adults = 2/3 * children and children = boys + girls, we set up the second equation\n    equation2 = Eq(adults, (2/3) * (boys + girls))\n    \n    # We know adults = boys + 1228, so we set up the third equation\n    equation3 = Eq(adults, boys + 1228)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n    \n    # Report the number of people at the park, which is sum of boys, girls, and adults\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n    \n    return total_people\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    chloe_spent_per_day = 20\n    gordon_spent_per_day = 25\n    difference_in_spending_per_day = gordon_spent_per_day - chloe_spent_per_day\n    difference_in_remaining_money = 157 - 82\n\n    days_passed = difference_in_remaining_money / difference_in_spending_per_day\n    initial_money_chloe = 157 + (chloe_spent_per_day * days_passed)\n    initial_money_gordon = initial_money_chloe\n\n    return initial_money_gordon\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of rackets purchased\n    # Total cost price = cost_price_per_racket * x\n    # Total selling price for rackets sold = selling_price_per_racket * (x - remaining_rackets)\n    # Total selling price = Total cost price + Profit\n    # selling_price_per_racket * (x - remaining_rackets) = cost_price_per_racket * x + profit\n    # x = (profit + selling_price_per_racket * remaining_rackets) / (selling_price_per_racket - cost_price_per_racket)\n\n    x = (profit + selling_price_per_racket * remaining_rackets) / (selling_price_per_racket - cost_price_per_racket)\n\n    return int(x)\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    \n    equation1 = Eq(b + 24, a - 2)\n    equation2 = Eq(a + 25, 5 * (b - 25))\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    good_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    total_revenue = good_melons * selling_price_per_melon\n    profit = total_revenue - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `x` be the total value of the jewels in box P before the transfer\n    # Let `y` be the total value of the jewels in box Q before the transfer\n    x, y = symbols('x y')\n\n    # Box P initially had an average value of x/3 per jewel\n    # Box Q initially had an average value of y/3 per jewel\n\n    # After transfer, Box P has 2 jewels, so the average value becomes (x - 5000) / 2\n    # This average increased by 1000, so we get the equation (x - 5000) / 2 = (x / 3) + 1000\n\n    # After transfer, Box Q has 4 jewels, so the average value becomes (y + 5000) / 4\n    # This average also increased by 1000, so we get the equation (y + 5000) / 4 = (y / 3) + 1000\n\n    # We set up our equations based on the above descriptions\n    equation1 = Eq((x - 5000) / 2, (x / 3) + 1000)\n    equation2 = Eq((y + 5000) / 4, (y / 3) + 1000)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the sum of `x` and `y`\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    for i in range(1, 150):\n        if 150 % i == 17 and 100 % i == 5:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to decimal, add them, then convert back to base 8\n    sum_in_decimal = int('25', 8) + int('37', 8)\n    ans = oct(sum_in_decimal).replace('0o', '')\n    return ans\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # in cm\n    cross_distance = 1  # in cm\n\n    crosses = (line_length // cross_distance) + 1\n\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # Total balloons\n    total_balloons = 75\n    # Pattern \"red, red, green, yellow, yellow, green\" has a length of 6\n    pattern_length = 6\n    # Position of green balloons in the pattern is at index 2 and 5 (0-indexed)\n    positions_of_green = [2, 5]\n\n    # Calculate the number of complete patterns in the total number of balloons\n    complete_patterns_count = total_balloons // pattern_length\n\n    # Calculate the number of green balloons in complete patterns\n    green_balloons_count = complete_patterns_count * len(positions_of_green)\n\n    # Calculate the remaining balloons that are not part of a complete pattern\n    remaining_balloons = total_balloons % pattern_length\n\n    # For the remaining balloons, check if any additional greens are present\n    for position in positions_of_green:\n        if remaining_balloons > position:\n            green_balloons_count += 1\n\n    return green_balloons_count\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the number of marbles Sandra had initially more than Jessica\n    x = symbols('x')\n\n    # After Sandra gave Jessica 13 marbles, she had 6 fewer marbles than Jessica.\n    # This translates to the equation: (Sandra - 13) = (Jessica + 13) - 6\n    # Since Sandra had x more marbles than Jessica initially, Jessica's marbles are (Sandra - x).\n    # The equation then becomes: (Sandra - 13) = (Sandra - x + 13) - 6\n    equation = Eq(Sandra - 13, (Sandra - x + 13) - 6)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_sixth = 6 - 1\n\n    distance_per_interval = distance_between_first_and_sixth / number_of_intervals_sixth\n    number_of_intervals_ninth = 9 - 1\n\n    distance_between_first_and_ninth = distance_per_interval * number_of_intervals_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize counts of digits 1 and 2 \n    count_ones = 0\n    count_twos = 0\n    n = 0\n\n    # Loop to find N by incrementally adding counts of 1s and 2s\n    while True:\n        n += 1\n        count_ones += str(n).count('1')\n        count_twos += str(n).count('2')\n\n        # Break the loop when the counts match the specified conditions\n        if count_ones == 15 and count_twos == 14:\n            break\n\n    return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let x be the total number of candies Kate initially bought.\n    # Kate ate 1/3 of the candies at home, so she had 2/3 left.\n    # She then gave each of her 7 friends 26 candies.\n    # She was left with 22 candies.\n\n    # Setting up the equation:\n    # (2/3) * x - 7 * 26 = 22\n    # Solving for x:\n    x = (7 * 26 + 22) * 3 / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current = 9\n    bob_current = 5\n    total_floors = 25\n\n    rate = andy_current / bob_current\n    bob_top_floor = total_floors / rate\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    # The representation of the number with place values can be interpreted as follows:\n    # '12m' is actually 120 + m\n    # '1m' is actually 10 + m\n    # The equation can then be written as:\n    # 120 + m = 9 * (10 + m) - 2\n    \n    # Solving the equation for m\n    m = (9 * (10 + m) - 2 - 120) // (1 - 9)\n    # Simplifying the right-hand side\n    m = (90 + 9*m - 2 - 120) // (1 - 9)\n    # Further simplifying\n    m = (9*m - 32) // (1 - 9)\n    # Now we can solve for m without m on the right-hand side\n    m = -32 // -8\n\n    return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    words, speed = symbols('words speed')\n\n    # Original time to finish work\n    original_time = 3\n    # New time to finish work\n    new_time = original_time - 1\n\n    # Original speed equation: speed * original_time = words\n    equation1 = Eq(speed * original_time, words)\n    # New speed equation: (speed + 30) * new_time = words\n    equation2 = Eq((speed + 30) * new_time, words)\n\n    solutions = solve((equation1, equation2), (speed, words))\n\n    return solutions[words]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Initialize all lights to be off\n    lights = [0] * 10  # 0 represents off, 1 represents on\n    \n    # Ms. Lily presses every other light switch starting from 1\n    for i in range(0, 10, 2):  # Iterate over every other switch\n        lights[i] = 1  # Turn on the light\n    \n    # Sam presses each even-numbered switch 7 times\n    for i in range(1, 10, 2):  # Even-numbered switches\n        lights[i] = (lights[i] + 7) % 2  # Each press changes the state\n    \n    # Calculate the number of lights that are on\n    return lights.count(1)\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    initial_passengers = 35\n    # At the first stop\n    get_off_first = initial_passengers * 2 // 5\n    get_on_first = 7\n    remaining_after_first = initial_passengers - get_off_first + get_on_first\n    # At the next stop\n    get_off_second = remaining_after_first * 1 // 4\n    get_on_second = 13\n    remaining_after_second = remaining_after_first - get_off_second + get_on_second\n\n    return remaining_after_second\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_height = 8\n    climb_up = 3\n    slide_down = 2\n    current_height = 0\n    days = 0\n\n    while current_height < total_height:\n        days += 1\n        current_height += climb_up\n        if current_height >= total_height:\n            break\n        current_height -= slide_down\n\n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            for x3 in range(98, 103):\n                if x1 + x2 + x3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    total_parts_required = 100\n    parts_made = 20\n    hours_spent = 2\n    \n    # Find the rate of production (parts per hour)\n    rate = parts_made / hours_spent\n    \n    # Remaining parts to be made\n    remaining_parts = total_parts_required - parts_made\n    \n    # Calculate remaining hours needed at the current rate\n    remaining_hours = remaining_parts / rate\n    \n    return remaining_hours\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # initial volume in ml\n    initial_sugar_percentage = 0.06  # initial sugar content in percentage\n    final_sugar_percentage = 0.10  # final sugar content in percentage\n\n    # initial amount of sugar in ml\n    initial_sugar = initial_volume * initial_sugar_percentage\n    \n    # Let x be the amount of sugar to be added\n    # Sugar content after adding x ml of sugar will be (initial_sugar + x) ml\n    # Total volume after adding sugar will be (initial_volume + x) ml\n    # Final sugar percentage is defined as: (initial_sugar + x) / (initial_volume + x) = final_sugar_percentage\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((initial_sugar + x) / (initial_volume + x), final_sugar_percentage)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure 3 different colored balls, we need to consider the worst case scenario.\n    # Drawing all of one color first, then all of another color, and then finally getting the third color.\n    # Since there are an equal number of balls of each color, the worst case would be:\n    # 5 balls of the first color + 5 balls of the second color + 1 ball of the third color.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 2 balls of the same color\n    same_color_pairs = 5\n    # Number of ways to choose 2 balls of different colors\n    different_color_pairs = comb(5, 2)\n    # Total unique pairs of balls\n    total_pairs = same_color_pairs + different_color_pairs\n    # Add one to ensure there is at least one duplicate pair\n    ans = total_pairs + 1\n    return ans\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% off means the sale price is 50% of the original price\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cards = 876\n    hisham, melissa = symbols('hisham melissa')\n    \n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # The sum of Hisham's and Melissa's cards is the total\n    equation2 = Eq(hisham + melissa, total_cards)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    \n    # Find the number of cards to be given to Hisham to equalize\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    n = 3\n\n    common_difference = (third_term - first_term) / (n - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Convert the total length from m to cm\n    each_piece_length = total_length_cm / 2  # Divide by 2 to get the length of each piece\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    a = 1 + 0.23 + 0.34\n    b = 0.23 + 0.34 + 0.45\n    c = 1 + 0.23 + 0.34 + 0.45\n    d = 0.23 + 0.34\n    \n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown\n    x = symbols('x')\n\n    # Set up the equation according to the problem\n    equation = Eq(40 / (x + 5), 5)\n\n    # Solve for the variable\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    age_difference = 41 - 14\n    # Brian will be older than 14, so starting the loop from 15\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    # Initialize the largest possible lowest score\n    # Since the average needs to be 90 for five students, the total score must be 450.\n    # If one student has 100 and others have the numbers just below it, the minimum possible score would start from 86.\n    lowest_score = 86\n    \n    # Initialize the count for the total number of scores checked\n    count = 0\n    \n    # While loop to find the correct lowest score\n    while True:\n        # Calculate the total score if the lowest score is the current one being checked\n        total_score = lowest_score + (lowest_score + 1) + (lowest_score + 2) + (lowest_score + 3) + (lowest_score + 4)\n        \n        # If the total score is 450, it means we have found the correct lowest score\n        if total_score == 450:\n            return lowest_score\n        \n        # Increment the lowest score to check the next possibility\n        lowest_score += 1\n        count += 1\n        \n        # Sanity check to avoid infinite loop, there should not be more than 5 iterations\n        if count > 5:\n            break\n            \n    return None\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd_rate = 1 / 0.96\n    coffee_cost_euro = 4.8\n\n    coffee_cost_usd = coffee_cost_euro * euro_to_usd_rate\n\n    return coffee_cost_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + (b / c) + ((d / e) * f) - (g + (h / j))\n        \n        if N.is_integer() and (max_N is None or N > max_N):\n            max_N = N\n\n    return max_N\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    return lcm(12, 56)\n\nfrom math import lcm\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total books before adding the new ones\n    total_books_initial = 3900\n    # Total books after adding the new ones\n    total_books_final = 3900 + 510\n    \n    # Given ratios\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    \n    # Total parts of the ratio\n    total_parts = ratio_chinese + ratio_malay + ratio_english\n    \n    # Number of books for each language initially\n    chinese_books_initial = (ratio_chinese / total_parts) * total_books_initial\n    malay_books_initial = (ratio_malay / total_parts) * total_books_initial\n    english_books_initial = (ratio_english / total_parts) * total_books_initial\n    \n    # Percentage increase for Chinese and Malay books\n    chinese_books_final = chinese_books_initial * 1.20  # 20% increase\n    malay_books_final = malay_books_initial * 1.10     # 10% increase\n    \n    # New total for Chinese and Malay books after the increase\n    new_books_others = chinese_books_final + malay_books_final\n    \n    # Remaining books must be English books\n    english_books_final = total_books_final - new_books_others\n    \n    # Percentage increase for English books\n    percentage_increase_english = ((english_books_final - english_books_initial) / english_books_initial) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Let's denote x as the combined age of the 2 dogs right now.\n\n    # Four years ago, the combined age was x - 4 * 2 (since we go back four years for each dog)\n    # Four years ago, the combined age of the 2 dogs was 10 years old. So we have:\n    # (x - 8) = 10\n    # x = 10 + 8\n    # x = 18 (Combined age of the 2 dogs now)\n\n    # Now, we need to find the combined age in 2 years.\n    # We simply add 2 years for each dog to their current combined age:\n    # In 2 years, combined age will be x + 2 * 2\n    # x = combined age now, which is 18\n    # So in 2 years, combined age will be 18 + 4 = 22 years\n\n    combined_age_now = 18\n    combined_age_in_2_years = combined_age_now + 2 * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    avg_juniors = 10\n    total_participants = 20\n    avg_total = 14\n\n    total_avg_score = avg_total * total_participants\n    total_junior_score = avg_juniors * total_juniors\n    total_senior_score = total_avg_score - total_junior_score\n\n    total_seniors = total_participants - total_juniors\n    avg_seniors = total_senior_score / total_seniors\n\n    return avg_seniors\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    points_not_attempted = 0\n    rex_score = 66\n    questions_attempted = total_questions - 1\n\n    # Let x be the number of correct answers\n    # Then the number of incorrect answers is 24 - x (since Rex answered all but one)\n    # The equation is: 4x - 2(24 - x) = 66\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(points_correct * x + points_incorrect * (questions_attempted - x), rex_score)\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_percentage = 0.60\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n    total_score = 264\n    \n    correct_answers = total_questions * correct_percentage\n    wrong_answers = total_questions - correct_answers\n    \n    # Let x be the number of questions answered correctly\n    # Total score is calculated as follows:\n    # x * correct_marks + (correct_answers - x) * wrong_marks \n    #   + (total_questions - correct_answers) * unanswered_marks = total_score\n    # Simplified equation:\n    # x * (correct_marks - wrong_marks) + correct_answers * wrong_marks \n    #   + unanswered_marks * (total_questions - correct_answers) = total_score\n    \n    x = (total_score - correct_answers * wrong_marks - \n           unanswered_marks * (total_questions - correct_answers)) / (correct_marks - wrong_marks)\n    \n    return int(x)\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # Applying the Pigeonhole Principle,\n    # if there are n containers and we want to ensure at least 2 apples in each,\n    # we must have at least n + (n - 1) apples\n    containers = 10\n    min_apples = containers + (containers - 1)\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Total number of digits needed\n    total_digits = 1000\n    # Initialize current number and the count of digits \n    current_number = 1\n    digit_count = 0\n\n    # Increment the count of digits while appending each number\n    # Stop once the total count reaches the required number of digits\n    while digit_count < total_digits:\n        digit_count += len(str(current_number))\n        current_number += 1\n\n    # Since we've gone over the limit, we subtract 1 to get the last number that fits\n    last_full_number = current_number - 1\n\n    # Calculate how many extra digits have been added\n    extra_digits = digit_count - total_digits\n\n    # Convert the last number to a string and get the extra digit from its end\n    last_number_str = str(last_full_number)\n    unit_digit = last_number_str[-extra_digits - 1]\n\n    return int(unit_digit)\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    only_A = A - AC - AE + ACE\n    only_C = C - AC - CE + ACE\n    only_E = E - AE - CE + ACE\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    total_fruits = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtracting one for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n    \n    ans = permutations(18, 3)\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for each person's age\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n    \n    # Since Jack is $4 years old\n    equation1 = Eq(jack, 4)\n\n    # Jason, Bruce and Willie are of the same age\n    equation2 = Eq(jason, bruce)\n    equation3 = Eq(jason, willie)\n\n    # The total age of the 4 children is 19 years\n    equation4 = Eq(jack + jason + bruce + willie, 19)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (jack, jason, bruce, willie))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of friends and the number of erasers\n    friends, erasers = symbols('friends erasers')\n\n    # Setup the equations based on the given information\n    equation1 = Eq(erasers - 3, 5 * friends)\n    equation2 = Eq(6 * friends - erasers, 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (friends, erasers))\n\n    return solutions[erasers]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for John's and Jake's current ages.\n    john, jake = symbols('john jake')\n    \n    # The sum of their ages is 44.\n    equation1 = Eq(john + jake, 44)\n    \n    # In 14 years, Jake will be twice as old as John.\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (john, jake))\n    \n    # Find how old John will be in 14 years.\n    john_age_in_14_years = solutions[john] + 14\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    # Veronica has $9\n    veronica = 9\n    # Jonathan has three times as much money as Veronica\n    jonathan = 3 * veronica\n    # Rachel has $48 more than Jonathan\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the age of the youngest child\n    x = symbols('x')\n\n    # The oldest is now six times as old as the youngest.\n    equation = Eq(x + 8 * 15 / 12, 6 * x)\n\n    # Solve the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Original amounts of money for Dedra and Timm\n    original_dedra = 4 * timm\n\n    # Both receive $72 each\n    dedra_after = original_dedra + 72\n    timm_after = timm + 72\n\n    # Now, Dedra has twice as much money as Timm after receiving the money\n    equation = Eq(dedra_after, 2 * timm_after)\n\n    # Solve the equation\n    solutions = solve((equation, Eq(dedra, original_dedra)), (dedra, timm))\n\n    return solutions[dedra]  # Dedra's original amount of money\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles = smiles_per_day * days_in_january\n    \n    return total_smiles\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(total)\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Define a variable for the expression\n    x = symbols('x')\n    \n    # The original expression\n    expression = 15 + 5 * 5 + 15 - 6 + 7\n    \n    # List possible ways to insert the brackets\n    possible_expressions = [\n        ((15 + 5) * (5 + (15 - 6)) + 7),  # (15+5) * (5+(15-6)) + 7\n        (15 + 5) * ((5 + 15) - (6 + 7)),  # (15+5) * ((5+15) - (6+7))\n        (15 + (5 * 5) + 15 - 6 + 7),      # (15+(5*5)+15-6+7) no brackets\n        ((15 + 5) * 5 + (15 - 6 + 7)),    # ((15+5) * 5 + (15-6+7))\n        (15 + (5 * (5 + 15)) - 6 + 7),    # (15+(5*(5+15))-6+7)\n        (15 + 5) * (5 + 15) - (6 + 7),    # (15+5) * (5+15) - (6+7)\n        15 + (5 * (5 + (15 - 6))) + 7,    # 15 + (5 * (5+(15-6))) + 7\n    ]\n\n    # Calculate the minimum result between all possible expressions\n    min_result = min([expr for expr in possible_expressions], key=lambda expr: solve(expr - x))\n\n    return min_result\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, jiaxiang = symbols('cayden jiaxiang')\n\n    equation1 = Eq(cayden, jiaxiang + 5)  # Cayden has 5 more sweets than Jiaxiang\n    equation2 = Eq(cayden - 10, jiaxiang + 10)  # If Cayden gives Jiaxiang 10 sweets\n\n    solutions = solve((equation1, equation2), (cayden, jiaxiang))\n\n    # The difference in number of sweets they will have now\n    new_difference = solutions[cayden] - 10 - (solutions[jiaxiang] + 10)\n    return new_difference\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    start = (50 // 11) + 1\n    end = 150 // 11\n    num_multiples = end - start + 1\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    part1 = 75 * 0.29\n    part2 = (75 / 100) * 74\n    part3 = 0.3 / (2 / 15)\n    ans = part1 + part2 - part3\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # The new four-digit number is greater than the original number by 5877.\n    # Let the original number be in the form of ABCD where A, B, C, D are digits.\n    # When D becomes the first digit, the new number is DCBA. Therefore, the equation is:\n    # DCBA - ABCD = 5877\n    # (D*1000 + C*100 + B*10 + A) - (A*1000 + B*100 + C*10 + D) = 5877\n    # Since D is now in the thousands place, and was originally in the ones place, D must be less than A for the new number to be larger.\n    \n    # Let's iterate over all possible values of D (from 1 to 9) and A (from D+1 to 9)\n    for D in range(1, 10):\n        for A in range(D+1, 10):  # A must be greater than D for the new number > original number\n            # Solving the rearranged equation for B and C\n            # (D - A)*1000 + (C - B)*100 + (B - C)*10 + (A - D) = 5877\n            # (D - A)*999 + (C - B)*90 = 5877\n            # (A - D) + 999*(D - A) = 5877\n            # 999D - 999A = 5877 - (A - D)\n            # 999D - 5888 = 999A - A\n            # 999D - 5888 = 998A\n            # 998A = 999D - 5888\n            value = 999 * D - 5877\n            # Check if value is a multiple of 998 (meaning A is an integer) and within range for A\n            if value % 998 == 0 and 0 < value // 998 < 10:\n                A = value // 998\n                # With A and D determined, we can now calculate B and C \n                # The difference 5877 is 5*1000 + 8*100 + 7*10 + 7\n                # The difference in thousands and ones place is 5, thus A - D = 5\n                # Similarly, the difference in hundreds place is 8, and in tens place is 7\n                # Meaning, (D*1000 + C*100 + B*10 + A) - (A*1000 + B*100 + C*10 + D) has hundreds place resulting in 8 and tens place resulting in 7\n                for B in range(0, 10):\n                    for C in range(0, 10):\n                        if (D * 1000 + C * 100 + B * 10 + A) - (A * 1000 + B * 100 + C * 10 + D) == 5877:\n                            # Return the smallest original combination (ABCD)\n                            return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n    \n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 2 == 1 and number % 9 == 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8 # Auntie Lina walks 8 meters per minute\n\n    minutes = distance / speed\n\n    return minutes\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The strategy is to compute the worst-case scenario: taking all but one of each \n    # type of marble before getting a guaranteed set of all four colors.\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Worst case scenario: Jane picks all the marbles of three colors and 1 of the fourth color. \n    # So she still needs to pick one more to be sure of having the fourth color.\n    # So, she can pick 3 red, 6 green, 5 blue, and 1 orange and still not have 4 different colors.\n    # The next marble she picks will be the fourth color.\n    marbles = (red - 1) + (green - 1) + (blue - 1) + (orange - 1) + 1\n    \n    return marbles\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    total_doughnuts = 11\n    students = 4\n    # Since each student has to get at least one doughnut, we give one to each and then distribute the remainder.\n    remainder_doughnuts = total_doughnuts - students\n    # This problem is equivalent to placing 3 dividers among the remaining 7 doughnuts.\n    return comb(remainder_doughnuts + students - 1, students - 1)\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the five different coin values in pence (5p, 10p, 20p, 50p, 100p, 200p)\n    coins = [5, 10, 20, 50, 100, 200]\n    amount_spent = 0\n\n    # Given that Angela paid with a five pound note which is 500 pence\n    five_pound_note = 500\n\n    # Check each combination of 5 different coins\n    for a in coins:\n        for b in [c for c in coins if c != a]:\n            for c in [d for d in coins if d not in (a, b)]:\n                for d in [e for e in coins if e not in (a, b, c)]:\n                    for e in [f for f in coins if f not in (a, b, c, d)]:\n                        # Calculate the total value of the 5 coins\n                        total_coins_value = a + b + c + d + e\n                        # Calculate the amount spent if the total value of the coins equals the change received\n                        if total_coins_value == five_pound_note - amount_spent:\n                            return amount_spent\n\n    # Update the amount_spent by subtracting the total value of the change received from the five pound note\n    amount_spent = five_pound_note - total_coins_value\n    return amount_spent\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # average score of 5 pupils\n    average_5_pupils = 72\n    \n    # total score of 5 pupils\n    total_5_pupils = average_5_pupils * 5\n    \n    # new average score when Mary's score is included\n    new_average = 75\n    \n    # total score of 6 pupils with Mary's score\n    total_6_pupils = new_average * 6\n    \n    # Mary's score\n    marys_score = total_6_pupils - total_5_pupils\n    \n    return marys_score\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    # Let x be the number of $10 notes and y be the number of $2 notes.\n    # We have two equations based on the problem statement:\n    # Equation 1: Total notes count - x + y = 38\n    # Equation 2: Notes left after spending - 0.2 * x = 3 * (0.25 * y)\n    \n    # Importing sympy to solve the equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Equation 1: Total notes count\n    equation1 = Eq(x + y, 38)\n    \n    # Equation 2: Notes ratio after spending\n    equation2 = Eq(0.2 * x, 3 * (0.25 * y))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Find the number of $10 and $2 notes before spending\n    num_10_notes = solutions[x]\n    num_2_notes = solutions[y]\n\n    # Calculate the amount spent on the fan\n    amount_spent_10_notes = 0.8 * num_10_notes * 10\n    amount_spent_2_notes = 0.75 * num_2_notes * 2\n    total_spent = amount_spent_10_notes + amount_spent_2_notes\n\n    return total_spent\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    # Initial number of hives and honey produced per hive\n    initial_hives = 5\n    initial_honey_per_hive = 50 / initial_hives \n\n    # Target honey production\n    target_honey = 90\n\n    # Hives needed to produce the target amount of honey\n    required_hives = target_honey / initial_honey_per_hive\n\n    # Additional hives needed\n    additional_hives = required_hives - initial_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    x = -(4**2)\n    return x\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 23\n\n    nth_term_value = first_term + (nth_term - 1) * common_difference\n\n    return nth_term_value\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = (8 * 60) + 20\n    activity_with_break = 45 + 20\n    activities = (total_minutes - 20) / activity_with_break\n\n    return int(activities)\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        # Check if the first digit is not zero and the number is greater than 5000\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Grandma's age divided by 4 has remainder 2: x ≡ 2 (mod 4)\n    # Grandma's age divided by 5 has remainder 3: x ≡ 3 (mod 5)\n    # Grandma's age divided by 9 has remainder 6: x ≡ 6 (mod 9)\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    \n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C\n    # From the problem statement we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n\n    # Let's sum all these equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 92\n    sum_of_pairs = (102 + 97 + 92)\n\n    # Notice that in sum_of_pairs, A, B, and C are each counted twice. \n    # So to find the sum of their individual weights we divide by 2.\n    total_weight = sum_of_pairs / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    temp = str(number)\n    odd_sum = sum(int(temp[i]) for i in range(0, len(temp), 2))\n    even_sum = sum(int(temp[i]) for i in range(1, len(temp), 2))\n    \n    remainder = abs(odd_sum - even_sum) % 11\n    is_divisible = remainder == 0\n    \n    return (is_divisible, remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # final length in centimeters converted to meters\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n    ans = (percentage / 100) * total_grams\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Create an array to store the ways to climb up to each step\n    # Initialize the ways to reach step 0 as 1, since there's only one way to be at step 0 (the starting point)\n    steps = [0] * 10\n    steps[0] = 1\n\n    # Fill in the ways to reach each step using the two possible moves\n    for i in range(1, 10):\n        if i - 1 >= 0:\n            steps[i] += steps[i - 1]\n        if i - 4 >= 0:\n            steps[i] += steps[i - 4]\n\n    return steps[9]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_minutes = 17\n    minutes_needed = 36\n    planes_in_36_minutes = planes_in_12_minutes * (minutes_needed / 12)\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3 using the formula\n    # (1 + 2 + 3 + ... + n)^2 where n is the last term divided by the step (0.5)\n\n    # Initialize sum of the series\n    sum_of_series = 0\n    current_term = 0.5\n    while current_term <= 10:\n        sum_of_series += current_term ** 3\n        current_term += 0.5\n        \n    return sum_of_series\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # Since the content is estimated to the nearest £5, the least amount\n    # the shopping bill could be is £2.5 less than the estimate\n    estimate = 35\n    difference = 2.5\n    least_amount = estimate - difference\n\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let 'n' be the number of years it takes for the sum of their ages to be 40.\n    # Currently, the sum of their ages is 22.\n    # In 'n' years, Geoff's age will be Geoff's current age + n.\n    # Similarly, his sister's age will be her current age + n.\n    # Therefore, the sum of their ages in 'n' years will be 22 + n (Geoff's increase) + n (sister's increase).\n    # We need to find 'n' such that 22 + 2n = 40.\n    \n    # Setting up the equation: 22 + 2n = 40\n    # Solve for 'n'\n    n = (40 - 22) / 2\n    \n    return int(n)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    # Since each school orders at least 98 magazines and at most 102,\n    # the possible number of magazines that can be ordered by any school is: 98, 99, 100, 101, 102\n    # We need to count the number of solutions to the equation:\n    # x1 + x2 + x3 = 300 where 98 <= x1, x2, x3 <= 102\n  \n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n    # Rabbit's position from left is 5 less than elephant's\n    rabbit_position_from_left = elephant_position_from_left - toys_between_rabbit_and_elephant - 1\n    # Rabbit's position from right is total toys minus its position from left\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    num_pencils = 1\n    while True:\n        if (num_pencils % 2 == 1 and\n            num_pencils % 3 == 2 and\n            num_pencils % 4 == 3 and\n            num_pencils % 5 == 4):\n            return num_pencils\n        num_pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 3 + 1  # Including Ewan\n    biscuits_each = total_biscuits // people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass_in_grams = 172000  # convert kg to g\n    mass_per_P = 300\n    mass_per_Q = 400\n    mass_per_R = 500\n    \n    # Ratio of packets\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    total_ratio = ratio_P + ratio_Q + ratio_R\n\n    # Total mass of each ingredient\n    total_mass_per_ratio = total_mass_in_grams // total_ratio\n\n    # Calculate the number of packets for each ingredient\n    num_packets_P = (total_mass_per_ratio * ratio_P) // mass_per_P\n    num_packets_Q = (total_mass_per_ratio * ratio_Q) // mass_per_Q\n    num_packets_R = (total_mass_per_ratio * ratio_R) // mass_per_R\n    \n    # Total number of packets\n    total_packets = num_packets_P + num_packets_Q + num_packets_R\n    \n    return total_packets\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 'a', 13, 12]\n    mean_value = 12\n    sum_of_numbers = mean_value * len(numbers)\n    sum_of_known_numbers = sum(numbers) - 'a' + a\n    a = sum_of_numbers - sum_of_known_numbers\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from fractions import gcd\nfrom sympy import lcm\n\ndef solution():\n    # Convert times to seconds\n    first_light = 1 * 60  # First traffic light turns every minute\n    second_light = 1.5 * 60  # Second traffic light turns every 1.5 minutes\n    # The two lights turn green together every LCM(first_light, second_light) seconds\n    lcm_seconds = lcm(first_light, second_light)\n\n    # The third light should have a green light period that is a divisor of lcm_seconds\n    # and the period should be at least 30 seconds.\n    for third_light in range(lcm_seconds, 29, -1):\n        if gcd(lcm_seconds, third_light) == third_light:\n            break\n\n    return third_light / 60  # Convert seconds back to minutes\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, for example, centimeters.\n    pink_ribbon_cm = 2.5 * 100  # meters to centimeters\n    blue_ribbon_cm = 220        # already in centimeters\n    orange_ribbon_cm = 30.5     # already in centimeters\n    \n    # Find the longest ribbon by comparing their lengths in centimeters.\n    longest_ribbon_length = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n    \n    # Return the color of the longest ribbon.\n    if longest_ribbon_length == pink_ribbon_cm:\n        return \"pink\"\n    elif longest_ribbon_length == blue_ribbon_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    paid_price = 75\n    discount_percent = 50\n    original_price = paid_price / ((100 - discount_percent) / 100)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    # Number of each car type\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n\n    # People carrying capacity of each car type\n    people_red_cars = 10\n    people_blue_cars = 15\n    people_green_cars = 20\n\n    # Total capacity for each car type\n    total_red_capacity = red_cars * people_red_cars\n    total_blue_capacity = blue_cars * people_blue_cars\n    total_green_capacity = green_cars * people_green_cars\n\n    # Total number of cars\n    total_cars = red_cars + blue_cars + green_cars\n\n    # Total carrying capacity\n    total_capacity = total_red_capacity + total_blue_capacity + total_green_capacity\n\n    # Average carrying capacity\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # Rachel's speed in km/h\n    eleanor_time = 4   # Eleanor's time to travel from F to G in hours\n    time_difference = 1.5  # Time difference in hours after Eleanor and Rachel passed each other\n\n    # Distance Rachel would have travelled in the time_difference\n    rachel_distance_after_meeting = rachel_speed * time_difference\n\n    # Rachel was still 39 km away from F when Eleanor arrived at G after 1.5 hours\n    # So the distance from Rachel's meeting point with Eleanor to F is\n    # rachel_distance_after_meeting + 39\n\n    # The total distance between City F and City G\n    # is the distance Eleanor travelled in 4 hours plus the distance Rachel travelled in 1.5 hours\n    total_distance = (eleanor_time * rachel_speed) + rachel_distance_after_meeting + 39 \n\n    return total_distance\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    total_cost_one_each = solutions[necklace] + solutions[earring]\n    return total_cost_one_each\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(1, 4):\n        result += int('4' * i)\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    boys = 5\n    total_students = 25\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    exchange_rate = 1.25  # 1 US dollar = 1.25 Canadian dollars\n    book_price_cad = 64  # Price in Canadian dollars\n\n    book_price_usd = book_price_cad / exchange_rate\n\n    return book_price_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # 8th from the front and 10th from the back implies there are 7 shelves before and 9 shelves after\n    total_shelves = 8 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    total_amount = 490  # Total amount in pence\n    ways = 0\n    \n    # Since we have an equal number of coins of each type, we simplify the problem by\n    # setting the number of each type of coin to x, and solving for x given the total.\n    # The equation becomes: 5x + 10x + 20x = total_amount\n    # Simplify to: 35x = total_amount\n    \n    # Since we are looking for integer solutions, we find how many times 35 fits into 490.\n    if total_amount % 35 == 0:\n        x = total_amount // 35\n        # Total number of coins is 3 times the number of coins of one type\n        ways = 3 * x\n        \n    return ways\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Initialize the lowest score to the highest possible value,\n    # since we want to minimize it later.\n    # Considering each student scores a different whole number and they want to reach an average of 90,\n    # it means the sum has to be 90 * 5 = 450.\n    # The highest score that the fifth student can get is 100.\n    # Therefore, the lowest possible score for the lowest student can be calculated in reverse,\n    # starting from the highest possible score for the fifth student.\n    lowest = 100\n    for score in range(100, 0, -1):\n        # We will assume the highest score is score and then calculate the possible lowest score.\n        sum_of_scores = score\n        # The scores are different whole numbers, so we keep reducing the possible scores.\n        for other_scores in range(4):\n            sum_of_scores += (score - (other_scores + 1))\n\n        # If the sum of scores is less than 450, it won't be possible to obtain an average of 90 anymore,\n        # so we keep the current lowest score and break out.\n        if sum_of_scores < 450:\n            lowest = score - 4\n            break\n\n    return lowest\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    # Since 1 meter equals 100 centimeters,\n    # Rope A is 130 cm longer than Rope C.\n\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the lengths of the ropes in cm\n    ropeA, ropeB, ropeC = symbols('ropeA ropeB ropeC')\n\n    # Setup the equations based on the problem statement\n    equation1 = Eq(ropeA, 3 * ropeB)         # Rope A is 3 times as long as Rope B\n    equation2 = Eq(ropeC, ropeB + 56)        # Rope C is 56 cm longer than Rope B\n    equation3 = Eq(ropeA, ropeC + 130)       # Rope A is 1m 30cm (130cm) longer than Rope C\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (ropeA, ropeB, ropeC))\n\n    # Find the total length of all ropes\n    total_length = solutions[ropeA] + solutions[ropeB] + solutions[ropeC]\n\n    return total_length\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    all_letters = ['A', 'B', 'C', 'D', 'E']\n    all_possible_combinations = list(combinations(all_letters, 3))\n    combinations_with_A_and_B = [combo for combo in all_possible_combinations if 'A' in combo and 'B' in combo]\n    \n    probability = len(combinations_with_A_and_B) / len(all_possible_combinations)\n    \n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_males = 0.16 * male_members\n    student_females = 0.10 * female_members\n    total_students = student_males + student_females\n    total_members = male_members + female_members\n    student_percentage = (total_students / total_members) * 100\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_1 = 200 * 0.35\n    fruit_juice_2 = 300 * 0.50\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    \n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    return (amy - john - 4) // 2\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_papers, rate = symbols('total_papers rate')\n\n    # Original rate for 5 hours\n    original_plan = Eq(total_papers, rate * 5)\n    \n    # New rate after working for 1 hour, 4 hours remaining\n    new_plan = Eq(total_papers - rate, (rate + 6) * 4)\n    \n    # New rate to finish in 3 hours after the first hour\n    faster_plan = Eq(total_papers - rate, (rate + 10) * 3)\n\n    solutions = solve((original_plan, new_plan, faster_plan), (total_papers, rate))\n\n    return solutions[total_papers]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken_than_vegetable = Fraction(more_chicken_than_vegetable, chicken_pies)\n    \n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable_than_fruit = Fraction(less_vegetable_than_fruit, fruit_pies)\n    \n    return (fraction_more_chicken_than_vegetable, fraction_less_vegetable_than_fruit)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    markers_per_bag = 5\n\n    num_bags = markers_left // markers_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    # Loop through all possible values of a and b\n    for a in range(1, 10): # a cannot be 0 since ab is a 2-digit number\n        for b in range(10): # b can be 0-9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            # Check the given condition\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.2\n    tax_rate = 0.1\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8  # The greatest 1-digit even number is 8.\n    smallest_2_digit_odd = 11  # The smallest 2-digit odd number is 11.\n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 208):\n        for digit in str(num):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3 / 4\n    \n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Three-digit numbers range from 100 to 999\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the costs of the cap and wristband\n    cap_cost, wristband_cost, total_money = symbols('cap_cost wristband_cost total_money')\n\n    # Caleb spends 2/5 of his money on 4 caps and 6 wristbands\n    # Equation1: (2/5) * total_money = 4 * cap_cost + 6 * wristband_cost\n    equation1 = Eq((2/5) * total_money, 4 * cap_cost + 6 * wristband_cost)\n\n    # The cost of each cap is 3 times the cost of each wristband\n    # Equation2: cap_cost = 3 * wristband_cost\n    equation2 = Eq(cap_cost, 3 * wristband_cost)\n\n    # Solve the first set of equations to find cap_cost and the total amount of money\n    partial_solution = solve((equation1, equation2), (cap_cost, wristband_cost, total_money))\n\n    cap_cost_value = partial_solution[cap_cost]\n    total_money_value = partial_solution[total_money]\n\n    # Computes the remaining money after the first purchase\n    remaining_money = total_money_value - (2/5) * total_money_value\n\n    # Caleb uses 1/3 of his remaining money to buy more caps\n    # Total caps money = money spent in first purchase + money spent in second purchase\n    # Equation3: total_caps_money = (2/5) * total_money + (1/3) * remaining_money\n    total_caps_money = (2/5) * total_money_value + (1/3) * remaining_money\n\n    # Calculate total number of caps he can buy with total_caps_money\n    total_caps = total_caps_money / cap_cost_value\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants\n    g = 9.81  # acceleration due to gravity (m/s^2)\n\n    # Symbols\n    v = symbols('v')  # final velocity\n\n    # Initial conditions\n    h0 = 3000  # initial altitude (m)\n    h = 2000   # final altitude when we want to find the velocity (m)\n    v0 = 0     # initial velocity (m/s)\n\n    # Kinematic equation without air resistance: v^2 = v0^2 + 2 * g * (h - h0)\n    # Note: we use h - h0, but since the skydiver is falling, it will become h0 - h for the actual values.\n    equation = Eq(v**2, v0**2 + 2 * g * (h0 - h))\n\n    # Solve for v\n    solutions = solve(equation, v)\n\n    # Since the skydiver is falling, we are interested in the positive root\n    return max(solutions)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 different numbers in a deck of cards.\n    # To ensure getting 4 consecutive numbers, use the Pigeonhole Principle.\n    # If we have 3 cards of each number, we can still miss out on having 4 consecutive cards.\n    # Once we draw a fourth card of any number, we are guaranteed to have 4 consecutive numbers.\n    # Since there are 4 suits, to guarantee having 4 such cards, we need one more than 3 cards of each number.\n    # 3 cards of each number (without guarantee): 13 * 3 = 39\n    # Drawing one more card ensures at least 4 of 1 number -> 39 + 1 = 40\n    return 40\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Define the fixed digits based on the question\n    A, C, G = 3, 1, 7\n    # Create a list of the remaining digits to permute\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]\n    # Iterate through all permutations of the remaining 7 digits\n    for perm in permutations(remaining_digits):\n        # Place A, C, and G in their fixed positions\n        B, D, E, F, H, I, J = perm\n        # Create the number ABCDEFGHIJ using the permutation and fixed values\n        num = int(f'{A}{B}{C}{D}{E}{F}{G}{H}{I}{J}')\n        # Check the divisibility rules from 1 to 10\n        # Since A=3 and G=7 are given, we skip checks for divisibility by 3 and 7\n        if all(num % i == 0 for i in [2, 4, 5, 6, 8, 9, 10]):\n            # Return the solution as a dictionary\n            return {'B': B, 'D': D, 'E': E, 'F': F, 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    return 37 + 38 + 40 + 43 + 42 + 41\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    actual_pages = 89\n    omitted_pages = (actual_pages - 1) // 3\n    last_printed_page = actual_pages + omitted_pages\n    return last_printed_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    adult_ticket_price = 5\n    child_ticket_price = 3\n    total_tickets = 19\n    total_sales = 75\n    \n    # Use loop to find the number of adult tickets\n    for adult_tickets in range(total_tickets + 1):\n        child_tickets = total_tickets - adult_tickets\n        if adult_tickets * adult_ticket_price + child_tickets * child_ticket_price == total_sales:\n            return adult_tickets\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    current_age_grandma = 60 - (20 - 10)\n    return current_age_grandma\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    class_A_students, class_B_students, candies = symbols('class_A_students class_B_students candies')\n\n    # Equation for class A condition: 4 candies for each student in class A plus 20 more\n    class_A_eq = Eq(4 * class_A_students + 20, candies)\n\n    # Equation for class B condition: 6 candies for each student in class B minus 16 (left)\n    class_B_eq = Eq(6 * class_B_students - 16, candies)\n\n    # Relationship between the number of students in class A and class B\n    student_relation_eq = Eq(class_A_students, 2 * class_B_students)\n\n    # Solve the system of equations\n    solutions = solve((class_A_eq, class_B_eq, student_relation_eq), (class_A_students, class_B_students, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Define the range limits\n    start, end = 1, 600\n    \n    # Count the multiples of 3\n    count_3 = len(range(start, end + 1, 3))\n    \n    # Count the multiples of 5\n    count_5 = len(range(start, end + 1, 5))\n    \n    # Count the multiples of both 3 and 5 (i.e., the least common multiple, which is 15)\n    count_15 = len(range(start, end + 1, 15))\n    \n    # Apply the inclusion-exclusion principle to avoid double counting\n    count = count_3 + count_5 - count_15\n    return count\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):  # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # Jeremy can use 0 or 1 fifty-pence coins\n                # the total amount must be exactly 70 pence\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # To ensure we get 2 stickers of the same colour, we consider the worst-case scenario.\n    # If we take 1 red and 1 green, we are not guaranteed to have 2 stickers of the same colour.\n    # If we take another one, no matter the colour, we will have 2 stickers of the same colour.\n    # So we need to take 1 + 1 (for each colour) + 1 (to ensure at least one pair) = 3 stickers.\n    \n    # Adding 1 to guarantee at least 2 stickers of the same colour\n    min_stickers_to_take = 1 + 1 + 1\n\n    return min_stickers_to_take\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Considering the worst-case scenario based on Pigeonhole Principle\n    max_blue = 5\n    max_orange = 4\n    max_yellow = 2\n\n    # She needs to take out at least all but 3 blue balls and 1 yellow to ensure she has 4 of any color.\n    # If she takes out 3 blue, 3 orange, and 2 yellow, she could still be missing a fourth ball of the same color.\n    # Taking out one more ball will guarantee 4 of the same color.\n    balls_needed = (max_blue - 1) + (max_orange - 1) + max_yellow + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # ASSUMPTIONS:\n    # Ducklings have 2 legs each.\n    # Baby geese have 2 legs each.\n    # Lambs have 4 legs each.\n    duckling_legs = 2\n    goose_legs = 2\n    lamb_legs = 4\n    \n    total_legs = 36\n    ducklings = 4\n    geese = 2\n\n    # Calculate the legs contributed by the ducklings and geese\n    legs_by_ducklings_and_geese = (ducklings * duckling_legs) + (geese * goose_legs)\n\n    # Subtract the known legs to find the number of legs contributed by lambs\n    lamb_legs_total = total_legs - legs_by_ducklings_and_geese\n    \n    # Divide by the number of legs per lamb to get the number of lambs\n    lambs = lamb_legs_total / lamb_legs\n    \n    return int(lambs)\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) / 2\n    return int(matches)\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    # Let g be the number of girls\n    # Then the number of boys is 3g\n    # Each boy received 2 sweets, so boys received a total of 2 * 3g = 6g sweets\n    # Each girl received 4 sweets, so girls received a total of 4 * g = 4g sweets\n    # Total number of sweets is 570, so 6g + 4g = 570\n    # Combine like terms, 10g = 570\n    # Divide both sides by 10, g = 57\n    # Since there were 3 times as many boys as girls, number of boys = 3 * 57\n    number_of_boys = 3 * 57\n    return number_of_boys\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    largest = int(''.join(sorted(digits, reverse=True)))\n    smallest = int(''.join(sorted(digits)))\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # The number of boxes in the top layer is 1\n    top_layer = 1\n    \n    # The number of boxes in the second layer is 4 (2x2)\n    second_layer = 4\n    \n    # The number of boxes in the third layer is 9 (3x3)\n    third_layer = 9\n    \n    # The total number of boxes is the sum of the top three layers\n    total_boxes = top_layer + second_layer + third_layer\n    \n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65  # prices in pounds\n    note_value = 5  # £5 note\n    change = note_value - total_cost  # calculate the change\n    return round(change, 2)  # round to 2 decimal places if needed\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n    good_copies_A = (3 / 5) * total_good_copies\n    good_copies_B = (2 / 5) * total_good_copies\n    \n    ratio_bad_good_A = 1 / 4\n    total_copies_A = good_copies_A * (1 + ratio_bad_good_A)\n    \n    ratio_bad_good_B = 1 / 5\n    total_copies_B = good_copies_B * (1 + ratio_bad_good_B)\n    \n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    farmer_time = symbols('farmer_time')\n\n    # Farmer and son together rate\n    combined_rate = 1 / 16\n    # Farmer's rate alone\n    farmer_rate = 1 / 24\n    # Son's rate\n    son_rate = combined_rate - farmer_rate\n\n    # Son's time to finish the work alone\n    son_time = 1 / son_rate\n\n    return int(son_time)\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles = smiles_per_day * days_in_january\n\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "import math\n\ndef solution():\n    num_students = 40\n    students_per_side = int(math.sqrt(num_students))\n\n    return students_per_side\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's solution\n    annie_sugar = 300 * 0.15\n    # Becky's solution\n    becky_sugar = 400 * 0.25\n    # Carol's solution\n    carol_sugar = 300 * 0.35\n    \n    # Total sugar\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    # Total solution weight\n    total_solution = 300 + 400 + 300\n    \n    # Concentration of the resulting solution\n    concentration = total_sugar / total_solution\n    \n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_of_values = 1.2 + 1.23 + 1\n    product_1 = sum_of_values * sum_of_values\n    product_2 = sum_of_values * (1.2 + 1.23)\n    ans = product_1 - product_2\n    return ans\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    num_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_times = num_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    # First let's consider the number of ways to arrange the five children without any restrictions.\n    # This is simply 5! as each child can be placed in any of the 5 positions.\n    total_arrangements = factorial(5)\n    \n    # Now, let's consider the restricted arrangements where Hugh is between Louise and Richard.\n    # We can treat Louise, Hugh, and Richard as a single entity when they are together.\n    # So we have 3 entities (LHR, 4th child, 5th child) to arrange, which gives us 3!.\n    restricted_arrangements_LHR = factorial(3)\n    \n    # Now within this LHR entity, Hugh can either be on the left or the right, which gives us 2 choices.\n    # So the restricted arrangements can also have 2 additional internal arrangements.\n    restricted_arrangements_H_internal = 2\n    \n    # Therefore, the total restricted arrangements where Hugh is between Louise and Richard is 3! * 2.\n    total_restricted_arrangements = restricted_arrangements_LHR * restricted_arrangements_H_internal\n    \n    # The number of ways to arrange the children with Hugh not between Louise and Richard is total - restricted.\n    return total_arrangements - total_restricted_arrangements\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    dividend_part = 9 * 4  # First part of Johnny's operation should be 9 times 4, not 9 times 2\n    correct_dividend = dividend_part + 2  # Then add the remainder to get the correct dividend\n    return correct_dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return total\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = 4 * 75 + 3 * 95  # cost in pence\n    note_value = 10 * 100  # £10 note in pence\n    change = note_value - total_cost  # change in pence\n\n    return change  # returning change in pence\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    # Apply first discount\n    price_after_first_discount = initial_price * (1 - first_discount)\n\n    # Apply second discount\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # Mean of all 8 numbers\n    total_mean = 555\n    total_sum = total_mean * 8  # Total sum of all 8 numbers\n    \n    # Mean of first 3 numbers\n    first_3_mean = total_mean - 296  # Given condition\n    first_3_sum = first_3_mean * 3  # Total sum of first 3 numbers\n    \n    # Sum of last 5 numbers\n    last_5_sum = total_sum - first_3_sum  # Total sum minus sum of first 3 numbers\n    \n    # Mean of last 5 numbers\n    last_5_mean = last_5_sum / 5\n\n    return last_5_mean\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    # Since she is counting by twos, starting at 2 and going up to 100,\n    # every number she counts is a multiple of 2 in the range [2, 100].\n    # Therefore, we simply need to count how many even numbers there are\n    # between 2 and 100 inclusive, which is effectively every other number.\n\n    start = 2\n    end = 100\n    step = 2  # Counting by twos.\n\n    # Using range to generate the numbers and counting them.\n    multiples_of_two = list(range(start, end + 1, step))\n\n    return len(multiples_of_two)\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Let's denote the total number of matches as x.\n    # According to the problem, they won 2/5 of the matches, drew 7/20 of the matches, and lost 10 matches.\n    # So, (2/5)*x + (7/20)*x + 10 = x\n    # Solve for x to find the total number of matches.\n\n    # Then we calculate the points:\n    # Points for wins: (2/5)*x * 3 points per win\n    # Points for draws: (7/20)*x * 1 point per draw\n    # Points for losses: 10 * 0 points per loss\n\n    # Total points will be the sum of points for wins and points for draws since there are no points for losses.\n\n    # We can set up an equation and solve it for x, the total number of matches\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/5)*x + (7/20)*x + 10, x)\n    total_matches = solve(equation, x)[0]\n\n    # Now calculate the points\n    points_for_wins = (2/5) * total_matches * 3\n    points_for_draws = (7/20) * total_matches * 1\n\n    total_points = points_for_wins + points_for_draws\n\n    return total_points\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    \n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n    \n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    # Pip's position is 3rd, so counting from the end, it is (total_children - pip_position + 1)\n    pip_position_from_end = total_children - pip_position + 1\n    # Bud is behind Pip with 5 children between them\n    bud_position_from_end = pip_position_from_end + children_between + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(rasidah - (3/5) * rasidah, (chai_seng - (6/7) * chai_seng) * 2)\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years_ago = symbols('years_ago')\n    isaac_current_age = 53\n    mother_current_age = 81\n\n    equation = Eq(isaac_current_age - years_ago, (mother_current_age - years_ago) / 3)\n\n    solution = solve(equation, years_ago)\n\n    return solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the given conditions\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Using Chinese Remainder Theorem to find the age\n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_to_kg_conversion = 1 / 2.2\n    kilograms = pounds * pounds_to_kg_conversion\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    # Define the new operation function based on the pattern observed\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    # Calculate (5 ⊕ 10) - (4 ⊕ 9) using the new operation\n    result = custom_op(5, 10) - custom_op(4, 9)\n    \n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 2, 3]\n    all_possible_numbers = list(permutations(digits, 3))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes_within_20 = [p for p in range(1, 21) if is_prime(p)]\n    count = sum(1 for p in primes_within_20 if is_prime(p + 6) and is_prime(p - 6))\n\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    second_differences = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = sequence[-1] + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from itertools import permutations\n\ndef solution():\n    even_digits = ['2', '4']\n    digits = ['1', '2', '3', '4', '5']\n    count = 0\n    for perm in permutations(digits, 5):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(0, 10):\n            if digit1 + digit2 == 15:\n                return digit1 * 10 + digit2\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    initial_quantity = 8\n    new_mean = 52\n    new_quantity = 9\n\n    initial_total_weight = initial_mean * initial_quantity\n    new_total_weight = new_mean * new_quantity\n    weight_of_extra_apple = new_total_weight - initial_total_weight\n\n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Since a lamp will be toggled every time a divisor of its number enters the room,\n    # it will end up on if it has an odd number of divisors.\n    # Only perfect squares have an odd number of divisors.\n    # Hence, we need to count the number of perfect squares between 1 and 250.\n    \n    # Initialize the number of lamps that will remain on\n    lamps_on = 0\n    \n    # Check every number from 1 to 250\n    for i in range(1, 251):\n        # If the square root is an integer, it's a perfect square\n        if (i ** 0.5).is_integer():\n            lamps_on += 1\n\n    return lamps_on\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    pages = symbols('pages')\n\n    # Original speed is 50 pages per minute, original time is pages / 50\n    # New speed is 70 pages per minute (50 + 20), new time is pages / 70\n    # The new time is 2 minutes less than the original time\n    original_time_eq = pages / 50\n    new_time_eq = pages / (50 + 20)\n\n    # Create the equation based on the difference in time\n    equation = Eq(original_time_eq - new_time_eq, 2)\n\n    # Solve the equation\n    solution = solve(equation, pages)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n    work_rate_per_person = 1 / (initial_people * initial_days)\n    total_work = 1\n    people_needed = total_work / (work_rate_per_person * target_days)\n    \n    additional_people = people_needed - initial_people\n    return int(additional_people)\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2013, 1, 28)  # January 28, 2013 which is Monday\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    answer_date = start_date + one_year\n\n    while answer_date.weekday() != 0:  # 0 represents Monday\n        if answer_date.year % 4 == 0 and (answer_date.year % 100 != 0 or answer_date.year % 400 == 0):\n            # Leap year adjustment\n            answer_date += one_day\n        answer_date += one_year\n\n    return answer_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for dividend in range(1, 10000):\n        for divisor in range(1, dividend):\n            if dividend // divisor == 8 and dividend % divisor == 7:\n                return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time: from 6:30 AM to 7:30 AM, which is 1 hour\n    jogging_time_hours = 1\n\n    # Walking time: from 7:30 AM to 9:30 AM, which is 2 hours\n    walking_time_hours = 2\n\n    # Jogging speed in miles per hour\n    jogging_speed_mph = 6\n\n    # Walking speed in miles per hour\n    walking_speed_mph = 5\n\n    # Distance traveled while jogging\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n\n    # Distance traveled while walking\n    walking_distance = walking_speed_mph * walking_time_hours\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_money = 20\n    saved_money = 1 * 7  # $1 everyday for one week\n    lent_money = 5\n    spent_money = 3\n\n    total_money_left = original_money + saved_money - lent_money - spent_money\n\n    return total_money_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    one_company_one_day_length = total_length / (total_companies * total_days)\n\n    return one_company_one_day_length\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_percent = 10\n    members = 30\n\n    discounted_cost = original_cost * ((100-discount_percent) / 100)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_charge = 80  # base charge in cents for up to 15 minutes\n    additional_charge = 5  # charge per minute in cents after 15 minutes\n    total_charge = 140  # total charge in cents\n    \n    if total_charge > base_charge:\n        additional_minutes = (total_charge - base_charge) / additional_charge\n        minutes = 15 + additional_minutes\n    else:\n        minutes = 15\n    \n    return int(minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Calculate the last digit of 2 raised to the power of 2017\n    last_digit_of_2 = (2 ** 2017) % 10\n    \n    # Calculate the last digit of 3 raised to the power of 2017\n    last_digit_of_3 = (3 ** 2017) % 10\n    \n    # Calculate the last digit of the product of both expressions\n    ans = (last_digit_of_2 * last_digit_of_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Define the equation 4*x - 13 = 55\n    # Rearrange it to find x\n    x = (55 + 13) // 4  # Using integer division since we expect a whole number\n    return x\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Based on the given patterns:\n    # 4 ◈ 7 = 21 implies (4 * 7) - (4 + 7) = 21\n    # 6 ◈ 22 = 20 implies (6 * 22) - (6 + 22) = 20\n    # 8 ◈ 30 = 26 implies (8 * 30) - (8 + 30) = 26\n    # It seems that the operator \"◈\" is defined as (a * b) - (a + b)\n    # Let's apply the pattern to find 9 ◈ 20\n    \n    a = 9\n    b = 20\n    ans = (a * b) - (a + b)\n    return ans\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 4)/2) + 11, 37)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n    \n    last_multiple = (120 // 5) * 5\n    if last_multiple > 120:\n        last_multiple -= 5\n\n    num_multiples = (last_multiple - first_multiple) // 5 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when she was 35\n    gina_birth_year = 2005 - 50\n    gina_35_year = gina_birth_year + 35\n\n    # James' age in 1997 and his birth year\n    james_age_in_1997 = 20\n    james_birth_year = 1997 - james_age_in_1997\n\n    # James' age when Gina was 35\n    james_age_when_gina_35 = gina_35_year - james_birth_year\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # Calculate the number of quarters in 2 1/2 (which is 2.5)\n    # Each whole number consists of 4 quarters, thus 2 will have 8 quarters\n    # 1/2 aka 0.5 will have 0.5 * 4 = 2 quarters\n    ans = (2 + 0.5) * 4\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position_from_back = 9\n    people_between = 2\n\n    total_people = (lucy_position - 1) + people_between + 1 + (eddie_position_from_back - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for b in range(10):\n        if int(f\"26{b}789\") % 13 == 0:\n            return b\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert total length to cm\n    cut_length_cm = 5 * 100 + 8  # Convert cut length to make a dress to cm\n    \n    remaining_length_cm = total_length_cm - cut_length_cm  # Calculate the remaining length in cm\n    stripe_length_cm = remaining_length_cm / 9  # Divide the remaining length into 9 equal stripes\n    \n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n    \n    # Maximum number of boys who are right-handed\n    max_right_handed_boys = total_pupils - total_girls\n    \n    # Smallest number of girls who are right-handed will be if all boys are right-handed\n    min_right_handed_girls = right_handed - max_right_handed_boys\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    total_cost_eq = Eq(12 * books + 9 * files, 336)\n    more_books_eq = Eq(books, files + 14)\n\n    solutions = solve((total_cost_eq, more_books_eq), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    for remainder_3 in primes:\n        for remainder_5 in primes:\n            for remainder_7 in primes:\n                for remainder_8 in primes:\n                    if (len({remainder_3, remainder_5, remainder_7, remainder_8}) == 4 and\n                        all(remainder < divisor for remainder, divisor in\n                            zip([remainder_3, remainder_5, remainder_7, remainder_8], [3, 5, 7, 8]))):\n                        for i in range(1, 1000):\n                            if (i % 3 == remainder_3 and i % 5 == remainder_5 and\n                                    i % 7 == remainder_7 and i % 8 == remainder_8):\n                                return i\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Given ratios and information\n    ratio_orchids_to_tulips = 3 / 5\n    \n    # Orchid information after sales\n    sold_orchids = 40 / 100 * orchids  # 40% of orchids\n    remaining_orchids = orchids - sold_orchids\n    \n    # Tulip information after sales\n    sold_tulips = 1 / 5 * tulips  # 1/5 of tulips\n    remaining_tulips = tulips - sold_tulips\n    \n    # Rose information after sales\n    sold_roses = 25 / 100 * roses  # 25% of roses\n    remaining_roses = roses - sold_roses\n    \n    # Equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, 3616)  # Total number of flowers initially\n    equation2 = Eq(orchids, ratio_orchids_to_tulips * tulips)  # Ratio of orchids to tulips\n    equation3 = Eq(remaining_orchids + remaining_tulips + remaining_roses, 2644)  # Flowers remaining after sales\n    \n    # Solve the equations\n    solution = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    # Return the number of orchids\n    return solution[orchids]\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    def last_digit(n):\n        return n % 10\n\n    total_sum = 0\n    for i in range(1, 10):\n        # Calculate the last digit of each number raised to the 2013th power\n        total_sum += last_digit(i**2013)\n        \n    # Find the last digit of the final sum\n    ans = last_digit(total_sum)\n\n    return ans\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter could take a maximum of one sock of each colour without having a matching pair.\n    # That's 3 socks (one red, one blue, one black).\n    # The next sock must guarantee a pair.\n    socks_needed = 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    departure_hour_japan = 20 # 8pm in 24-hour format\n    arrival_hour_france = 1   # 1am in 24-hour format\n    time_difference = 7       # Japan is 7 hours ahead\n\n    # When Amy arrives in France at 1am (France time), it is 1am + 7 hours = 8am (Japan time) on the same day\n    # However, since Amy departed at 8pm (Japan time) on the previous day, we must account for the date change\n\n    # Calculate the duration of the flight crossing the date boundary from Japan's perspective    \n    duration = ((24 - departure_hour_japan) + arrival_hour_france + time_difference)\n\n    return duration\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')  # number of coins they initially had\n\n    # Eugene had 5 times as many coins as Sid\n    eq1 = Eq(eugene, 5 * sid)\n    # After using coins they had 51 coins left altogether\n    eq2 = Eq(eugene - 71 + sid - 16, 51)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    score = 168\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    \n    # Let x be the number of correct answers.\n    # She gets 4 marks for each correct answer: 4 * x\n    # The number of questions she got wrong: attempted_questions - x\n    # She loses 1 mark for each wrong answer: (attempted_questions - x) * (-1)\n    # The total score is hence 4x - (attempted_questions - x) = score\n    # Simplify the equation: 4x - attempted_questions + x = score\n    # Solve for x: 5x - attempted_questions = score\n    \n    # Solve for x\n    correct_answers = (score + attempted_questions) / 5\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest number be x. Then the five consecutive even numbers are\n    # x, x+2, x+4, x+6, x+8 and their sum is 5x + 20.\n    # We set up the equation 5x + 20 = 200 and solve for x.\n    x = (200 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred\n    x = symbols('x')\n\n    # Initial amounts of sugar in each container\n    sugar_A_initial = 50 * 0.10\n    sugar_B_initial = 30 * 0.20\n\n    # New amount of water\n    water_A = 50 - x\n    water_B = 30 - x\n\n    # Equate the concentrations in container A and B after transfer\n    sugar_A_after = (sugar_A_initial - 0.10 * x) / water_A\n    sugar_B_after = (sugar_B_initial + 0.10 * x) / water_B\n\n    # Create the equation based on the fact that the concentrations are equal\n    equation = Eq(sugar_A_after, sugar_B_after)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    volume_transferred = solution[0]  # Solution might come as a list\n\n    return volume_transferred\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For a 2-digit number, there are 2 places to fill (tens and ones)\n    # For the tens place, we can't have 0 (because then it wouldn't be a 2-digit number)\n    # So we have 2 choices for the tens place (1, 2)\n    tens_place_options = 2\n\n    # For the ones place, we can have 0, 1, or 2\n    # So we have 3 choices for the ones place\n    ones_place_options = 3\n\n    # By multiplication principle, total number of 2-digit numbers\n    total_numbers = tens_place_options * ones_place_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    # Initialize the result as floating point for more accuracy in division\n    ans = 0.0 \n    \n    # Start with the numerator and denominator at their initial values\n    numerator = 100.0\n    denominator = 97.0\n    \n    for i in range(4, 0, -1):  # Runs from 4 to 1\n        # Add current fraction to the running total\n        ans += numerator / denominator\n        \n        # Prepare the next term's numerator and denominator\n        numerator *= i - 1\n        denominator *= i - 1\n    \n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to make 4 cuts to divide the wood into 5 sections.\n    # Therefore, she needs 2 minutes per cut (8 minutes / 4 cuts).\n    time_per_cut = 8 / 4\n    \n    # To cut the wood 6 times, we multiply the time per cut by the number of cuts.\n    time_for_6_cuts = time_per_cut * 6\n    \n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    max_other_votes = max(22, 27)\n\n    # To ensure victory, Peter must have over half the total votes.\n    # As we're not considering fractions of votes, he needs at least one more vote than half.\n    votes_needed_for_majority = (total_votes // 2) + 1\n\n    # If Peter already has the majority, no additional votes are needed.\n    if peter_votes >= votes_needed_for_majority:\n        return 0\n\n    # Calculate the number of additional votes Peter needs.\n    additional_votes_needed = votes_needed_for_majority - peter_votes\n    \n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    ans = max(numbers, key=lambda x: x % 10)\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # pence\n    for num_coins in range(1, total_amount // 5):\n        if 5 * num_coins + 10 * num_coins + 20 * num_coins == total_amount:\n            return 3 * num_coins  # Total coins = 5p coins + 10p coins + 20p coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_sweets = 135\n    days = 9\n    difference = 3\n\n    # Calculate the first day sweets based on the formula for the sum of an arithmetic series\n    first_day_sweets = (2 * total_sweets / days) - difference * (days - 1)\n\n    # Calculate the last day sweets based on the arithmetic sequence property\n    last_day_sweets = first_day_sweets + difference * (days - 1)\n    \n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    wallet = 100\n    book_cost = wallet * 0.1\n    remaining_after_book = wallet - book_cost\n    dvd_cost = remaining_after_book * 0.2\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money_cents = 28 * 100\n    gift_cost_cents = 20 * 100\n    money_left_cents = total_money_cents - gift_cost_cents\n    return money_left_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * (1 + rate) ** time\n    return balance\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):  # iterate from 30 to 120 inclusively\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = (\n        sum(1 for i in range(1, 10)) +                 # 1-9\n        sum(2 for i in range(10, 100)) +               # 10-99\n        sum(3 for i in range(100, 185 + 1))            # 100-185\n    )\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary_before_raise = 24000\n    monthly_salary_before_raise = annual_salary_before_raise / 12\n    raise_percentage = 10\n\n    monthly_raise_amount = monthly_salary_before_raise * raise_percentage / 100\n    monthly_salary_after_raise = monthly_salary_before_raise + monthly_raise_amount\n\n    return monthly_salary_after_raise\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Loop over all months (1-12) and days in a month (1-31)\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Calculate the product according to the problem\n            if (month * 31 + day * 12 == 376):\n                # Format the output as ddmm\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # 4.08 * 20 = 1.08 * 20 + box * 20\n    # Divide both sides by 20 to simplify\n    # 4.08 = 1.08 + box\n    # Subtract 1.08 from both sides to find the missing number (box)\n    box = 4.08 - 1.08\n    return box\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for num in range(119, 98, -2):\n        sum += sign * num\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n\n    calculator_discount = calculator_original_price * 0.25\n    protractor_discount = protractor_original_price * 0.50\n\n    calculator_sale_price = calculator_original_price - calculator_discount\n    protractor_sale_price = protractor_original_price - protractor_discount\n\n    total_cost = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n    return total_cost\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger = 18\n    older_future_age = 62\n\n    # When the younger elephant reaches the current age of the older elephant,\n    # the older elephant will be 62 years old. This means the difference in their ages\n    # will stay the same. So, we can write the age of the older elephant as:\n    # age of younger elephant + difference in their ages.\n    # The difference in age will be the difference in years between now and when the \n    # older elephant will be 62 years old, when the younger will have the current age of the older.\n\n    # Let's find when the younger elephant will be the current age of the older elephant.\n    # Let x = current age of older elephant\n    # Then x - younger = older_future_age - x\n\n    x = symbols('x')\n    equation = Eq(x - younger, older_future_age - x)\n    \n    older_present_age = solve(equation, x)[0]\n\n    return older_present_age\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # From the given problem, we can establish a relationship:\n    # Work = Rate * Time\n    # For a constant amount of work, the rate at which 27 oxen eat grass is proportional to the rate at which 23 oxen eat grass.\n    # Therefore, the amount of grass 27 oxen can eat in 6 weeks is the same amount of grass 23 oxen can eat in 9 weeks.\n    # Let's define the work as 'W', the rate for 27 oxen as 'R1' and for 23 oxen as 'R2', and the time for 27 and 23 oxen as 'T1' and 'T2', respectively.\n    # We have:\n    # W = R1 * T1 and W = R2 * T2\n    # R1 * T1 = R2 * T2\n    # Since 27 oxen finish in 6 weeks and 23 oxen finish in 9 weeks, we have:\n    # (27 * R1) * 6 = (23 * R2) * 9\n    # We can assume R1 = R (rate per oxen for 27 oxen) and R2 = R (rate per oxen for 23 oxen), so we have:\n    # 27 * 6 * R = 23 * 9 * R\n    \n    # We want to find the time it takes for 21 oxen to finish eating the grass\n    # We denote this time as 'T3' and the rate for 21 oxen as 'R3', so we have:\n    # W = (21 * R) * T3\n    # We know that W is the same in all cases, so we can write:\n    # (27 * 6 * R) = (21 * R) * T3\n    # Finally, we solve for T3:\n    # T3 = (27 * 6) / 21\n\n    T3 = (27 * 6) / 21\n    return T3\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    kg_in_tonne = 1000\n    two_thirds_of_tonnes = (2/3) * tonnes\n    ans = two_thirds_of_tonnes * kg_in_tonne\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    bike_speed = 10          # Bike speed in mph\n    train_speed = 50         # Train speed in mph\n    bike_time = 1            # Bike time in hours (from 7:30 AM to 8:30 AM)\n    train_time = 2           # Train time in hours (from 8:30 AM to 10:30 AM)\n\n    distance_bike = bike_speed * bike_time\n    distance_train = train_speed * train_time\n\n    total_distance = distance_bike + distance_train\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # The problem is the same as finding the number of solutions to x1 + x2 + x3 = 5\n    # considering x1, x2, and x3 can be zero (representing empty boxes)\n    # This is a problem of distributing n indistinguishable objects into r bins, also known as stars and bars problem\n\n    balls = 5  # Number of balls (stars)\n    boxes = 3  # Number of boxes (bars + 1)\n\n    # The formula for this problem is (n + r - 1) choose r - 1, which corresponds to choosing positions\n    # for r - 1 dividers between n objects, allowing for some bins to be empty.\n    # In this case, it will be (5 + 3 - 1) choose (3 - 1)\n\n    from math import comb\n    ans = comb(balls + boxes - 1, boxes - 1)\n    return ans\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    # Given ratio of flour to milk is 40g flour for every 80ml milk.\n    # We need to find out how much milk is required if we have 25g flour.\n    # The ratio has to be maintained, therefore:\n    \n    flour_given = 40\n    milk_required_for_given_flour = 80\n    flour_available = 25\n    \n    # Calculate the amount of milk based on the available flour.\n    milk_required = (milk_required_for_given_flour / flour_given) * flour_available\n    \n    return milk_required\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    sweets_original = sweets_taken + sweets_left\n    return sweets_original\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    total_marbles = Eq(blue + red + green, 112)\n\n    solutions = solve(total_marbles, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    letters = 'TEENAGE'\n    frequency = {letter: letters.count(letter) for letter in set(letters)}\n    \n    numerator = factorial(len(letters))\n    denominator = 1\n    for value in frequency.values():\n        denominator *= factorial(value)\n    \n    return numerator // denominator\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Counting from front to back, 3rd student\n    # Counting from back to front, 2nd student\n    # This means there are 3 + 2 - 1 rows (subtract one to avoid double counting Lucas himself)\n    rows = 3 + 2 - 1\n\n    # Counting from left to right, 4th student\n    # Counting from right to left, 3rd student\n    # This means there are 4 + 3 - 1 columns (subtract one to avoid double counting Lucas himself)\n    columns = 4 + 3 - 1\n\n    # Total number of students\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # After spending, both Ema and Keng Wee have the same amount of money\n    equation2 = Eq(ema - ema / 4, keng_wee - 4/7 * keng_wee)\n    \n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def digit_sum(n):\n        return sum([int(i) for i in str(n)])\n\n    num = 217\n    while digit_sum(num) != 9:\n        num += 1\n\n    return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # From front to back, Lucas is the 3rd; from back to front, he is the 2nd.\n    # Therefore, there must be 3 + 2 - 1 students in the vertical line (subtract 1 to account for double-counting Lucas).\n    vertical_students = 3 + 2 - 1\n\n    # From left to right, Lucas is the 4th; from right to left, he is the 3rd.\n    # Therefore, there must be 4 + 3 - 1 students in the horizontal line (subtract 1 to account for double-counting Lucas).\n    horizontal_students = 4 + 3 - 1\n\n    # The total number of students is the product of the number of students in a vertical line and in a horizontal line.\n    total_students = vertical_students * horizontal_students\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    result = 418 * 7\n    return result\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 0\n    for i in range(1, 11):\n        # Each fraction series sums to an integer value since it forms a palindrome\n        ans += (1/i) * i\n        # Since the series repeats all terms except the term where numerator equals denominator\n        ans += (i - 1)/i * (i - 1)\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    # Solve for y in terms of x\n    y_expr = solve(equation, y)[0]\n\n    # Substitute y into (2x - y)\n    expression = (2 * x - y_expr)\n\n    return expression\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of boys (b) and the original number of girls (g)\n    b, g = symbols('b g', integer=True)\n    \n    # Original ratio of girls to boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # New ratio after 2 girls are transferred in\n    # The number of boys remains the same, so only add 2 to the number of girls\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations for the number of boys and girls\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the total number of students after the transfer\n    total_students = solutions[b] + solutions[g] + 2\n\n    return total_students\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + (1 * 78) + (1 * 105)\n    change_pence = (5 * 100) - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    trevor_sweets = 5 * 24\n    return trevor_sweets\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    total_tiles = 390\n    # Let the number of tiles Mr Tan has be x\n    # Then Mr Lim has 5x tiles\n    # Together they have x + 5x = 6x tiles\n    # We know that 6x = 390, so x = 390 / 6\n    x = total_tiles / 6\n    # Mr Lim has 5x tiles, so Mr Tan has x tiles\n    # The difference between their tiles is 5x - x = 4x\n    ans = 4 * x\n    return ans\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let z represent Zehan's current age\n    z = symbols('z')\n    \n    # Equation representing the condition\n    equation = Eq(z + 12, 3 * z)\n    \n    # Solve the equation for Zehan's current age\n    zehan_current_age = solve(equation, z)\n    \n    return zehan_current_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    team_size = 5\n    ABC_combinations = 3 * comb(total_students - 3, team_size - 1)\n    return ABC_combinations\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    cost_per_ticket = total_cost / number_of_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    number = 0.36\n    percent = number * 100\n    return percent\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of lemon juice and water\n    lemon_juice, water = symbols('lemon_juice water')\n    \n    # The initial ratio is 2 parts lemon juice to 3 parts water\n    equation1 = Eq(lemon_juice/water, 2/3)\n    \n    # After adding 80ml lemon juice, the ratio becomes 6 parts lemon juice to 5 parts water\n    equation2 = Eq((lemon_juice + 80)/water, 6/5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lemon_juice, water))\n    \n    return solutions[lemon_juice]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    total_ratio = 5 + 6  # Savannah's and Shaila's ratio combined\n    shaila_sweets = 36\n\n    total_sweets = (shaila_sweets * total_ratio) // shaila_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    savings = symbols('savings')\n    \n    # Kim gave 1/3 of her savings to her mother\n    mother_got = savings * 1/3\n    \n    # Kim spent 177 on dresses and 129 on earrings\n    spent_dresses_earrings = 177 + 129\n    \n    # Kim has 50% of what she gave to her mother left\n    left_money = mother_got * 50/100\n    \n    # Equation representing Kim's savings after all transactions\n    equation = Eq(mother_got + spent_dresses_earrings + left_money, savings)\n    \n    # Solve for Kim's total savings\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n\n    only_french_teachers = french_teachers - both_languages_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = usual_speed * 1.30\n    delay_time = 9 / 60  # converting minutes to hours\n\n    # distance = speed * time\n    # since the time to reach the destination is the same whether the car is delayed or not, we have:\n    # usual_speed * usual_time = increased_speed * (usual_time - delay_time)\n    # so, usual_time = delay_time * increased_speed / (increased_speed - usual_speed)\n\n    usual_time = delay_time * increased_speed / (increased_speed - usual_speed)\n    distance = usual_speed * usual_time\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    x = symbols('x')\n    eq = Eq(((x + 8) * 8 - 8) / 8, 80)\n    sol = solve(eq, x)\n    return sol[0]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    red_length = 2\n    blue_length = 3\n    red_ropes = 0\n\n    # Assume all ropes are red initially and calculate total length\n    red_ropes_length = red_length * total_ropes\n\n    while red_ropes_length > total_length:\n        # Replace a red rope with a blue one and adjust the total red rope length\n        red_ropes_length -= red_length\n        red_ropes_length += blue_length\n        red_ropes += 1\n\n    return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    students_skipping = 40\n    students_long_jump = 31\n    students_both = 21\n    \n    students_only_one_event = (students_skipping - students_both) + (students_long_jump - students_both)\n    \n    return students_only_one_event\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    # Total electricity saved in the first half of the year\n    first_half_total = 366\n    \n    # Average electricity saved per month in the second half of the year\n    second_half_avg = 65\n    \n    # Number of months in the second half of the year\n    months_in_second_half = 6\n    \n    # Total electricity saved in the second half of the year\n    second_half_total = second_half_avg * months_in_second_half\n    \n    # Total electricity saved over the entire year\n    total_yearly_savings = first_half_total + second_half_total\n    \n    # Total number of months in a year\n    total_months = 12\n    \n    # Average electricity savings per month over the entire year\n    yearly_avg = total_yearly_savings / total_months\n    \n    return yearly_avg\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables representing original speed and time\n    speed, time = symbols('speed time')\n\n    # New speed after 25% increase\n    increased_speed = speed * 1.25\n\n    # Decreased time due to speed increase (decrease by 20 minutes)\n    decreased_time = time - 20/60  # Convert 20 minutes to hours\n\n    # Equation representing the relationship after speed increase\n    equation1 = Eq(increased_speed * decreased_time, speed * time)\n\n    # Decreased speed by 45 mpm (meters per minute)\n    decreased_speed = speed - 45\n\n    # Increased time by 75% due to speed decrease\n    increased_time = time * 1.75\n\n    # Equation representing the relationship after speed decrease\n    equation2 = Eq(decreased_speed * increased_time, speed * time)\n\n    # Solve for original speed and time\n    solutions = solve((equation1, equation2), (speed, time))\n\n    # Original speed and time\n    original_speed = solutions[speed]\n    original_time = solutions[time]\n\n    # Convert original_speed from meters/minute to meters/hour\n    original_speed_mph = original_speed * 60\n\n    # Distance covered\n    distance = original_speed_mph * original_time\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22 // 2 + 1):\n        if x != (22 - x):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    ans = total_used.simplify()\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors = [i for i in range(1, 42) if 41 % i == 0]\n    A = factors[-1] - factors[0]\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Given height of the screen\n    height = 21  # in cm\n    \n    # Find the width based on the given ratio\n    # Use cross multiplication: width / height = ratio_width / ratio_height\n    width = (height * ratio_width) // ratio_height\n    \n    # Calculate the perimeter of the screen\n    # Perimeter = 2 * (height + width)\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let's denote the two numbers as x and y, where x is the greater number.\n    # According to the problem, we have:\n    # x - y = 36 (1)\n    # x + y = 98 (2)\n    # Adding both equations (1) and (2), we get:\n    # 2x = 134\n    # Dividing both sides by 2, we get the value of x:\n    x = 134 / 2\n    \n    # Now, we can use the value of x to find y:\n    # From equation (2), we have:\n    # y = 98 - x\n    y = 98 - x\n\n    # Since y is the smaller number, we return y as the answer.\n    return y\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Only need to consider the last digit of each base number raised to the 100th power\n    last_digit_4 = (4 ** (100 % 4)) % 10  # The cycle for last digit of powers of 4 is (4, 6) which repeats every 2 steps\n    last_digit_7 = (7 ** (100 % 4)) % 10  # The cycle for last digit of powers of 7 is (7, 9, 3, 1) which repeats every 4 steps\n    last_digit_9 = (9 ** (100 % 2)) % 10  # The cycle for last digit of powers of 9 is (9, 1) which repeats every 2 steps\n    last_digit_11 = (1 ** 100) % 10       # 11's last digit is 1, and any power of 1 is 1\n    \n    # Multiply the last digits, and take the last digit of the result as the final answer\n    final_last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return final_last_digit\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    total_correct = total_questions * 0.7\n    total_marks = 78\n\n    # Let x be the number of correct answers Meng answered, then the number of incorrect answers is (total_correct - x).\n    # Marks for correct answers: 3 * x\n    # Marks deducted for wrong answers: -1 * (total_correct - x)\n    # Total marks: 3x - (total_correct - x) = total_marks\n    \n    # Solving the equation 4x - total_correct = total_marks for x\n    x = (total_marks + total_correct) / 4\n\n    return int(x)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    cost_of_6_files_and_10_rulers = 40\n    # The ratio of files to rulers is the same in both cases (6:10 = 9:15)\n    # Therefore, the cost will scale by the same factor from the first case to the second\n    # That scaling factor is (9 files / 6 files) = 1.5 times\n    cost_of_9_files_and_15_rulers = cost_of_6_files_and_10_rulers * 1.5\n\n    return cost_of_9_files_and_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    \n    # John had 5/13 of the amount of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n    # Jessie then transferred $600 to John\n    equation2 = Eq(john + 600, (1/2) * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n    \n    # Calculate the total amount of money they had\n    total_money = solutions[john] + solutions[jessie]\n    \n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 1\n    \n    while True:\n        str_n = str(N)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n        \n        if count_1 == 15 and count_2 == 14:\n            break\n        N += 1\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n    \n    baking_time = end_time - start_time\n    \n    return baking_time.seconds // 60  # returns time in minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of t-shirts and caps\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Siti's ratio of T-shirts to caps is 8:5 (T-shirts:Caps)\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n\n    # Each T-shirt costs $3, each cap costs $5\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    # She collected $132 for the items she sold.\n    # 1/4 * T-shirts * $3 per T-shirt + 1/5 * Caps * $5 per cap = $132\n    sold_equation = Eq((1 / 4) * t_shirts * 3 + (1 / 5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, sold_equation), (t_shirts, caps))\n\n    # We return the number of T-shirts Siti had at first\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    harvir_age = youngest_age + age_difference * (number_of_children - 1)\n\n    return harvir_age\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = (3 * 12) + (5 * 11)  # total cost in pence\n    paid_amount = 200  # amount paid in pence (£2 coin)\n\n    change = paid_amount - total_cost  # change in pence\n    pounds = change // 100  # change in pounds\n    pence = change % 100  # remaining pence\n\n    # return change in the format \"pounds.pence\"\n    return f\"{pounds}.{pence:02d}\"\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n\n    total_spent = calendar_cost + ball_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_muffins = 1/5  # kg\n    flour_cookies = 1/2  # kg\n    flour_left = 360 / 1000  # converting grams to kg\n\n    initial_flour = flour_muffins + flour_cookies + flour_left\n\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons', integer=True)\n    \n    # Define equation based on the cost and total amount spent\n    equation = Eq(26 * oranges + 30 * lemons, 500)  # ￡5 = 500p\n\n    # We want the total number of oranges and lemons, so we seek solutions for this equation\n    # Since number of fruits cannot be negative, we only consider solutions with non-negative integers\n    solutions = [(i, j) for i in range(20) for j in range(20) if 26 * i + 30 * j == 500]\n\n    # The answer should be the total number of oranges and lemons for any valid combination found\n    if solutions:\n        ans = sum(solutions[0])\n    else:\n        ans = 0\n\n    return ans\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    num_people = 4\n    \n    # Number of ways to arrange n people around a circular table\n    # is (n - 1)!\n    num_ways = factorial(num_people - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original = symbols('original')\n    equation = Eq(original + 24, 3 * original)\n    solution = solve(equation, original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    # Calculate number of full boxes\n    full_boxes = total_cookies // cookies_per_box\n\n    # Check if there are leftover cookies that would require an additional box\n    if total_cookies % cookies_per_box != 0:\n        full_boxes += 1\n\n    return full_boxes\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    female_first_day, male_first_day = symbols('female_first_day male_first_day')\n    total_second_day = 1354\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, total_second_day)\n\n    solutions = solve((equation1, equation2), (female_first_day, male_first_day))\n\n    total_first_day = solutions[female_first_day] + solutions[male_first_day]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts Leo and Jason have\n    leo, jason = symbols('leo jason')\n    \n    # Jason initially has $220 less than Leo\n    equation1 = Eq(jason, leo - 220)\n    \n    # Leo receives an extra $180 and Jason receives an extra $1100\n    equation2 = Eq(leo + 180, 2 * (jason + 1100))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    biographies_factorial = factorial(3)\n    science_fictions_factorial = factorial(4)\n    magazines_factorial = factorial(2)\n    schoolbooks_factorial = factorial(2)\n\n    ways_to_arrange = factorial(total_books) // (\n        biographies_factorial * science_fictions_factorial * magazines_factorial * schoolbooks_factorial\n    )\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        A, B, C, D, E = p\n        F = str((int(A) + int(B)) % 10)\n        H = str((int(D) - int(E)) % 10)\n        if len(set(p + (F, H))) == 7 and E != '0':\n            return int(E+F+C+B+H)\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # In this problem, we are essentially partitioning 7 into 3 non-negative parts.\n    # This can be done using stars-and-bars method (balls-and-urns).\n    # We have 7 stars (pencils) and we need 2 bars (to create 3 sections for the pencil cases).\n    # The formula for finding the number of partitions with n stars and k bars is: C(n+k, k).\n    # We will use the comb function from the math library to calculate the combinations.\n    from math import comb\n    \n    pencils = 7\n    pencil_cases = 3\n    bars = pencil_cases - 1  \n    # Calculate the combinations using the formula C(n+k, k)\n    ways = comb(pencils + bars, bars)\n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    step = 9\n\n    last_positive_number = starting_number % step\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6 # mansion cost is 3 million pounds\n    num_friends = 5\n\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let's denote the number of children who paid £10 as x\n    # and the number of children who paid £15 as y.\n    # We have two equations representing the problem:\n    # x + y = 50 (the total number of children)\n    # 10x + 15y = 555 (the total amount paid)\n    # We can solve these equations using substitution or elimination.\n    # I will use substitution for simplicity.\n\n    # From the first equation: x = 50 - y\n    # Let's substitute x in the second equation:\n    # 10(50 - y) + 15y = 555\n    # 500 - 10y + 15y = 555\n    # 5y = 555 - 500\n    # 5y = 55\n    # y = 55 / 5\n    # y = 11\n\n    # So 11 children paid to have their name put onto the shirts.\n    return 11\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')  # t is the time spent walking after the speed increase\n    total_distance = 3700   # total distance walked\n    initial_speed = 150     # initial speed in metres per minute\n    increased_speed = 200   # speed after increase in metres per minute\n    time_before_increase = 10 # time spent walking at initial speed\n\n    # Equation for the total distance walked\n    eq = Eq(initial_speed * time_before_increase + increased_speed * t, total_distance)\n\n    # Solve the equation\n    t_solution = solve(eq, t)[0]\n\n    # Total time spent walking is time before increase plus time after increase\n    total_time = time_before_increase + t_solution\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # Equation for the first day: male = female + 450\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # Equation for the second day: male reduced by 18%, female increased by 15%\n    # Total = 1354\n    equation2 = Eq((male_first_day * 0.82) + (female_first_day * 1.15), 1354)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    # Number of male visitors on the first day\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    n = 40\n    position = 1\n    while n > 1:\n        position *= 2\n        n //= 2\n    \n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London.\n    # Time in Singapore when plane lands (in London time + 7 hours)\n    landing_time_singapore = (11 + 7) % 24  # Modulus 24 to convert to 24-hour time\n    flight_duration = landing_time_singapore - 5  # Flight duration\n\n    if flight_duration < 0:\n        # If result is negative, the flight crossed midnight, add 24 hours\n        flight_duration += 24\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    # total number of cards\n    total_cards = 4 + 3 + 7\n    # calculate permutations treating identical cards as indistinguishable\n    permutations = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return permutations\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    first_day_pages = 20\n    increase_pages = 5\n    last_day_pages = 80\n    total_pages = first_day_pages\n\n    days = 1\n    while True:\n        next_day_pages = first_day_pages + (increase_pages * days)\n        if total_pages + next_day_pages > last_day_pages:\n            break\n        else:\n            total_pages += next_day_pages\n            days += 1\n\n    total_pages += last_day_pages\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    # Amount of almonds bought (in kg)\n    almonds = 4/9\n    # Amount of cashew nuts bought (in kg)\n    cashew_nuts = 1/3\n    # Calculate the difference between the amount of almonds and cashew nuts\n    difference = almonds - cashew_nuts\n\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's Wrong Calculation\n    wrong_total = (quotient * remainder) + divisor\n    \n    # The Correct Calculation\n    correct_total = (quotient * divisor) + remainder\n\n    # Check if Johnny's Answer is the same as the correct answer\n    return correct_total if wrong_total != correct_total else wrong_total\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    # Initial sum is zero\n    total_sum = 0\n    # Start with the last positive term, which is 4\n    pos_term = 4\n    # Include 2 in the sum as it's subtracted in the sequence\n    neg_term = 2\n    \n    # Loop through the sequence, subtract and add alternatively\n    for number in range(54, pos_term - 1, -2): # decrement by 2 each time\n        total_sum += number  # add the positive term\n        total_sum -= neg_term  # subtract the negative term\n        neg_term += 2  # prepare the next negative term for subtraction\n    \n    return total_sum\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:  # S and G cannot be zero as they're the first digits of a 5-digit number\n            continue\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5\n    second_digit = 1  # The smallest odd number among the natural numbers\n    third_digit = 9  # The largest single digit odd number\n    fourth_digit = 0  # The smallest even number\n    fifth_digit = 8  # The largest single digit that is a multiple of 2\n    sixth_digit = 3  # The smallest odd number greater than 1 in nature\n    seventh_digit = 0  # The last digit must be a multiple of 2 and 5, so it has to be 0\n\n    # Combine the digits to form the phone number\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return phone_number\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Calculate the total numbers in the sequence before the first 11 appears\n    # Since every number n appears n times, the total count is (1+2+...+10).\n    num_count = sum(range(1, 11))\n\n    # The median in this sequence will be the middle number when all numbers are listed in ascending order.\n    # If the count is odd, the median is simply the middle number.\n    # Since the count is (1+2+...+10) which is even, the median will be the average of the two middle numbers.\n    half_count = num_count // 2\n    \n    # Now find the two numbers that are in the middle of the sequence\n    # We iterate through the numbers and subtract their occurrence count from the half_count\n    # until we reach the middle of the sequence.\n    middle_numbers = []\n    for n in range(1, 11):\n        if half_count - n > 0:\n            half_count -= n\n        else:\n            # The middle two numbers in the sorted sequence\n            middle_numbers = [n]\n            if half_count - 1 == 0:\n                middle_numbers.append(n)\n            else:\n                middle_numbers.append(n + 1)\n            break\n\n    # Since we have two middle numbers, the median is their average\n    median = sum(middle_numbers) / len(middle_numbers)\n    \n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the length of the part that has been cut from both ropes\n\n    # Equation representing the situation after cutting the ropes\n    equation = Eq((65 - x), 3 * (29 - x))\n\n    # Solve for x\n    length_cut = solve(equation, x)\n\n    return length_cut[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    ratio_eq1 = Eq(A/B, 2/3)\n    ratio_eq2 = Eq(B/C, 6/5)\n    avg_eq = Eq((A + B + C)/3, 45)\n\n    solutions = solve((ratio_eq1, ratio_eq2, avg_eq), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    solution = solve(total_cost, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # Each place of the 3-digit number can have one of these 5 digits.\n    # Therefore, for each digit place (hundreds, tens, ones), there are 5 choices,\n    # and each choice is independent of the others.\n    # Use the multiplication principle to find the total combinations.\n    \n    digits = 5  # 1, 3, 5, 7, 9\n    ans = digits ** 3  # 5 choices for each of the 3 places\n\n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n\n    # The rate at which the energetic decorator paints per day\n    energetic_rate = 1 / 12\n    # The rate at which the lazy decorator paints per day (unknown)\n    lazy_rate = 1 / x\n    # The rate at which they paint together per day\n    combined_rate = 1 / 8\n\n    # Equation based on rates: energetic_rate + lazy_rate = combined_rate\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder = sum(i ** 2 for i in range(1, 1000, 2)) % 3\n    return remainder\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    equation1 = Eq(jamie_anne, natasha + 18)\n    equation2 = Eq(jamie_anne / natasha, 5/3)\n\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 6),  # remainder 3 modulo 6\n        (4, 7),  # remainder 4 modulo 7\n        (1, 8)   # remainder 1 modulo 8\n    ]\n    \n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if 10*a + b + 10*b + a + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    total_coins = 234\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, total_coins)\n\n    solutions = solve((equation1, equation2), (sana, mina))\n    mina_initial = solutions[mina]\n    mina_left = mina_initial - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original length be 'l' and the original width be 'w'.\n    l, w = symbols('l w')\n\n    # The perimeter of the rectangle after increasing the length by 12cm is 2(l + 12) + 2w = 38cm\n    equation1 = Eq(2 * (l + 12) + 2 * w, 38)\n\n    # Since there is one equation with two variables, we need to express one variable in terms of the other.\n    # We can express l in terms of w using the perimeter equation, but we don't have enough info to find exact values for l and w.\n    # We are only interested in finding the perimeter of the original rectangle, which is 2l + 2w.\n    # So, we will solve for l in terms of w and then find the expression for the original perimeter.\n    l_expr = solve(equation1, l)[0]\n\n    # Original perimeter in terms of w: 2l + 2w, but since we have l in terms of w, we substitute it.\n    original_perimeter = 2 * l_expr + 2 * w\n\n    # Now we use the fact that the perimeter was increased by 2 * 12 = 24cm to get the original perimeter.\n    return 38 - 24\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes  \n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    weight_per_bag = 3/4\n    num_bags = remaining_after_tuesday / weight_per_bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_in_pence = 3.00 * 100  # Convert pounds to pence\n    percentage = (pence / pounds_in_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121): # Because the book is 120 pages, we iterate up to 120\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    time_for_ten_lampposts = 50\n    time_for_one_lamppost = time_for_ten_lampposts / 10\n    lamp_posts_in_80_seconds = 80 / time_for_one_lamppost\n\n    return int(lamp_posts_in_80_seconds) + 1\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    num_sides = 4\n    corner_flowers = 4\n    total_flowers = (flowers_per_side - 1) * num_sides + corner_flowers\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples, lemons + 12)\n    \n    solutions = solve((equation,), (total_items,))\n    total_items_solution = solutions[0]\n    lemons_solution = total_items_solution - (2/3) * total_items_solution - (1/9) * total_items_solution\n    \n    return lemons_solution\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    extra_length = 56\n    football_field_length = basketball_court_length + extra_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    rina_price = 60\n    rina_discount_percent = 20\n    ana_price = 67.50\n    \n    original_price = rina_price / (1 - rina_discount_percent / 100)\n    ana_discount_percent = (original_price - ana_price) / original_price * 100\n    \n    return ana_discount_percent\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    from fractions import Fraction\n\n    # Given inequalities: 3/10 < r/s < 5/16\n    lower_bound = Fraction(3, 10)\n    upper_bound = Fraction(5, 16)\n\n    # Initialize the smallest s as the upper bound denominator\n    smallest_s = upper_bound.denominator\n\n    # We will iterate over the possible values of s and find the smallest s that satisfies the inequalities\n    for s in range(1, smallest_s):\n        for r in range(1, s):\n            fraction = Fraction(r, s)\n            if lower_bound < fraction < upper_bound:\n                smallest_s = s\n                break  # Found the smallest s, break the inner loop\n        if smallest_s != upper_bound.denominator:\n            break  # Already found the smallest s, break the outer loop\n\n    return smallest_s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_steering_wheels = symbols('total_steering_wheels')\n\n    equation = Eq((300 + 250), (5 / 6) * total_steering_wheels)\n\n    solutions = solve(equation, total_steering_wheels)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place is 8 (value of 800)\n    hundreds_digit = 8\n    \n    # The digit in the ones place is the sum of all factors of 4\n    factors_of_4 = [1, 2, 4]  # the factors of 4\n    ones_digit = sum(factors_of_4)\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the digit in the hundreds and the ones\n    tens_digit = hundreds_digit - ones_digit\n    \n    # The digit in the ten thousand's place is between 4 and 5, and since the number is between 40000 and 50000, it's 4\n    ten_thousands_digit = 4\n    \n    # Construct the number\n    number = (ten_thousands_digit * 10000) + (thousands_digit * 1000) + (hundreds_digit * 100) + (tens_digit * 10) + ones_digit\n    \n    return number\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Maximum capacity using children or adults\n    child_capacity = 40\n    adult_capacity = 24\n\n    # Children already on the bus\n    children_on_bus = 15\n\n    # Remaining capacity for children\n    remaining_child_capacity = child_capacity - children_on_bus\n\n    # The number of adults equivalent to the remaining child capacity\n    adults_equivalent = (remaining_child_capacity * adult_capacity) / child_capacity\n\n    return int(adults_equivalent)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n    num = 28\n\n    # Find the greatest common divisor of the number and its square\n    greatest_divisor = gcd(num, num**2)\n\n    # The smallest number would be the divisor of 28 that would make the product a perfect square\n    ans = num // greatest_divisor\n\n    return ans\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_min = 2 / 3\n    total_time = 12\n    total_pancakes = pancakes_per_min * total_time\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n\n    # Apply Pigeonhole Principle\n    min_students_same_size = (total_students // num_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle = lambda a, b: (a + 2) / b\n    ans = triangle(8, triangle(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    spent_dvd = 740\n    remaining_after_dvd = salary - spent_dvd\n    spent_tv = (3/4) * remaining_after_dvd\n    remaining_after_tv = salary - spent_dvd - spent_tv\n    equation = Eq(remaining_after_tv, (1/5) * salary)\n    \n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for Russell's current age\n    russell_current = symbols('russell_current')\n\n    # Define the equation based on the problem statement\n    equation = Eq(russell_current + 32, 4 * (russell_current - 16))\n\n    # Solve the equation for Russell's current age\n    russell_age_now = solve(equation, russell_current)\n\n    return russell_age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # If 6 is directly opposite to 19, then half the number of people in the circle\n    # must be the difference between 19 and 6\n    half_circle = 19 - 6\n    # The total number of people is twice the half_circle\n    total_people = 2 * half_circle\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pips_number = int(f\"{A}{B}{C}{A}\")\n                buds_number = int(f\"{A}{C}{B}{A}\")\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let x be the initial number of students in Class 6A.\n    # Let y be the initial number of students in Class 6B.\n    # According to the problem, we have:\n    # x = 4/9 * y  (Equation 1)\n    \n    # After reshuffling, the number of students in both classes are now equal.\n    # New number of students in Class 6A after reshuffling = x - 3 + 18\n    # New number of students in Class 6B after reshuffling = y + 3 - 18\n    # Since both classes have equal numbers of students after reshuffling:\n    # x - 3 + 18 = y + 3 - 18  (Equation 2)\n    \n    # Substituting x from Equation 1 into Equation 2 gives:\n    # 4/9 * y - 3 + 18 = y + 3 - 18\n    \n    # Simplifying the equation:\n    # 4/9 * y + 15 = y - 15\n    # 4/9 * y - y = -15 - 15\n    # Multiplying by 9 to get rid of the fraction:\n    # 4y - 9y = -270\n    # -5y = -270\n\n    # Solving for y:\n    y = -270 / -5\n\n    # Calculating the initial number of students in Class 6A using x = 4/9 * y\n    x = 4/9 * y\n    \n    return int(x)\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut to cut a rod into 2 pieces.\n    # To cut a rod into 5 pieces, we need 4 cuts.\n    # Hence, the time taken is 4 cuts * 2 minutes per cut.\n    time_for_cuts = 4 * 2\n    return time_for_cuts\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # let's denote the number of shelves with math books as m\n    # and the number of shelves with spelling books as s\n    # we know that there are 15 shelves total, so m + s = 15\n    # we also know that on the 15 shelves there are 72 spelling books\n    # since spelling books come in sets of 9, s = 72 / 9\n    # we can now solve for m\n    # m = 15 - s\n\n    s = 72 // 9\n    m = 15 - s\n\n    # we know that each shelf with math books contains 4 math books\n    # so the total number of math books is m * 4\n\n    math_books = m * 4\n    \n    return math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey walks from the first to the fourth floor in 6 minutes.\n    # This covers a span of 3 floors (from 1st to 4th it is 3 intervals).\n    interval_1_to_4 = 6\n    \n    # To calculate the time to walk from the first to the tenth floor,\n    # we need to find out how many such intervals there are between these floors.\n    # From 1st to 10th it is 9 intervals (9 floors span).\n    interval_1_to_10 = (interval_1_to_4 / 3) * 9\n    \n    return interval_1_to_10\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_original = 40\n    biscuits_original = 100\n    biscuits_available = 75\n\n    chocolate_needed = (chocolate_original / biscuits_original) * biscuits_available\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    number_of_days = 7  # Monday to Sunday\n\n    total_earnings = average_earnings_per_day * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna = 15\n    harry = luna - 3\n    return harry\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n    \n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if (32 / n) == (n / 2):\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Initially, for the 8th student to be opposite the 16th,\n    # it means there must be 16 - 8 = 8 students between them,\n    # and there is another set of 8 students completing the circle.\n    # Hence, there are initially 8 * 2 = 16 students in total.\n\n    initial_students = 16\n\n    # Now, for the 8th student to be opposite the 22nd,\n    # it means there must be 22 - 8 = 14 students between them,\n    # and there is another set of 14 students completing the circle.\n    # Hence, there are now 14 * 2 = 28 students in total.\n\n    new_students = 28\n\n    # The number of new students who joined the second game\n    # is the difference between the new total and the initial total.\n\n    num_new_students = new_students - initial_students\n\n    return num_new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    distance2 = 400\n    speed2 = 5\n    distance3 = 800 - (distance1 + distance2)  # Remaining distance\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Given ratios and total marbles\n    ratio_anna = 2\n    ratio_betsy = 5\n    ratio_charlene = 7\n    total_marbles = 168\n\n    # Create expressions based on the problem statement\n    # Anna ends with 2 parts, Betsy with 5 parts, and Charlene with 7 parts\n    equation1 = Eq(ratio_anna * (betsy - 8 + 15) + ratio_betsy * (charlene - 15) + ratio_charlene * (anna + 8), total_marbles * (ratio_anna + ratio_betsy + ratio_charlene))\n\n    # Total number of marbles remains same after exchanges\n    equation2 = Eq(anna + betsy + charlene, total_marbles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    return 180 - 9*6 - 7*6\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    # Calculate the number of permutations of all cards, considering cards of the same color are indistinguishable\n    # Use the formula for permutations of a multiset: n! / (n1! * n2! * ... * nk!), where n is the total number, and ni is the count of each indistinguishable element\n    ans = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n    equation1 = ((lollipops + 120) / (gum_drops + 120)) - (4/5)\n    equation2 = (lollipops / gum_drops) - (5/7)\n    \n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n    lollipops_now = solutions[lollipops] + 120\n    gum_drops_now = solutions[gum_drops] + 120\n\n    total_candy_now = lollipops_now + gum_drops_now\n    return total_candy_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    digits = 0\n    for i in range(1, 268 + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "from math import gcd\n\ndef solution():\n    # Calculate the greatest common divisor of the sides of the rectangle\n    max_square_side = gcd(int(1.36 * 100), int(0.8 * 100))  # Convert meters to centimeters to avoid floating point issues\n\n    # Calculate the number of squares along the length and the width\n    squares_length = (136 // max_square_side)\n    squares_width = (80 // max_square_side)\n\n    # The total number of squares is the product of the number of squares along the length and the width\n    total_squares = squares_length * squares_width\n\n    return total_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # Count the number of odd three-digit numbers that can be made with 4, 5, 7\n    # The hundreds place can be 4, 5, or 7 (3 possibilities)\n    # The tens place can be 4, 5, or 7 (3 possibilities)\n    # The ones place can only be 5 or 7 to make the number odd (2 possibilities)\n    hundreds = 3\n    tens = 3\n    ones = 2\n\n    # Apply the multiplication principle\n    ans = hundreds * tens * ones\n\n    return ans\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (201 - 1) // 5\n    count_by_7 = (201 - 1) // 7\n    count_by_both = (201 - 1) // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_both\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the cost of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    \n    # Chris buys 1 durian, 2 pineapples, and 3 watermelons for $440\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    \n    # Dylan buys 4 durians, 6 pineapples, and 9 watermelons for $1625\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the number of teams in the league\n    n = symbols('n')\n\n    # Each team plays 2 games (home and away) against each of the other teams\n    # The total number of matches is given by n*(n-1), since each team does not play against itself.\n    # However, since each match is counted twice (once for each team), we divide by 2:\n    # Total matches = n*(n-1)/2 * 2 (to account for home and away)\n    # We equate this to 30 (total number of matches in the season):\n\n    equation = Eq(n*(n-1), 30)\n\n    # Solve for 'n' (the number of teams)\n    teams = solve(equation, n)\n\n    # Filter out the negative solution, as the number of teams can't be negative\n    ans = [team for team in teams if team.is_real and team > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    result = sum((-1)**(i+1) * (100-i) for i in range(100))\n    return result\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1001):\n        if i - (i // 10) == 135:\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    trips_there = (students // boat_capacity)\n    remaining_students = (students % boat_capacity)\n    if remaining_students > 0:\n        trips_there += 1  # Last trip for remaining students\n    # One student must return the boat each time except the last trip\n    trips_back = trips_there - 1\n    total_trips = trips_there + trips_back\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise.\n    # 80% chose Grade A = 0.80x\n    # 35% chose Grade B = 0.35x\n    # 10% chose neither = 0.10x\n    # Both A and B = 75\n    \n    # According to the principle of inclusion-exclusion:\n    # Number who chose A or B = (Number who chose A) + (Number who chose B) - (Number who chose both A and B)\n    # Number who chose neither = Total students - Number who chose A or B\n    \n    # 75 = (0.80x + 0.35x - 75) - (0.10x)\n    # Solve for x:\n    x = (75) / (0.80 + 0.35 - 1 - 0.10)\n    \n    return int(x)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2 * 10\n    hundreds = 3 * 100\n    number = ones + tens + hundreds\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    num = factorial(100)\n    denom = factorial(99) + factorial(98)\n\n    ans = num / denom\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for each person's age\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Creating the equations based on the given information\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Getting Alex's age from the solutions\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '4', '6', '9']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    all_numbers_int = [int(number) for number in all_numbers]\n    average = sum(all_numbers_int) / len(all_numbers_int)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition, equal number of boys and girls\n    initial_condition = Eq(boys, girls)\n\n    # After 60 boys and 12 girls left, there were twice as many girls as boys\n    final_condition = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solving the equations\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(10):\n        for ones in range(10):\n            if tens + ones == 15 and tens != ones and tens != 9 and ones != 9:\n                return int(\"9\" + str(tens) + str(ones))\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from sympy import factorint\n    from itertools import combinations\n\n    def factor_count(n):\n        return sum(factorint(n).values()) + 1  # number of factors including 1 and the number itself\n\n    # Generate all possible combinations to pick 9 out of 13 numbers.\n    all_possible_combinations = combinations(range(1, 14), 9)\n\n    # Iterate over combinations and find the correct set where two students know their number of factors.\n    for combination in all_possible_combinations:\n        sorted_combination = sorted(combination)\n        factors = [factor_count(num) for num in sorted_combination]\n        \n        # Find if exactly two students know their number of factors (means their factor count is unique).\n        if sum(factors.count(factor) == 1 for factor in factors) == 2:\n            # Since Alice knows she has an odd number, we exclude combinations where the two unique factors do not match an odd number.\n            unique_factors_indices = [factors.index(factor) for factor in factors if factors.count(factor) == 1]\n            if not all(sorted_combination[index] % 2 == 1 for index in unique_factors_indices):\n                continue\n\n            # Now we find indices of Alice and May by the condition given.\n            # We know:\n            # Alice's number is odd.\n            # May's number is two less than Alice's.\n            # May's number is one more than Mark's (May > Mark).\n            # We need to find three consecutive numbers where Alice's and May's numbers are odd.\n            for i in range(1, 8):  # Loop over the sorted combination but avoid the last two elements.\n                if sorted_combination[i] % 2 == 1 and sorted_combination[i] - sorted_combination[i - 1] == 1 and sorted_combination[i + 1] - sorted_combination[i] == 2:\n                    # We found Alice (i+1) and May (i) with conditions met.\n                    remaining_numbers = set(range(1, 14)) - set(sorted_combination)\n                    product_remaining_numbers = 1\n                    for number in remaining_numbers:\n                        product_remaining_numbers *= number\n                    return product_remaining_numbers\n\n    return None\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km per hour\n    car_speed = 120  # km per hour\n    start_difference = 3  # hours\n\n    # Distance traveled by the van in the 3 hour head start\n    van_distance = van_speed * start_difference\n\n    # Relative speed between the car and the van\n    relative_speed = car_speed - van_speed\n\n    # Time needed for the car to catch up with the van\n    catch_up_time = van_distance / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # Each hat is optional, so for 4 hats there are 5 possibilities (wearing one of each hat or no hat)\n    hats = 5\n    # She has to choose 1 out of 3 shirts\n    shirts = 3\n    # She has to choose 1 out of 2 pairs of pants\n    pants = 2\n    # She has to choose whether or not to wear the skirt, so there are two possibilities\n    skirt = 2\n    \n    # According to the law of multiplication, to find the total number of combinations,\n    # multiply the number of possibilities for each independent choice together.\n    total_combinations = hats * shirts * pants * skirt\n    \n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    expression = (x / 99) * (x / 99)  # 0.010101... as x/99 and square it\n    expanded_expr = expression.expand()\n\n    # Since 0.01 is 2 digits long, squaring it will result in 2 * 2 = 4 digits in repetend\n    repetend_length = 2 * 2\n\n    return repetend_length\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate how many pages each printer can print in 1 minute\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n    \n    # The total number of pages both printers can print in 1 minute\n    total_pages_per_minute = pages_per_minute_A + pages_per_minute_B\n    \n    # Half an hour is 30 minutes\n    half_hour = 30\n    \n    # Calculate the total pages printed in half an hour by both printers\n    total_pages_in_half_hour = total_pages_per_minute * half_hour\n    \n    return total_pages_in_half_hour\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total = symbols('total')\n    apples = (2/3) * total\n    bananas = (1/9) * total\n    lemons = total - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n    \n    solution = solve(equation, total)\n    \n    lemons_amount = lemons.subs(total, solution[0])\n    \n    return lemons_amount\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the day is valid for the month\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            \n            # Format the date as an 8-digit string\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            \n            # Count how many '3's are present in the date string\n            count += date_str.count('3')\n    \n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # Let the common ratio be x\n    # Then number of durian puffs sold = 3x, chocolate = 4x, strawberry = 2x\n    # Price per durian puff = $5, per chocolate puff = $3, per strawberry puff = $4\n    # Total money collected = 5*(3x) + 3*(4x) + 4*(2x) = $560\n    # Solve for x and then calculate money collected from durian puffs\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # common ratio\n\n    # Write the total money equation\n    total_money_eq = Eq(5*(3*x) + 3*(4*x) + 4*(2*x), 560)\n\n    # Solve for x\n    x_value = solve(total_money_eq, x)\n\n    # Calculate money collected from durian puffs\n    durian_money = 5 * (3 * x_value[0])\n\n    return durian_money\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is cut into 490 small cubes of the same size,\n    # and the dimensions are 7x5x14, each dimension must be divided by 7.\n    # Thus, each small cube is a 1x1x1 cube.\n\n    # Each corner of the cuboid will have three faces painted.\n    # There are 8 corners on a cuboid.\n    num_corners = 8\n\n    return num_corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens_digit in range(1, 10):  # tens digit must be 1-9\n        for ones_digit in range(10):  # ones digit must be 0-9\n            original_number = 10 * tens_digit + ones_digit\n            swapped_number = 10 * ones_digit + tens_digit\n            if swapped_number == original_number // 3 + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191\n    rate_second_period = 1.166\n\n    total_amount = principal * rate_first_period * rate_second_period\n    return round(total_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n\n    equation1 = Eq(raisin_roll, 3 * donut)\n    equation2 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n\n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Students from the three schools\n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n\n    # Calculate the greatest common divisor (GCD)\n    gcd_12 = gcd(students_school_1, students_school_2)\n    gcd_123 = gcd(gcd_12, students_school_3)\n\n    return gcd_123\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for a single notebook, pencil case, and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Set up the equations based on the provided information\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)  # Angel's total purchase\n    equation2 = Eq(notebook + pencil_case, 6)  # A notebook and a pencil case cost $6\n    equation3 = Eq(pencil_case + eraser, 9)    # A pencil case and an eraser cost $9\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    # Return the cost of a pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each person's level\n    A, B, C, D = symbols('A B C D', integer=True)\n    # Define variables for each person's name\n    Zachary, Yvonne, Xavier, Waylon = symbols('Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Define the range for each level (1 to 18)\n    levels = (1, 18)\n\n    # Set up the equations based on the provided information:\n    # (1) A stays in a unit higher than C, but lower than D\n    equations = [A > C, A < D]\n    # (2) B stays in a unit that is lower than Xavier's unit\n    equations.append(B < Xavier)\n    # (3) D stays in a unit that is 5 times Yvonne’s unit\n    equations.append(Eq(D, 5 * Yvonne))\n    # (4) If Zachary moves to two levels above, it's midpoint between his and Waylon's unit\n    equations.append(Eq(Zachary + 2 - Xavier, Xavier - (Zachary + 2)))\n    # (5) Zachary's level is the sum of Yvonne and Xavier's levels\n    equations.append(Eq(Zachary, Yvonne + Xavier))\n    \n    # Add assumptions for levels\n    assumptions = [1 <= A, A <= 18,\n                   1 <= B, B <= 18,\n                   1 <= C, C <= 18,\n                   1 <= D, D <= 18,\n                   1 <= Zachary, Zachary <= 18,\n                   1 <= Yvonne, Yvonne <= 18,\n                   1 <= Xavier, Xavier <= 18,\n                   1 <= Waylon, Waylon <= 18]\n    \n    # Build the set of all constraints\n    all_constraints = equations + assumptions\n    \n    # Solve the system of equations with the constraints\n    solutions = solve(all_constraints, (A, B, C, D, Zachary, Yvonne, Xavier, Waylon), \n                      dict=True, range=levels)\n    \n    # Filter solutions to get the values in the range of the levels of the apartment\n    solutions = [sol for sol in solutions if all(levels[0] <= sol[item] <= levels[1] for item in sol)]\n    \n    # Assuming there's a unique solution\n    return solutions[0][A] if solutions else None\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for h in range(1, 10):  # hundreds digit cannot be 0\n        for t in range(1, 10):  # tens digit cannot be 0\n            for u in range(1, 10):  # units digit cannot be 0\n                if h % t == 0 and h % u == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = (12 * (12 + 1)) // 2  # Sum of first 12 natural numbers\n    if total_numbers % 2 == 0:\n        median_index1 = total_numbers // 2\n        median_index2 = median_index1 + 1\n        # find the median value by iterating through the range and counting each number occurrence\n        count = 0\n        for i in range(1, 13):\n            count += i\n            if median_index1 <= count:\n                median1 = i\n                break\n        count = 0\n        for i in range(1, 13):\n            count += i\n            if median_index2 <= count:\n                median2 = i\n                break\n        median = (median1 + median2) / 2  # Average of the two middle values\n    else:\n        median_index = (total_numbers + 1) // 2\n        # find the median value by iterating through the range and counting each number occurrence\n        count = 0\n        for i in range(1, 13):\n            count += i\n            if median_index <= count:\n                median = i\n                break\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    perm = permutations(digits)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "网络故障，请重试"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    # Single digit numbers from 7 to 9\n    single_digits = 9 - 7 + 1\n    \n    # Double digit numbers from 10 to 40\n    double_digits = 40 - 10 + 1\n    \n    # Total digits\n    total_digits = single_digits + 2 * double_digits  # Each double digit number contributes 2 digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Each of the 8 groups has 4 teams, and they play a single round-robin tournament.\n    # In a round-robin tournament with 4 teams, each team plays every other team once.\n    # So for each group, there are 4 choose 2 (4C2) games, because we're choosing 2 teams to play out of 4.\n    games_per_group = (4 * 3) // 2  # 4C2, simplified to 4 * 3 / 2\n\n    # 8 groups play their round-robin tournaments independently, so we multiply by the number of groups.\n    group_stage_games = games_per_group * 8\n\n    # In the knockout round, there are 16 teams, and they play in the following rounds: top 16, top 8, top 4, top 2, and one game for third place.\n    # In each round, the number of games is half the number of teams, since two teams play each game.\n    # Therefore, we add up the games as 16/2 + 8/2 + 4/2 + 2/2 + 1 for the third-place playoff.\n    knockout_round_games = (16 // 2) + (8 // 2) + (4 // 2) + (2 // 2) + 1\n\n    # The total number of games is the sum of group stage games and knockout round games.\n    total_games = group_stage_games + knockout_round_games\n\n    return total_games\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let's denote:\n    # a = the first term of the arithmetic sequence,\n    # d = the common difference of the arithmetic sequence.\n    \n    # The sum of the first n terms of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (2a + (n - 1) * d)\n    \n    # We are provided:\n    # S_9 = 99, S_27 = 540\n    # We need to find S_16\n    \n    # We can set up two equations based on the above information:\n    # 9/2 * (2a + (9 - 1) * d) = 99\n    # 27/2 * (2a + (27 - 1) * d) = 540\n    \n    # We can simplify the two equations:\n    # (2a + 8d) = 99 * 2 / 9\n    # (2a + 26d) = 540 * 2 / 27\n    \n    # Solve the simplified equations for a and d\n    # (2a + 8d) = 22\n    # 2a = 22 - 8d\n    # a = 11 - 4d\n    \n    # (2a + 26d) = 40\n    # 2 * (11 - 4d) + 26d = 40\n    # 22 - 8d + 26d = 40\n    # 18d = 40 - 22\n    # d = 1\n    \n    # a = 11 - 4(1)\n    # a = 7\n    \n    # Now find S_16 using the values of a and d\n    # S_16 = 16/2 * (2*7 + (16 - 1) * 1)\n    S_16 = 8 * (14 + 15)\n    S_16 = 8 * 29\n    S_16 = 232\n\n    return S_16\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Flashes per hour\n    red_flashes_per_hour = 4 * 60\n    green_flashes_per_hour = 6 * 60\n\n    # The least common multiple will give us the number of times they flash together in a minute\n    lcm = red_flashes_per_hour * green_flashes_per_hour // math.gcd(red_flashes_per_hour, green_flashes_per_hour)\n\n    # Flashes at the same instant in one hour\n    same_instant_flashes = 60 // (lcm // red_flashes_per_hour)\n    \n    # Including the first and the last time\n    return same_instant_flashes + 1\n\nimport math\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number\n    # According to the problem statement\n    # 3 * x + 1 = 22\n    # Now, we will solve for x\n    x = (22 - 1) / 3\n    return x\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)\n    french_landscape = 25\n    total_french = 40\n\n    non_french_landscape = landscapes - french_landscape\n    still_lifes = total_paintings - landscapes\n    french_still_lifes = total_french - french_landscape\n    non_french_still_lifes = still_lifes - french_still_lifes\n\n    return non_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink\n    max_volume_per_glass = total_volume // 9 # Find the greatest integer volume that can be poured into each glass\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_weight = 100 * 0.5 + 400 * 0.8\n    concentration = (rice_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24  # speed in meters per minute\n    time_seconds = 300  # time in seconds\n    time_minutes = time_seconds / 60  # convert time to minutes\n\n    distance = speed_m_per_min * time_minutes  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    return total_sum % 100000\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15 # Total hay needed for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20 # Dividing by 20 horses to find how many days the hay will last\n    \n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Iteration through all 4 digit numbers\n    for num in range(1000, 10000):\n        # Convert the number to string to manipulate digits\n        num_str = str(num)\n        # Create new number by moving the first digit to the end\n        new_num_str = num_str[1:] + num_str[0]\n        # Convert the new string back to an integer\n        new_num = int(new_num_str)\n        # Check if the new number is larger than the original by 4707\n        if new_num - num == 4707:\n            return num\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Assume x years later, add x years to both Oliver and Lin's current ages\n    # Set up the equation: Oliver's age + Lin's age + 2*x = 48\n    # Oliver's current age is 20, and Lin's current age is 26\n    # Therefore, the equation is: 20 + x + 26 + x = 48\n    # Simplifying the equation: 46 + 2*x = 48\n    # Solving for x gives: 2*x = 2\n    # Thus, x = 1\n    x = (48 - (20 + 26)) / 2\n    return int(x)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    \n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    \n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    watch = 4 * y\n    handbag = 20\n    child = y - 5\n    \n    # Original amount is 8y, and the remainder after spending on watch and handbag is given to 2 children\n    equation = Eq(8 * y, watch + handbag + 2 * child)\n    \n    value_of_y = solve(equation, y)\n    \n    return value_of_y[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    for year in range(1901, 2000):\n        if year % 4 == 0:\n            total_days += 366\n        else:\n            total_days += 365\n    total_days += 366  # Including the day of 1st January 2000\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    start_amount = 100\n    deposit = 10\n    spend = 8\n\n    # Calculate the number of complete cycles (deposit/spend pair is one cycle)\n    cycles = total_days // 2\n\n    # Calculate the amount after complete cycles\n    amount_after_cycles = start_amount + (deposit - spend) * cycles\n\n    # Check if there is an extra day after complete cycles (odd number of days)\n    if total_days % 2 == 1:\n        # Include the deposit for the extra day\n        amount_after_cycles += deposit\n\n    return amount_after_cycles\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 3 != 0 and num % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # Arithmetic sequence: 1, 2, 3, ..., 12\n    n = 12  # Number of terms in the sequence (hours in a clock)\n    a1 = 1  # First term of the sequence (1 strike)\n    an = n  # Last term of the sequence (12 strikes)\n    \n    # Sum of an arithmetic sequence formula: Sn = n/2 * (a1 + an)\n    total_strikes = n/2 * (a1 + an)\n    \n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # Weight of one ten-pence coin\n    total_coins = 40 / 10  # Number of ten-pence coins in 40 pence\n    total_weight = weight_per_coin * total_coins  # Total weight of all coins\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let the number of buttons James has be x.\n    # Then Nina has 22 - x buttons.\n    # After Nina gives 4 buttons to James, they each have:\n    # James: x + 4 buttons\n    # Nina: (22 - x) - 4 buttons\n    # They end up with the same number, so we can set up the equation:\n    # x + 4 = (22 - x) - 4\n\n    nina_buttons_original = (22 + 4) // 2\n    return nina_buttons_original\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n    \n    # Let's assume Valerie answered x questions correctly and (6-x) incorrectly.\n    # She gains 5x marks from correct answers and loses 2(6-x) from wrong ones.\n    # According to the problem, her total score is 23\n    # The equation is: 5x - 2(6-x) = 23 \n    \n    for x in range(total_questions + 1):\n        if 5*x - 2*(total_questions - x) == 23:\n            return x\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) / ratio_sum\n\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # in meters per second\n    angle_degrees = 37  # angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle from degrees to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Calculate the height using the kinematic equation: (v^2 - u^2) / (2 * a) = s\n    # where v = final velocity (0 at the highest point), \n    # u = initial velocity (initial_speed),\n    # a = acceleration due to gravity (g) projected along the ramp,\n    # s is the height along the ramp.\n    # Since the box stops at the highest point, its final velocity (v) = 0\n    # The acceleration component along the ramp is g * sin(angle)\n    height = (initial_speed ** 2) / (2 * g * math.sin(angle_radians))\n\n    # The distance along the ramp can be calculated using the trigonometric relation:\n    # height = distance_along_ramp * sin(angle)\n    distance_along_ramp = height / math.sin(angle_radians)\n\n    return height, distance_along_ramp\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    first_recipient_seat = 3\n    num_children = 9\n\n    # Since the first candy is given to child no. 3, we subtract 2 from the total to align with 0-based counting\n    last_recipient_seat = (total_candies - 1 + first_recipient_seat) % num_children\n    \n    return last_recipient_seat if last_recipient_seat != 0 else num_children\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    return sum([9, 12, 17, 18, 21, 23])\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Worst case scenario: she picks all balls of the first two colors and then one more\n    balls_needed = 5 + 4 + 1\n    return balls_needed\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    num_players = 64\n    players_per_match = 4\n\n    matches = 0\n    while num_players > 1:\n        matches += num_players // players_per_match\n        num_players = num_players // players_per_match\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * (24 // 2)\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    return sum(numbers)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "Input:\n{\"queId\": \"example3\", \"problem\": \"3人$$3$$天喝了$$3$$桶水，照这样的速度，$$9$$个人$$9$$天喝了多少桶水？\"}\nOutput:\n{\"queId\": \"example3\", \"problem\": \"3人$$3$$天喝了$$3$$桶水，照这样的速度，$$9$$个人$$9$$天喝了多少桶水？\", \"trans_problem\": \"If 3 people drink $$3$$ barrels of water in $$3$$ days, how many barrels of water would $$9$$ people drink in $$9$$ days at the same rate?\"}"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / number_of_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # We know the sum of an arithmetic sequence can be calculated by the formula S_n = n/2 * (a_1 + a_n),\n    # where S_n is the sum of the first n terms, a_1 is the first term, and a_n is the nth term.\n    # However, since we do not have a_1 or a_n, we will use another form of the formula that \n    # involves the first term and the common difference d: S_n = n/2 * (2a_1 + (n-1)d).\n\n    # Given the sum of first 9 terms (S_9) is 72, and sum of first 23 terms (S_23) is 736,\n    # we can set up the following equations:\n    # S_9 = 9/2 * (2a_1 + 8d) = 72\n    # S_23 = 23/2 * (2a_1 + 22d) = 736\n\n    # From S_9, we can express 2a_1 as follows:\n    # 2a_1 = (S_9 * 2 / 9) - 8d\n    # Then replace in S_23 and solve for d:\n\n    S_9 = 72\n    S_23 = 736\n    n_9 = 9\n    n_23 = 23\n\n    # 2a_1 = (S_9 * 2 / n_9) - 8d\n    # S_23 = n_23/2 * ((S_9 * 2 / n_9) + 22d) = 736\n    # Now we solve for d:\n\n    from sympy import symbols, Eq, solve\n\n    a_1, d = symbols('a_1 d')\n    equation1 = Eq((S_9 * 2 / n_9) - 8 * d, 2 * a_1)\n    equation2 = Eq(n_23/2 * ((S_9 * 2 / n_9) + (n_23 - 1) * d), S_23)\n\n    # Solve the equations to find a_1 and d\n    solutions = solve((equation1, equation2), (a_1, d))\n    a_1_value = solutions[a_1]\n    d_value = solutions[d]\n\n    # Now we can use these values to find the sum of the first 16 terms (S_16)\n    n_16 = 16\n    S_16 = n_16/2 * (2 * a_1_value + (n_16 - 1) * d_value)\n\n    return S_16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "Input:\n{\"queId\": \"unspecified\", \"problem\": \"甲、乙、丙三人沿环形林荫道行走，同时从同一地点出发，甲、乙按顺时针方向行走，丙按逆时针方向行走．已知甲每小时行$$7$$千米，乙每小时行$$5$$千米，$$1$$小时后甲、丙二人相遇，又过了$$ \\frac{1}{6}$$分钟，丙与乙相遇，问甲、丙相遇时丙行了多少千米？\"}\nOutput:\n{\"queId\": \"unspecified\", \"problem\": \"甲、乙、丙三人沿环形林荫道行走，同时从同一地点出发，甲、乙按顺时针方向行走，丙按逆时针方向行走．已知甲每小时行$$7$$千米，乙每小时行$$5$$千米，$$1$$小时后甲、丙二人相遇，又过了$$ \\frac{1}{6}$$分钟，丙与乙相遇，问甲、丙相遇时丙行了多少千米？\", \"trans_problem\": \"Jia, Yi, and Bing are walking along a circular shaded path and start from the same point at the same time. Jia and Yi walk in a clockwise direction, while Bing walks in a counterclockwise direction. It is known that Jia covers $$7$$ kilometers per hour and Yi covers $$5$$ kilometers per hour. One hour after starting, Jia and Bing meet. After another $$\\frac{1}{6}$$ minute, Bing meets Yi. How many kilometers has Bing walked when he meets Jia?\"}"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # List of squares up to a reasonable limit (since a human's age is limited)\n    squares = [x**2 for x in range(1, 100) if x**2 < 130]\n\n    # List of cubes up to a reasonable limit\n    cubes = [x**3 for x in range(1, 50) if x**3 < 130+12]\n\n    # Iterate through squares checking given conditions\n    for age_square in squares:\n        age_now = age_square + 3\n        if isprime(age_now + 1) and (age_now + 12) in cubes:\n            ans = age_now\n            break\n\n    return ans\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Since Bart wants two M&Ms of different colors without looking,\n    # he may end up picking the maximum number of chips of any one color before getting two distinct colors.\n    # There are 3 red, 4 yellow, and 5 brown M&Ms.\n    \n    # So he picks all red ones: 3 picks\n    # Then he picks all yellow ones: 4 picks\n    # At this point, no matter what he picks next, he will have two different colors.\n    # So the smallest number needed = red + yellow = 3 + 4 = 7 picks\n\n    ans = 3 + 4\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "Input:\n{\"queId\": \"unknown\", \"problem\": \"少年宫艺术团两个节目组共有$$65$$人参赛，从甲节目组中派$$7$$人到乙节目组去之后，甲节目组人数还比乙节目组人数多$$7$$人．则甲节目组有多少人？\"}\nOutput:\n{\"queId\": \"unknown\", \"problem\": \"少年宫艺术团两个节目组共有$$65$$人参赛，从甲节目组中派$$7$$人到乙节目组去之后，甲节目组人数还比乙节目组人数多$$7$$人．则甲节目组有多少人？\", \"trans_problem\": \"The youth arts troupe is divided into two performance groups with a total of $$65$$ participants. After dispatching $$7$$ people from group A to group B, group A still has $$7$$ more people than group B. How many people are in group A?\"}"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # Let's define the equation 2⋁(x⋁4)=59 using the defined operation\n    # Firstly, we have to define the inside operation x⋁4\n\n    # We will find x by plugging in values or using algebraic manipulation\n    # First we need to understand that 2⋁y = 59 can be rewritten as 2 * y + 2 + y = 59\n    # Which simplifies to 3y + 2 = 59, thus y = (59 - 2) / 3\n    y = (59 - 2) / 3\n\n    # Once we have y, we need to solve for x from x⋁4 = y\n    # We can rewrite x⋁4 as x * 4 + x + 4 = y\n    # Hence, x = (y - 4) / (4 + 1)\n    x = (y - 4) / (4 + 1)\n    \n    return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    repeats = 43 // len(pattern)\n    remainder = 43 % len(pattern)\n    total_sum = sum(int(digit) for digit in pattern) * repeats + sum(int(digit) for digit in pattern[:remainder])\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    num_quizzes = 4\n    time_per_quiz_hours = time_per_quiz_minutes / 60\n\n    total_time_hours = time_per_quiz_hours * num_quizzes\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000  # 1 kilometre is 100000 centimetres\n    return km_to_cm\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_traveled_before_turning_back = 40 / 60\n    \n    # Calculate the distance traveled by Samuel before turning back\n    distance_traveled_by_samuel = 66 * time_traveled_before_turning_back\n    \n    # Since they reached Town Y at the same time and Samuel turned back, \n    # Samuel would have covered the extra 2 * distance_traveled_by_samuel in the same time\n    # it took Shafur to travel from the point of U-turn to Town Y.\n    # This extra time for Samuel is the time Shafur takes to reach Town Y from the point of U-turn\n    # Hence we calculate the time for Shafur to travel that extra distance at his speed\n\n    time_for_shafur_to_travel_extra_distance = (2 * distance_traveled_by_samuel) / 54\n\n    # The total time taken by Shafur to reach Town Y is the time he traveled until Samuel turned back\n    # plus the extra time he continued traveling alone\n    total_time_for_shafur = time_traveled_before_turning_back + time_for_shafur_to_travel_extra_distance\n\n    # Now we can calculate the total distance to Town Y \n    # which is the time Shafur traveled in total times his speed.\n    total_distance_to_town_y = total_time_for_shafur * 54\n\n    return total_distance_to_town_y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    x = symbols('x')\n    equation = Eq(sum([age + x for age in grandsons_ages]), grandpa_age + x)\n    answer = solve(equation, x)\n    return answer[0]\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair_price, table_price = symbols('chair_price table_price')\n    \n    equation1 = Eq(table_price, 3 * chair_price)\n    equation2 = Eq(4 * table_price + 9 * chair_price, 504)\n    \n    solutions = solve((equation1, equation2), (chair_price, table_price))\n    \n    return solutions[chair_price]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    term = first_term\n    count = 0\n\n    while term > 0:\n        term += difference\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return i\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity = 9\n\n    vases_needed = (flowers + capacity - 1) // capacity\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n\n    difference = morning_fruit - afternoon_fruit\n\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)))  # First multiple of 3 greater than or equal to 38\n    last_multiple = 81 - (81 % 3)  # Last multiple of 3 less than or equal to 81\n\n    if first_multiple > last_multiple:  # In case there are no such multiples\n        return 0\n\n    num_multiples = ((last_multiple - first_multiple) // 3) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first part of the sequence from 3 to 10\n    sum_to_10 = sum(range(3, 11))\n\n    # Calculate the sum of the second part of the sequence from 10 to 3\n    sum_from_10 = sum(range(10, 2, -1))\n\n    # The total sum is the sum of both parts\n    total_sum = sum_to_10 + sum_from_10\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "{\n  \"queId\": \"unknown\", \n  \"problem\": \"小艾从甲地行到乙地、小贝从乙地行到甲地．两人同时出发相向而行．经过$$25$$分钟后相遇，相遇后两人继续前进，再经通$$14$$分钟后小艾与乙地相距$$600$$米，小贝与甲地相距$$500$$米．那么甲、乙两地相距多少米？ Amy traveled from $$A$$ to $$B$$, and Bella traveled from $$B$$ to $$A$$. They departed at the same time, $$25$$ minutes later, they met, and then continued to move forward. $$14$$ more minutes later, Amy was at a point $$600$$ metres away from $$B$$, and Bella was at a point $$500$$ metres away from $$A$$. What was the distance between $$A$$ and $$B$$ in metres?\",\n  \"trans_problem\": \"Amy set out from point $$A$$ towards point $$B$$, and Bella from point $$B$$ towards point $$A$$. They started at the same time and met after $$25$$ minutes. After the meeting, they continued their journeys. $$14$$ minutes later, Amy was $$600$$ meters away from point $$B$$, and Bella was $$500$$ meters away from point $$A$$. What is the distance between point $$A$$ and point $$B$$ in meters?\"\n}"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones_after_january = (78 + 13) * 2\n    original_phones = (remaining_phones_after_january + 22) * 2\n    return original_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "Input:\n{\"queId\": \"example3\", \"problem\": \"五位数$$\\overline{53C84}$$能被$$11$$整除，求$$C$$的值．\"}\nOutput:\n{\"queId\": \"example3\", \"problem\": \"五位数$$\\overline{53C84}$$能被$$11$$整除，求$$C$$的值．\", \"trans_problem\": \"The five-digit number $$\\overline{53C84}$$ is divisible by $$11$$. Find the value of $$C$$.\"}"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, getcontext\n\n    # Set precision for Decimal calculations\n    getcontext().prec = 9\n\n    # 7 divided by -3.3 recurring (which is -10/3 as a fraction)\n    first_term = Fraction(7, 1) / Fraction(-10, 3)\n\n    # Cube root of -0.027 (which is -1/3 as a fraction)\n    second_term = Fraction(-1, 3)\n\n    # Fraction division\n    first_expression = first_term / second_term\n\n    # 2^3 divided by 4^2 (which is 8/16 as a fraction)\n    third_term = Fraction(2**3, 1) / Fraction(4**2, 1)\n\n    # 0.125 multiplied by (1.8 - (0.2 * 7)) (which is 1/8 * (9/5 - 7/5))\n    fourth_term = Fraction(1, 8) * (Fraction(9, 5) - Fraction(7, 5))\n\n    # Fraction division\n    second_expression = third_term / fourth_term\n\n    # 0.1 divided by 0.142857 recurring (0.1 / (1/7))\n    fifth_term = Fraction(1, 10) / Fraction(1, 7)\n\n    # 2 times 0.3 (which is 2/1 * 3/10 as a fraction)\n    sixth_term = Fraction(2, 1) * Fraction(3, 10)\n\n    # Final expression subtraction\n    third_expression = fifth_term + sixth_term\n\n    # Combine all expressions\n    ans = first_expression + second_expression - third_expression\n\n    # Convert resulting fraction to float and return\n    return float(ans)\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    difference = 50\n\n    # Let x be the number of pencils.\n    # Then, number of pens would be x + 50.\n    # x + (x + 50) = total_items\n    # 2x + 50 = total_items\n    # 2x = total_items - 50\n    # x = (total_items - 50) / 2\n\n    pencils = (total_items - difference) // 2\n\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Total spend from January to April\n    jan_to_apr_total = 500 * 4\n    # Total spend from May to July\n    may_to_jul_total = 300 * 3\n    # Total spend from August to September (already given as a total)\n    aug_to_sep_total = 400\n    # Total spend from October to December\n    oct_to_dec_total = 300 * 3\n    \n    # Total spend for the whole year\n    total_spend_year = jan_to_apr_total + may_to_jul_total + aug_to_sep_total + oct_to_dec_total\n    \n    # Average spend per month over the entire year\n    avg_spend_per_month = total_spend_year / 12\n\n    return avg_spend_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    extra_apples = 16\n\n    total_apples = (boxes * apples_per_box) + extra_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    return (70 * 4) - 15\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 51):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, there will always be exactly one game\n    # per player who gets eliminated. To determine a single winner among\n    # 5 people, 4 people must be eliminated. Thus, there will be 4 games.\n    \n    games = 4\n\n    return games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the variables\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # define the equations based on the problem\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(betsy + 15, charlene - 15)\n    after_betsy_gives = Eq(anna + 8, betsy - 8)\n    ratio = Eq(anna/betsy, 2/5) & Eq(betsy/charlene, 5/7)\n\n    # solve the equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, ratio), (anna, betsy, charlene))\n\n    # extract the solution for betsy\n    return solutions[betsy]\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import divisors\n\ndef solution():\n    # Prime factorization of 2016 = 2^5 * 3^2 * 7\n    factors = divisors(2016)\n    \n    # Find combinations of four divisors whose product is 2016 and are all under 10\n    for a in factors:\n        for b in factors:\n            for c in factors:\n                d = 2016 // (a * b * c)\n                if a < b < c < d < 10 and a * b * c * d == 2016:\n                    return a + b + c + d\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_front = 7\n    from_back = 4\n    from_left = 3\n    from_right = 7\n\n    rows = from_front + from_back - 1\n    columns = from_left + from_right - 1\n\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_p = symbols('ten_p')\n\n    twenty_p = 2 * ten_p\n    five_p = ten_p / 2\n\n    equation = Eq(5 * five_p + 10 * ten_p + 20 * twenty_p, 1575)\n\n    ten_p_value = solve(equation, ten_p)[0]\n    twenty_p_value = 2 * ten_p_value\n\n    return twenty_p_value\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term_value = 140\n    nth_term_position = 12\n\n    common_difference = (nth_term_value - first_term) / (nth_term_position - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 1)\n    equation2 = Eq(girls - 1, (boys / 2) - 1)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is current year (2023)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) / difference) + 1\n\n    return int(num_students)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_num = 96\n    base6_num = \"\"\n    while base10_num > 0:\n        digit = base10_num % 6\n        base6_num = str(digit) + base6_num\n        base10_num //= 6\n    return base6_num\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "{\n  \"queId\": \"UNSPECIFIED\",\n  \"problem\": \"求首$$10000$$个$$3$$的倍数的和除以$$7$$的余数．\",\n  \"trans_problem\": \"Find the remainder when the sum of the first $$10000$$ multiples of $$3$$ is divided by $$7$$.\"\n}"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    # Initialize variables for the current height and the day counter\n    current_height = 0\n    day = 0\n\n    # Continue as long as the snail hasn't climbed out of the well\n    while current_height < 10:\n        day += 1                 # Increment the day count\n        current_height += 4      # Snail climbs up during the day\n        if current_height >= 10: # Check if the snail has climbed out\n            break\n        current_height -= 2      # Snail slides down during the night\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # The player who starts can always win by taking a number of marbles that leaves a multiple of 4 to the second player\n    # In this way, no matter how many marbles the second player takes (1, 2, or 3),\n    # the first player can always take a number of marbles to bring the total left back down to a multiple of 4.\n    # We will calculate the number of marbles to leave 24 marbles for Belinda, which is a multiple of 4.\n    total_marbles = 26\n    marbles_to_leave = 24  # This is the closest multiple of 4 less than 26.\n    marbles_to_take = total_marbles - marbles_to_leave\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for the variable\n    \n    # Since the trips for all 30 minute intervals sum up to 70 miles, create an equation that reflects that\n    equation = Eq((x / 2) * 0.5 + ((x - 20) / 2) * 0.5 + ((x + 10) / 2) * 0.5, 70)\n    \n    # Solve the equation for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed = 4 + 2\n    combined_age_in_2_years = combined_age_4_years_ago + (2 * years_passed)\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 0.10\n    note_amount = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    tip_amount = total_cost * tip_percentage\n    total_payment = total_cost + tip_amount\n    change_received = note_amount - total_payment\n\n    return change_received\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for a in range(1, 25):\n        for b in range(a+1, 25):\n            for c in range(b+1, 25):\n                for d in range(c+1, 25):\n                    for e in range(d+1, 25):\n                        for f in range(e+1, 25):\n                            for g in range(f+1, 25):\n                                if a+b+c+d+e+f+g == 25:\n                                    ways.append((a, b, c, d, e, f, g))\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic chooses one of the three bars at random,\n    # the probability of the alcoholic being at any given bar is 1/3.\n    # If the alcoholic is not at two of the bars, they must be at the third bar.\n    # Therefore, the probability is 100%.\n\n    probability = 1  # The probability is certain (100% or 1)\n\n    return probability\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "{\n\"queId\": \"your_que_id_here\",\n\"problem\": \"(3分）一件工作甲先做$$6$$小时，乙接着做$$12$$小时可以完成；甲先做$$8$$小时，乙接着做$$6$$小时也可以完成．如果甲做$$3$$小时后由乙接着做，还需要~\\uline{~~~~~~~~~~}~小时完成．\",\n\"trans_problem\": \"Person A works for $$6$$ hours followed by person B working for $$12$$ hours to complete a job. Alternatively, person A works for $$8$$ hours followed by person B working for $$6$$ hours to also complete the job. If person A works for $$3$$ hours and then is followed by person B, determine the amount of time in hours that person B still needs to work to complete the job.\"\n}"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Let's call x the number of cows that the pasture can sustain for 6 weeks.\n\n    # Using the formula for Newton's Problem of Cows and Fields:\n    # cow_1 * time_1 = cow_2 * time_2 = cow_x * time_x\n    # We can get two equations as follows:\n    # 120 cows * 12 weeks = 150 cows * 8 weeks = x cows * 6 weeks\n\n    # Now we express the constant k (total amount of grass the field can produce in a week) in terms of x:\n    # k = 120 cows * 12 weeks\n    # k = 150 cows * 8 weeks\n    # k = x cows * 6 weeks\n\n    # Since all expressions equal k, we can write the equation:\n    # 120 * 12 = 150 * 8 = x * 6\n    equation = Eq(120 * 12, x * 6)\n\n    # Solving for x:\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for pencil and marker\n    pencil, marker = symbols('pencil marker')\n\n    # Given equations\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    # Calculate total cost for 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let x be the number of volunteers\n    # Let y be the total number of trees\n    \n    # Based on the problem:\n    # if each plants 4 trees, 5 trees are left: 4*x + 5 = y\n    # if each plants 7 trees, we are short of 1 volunteer: 7*(x-1) = y\n    \n    # From the above equations, we can solve for x and y\n    x = 1\n    while True:\n        y = 4*x + 5\n        if 7*(x-1) == y:\n            break\n        x += 1\n    \n    # Now we have x number of volunteers and y number of trees\n    volunteers = x\n    trees = y\n    return volunteers, trees\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Let the side of the square that has boys be b and the side of the square that has girls be g.\n    # Since there is an alternating pattern of boys and girls, b = g + 2; (b^2 - g^2) = number of boys - number of girls = 55.\n    # Expanding the equation: b^2 - (b - 2)^2 = 55 => b^2 - (b^2 - 4b + 4) = 55 => 4b - 4 = 55.\n    # Solving for b: 4b = 59 => b = 59 / 4.\n    # b has to be an integer, so we need to test values of b that are multiples of 4 plus 1 (since the array is odd by odd dimensions).\n    \n    b = 1  # starting with the smallest odd integer side possible for the boy's layer\n    while True:\n        boys = b * b\n        girls = (b - 2) * (b - 2)  # girls' layer is one less on each side than boys'\n        if boys - girls == 55:\n            break  # we found the correct dimensions\n        b += 2  # increment the side of the boys' layer by 2 to maintain it as an odd number\n    \n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    original_mass = 60 / remaining_fraction\n\n    return original_mass\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    packets_needed = -(-children // bars_per_packet)  # ceiling division\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    ans = 5 / 100 * 180\n    return ans\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    total = 0\n    for i in range(15, 1, -4):\n        total += (i + 2) - (i)\n    return total\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a and b be the number of stickers in Bag A and Bag B originally\n    a, b = symbols('a b')\n\n    # Equation representing the total stickers initially\n    equation1 = Eq(a + b, 270)\n    \n    # After moving 56 stickers from A to B, A has (a - 56) and B has (b + 56)\n    # Equation representing the ratio after moving the stickers\n    equation2 = Eq((b + 56) / (a - 56), 3/2)\n\n    # Solve the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # solutions[a] will be the number of stickers in Bag A originally\n    return solutions[a]\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    term_value = 25\n    common_difference = 28 - 25\n\n    first_term = term_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    boxes_needed = (total_cakes + cakes_per_box - 1) // cakes_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "Input:\n{\"queId\": \"example3\", \"problem\": \"甲、乙、丙三人各有一些糖；如果甲的糖变为原来的一半，乙给丙$$18$$颗，那么三人的糖数一样多；如果丙的糖数变为原来的$$2$$倍，甲给乙一些糖，三人的糖数也能一样多，那么甲给了乙多少颗糖？ \"}\nOutput:\n{\"queId\": \"example3\", \"problem\": \"甲、乙、丙三人各有一些糖；如果甲的糖变为原来的一半，乙给丙$$18$$颗，那么三人的糖数一样多；如果丙的糖数变为原来的$$2$$倍，甲给乙一些糖，三人的糖数也能一样多，那么甲给了乙多少颗糖？ \", \"trans_problem\": \"Person A, B, and C each have some candies. If A's candies are reduced to half, and B gives C $$18$$ candies, then all three of them have an equal number of candies. If C's number of candies is doubled, and A gives some candies to B, making all three persons have the same number of candies again, how many candies does A give to B?\"}"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had $3998 muffins altogether.\n    equation1 = Eq(lovelle + makayla, 3998)\n\n    # After Lovelle sold 462 muffins and Makayla sold 2/5 of her muffins,\n    # Lovelle and Makayla had an equal number of muffins left.\n    equation2 = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "{\n  \"queId\": \"unique_question_id\",\n  \"problem\": \"将$$x$$的整数部分记为$$\\left[ x \\right]$$,x的小数部分记为$$\\left { x \\right }$$，易知$$x=\\left[ x \\right]+\\left { x \\right }\\left( 0 ~\\\\textless{} ~\\left { x \\right } ~\\\\textless{} ~1 \\right)$$．若$$x=\\sqrt{3-\\sqrt{5}}-\\sqrt{3+\\sqrt{5}}$$，那么$$\\left[ x \\right]$$等于~\\\\uline{~~~~~~~~~~}~．\",\n  \"trans_problem\": \"Let the integer part of $$x$$ be denoted by $$\\\\left[x\\\\right]$$ and the fractional part of $$x$$ be denoted by $$\\\\left\\\\{ x \\\\right\\\\}$$, knowing that $$x=\\\\left[x\\\\right]+\\\\left\\\\{x\\\\right\\\\}$$ (where $$0 < \\\\left\\\\{ x \\\\right\\\\} < 1$$). If $$x=\\\\sqrt{3-\\\\sqrt{5}}-\\\\sqrt{3+\\\\sqrt{5}}$$, what is the value of $$\\\\left[x\\\\right]$$?\"\n}"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    cost_book = (1/4) * total_money\n    cost_bag = (2/7) * total_money\n    total_cost = 225\n\n    equation = Eq(cost_book + cost_bag, total_cost)\n\n    solved = solve(equation, total_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    max_number = 30\n    count = 0\n\n    for i in range(1, max_number):\n        count += 1\n        max_number -= i\n\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # To ensure that there are 10 cards of the same color,\n    # the dealer must select 10 - 1 cards from each of the other 3 colors\n    # to ensure that, even in the worst-case scenario, the next card will make 10 of one color.\n    \n    # Worst case scenario: 9 from each of the three smallest piles and all from the largest.\n    must_select = (9 * 3) + 16\n    \n    return must_select\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n    total_gaps = num_daffodils - 1  # because there's no gap after the last daffodil\n\n    length_of_row = (total_gaps * gap_between_daffodils) + 0  # adding the width of the first and last daffodil, which is negligible\n    \n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n\n    length_per_piece = ribbon_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 6\n    last_term = 41\n    next_term = last_term + common_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # since the boxes are identical, we only need to consider different distributions\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # x2 must be greater than x1\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # x3 must be the greatest\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    jane_drinks = total_juice / (1 + 1.5)\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_minutes = distance / speed\n    return correct_minutes\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    boys = 7\n    girls = 5\n    group_size = 4\n    all_combinations = comb(boys + girls, group_size)\n    no_boys_combinations = comb(girls, group_size)\n    at_least_one_boy_combinations = all_combinations - no_boys_combinations\n    return at_least_one_boy_combinations\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    number_of_friends = 6\n    \n    pears_per_friend = total_pears // number_of_friends\n    strawberries_per_friend = total_strawberries // number_of_friends\n    chocolates_per_friend = total_chocolates // number_of_friends\n    \n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let x be the total amount of money Bud had at first.\n    # After spending 1/4 of it on a book, she had 3/4 of the money left\n    # Then, spending 2/5 of the remaining money on a bag, which cost £60.\n    # This means (3/4)*(2/5)*x = 60\n    # Simplify the equation to find x:\n    # x = (60 * 5/2) / (3/4)\n    # x = (60 * 5 * 4) / (2 * 3)\n    x = (60 * 5 * 4) / (2 * 3)\n    return x\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits = 0\n    pages = 0\n    while digits < 157:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1 if digits != 157 else pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate through odd numbers between 201 and 241\n        if num % 3 == 0 and num % 7 == 0:  # Check if the number is divisible by both 3 and 7\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    calculation = (70 / 7 - 7) * 13\n    return calculation\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Number of intervals between peach trees\n    peach_intervals = 41 - 1\n    # Total length of the stretch of the road covered by the peach trees\n    total_length = peach_intervals * 3\n    # Number of lamp post intervals for the given length\n    lamp_intervals = total_length // 8\n    # Total number of lamp posts is one more than the number of intervals\n    num_lamp_posts = lamp_intervals + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 73):\n        if 72 % unit_price == 0:\n            total_price = unit_price * 72\n            if str(total_price)[1:4] == '679':\n                return unit_price\n    return None\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # meters\n    speed = 40  # meters per second\n\n    # Time taken to pass a pole is the length of the train divided by the speed.\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    plants = intervals + 1\n    return plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_cost = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        # Rabbits reproduce\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits\n        initial_rabbits //= 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1  # sum of distances travelled at each speed\n    time_at_60_mph = 1 / 60  # time to travel 1 mile at 60 mph\n    time_at_30_mph = 1 / 30  # time to travel 1 mile at 30 mph\n    total_time = time_at_60_mph + time_at_30_mph  # sum of times at each speed\n    average_speed = total_distance / total_time  # average speed formula\n\n    return average_speed\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let classB represents the number of students in class B\n    classB = symbols('classB')\n    \n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # Considering class A student count is twice of class B, so\n    # 4 * (2 * classB) - 20 is needed\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # 6 * classB + 16 is the current number of candies\n    # Equating the two expressions will give the number of candies Jenny has.\n    equation = Eq(4 * (2 * classB) - 20, 6 * classB + 16)\n    \n    # Solve the equation to find the number of students in class B\n    students_classB = solve(equation, classB)[0]\n    \n    # Calculate the number of candies:\n    # From \"If each student in class B can get 6 candies, there will be 16 candies left.\"\n    candies = 6 * students_classB + 16\n    \n    return candies\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target = 12\n    number_of_washes = (target // amount_per_wash) + 1\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    day = 4\n    candies_eaten = initial_candies * (2 ** (day - 1))\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n    \n    # since one angle is a right angle, sum of the other two is 90\n    equation1 = Eq(angle1 + angle2, 90)\n    # one angle is two times the other\n    equation2 = Eq(angle1, 2 * angle2)\n\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    return max(solutions[angle1], solutions[angle2])\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    # Loop through potential values for P and I since they are digits (0-9)\n    for P in range(1, 10):  # P cannot be 0 since it's the first digit\n        for I in range(10):  # I can be 0 to 9\n            # Form the numbers PI and IS based on P and I values\n            PI = int(f\"{P}{I}\")\n            IS = int(f\"{I}{P}\")\n            # Check the condition given in the problem\n            if 4 * IS == PI:\n                return PI\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_mon_sat = 3 * 6\n    total_sunshine_sunday = 10\n    total_sunshine_whole_week = total_sunshine_mon_sat + total_sunshine_sunday\n    average_sunshine_whole_week = total_sunshine_whole_week / 7\n\n    return average_sunshine_whole_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n\n    walking_time_full = 24  # minutes\n    distance_to_school = walking_speed * walking_time_full  # m\n\n    half_distance = distance_to_school / 2\n\n    walking_time_half = half_distance / walking_speed  # minutes\n    running_time_half = half_distance / running_speed  # minutes\n\n    total_time = walking_time_half + running_time_half  # minutes\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # Total number of intervals is the number of trees plus one\n    total_intervals = 79 + 1\n    # Length of the road is 320m\n    road_length = 320\n    # Distance between each tree is the road length divided by the number of intervals\n    distance_between_trees = road_length / total_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        ""
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Sum of the arithmetic sequence is given by (n / 2) * (first term + last term)\n    # We know the sum is 765, and n (number of terms) is 9 (since there are 9 members)\n    # We can set up the equation 765 = (9 / 2) * (first term + last term)\n    # This simplifies to first term + last term = 170\n    # Since the numbers are consecutive, last term = first term + 8\n    # Substituting this into the equation we get first term + (first term + 8) = 170\n    # 2 * first term + 8 = 170\n    # 2 * first term = 162\n    # first term = 81\n    # So the ages are 81, 82, ..., 89\n    # The middle member's age (the 5th term) is then the average of the first and last term\n    # which is also the middle term\n\n    first_term = 81  # this is found by solving the equation\n    middle_member_age = first_term + 4  # since it's the fifth term in a sequence starting at 81\n\n    return middle_member_age\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 50 / 100\n    girls_saw_movie = girls * 60 / 100\n    total_pupils_saw_movie = boys_saw_movie + girls_saw_movie\n    return total_pupils_saw_movie\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equations = []\n\n    # Given: When the number x divides 290, the remainder is a.\n    # This means 290 = kx + a for some integer k.\n    equations.append(Eq(290 % a, a))\n\n    # Given: When x divides 235, the remainder is a + 2.\n    # This means 235 = lx + (a + 2) for some integer l.\n    equations.append(Eq(235 % (a+2), a))\n\n    # Given: When x divides 200, the remainder is a + 5.\n    # This means 200 = mx + (a + 5) for some integer m.\n    equations.append(Eq(200 % (a+5), a))\n\n    # Since we're seeking the natural number greater than 1 that gives these remainders,\n    # we solve the system of modular equations.\n    solutions = solve(equations, a)\n    \n    # Filter out non-natural and non-greater than 1 solutions\n    valid_solutions = [sol for sol in solutions if sol.is_integer and sol > 1]\n\n    # Since a should be less than the natural number we're seeking and based on the \n    # given remainders, the number we're seeking should be max(290-a, 235-(a+2), 200-(a+5)).\n    natural_number = max(290 - valid_solutions[0], 235 - (valid_solutions[0] + 2), 200 - (valid_solutions[0] + 5))\n\n    return natural_number\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let kim_savings be the total savings Kim originally had\n    kim_savings = symbols('kim_savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    given_to_mother = kim_savings / 3\n\n    # She spent a certain amount on dresses and earrings\n    spent_on_clothes_earrings = 177 + 129\n\n    # The amount of money left is 1/2 of what she gave her mother\n    money_left = given_to_mother / 2\n\n    # Equation: kim_savings is equal to the amount she gave to her mother, the amount she spent, and the amount left\n    equation = Eq(kim_savings, given_to_mother + spent_on_clothes_earrings + money_left)\n\n    # Solve for kim_savings\n    savings = solve(equation, kim_savings)\n\n    return savings[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Approach: stars and bars method (combinatorics)\n    # We can think of this problem as placing 2 bars in between 6 apples (which are stars) to create 3 sections (baskets)\n    # For example, **|***|* would represent 2 apples in the 1st basket, 3 in the 2nd, and 1 in the 3rd.\n    # Since the baskets are identical, we only need to count unique distributions (e.g., **|**|** and **|**|** are the same)\n    # The generalized formula for placing k - 1 bars between n stars is C(n + k - 1, k - 1)\n    n = 6  # apples\n    k = 3  # baskets\n    return math.comb(n + k - 1, k - 1)\n\nimport math\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    length_per_piece = 15\n    \n    num_full_pieces = total_length // length_per_piece\n    leftover_length = total_length - (num_full_pieces * length_per_piece)\n\n    return leftover_length\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    fraction = 3 / 100\n\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    ans = sum(i for i in range(1, 2018) if 2018 % i == 11)\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    workers = 1  # Number of workers on the first day\n\n    for day in range(1, 10):  # From day 1 to day 9\n        total_skirts += workers * skirts_per_worker\n        workers += 1  # Each day a new worker joins\n\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    # Let c represent the number of cows and h represent the number of chickens\n    for c in range(9):  # The maximum number of cows can be 8, since there are 8 animals in total\n        h = 8 - c  # The rest would be chickens\n        if (c * 4 + h * 2) == 26:  # Cows have 4 legs and chickens have 2 legs\n            return h\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        ""
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # Given sequence: 11, 14, 17, 20, 23, 26\n    # Common difference (d) is 3\n    d = 3\n    # First term (a1) of the sequence is 11\n    a1 = 11\n    \n    # Create a set of numbers from 30 to 60 to check for sequence members\n    numbers_to_check = set(range(30, 61))\n    \n    # Initialize a set to hold the sequence numbers in the range\n    sequence_in_range = set()\n    \n    # Starting from the first term, generate the sequence terms until exceeding 60\n    term = a1\n    while term <= 60:\n        # If the term is within the range 30 to 60, add it to the sequence_in_range set\n        if term in numbers_to_check:\n            sequence_in_range.add(term)\n        # Go to the next term in the sequence\n        term += d\n    \n    # The answer is the set of sequence numbers\n    ans = sequence_in_range\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    current_number, total_digits, digits_in_number = 1, 0, 1\n    while True:\n        for i in range(10**(digits_in_number - 1), 10**digits_in_number):\n            total_digits += digits_in_number\n            if total_digits >= 2023:\n                index_in_number = digits_in_number - (total_digits - 2023) - 1\n                return int(str(i)[index_in_number])\n        digits_in_number += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    minimum_sweets_per_student = 5\n\n    # The class size has to be a divisor of the total number of sweets\n    # and each student has to get at least 5 sweets.\n    for class_size in range(total_sweets, 0, -1):\n        if total_sweets % class_size == 0 and (total_sweets // class_size) >= minimum_sweets_per_student:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve for price of one apple and one banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas using the price found\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas.evalf()\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    baseline_income = 50000\n    baseline_tax_rate = 0.08\n    additional_income = income - baseline_income\n\n    # Equation based on the problem description\n    tax_eq = Eq(baseline_income * baseline_tax_rate + additional_income * (baseline_tax_rate + T / 100), 15000)\n\n    # Solve for T\n    T_value = solve(tax_eq, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 24  # He answered all but one question\n    score_for_correct = 4\n    score_for_incorrect = -2  # Negative because he lost points\n    total_score = 66\n\n    # Let's use the system of linear equations to find the number of correct answers\n    # Let x be the number of correct answers and y be the number of incorrect answers\n    # Then we have the following equations:\n    # x + y = total_questions (because he answered all but one question)\n    # 4x - 2y = total_score (because for each correct answer, he gains 4 points and for each incorrect, he loses 2)\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * score_for_correct) + (incorrect_answers * score_for_incorrect)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    # By Pigeonhole Principle\n    boys_per_day = (total_boys // days_in_january) + 1\n    \n    return boys_per_day\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_space_between = 5 * (31 - 1) * 2\n    total_length = first_car_length + other_cars_length + total_space_between\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    seventh_term = 105\n    ninth_term = 135\n    term_difference = ninth_term - seventh_term\n    \n    # Calculate the common difference by dividing the difference between 9th and 7th terms by 2\n    common_difference = term_difference / 2\n    \n    # 100th term = 7th term + (100-7)*common_difference\n    hundredth_term = seventh_term + (100 - 7) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    remaining_chocolates = total_chocolates - chocolates_given_away\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "Output:\n{\n  \"queId\": \"unique_dummy_id\",\n  \"problem\": \"检修大桥，修了一个星期之后，已修和未修的比是$$1:7$$，第二个星期又修了$$500$$米，这时已修和未修的比是$$9:23$$，则该大桥全长是~\\\\uline{~~~~~~~~~~}~米．\",\n  \"trans_problem\": \"The repair of a bridge began, and after one week, the ratio of the completed to remaining sections was $$1:7$$. After another week, an additional $$500$$ meters were repaired. At this point, the ratio of the completed to remaining sections changed to $$9:23$$. Find the total length of the bridge in meters.\"\n}"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations(\"ABCDEFG\"):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n           perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = sarah_sweets * (total_ratio / sarah_ratio)\n\n    return total_sweets\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # The hundreds digit cannot be zero, so there are only two choices for the hundreds place (2 or 3)\n    hundreds_place_options = 2\n    \n    # For the tens place, we can choose from all three numbers, since it's okay if it's zero here\n    # But we cannot repeat the number chosen for the hundreds place, so there are 2 options left\n    tens_place_options = 2\n    \n    # For the units place, we have only one number left after choosing for hundreds and tens\n    units_place_options = 1\n    \n    # The total number of different three-digit numbers is the product of the options for each place\n    total_numbers = hundreds_place_options * tens_place_options * units_place_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    # Cost in pence\n    biscuits_cost_pence = 7 * 73\n    cakes_cost_pence = 9 * (113)\n\n    # Total cost in pence\n    total_cost_pence = biscuits_cost_pence + cakes_cost_pence\n\n    # Convert the total cost to pounds\n    total_cost_pounds = total_cost_pence / 100\n\n    # Amount paid in pounds\n    amount_paid = 20\n\n    # Change received\n    change_received = amount_paid - total_cost_pounds\n\n    return change_received\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    petrol_week1 = 27\n    petrol_week2 = 25\n    petrol_week3 = 30\n\n    total_petrol = petrol_week1 + petrol_week2 + petrol_week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n\n    combinations = tops * bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n    \n    home_arrival_time = lunch_end_time - (lunch_duration + tv_duration + play_duration)\n    \n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '2017'\n    count_3_digit = len(set(permutations(digits, 3)) - set(permutations('017', 3)))\n    count_4_digit = len(set(permutations(digits)))\n    return count_3_digit + count_4_digit\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3 * (x - 5) - 3 - 6\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x: Peter's initial number of stickers\n    # y: Sam's initial number of stickers\n    x, y = symbols('x y')\n    \n    # Sam had 40 stickers more than Peter: y = x + 40\n    equation1 = Eq(y, x + 40)\n\n    # Sam gave 20% of his stickers to Peter: y - 0.20 * y, Peter now has x + 0.20 * y\n    # Peter gave 25% of his stickers to Sam: x + 0.20 * y - 0.25 * (x + 0.20 * y), Sam now has y - 0.20 * y + 0.25 * (x + 0.20 * y)\n    # In the end, Sam had 96 stickers more than Peter:\n    # (y - 0.20 * y + 0.25 * (x + 0.20 * y)) - (x + 0.20 * y - 0.25 * (x + 0.20 * y)) = 96\n    equation2 = Eq((y - 0.20 * y + 0.25 * (x + 0.20 * y)) - (x + 0.20 * y - 0.25 * (x + 0.20 * y)), 96)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return Peter's initial number of stickers\n    return solutions[x]\n  \nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines(pages):\n        count = 0\n        for page in range(1, pages + 1):\n            count += str(page).count('9')\n        return count\n\n    pages = 0\n    while True:\n        pages += 1\n        if count_nines(pages) == 181:\n            break\n\n    return pages\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Yvonne bought 10 more than half of his initial crystals\n    yvonne_eq = Eq((initial_crystals / 2) + 10, initial_crystals - 35 - 14 - 20)\n\n    # Solve the equation\n    solutions = solve(yvonne_eq, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_count = 14\n    pattern_grey = 2\n\n    # Each full pattern cycle consists of the sequence black, white, white, grey, grey.\n    total_pattern_count = grey_count // pattern_grey\n\n    # Each full pattern has 5 rabbits, 1 black, 2 white, and 2 grey.\n    total_rabbits = total_pattern_count * 5\n\n    # If there are remaining grey rabbits not part of a full pattern, calculate extra rabbits needed\n    remaining_grey = grey_count % pattern_grey\n    if remaining_grey > 0:\n        # Add full pattern without the grey rabbits if there is a remaining grey rabbit\n        total_rabbits += (5 - pattern_grey)\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [0, 1, 5, 8]\n    perm = permutations(numbers, 3)  # Generate all permutations of length 3\n    three_digit_numbers = set(int(\"\".join(map(str, p))) for p in perm if p[0] != 0)  # Exclude numbers starting with 0\n\n    min_number = min(three_digit_numbers)\n    max_number = max(three_digit_numbers)\n    diff = max_number - min_number\n    \n    return diff\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    all_perms = list(permutations([1, 2, 3, 4], 4))\n    count = 0\n    for perm in all_perms:\n        if perm[-1] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = 0\n    num = 180\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 9 == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = f\"26{a}539\"\n        if sum(int(digit) for digit in number) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    future_value = principal * ((1 + rate) ** years)\n    \n    return future_value\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    total_stickers = 100\n    yi_yen_ratio = 4\n\n    equation = Eq(yi_yen, kyra * yi_yen_ratio)\n    total_equation = Eq(yi_yen + kyra, total_stickers)\n\n    solutions = solve((equation, total_equation), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # £2 = 200 pence\n    single_price = 12\n    triple_price = 30\n\n    max_triples = total_pence // triple_price\n    remaining_pence = total_pence % triple_price\n\n    additional_singles = remaining_pence // single_price\n\n    max_sweets = max_triples * 3 + additional_singles\n\n    return max_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_7 = 7  # May's age when she is 7\n    may_age_10 = 10  # May's age when she will be 10\n\n    # Define symbolic variables for Kenny's and his brother's current ages\n    kenny, brother = symbols('kenny brother')\n\n    # Equation for when May is 10 years old\n    equation_age_10 = Eq((kenny + 2 + brother) + 3 * may_age_10)\n\n    # Equation for the difference in age between Kenny and his brother\n    equation_difference = Eq(kenny, brother + 2)\n\n    # solve the system of equations\n    solutions = solve((equation_age_10, equation_difference), (kenny, brother))\n\n    # Kenny's current age - May's current age (7 years old)\n    kenny_current_age = solutions[kenny]\n    age_difference = kenny_current_age - may_age_7\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since we want at least 1 ball in each box, we start by placing one ball in each box.\n    # Now we have 10 - 7 = 3 balls left to distribute.\n    # This problem is equivalent to the \"stars and bars\" problem, where we need to distribute\n    # 3 identical objects (balls) into 7 distinct groups (boxes).\n    # The number of ways to do this is given by the combination formula:\n    # C(n + k - 1, k), where n is the number of balls to distribute, and k is the number of boxes.\n    # In this case, k = 7 and n = 3.\n\n    remaining_balls = 3\n    num_boxes = 7\n    ways_to_distribute = comb(remaining_balls + num_boxes - 1, remaining_balls)\n    return ways_to_distribute\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # 10 candies is a small enough number to manually evaluate the game states.\n\n    # Winning condition: the last move leaves 0 candies\n    win_states = [0]\n\n    # The game states from which a player can win by making a move\n    for i in range(1, 11):\n        # A win state is any position from which the player can move to a known win state\n        can_win = False\n        if i - 1 in win_states or i - 2 in win_states:\n            can_win = True\n        else:\n            can_win = False\n            \n        if can_win:\n            win_states.append(i)\n\n    # If 10 is not in win_states, then the first player is in a losing position if he makes the first move optimally\n    if 10 not in win_states:\n        return \"Second\"  # Felix should go second to ensure victory\n    else:\n        return \"First\"  # Felix should go first and maintain a strategy that leaves the opponent with 4 candies to ensure victory\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tank_capacity = symbols('tank_capacity')\n    equation1 = Eq(tank_capacity - 5, 4)\n    equation2 = Eq(3 * (4 + 1), tank_capacity)\n\n    solutions = solve((equation1, equation2), (tank_capacity,))\n\n    return solutions[tank_capacity]\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    single_pipe_length = 5\n    num_pipes = pipe_length // single_pipe_length\n    \n    # Check if there is a need for an additional pipe in case there's a remainder\n    if pipe_length % single_pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "{\n\"queId\": \"placeholder_question_id\",\n\"problem\": \"在一个两位数的两个数字中间加一个$$0$$，所得的三位数是原数的$$9$$倍，求这个两位数．\",\n\"trans_problem\": \"Insert a $$0$$ between the digits of a two-digit number to form a three-digit number, which is $$9$$ times the original number. Find this two-digit number.\"\n}"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3 = 0\n    page = 1\n    while count_3 < 28:\n        if '3' in str(page):\n            count_3 += str(page).count('3')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = (total_amount - 50) // 2\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if total_amount - coin == 2 * (total_amount - coin - brother_amount):\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55\n    second_bus_time = 16 * 60 + 35\n    time_arrival = first_bus_time + 4\n    \n    wait_time = second_bus_time - time_arrival\n    \n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let n be the number of boys\n    n = symbols('n')\n\n    # If we remove (1/11) of boys and 5 girls, the number of boys and girls becomes the same\n    equation = Eq(n - (n / 11), (152 - n) - 5)\n\n    # Solve for n\n    boys_original_number = solve(equation, n)[0]\n\n    return boys_original_number\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    trees = (road_length // distance_between_trees) + 1\n    \n    return trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    num_lorries = -(-workers // lorry_capacity)  # Ceiling division\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "Input:\n{\"queId\": \"someUniqueId\", \"problem\": \"一个活动性较强的细菌每经过$$10$$秒就分裂为一个活动性较强的与一个活动性较弱的细菌，而一个活动性较弱的细菌每经过$$20$$秒就分裂为两个活动性较弱的细菌．问：一个活动性较强的细菌，经过$$60$$秒可繁殖多少个细菌？\"}\nOutput:\n{\"queId\": \"someUniqueId\", \"problem\": \"一个活动性较强的细菌每经过$$10$$秒就分裂为一个活动性较强的与一个活动性较弱的细菌，而一个活动性较弱的细菌每经过$$20$$秒就分裂为两个活动性较弱的细菌．问：一个活动性较强的细菌，经过$$60$$秒可繁殖多少个细菌？\", \"trans_problem\": \"A highly active bacterium divides into one highly active and one less active bacterium every $$10$$ seconds, while a less active bacterium divides into two less active bacteria every $$20$$ seconds. How many bacteria can be produced from one highly active bacterium after $$60$$ seconds?\"}"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days_avg = 20\n    last_two_days = 60\n    \n    next_four_days = next_four_days_avg * 4\n    \n    total_pages = first_three_days + next_four_days + last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    solution, _ = solve_congruence(*congruences)\n\n    # Since the number should be less than 200, we need to find the correct solution within range\n    while solution >= 200:\n        solution -= 4 * 5 * 9  # LCM of 4, 5, and 9\n\n    return solution\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of students\n    # Let y be the total number of rooms\n    x, y = symbols('x y')\n    \n    # If 4 students live in one room, there will be 6 students with no room to live\n    equation1 = Eq(4 * y + 6, x)\n    \n    # If 5 students live in one room, there will be 1 room without students\n    equation2 = Eq(5 * (y - 1), x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 + dice2 + dice3 == 12 and len(set([dice1, dice2, dice3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_current_age = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n    years_passed = 0\n\n    while True:\n        years_passed += 1\n        sum_grandsons_ages += 3  # Each year, the sum of the grandsons' ages will increase by 3 (each grandson gets 1 year older)\n        if bill_current_age + years_passed == sum_grandsons_ages:\n            break\n\n    return bill_current_age + years_passed\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_weight_g = 15\n    \n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_final = 6 * 10\n    removed_number = total_initial - total_final\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_leaving = total_people * (1/3)\n    people_remaining = total_people - people_leaving\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n\n    common_interval = lcm(lcm(interval_aytown, interval_beeville), interval_ceeford)\n    \n    hours, minutes = divmod(common_interval, 60)\n    next_time_hour = 10 + hours\n    next_time_minute = minutes\n\n    # Format the time to HH:MM format\n    next_time = f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n    \n    return next_time\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    wrong_deduction = 2\n\n    def calculate_marks(correct):\n        wrong = total_questions - correct\n        return correct * correct_marks - wrong * wrong_deduction\n\n    for correct_answers in range(total_questions + 1):\n        if calculate_marks(correct_answers) == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # The time taken by the train to pass the tree in seconds\n    length_of_train = 360  # Length of the train in meters\n\n    # Speed is distance/time\n    speed = length_of_train / time  # Speed in meters per second\n\n    # Convert the speed from meters per second (m/s) to kilometers per hour (km/h)\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    effective_climb = day_climb - night_slide\n    day = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    # Total number of students\n    total_students = 52\n\n    # Number of students involved in each sport\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Using the Inclusion-Exclusion Principle for three sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n\n    # As we are looking for the minimum number of students who play all three sports,\n    # let's assume that the intersection of any two sports is the maximum possible without exceeding the total.\n    # That maximum is the number of participants in the smallest sport: A ∩ B, A ∩ C, B ∩ C <= swimmers\n\n    # Minimum All Three = |A| + |B| + |C| - total_students - 2*(A ∩ B ∩ C)\n    # We solve for A ∩ B ∩ C\n    min_all_three = swimmers + cyclists + table_tennis_players - 2 * total_students\n\n    return min_all_three\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "{\n  \"queId\": \"unknown\",\n  \"problem\": \"文具店$$2$$支自动笔的价钱是$$9$$元，$$3$$支钢笔的价钱是$$8$$元．张老师准备为成绩进步明显的同学买$$14$$支自动笔和$$15$$支钢笔，张老师一共需要花多少钱？\",\n  \"trans_problem\": \"The price for $$2$$ ballpoint pens at a stationery store is $$9$$ yuan, and the price for $$3$$ fountain pens is $$8$$ yuan. Teacher Zhang plans to buy $$14$$ ballpoint pens and $$15$$ fountain pens for students who have shown significant improvement in their grades. How much money does Teacher Zhang need to spend in total?\"\n}"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Assuming number 2 is at position 0\n    # We need to find the position where number 24 is directly opposite to number 2, which is position 0.\n    for i in range(1, 24, 2):  # run i for odd numbers\n        if (2 + 2 * i) % (24 - 2) == 0:\n            # The number of people is the index i plus one (since we started counting from 0)\n            return i + 1\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percentage = 20\n    books_stationery_expenditure = (pocket_money * books_stationery_percentage) / 100\n    \n    # Let the transport expenditure be x\n    x = symbols('x')\n    food_expenditure = 3 * x\n    savings = food_expenditure - 6\n    \n    # Total expenditure is books and stationery, food, and transport\n    total_expenditure = books_stationery_expenditure + food_expenditure + x\n    # Total saving is pocket money minus total expenditure\n    total_savings = pocket_money - total_expenditure\n    \n    # Solve for x\n    eq = Eq(total_savings, savings)\n    transport_expenditure = solve(eq, x)[0]\n    \n    # Calculate savings in $\n    savings_dollars = 3 * transport_expenditure - 6\n    # Calculate savings in %\n    savings_percentage = (savings_dollars / pocket_money) * 100\n    \n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    ans = 7.72 - 7.54\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[0]\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    move_interval_A = 24\n    move_interval_B = 64\n\n    ans = lcm(move_interval_A, move_interval_B)\n\n    return ans\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # By the pigeonhole principle, in the worst-case scenario, we must consider the possibility\n    # of drawing the maximum number of marbles of one color before getting a marble of a different color.\n    # This would be the case if we keep drawing the same color, but we want to ensure 4 different colors.\n    \n    # First, we take all the marbles of the color with the maximum amount, which is red with 12 marbles.\n    # Then, we need to take the maximum of the second-most populous color, which is blue with 9 marbles.\n    # Next, we draw the third color, which is yellow with 8 marbles.\n    # Until now, we are not guaranteed to have 4 different colors.\n    # Finally, drawing one more will ensure we have the fourth color (any could be the fourth, we already have 3 colors).\n\n    # So, we have 12 (red) + 9 (blue) + 8 (yellow) + 1 (any color, ensuring the fourth color) = 30 marbles.\n\n    return 12 + 9 + 8 + 1  # Total number of marbles drawn to ensure 4 different colors.\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    # Find factors of 75 that are 2-digit numbers\n    factors_of_75 = [i for i in range(10, 100) if 75 % i == 0]\n    for factor in factors_of_75:\n        # Check which 2-digit factor gives a remainder of 3 when divided by 6\n        if factor % 6 == 3:\n            return factor\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_result = 50\n    correct_subtrahend = 14\n    # correct_minuend - 14 (correct_subtrahend) = correct_minuend - 41 (incorrect_subtrahend) + 50\n    correct_minuend = incorrect_subtrahend - incorrect_result + correct_subtrahend\n    correct_difference = correct_minuend - correct_subtrahend\n    return correct_difference\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    series = range(40, 21, -2)\n    ans = sum(series[::2]) - sum(series[1::2])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_each_ate = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_eaten_by_sisters = sisters_each_ate * number_of_sisters\n    total_eaten = justin_ate + total_eaten_by_sisters\n    initial_apples = apples_left + total_eaten\n\n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = ((amount / principal) ** (1 / years)) - 1\n\n    return rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    n = 1\n    while True:\n        if ((n * n) + n + n + 1) == (n * n) + 31:\n            ans = (n + 1) * (n + 1)\n            break\n        n += 1\n    return ans\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    result = 56 / 21\n    return result\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    result = (3.2 + 6.77 + 8.88) * (6.77 + 8.88 + 6.3) - (3.2 + 6.77 + 8.88 + 6.3) * (6.77 + 8.88)\n    return result\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n\n    # Counting the numbers between 3267 and 3999\n    # First digit is fixed as 3\n    for second_digit in range(2, 7):  # Second digit can be 2, 3, 4, 5, or 6\n        if second_digit == 3:\n            continue  # skip since 3 is already used as the first digit\n        for third_digit in range(1, 7):\n            if third_digit == 3 or third_digit == second_digit:\n                continue  # skip used digits\n            for fourth_digit in range(1, 7):\n                if fourth_digit == 3 or fourth_digit == second_digit or fourth_digit == third_digit:\n                    continue  # skip used digits\n                number = int(f\"3{second_digit}{third_digit}{fourth_digit}\")\n                if 3267 <= number <= 3999:\n                    total_count += 1\n\n    # Counting the numbers between 4000 and 4999\n    # Since all the numbers here meet the condition, simply calculate the number of permutations of the remaining digits (4 cannot be the second digit)\n    total_count += 4 * 3 * 2  # permutations of the remaining three digits\n\n    # Counting the numbers between 5000 and 5120\n    # First digit is fixed as 5\n    for second_digit in range(1, 3):  # Second digit can only be 1 or 2 to not surpass 5120\n        for third_digit in range(1, 7):\n            if third_digit == 5 or third_digit == second_digit:\n                continue  # skip used digits\n            for fourth_digit in range(1, 7):\n                if fourth_digit == 5 or fourth_digit == second_digit or fourth_digit == third_digit:\n                    continue  # skip used digits\n                number = int(f\"5{second_digit}{third_digit}{fourth_digit}\")\n                if 5000 <= number <= 5120:\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # 1 hour and 20 minutes to minutes\n\n    pictures_painted = total_time_available // time_for_one_picture\n\n    return pictures_painted\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    total_seconds = seconds_per_minute * minutes\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n    \n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    other_children = 5\n    # Each of the other children gets at least one apple\n    min_apples_for_others = 1\n    # Calculate the largest number of apples Ann can get\n    max_apples_for_ann = total_apples - (min_apples_for_others * other_children)\n    return max_apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_g = 9 * 1000 + 5  # Convert total mass to grams\n    soil_mass_g = 4 * 1000 + 50  # Convert soil mass to grams\n    sand_mass_g = total_mass_g - soil_mass_g  # Calculate sand mass in grams\n\n    # Find the difference in grams and convert to kg and g\n    difference_g = abs(soil_mass_g - sand_mass_g)\n    difference_kg = difference_g // 1000\n    difference_g_remainder = difference_g % 1000\n\n    # Return the difference in the format \"kg g\"\n    ans = f\"{difference_kg}kg {difference_g_remainder}g\"\n\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons they have\n    equation1 = Eq(james + nina, 22)\n\n    # Nina has more buttons than James, and after giving 4 away, they have the same amount\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1  # Initialize with the first term of the series\n    for denominator in range(2, 101):  # From 2 to 100\n        for numerator in range(1, denominator):  # From 1 to the denominator - 1\n            ans += numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct_ans, wrong_ans = symbols('correct_ans wrong_ans')\n    \n    # Equation for total questions answered\n    total_questions_eq = Eq(correct_ans + wrong_ans, 10)\n    \n    # Equation for the score based on correct and wrong answers\n    score_eq = Eq(4 * correct_ans - 2 * wrong_ans, 29)\n    \n    # Solving the system of equations\n    solutions = solve((total_questions_eq, score_eq), (correct_ans, wrong_ans))\n    \n    return solutions[correct_ans]\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    pattern_length = len(pattern)\n    repeat_times = 52 // pattern_length\n    partial_repeat_length = 52 % pattern_length\n\n    total_sum = sum(pattern) * repeat_times + sum(pattern[:partial_repeat_length])\n\n    return total_sum\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    kites = total_paper / paper_per_kite\n\n    return int(kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    num_trees = 79\n    total_length = 320\n\n    # The number of intervals is one more than the number of trees\n    num_intervals = num_trees + 1\n\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits, so the ratio of fish to rabbits is 10:4, which simplifies to 5:2.\n    fish_to_rabbit_ratio = 5 / 2\n    \n    # Oscar trades 5 rabbits for 6 packs of wheat, so the ratio of rabbits to packs of wheat is 5:6\n    rabbit_to_wheat_ratio = 5 / 6\n    \n    # To find the ratio of fish to packs of wheat, we multiply the two ratios together.\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    # If Dennis wants 12 packs of wheat, we use the ratio to find out how many fish Owen should give.\n    fish_for_twelve_packs = 12 / fish_to_wheat_ratio\n    \n    return fish_for_twelve_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    from fractions import Fraction\n\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n\n    number_of_short_rods = total_length / short_rod_length\n\n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price = 2800.00\n    deal_quantity = 30\n    laptops_needed = 20\n\n    total_without_deal = single_laptop_price * laptops_needed\n    price_per_laptop_on_deal = deal_price / deal_quantity\n    total_with_deal = price_per_laptop_on_deal * laptops_needed\n    \n    savings = total_without_deal - total_with_deal\n    \n    return round(savings, 2)\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    \n    # Equation for the scenario where 3 fish per penguin leaves 5 fish\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    # Solve the equation for the number of penguins\n    penguins_count = solve(equation1, (penguins))\n\n    return penguins_count[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    wrong_result = -14\n    mistaken_subtraction = -26\n    actual_addition = 26\n\n    correct_number = wrong_result - mistaken_subtraction + actual_addition\n\n    return correct_number\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Since M and N have only prime factors 3 and 5, and their HCF is 75,\n    # which is 3*5^2, we can represent M = 3^a * 5^b and N = 3^c * 5^d\n    # where a, b, c, d are non-negative integers and a, b are at least 1 and 2\n    # respectively because of the HCF being 75 = 3^1 * 5^2.\n\n    # The number of factors for any number n = p1^a * p2^b * ... * pk^k\n    # (where p1, p2, ..., pk are prime factors and a, b, ..., k are their\n    # respective powers) is given by (a+1)*(b+1)*...*(k+1).\n\n    # For M with 12 factors => (a+1)*(b+1) = 12\n    # Possible pairs (a, b) considering (a,b) >= (1,2) due to HCF:\n    factors_M = [(1, 3), (2, 2), (3, 1)]\n   \n    # Similarly for N with 10 factors => (c+1)*(d+1) = 10\n    # Possible pairs (c, d) considering (c,d) >= (1,2) due to HCF:\n    factors_N = [(1, 2), (2, 1)]\n\n    # Now, we need to find valid pairs of (a, b) and (c, d) such that the HCF of M and N is 75.\n    # Since the HCF is 75, the minimum powers of 3 and 5 are 1 and 2 respectively.\n    # We adjust to align with HCF by adding the HCF's powers to a and b.\n    # M = 3^(a+1) * 5^(b+2)\n    # N = 3^(c+1) * 5^(d+2)\n    \n    # We will now iterate through the combinations to find valid M and N, whose HCF is 75\n    valid_combinations = []\n    for a, b in factors_M:\n        M = 3**(a+1) * 5**(b+2)\n        for c, d in factors_N:\n            N = 3**(c+1) * 5**(d+2)\n            if M != N: # Since M and N must be different\n                valid_combinations.append((M, N))\n    \n    # There should be only one valid combination\n    M, N = valid_combinations[0]\n    sum_M_N = M + N\n    \n    return sum_M_N\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange 6 singing (S) performances\n    sing_perms = factorial(6)\n    \n    # There must be a singing performance between every two dancing performances, so we can\n    # firstly arrange the 4 dancing performances and then insert the singing performances.\n    # Based on this restriction, after arranging the dancing performances, there are 5 \n    # possible places to put singing performances (before the 1st dance, between the 1st & 2nd,\n    # between the 2nd & 3rd, between the 3rd & 4th, and after the 4th dance).\n    \n    # Calculate the number of ways to place 6 singing performances into 5 spaces where\n    # at least 1 singing performances is between every two dancing. The remaining (6 - 3) singing\n    # performances can be freely distributed to the 5 spaces, which is a problem of distributing\n    # indistinguishable items to distinguishable boxes, which can be calculated using stars and bars.\n    \n    # The number of ways to distribute 3 indistinguishable singing performances to 5 places\n    # is `Combinations(5 + 3 - 1, 3)` or `Combinations(7, 3)`\n    remaining_sing_perms = factorial(7) // (factorial(3) * factorial(7 - 3))\n    \n    # Multiply the permutations of singing and the ways of distributing the remaining singing performances\n    return sing_perms * remaining_sing_perms\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage_of_number = 0.35 * 80\n    return percentage_of_number\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # At half time, the number of goals for each team can range from 0 to their final score\n    for team1_ht in range(4): # Team1 can have 0 to 3 goals by half time\n        for team2_ht in range(3): # Team2 can have 0 to 2 goals by half time\n            # Both teams cannot score more goals at half time than their final score\n            # The half time total must be less than or equal to the final score total\n            if team1_ht + team2_ht <= 5:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "{\n  \"queId\": \"to_be_filled_by_user\",\n  \"problem\": \"在$$1$$至$$20$$这$$10$$个数中最少任意挑出多少个，才必定有两个数之和是$$16$$？\",\n  \"trans_problem\": \"What is the minimum number of numbers that must be chosen from the set $$1$$ to $$20$$ to ensure that there is always a pair of numbers whose sum is $$16$$?\"\n}"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "Output:\n{\n  \"queId\": \"Not provided in the input\",\n  \"problem\": \"思思老师有一些积分卡要分发给课外活动兴趣小组．如果平均每人分$$8$$张，那么分完后还剩下$$6$$张；如果平均每人分$$9$$张，那么会缺$$3$$张．请问这个课外活动兴趣小组共有多少名同学？\",\n  \"trans_problem\": \"Teacher SiSi has some reward cards to distribute to the extracurricular activities interest group. If each student receives $$8$$ cards on average, there are $$6$$ cards left after distribution. If each student receives $$9$$ cards on average, there would be a shortage of $$3$$ cards. How many students are there in this extracurricular activities interest group?\"\n}"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    clara, emma = symbols('clara emma')\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n    \n    solutions = solve((equation1, equation2), (clara, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n\n    num_students = 6\n    num_monitors = 2\n    num_ways = comb(num_students, num_monitors)\n\n    return num_ways\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    ans = None\n    # Iterate through possible rows and columns\n    for rows in range(1, 101):  # Assuming there are at most 100 desks in any direction\n        for columns in range(1, 101):\n            if rows * columns <= 4:  # Skip cases where the total is too small\n                continue\n            # Mike can be the 2nd in line only if there are more than 1 rows and 1 column\n            if (rows > 1 and columns > 1) and \\\n               (rows - 1) * (columns - 1) == 1:  # The condition for Mike to be the 2nd in line\n                ans = rows * columns\n                return ans\n    return ans\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    \n    # Contents' weight when the basket is full\n    contents_full = full_weight - half_full_weight\n    \n    # Weight of the empty basket is the half full weight minus half of the contents' weight\n    empty_basket_weight = half_full_weight - (contents_full / 2)\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85\n    total_amount = 400\n\n    amount = (percentage / 100) * total_amount\n\n    return amount\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    \n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let's denote the total sweets as x\n    # According to the problem, Pip ate 3/5 of x, leaving 2/5 of x\n    # And we know that 2/5 of x equals 16 (sweets left for Bud)\n    # Therefore, we can write the equation as (2/5)*x = 16\n\n    # we can calculate x by rearranging the equation to x = (16 * 5) / 2\n    total_sweets = (16 * 5) // 2  # Using integer division because count of sweets must be an integer\n\n    return total_sweets\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    percentage = (result / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the total number of girls and b be the total number of boys\n    g, b = symbols('g b')\n    \n    # According to the question, an equal number of boys and girls cannot swim:\n    # (5/8) * g = (2/5) * b\n    \n    # Total pupils who cannot swim is 20, so:\n    # (5/8) * g + (2/5) * b = 20\n    \n    # Since there are equal numbers of boys and girls:\n    # g = b\n    \n    # We now have two equations:\n    equation1 = Eq((5/8) * g, (2/5) * b)\n    equation2 = Eq((5/8) * g + (2/5) * b, 20)\n    \n    # Let's solve these equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # The total number of pupils in the class\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_mandy_wants = 5\n\n    cost_per_cup = total_cost_3_cups / number_of_cups_initially\n    total_cost_mandy_cups = cost_per_cup * number_of_cups_mandy_wants\n\n    return total_cost_mandy_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushrooms = 5\n    small_mushrooms = 9\n    total_rabbits = 38\n    capacity_big_mushroom = 4\n\n    rabbits_in_big_mushrooms = big_mushrooms * capacity_big_mushroom\n    remaining_rabbits = total_rabbits - rabbits_in_big_mushrooms\n    capacity_small_mushroom = remaining_rabbits / small_mushrooms\n\n    return capacity_small_mushroom\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days_in_a_week = 7\n\n    total_weekly_earnings = average_daily_earnings * number_of_days_in_a_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    s = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            s += i ** 2\n        else:\n            s -= i ** 2\n    return s\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    dp = [0] * (6 + 1)\n    dp[0] = 1  # base case\n\n    for i in range(1, 7):\n        dp[i] += dp[i - 1] if i >= 1 else 0\n        dp[i] += dp[i - 2] if i >= 2 else 0\n        dp[i] += dp[i - 3] if i >= 3 else 0\n\n    return dp[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * num_months\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_ = 21 + 22 + 23\n    for i in range(1, sum_ + 1):\n        if 2 * 3 * i == sum_:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    abigail_current_age, ryan_current_age = symbols('abigail_current_age ryan_current_age')\n    \n    # Equations based on the problem\n    equation1 = Eq(abigail_current_age, 3 * ryan_current_age)\n    equation2 = Eq(abigail_current_age + 6, 42)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail_current_age, ryan_current_age))\n    \n    # Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan_current_age] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_water = 33\n    speed_current = 3\n    distance = 150\n\n    # Speed upstream is speed in water minus speed of current\n    speed_upstream = speed_water - speed_current\n    \n    # Time taken to travel the distance upstream\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 // 4 * 4 if 56 % 4 == 0 else (56 // 4 + 1) * 4\n    last_multiple = 92 // 4 * 4\n\n    number_of_multiples = (last_multiple - first_multiple) // 4 + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    \n    # Number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_sum = num_terms / 2 * (first_term + last_term)\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    # Initialize ans to 0.\n    ans = 0\n    # Start from 60 and decrement by 1 each time.\n    for i in range(60, 0, -1):\n        # The pattern is that every four numbers, it cycles between +, +, -, -.        \n        # To get the correct sign for each number, we can find the remainder when\n        # the distance of current number from 60 is divided by 4. If remainder is 0 or 1,\n        # we add the number; if remainder is 2 or 3, we subtract the number.\n        sign = -1 if (60 - i) % 4 >= 2 else 1\n        ans += sign * i\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Find the last digit of 9^99 using the pattern of the last digit of powers of 9\n    # The pattern repeats every 2: 9^1 -> 9, 9^2 -> 1, 9^3 -> 9, 9^4 -> 1, and so on.\n    \n    exponent = 99\n    pattern_length = 2\n\n    # Since the pattern length is 2 and we are interested in the last digit,\n    # we can find the remainder when the exponent is divided by the pattern length.\n    remainder = exponent % pattern_length\n\n    # If remainder is 0, the last digit is 1 (as in 9^2, 9^4, ...)\n    # If remainder is 1, the last digit is 9 (as in 9^1, 9^3, ...)\n    if remainder == 0:\n        last_digit = 1\n    else:\n        last_digit = 9\n\n    return last_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    current_age = symbols('current_age')\n    \n    # In 6 years, her age will be three times her current age\n    equation = Eq(current_age + 6, 3 * current_age)\n\n    # Solve the equation\n    current_age_solution = solve(equation, current_age)\n\n    # Calculate Claire's age two years from now\n    age_in_two_years = current_age_solution[0] + 2\n\n    return age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    actual_journey_fraction = 11/12\n    time_late_departure = 15\n    time_late_arrival = 5\n    time_saved = time_late_departure - time_late_arrival\n\n    actual_journey_time = actual_journey_fraction * (time_saved / (1 - actual_journey_fraction))\n    scheduled_journey_time = actual_journey_time + time_saved\n\n    return scheduled_journey_time\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Calculate the result of the given expression\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total = 5.42 * 25\n    part = 5.42 * 5\n    missing_number = (total - part) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    fare = 44\n    # UK currency coins = 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), £2 (200p)\n    # Largest coin smaller than the fare is 20p. Use a 50p if available.\n    \n    coins = [200, 100, 50, 20, 10, 5, 2, 1]    # Coin values in pence\n    payment = next(coin for coin in coins if coin > fare)  # Susan will pay with this coin\n    change = payment - fare  # Change to be given to Susan\n\n    num_coins = 1  # Susan hands over one coin \n    for coin in coins:\n        num_coins += change // coin  # Driver gives change using minimum number of coins\n        change %= coin\n\n    return num_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Since she wants to get 4 different colored marbles, in the worst case scenario,\n    # she could draw all the marbles of the most numerous three colors first.\n    # After that, the next draw guarantees she gets the fourth color.\n    \n    # Number of marbles of most numerous three colors\n    red = 4\n    green = 7\n    blue = 6\n    \n    # The worst case is when she draws all red, green and blue marbles, which is 4+7+6.\n    # She must then draw one more to guarantee the fourth color (orange).\n    worst_case = red + green + blue + 1\n\n    return worst_case\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    days = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += climb_distance\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_distance\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "Input:\n如果$$a$$，$$b$$均为质数，且$$9a+11b=51$$，则$$a+b=$$~\\uline{~~~~~~~~~~}~．\nOutput:\n{\n  \"queId\": \"to_be_provided\",\n  \"problem\": \"如果$$a$$，$$b$$均为质数，且$$9a+11b=51$$，则$$a+b=$$~\\\\uline{~~~~~~~~~~}~．\",\n  \"trans_problem\": \"If $$a$$ and $$b$$ are both prime numbers, and $$9a+11b=51$$, then find the value of $$a+b$$.\"\n}"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    motorbikes, tricycles, vans = symbols('motorbikes tricycles vans')\n\n    # motorbikes have 2 wheels, tricycles have 3 wheels, vans have 4 wheels\n    eq1 = Eq(motorbikes*2 + vans*4, tricycles*3 + 35)\n    eq2 = Eq(tricycles*3 + vans*4, motorbikes*2 + 13)\n    eq3 = Eq(motorbikes*2 + tricycles*3 + vans*4, 101)\n    \n    solutions = solve((eq1, eq2, eq3), (motorbikes, tricycles, vans))\n    \n    return solutions[motorbikes] - solutions[vans]\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    # Starting values of the sequence\n    a = 2  # First term\n    b = 3  # Second term\n    while b < 100:\n        # Generates the next term using the difference between successive terms\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 1  # There's exactly one way to distribute 6 identical pens into 3 different pencil cases without any empty cases.\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4 * i + 2)**2 - (4 * i)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "Input:\n{\n  \"queId\": \"unknown\",\n  \"problem\": \"一班小朋友在分享一大包糖果．如果每人吃$$18$$颗，还欠糖果$$12$$颗；如果每人吃$$15$$颗，则刚好可以多分给$$2$$人．这包糖果有多少颗？\"\n}\nOutput:\n{\n  \"queId\": \"unknown\",\n  \"problem\": \"一班小朋友在分享一大包糖果．如果每人吃$$18$$颗，还欠糖果$$12$$颗；如果每人吃$$15$$颗，则刚好可以多分给$$2$$人．这包糖果有多少颗？\",\n  \"trans_problem\": \"A group of children are sharing a large pack of candies. If each child eats $$18$$ candies, they would still be short of $$12$$ candies. If each child eats $$15$$ candies, then there are just enough candies to give to $$2$$ additional children. How many candies are in the pack?\"\n}"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Pip_and_Bud = 2  # including Pip and Bud themselves\n\n    total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    difference = 3\n    term_value = 298\n    term_number = ((term_value - first_term) / difference) + 1\n    return int(term_number)\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for amounts of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Given:\n    equation1 = Eq(A, 5 * B)                  # Tank A has 5 times as much water as Tank B\n    equation2 = Eq(B, C + 5)                  # Tank B has 5 more litres than Tank C\n    equation3 = Eq(C + D, A)                  # Total in Tank C and D is equal to Tank A\n    equation4 = Eq(D, 41)                     # Tank D contains 41 litres\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports\n    both = symbols('x')\n\n    # Let 3x be the number of students who like football\n    football = 3 * both\n\n    # Let 4x be the number of students who like basketball\n    basketball = 4 * both\n\n    # According to the principle of inclusion-exclusion:\n    # Total = number of students who like football\n    #       + number of students who like basketball\n    #       - number of students who like both sports\n    total_students = Eq(football + basketball - both, 36)\n\n    # Solve for x\n    both_sports = solve(total_students, both)\n\n    return both_sports[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the five-digit number\n    x = symbols('x')\n\n    # Create equations representing the conditions\n    eq1 = Eq(x % 7, 3)\n    eq2 = Eq(x % 11, 7)\n    eq3 = Eq(x % 13, 9)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x))\n\n    # Filter the solutions for the smallest five-digit number\n    five_digit_solutions = [s for s in solutions if 10000 <= s < 100000]\n\n    # Return the smallest five-digit solution\n    return min(five_digit_solutions)\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam\n    speed_adam = 60  # in km/h\n    # Speed of Jacob\n    speed_jacob = 80  # in km/h\n\n    # Time it took for Jacob to reach home\n    time_jacob = 3  # in hours\n    # Time remaining for Adam to reach home\n    time_remaining_adam = 0.5  # in hours (30 minutes is 0.5 hours)\n\n    # Total time taken by Adam to reach home\n    time_adam = time_jacob + time_remaining_adam  # in hours\n\n    # Distance Adam has travelled when Jacob reaches home\n    distance_adam = speed_adam * time_adam\n    # Distance Jacob has travelled when he reaches home\n    distance_jacob = speed_jacob * time_jacob\n\n    # Total distance between their homes\n    total_distance = distance_adam + distance_jacob\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "Input:\n{\n  \"queId\": \"some_unique_identifier\",\n  \"problem\": \"阿拉丁在藏宝库里发现了$$20$$条项链，其中有的项链只镶有$$2$$颗钻石，有的项链镶有$$5$$颗钻石，一共有$$79$$颗钻石．那么镶有$$5$$颗钻石的项链有多少条？\"\n}\nOutput:\n{\n  \"queId\": \"some_unique_identifier\",\n  \"problem\": \"阿拉丁在藏宝库里发现了$$20$$条项链，其中有的项链只镶有$$2$$颗钻石，有的项链镶有$$5$$颗钻石，一共有$$79$$颗钻石．那么镶有$$5$$颗钻石的项链有多少条？\",\n  \"trans_problem\": \"Aladdin found $$20$$ necklaces in the treasure trove, some of which have only $$2$$ diamonds while others have $$5$$ diamonds, making for a total of $$79$$ diamonds. How many necklaces have $$5$$ diamonds each?\"\n}"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    year = \"2014\"\n    days_zero_one_two = 0\n    \n    # Generate all valid permutations of two 0s, two 1s, two 2s, and two other digits\n    for perm in permutations(\"001122\"):\n        for d1 in range(10):\n            for d2 in range(10):\n                if d1 == d2 or d1 in perm or d2 in perm:\n                    continue  # The two other digits must be different and not in perm\n                date = \"{}{}{}{}\".format(year, ''.join(perm[:2]), ''.join(perm[2:4]), ''.join(perm[4:]))\n                month = int(date[4:6])\n                day = int(date[6:])\n                if month >= 1 and month <= 12:\n                    if (month in [1, 3, 5, 7, 8, 10, 12] and day >= 1 and day <= 31) or \\\n                       (month in [4, 6, 9, 11] and day >= 1 and day <= 30) or \\\n                       (month == 2 and day >= 1 and day <= 28):  # No leap year in 2014\n                        days_zero_one_two += 1\n                        \n    return days_zero_one_two // 6  # Divide by 6 to account for overcounting due to fixed year\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    avg = 6\n    sum_of_numbers = sum(numbers)\n    total_numbers_count = 8\n    sum_with_p_q = avg * total_numbers_count\n    remaining_sum = sum_with_p_q - sum_of_numbers\n\n    # The difference between the highest value and the lowest value is also 6.\n    # Since we are looking for the lowest possible value of q, we want to minimize p and maximize q.\n    min_possible_p = min(numbers)  # The minimum p is the lowest number on the list.\n    # Therefore, the maximum q can be is min_possible_p + 6, since their maximum difference is 6.\n\n    max_possible_q = min_possible_p + 6\n    if max_possible_q in numbers:\n        # If max_possible_q is already in the list, p cannot be the minimum value from the list,\n        # so we need to increment p and decrement q until we find a suitable pair.\n        while max_possible_q in numbers or remaining_sum - max_possible_q <= max_possible_q:\n            max_possible_q -= 1\n    # Now max_possible_q is the highest possible value for q that respects the difference condition.\n    # And the remaining_sum - max_possible_q will be the value for p, which will be lower than q\n\n    # We also need to check that p is less than q\n    min_possible_p = remaining_sum - max_possible_q\n    min_q = max_possible_q if min_possible_p < max_possible_q else max_possible_q - 1\n\n    return min_q\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result_1_2 = custom_operation(1, 2)\n    result_1_2_3 = custom_operation(result_1_2, 3)\n    result_1_2_3_4 = custom_operation(result_1_2_3, 4)\n    final_result = custom_operation(result_1_2_3_4, 5)\n    ans = int(final_result)\n    return ans\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factors_exp = [2, 1, 1]  # Exponents of the prime factors 2^2, 3^1, 7^1 for 252\n    # Add 1 to each and multiply to find the number of factors\n    num_factors = (prime_factors_exp[0]+1) * (prime_factors_exp[1]+1) * (prime_factors_exp[2]+1)\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using the Pigeonhole Principle: to ensure at least n pigeons in m holes,\n    # there must be ceil(n/m) pigeons in at least one hole.\n    min_cakes_in_top_layer = -(-total_cakes // layers)  # Ceiling division\n\n    return min_cakes_in_top_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # According to the Pigeonhole Principle, if Lucy picks more marbles than the number of colors,\n    # she is guaranteed to have at least one color with 2 marbles.\n    num_colors = 2\n    marbles_per_color = 2\n    # Worst case: Lucy picks all the marbles of one color plus one more marble\n    marbles_to_pick = marbles_per_color + 1\n    \n    return marbles_to_pick\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg = 2.49 + 3.08  # Add the kilograms together (note: 3kg 80g is 3.08kg)\n    weight_g = 670 + weight_kg * 1000  # Convert the total kg to g and add the grams\n    return weight_g\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # Peter exercises for an hour (60 minutes)\n    cycling_fraction = 1/3\n    cycling_time = total_time_minutes * cycling_fraction\n    jogging_time = total_time_minutes - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # Given the sequence: 22, 18, 14, 10, 6, 2\n    # It is observed that the difference between consecutive terms is -4\n    # Therefore, to find the next term (n), subtract 4 from the last given term (2)\n    \n    n = 2 - 4  # 2 is the last term provided in the sequence, and -4 is the difference\n    \n    return n\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total number of apples\n    total_apples = 30\n    # Total number of children\n    children = 6\n    # Since each child must get at least one apple\n    remaining_apples = total_apples - children\n    # We need to find out the largest possible number of apples one child can get.\n    # To maximize the number that the child with the most apples gets,\n    # we should minimize the apples that other children get.\n    # We do this by giving each of the other children one more apple than the previous,\n    # starting with one apple.\n    apples_distribution = [i for i in range(1, children)]\n    largest_apples = remaining_apples - sum(apples_distribution)\n    \n    return largest_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Sam's car average rate\n    sam_miles_per_gallon = 72.8\n    # Total distance from London to Kendal\n    distance = 273\n    # Tom's additional gallons used\n    tom_additional_gallons = 6 + 3/4\n\n    # Calculate how many gallons Sam's car used\n    sam_gallons_used = distance / sam_miles_per_gallon\n\n    # Calculate how many gallons Tom's car used\n    tom_gallons_used = sam_gallons_used + tom_additional_gallons\n\n    # Calculate the average rate of Tom's car\n    tom_miles_per_gallon = distance / tom_gallons_used\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Least Common Multiple (LCM) gives the time after which they all meet at the starting point\n    meeting_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Convert seconds to hours, minutes, and seconds\n    hours = meeting_time_seconds // 3600\n    minutes = (meeting_time_seconds % 3600) // 60\n    seconds = meeting_time_seconds % 60\n\n    # Starting time is 10:00 am; Calculate the meeting time\n    meet_hour = 10 + hours\n    meet_minute = minutes\n    meet_second = seconds\n\n    # Format time correctly, including any carry-over for minutes and hours\n    if meet_second >= 60:\n        meet_minute += 1\n        meet_second -= 60\n    if meet_minute >= 60:\n        meet_hour += 1\n        meet_minute -= 60\n\n    # Since 24-hour clock wraps around after 24, take modulo to get correct hour\n    meet_hour %= 24\n\n    return f\"{meet_hour:02d}:{meet_minute:02d}:{meet_second:02d}\"\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n\n    outfit_combinations = shirts * skirts\n    \n    return outfit_combinations\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Considering the worst case scenario, we will take out M&M's one by one.\n    # We continue this process until we are sure to have 2 different colors.\n    # The worst case would be taking all of one color first and then one more.\n    \n    # Sort the quantities of M&M's, it does not matter which color each number represents.\n    quantities = sorted([3, 4, 5])\n    \n    # Take all M&M's of the smallest pile, and one from the next smallest pile.\n    # This guarantees two different colors.\n    smallest_number_needed = quantities[0] + 1\n    \n    return smallest_number_needed\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Since the pattern seems to be multiplying by 3 each time (3^1, 3^2, 3^3, 3^4),\n    # the missing number should be 3^3 which is 9.\n\n    return 9\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert base-10 numbers to base-7\n    num1_base7 = int(str(45), 7)\n    num2_base7 = int(str(66), 7)\n\n    # Convert to base-10 for addition\n    num1_base10 = num1_base7 * (7**1) + num1_base7 // 7 * (7**2)\n    num2_base10 = num2_base7 * (7**1) + num2_base7 // 7 * (7**2)\n\n    # Perform addition in base-10\n    sum_base10 = num1_base10 + num2_base10\n\n    # Convert sum back to base-7\n    ans_base7 = ''\n    while sum_base10 > 0:\n        sum_base10, remainder = divmod(sum_base10, 7)\n        ans_base7 = str(remainder) + ans_base7\n\n    return ans_base7\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n    \n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of oranges originally be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # Now the ratio of oranges to lemons is 1:2, therefore (3x - 48) / 5x = 1/2\n\n    x = symbols('x')\n    equation = Eq((3*x - 48) / (5*x), 1/2)\n    x_value = solve(equation, x)\n\n    # The number of lemons is 5x\n    lemons = 5 * x_value[0]\n\n    return lemons\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_rabbit_per_day = 4\n\n    total_carrots = rabbits * days * carrots_per_rabbit_per_day\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Rates at which each animal eats a bale of hay per day\n    rate_horse = 1 / 2\n    rate_cow = 1 / 3\n    rate_sheep = 1 / 12\n\n    # Total rate at which all animals eat the hay\n    total_rate = rate_horse + rate_cow + rate_sheep\n\n    # Total number of bales\n    bales = 22\n\n    # Number of days the bales will last\n    days = bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    fraction = 5/8\n    whole_number = 160\n    \n    ans = fraction * whole_number\n    return ans\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # since 120 is the 8th term and 105 is the 7th term\n    # common difference (d) can be calculated by subtracting the 7th term from the 8th term\n    d = 120 - 105\n    \n    # Using arithmetic sequence formula: a_n = a_1 + (n-1)d\n    # We need to find the first term (a_1). We have the 7th term (a_7 = 105).\n    # Applying the formula for the 7th term: a_7 = a_1 + (7-1)d\n    # We can find a_1 by rearranging the formula: a_1 = a_7 - (7-1)d\n    a_1 = 105 - (7-1)*d\n    \n    # Now we can calculate the 100th term using the formula\n    # a_100 = a_1 + (100-1)d\n    a_100 = a_1 + (100-1)*d\n    \n    return a_100\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    for daughter_age in range(1, 75):\n        mother_age = 75 + daughter_age\n        if mother_age - daughter_age == daughter_age - 3:\n            return mother_age\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Since Isabella wants to ensure she gets 3 red apples,\n    # she could take out all the green and yellow ones and not get a single red apple.\n    # Hence, she has to take all the green and yellow ones plus 3 red ones to make sure.\n    green_apples = 11\n    yellow_apples = 7\n    red_needed = 3\n\n    ans = green_apples + yellow_apples + red_needed\n    return ans\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_students = 30\n    right_handed = 21\n    girls = 16\n\n    # The smallest number of left-handed students would occur\n    # if all the boys were right-handed. Therefore, the smallest\n    # number of right-handed girls would be the number of\n    # right-handed students minus the number of boys.\n\n    # Total number of boys in the class\n    boys = total_students - girls\n\n    # All boys are right-handed in the smallest case scenario\n    right_handed_boys = min(boys, right_handed)\n\n    # Calculate the smallest number of right-handed girls\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    return (20 - 19 + 18 - 17 + 16 - 15 + 14 - 13)\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    # Calculate the original price before the discount\n    original_price = 6400 / 0.20\n    # Calculate the amount saved\n    amount_saved = original_price - 6400\n    return amount_saved\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament each team plays every other team once.\n    # There are 6 teams, so a team will play 5 games.\n    # There are C(6, 2) = 6!/(4!2!) = 15 games in total.\n    \n    # Each game can only result in three possibilities - a win, a loss, or a tie.\n    # For a win/loss situation - there's a transfer of 2 points from the loser to the winner.\n    # Therefore, the total points do not change, they remain 2.\n    \n    # In a tie, each team gets 1 point, so the total point is also 2.\n    # Hence, for every game played, the total contribution in terms of points is 2.\n    \n    # Since there are 15 games, the total number of points awarded is 15 * 2.\n    total_points = 15 * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    # Year 2014 limits\n    year = \"2014\"\n    days_count = 0\n    \n    # Generate all unique day and month combinations\n    for month_day in permutations('001122', 4): \n        month = int(''.join(month_day[:2]))\n        day = int(''.join(month_day[2:]))\n        # Check for valid month and day\n        if 1 <= month <= 12:\n            if month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:\n                days_count += 1\n            elif month in [4, 6, 9, 11] and 1 <= day <= 30:\n                days_count += 1\n            elif month == 2 and 1 <= day <= 28:\n                days_count += 1\n    \n    return days_count\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    per_minibus = 8\n\n    minibuses_needed = (children + per_minibus - 1) // per_minibus\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    # Using simple arithmetic since the problem is straightforward\n    sum_result = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return sum_result\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # To ensure she has 4 different coloured marbles, she could draw all marbles of one color plus all but one marble of another color.\n    # In the worst case, Jane could pick all of the most numerous of one color, then all of the next most numerous, and so on, until she gets one of the last color.\n    # That is, she could pick all 7 green, then all 6 blue, then all 4 red and would be forced to get an orange in her next draw.\n    \n    # Drawing all greens, blues, and reds:\n    total_draws = 7 + 6 + 4\n    \n    # She must draw one more to ensure she has an orange.\n    total_draws += 1 \n    \n    return total_draws\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for i in range(1, 101):\n        if (i % 2 == 0) and (i % 3 == 0) and (i % 5 == 0) and (i % 7 == 6):\n            return i\n    return None\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count_five = 0\n    n = 1\n    while count_five < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_five += 1\n            temp_n //= 5\n    return n - 1  # Subtract 1 because we will be one step ahead when the while loop breaks\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import primerange\n\ndef solution():\n    # Generate a list of prime numbers up to a certain point\n    primes = list(primerange(1, 41))  # 41 is our target number, so we don't need primes greater than that\n    \n    # Initialize the answer variable\n    ans = None\n    \n    # Loop over the primes to find a and b\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                ans = a + b\n                break\n        if ans is not None:\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n    better_buy = \"4pc\" if price_per_pc_4pc < price_per_pc_6pc else \"6pc\"\n    return better_buy\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_cannot_swim, boys_swim, boys_cannot_swim = symbols(\n        'girls boys girls_swim girls_cannot_swim boys_swim boys_cannot_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_cannot_swim, 31 / 49)  # Ratio of girls who can swim to who cannot\n    equation3 = Eq(boys_swim, boys_cannot_swim - 120)  # Boys who can swim are 120 less than those who cannot\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation5 = Eq(girls, girls_swim + girls_cannot_swim)  # Total girls is the sum of swimmers and non-swimmers\n    equation6 = Eq(boys, boys_swim + boys_cannot_swim)  # Total boys is the sum of swimmers and non-swimmers\n\n    # Solve the system of equations\n    solutions = solve(\n        (equation1, equation2, equation3, equation4, equation5, equation6),\n        (girls, boys, girls_swim, girls_cannot_swim, boys_swim, boys_cannot_swim)\n    )\n\n    # Calculate the number of pupils who cannot swim\n    pupils_cannot_swim = solutions[girls_cannot_swim] + solutions[boys_cannot_swim]\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    remaining_after_phone = 1 - 0.75  # 75% on rent means 25% (1 - 0.75) is left\n    fraction_left = 1/5                # 1/5 of the salary is left after phone and rent\n\n    # Let total_salary be the total salary Kiera has for the month\n    # After buying the phone, she has total_salary - 740 left\n    # After paying the rent, she has (total_salary - 740) * remaining_after_phone left\n    # According to the problem, this amount equals fraction_left * total_salary\n    # Therefore, we have the equation:\n    # (total_salary - 740) * remaining_after_phone = fraction_left * total_salary\n\n    # Simplifying the equation to solve for total_salary:\n    total_salary = (740 * remaining_after_phone) / (1 - fraction_left * remaining_after_phone)\n    \n    return total_salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_basket = total_weight_with_apples - weight_with_two_apples\n    \n    return weight_of_basket - 3 * (weight_with_two_apples / 2)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    total_minutes = 24 * 60  # total minutes in a day\n    current_time_minutes = 2 * 60 + 31  # convert 02:31 to minutes\n    minutes_passed = 0\n\n    while True:\n        minutes_passed += 1\n        future_time_minutes = (current_time_minutes + minutes_passed) % total_minutes\n        hours = future_time_minutes // 60\n        minutes = future_time_minutes % 60\n        time_str = f\"{hours:02d}{minutes:02d}\"\n\n        if all(digit in time_str for digit in \"0123\"):\n            break\n\n    return minutes_passed\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    # Let x be the original amount of water in the bottle.\n    # After drinking half before class, the amount becomes x/2.\n    # After drinking another 100ml after class, the amount becomes x/2 - 100.\n    # According to the problem, there is 150ml left, which gives us the equation:\n    # x/2 - 100 = 150\n    # Solving for x gives us the original amount of water in the bottle.\n\n    remaining_after_class = 150 + 100  # The amount before drinking after class\n    original_amount = remaining_after_class * 2  # Multiply by 2 because he drank half before class\n\n    return original_amount\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet = 1\n    payout = 10\n\n    # Calculate the probability of the sum being greater than 10\n    # Possible sums greater than 10: 11 (5+6, 6+5) or 12 (6+6)\n    favorable_outcomes = 2 + 1\n    total_outcomes = 6 * 6  # Each die has 6 sides\n    \n    probability_win = favorable_outcomes / total_outcomes\n    expected_win = probability_win * payout\n\n    # Expected value from 1 game is the expected win minus the bet\n    expected_value = expected_win - bet\n\n    # Expected loss from 1 game\n    expected_loss = -expected_value\n\n    # Expected loss from 60 games\n    total_expected_loss = expected_loss * total_rolls\n\n    return total_expected_loss\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    equation1 = Eq(mary - 58, 3 * (lynn - 160))\n    equation2 = Eq(lynn, mary)\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    result_diamond = diamond(4, 2)\n    ans = triangle(result_diamond, 6)\n    return ans\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60\n    tickets_remaining = 28\n    percent_remaining = 100 - percent_sold\n\n    total_capacity = tickets_remaining / (percent_remaining / 100)\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_classes = 6\n    fifth_grade_students_per_class = 36\n    sixth_grade_classes = 3\n    sixth_grade_students_per_class = 38\n\n    total_students = (fifth_grade_classes * fifth_grade_students_per_class) + \\\n                     (sixth_grade_classes * sixth_grade_students_per_class)\n\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # To get the divisor, we need to add 1 to the quotient because the remainder is not zero.\n\n    # The minimum dividend is when the divisor is the smallest, which occurs when it's just one more than the quotient.\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jerry, devi = symbols('jerry devi')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((jerry + 4) / (devi + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (jerry, devi))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = 0\n    sign = 1\n    for i in range(64, 43, -2):\n        ans += sign * i\n        sign *= -1\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Since Serene mistook the tens place in the subtrahend as 5 instead of 3\n    # and the ones place as 3 instead of 2, the difference of numbers will be\n    # increased by 20 (from tens place) and decreased by 1 (from ones place).\n    # Therefore, the actual difference is 36 (false difference)\n    # minus (20 - 1), because the subtraction number was 20 larger and 1 smaller than it should have been.\n    \n    correct_difference = 36 - (20 - 1)\n    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n    num_jugs = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    blue_balls = 1\n    target_percentage = 0.90\n\n    # Find the number of red balls such that 90% of the balls are red.\n    red_balls_needed = target_percentage * (total_balls - blue_balls)\n\n    # Calculate the number of red balls to remove.\n    red_balls_to_remove = total_balls - blue_balls - red_balls_needed\n\n    return int(red_balls_to_remove)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    summation = 0\n    numerator = 1.0\n    for i in range(4):\n        numerator *= (100 - i)\n        denominator = 1.0\n        for j in range(i+1):\n            denominator *= (97 - j)\n        summation += numerator / denominator\n    return summation\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    num_matches = 220\n\n    weight_matches = total_weight_with_matches - empty_box_weight\n    weight_one_match = weight_matches / num_matches\n\n    return weight_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n    equation1 = Eq(cows + birds, 1300)      # Total number of animals is 1300\n    equation2 = Eq(4*cows + 2*birds, 3440)  # Total number of legs is 3440\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    import math\n    \n    mass1 = 500 # Mass of first car in kg\n    mass2 = 500 # Mass of second car in kg\n    velocity1 = 20 # Velocity of first car in m/s, north\n    velocity2 = 30 # Velocity of second car in m/s, west\n    \n    # Since both masses are equal, we can directly use velocities to find the components of the resultant velocity.\n    # To find the magnitude of the resultant velocity (v), we use Pythagorean theorem.\n    magnitude_of_velocity = math.sqrt(velocity1**2 + velocity2**2)\n    \n    # To calculate the direction, we find the angle theta with respect to the west-east axis (counter-clockwise is positive)\n    angle_with_west = math.degrees(math.atan2(velocity1, velocity2))\n    \n    return magnitude_of_velocity, angle_with_west\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3/4\n    \n    num_small_bags = remaining_after_tuesday / small_bag_weight\n    \n    return int(num_small_bags)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    greatest_number = 0\n    for number in range(100, 1000):\n        if number % 9 == 0 and number % 2 != 0:  # odd and divisible by 9\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                greatest_number = max(greatest_number, number)\n    ans = greatest_number\n    return ans\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    # After giving 28 pens to Ben, Jenny will have 83 - 28 pens\n    jenny_pens_after = jenny_pens - pens_given_to_ben\n\n    # Since they will have the same number of pens, this is also the number of pens Ben has initially\n    ben_pens_initially = jenny_pens_after\n\n    return ben_pens_initially\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    number_of_trees = 21\n    interval_of_trees = 2\n    interval_of_lamp_posts = 10\n    \n    # Total length of the road (including the end points)\n    total_road_length = (number_of_trees - 1) * interval_of_trees\n    \n    # Number of lamp posts needed = (Total road length / interval of lamp posts) + 1 (because we start and end with a lamp post)\n    num_lamp_posts = (total_road_length // interval_of_lamp_posts) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "{\n\"queId\": \"unique_question_identifier\",\n\"problem\": \"小明和小红两人在长$$100$$米的直线跑道上来回跑步，做体能训练，小明的速度为$$6$$米/秒，小红的速度为$$4$$米/秒．他们同时从跑道两端出发，连续跑了$$12$$分钟．在这段时间内，他们迎面相遇了多少次？\",\n\"trans_problem\": \"Xiaoming and Xiaohong are running back and forth on a straight track that is $$100$$ meters long to do physical training, with Xiaoming running at a speed of $$6$$ meters per second and Xiaohong at $$4$$ meters per second. They start at the same time from opposite ends of the track and run continuously for $$12$$ minutes. How many times do they meet face to face in this period?\"\n}"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3   # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    \n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # Loop through all permutations of the digits 0-9 for each letter/shape\n    for p in permutations(range(10), 6):\n        s, u, n, m, o, t = p\n        # Form the numbers represented by the shapes and the letters keeping in mind the value of 'sun'\n        sun = s*100 + u*10 + n\n        moon = m*100 + o*10 + o\n        star = s*100 + t*10 + a\n        # Skip if any number has a leading 0 or if the numbers are not unique\n        if s == 0 or m == 0 or any(len(set(x)) != len(str(x)) for x in [sun, moon, star]):\n            continue\n        # Check if the arithmetic is correct: SUN + MOON - STAR = SUN\n        if sun + moon - (s*100 + t*10 + a) == sun:\n            return (s*100 + t*10 + a) // 100  # One triangle equals 100s + 10t + a, so the value of one triangle is 's'\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n    complete_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n    \n    total_sum = complete_patterns * pattern_sum\n    total_sum += sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total = 515  # Convert to pence for uniformity\n    coffee_cost = 369  # in pence\n    milk_cost = 89  # in pence\n    \n    sugar_cost = total - coffee_cost - milk_cost  # Calculate the cost of sugar in pence\n    sugar_cost_pounds = sugar_cost / 100  # Convert pence to pounds\n    \n    return sugar_cost_pounds\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum number of balls Sheila can take without having 4 balls of the same color:\n    # 3 blue + 3 orange + 2 yellow = 8 balls\n    # Upon taking one more ball, she is guaranteed to have 4 balls of at least one color\n    max_without_4_same = 3 + 3 + 2\n    balls_to_take_for_4_same = max_without_4_same + 1\n\n    return balls_to_take_for_4_same\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_avg, group_number = symbols('original_avg group_number')\n\n    # Average = Sum of weights / Number of people\n    # Equation 1: original group's sum of weights is (original_avg * group_number)\n    # Equation 2: after Aaron joins, new sum of weights is (original_avg * group_number + 45)\n    # New average after Aaron joins is 61 kg: (original_avg * group_number + 45) / (group_number + 1) = 61\n    equation1 = Eq((original_avg * group_number + 45) / (group_number + 1), 61)\n\n    # Equation 3: after Ben joins, new sum of weights is (original_avg * group_number + 45 + 71)\n    # New average after Ben joins is 62 kg: (original_avg * group_number + 45 + 71) / (group_number + 2) = 62\n    equation2 = Eq((original_avg * group_number + 45 + 71) / (group_number + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_avg, group_number))\n\n    return solutions[original_avg]\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) / 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    orange_weight = 4.1\n    mango_weight = 2\n\n    total_cost = (orange_price_per_kg * orange_weight) + (mango_price_per_kg * mango_weight)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "Input:\n{\"queId\": \"unknown\", \"problem\": \"奥数书上的每一页都印有一个页码，由$$1$$开始，直至最后一页．小奥翻开奥数书，发现左右两页的页码之积是$$2970$$．问较大的一个页码是多少？\"}\nOutput:\n{\"queId\": \"unknown\", \"problem\": \"奥数书上的每一页都印有一个页码，由$$1$$开始，直至最后一页．小奥翻开奥数书，发现左右两页的页码之积是$$2970$$．问较大的一个页码是多少？\", \"trans_problem\": \"Every page in a math competition book is numbered starting with $$1$$ up to the last page. Little Ao opens the book and finds that the product of the page numbers on the left and right pages is $$2970$$. What is the larger page number?\"}"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "{\n    \"queId\": \"Your_Question_ID\", \n    \"problem\": \"将自然数$$1$$，$$2$$，$$3$$，$$4\\cdots $$依次写下去，若最终写到$$2017$$，成为$$1234\\cdots 20162017$$，那么这个自然数除以$$36$$余~\\\\uline{~~~~~~~~~~}~.\", \n    \"trans_problem\": \"Write down the natural numbers $$1$$, $$2$$, $$3$$, $$4$$, ..., in order, until you finally write down to $$2017$$, forming the number $$1234\\cdots 20162017$$. What is the remainder when this number is divided by $$36$$?\"\n}"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rate of A and B\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n    \n    # Total work done by A and B together in 4 days\n    work_done = 4 * (A_rate + B_rate)\n    \n    # Remaining work to be done after 4 days\n    remaining_work = 1 - work_done\n    \n    # Time taken by B to complete the remaining work alone\n    days_for_B_to_finish = remaining_work / B_rate\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Using the Golden Pyramid Method, we calculate the sum of a series from 1 to 13,\n    # and then double it (since the series is mirrored) and subtract the peak number (13),\n    # as the peak occurs only once in the pyramid.\n    \n    n = 13  # The peak number of the pyramid sequence\n    # Sum of a series from 1 to n is given by n * (n + 1) / 2\n    sum_to_n = n * (n + 1) // 2\n    # Double the sum and subtract the peak number\n    total_sum = 2 * sum_to_n - n\n    \n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    price_reduction = original_price - reduced_price\n    percentage_reduction = (price_reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    boys = girls = 0\n    side_length = 1  # starting from the smallest possible square size\n    \n    while True:\n        if side_length % 2 == 0:\n            girls_layer = side_length // 2\n            boys_layer = girls_layer + 1\n        else:\n            boys_layer = (side_length + 1) // 2\n            girls_layer = boys_layer - 1\n\n        boys = boys_layer ** 2\n        girls = girls_layer ** 2\n        \n        if boys - girls == total_diff:\n            break\n        \n        side_length += 1\n\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    \n    num_bottles = 1000\n    # We need to find the minimum number of test tubes that can test all possibilities.\n    # The test is binary in nature (poison/no poison), so we should find the minimum number\n    # of binary (base-2) digits (bits) needed to represent all bottles uniquely. That is,\n    # we are looking for the least number n such that 2^n >= num_bottles.\n    num_test_tubes = math.ceil(math.log2(num_bottles))\n    \n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducks and geese have 2 legs each, lambs have 4 legs each.\n    duck_legs = 4 * 2\n    geese_legs = 2 * 2\n    # Total legs subtracting the known quantity of duck and geese legs.\n    remaining_legs = 36 - (duck_legs + geese_legs)\n    # Each lamb has 4 legs.\n    num_lambs = remaining_legs // 4\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    # 1 litre is equivalent to 1000 millilitres.\n    litres_to_millilitres = 1000\n    \n    # Given: 2.5 Litres\n    given_litres = 2.5\n    \n    # Calculation: Convert litres to millilitres\n    n = given_litres * litres_to_millilitres\n    \n    return int(n)\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    # On the fourth day, he ate 1/4 of the remaining sweets, so before that he had 4/3 times the sweets\n    before_fourth_day = remaining_sweets * (4/3)\n    # On the third day, he ate 1/5 of the remaining sweets, so before that he had 5/4 times the sweets\n    before_third_day = before_fourth_day * (5/4)\n    # On the second day, he ate 1/6 of the remaining sweets, so before that he had 6/5 times the sweets\n    before_second_day = before_third_day * (6/5)\n    # On the first day, he ate 1/7 of the number of sweets, so initially he had 7/6 times the sweets\n    initial_sweets = before_second_day * (7/6)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    Emerald_Remaining = 3/4*(x/2 - 8) - 4\n    Hebe_Ate = Emerald_Remaining - 42\n\n    equation = Eq(Hebe_Ate, 1/4*Emerald_Remaining)\n\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    # Using the arithmetic sequence formula to find the number of terms (kids):\n    # last_term = first_term + (num_terms - 1) * difference\n    # Solving for num_terms gives us:\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Let n be the number of teams in the league\n    n = Symbol('n', integer=True)\n\n    # Each team plays each of the other teams twice, so there are n*(n-1) matches in total\n    # But since each match is counted twice (once for home and once for away), we divide by 2\n    equation = Eq(n * (n - 1) / 2, 30)\n\n    # Solve the equation for the number of teams\n    num_teams = solve(equation, n)\n\n    # Only the positive number of teams makes sense in this context\n    return [t for t in num_teams if t > 0][0]\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    uniforms_made_in_5_days = 720\n    total_uniforms = 3600\n\n    # Calculate the number of days it takes to make one set\n    days_per_set = 5 / uniforms_made_in_5_days\n\n    # Calculate the total days it will take\n    total_days = total_uniforms * days_per_set\n\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def climb_ways(steps):\n        if steps == 1:\n            return 1\n        if steps == 2:\n            return 2\n        return climb_ways(steps - 1) + climb_ways(steps - 2)\n    \n    # Ways to reach the fifth step\n    ways_to_5 = climb_ways(5)\n    \n    # Ways to go from fifth to the tenth step\n    ways_from_5_to_10 = climb_ways(10 - 5)\n    \n    # Total ways\n    ans = ways_to_5 * ways_from_5_to_10\n    \n    return ans\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n\n    # Equation: girls = 3 * boys - 21\n    equation = Eq(girls, 3 * boys - 21)\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # Prime factorization of the given product to find the power of 2 and 5\n    # since 0s at the end of the product are determined by the pair of 2 and 5 factors\n    \n    # Prime factors\n    two_power = 3 + 1 + 0 + 3  # 2^3 * 2 * 2^0 * 2^3\n    five_power = 0 + 0 + 1 + 2  # 5^0 * 5^0 * 5^1 * 5^2\n    \n    # Number of 0s is equal to the minimum of power of 2 and 5 in the factorization\n    ans = min(two_power, five_power)\n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for n in range(40, 51):\n        if (n**0.5).is_integer():\n            ans = n\n            break\n    return ans\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = initial_volume - (cup_volume * cups_poured)\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + sister + 20, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smallest of the four consecutive natural numbers\n    # Therefore, the four numbers are x, x+1, x+2, x+3\n    x = symbols('x')\n    equation = Eq(x * (x + 1) * (x + 2) * (x + 3), 3024)\n\n    solutions = solve(equation)\n    \n    # Out of the solutions for x, we take the positive integer values since we deal with natural numbers\n    # Then we add 3 to the greatest value to find the largest of the four consecutive numbers\n    largest_number = max(filter(lambda sol: sol.is_real and sol > 0, solutions)) + 3\n\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from math import lcm\n\ndef solution():\n    # Least Common Multiple (LCM) of the pack sizes is needed for equal number of each pack\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Since we need at least 1000 markers, we divide and then ceil the result to see how many lcm multiples we need\n    num_packs = -(-1000 // pack_lcm)  # ceiling division\n\n    # The number of marker packs of each size is the number of multiplications of lcm needed to surpass 1000\n    total_packs = num_packs * 4  # he buys 4 different packs each time\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    students = 10\n    handshakes = students * (students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Anne's and Maria's apples\n    anne, maria = symbols('anne maria')\n\n    # Maria has $20 apples more than Anne\n    equation1 = Eq(maria, anne + 20)\n\n    # Altogether they have $44 apples\n    equation2 = Eq(anne + maria, 44)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    result_20_of_90 = 0.20 * 90\n    result_90_of_20 = 0.90 * 20\n    difference = result_20_of_90 - result_90_of_20\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    d = symbols('d') # d is the common difference, the number of pages more read each day\n    n = symbols('n') # n is the number of terms in the sequence, i.e., the number of days\n    \n    # This is an arithmetic sequence problem where the first term is 30, the last term is 70,\n    # and the sum of the sequence is 550. We can then establish two equations:\n    # Equation for the sum of an arithmetic sequence: n/2 * (first_term + last_term) = total pages\n    equation1 = Eq(n/2 * (30 + 70), 550)\n    \n    # Equation for the nth term of an arithmetic sequence: first_term + (n - 1)*d = last_term\n    equation2 = Eq(30 + (n - 1)*d, 70)\n    \n    # We will solve these two equations for n and d\n    solutions = solve((equation1, equation2), (n, d))\n    \n    # Since we are interested in the value of d, which is the common difference\n    return solutions[d]\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_purchase = 416\n    afternoon_purchase = 248\n    difference = morning_purchase - afternoon_purchase\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # g\n    \n    water_amount = (water_ratio / orange_ratio) * orange_amount\n    \n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    required_average = 8.5\n    total_required_score = required_average * 5\n    current_scores = [7.9, 8.3, 8.8, 8.6]\n    current_total = sum(current_scores)\n    score_needed = total_required_score - current_total\n\n    return score_needed\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert repeating decimals to fractions\n    # For repeating decimal 0.1(1)99251(7), convert it to the form A/9999... where A is integer\n    # Let x = 0.1(1)99251(7)\n    # Then 10x = 1(1).99251(7) and 1000000x = 119925(1).7 repeated\n    # Therefore, 999990x = 119925(1).7 repeated - 1(1).99251(7)\n    # Simplified to x = (1199251 - 12) / 999990 = 1199239 / 999990\n    numerator_1 = 1199239\n    denominator_1 = 999990\n\n    # For repeating decimal 0.2(3)456(7), convert it to the form A/9999... where A is integer\n    # Let y = 0.2(3)456(7)\n    # Then 10y = 2(3).4567 and 100000y = 23456(7). repeated\n    # Therefore, 99990y = 23456(7). repeated - 2(3).4567\n    # Simplified to y = (234567 - 23) / 99990 = 234544 / 99990\n    numerator_2 = 234544\n    denominator_2 = 99990\n\n    # To find when they have the same decimal, we need to equate both fractions\n    n = 1  # start with the first decimal place\n    while True:\n        # Check if the decimal parts of both numbers are the same at the nth decimal place\n        if (numerator_1 * 10**n) % denominator_1 == (numerator_2 * 10**n) % denominator_2:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000  # Principal amount\n    total_interest = 816  # Total interest for two years\n    rate = symbols('rate')  # The annual interest rate we want to find\n\n    # Total interest for two years is the sum of the interest for the first and the second year\n    # First year interest: principal * rate\n    # Second year interest: (principal + first year interest) * rate\n    # since interest is not compounded, second year interest is the same as first year\n    equation = Eq(principal * rate + principal * rate, total_interest)\n\n    # Solving for the rate\n    solution = solve(equation, rate)\n\n    # Convert from symbolic to numeric and return interest rate as a percentage\n    interest_rate = solution[0] * 100\n\n    return interest_rate\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    # Johnny's incorrect working: 9 * 2 = 18; 18 + 4 = 22\n    # Identify Johnny's error\n    # The correct working should be: (quotient * divisor) + remainder\n    correct_product = quotient * divisor\n    correct_sum = correct_product + remainder\n    \n    # Check if Johnny's final answer is correct or not\n    is_correct = (correct_product == 18) and (correct_sum == 22)\n    \n    return not is_correct, correct_sum\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    answer = 43\n    original_number = (answer - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Hannah by h.\n    h = symbols('h')\n\n    # The speed of Peter is 15 cm/s faster than Hannah, so Peter's speed is h + 15.\n    p = h + 15\n\n    # Given ratio of time taken by Peter (t_p) and Hannah (t_h) is 3:4.\n    # Since time is inversely proportional to speed when distance is constant,\n    # we can set up a ratio of their speeds as 4:3 (the inverse of the time ratio).\n    # Hence, the equation representing the speed ratio is 4h = 3(p)\n\n    # Writing the equation for the speed ratio\n    eq = Eq(4 * h, 3 * (h + 15))\n\n    # Solving the equation to find the value of h (speed of Hannah)\n    h_speed = solve(eq, h)[0]\n\n    return h_speed\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Equations based on the problem statement\n    eq1 = Eq(mango + pear, 3.40)\n    eq2 = Eq(mango + apple, 3.80)\n    eq3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of fifty-cent coins as f and one-dollar coins as d\n    f, d = symbols('f d', integer=True)\n\n    # Given 2/7 of the coins are fifty-cents coins\n    # Hence, the total coins at first is f + d\n    # The equation becomes: f = 2/7 * (f + d)\n\n    # After receiving 10 one-dollar coins and 5-dollars worth of fifty-cent coins (which is 10 fifty-cent coins)\n    # f + 10 is the total number of fifty-cent coins Owen has\n    # d + 10 is the total number of one-dollar coins Owen has\n    \n    # Owen ends with twice as many one-dollar coins as fifty-cent coins\n    # This gives us the equation: d + 10 = 2 * (f + 10)\n\n    # Now we set up the system of equations:\n    equation1 = Eq(f, 2/7 * (f + d))\n    equation2 = Eq(d + 10, 2 * (f + 10))\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    # The sum of fifty-cent coins (f) and one-dollar coins (d) gives the total number of coins Owen had at first\n    total_coins = solutions[f] + solutions[d]\n\n    return total_coins\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_blank_time = 35\n\n    short_answer_time = total_time - multiple_choice_time - fill_blank_time\n\n    return short_answer_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # meters per second\n    cross_time = 45  # seconds\n    train_length = 850  # meters\n\n    # Distance covered when train crosses the tunnel entirely is train_length + tunnel_length\n    # This distance equals speed * time\n    tunnel_length = (train_speed * cross_time) - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    \n    max_parts_by_circles = circles * (circles - 1) + 2\n    max_parts_by_line = circles + 1\n    \n    max_parts_total = max_parts_by_circles + max_parts_by_line\n    \n    return max_parts_total\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "Input:\n{\"queId\": \"unique_id_123\", \"problem\": \"甲班和乙班共$$83$$人，乙班和丙班共$$86$$人，丙班和丁班共$$88$$人．问：甲班和丁班共多少人？\"}\nOutput:\n{\"queId\": \"unique_id_123\", \"problem\": \"甲班和乙班共$$83$$人，乙班和丙班共$$86$$人，丙班和丁班共$$88$$人．问：甲班和丁班共多少人？\", \"trans_problem\": \"Classes A and B have a total of $$83$$ people, classes B and C have $$86$$ people together, and classes C and D have $$88$$ people combined. How many people are there in classes A and D together?\"}"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_pocket_money = 55\n    saved_money = 32.50\n    spent_money = total_pocket_money - saved_money\n    spent_on_transport = spent_money / 3  # since food is twice of transportation\n    spent_on_food = 2 * spent_on_transport\n    return spent_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Given data\n    first_3_tons_price = 4  # dollars per ton for the first 3 tons\n    fixed_service_fee = 4   # dollars\n    additional_ton_price = 3  # dollars for each additional ton\n    total_money = 109  # dollars\n\n    # Calculate the money left after fixed charges for the first 3 tons and service fee\n    money_left = total_money - (first_3_tons_price * 3 + fixed_service_fee)\n\n    # Calculate the number of additional tons she can use with the money left\n    additional_tons = money_left // additional_ton_price  # using floor division to find the maximum whole tons\n    \n    # Total tons is the sum of first 3 tons and additional tons\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    # H can be found by simplifying the right-hand side of the equation\n    # and then dividing by 7\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    carl, daniel = symbols('carl daniel')\n    \n    # Bala had 320 more cookies than Daniel\n    bala = daniel + 320\n    \n    # Bala had 1/2 as many cookies as Amelia, Carl, and Daniel\n    eq1 = Eq(bala, (amelia + carl + daniel) / 2)\n    \n    # Carl had 3/4 as many cookies as Amelia, Bala, and Daniel\n    eq2 = Eq(carl, (amelia + bala + daniel) * 3 / 4)\n    \n    # Total number of cookies\n    eq3 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    solutions = solve((eq1, eq2, eq3), (carl, daniel))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_possible_divisor = remainder + 1\n    smallest_possible_dividend = quotient * smallest_possible_divisor + remainder\n    return smallest_possible_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let q represent the rate at which the quick gardener works\n    # Let l represent the rate at which the lazy gardener works\n    # q + l is the rate at which they work together\n    # It takes the quick gardener 12 hours to mow the lawn, so q = 1/12\n    # It takes both gardeners 8 hours to mow the lawn together, so q + l = 1/8\n    # We want to find the value of 1/l, which is the time the lazy gardener would take to mow the lawn alone\n    \n    from sympy import symbols, Eq, solve\n\n    l = symbols('l')\n    q = 1 / 12\n    combined_rate = 1 / 8\n    \n    # Equation representing combined rates of quick and lazy gardener\n    equation = Eq(q + l, combined_rate)\n    \n    # Solving for the rate of the lazy gardener\n    lazy_solution = solve(equation, l)\n    \n    # The time taken by the lazy gardener is the reciprocal of his rate\n    lazy_time = 1 / lazy_solution[0]\n\n    return lazy_time\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples / 3 + oranges / 2, 100)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    total_fruits = solutions[apples] + solutions[oranges]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    eve_candy = 12\n    alice_candy = 9\n    irene_candy = 0\n    total_candy = eve_candy + alice_candy + irene_candy\n    girls = 3\n    \n    each_gets = total_candy // girls\n    return each_gets\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let's denote the number of tomatoes Matthew had initially as m.\n    # After giving 7 tomatoes, Belinda has 36 - 7 tomatoes left.\n    belinda_after = 36 - 7\n    # They now have the same number of tomatoes.\n    # So Matthew had (belinda_after - 7) tomatoes initially.\n    matthew_initial = belinda_after - 7\n    \n    return matthew_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    cost_per_dress = 5\n    cost_per_skirt = 3\n    remaining = 5 * x\n\n    # Equation: Initial amount - 5x (for dresses) - 3x (for skirts) = 5x (remaining)\n    equation = Eq(initial_amount - cost_per_dress * x - cost_per_skirt * x, remaining)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5  # Train interval for the green line in minutes\n    red_line_interval = 6    # Train interval for the red line in minutes\n    \n    # Find the least common multiple of the two train intervals\n    intervals_lcm = lcm(green_line_interval, red_line_interval)\n    \n    # Calculate hours and minutes from the least common multiple\n    hours = intervals_lcm // 60\n    minutes = intervals_lcm % 60\n    \n    # The trains start at 5 am, so we add the hours to 5 and adjust for the 24-hour clock\n    next_common_time_hour = 5 + hours\n    next_common_time_minute = minutes\n    \n    return f\"{next_common_time_hour:02}:{next_common_time_minute:02}\"\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    product = 1\n    ans = 0\n    for i in range(2, 15, 2):\n        product *= i\n        ans += product\n      \n    # Adding the last term which is only multiplied by 14\n    ans += product // 13 * 14\n    \n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug_ml = jug_capacity_ml / 2\n    cup_capacity_ml = half_jug_ml / 3\n\n    return cup_capacity_ml\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Assuming walking speed is constant, the time taken to pass 100 trees is 3 minutes\n    # Distance between each tree is 3 meters, so distance between the first tree to the 101th tree is 300 meters\n    # Speed = Distance / Time = 300 meters / 3 minutes = 100 meters/minute\n    speed = 300 / 3\n    \n    # The distance between the school and Olivia's home is 4000 meters\n    # Time = Distance / Speed = 4000 meters / (100 meters/minute) = 40 minutes\n    time_to_school = 4000 / speed\n    \n    return time_to_school\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "{\n  \"queId\": \"unknown\",\n  \"problem\": \"\\\\uline{小郑}有$$2$$個長方體和$$3$$個正方體，合共有多少個面？\",\n  \"trans_problem\": \"Xiao Zheng has $$2$$ rectangular solids and $$3$$ cubes. How many faces do they have in total?\"\n}"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    a, b = symbols('a b')\n    \n    # Create the equations based on the given problem\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n    \n    # Solve the equations for the variables\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[b]\n    \n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the sum of squares based on the formula for the sum of cubes\n    # of natural numbers: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    # Since the sequence is 4, 8, 12, ..., 124, which is 4 times an arithmetic\n    # sequence 1, 2, 3, ..., 31, we need to square the elements and then multiply\n    # by 4², which is 16, and take the sum.\n    \n    # The sum of the first n natural numbers is n(n + 1) / 2\n    # Hence, we need to compute (n(n + 1) / 2)² for n = 31 and multiply by 16\n    \n    n = 31\n    sum_of_squares = 16 * (n * (n + 1) // 2) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i ** 2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # The trade ratios are:\n    # 5 fish for 2 rabbits (Owen to Oscar)\n    # 4 rabbits for 7 packs of wheat (Oscar to Dennis)\n    # We need to find how many fish for 14 packs of wheat (Owen to Dennis)\n    \n    # First, find out how many fish equals 1 rabbit by inverting the first trade ratio\n    fish_per_rabbit = 5 / 2\n    \n    # Then how many rabbits for 7 packs of wheat by inverting the second trade ratio\n    rabbits_per_7_wheat = 4 / 7\n    \n    # Now, we calculate how many fish equal 7 packs of wheat by combining the two ratios\n    fish_per_7_wheat = fish_per_rabbit * (1 / rabbits_per_7_wheat)\n    \n    # Since we want to find out for 14 packs of wheat, we double the number of fish for 7 packs of wheat\n    fish_per_14_wheat = fish_per_7_wheat * 2\n    \n    return fish_per_14_wheat\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3]  # Representing the 3 entrances\n    count = 0\n    for p in permutations(entrances*4, 4):  # Repeat entrances 4 times for each person\n        # We ensure each entrance is used at least once by checking the set length\n        if len(set(p)) == 3:\n            count += 1\n    # Because the order matters, we divide by the number of ways that the 3 entrances\n    # could have been repeated since they are considered the same.\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_score = 23\n    score_per_correct = 5\n    deduction_per_wrong = -2\n    total_questions = 6\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * score_per_correct + wrong_answers * deduction_per_wrong\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c for the number of cows and g for the number of goats\n    c, g = symbols('c g')\n\n    # Equation 1: c = 0.65 * (c + g), as 65% of the animals were cows\n    eq1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats are added, the percentage of cows increases by 20%\n    # Thus, cows become 65% + 20% = 85% of the total\n    # Also, the number of goats doubles, which means the new number of goats is 2g\n    # The total number of animals after adding is c + g + 240\n    # Equation 2: c + 240 = 0.85 * (c + g + 240), because after adding 240 animals, 85% are cows\n    eq2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    \n    total_time = time_per_drawing * number_of_drawings\n    \n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    for num_cookies in range(1, 8*9):  # The least common multiple of 8 and 9 is the upper bound\n        if num_cookies % 8 == 0 and num_cookies % 9 == 1:\n            return num_cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "Input:\n{\n  \"queId\": \"unique_question_id\",\n  \"problem\": \"黑板上写有数$$0$$．每次操作可以将这个数增加$$1$$，$$2$$，$$3$$，$$\\cdots \\cdots $$，或$$9$$，使得结果始终不能是$$10$$的倍数．那么，经过$$2015$$次操作后，可能得到的最大的数是多少？\"\n}\nOutput:\n{\n  \"queId\": \"unique_question_id\",\n  \"problem\": \"黑板上写有数$$0$$．每次操作可以将这个数增加$$1$$，$$2$$，$$3$$，$$\\cdots \\cdots $$，或$$9$$，使得结果始终不能是$$10$$的倍数．那么，经过$$2015$$次操作后，可能得到的最大的数是多少？\",\n  \"trans_problem\": \"A number $$0$$ is written on the blackboard. Each operation can increase this number by $$1$$, $$2$$, $$3$$, \\ldots, or $$9$$, ensuring the result is never a multiple of $$10$$. After $$2015$$ operations, what is the largest possible number that can be obtained?\"\n}"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    num1 = 2.6\n    num2 = 4.8\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_payment = total_cost - discount\n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2  # Number of books in each case\n    total_books_in_six_cases = books_per_case * 6\n    \n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    import math\n\n    # Since the boys must be at each end, there are 2! ways to arrange the boys.\n    boys_permutations = math.factorial(2)\n\n    # For the three girls in the middle, there are 3! ways to arrange them.\n    girls_permutations = math.factorial(3)\n\n    # By the multiplication principle, we multiply the number of permutations of boys with\n    # the number of permutations of girls to get the total number of arrangements.\n    total_arrangements = boys_permutations * girls_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for tom_age in ages:\n        if tom_age % 3 == 0:\n            for jason_age in ages:\n                if jason_age < tom_age:\n                    for adam_age in ages:\n                        if adam_age != tom_age and adam_age != jason_age:\n                            return adam_age\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    num_str = '2023'\n    while True:\n        num = int(num_str * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    return 224 - 75\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4*b - 9, 7)\n    solution = solve(equation, b)\n    return solution[0]\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    max_apples_avril = 28 - (1+2+3+4+5)  # Subtract the smallest number of apples that 5 other children can get\n    return max_apples_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # We can have at most 2 balls of the same color before we are forced to get a different color\n    # There are 3 colors, so after drawing 2 balls of each color (total of 2*3 = 6),\n    # the next ball we draw (the 7th one) has to be of a different color.\n    \n    # This happens in the worst case scenario where we draw two balls of first color,\n    # then two balls of the second color, then two balls of the third color.\n    # The next ball has to be the third one as we already have two of each kind.\n    \n    # 2 balls of the first color\n    # + 2 balls of the second color\n    # + 2 balls of the third color\n    # + 1 more ball to guarantee three different colors\n    max_balls_to_draw = (2 * 3) + 1\n    return max_balls_to_draw\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    cost_of_laptop = total_money * fraction_used\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "Input:\n{\n  \"queId\": \"unknown\", \n  \"problem\": \"满足不等式$$\\\\frac{2}{3}<\\\\frac{5}{n}<\\\\frac{3}{m}$$的有序整数对$$(m,n)$$的个数是~\\\\uline{~~~~~~~~~~}~个．\"\n}\nOutput:\n{\n  \"queId\": \"unknown\",\n  \"problem\": \"满足不等式$$\\\\frac{2}{3}<\\\\frac{5}{n}<\\\\frac{3}{m}$$的有序整数对$$(m,n)$$的个数是~\\\\uline{~~~~~~~~~~}~个．\",\n  \"trans_problem\": \"The number of ordered integer pairs $$(m,n)$$ that satisfy the inequality $$\\\\frac{2}{3}<\\\\frac{5}{n}<\\\\frac{3}{m}$$ is ____.\"\n}"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    final_average = 70\n    total_initial = initial_average * 2\n    total_final = final_average * 3\n\n    new_number = total_final - total_initial\n\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Convert times to datetime objects for easier calculation\n    school_leave_time = datetime.strptime('15:22', '%H:%M')\n    bus_catch_time = datetime.strptime('16:01', '%H:%M')\n    home_arrival_time = datetime.strptime('16:35', '%H:%M')\n    \n    # Calculate the time spent walking to the bus stop\n    walk_to_bus_stop = (bus_catch_time - school_leave_time).total_seconds()\n    \n    # Calculate the bus trip time in seconds\n    bus_trip_time = 18 * 60  # 18 minutes in seconds\n    \n    # Calculate time from bus drop off to home in seconds\n    walk_from_bus_to_home = (home_arrival_time - (bus_catch_time + timedelta(seconds=bus_trip_time))).total_seconds()\n    \n    # Calculate the total walking time in minutes\n    total_walking_time = (walk_to_bus_stop + walk_from_bus_to_home) / 60  # convert seconds to minutes\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "{\n\"queId\": \"<unknown>\",\n\"problem\": \"$$2015$$减去它的$$\\frac{1}{2}$$，再减去余下的$$\\frac{1}{3}$$，再减去余下的$$\\frac{1}{4}$$，\\ldots，最后一次减去余下的$$\\frac{1}{2015}$$，最后得到的数是？\",\n\"trans_problem\": \"Subtract $$\\frac{1}{2}$$ of $$2015$$ from the original number, then subtract $$\\frac{1}{3}$$ of the remainder, then subtract $$\\frac{1}{4}$$ of the new remainder, and so on, until finally subtracting $$\\frac{1}{2015}$$ of the last remainder. What is the resulting number?\"\n}"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken, lisa, amount = symbols('ken lisa amount')\n    \n    # Ken had $15 more than Lisa at first\n    initial_condition = Eq(ken, lisa + 15)\n    \n    # After giving \"amount\" to Lisa, Ken had $21 less\n    after_transaction = Eq(ken - amount, lisa + amount - 21)\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, after_transaction), (ken, lisa, amount))\n    \n    return solutions[amount]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n\n    # The number of cookies eaten each day forms an arithmetic sequence\n    # x, x+6, x+12, x+18, x+24\n    # The sum of this arithmetic sequence over 5 days is 100\n    # (x + (x + 24))/2 * 5 = 100\n    # Simplify and solve for x\n    \n    equation = Eq((x + (x + 24)) / 2 * 5, 100)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    numbers = []\n    # Generating the sequence\n    for i in range(1, 9):\n        numbers.extend([i] * (i + 1))\n\n    # Length of the sequence\n    n = len(numbers)\n\n    # Sorting the sequence is not necessary since it is already\n    # constructed in a sorted manner. We just find the median\n    if n % 2 == 0:\n        median = (numbers[(n // 2) - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    blue = 18\n    red = 6\n    orange = 8\n    \n    # To ensure getting 2 red marbles, we must consider the worst case scenario.\n    # This means we could end up taking all the non-red marbles before we get our second red marble.\n    # We can take all blue and orange marbles, plus one red, and not be sure to have 2 reds.\n    # Thus, we need to take one more marble to be certain to have 2 red marbles.\n\n    total_non_red = blue + orange  # Total number of non-red marbles\n    ans = total_non_red + 1  # Take all non-red marbles and one red to ensure getting the second red\n    \n    return ans\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    largest_num = int(''.join(sorted(digits, reverse=True)))\n    smallest_num = int(''.join(sorted(digits)))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        if (i % 2 == 0) ^ (i % 3 == 0):\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_row = 10\n    fourth_row = 25\n    total_rows = 25\n\n    # Calculate the common difference of the progression\n    common_diff = (fourth_row - first_row) / (4 - 1)\n    \n    # Calculate the number of athletes in the last row\n    last_row = first_row + (total_rows - 1) * common_diff\n    \n    # Calculate the sum of an arithmetic series\n    total_athletes = (first_row + last_row) * total_rows / 2\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # The probability of winning by switching is 2/3, whereas the probability of winning without switching is 1/3.\n    # If you switch gates, you will win the car if your initial choice was wrong, which had a probability of 2/3.\n    # It's always better to switch, so choose gate 2.\n    return 2\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "Input:\n{\n  \"problem\": \"把$$61$$本书分给某个班级的学生，如果其中至少有$$1$$人能分到至少$$3$$本书，那么这个班最多有多少人？\"\n}\nOutput:\n{\n  \"problem\": \"把$$61$$本书分给某个班级的学生，如果其中至少有$$1$$人能分到至少$$3$$本书，那么这个班最多有多少人？\",\n  \"trans_problem\": \"How many students at most can there be in a class if $$61$$ books are distributed among them, given that at least $$1$$ student receives at least $$3$$ books?\"\n}"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 2\n    while True:\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    sum = 0\n    for i in range(1, 32):\n        if i < 31:\n            sum += i * (i + 1)\n    return sum\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_sum = symbols('original_sum')\n    \n    # Let's define the equations based on the given information\n    equation1 = Eq(original_sum - 75, original_sum * (3/4))  # David spent $75\n    equation2 = Eq((original_sum - 75) * (3/4), original_sum * (2/3))  # He spent 1/4 of the remaining on batteries and was left with 1/3 of the original sum\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_sum))\n\n    return solutions[original_sum]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Given that 7 trainers catch 7 pokemons in 7 minutes, \n    # the rate is 1 pokemon per trainer per 7 minutes.\n    # To catch 49 pokemon in 49 minutes is the same rate, \n    # because the time and the number of pokemon are both scaled by 7.\n    # So, we still need 7 trainers.\n    return 7\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "def solution():\n    from math import factorial as fact\n    \n    # Total books\n    books = 7\n    \n    # Since each student gets exactly one book, we choose 1 book for each\n    # of the 3 students and don't care about the order (combination, not permutation).\n    ways = fact(books) / (fact(1) * fact(books - 1) * fact(1) * fact(books - 2) * fact(1) * fact(books - 3))\n    \n    return int(ways)\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 13  # Tommy and his 12 friends\n    minutes_spent_per_person = 142\n\n    total_time_spent = number_of_friends * minutes_spent_per_person\n\n    return total_time_spent\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Number 928 repeated 33 times to make a 99-digit number\n    repeated_times = 99 // 3\n    \n    # 928 divided by 9 gives a remainder of 1, as 9 divides both 900 and 27 evenly\n    remainder_per_repetition = 928 % 9\n\n    # The total remainder is just the remainder per repetition multiplied by the number of repetitions\n    total_remainder = (remainder_per_repetition * repeated_times) % 9\n    \n    return total_remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    op = symbols('oplus')\n\n    # Set up the equation\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n\n    # Solve the equation for the unknown value\n    solutions = solve(equation, op)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z', real=True)  # Let x, y, and z represent the three numbers.\n    \n    # Equation 1: the sum of three numbers is 56.\n    equation1 = Eq(x + y + z, 56)\n    \n    # Equation 2: the average of the smallest two numbers is 14.\n    # Since we assume they are the smallest, we can write the equation as (x + y)/2 = 14\n    equation2 = Eq((x + y)/2, 14)\n    \n    # Equation 3: the average of the largest two numbers is 22.\n    # We now consider both y and z to be the largest, so (y + z)/2 = 22\n    equation3 = Eq((y + z)/2, 22)\n    \n    # Solving the system of equations.\n    solution_set = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Since we want to find the median, we sort the numbers and take the middle one (y, since it is present in both averages).\n    median = sorted(solution_set.values())[1]\n    \n    return median\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(target - num))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Convert pounds to pence for uniformity in calculation\n    eliot_paid = 3 * 100  # three £1 coins\n    maya_paid = 4 * 100  # four £1 coins\n\n    # Cost per bar in pence\n    sour_sweets_cost = 12\n    chocolate_drops_cost = 17\n    \n    # Let x be the number of bars each person bought\n    # Calculate the change for each person\n    # Eliot's change is the money he paid minus the total cost of the sour sweets bars\n    # Maya's change is the money she paid minus the total cost of the chocolate drops bars\n    # Since their changes are equal, we can create the equation:\n    # eliot_paid - sour_sweets_cost * x = maya_paid - chocolate_drops_cost * x\n    # Now solve for x\n    \n    # Simplify the equation\n    # sour_sweets_cost * x - chocolate_drops_cost * x = maya_paid - eliot_paid\n    # x * (sour_sweets_cost - chocolate_drops_cost) = maya_paid - eliot_paid\n    delta_cost = sour_sweets_cost - chocolate_drops_cost\n    delta_paid = maya_paid - eliot_paid\n\n    # Number of bars each person bought\n    x = delta_paid // delta_cost\n    \n    return x\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5]\n    smallest_even_number = float('inf')\n\n    for perm in permutations(digits, 4):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < smallest_even_number:\n            smallest_even_number = number\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # Litres of orange juice Angel has\n    container_volume = 2  # Litres each container can hold\n    number_of_containers = total_volume / container_volume\n    return int(number_of_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Jackson's and Chloe's current ages\n    jackson_age, chloe_age = symbols('jackson_age chloe_age')\n    \n    # Equation 1: The sum of Jackson and Chloe's current ages is 54\n    equation1 = Eq(jackson_age + chloe_age, 54)\n    \n    # Equation 2: In 3 years, Jackson will be 5 times as old as Chloe\n    equation2 = Eq(jackson_age + 3, 5 * (chloe_age + 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson_age, chloe_age))\n    \n    # Jackson's age 3 years later\n    jackson_age_later = solutions[jackson_age] + 3\n    \n    return jackson_age_later\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    return (66 * 2 + 66 * 3) == (66 * 5)\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pork dumpling and one bun\n    dumpling_price, bun_price = symbols('dumpling_price bun_price')\n\n    # Create equations based on the information given\n    equation1 = Eq(6 * dumpling_price + 4 * bun_price, 92)\n    equation2 = Eq(3 * dumpling_price + bun_price, 41)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dumpling_price, bun_price))\n\n    return solutions[dumpling_price]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_rate = 2.5\n    additional_rate = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n    \n    additional_cost = total_cost - base_rate\n    additional_distance = additional_cost / additional_rate\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # let's give those 3 apples to one student and then\n    # distribute the remaining 80 - 3 = 77 apples\n    total_apples = 80 - 3\n    \n    # Using the Pigeonhole Principle, after giving each student one apple,\n    # we can continue to distribute the remaining apples one by one.\n    # Since we want to find how big the class is (i.e. how many students),\n    # we need to find how many times we can give each student another apple.\n    # Thus the number of students is the remaining number of apples plus one\n    # for the student who initially received 3 apples.\n    num_students = total_apples + 1\n    \n    return num_students\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'y' be the number of yellow balloons\n    # red balloons: 2 * y\n    # blue balloons: 3 * y\n    y = symbols('y')\n    \n    # Equation representing total number of balloons\n    equation = Eq(2 * y + 3 * y + y, 150)\n\n    # Solve for y\n    yellow_balloons = solve(equation, y)[0]\n    \n    # Calculate the number of red balloons\n    red_balloons = 2 * yellow_balloons\n\n    return red_balloons\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolates = 8\n    original_chocolates = received_chocolates * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n\n    big_cars_needed = boys_in_big_cars // 4\n    small_cars_needed = girls_in_small_cars // 2\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_age = 100\n\n    current_sum = mother_age + father_age + julia_age\n    years = 0\n\n    while current_sum < total_age:\n        years += 1\n        current_sum += 3  # Each year, the sum of their ages increases by 3 because all of them are getting a year older\n    \n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    ounces_of_tiger_cub = 56\n\n    pounds_of_tiger_cub = ounces_of_tiger_cub / ounces_per_pound\n    kg_of_tiger_cub = pounds_of_tiger_cub / pounds_per_kg\n\n    return round(kg_of_tiger_cub, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Sum of the arithmetic sequence without the repeated elements\n    # S = (n/2) * (first_term + last_term)\n    first_term = 5\n    last_term = 80\n    number_of_terms = last_term - first_term + 1\n    sum_sequence = (number_of_terms / 2) * (first_term + last_term)\n    \n    # Sum of the repeated elements, excluding the peak element (80)\n    # The same sum_sequence minus the last element\n    repeated_sum = sum_sequence - last_term\n\n    # The sum of the entire sequence is the sum of both calculated parts\n    total_sum = sum_sequence + repeated_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    largest_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (a*100 + b*10 + c) + (b*100 + c*10 + d) + (c*100 + d*10 + e) \\\n            + (d*100 + e*10 + f) + (e*100 + f*10 + g) + (f*100 + g*10 + h) \\\n            + (g*100 + h*10 + i)\n        largest_sum = max(largest_sum, A)\n    return largest_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    discounted_price = 32\n    further_discount = 4\n    final_price = discounted_price - further_discount\n    \n    # Let's assume original price is 'original_price'\n    # Then after 20% discount, the price is 80% of the original price\n    # 0.8 * original_price = discounted_price\n    original_price = discounted_price / 0.8\n    \n    # Total discount in terms of money is the original price minus the final price\n    total_discount_money = original_price - final_price\n    \n    # Total percentage discount is (total discount in terms of money divided by original price) times 100\n    total_percentage_discount = (total_discount_money / original_price) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') < perm.index('B') < perm.index('C'):\n            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum_series = 0\n    for i in range(3, 2019, 7):\n        sum_series += 2019 / (i * (i + 7))\n    ans = sum_series\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the given pattern:\n    # 10 * 10 = 1\n    # 11 * 11 = 4\n    # It seems that the pattern involves taking the second digit (units place) and squaring it.\n    # Let's apply this to the given number 55.\n    second_digit = 5  # Second digit of 55 is also 5\n    result = second_digit ** 2  # Square of the second digit\n\n    return result\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_permutations = sorted(set(permutations(digits, 6)))\n    target_number = ''.join(all_permutations[504])  # indexing starts at 0\n    return int(target_number)\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # For three-digit numbers, 0 cannot be the leading digit.\n    # Thus, there are only 2 choices for the first digit (2 or 3),\n    # 3 choices for the second digit (0, 2, or 3 minus the first digit),\n    # and 2 choices for the third digit (0, 2, or 3 minus the first two digits).\n    # Since different three-digit numbers are required, the digits must be distinct.\n    \n    count_first_digit = 2  # 2 or 3\n    count_second_digit = 2  # 0, 2 or 3 but one is used as the first digit\n    count_third_digit = 1  # 0, 2 or 3 but two are used as the first and second digit\n    \n    total_numbers = count_first_digit * count_second_digit * count_third_digit\n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    equation = Eq(girls * 88 + boys * 91, 36 * 89)\n    \n    num_girls = solve(equation, girls)[0]\n    \n    return num_girls\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_rate = 1 / 40\n    # Bob's work rate per day\n    bob_rate = 1 / 60\n    # Combined work rate per day when both are working\n    combined_rate = alice_rate + bob_rate\n\n    # Total work that needs to be done\n    total_work = 1\n\n    # Total days they have to finish the job\n    total_days = 27\n\n    # Let x be the days Alice takes off\n    # Equation: combined_rate * (total_days - x) + bob_rate * x = total_work\n    # We solve for x\n\n    # Move terms involving x to one side to form a linear equation ax = b\n    a = combined_rate - bob_rate\n    b = total_work - bob_rate * total_days\n\n    # Solve for x\n    x = b / a\n\n    return int(x)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    seventh_term = 105\n    eighth_term = 120\n    \n    difference = eighth_term - seventh_term\n    first_term = seventh_term - 6 * difference\n    \n    hundredth_term = first_term + 99 * difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Let's follow the Pigeonhole Principle.\n    # To be sure that at least one matching pair exists, we need to consider the worst-case scenario.\n    \n    # In the worst-case scenario:\n    # Take one red sock out, then another red one until all red socks are taken.\n    # But there still might not be a matching pair if by chance all were red.\n    # Hence, we take one blue sock out. If we have all red socks already, this guarantees a pair of reds.\n    # Or if there was at least one blue before, now we will have a pair of blues.\n    # Worst case we have taken all red socks (4) and 1 blue sock to guarantee a matching pair.\n    num_red_socks = 4\n    num_blue_socks = 4\n    \n    # You need to take out all 4 red socks and 1 blue sock to guarantee at least one pair.\n    return num_red_socks + 1\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    years_passed_since_then = 4 + 2  # 4 years ago and 2 years later from now\n    # Each year, each dog gets 1 year older, so 3 dogs will be 3 years older collectively\n    additional_years = 3 * years_passed_since_then\n\n    combined_age_in_2_years = combined_age_4_years_ago + additional_years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4 ** 2 / 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # Ratio after changes\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_apples + (sisters_apples_each * number_of_sisters)\n    total_apples_before = total_apples_eaten + apples_left\n    \n    return total_apples_before\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    beads_total = 65\n    pattern_length = 3 + 2 + 2  # Total number of beads in one repeating pattern\n    pattern_black_beads = 3 + 3  # Number of black beads in one repeating pattern\n\n    full_patterns = beads_total // pattern_length\n    remaining_beads = beads_total % pattern_length\n\n    black_bead_count = full_patterns * pattern_black_beads\n    if remaining_beads > 0:\n        if remaining_beads > 3:\n            black_bead_count += 3\n        else:\n            black_bead_count += remaining_beads\n\n    return black_bead_count\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    required_time_minutes = 13 + 23 + 8 + 27\n    school_start_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wake_up_time = school_start_time - timedelta(minutes=required_time_minutes)\n    return wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 in (0, 1) else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(52):\n        ducks = chickens  # the number of chickens is equal to the number of ducks\n        cows = 51 - chickens - ducks  # total heads - number of chickens - number of ducks\n        if (chickens * 2 + ducks * 2 + cows * 4) == 160:  # total legs\n            return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    possible_sums = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                possible_sums.add(i + j + k)\n\n    ans = len(possible_sums)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for entrance_order in permutations(range(1, 5), 3):\n        if entrance_order[0] != entrance_order[1]:  # Joe and Mike can't use the same entrance\n            count += 1\n    return count\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice * (1/5)\n    abigail_drink = 200\n    anna_drink = 120\n\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n\n    return juice_left\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for num in range(21, 50):\n        if num % 6 == 0 and num % 9 == 0:\n            multiples.append(num)\n    return multiples\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    # There are 360 degrees in a clock.\n    # Each hour mark on the clock represents 360/12 = 30 degrees.\n    # Each minute mark on the clock represents 360/60 = 6 degrees.\n    \n    # The hour hand moves 0.5 degrees per minute (30 degrees per hour, divided by 60)\n    # At 8.30, the hour hand is 30 minutes past the 8th hour:\n    hour_hand_angle = (hour * 30) + (minute * 0.5)\n    \n    # The minute hand moves 6 degrees per minute:\n    minute_hand_angle = minute * 6\n    \n    # Calculate the difference between the two angles\n    angle = abs(hour_hand_angle - minute_hand_angle)\n    \n    # The angle should be the smaller angle between the two hands, so if it's\n    # larger than 180, subtract it from 360 to find the smaller angle.\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance_nm = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    \n    # convert the time to hours\n    total_time_hours = (time_days * 24) + time_hours\n    \n    # calculate average speed in nautical miles per hour\n    average_speed_nm_per_hour = total_distance_nm / total_time_hours\n    \n    # round to the nearest integer\n    return round(average_speed_nm_per_hour)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in first punch\n\n    volume2 = 3  # volume of second punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in second punch\n\n    total_volume = volume1 + volume2\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_fruit_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    # Find the smallest multiple of 11 larger than or equal to 50\n    smallest = 11 * ((50 + 10) // 11)\n    \n    # Find the largest multiple of 11 smaller than or equal to 150\n    largest = 150 // 11 * 11\n    \n    # Calculate the number of multiples of 11 in the range\n    num_multiples = (largest - smallest) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w = the initial number of women and m = the initial number of men\n    w, m = symbols('w m')\n\n    # After 36 women left, the number of women became w - 36\n    # According to the information given, (w - 36) is 3/5 of the number of men (m)\n    equation1 = Eq(w - 36, 3/5 * m)\n\n    # After 48 men left, there is an equal number of men and women remaining\n    # So the remaining number of men (m - 48) is equal to the remaining number of women (w - 36)\n    equation2 = Eq(m - 48, w - 36)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Calculate the total number of people at first by summing up the initial number of women and men\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    given_away_first = 339\n    bought_stamps = 455\n    given_away_second = 777\n\n    remaining_stamps = initial_stamps - given_away_first + bought_stamps - given_away_second\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    return sum([17, 21, 36, 23, 4, 49, 10])\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(21, 30):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Fatouma's current age be x\n    x = symbols('x')\n\n    # Create the equation based on the given information\n    equation = Eq(x + 2, 2 * (x - 5))\n\n    # Solve the equation for x\n    fatouma_age = solve(equation, x)\n\n    return fatouma_age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # Ensure the numbers are different and non-zero\n                ways.append((x1, x2, x3))\n    return ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    same_height_students = 4\n    \n    # For each height category, there is a potential to have 3 students of different heights before reaching 4 of the same height,\n    # Hence, we calculate number of possible height categories (difference + 1 for inclusive count)\n    # and multiply by 3 (since we can have 3 students at different heights) and add 1 for the last student to satisfy the condition \n    class_size = (max_height - min_height + 1) * (same_height_students - 1) + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    more_english_books = english_books - chinese_books\n\n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred wants to ensure a win, he should aim to leave 4*n + 1 oranges after his turn\n    # since whatever George picks (1, 2, or 3), Fred can always pick (3, 2, or 1)\n    # such that the total picked is 4, leaving another 4*n + 1 situation.\n\n    # Total number of oranges on the table\n    total_oranges = 15\n\n    # By working backward, Fred can calculate the optimal number\n    # Since 4*(3)+1 = 13 is the nearest number of this form to 15,\n    # Fred takes 15 - 13 = 2 oranges to leave 13 oranges on the table.\n    fred_first_pick = total_oranges - ((total_oranges - 1) // 4 * 4 + 1)\n\n    return fred_first_pick\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Number of students in each individual competition\n    go = 42\n    checkers = 55\n    chess = 33\n    \n    # Number of students in two competitions at the same time\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    \n    # Number of students in all three competitions\n    all_three = 5\n    \n    # Total number of students participating using the Inclusion-Exclusion Principle\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + all_three\n    \n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Since the sum of Oliver's and Lin's age has to be 48,\n    # let's denote the number of years needed as 'n'.\n\n    # Oliver's age after n years = 20 + n\n    # Lin's age after n years = 26 + n\n    \n    # Their combined age after n years = (20 + n) + (26 + n)\n    \n    # Setting up the age sum equation:\n    # (20 + n) + (26 + n) = 48\n    \n    # Solve for n:\n    n = (48 - 20 - 26) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3  # meters\n\n    # Since there's no pole right outside her school and house, there are 39 intervals\n    num_intervals = num_poles - 1\n\n    total_distance = num_intervals * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = int(245 ** (1/3))\n    p = cube_root**3 // 245\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        e, s, a, m, o = p\n        esse = int(e+s+s+e)\n        sasmo = int(s+a+s+m+o)\n        if esse + 2018 == sasmo and e != '0' and s != a and s != m and s != o and e != a and e != m and e != o and a != m and a != o and m != o:\n            return sum(map(int, [s, a, s, m, o]))\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 100  # Number of centimeters in a meter\n    cm_value = 736  # The given value in centimeters\n    return cm_value / cm_in_m\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum((-1)**(n+1) * (64 - 2*n) for n in range(10))\n    return ans\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    students_absent = 1 + 1  # One on sick leave and one on personal leave\n    students_present = total_students - students_absent\n\n    attendance_rate = (students_present / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    common_difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        for j in range(1, i):\n            total_sum += j / i\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position gives us the size of the array\n    # Since he is 4th from the front and 3rd from the back, there are 4 + 3 - 1 = 6 rows\n    # Similarly, since he is 1st from the left and 4th from the right, there are 1 + 4 - 1 = 4 columns\n    # Total number of band members is the number of rows multiplied by the number of columns\n    ans = (4 + 3 - 1) * (1 + 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    # Ratio of apples to oranges is 3:8, so we have the equation 3*oranges = 8*apples\n    equation1 = Eq(3*oranges, 8*apples)\n    # When one apple is removed the ratio changes to 1:3, so (apples - 1) * 3 = oranges\n    equation2 = Eq((apples - 1) * 3, oranges)\n\n    # Now solve the equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "{\n  \"queId\": \"UniqueQuestionId\",\n  \"problem\": \"下式中$$26$$个括号中的$$+$$，$$-$$，$$\\times $$，$$\\div $$依序循环排列，英文字母按字母表中的位置也依序排列，且不同的字母代表不同的非零自然数，相同的字母代表相同的数。  $$\\underbrace{\\left( \\square +a \\right)\\times \\left( \\square -b \\right)\\times \\left( \\square \\times c \\right)\\times \\left( \\square \\div d \\right)\\times \\left( \\square +e \\right)\\times \\left( \\square -f \\right)\\times \\left( \\square \\times g \\right)\\times \\cdots \\times \\left( \\square +y \\right)\\times \\left( \\square -z \\right)}_{26个圆括号相乘}$$  当将同一个英文字母填入口中时，能使式子的值等于$$0$$，问这样的字母共有多少个？\",\n  \"trans_problem\": \"In the following expression, there are $$26$$ brackets where the operations $$+$$, $$-$$, $$\\times$$, $$\\div$$ are cyclically arranged in order, and the English letters are also arranged sequentially according to their position in the alphabet, with different letters representing different non-zero natural numbers and the same letter representing the same number. $$\\underbrace{\\left( \\square +a \\right)\\times \\left( \\square -b \\right)\\times \\left( \\square \\times c \\right)\\times \\left( \\square \\div d \\right)\\times \\left( \\square +e \\right)\\times \\left( \\square -f \\right)\\times \\left( \\square \\times g \\right)\\times \\cdots \\times \\left( \\square +y \\right)\\times \\left( \\square -z \\right)}_{26\\text{ brackets multiplied together}}$$ When the same English letter is filled in the squares, the value of the expression equals $$0$$. How many such letters are there?\"\n}"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_savings = 2.40\n    days_needed = total_amount / daily_savings\n    weeks_needed = days_needed / 7\n    \n    return int(weeks_needed) + (1 if weeks_needed % 1 else 0)\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_14 = sum(range(1, 15))\n    total_sum = sum_14 + 2019\n\n    for i in range(1, total_sum // 8):\n        if sum(range(i, i + 8)) == total_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / 0.25\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r = weight of a rabbit, c = weight of a chicken, k = weight of a kangaroo\n    r, c, k = symbols('r c k')\n    \n    # We have the following equations based on the problem statement\n    equation1 = Eq(2*r, 6*c)  # 2 rabbits are equal to 6 chickens\n    equation2 = Eq(3*k, 4*r)  # 3 kangaroos are equal to 4 rabbits\n    \n    # Solve the equations to get the weights in terms of c (weight of a chicken)\n    solutions = solve((equation1, equation2), (r, k), dict=True)\n    \n    # One kangaroo weighs the same as how many chickens?\n    weight_of_one_kangaroo_in_chickens = solutions[0][k]/c\n    \n    return weight_of_one_kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = {\n        'cut_wood': 3,\n        'weave_grass': 1,\n        'dry_wood': 5,\n        'mow_grass': 1,\n        'prepare_food': 1,\n        'soak_grass': 1,\n        'choose_wood': 1,\n    }\n    \n    # Tasks that can be performed simultaneously\n    simultaneous_tasks = [\n        ('cut_wood', 'mow_grass', 'soak_grass'),\n        ('weave_grass',),\n        ('dry_wood', 'prepare_food', 'choose_wood')\n    ]\n    \n    # Calculate the total time accounting for simultaneous actions\n    total_time = 0\n    for group in simultaneous_tasks:\n        longest_task_time = max([tasks[task] for task in group])\n        total_time += longest_task_time\n\n    return total_time\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_terms = 836 + 162 + 2\n    ans = common_factor * sum_of_terms\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    number_of_notes = total_amount // note_value\n\n    return number_of_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    difference = 2\n    brother_age = (ashley_age - 3) - difference\n    return brother_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    y = (9 * 5 + 15 * 5) // 5\n    return y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from both front and back\n    total_dwarves = (7 - 1) * 2  # Subtract Snow White and multiply by 2\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # Using the Pigeonhole Principle, if the school with the most participants should have at least 4 participants,\n    # then we divide the total number of participants by 4 and round up to ensure each school has at least 4 participants.\n    max_schools = -(-participants // 4)  # The negative signs implement ceiling division\n    return max_schools\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    result = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - (2018 + i) // 5\n        result += fractional_part\n    return result\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):\n        product = number * 6\n        quotient = number / 6\n        if round(quotient**0.5)**2 == quotient and round(product**(1/3))**3 == product:\n            return number\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Let the distance the slower train covers be d km\n    # Then the distance the faster train covers is d + 70 km\n    # The ratio of their speeds is 36:48, which can be simplified to 3:4\n    # Therefore, the ratio of the distances they cover should also be 3:4\n    \n    # If we let 3x be the distance the slower train travels, then 4x\n    # is the distance the faster train travels, where x is a constant factor.\n    \n    # According to the problem, 4x - 3x = 70 km\n    \n    x = 70 / (4 - 3)\n    \n    # Now we can calculate the distance for the slower train\n    distance_slower = 3 * x\n    \n    # And the distance for the faster train\n    distance_faster = 4 * x\n    \n    # The sum of these distances gives us the distance between the two stations\n    total_distance = distance_slower + distance_faster\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    front_back = 4 + 3 - 1\n    left_right = 4 + 7 - 1\n    ans = front_back * left_right\n    return ans\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statement\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    \n    # Solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "Output:\n{\n  \"queId\": \"unspecified\",\n  \"problem\": \"李叔叔养了$$400$$多只兔子，如果每$$3$$只兔子关在一个笼子里，最后一个笼子里有$$1$$只，如果每$$5$$只兔子关在一个笼子里，最后一个笼子里有$$3$$只，如果每$$7$$只兔子关一个笼子里，那么最后一个笼子里有$$5$$只，李叔叔一共养了多少只兔子?\",\n  \"trans_problem\": \"Uncle Li has more than $$400$$ rabbits. If every $$3$$ rabbits are put into a cage, there will be $$1$$ rabbit left in the last cage. If every $$5$$ rabbits are put into a cage, there will be $$3$$ rabbits left in the last cage. If every $$7$$ rabbits are put into a cage, there will be $$5$$ rabbits left in the last cage. How many rabbits does Uncle Li have in total?\"\n}"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin_lost in coins:\n        if (total_amount - coin_lost) == 2 * (total_amount - (total_amount - coin_lost)):\n            lost_coin = coin_lost\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        students_with_extra_boat = (boat + 1) * 6\n        students_with_one_less_boat = (boat - 1) * 9\n        if students_with_extra_boat == students_with_one_less_boat:\n            return students_with_extra_boat\n        boat += 1\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the amount Rasidah had at first\n    # Let c represent the amount Chai Seng had at first\n    r, c = symbols('r c')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(r, c - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_left = r - 3/5 * r\n\n    # Chai Seng spent 6/7 of his money\n    chaiseng_left = c - 6/7 * c\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chaiseng_left, 1/2 * rasidah_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, c))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Loop through possible digits for thousands, hundreds, tens and ones places\n    for th in range(1, 10):\n        for hu in range(th + 1, 10):\n            for te in range(hu + 1, 10):\n                # Calculate the ones digit using the conditions given\n                on = th + hu + te\n                \n                # Check if ones digit is valid and if the sum of digits is 16\n                if on < 10 and th + hu + te + on == 16:\n                    return on\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    count = 0\n    for tens in [2, 4]:\n        for ones in [0, 2, 4]:\n            if tens != ones:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    result = (0.007) ** 2\n    return result\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '4', '6', '8']\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance is the same uphill and downhill\n    distance_uphill = 3 * 5\n    total_time = 3 + 2\n    # Average speed is total distance divided by total time\n    average_speed = (distance_uphill * 2) / total_time\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed data\n    initial_rate = 2  # dollars per kwh for the first 5 kwh\n    additional_rate = 1  # dollars for each additional kwh\n    fixed_fee = 3  # dollars fixed service fee\n    total_amount = 63  # dollars Susan has\n\n    # Calculate the cost for the first 5 kwh\n    initial_cost = 5 * initial_rate\n\n    # Calculate remaining amount after fixed charges\n    remaining_amount = total_amount - (initial_cost + fixed_fee)\n\n    # Calculate additional kwh she can use\n    additional_kwh = remaining_amount / additional_rate\n    \n    # Total kwh is the sum of the first 5 kwh and the additional kwh\n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.9\n    \n    # Calculate the value after 5 years by raising the depreciation rate to the power of 5\n    value_after_5_years = initial_value * (depreciation_rate ** 5)\n    \n    # Round the result to the nearest tenth\n    ans = round(value_after_5_years, 1)\n    return ans\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    # Iterate through all 2 digit numbers for xy\n    for x in range(1, 10):      # x cannot be 0 as it is the first digit\n        for y in range(10):     # y can be any digit\n            A = 10 * x + y      # Compute the value of A (xy)\n            B = 400 * x + 10 * y  # Compute the value of B (4xy)\n            if B == 10 + 7 * A:   # Check if B is 10 more than seven times A\n                return A          # Return the value of A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    value = 4320\n    factor_of_two = 0\n    factor_of_three = 0\n    \n    # Count the power of 2 in the prime factorization of the value\n    while value % 2 == 0:\n        factor_of_two += 1\n        value //= 2\n\n    # Count the power of 3 in the prime factorization of the value\n    while value % 3 == 0:\n        factor_of_three += 1\n        value //= 3\n\n    # Since we are multiplying by (3/2)^n, we should have at least n factors of 2\n    # to keep the product an integer, which means the number of 2's in the prime\n    # factorization after multiplication should not be less than 0. Every time we\n    # multiply by 3/2, one factor of 2 is reduced.\n    # So possible integer values of n range from 0 to the number of factors of 2.\n\n    return factor_of_two + 1  # +1 to account for n=0\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = total_big_boxes * cookies_per_big_box\n    num_small_boxes = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return num_small_boxes\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    math_passed = 30\n    science_passed = 28\n    english_passed = 25\n\n    # The maximum number of students who could have passed all tests is equal\n    # to the sum of students who passed each test minus twice the total number\n    # of students, because the total number must also include all those who passed\n    # at least one test.\n    \n    max_all_passed = math_passed + science_passed + english_passed - 2 * total_students\n    \n    # However, if this number is negative, it means there cannot be a negative number of students,\n    # so the maximum then would be 0.\n    \n    max_all_passed = max(max_all_passed, 0)\n\n    return max_all_passed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first_punch = 20 * 0.35\n    juice_in_second_punch = 30 * 0.60\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    concentration = (total_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the original amount of grain in warehouse B\n    b = symbols('b')\n\n    # After A ships in 12 tons, its total becomes 50 + 12\n    a_final = 50 + 12\n    \n    # B ships out 16 tons, so its total becomes b - 16\n    b_final = b - 16\n\n    # We set up the equation A_final = 2 * B_final\n    equation = Eq(a_final, 2 * b_final)\n\n    # Solving the equation for b\n    solutions = solve(equation, b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    for i in range(32, 41):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            return i\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_ways = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.50 * 0.20 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Given ratios\n    fishes_to_rabbit = 3 / 1\n    rabbits_to_wheat_packs = 2 / 3\n\n    # Calculate how many fishes for one pack of wheat\n    fishes_to_wheat_pack = fishes_to_rabbit * 1 / rabbits_to_wheat_packs\n\n    return fishes_to_wheat_pack\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    pencils, _ = solve_congruence(*congruences)\n    \n    # Find the pencils in the range 400 to 500\n    while pencils < 400:\n        pencils += 4 * 5 * 7\n    \n    return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = total_amount * (3 / ratio_sum)\n    return bigger_share\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let's denote the number of people as p, and the number of benches as b.\n    # According to the question:\n    #   if 3 people sit on one bench, there will be 7 people with no seat, so 3b < p and 3b + 7 = p\n    #   if 7 people sit on one bench, there will be 3 extra benches left, so 7(b-3) = p\n    \n    # Let's turn these conditions into two equations:\n    #  3b + 7 = p (1)\n    #  7(b - 3) = p (2)\n    \n    # Both equations equal p, so we can set them equal to each other:\n    #  3b + 7 = 7(b - 3)\n    #  3b + 7 = 7b - 21\n    #  7 + 21 = 7b - 3b\n    #  28 = 4b\n    #  b = 7\n    \n    # Now we can find p using either of the two equations. Let's use equation (1).\n    #  3b + 7 = p\n    #  3*7 + 7 = p\n    #  21 + 7 = p\n    #  p = 28\n    \n    p = 28\n    return p\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    empty_bottle, juice_per_sixth = symbols('empty_bottle juice_per_sixth')\n    \n    # When 5/6 of the bottle is filled with apple juice, the total mass is 4.6 kg\n    equation1 = Eq(empty_bottle + 5 * juice_per_sixth, 4.6)\n    # When 2/3 of the bottle is filled with apple juice, the total mass is 4.45 kg\n    # 2/3 of the bottle is same as 4/6 of the bottle\n    equation2 = Eq(empty_bottle + 4 * juice_per_sixth, 4.45)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (empty_bottle, juice_per_sixth))\n    \n    # Returning the mass of empty bottle in grams\n    return solutions[empty_bottle] * 1000\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Lisa's favourite number\n    favourite_number = symbols('favourite_number')\n\n    # Define the equation based on the problem statement\n    equation = Eq(2 * favourite_number - 3, 19)\n\n    # Solve the equation\n    solutions = solve(equation, favourite_number)\n\n    # Return the solution\n    return solutions[0]\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for c in range(1, 10, 2):  # last digit must be odd\n        for b in range(10):  # middle digit\n            for a in range(1, 10):  # first digit must be non-zero\n                if a + b + c == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    page_number = 1\n\n    while total_digits < 1101:\n        digits_in_page = len(str(page_number))\n        total_digits += digits_in_page\n        if total_digits > 1101:  # overshoot check\n            break\n        page_number += 1\n\n    return page_number - 1  # subtract one because we've added an extra page that made the sum exceed 1101\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    return 54 * 7 // (63 // 7)\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        term = 1 + (n * (n - 1) // 2) * 2\n        if term >= 100:\n            break\n        n += 1\n    return n, term - n\n\nans = solution()[1]"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # By solving these equations, we can find the weight of Adam, Ben, and Carl\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    # Their total weight is the sum of Adam's, Ben's, and Carl's weight\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n    \n    for magazines in range(total_cost):\n        books = (total_cost - magazines * magazine_cost) / book_cost\n        if books.is_integer():\n            return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_after_giving = andy_notebooks - 38\n    sister_notebooks = andy_after_giving\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100\n        base_10_age_with_0 = int(str(age) + \"0\")  # Add a \"0\" at the end\n        base_3_age = int(str(age), 3)  # Convert age from base 10 to base 3\n        if base_10_age_with_0 == base_3_age:  # Check if they are equal\n            return age  # Mr. Lv's age in base 10\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let o represent the number of orchids, t represent the number of tulips and r represent the number of roses\n    o, t, r = symbols('o t r')\n\n    # The total number of flowers originally\n    equation1 = Eq(o + t + r, 3616)\n\n    # The ratio of the number of orchids to the number of tulips is 3:5\n    equation2 = Eq(o / t, 3 / 5)\n\n    # After selling 40% of the orchids, 1/5 of the tulips, and 25% of the roses,\n    # the remaining flowers is equal to 2644\n    equation3 = Eq( o - 0.40 * o + t - 1/5 * t + r - 0.25 * r, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (o, t, r))\n\n    # Number of orchids at first\n    orchids_at_first = solutions[o]\n\n    return orchids_at_first\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    result = (5/8 + 1/17) * 8 + 9/17\n    return result\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            pair = 7007 // i\n            if pair < 100 and pair % 7 == 0:\n                factors.append(i)\n                factors.append(pair)\n\n    return sum(set(factors))\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    num_people = 7\n    total_seats = 8\n    # Since rotations are considered the same, we fix one person and arrange the remaining\n    ans = factorial(num_people - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 55))\n    for i in primes:\n        if 55 - i in primes:\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Define the cost of 1 cookie\n    cost_per_cookie = 9\n\n    # Since 3 pieces of cheesecake is equal to the cost of 5 cookies\n    cost_per_cheesecake = (cost_per_cookie * 5) / 3\n\n    # Now, using the information that 3 pieces of chocolate cake is equal to the cost of 2 pieces of cheesecake\n    cost_per_chocolate_cake = (cost_per_cheesecake * 2) / 3\n\n    return cost_per_chocolate_cake\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # Create equations based on the given problem\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    # Solve the equations for basketball and volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    # Get the cost of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    def is_divisible_by_9(number):\n        return sum(int(digit) for digit in str(number)) % 9 == 0\n\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7:  # all digits different\n                    number = int(f\"20{A}{M}C19\")\n                    if is_divisible_by_9(number):\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Get the solution for B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n    equation = Eq(mike - valeria, (6 - 22))\n\n    total_candy = 36\n    solutions = solve((equation, Eq(mike + valeria, total_candy)), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Since the pins are identical, this is a problem of partitioning a number\n    # into at most 3 positive summands, or \"parts\". The order of the parts does not matter.\n    # This is a classic problem of partitions, which in general is not trivial,\n    # but for small numbers, we can solve it by enumeration or using formulas.\n\n    # We can partition 10 into the following:\n    # (1,1,8), (1,2,7), (1,3,6), (1,4,5)\n    # (2,2,6), (2,3,5), (2,4,4)\n    # (3,3,4), (3,7)\n    # (4,6)\n    # (5,5)\n    # And single partitions: (10)\n\n    # We must also consider that for any partition of 2 numbers (for example, (3,7)),\n    # we can have a partition of 3 numbers adding a zero (0,3,7)\n    \n    # Thus, the total count will exclude the single partition, and include adding zeros to double partitions\n    # so we have the number of triple partitions + double partitions - single partitions\n    count = 11  # triple partitions (as calculated)\n    count += 4  # double partitions (3,7), (4,6), (2,8), (5,5) - we add zero to these\n    count -= 1  # single partition (10)\n\n    return count\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_of_book = 1/4\n    days_to_read_part = 3\n    total_days = days_to_read_part / part_of_book\n\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's current age and Melissa's mother's current age\n    melissa_current, mother_current = symbols('melissa_current mother_current')\n\n    # When Melissa was 8, mother was 32, so the difference in age is always 32 - 8 = 24\n    age_difference = 24\n    # Create equations based on the problem statement\n    equation1 = Eq(mother_current - melissa_current, age_difference)\n    equation2 = Eq(mother_current, 3 * melissa_current)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa_current, mother_current))\n\n    return solutions[melissa_current]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_sequence = '857142'\n    sequence_length = len(recurring_sequence)\n    total_sum = 0\n\n    for i in range(58):\n        total_sum += int(recurring_sequence[i % sequence_length])\n\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    num1 = 4 + Fraction(73, 99)  # Representing 4.7373...\n    num2 = 4.73  # Representing 4.73\n    num3 = 4.77  # Representing 4.77\n    num4 = 4 + Fraction(737, 1000)  # Representing 4.737\n\n    smallest = min(float(num1), num2, num3, float(num4))\n\n    return smallest\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    plants_before_joel = (remaining_after_joel + 2) * 2\n    remaining_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_after_valerie + 3) * 2\n    remaining_after_ethan = plants_before_valerie\n    plants_at_start = (remaining_after_ethan + 1) * 2\n    return plants_at_start\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n    \n    # The time it takes for the entire train to pass through the tunnel is the time\n    # it takes for the train to travel its own length plus the tunnel's length.\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 40 / 100\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes = ['H', 'T']  # H for heads, T for tails\n    possible_outcomes = [(first, second) for first in outcomes for second in outcomes]\n    num_possible_outcomes = len(possible_outcomes)\n    return num_possible_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # Number of teams\n    teams = 5\n    \n    # Number of matches using the handshake problem formula\n    matches = teams * (teams - 1) // 2\n\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let's represent the initial number of eggs as a variable 'x'.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Set up the equation according to the problem\n    # He sold x/2 + 16 eggs first\n    # Then he was left with x - (x/2 + 16) eggs\n    # He then sold (x - (x/2 + 16))/2 - 7 eggs\n    # Then he was left with x - (x/2 + 16) - ((x - (x/2 + 16))/2 - 7) = 18 eggs\n    \n    equation = Eq(x - (x/2 + 16) - ((x - (x/2 + 16))/2 - 7), 18)\n    \n    # Solve the equation for x\n    solutions = solve(equation, x)\n    \n    # Since number of eggs cannot be negative, filter positive solution\n    initial_eggs = [sol for sol in solutions if sol.is_positive]\n    \n    return initial_eggs[0]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    result = 7 / (1/3)\n    return result\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen the fisher traded 3 fish for 1 rabbit.\n    fish_per_rabbit = 3\n\n    # Oscar the hunter traded 2 rabbits for 3 packs of wheat.\n    rabbits_per_pack_of_wheat = 2 / 3\n\n    # The number of fish Owen needs to give Dennis for a pack of wheat is\n    # the product of the two ratios.\n    fish_per_pack_of_wheat = fish_per_rabbit * rabbits_per_pack_of_wheat\n\n    # Simplifying the ratio to find out how many fish for one pack of wheat\n    ans = fish_per_pack_of_wheat\n\n    return ans\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n    johnnys_answer = 18 + 4  # Johnny's calculation\n\n    if correct_answer != johnnys_answer:\n        return correct_answer  # Johnny's answer is incorrect, return the correct answer\n    else:\n        return johnnys_answer  # Johnny's answer was actually correct, just return it\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    # Let total number of students originally be x\n    # Then, boys = 0.40 * x and girls = x - boys\n\n    # After 16 boys left and 16 girls entered:\n    # New number of boys = boys - 16\n    # New number of girls = girls + 16\n    # New total number of students = x (unchanged)\n\n    # According to the problem, new number of boys = 2/15 of the new total number of students\n    # Thus, New number of boys = (2/15) * x\n\n    # We can now set up an equation:\n    # Old boys - 16 = New boys\n    # 0.40 * x - 16 = (2/15) * x\n\n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(0.40 * x - 16, (2/15) * x)\n    total_students = solve(equation, x)\n\n    # Since we are only expecting one solution for the total number of students\n    total_students = total_students[0]\n\n    # Calculate the original number of girls\n    original_girls = total_students - (0.40 * total_students)\n\n    # Calculate the new number of girls after 16 joined\n    new_girls = original_girls + 16\n\n    return int(new_girls)\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import Symbol, Eq, solve, sqrt\n\n    # Let x be the length of PA\n    x = Symbol('x')\n\n    # Since AB, AC, and AD are edges of the cube, they are equal and we can denote them as 'a'\n    a = Symbol('a')\n\n    # PG is the space diagonal of the cube and can be calculated with a√3 using Pythagorean theorem in 3D\n    equation1 = Eq(a * sqrt(3), 36 * sqrt(7))\n\n    # PB, PC, and PD are distances from P to the vertices of the cube, which can be expressed in terms of 'a' and 'x'\n    # PB^2 = PA^2 + AB^2 => (60√10)^2 = x^2 + a^2\n    equation2 = Eq(x**2 + a**2, 60 * sqrt(10) ** 2)\n    # PC^2 = PA^2 + AC^2 => (60√5)^2 = x^2 + a^2\n    equation3 = Eq(x**2 + a**2, 60 * sqrt(5) ** 2)\n    # PD^2 = PA^2 + AD^2 => (120√2)^2 = x^2 + a^2\n    equation4 = Eq(x**2 + a**2, 120 * sqrt(2) ** 2)\n\n    # Since all equations equation2, equation3, equation4 give us `x^2 + a^2`, they must be equal.\n    # Therefore, we can use these equations to express 'a' in terms of 'x' and solve for 'x' using equation1\n    a_solution = solve(equation1, a)[0]\n\n    # Substitute the 'a' value into equation2 to solve for 'x'\n    pa_solution = solve(equation2.subs(a, a_solution), x)\n\n    # Filter out the negative solution as distance can't be negative\n    pa = [sol.evalf() for sol in pa_solution if sol > 0]\n\n    return pa[0]  # Get the positive solution\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    prime_count = 0\n    unique_primes = set()\n\n    # Generate permutations with repetitions for 1, 2, and 3 digit numbers\n    for r in range(1, 4):\n        for perm in permutations(digits, r):\n            num = int(''.join(perm))\n            if isprime(num) and num < 100:\n                unique_primes.add(num)\n\n    prime_count = len(unique_primes)\n    return prime_count\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (3 + Fraction(1,3)) * 1.9 + 19.5 / (4 + Fraction(1,2))\n    denominator = (Fraction(62, 75) - 0.16) / ((3.5 + 4 + Fraction(2,3) + 2 + Fraction(2,15)) / (0.5 * (1 + Fraction(1,20) + 4.1)))\n\n    ans = numerator / denominator\n\n    return float(ans)\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    return len(ways), ways\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the necklace, bracelet, and ring\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    # Since we need the cost of the bracelet, we extract that from the solutions\n    bracelet_cost = solutions[bracelet]\n\n    return bracelet_cost\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for thousands in range(1, 10):   # Thousands digit must be 1-9 for a valid 4-digit number.\n        for hundreds in range(10):   # Hundreds digit can be 0-9.\n            for tens in range(10):   # Tens digit can be 0-9.\n                for ones in range(10):  # Ones digit can be 0-9.\n                    # Original number\n                    N = 1000 * thousands + 100 * hundreds + 10 * tens + ones\n                    # Check each possible new number M after removing one digit\n                    M1 = 100 * hundreds + 10 * tens + ones\n                    M2 = 1000 * thousands + 10 * tens + ones\n                    M3 = 1000 * thousands + 100 * hundreds + ones\n                    M4 = 1000 * thousands + 100 * hundreds + 10 * tens\n                    # Check if difference is 2021\n                    if (N - M1 == 2021) or (N - M2 == 2021) or (N - M3 == 2021) or (N - M4 == 2021):\n                        return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one banana as b and one pear as p\n    b, p = symbols('b p')\n\n    # Max buys 1 banana and 2 pears: 1*b + 2*p = 94\n    equation1 = Eq(b + 2 * p, 94)\n\n    # Emily buys 1 banana and 1 pear: 1*b + 1*p = 62\n    equation2 = Eq(b + p, 62)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # We need to find the cost of 1 banana\n    return solutions[b]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    enjoy_swimming = 0.82 * total_students  # 82% of students\n    enjoy_jogging = 0.54 * total_students   # 54% of students\n    enjoy_neither = 0.16 * total_students   # 16% of students\n    \n    # Using Inclusion-Exclusion Principle\n    # Total = Swimming + Jogging - Both + Neither\n    # Both = Swimming + Jogging - Total + Neither\n    enjoy_both = enjoy_swimming + enjoy_jogging - total_students + enjoy_neither\n    \n    return int(enjoy_both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A can complete the job in 15 days, so A's work rate is 1/15 per day\n    work_rate_A = 1 / 15\n    # B can complete the job in 10 days, so B's work rate is 1/10 per day\n    work_rate_B = 1 / 10\n    \n    # Together their combined work rate is\n    combined_rate = work_rate_A + work_rate_B\n    \n    # They work together for 4 days\n    work_done = combined_rate * 4\n    \n    # Remaining work to be done after 4 days is\n    remaining_work = 1 - work_done\n    \n    # Now B has to finish the remaining job alone\n    days_for_B_to_finish = remaining_work / work_rate_B\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    distance_between_trees = 10\n    total_road_length = 150\n\n    num_trees = (total_road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate: 1 problem per 5 minutes\n    linda_rate = 1 / 5\n    # Cici's rate: 1 problem per 6 minutes\n    cici_rate = 1 / 6\n\n    # Combined rate: problems per minute when working together\n    combined_rate = linda_rate + cici_rate\n\n    # Total time working: 2 hours in minutes\n    total_time = 2 * 60\n    \n    # Total problems they can do together in 2 hours\n    total_problems = combined_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # We want Amy to have 4 more apples than John, so we set up the equation:\n    # amy - x = john + x + 4\n    # Now we solve the equation for x\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for P1 students and P6 students\n    P1, P6 = symbols('P1 P6')\n\n    # P1 and P6 students add up to 120\n    equation1 = Eq(P1 + P6, 120)\n\n    # 2 buckets for each P6 and 1 bucket for every two P1 students adding up to 180\n    equation2 = Eq(2 * P6 + P1 / 2, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (P1, P6))\n\n    return solutions[P1]\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    ans = 15  # 15 is the odd number that falls between 13 and 17\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - (late_time % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let's denote the total amount of grass as G\n    # 14 goats eat G grass in 15 days, so 1 goat eats G/14 grass in 15 days, hence G/210 per day\n    # 70 rabbits eat G grass in 8 days, so 1 rabbit eats G/70 grass in 8 days, hence G/560 per day\n    # Given that 1 goat eats as much as 4 rabbits per day, we get G/210 = 4 * G/560\n    # Since we're interested in the number of days 17 goats and 20 rabbits can feed on G grass:\n    # G / (17 * G/210 + 20 * G/560) should give us the number of days\n\n    # Canceling out G we get 1 / (17 / 210 + 20 / 560)\n\n    # Calculating the number of days\n    days = 1 / ((17 / 210) + (20 / 560))\n\n    return days\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, sandra * 3 / 5)\n    equation3 = Eq(tasha - riley, 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climbed = 0\n    day = 0\n\n    while climbed < height:\n        day += 1\n        climbed += 10\n        if climbed >= height:\n            break\n        climbed -= day\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    solved_value = solve(equation, x)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    a, b = 4, 3\n    sum_ = 0\n    for i in range(b):\n        sum_ += int(str(a) * (i + 1))\n    return sum_\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9 ** 2) - 7\n    return x\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')\n    equation1 = Eq(chan / 4, toh / 3 + 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    solutions = solve((equation1, equation2), (chan, toh))\n    \n    return solutions[toh]\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"Devil\"\n\n    # Create a dictionary to map each letter to the corresponding digit from angel\n    angel_to_digit = {letter: digit for letter, digit in zip(\"Angel\", angel)}\n\n    # Create the password for devil using the mapping from angel\n    devil_password = \"\".join(angel_to_digit.get(letter, \"\") for letter in devil)\n\n    # Andy's attempt\n    andy_attempt = \"4005220912\"\n\n    # Compare andy's attempt with the correct password\n    can_unlock = andy_attempt == devil_password\n\n    return can_unlock, devil_password if not can_unlock else \"Andy can unlock the chest\"\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for i in range(1, 6):\n        for j in range(1, 6 - i + 1):\n            if i != j:\n                count += 1\n            for k in range(1, 6 - i - j + 1):\n                if i != k and j != k and i + j + k == 6:\n                    count += 1\n                for l in range(1, 6 - i - j - k + 1):\n                    if i + j + k + l == 6 and len(set([i, j, k, l])) == len([i, j, k, l]):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert recurring decimals to fractions\n    term_1 = Fraction(1,9)\n    term_2 = Fraction(1,10) + Fraction(2,90)\n    term_3 = Fraction(2,10) + Fraction(3,90)\n    term_4 = Fraction(3,10) + Fraction(4,90)\n    term_5 = Fraction(4,10) + Fraction(5,90)\n    term_6 = Fraction(5,10) + Fraction(4,90)\n    term_7 = Fraction(7,10) + Fraction(8,90)\n    \n    # Sum up the terms\n    total = term_1 + term_2 + term_3 + term_4 + term_5 + term_6 + term_7\n\n    # Convert the fraction total to decimal\n    ans = float(total)\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', positive=True)\n    x = sqrt(a) - 2/sqrt(a)\n    \n    expression = sqrt(x**2 + 8*x)\n    simplified_expression = simplify(expression)\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Using the Pigeonhole Principle.\n    min_sheep_in_max_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "{\n  \"queId\": \"math_problem_example\",\n  \"problem\": \"已知正实数$$a$$，$$b$$，$$c$$满足$$ab+bc+ca=16\\left( a\\geqslant 3 \\right)$$．求$$2a+b+c$$的最小值．\",\n  \"trans_problem\": \"Given positive real numbers $$a$$, $$b$$, and $$c$$ that satisfy $$ab+bc+ca=16$$ with $$a \\geqslant 3$$. Find the minimum value of $$2a+b+c$$.\"\n}"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_students = total_boys + total_girls\n    \n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    \n    total_age_students = total_age_boys + total_age_girls\n    \n    mean_age_students = total_age_students / total_students\n    \n    return mean_age_students\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_password = '0141705021'\n    attempted_password = '4005220912'\n\n    if sorted(original_password) == sorted(attempted_password):\n        return True\n    else:\n        correct_password = ''.join(sorted(original_password))\n        return False, correct_password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The Chinese Remainder Theorem can solve this problem.\n    # The system of congruences is:\n    # x ≡ 1 (mod 6)\n    # x ≡ 8 (mod 13)\n    congruences = [(1, 6), (8, 13)]\n    \n    # Apply the Chinese Remainder Theorem to find a solution that satisfies\n    # the given congruences.\n    x = solve_congruence(*congruences)\n\n    # The solution is a tuple containing the answer and the modulus.\n    # Iterate the result to find the number between 200 and 300.\n    result = x[0][0]  # The first element is the solution.\n    modulus = x[0][1]  # The second element is the modulus (product of the moduli, 6*13=78)\n\n    # Since the modulus is 78, keep adding it to the result until we find a number between 200 and 300\n    while result < 200:\n        result += modulus\n\n    return result\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    import math\n\n    # The least number of days will be the least common multiple of their visit intervals\n    lcm = lambda a, b: abs(a * b) // math.gcd(a, b)\n    days = lcm(lcm(6, 12), 16)\n\n    return days\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # For Sara to be sure to get 5 balls of the same color, we consider the worst case scenario:\n    # She could pick 4 green balls, and still not have 5 of the same color.\n    # She could then pick 4 yellow balls, and still not have 5 of the same color.\n    # Finally, when she picks her 9th ball (in the worst case would be the first red ball),\n    # she still doesn't have 5 of the same color.\n    # Therefore, the next ball she picks, no matter the color, will guarantee that she has\n    # 5 balls of at least one color because there are only three colors.\n\n    # Thus, she must take out 4 (green) + 4 (yellow) + 1 (red) + 1 (to make sure 5 of one color) = 10 balls.\n    return 4 + 4 + 1 + 1\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the mass of a table as 't' and the mass of a chair as 'c'\n    t, c = symbols('t c')\n    \n    # According to the problem we have two equations:\n    # 1. The total mass of 3 tables is equal to the total mass of 4 chairs\n    equation1 = Eq(3 * t, 4 * c)\n    \n    # 2. A table is 2kg heavier than a chair\n    equation2 = Eq(t, c + 2)\n    \n    # Now, we'll solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    return solutions[t]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 25  # 10th term is given as 25\n    common_difference = 3  # The difference between terms is 3\n    n = 10  # Given that 25 is the 10th term\n\n    # a_n = a_1 + (n - 1) * d\n    # a_1 = a_n - (n - 1) * d\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    distance_pool = 30\n    speed_sam = 1\n    speed_ben = 0.6 \n    swimming_time = 10 * 60  # convert minutes to seconds\n    meet_count = 0\n\n    total_speed = speed_sam + speed_ben\n    while swimming_time > 0:\n        meet_time = distance_pool / total_speed\n        if swimming_time >= meet_time:\n            meet_count += 1\n            swimming_time -= meet_time\n            distance_pool = abs(distance_pool - speed_sam * meet_time - speed_ben * meet_time) \n        else:\n            swimming_time = 0\n            \n    return meet_count\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    def new_operation(a, b):\n        return (a // 10) * (a % 10) + (b // 10) * (b % 10)\n    \n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_cindy_avg = 120\n    doris_height = 126\n    total_height = bob_cindy_avg * 2 + doris_height\n    avg_height = total_height / 3\n    return avg_height\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # Equation for the future ages\n    future_eq = Eq(destin + 6, 2 * (nephew + 6))\n\n    # Equation for the past ages\n    past_eq = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    ages = solve((future_eq, past_eq), (destin, nephew))\n\n    # Calculate the sum of their ages in 10 years' time\n    sum_ages_in_10_years = (ages[destin] + 10) + (ages[nephew] + 10)\n\n    return sum_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq((boys*20 + girls*60) / 40, 35)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each had at first\n    x = symbols('x')\n\n    # Mrs Tan now has x + 12 pies\n    # Mrs Lim now has x - 4 pies\n    # Mrs Tan has twice as many pies as Mrs Lim now\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve for x\n    initial_pies = solve(equation, x)\n\n    return initial_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    fmt = '%I:%M%p'\n    departure_time = '6:35am'\n    arrival_time = '10:22am'\n    \n    departure = datetime.strptime(departure_time, fmt)\n    arrival = datetime.strptime(arrival_time, fmt)\n    \n    duration = arrival - departure\n    duration_in_minutes = duration.total_seconds() / 60\n\n    return int(duration_in_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_length = len(pattern)\n    \n    # Calculate how many complete patterns there are in a 50-digit number\n    complete_patterns = 50 // pattern_length\n    \n    # Calculate the sum of one complete pattern\n    sum_pattern = sum(int(digit) for digit in pattern)\n    \n    # Calculate the sum of the digits in all complete patterns\n    total_sum = sum_pattern * complete_patterns\n    \n    # Add the remaining digits if there are incomplete patterns\n    remaining_digits = 50 % pattern_length\n    if remaining_digits:\n        total_sum += sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3/5) / (5/7) / (7/9) / (9/13) / (13/15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3 / 5\n    sweets_first_group = 6\n\n    # Calculate the number of sweets given to the first group\n    sweets_first_group_total = total_sweets * fraction_first_group\n\n    # Calculate the number of students in the first group\n    students_first_group = sweets_first_group_total / sweets_first_group\n\n    # Calculate remaining sweets\n    remaining_sweets = total_sweets - sweets_first_group_total\n\n    fraction_second_group = 1 / 4\n    sweets_second_group = 4\n\n    # Calculate the number of sweets given to the second group\n    sweets_second_group_total = remaining_sweets * fraction_second_group\n\n    # Calculate the number of students in the second group\n    students_second_group = sweets_second_group_total / sweets_second_group\n\n    # Calculate the number of sweets given to the third group\n    sweets_third_group = 5\n\n    # Calculate remaining sweets for the third group\n    remaining_sweets_third_group = remaining_sweets - sweets_second_group_total\n\n    # Calculate the number of students in the third group\n    students_third_group = remaining_sweets_third_group / sweets_third_group\n\n    # Calculate the total number of students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Find all combinations of 2 cards for Candy and 3 cards for Candice\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    # Dictionary to store products of combinations for comparison\n    candy_products = {prod(combo): combo for combo in candy_combinations}\n    candice_products = {prod(combo): combo for combo in candice_combinations}\n\n    # Find the common product\n    common_product = set(candy_products.keys()) & set(candice_products.keys())\n\n    # Check which cards were used\n    used_cards = set()\n    for product in common_product:\n        used_cards.update(candy_products[product])\n        used_cards.update(candice_products[product])\n\n    # Find the card that was not picked\n    not_picked = set(cards) - used_cards\n    \n    return not_picked.pop()\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n\n    tom_years_to_father_age = father_future_age - tom_age\n    father_current_age = tom_years_to_father_age + tom_age\n\n    return father_current_age\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for num in range(999, 2, -2): # Start from the largest possible odd number below 1000\n        can_split = False\n        for i in range(2, num - 3):\n            if is_composite(i):\n                for j in range(i + 1, num - 1):\n                    if is_composite(j) and is_composite(num - i - j) and (num - i - j) != i and (num - i - j) != j:\n                        can_split = True\n                        break\n            if can_split:\n                break\n        if not can_split:\n            return num\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    packet_one = 25\n    packet_two = 20\n\n    days_to_sync = lcm(packet_one, packet_two)\n    \n    # March 1st is the first day\n    sync_day_number = days_to_sync + 1\n    \n    return sync_day_number\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "Input:\n{\"queId\": \"unique_id_123\", \"problem\": \"赫尔墨斯号太空飞船由地球飞往火星，原计划$$550$$天能到达，实际平均每天比原计划多航行$$1$$万千米，结果提前$$50$$天到达．那么，地球到火星的距离是多少万千米？ \"}\nOutput:\n{\"queId\": \"unique_id_123\", \"problem\": \"赫尔墨斯号太空飞船由地球飞往火星，原计划$$550$$天能到达，实际平均每天比原计划多航行$$1$$万千米，结果提前$$50$$天到达．那么，地球到火星的距离是多少万千米？ \", \"trans_problem\": \"The Hermes spacecraft was planned to reach Mars from Earth in $$550$$ days, but it actually traveled an average of $$1$$ ten-thousand kilometers more per day than planned and consequently arrived $$50$$ days early. What is the distance from Earth to Mars in ten-thousand kilometers?\"}"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert the mixed numbers into improper fractions\n    first_num = (3 * 4 + 1) / 4  # 3 1/4 as an improper fraction\n    second_num = (1 * 4 + 3) / 4  # 1 3/4 as an improper fraction\n    \n    # Calculate the difference and converting the result into a decimal\n    ans = float(first_num - second_num)\n    \n    return ans\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_prize = 580\n    boy_prize = 8\n    girl_prize = 5\n    ratio = 3\n    \n    # Let the number of girls be g and number of boys be 3g (since there are thrice as many boys as girls)\n    # Equation: girl_prize * g + boy_prize * (3 * g) = total_prize\n    g = symbols('g')\n    equation = Eq(girl_prize * g + boy_prize * (ratio * g), total_prize)\n\n    # Solve for g\n    number_of_girls = solve(equation, g)\n    \n    # Calculate number of boys using the ratio\n    number_of_boys = ratio * number_of_girls[0]\n    \n    return number_of_boys\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    # The sequence starts from 3 and ends before 100 because 100 % 4 != 3\n    # The common difference is 4 because we are considering numbers that leave a remainder of 3 when divided by 4\n    first_term = 3\n    common_difference = 4\n    # Find the last term less than or equal to 100 with a remainder of 3 after dividing by 4\n    last_term = (100 // 4) * 4 - 1\n    # Number of terms in the sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    for a in range(1, perimeter // 2):\n        for b in range(a, (perimeter - a) // 2 + 1):\n            c = perimeter - a - b\n            if a <= b <= c and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    # Sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n    \n    # A few years ago, elder's current age was younger's age\n    # Younger was half of elder's current age\n    equation2 = Eq(elder - (elder - younger), younger / 2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using inclusion-exclusion principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    import math\n    students_class_a = 8\n    students_class_b = 12\n    students_class_c = 20\n    ans = math.gcd(students_class_a, math.gcd(students_class_b, students_class_c))\n    return ans\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n    passed_only_first_exam = total_students - passed_both_exams - failed_second_exam\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of direct routes from A to D\n    direct_A_D = 6\n    \n    # Number of indirect routes from A to D via B and C (A->B->C->D)\n    indirect_A_B_C_D = 7 * 5 * 2\n    \n    # Number of indirect routes from A to D via C (A->C->D)\n    indirect_A_C_D = 4 * 2\n    \n    # Total number of routes from A to D\n    total_routes = direct_A_D + indirect_A_B_C_D + indirect_A_C_D\n    \n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    for chocolate_cupcakes in range(255):\n        cheese_cupcakes = 255 - chocolate_cupcakes\n        if chocolate_cupcakes - 0.4 * chocolate_cupcakes == cheese_cupcakes - 0.75 * cheese_cupcakes:\n            return int(chocolate_cupcakes - 0.4 * chocolate_cupcakes)\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price = symbols('pen_price')\n    pencil_price = 2  # given in the problem statement\n\n    # equation representing the total cost\n    equation = Eq(2 * pen_price + 3 * pencil_price, 20)\n\n    # solving the equation for pen_price\n    pen_price_solution = solve(equation, pen_price)\n\n    return pen_price_solution[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n    \n    daily_consumption_per_cattle = total_hay / (cattle * days)\n    \n    return daily_consumption_per_cattle\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_students = 39\n\n    equation = Eq((1 / 4) * boys, (2 / 5) * girls)\n    students_count = Eq(girls + boys, total_students)\n\n    solutions = solve((equation, students_count), (girls, boys))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_weight = 960\n    box_capacity = 8\n    num_boxes = total_weight // box_capacity\n    return num_boxes\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3/10) * 54 + 0.3 * 45 + 30/100\n    return result\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - full_days * daily_consumption\n    \n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = (12 * 92) + (22 * 82) + (32 * 72)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    don, ben = symbols('don ben', real=True, positive=True)\n\n    # Original ratio equation\n    equation1 = Eq(don / ben, 2/3)\n    \n    # Ratio after changes\n    equation2 = Eq((don + 10) / (ben - 5), 6/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (don, ben))\n    \n    # Extract Don's initial stickers count\n    don_initial = solutions[don]\n    \n    return don_initial\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total = 0\n    for i in range(2, 2017, 2):\n        total += i - (i - 1)\n    return total\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    \n    return ans\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $5 and $10 notes\n    n5, n10 = symbols('n5 n10')\n\n    # The total of $5 and $10 notes\n    equation1 = Eq(n5 + n10, 116)\n\n    # After spending money on the bag, relationships between $5 and $10 notes\n    spent_10 = 60/100 * n10\n    spent_5 = 25/100 * n5\n    remaining_10 = n10 - spent_10\n    remaining_5 = n5 - spent_5\n\n    # Jeremy was left with 4/7 as many $10 notes as $5 notes\n    equation2 = Eq(remaining_10, 4/7 * remaining_5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n5, n10))\n\n    # Calculate how much was spent from the $10 and the $5 notes\n    spent_money = spent_10 * 10 + spent_5 * 5\n\n    # Define the symbols for the cost of the bag\n    cost = symbols('cost')\n\n    # Equation for the cost of the bag (the amount spent)\n    equation3 = Eq(cost, spent_money)\n\n    # Solve for the cost of the bag\n    bag_cost = solve(equation3, cost)\n\n    return bag_cost[cost].subs(solutions)\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "Output:\n{\n  \"queId\": \"specific_question_id\", \n  \"problem\": \"小红从家步行去学校．如果每分钟走$$120$$米，那么将比预定时间早到$$5$$分钟：如果每分钟走$$90$$米，则比预定时间迟到$$3$$分钟，那么小红家离学校有多远？\",\n  \"trans_problem\": \"Xiaohong walks from home to school. If she walks at $$120$$ meters per minute, she will arrive $$5$$ minutes early. If she walks at $$90$$ meters per minute, she will be $$3$$ minutes late. How far is Xiaohong's home from school?\"\n}"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31-a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    return sum_of_squares * 2 - 20**2\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef count_permutations(n, r):\n    return factorial(n) // factorial(n - r)\n\ndef solution():\n    # Total students except the triplets = 7 - 3 = 4 (2 boys and 2 other girls)\n    # Now these 4 students can be arranged in 4! ways\n    # But the twin brothers cannot stand next to each other, so we subtract the cases where they are together\n    # When counting twins as a single entity, we have 3 entities to arrange: 3! ways\n    # And the twins themselves can be arranged in 2! ways\n    # Total ways the twins can be together is 3! * 2!\n    total_ways = count_permutations(4, 4) # Ways to arrange 4 entities (3 girls as one entity + 1 girl + 2 boys)\n    twins_together = count_permutations(3, 3) * count_permutations(2, 2) # Ways the twins can be together\n    girls_together = count_permutations(3, 3) # Ways to arrange the triplets between themselves\n    \n    # Subtracting the number of ways twins can be together from total ways and multiplying by the ways triplets can be arranged\n    return (total_ways - twins_together) * girls_together\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_order = 30\n    milk_needed = milk_per_cup * cups_order\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    num_students = 320\n    num_days_in_week = 7\n\n    # Applying Pigeonhole Principle\n    min_students_in_max_day = (num_students + num_days_in_week - 1) // num_days_in_week\n\n    return min_students_in_max_day\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 210\n    divs = divisors(210)\n    # Filter out the divisors greater than or equal to 10 as ages are under 10\n    divs = [x for x in divs if x < 10]\n    # Find all possible tuples of ages\n    possible_ages = [(x, y, 210 // (x * y)) for x in divs for y in divs if x * y < 210 and 210 % (x * y) == 0 and x < y < 210 // (x * y) < 10 ]\n\n    # Select the tuple with the smallest youngest age,\n    # which is the first element in each tuple\n    youngest_age = min(possible_ages)[0]\n\n    return youngest_age\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wearing_glasses = 0.20\n    total_girls = 25\n    girls_wearing_glasses = total_girls * percentage_wearing_glasses\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy import lcm\n\n    # Least common multiple of given divisors\n    common_divisor_lcm = lcm([2, 3, 4, 5, 6, 8, 9])\n\n    # Since N gives a remainder of 5 when divided by 7, we need to find\n    # the smallest number that when 5 is added to it, it is a multiple of 7.\n    # N = common_divisor_lcm * k + 5, where k is some integer such that N % 7 = 5\n\n    # Starting with k = 1, we increment k until we find the smallest N satisfying the conditions\n    k = 1\n    while (common_divisor_lcm * k + 5) % 7 != 0:\n        k += 1\n    ans = common_divisor_lcm * k + 5\n    return ans\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Costs of pencil and pen\n    cost_pencil = 2\n    cost_pen = 4\n    \n    # Calculate how many pencils are worth one pen\n    pencils_per_pen = cost_pen // cost_pencil\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assuming the summer vacation starts on a Monday (as it's the worst case scenario)\n    # because starting on a Monday gives maximum number of Fridays possible.\n    # If it starts on Friday, then only 7 Fridays, because 55 days later it's Sunday.\n    # The distribution of days over 55 days would be:\n    # 7 full weeks (7*7=49 days) and 6 extra days.\n    # If the first day of the period is a Monday, then the sixth day would be a Saturday,\n    # and the 7th would be a Sunday. Thus the first Friday occurs on day 5, and every\n    # 7 days thereafter (i.e., day 12, 19, 26, 33, 40, 47, and 54), for a total of 8 Fridays.\n    \n    num_days = 55\n    # Calculate number of complete weeks\n    full_weeks = num_days // 7\n    # Calculate the remaining days after full weeks\n    remaining_days = num_days % 7\n    # We get 7 full weeks + max 6 days, so maximum number of Fridays will be full_weeks + 1\n    # (since the first Friday could be within the first 6 days, given the worst case scenario)\n    max_fridays = full_weeks + (1 if remaining_days >= 5 else 0)\n\n    return max_fridays\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of 1 mug\n    cost_per_mug = 3.50 / 5\n    # Cost of 1 pen\n    cost_per_pen = 6.80 / 8\n    \n    # Calculate total cost for 7 mugs\n    total_cost_mugs = cost_per_mug * 7\n    # Calculate total cost for 5 pens\n    total_cost_pens = cost_per_pen * 5\n    \n    # Calculate total cost\n    total_cost = total_cost_mugs + total_cost_pens\n    \n    # Calculate change from £10\n    change = 10 - total_cost\n    \n    return round(change, 2)   # Round to 2 decimal places to represent money\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_going = total_pupils - pupils_away\n    return int(pupils_going)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3\n    number_of_songs = 2\n    number_of_children = 50\n\n    total_time = time_per_child_per_song * number_of_songs * number_of_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_three_apples_less = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_three_apples_less\n    weight_per_apple = weight_of_three_apples // 3\n    weight_of_basket = total_weight_with_apples - (5 * weight_per_apple)\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    percent_value = 25 / 100\n    decimal_value = 0.3\n    ans = \"0.3\" if decimal_value > percent_value else \"25 %\"\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    # Using the formula A = P(1 + rt) to calculate the time t\n    time = (final_amount / principal - 1) / rate\n    \n    return round(time)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    number_of_boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * number_of_boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    for num in range(lcm, lcm*10, lcm):\n        if str(num)[-1] == '2':\n            return num\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # initially there were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n\n    # after 39 cookies and 17 cakes were sold\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # solving the two equations together\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    weeks = 2\n    return days_in_a_week * weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position1 = 3 * 10**2  # The value of the 3 in the hundred's place\n    position2 = 3 * 10**5  # The value of the 3 in the hundred thousand's place\n    \n    diff = position2 - position1  # Difference in values\n    \n    return diff\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the productivity rates for John, Jonah, and Angus as symbols\n    r_john, r_jonah, r_angus = symbols('r_john r_jonah r_angus')\n\n    # Equation for all three working together\n    equation1 = Eq(1 / r_john + 1 / r_jonah + 1 / r_angus, 1 / 27)\n\n    # Equation for Jonah and Angus working together\n    equation2 = Eq(1 / r_jonah + 1 / r_angus, 1 / 36)\n\n    # Jonah and Angus working 36 hours to do the same job done by \n    # all three in 27 hours. Thus substitution is possible.\n    # equating Jonah and Angus's one-hour work with their combined work from equation2\n    equation3 = Eq(1 / r_jonah + 1 / r_angus, equation2.rhs)\n    \n    # As equations 1 and 2 are sufficient to solve for the rates, we can solve for r_john\n    solutions = solve((equation1, equation3), (r_john, r_jonah, r_angus))\n\n    # r_john represents John's rate of work, so his time to complete the work is the inverse of his rate\n    john_time = 1 / solutions[r_john]\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    # Calculate the power\n    result = 2 ** 17\n    # Get the ones digit\n    ones_digit = result % 10\n    return ones_digit\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Since trees are planted at both ends, the first tree is at 0m and last tree at 150m\n    num_trees = (road_length / tree_spacing) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This problem is a variant of the Frobenius coin problem\n    # For coin denominations a, b (where a and b are coprime), the largest amount that cannot be paid is a*b - a - b\n    a = 4\n    b = 5\n    largest_non_payable_total = a*b - a - b\n\n    return largest_non_payable_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # If the sum of 10 positive integers is 1001, and we are looking for the greatest common divisor of these numbers,\n    # We can start by checking whether 1001 itself is divisible by numbers up to 10 since we are looking for the maximum possible value of d.\n\n    sum_of_numbers = 1001\n    for d in reversed(range(1, sum_of_numbers + 1)):\n        # If the sum itself is divisible by the number, \n        # and when divided it still represents a sum of 10 numbers, \n        # it means it is a possible value of d.\n        if sum_of_numbers % d == 0 and (sum_of_numbers // d) == 10:\n            return d\n    # No d found, which is not possible as per the question's constraints.\n    return None\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    years_passed = 5 + 3  # From 'five years ago' till 'in 3 years'\n    combined_age_in_3_years = combined_age_5_years_ago + years_passed * 2  # Both Claire and Daniel age\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a*10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    \n    length1 = 45\n    length2 = 30\n    \n    longest_length = gcd(length1, length2)\n    \n    return longest_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Define the equation based on the problem statement\n    equation = Eq(boys - boys/11, girls - 5)\n\n    # We know that the total number of students is the sum of boys and girls\n    total_students_eq = Eq(boys + girls, 152)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_students_eq), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    days_to_adult = 30\n    total_days = 40\n    total_adults = 0\n\n    for day in range(days_to_adult, total_days + 1):\n        total_adults += eggs_per_day\n\n    return total_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # Solve the equation (24 - x) / 3 = 7 for x\n    x = (24 - (7 * 3))\n    return x\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n\n    all_three = 1\n\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n\n    return total\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n    last_term = first_term + (num_rows - 1) * difference\n\n    total_students = (num_rows * (first_term + last_term)) // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # Since M - N = 22122, and M = 5abcd, N = abcd5, we can express M and N as follows:\n    # M = 50000 + abcd\n    # N = abcd + 5\n    # Therefore, M - N = (50000 + abcd) - (abcd + 5) = 50000 - 5 = 49995\n    # But it is given that M - N = 22122, so we equate 49995 to 22122 to find abcd:\n    abcd = 22122 - (50000 - 5)\n    \n    return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_a = 21 + Fraction(21, 286)\n    mixed_b = 6 + Fraction(647, 2530)\n    mixed_c = 1 + Fraction(1370, 2829)\n\n    result = mixed_a / mixed_b * mixed_c\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the dimensions of the small cubes\n    volume_cuboid = 6 * 10 * 12\n    num_small_cubes = 720\n    side_small_cube = (volume_cuboid / num_small_cubes) ** (1/3)\n\n    # Calculate the number of small cubes along each edge of the cuboid\n    num_cubes_6_side = 6 / side_small_cube\n    num_cubes_10_side = 10 / side_small_cube\n    num_cubes_12_side = 12 / side_small_cube\n\n    # Calculate the number of cubes with one face painted\n    # For each face of the cuboid, we exclude the edges and just count the \"middle\" cubes\n    painted_cubes_6_10 = (num_cubes_6_side - 2) * (num_cubes_10_side - 2) * 2 # Top and bottom faces\n    painted_cubes_6_12 = (num_cubes_6_side - 2) * (num_cubes_12_side - 2) * 2 # Front and back faces\n    painted_cubes_10_12 = (num_cubes_10_side - 2) * (num_cubes_12_side - 2) * 2 # Left and right faces\n\n    # Total painted cubes with exactly one face painted\n    total_painted_cubes = painted_cubes_6_10 + painted_cubes_6_12 + painted_cubes_10_12\n\n    return int(total_painted_cubes)\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # Sam's total money in pounds\n    pencil_cost = 0.38  # cost of a pencil in pounds\n    ruler_cost = 0.59   # cost of a ruler in pounds\n    \n    # Calculate the remaining money after buying the pencil and ruler\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n    \n    return remaining_money\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "Input:\n{\"queId\": \"unknown\", \"problem\": \"计算：$${{99}^{2}}+{{97}^{2}}-{{95}^{2}}-{{93}^{2}}+{{91}^{2}}+{{89}^{2}}-{{87}^{2}}-{{85}^{2}}+\\cdots +{{11}^{2}}+{{9}^{2}}-{{7}^{2}}-{{5}^{2}}$$\"}\nOutput:\n{\"queId\": \"unknown\", \"problem\": \"计算：$${{99}^{2}}+{{97}^{2}}-{{95}^{2}}-{{93}^{2}}+{{91}^{2}}+{{89}^{2}}-{{87}^{2}}-{{85}^{2}}+\\cdots +{{11}^{2}}+{{9}^{2}}-{{7}^{2}}-{{5}^{2}}$$\", \"trans_problem\": \"Calculate: $${{99}^{2}}+{{97}^{2}}-{{95}^{2}}-{{93}^{2}}+{{91}^{2}}+{{89}^{2}}-{{87}^{2}}-{{85}^{2}}+\\cdots+{{11}^{2}}+{{9}^{2}}-{{7}^{2}}-{{5}^{2}}$$.\"}"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')  \n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # Prime factorization of 140: 2^2 * 5 * 7\n    # Every divisor that contributes to the distribution must be odd\n    # Hence, we exclude the 2^2 part\n    # Find divisors of 5 * 7 = 35\n    odd_divisors = divisors(35)\n\n    # Each divisor represents a different way to distribute the candies,\n    # because for each divisor 'd', there are 'd' piles with 140/d candies each.\n    ans = len(odd_divisors)\n\n    return ans\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    num_classrooms = 20\n    max_tries = sum(range(1, num_classrooms + 1))\n    return max_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Initial state of the stacks\n    stack_A = 20\n    stack_B = 20\n\n    # Tom takes 4 stones from stack B\n    stack_B -= 4\n\n    # To ensure a win, Jerry needs to balance the two stacks.\n    # So Jerry will take stones from stack A to make both stacks equal.\n    stones_jerry_takes = stack_A - stack_B\n\n    # Jerry takes from stack A\n    stack_A -= stones_jerry_takes\n\n    return stones_jerry_takes, 'A'\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet of the newspaper consists of four page numbers\n    # where the first and last page numbers on the sheet are consecutive.\n    # The middle two page numbers are consecutive and equal the sum of the first and last.\n    # For example, on the first sheet, the pages are 1, 2, 3, 4, and their sum is 10.\n\n    # For the third sheet, the first page number will be 2 * (3 - 1) + 1 = 5\n    first_page = 2 * (3 - 1) + 1\n    # The last page number will be 56 - 2 * (3 - 1) = 52\n    last_page = 56 - 2 * (3 - 1)\n    # The sum of the page numbers on the third sheet will be\n    # first_page + (first_page + 1) + (last_page - 1) + last_page\n    sum_of_pages = first_page + (first_page + 1) + (last_page - 1) + last_page\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    number_of_girls = total_students * fraction_girls\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num1 = 2017 / 2018\n    num2 = 20172017 / 20182018\n    num3 = 201720172017 / 201820182018\n\n    ans = (num1 + num2) / num3\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # Number of peaches one can get for one watermelon\n    peaches_per_watermelon = 6\n    # Number of apples one can get for two peaches\n    apples_per_two_peaches = 3\n\n    # Calculate the total number of apples one can get for one watermelon\n    apples_per_watermelon = (peaches_per_watermelon / 2) * apples_per_two_peaches\n\n    return int(apples_per_watermelon)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    total_pages = 0\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = 900 * 3\n\n    if digits <= pages_with_1_digit:\n        total_pages = digits\n    elif digits <= pages_with_1_digit + pages_with_2_digits:\n        remaining_digits = digits - pages_with_1_digit\n        total_pages = remaining_digits // 2 + 9\n    else:\n        remaining_digits = digits - (pages_with_1_digit + pages_with_2_digits)\n        total_pages = remaining_digits // 3 + 99\n    \n    return total_pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    total_pens_A = 10 + 15 + 20 + 25\n    total_pens_B = 10 + 15 + 20 + 25\n    \n    # After moving 20 pens from A to B\n    total_pens_A -= 20\n    total_pens_B += 20\n    \n    # The minimum pens that Jane wants in Box A is 15 of each color, which totals 15 * 4\n    min_pens_A = 15 * 4\n    \n    # The number of pens to return is the difference between the min pens and current pens in Box A\n    pens_to_return = min_pens_A - total_pens_A\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    num_digits = sum(len(str(i)) for i in range(1, 92))\n    return num_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time_hour = 21\n    start_time_minute = 15\n    end_time_hour = 23\n    end_time_minute = 6\n\n    start_in_minutes = start_time_hour * 60 + start_time_minute\n    end_in_minutes = end_time_hour * 60 + end_time_minute\n\n    duration = end_in_minutes - start_in_minutes\n\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    difference = 32\n    total_students = 0\n    layer = 0  # layer count: 0 - boys, 1 - girls, 2 - boys, etc.\n    \n    while True:\n        # Boys are on even layers (0, 2, 4, ...)\n        # Girls are on odd layers (1, 3, 5, ...)\n        # The number of students in each layer is 4 times the layer\n        # index, because a square of side n has perimeter 4n, minus 4 for the \n        # overlapping corners.\n        if layer % 2 == 0:  # if the layer count is even, it's boys\n            boys = 4 * layer\n        else:  # if the layer count is odd, it's girls\n            girls = 4 * layer\n        \n        total_boys_minus_girls = boys - girls\n        if total_boys_minus_girls == difference:\n            # Calculate the total students by summing the squares of all layers\n            for i in range(layer + 1):\n                total_students += (2*i + 1)**2\n            break\n        \n        layer += 1\n        \n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total number of chocolates\n    total_chocolates = 20\n    \n    # Number of plain chocolates\n    plain_chocolates = 8\n    \n    # Number of chocolates with soft-centres\n    soft_centres = 16\n    \n    # The worst case scenario is that all the milk chocolates have soft-centres.\n    # This would leave the minimum number of plain chocolates with soft-centres.\n    # Since there are 12 milk chocolates, the minimum number of plain chocolates\n    # with soft-centres would be the total with soft-centres minus all the milk\n    # chocolates, if they all had soft-centres.\n    min_plain_soft_centres = soft_centres - (total_chocolates - plain_chocolates)\n\n    # The best case scenario is that all the plain chocolates have soft-centres,\n    # which would be the maximum number of plain chocolates with soft-centres.\n    max_plain_soft_centres = min(plain_chocolates, soft_centres)\n\n    # Returning the range of possible plain chocolates with soft-centres\n    return min_plain_soft_centres, max_plain_soft_centres\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "{\n  \"queId\": \"unknown\",\n  \"problem\": \"2004年雅典奥运会女子10000米比赛中，我国运动员邢慧娜夺得了冠军．测得邢慧娜在比赛中的平均速度是5.5米/秒，另有一名参赛运动员的平均速度是5米/秒．已知跑道每一圈长400米．则邢慧娜与这名运动员在比赛过程中一共相遇了多少次?\",\n  \"trans_problem\": \"During the women's 10000 meters race at the 2004 Athens Olympic Games, the Chinese athlete Xing Huina won the championship. It was measured that Xing Huina's average speed during the race was $$5.5$$ meters per second, while another competitor's average speed was $$5$$ meters per second. Given that each lap of the track is $$400$$ meters long, how many times did Xing Huina and this competitor meet during the race?\"\n}"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_playing_violin = 12.5\n    number_of_violin_players = 11\n\n    total_pupils = (number_of_violin_players * 100) / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    cost_per_bar = 50\n    C = n * cost_per_bar\n    return C\n\nans = solution(1)  # Example call to `solution` function with n=1"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create variables for number of coins of each type\n    num_1p, num_2p, num_5p, num_10p = symbols('num_1p num_2p num_5p num_10p')\n\n    # All the coins are in equal number, therefore num_1p = num_2p = num_5p = num_10p\n    equation1 = Eq(num_1p, num_2p)\n    equation2 = Eq(num_1p, num_5p)\n    equation3 = Eq(num_1p, num_10p)\n\n    # Total value of all coins is 90p\n    total_value = Eq(num_1p * 1 + num_2p * 2 + num_5p * 5 + num_10p * 10, 90)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, total_value), (num_1p, num_2p, num_5p, num_10p))\n\n    # Total number of coins is the sum of the number of coins of each type\n    total_coins = sum(solutions.values())\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let a be the number of apples and p be the number of pears\n    a, p = symbols('a p')\n    \n    # The equation for the total number of fruit\n    equation1 = Eq(a + p, 105)\n    \n    # After 1/3 of the apples and 2/5 of the pears were sold,\n    # there were 5/6 as many apples as pears left.\n    equation2 = Eq((a - a/3) / (p - 2*p/5), 5/6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n    apples = solutions[a]\n    pears = solutions[p]\n    \n    # Find the total number of apples and pears sold\n    apples_sold = apples / 3\n    pears_sold = 2 * pears / 5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_eq = Eq(4 * B, 5 * A)\n    ratio_eq2 = Eq(5 * C, 6 * B)\n    diff_eq = Eq(C - A, 10)\n\n    solutions = solve((ratio_eq, ratio_eq2, diff_eq), (A, B, C))\n    A_value = solutions[A]\n    B_value = solutions[B]\n    C_value = solutions[C]\n\n    return A_value + B_value + C_value\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n    \n    # Factorial of the number of ways to arrange A, B, C, and D when they are next to each other\n    arrange_ABCD = factorial(4)\n    \n    # Considering A, B, C, and D as a single unit, we have to arrange this unit with the remaining 8 students\n    arrange_with_unit = factorial(9)\n    \n    # Multiply the ways of arranging the 4 together with the ways of arranging the entire group\n    total_ways = arrange_ABCD * arrange_with_unit\n    \n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_games = 6 * (6 - 1) // 2  # Total number of games (combinatorial calculation)\n    total_points = total_games * 2  # Total points distributed (2 points per game)\n    known_points = 7 + 6 + 5 + 4 + 3  # Points of five students\n    remaining_points = total_points - known_points  # Points of the remaining student\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Initial ratio A:B = 5:3\n    equation1 = Eq(A/B, 5/3)\n\n    # After moving 10g from A to B, the ratio becomes 7:5\n    equation2 = Eq((A - 10) / (B + 10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total weight is the sum of A and B\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = girls_per_boy * number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (a1 + an)\n    # Where S is the sum of the sequence, n is the number of terms, a1 is the first term, and an is the last term\n    # Since S (total_players) and a1 (first_line_players), an (last_line_players) are known,\n    # We can find n, the number of lines (which is also the number of terms in this arithmetic sequence)\n    # After finding n, we will use the formula for the nth term of an arithmetic sequence: an = a1 + (n - 1) * d\n    # to find d, the common difference.\n\n    # Rearranging the sum formula to solve for n gives us: n = 2S / (a1 + an)\n    number_of_lines = 2 * total_players / (first_line_players + last_line_players)\n    \n    # Since n must be an integer (you can't have a fraction of a line), we round it to the nearest integer\n    number_of_lines = round(number_of_lines)\n\n    # Now use the nth term formula to solve for d (common difference):\n    # last_line_players = first_line_players + (number_of_lines - 1) * d\n    # Rearranging for d gives us: d = (last_line_players - first_line_players) / (number_of_lines - 1)\n    difference = (last_line_players - first_line_players) / (number_of_lines - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 200):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "Input:\n{\"queId\": \"3e38c3b5487a4e9fb7077e9e7414b8c0\", \"problem\": \"化简：$$\\\\frac{b}{(a-b)(b-c)}+\\\\frac{c}{(b-c)(c-a)}+\\\\frac{a}{(c-a)(a-b)}$$．\"}\nOutput:\n{\"queId\": \"3e38c3b5487a4e9fb7077e9e7414b8c0\", \"problem\": \"化简：$$\\\\frac{b}{(a-b)(b-c)}+\\\\frac{c}{(b-c)(c-a)}+\\\\frac{a}{(c-a)(a-b)}$$．\", \"trans_problem\": \"Simplify: $$\\\\frac{b}{(a-b)(b-c)}+\\\\frac{c}{(b-c)(c-a)}+\\\\frac{a}{(c-a)(a-b)}$$.\"}"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # All in grams for consistency\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    thefts = 2\n    days = 1000\n    weeks = days / 7\n    barks_per_week = 3\n    total_barks = weeks * barks_per_week\n    bark_given_theft_probability = 0.9\n\n    probability_of_bark_during_theft = (bark_given_theft_probability * thefts) / total_barks\n\n    return probability_of_bark_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    return 1  # the smallest possible difference is between consecutive numbers\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n\n    # boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n\n    # (2/5) * boys = (3/7) * girls\n    equation2 = Eq((2/5) * boys, (3/7) * girls)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n\n    # Substituting values of boys and girls\n    boys_left = boys_left.subs(solutions)\n    girls_left = girls_left.subs(solutions)\n\n    # Total number of students left in the hall at the end\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let's call the original number of bricks b\n    # From the problem we have the following equations\n    # b / 2 - 26 = number of bricks moved in the first trip\n    # (b - (b / 2 - 26)) / 2 + 11 = number of bricks moved in the second trip\n    # Finally 25 bricks remained unmoved after moving 68 bricks in the third trip\n\n    # We calculate what was left after the first trip\n    remaining_after_first = lambda b: b - (b / 2 - 26)\n\n    # We calculate what was moved in the second trip\n    moved_on_second = lambda b: (remaining_after_first(b) / 2 + 11)\n\n    # Now we calculate the original number of bricks\n    # 25 bricks remained unmoved\n    # 68 bricks were moved in the third trip\n    # Therefore, the number of bricks before the third trip is 25 + 68\n    bricks_before_third = 25 + 68\n\n    # Hence the total number of bricks after the second trip is\n    # bricks_before_third + moved_on_second\n    # We set this equal to remaining_after_first and solve for b\n    # That is, remaining_after_first(b) - moved_on_second(b) = bricks_before_third\n\n    # Define the equation to be solved\n    equation = lambda b: remaining_after_first(b) - moved_on_second(b) - bricks_before_third\n\n    # We implement a simple numerical solution to find the root of the equation\n    b = bricks_before_third\n    while equation(b) != 0:\n        b += 1\n\n    return b\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    # Number of pupils\n    total_pupils = 1690\n    \n    # Boys to girls ratio and difference\n    boys_more_than_girls = 90\n    \n    # Swimming ratio for girls\n    girls_swim_ratio = (31, 49)\n    \n    # Swimming difference for boys\n    boys_swim_diff = 120\n    \n    # Total number of girls\n    girls = (total_pupils - boys_more_than_girls) // 2\n\n    # Total number of boys\n    boys = girls + boys_more_than_girls\n\n    # Calculate the number of girls who cannot swim\n    girls_cant_swim = girls * girls_swim_ratio[1] / (girls_swim_ratio[0] + girls_swim_ratio[1])\n    \n    # Calculate the number of boys in both swimming categories\n    boys_can_swim = ((boys + boys_swim_diff) // 2) - boys_swim_diff\n    boys_cant_swim = boys_can_swim + boys_swim_diff\n    \n    # Total pupils who cannot swim\n    total_cant_swim = girls_cant_swim + boys_cant_swim\n    \n    return int(total_cant_swim)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    result = 2412 // 9\n    return result\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for page in range(1, 131):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    ways = math.factorial(3)\n    return ways\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    for n in range(3, 100):  # Assuming the class isn't extremely large, iterating up to 100 should suffice.\n        total_seats = n * n\n        if (n - 2) * (n - 2) == total_seats - 1:\n            return total_seats - 1  # Subtract 1 to exclude Mike's spot.\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # let g represent Geoff's current age and s represent his sister's current age\n    # The problem states that:\n    # g + s = 22\n    \n    # We want to find the number of years, let's call it n, such that:\n    # (g + n) + (s + n) = 40\n    # Expanding and simplifying the equation gives us:\n    # 2n + (g + s) = 40\n    # Since we know g + s = 22, we substitute it into the equation:\n    # 2n + 22 = 40\n    # Now we solve for n:\n    n = (40 - 22) / 2\n    \n    return int(n)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Inverse of 1/3 getting off\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Inverse of 2/5 getting off\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for page in range(1, 21):\n        count += len(str(page))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary that will hold the number of ways to reach each step.\n    num_ways = {0: 1}  # Base case: there is one way to stand on the ground (0-th step)\n\n    # Use dynamic programming to calculate the number of ways to reach each step from step 1 to step 10.\n    for current_step in range(1, 11):\n        # The number of ways to reach the current step is the sum of the ways to reach the step from which a 2-step or 3-step jump is possible.\n\n        # Initialize the number of ways to 0.\n        num_ways[current_step] = 0\n\n        # If it's possible to reach the current step by taking 2 steps, add the ways to reach the step 2 steps before it.\n        if (current_step - 2) in num_ways:\n            num_ways[current_step] += num_ways[current_step - 2]\n\n        # If it's possible to reach the current step by taking 3 steps, add the ways to reach the step 3 steps before it.\n        if (current_step - 3) in num_ways:\n            num_ways[current_step] += num_ways[current_step - 3]\n\n    # The number of ways to reach the 10th step will be stored at num_ways[10].\n    return num_ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "Output:\n{\n  \"queId\": \"YOUR_QUESTION_ID\",\n  \"problem\": \"两名运动员在湖周围的环形道上练习长跑．甲每分钟跑$$250$$米，乙每分钟跑$$200$$米，两人同时同地同向出发，经过$$45$$分钟甲追上乙；如果两人同时同地反向出发，经过多少分钟两人相遇？\",\n  \"trans_problem\": \"Two athletes are running around a circular track next to a lake. Athlete A runs $$250$$ meters per minute, and athlete B runs $$200$$ meters per minute. Both start from the same spot in the same direction at the same time, and after $$45$$ minutes, A catches up with B. If both start from the same spot but in opposite directions, how many minutes will pass before they meet?\"\n}"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The smallest possible divisor is 1 (since the divisor cannot be 0)\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    current_number = '1998'\n    while int(current_number) % 33 != 0:\n        current_number += '1998'\n    ans = len(current_number)\n    return ans\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_element = group_number\n    second_element = group_number ** 2\n    third_element = group_number ** 3\n\n    sum_of_numbers = first_element + second_element + third_element\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    num_runs = total_miles / per_run_miles\n    return num_runs\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3_030_030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n\n    # Calculate total girls using the ratio\n    total_girls = (total_boys / boys_to_girls_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    num = 100\n    while not (num % 5 == 3 and num % 6 == 4 and num % 9 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Candice, Doris, Elly = symbols('Candice Doris Elly')\n\n    equation1 = Eq(Elly, Doris + 6)\n    equation2 = Eq(Candice, 5 * Elly)\n    equation3 = Eq(Candice + Doris + Elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (Candice, Doris, Elly))\n\n    return solutions[Candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # We need to solve for the missing value in the proportion\n    # Let x be the missing value. Then we have: 10 / x = 14 / 21\n\n    # Solving the proportion for x\n    x = 10 * 21 / 14\n\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for i in range(10, 100, 10):  # Numbers ending in 0\n        if i % 6 == 0 and i % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10\n    correct_answer = original_number + tens_to_add\n    johnnys_answer = 5839\n    return correct_answer if johnnys_answer != correct_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # From the question, we understand that we need to find the maximum number of distinct \n    # positive integers that can sum up to 27.\n    \n    # The strategy is to start from 1 and keep adding the next integer until the sum exceeds 27\n    total = 27\n    current_sum = 0\n    max_integers = 0\n    \n    for i in range(1, total + 1):\n        current_sum += i\n        if current_sum > total:\n            # We have exceeded the sum, so we stop\n            break\n        max_integers += 1\n    \n    return max_integers\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3m into cm\n    lengths_cm = [147, 32.5, 67]\n    fourth_length_cm = total_length_cm - sum(lengths_cm)\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    # Probability for A, B, and C passing the test respectively\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n    # Number of people (A, B, C)\n    n = 3\n    # Probability for 0, 1, 2, and 3 people passing the test\n    probabilities = [\n        (0, (1-p_A)*(1-p_B)*(1-p_C)),\n        (1, p_A*(1-p_B)*(1-p_C) + (1-p_A)*p_B*(1-p_C) + (1-p_A)*(1-p_B)*p_C),\n        (2, p_A*p_B*(1-p_C) + p_A*(1-p_B)*p_C + (1-p_A)*p_B*p_C),\n        (3, p_A*p_B*p_C)\n    ]\n    probabilities.sort(key=lambda x: x[1], reverse=True)\n    # The number of people most likely to pass (mode of the binomial distribution)\n    most_likely_num = probabilities[0][0]\n    return most_likely_num\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n\n    leaves = (total_papers - 1) // interval\n\n    return leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    # Calculate the individual sums within each parentheses\n    sum1 = 101 + 234 + 567\n    sum2 = 234 + 567 + 89\n    sum3 = 101 + 234 + 567 + 89\n    sum4 = 234 + 567\n\n    # Apply the distributive law to calculate the result\n    result = (sum1 * sum2) - (sum3 * sum4)\n    return result\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = sum(2 * fraction for i in range(1, 11) for fraction in (1/i,)*i)\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    \n    initial_eq = Eq(watches/caps, 8/11)\n    final_eq = Eq(watches/(caps - 88), 12/11)\n\n    solutions = solve((initial_eq, final_eq), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam takes 30 minutes to ride from the first house to the sixth house.\n    # This means he has covered 5 equal intervals in 30 minutes.\n    time_to_sixth_house = 30  # minutes\n    intervals_between_six_houses = 5  # There are 5 intervals between the 1st and 6th houses\n    \n    # Calculate the time it takes to cover one interval.\n    time_per_interval = time_to_sixth_house / intervals_between_six_houses\n    \n    # For ten houses, Sam will cover 9 equal intervals.\n    intervals_between_ten_houses = 9  # There are 9 intervals between the 1st and 10th houses\n    \n    # Calculate the total time it takes for Sam to cover 9 intervals\n    total_time_for_ten_houses = time_per_interval * intervals_between_ten_houses\n    \n    return total_time_for_ten_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == D/4:\n                B = A - 1\n                if B != A and B != D:\n                    C = (4*D - (4*1000*A + 4*100*B))//10\n                    if C >= 0 and C <= 9 and C != A and C != B and C != D and A*1000 + B*100 + C*10 + D == 4*(D*1000 + C*100 + B*10 + A):\n                        return A*1000 + B*100 + C*10 + D\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 1.05 * 100  # convert meters to centimeters\n    longer_piece_length_cm = (2 / 3) * total_length_cm\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n    \n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n    \n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Find the winning strategy by working backwards from 1\n    # If Jack leaves a number of coins such that (n - 1) % (11 + 1) [12] == 0\n    # then Ken will always be forced into a losing position.\n    # We work backwards from the losing position (n = 1).\n    for coins in range(1, 12):\n        if (2015 - coins) % 12 == 0:\n            return coins\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin (0,0), b must be equal to 0.\n    b = 0\n\n    # The graph also passes through the point (4,8), we use this to solve for m.\n    # 8 = m * 4 + b\n    # With b = 0, we simplify to 8 = 4m\n    m = 8 / 4\n\n    # Form the linear equation\n    linear_equation = f\"y = {m}x + {b}\"\n\n    return linear_equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    number_in_figures = 1200000000 + 31000 + 93\n    return number_in_figures\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Define the periodic pattern of black and white balls: ●○●○○ (BWBWW)\n    # Count the number of white balls in one period\n    white_in_period = 3\n    \n    # Find the total number of periods by dividing the total whites by whites in each period\n    periods = 92 // white_in_period\n    \n    # Count the remaining white balls that don't complete a period\n    remaining_whites = 92 % white_in_period\n    \n    # Calculate total balls in complete periods\n    # One period has 5 balls\n    total_balls = periods * 5\n    \n    # Add remaining white balls and the corresponding black balls\n    if remaining_whites > 0:\n        # If there's 1 remaining white ball, there must be 1 black ball before it based on the pattern\n        # If there are 2 remaining white balls, there must be 2 black balls before them based on the pattern\n        total_balls += remaining_whites + remaining_whites - 1\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Let's start with the hour\n    for hour in range(24):\n        has_four_in_hour = '4' in str(hour)\n        \n        # Now, we check every minute\n        for minute in range(60):\n            has_four_in_minute = '4' in str(minute)\n            \n            # Check if there are at least two fours\n            if has_four_in_hour + has_four_in_minute >= 2:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    # The pattern seems to be mapping a number to the count of 'holes' in the digits\n    # 0 has 1 hole, 1 has 0 holes, 6 has 1 hole, 8 has 2 holes, etc.\n    holes_count = {0:1, 1:0, 2:0, 3:0, 4:0, 5:0, 6:1, 7:0, 8:2, 9:1}\n\n    def count_holes(number):\n        return sum(holes_count[int(digit)] for digit in str(number))\n\n    return count_holes(2015)\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the smallest age be x, the ages are an arithmetic sequence with a difference of 1.\n    # Thus, x + (x + 1) + (x + 2) = 42\n    # Simplifying the above, we get 3x + 3 = 42\n    # Solving for x gives us the age of the youngest dwarf\n    youngest = (42 - 3) // 3\n    \n    # The age of the oldest one is the age of the youngest plus 6 years\n    oldest = youngest + 6\n    return oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let x be the number of passengers at the start\n    # At the first stop, two fifths of the passengers got off:\n    # Remaining = x - (2/5)x = (3/5)x\n    # At the next stop, one third of the remaining passengers got off:\n    # Remaining after 2nd stop = (3/5)x - (1/3)(3/5)x\n    # This leaves 22 people:\n    # (3/5)x - (1/3)(3/5)x = 22\n    # Solve for x:\n    remaining_after_second_stop = 22\n    remaining_fraction_after_first_stop = 3/5\n    off_fraction_at_second_stop = 1/3\n    # Find the reduced fraction for the passengers who didn't get off at 2nd stop\n    remaining_fraction_at_second_stop = 1 - off_fraction_at_second_stop\n    \n    # Combine the fractions to get the equivalent single fraction\n    combined_fraction = remaining_fraction_after_first_stop * remaining_fraction_at_second_stop\n    \n    # Reverse the fraction operation to find the original number of passengers\n    original_passengers = remaining_after_second_stop / combined_fraction\n    \n    return int(original_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_length_mm = 4\n\n    # Convert mm to cm\n    sharpened_length_cm = sharpened_length_mm / 10\n\n    # Calculate new length in cm\n    new_length_cm = original_length_cm - sharpened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let S represent the number of stickers Sam had initially\n    # Let P represent the number of stickers Peter had initially\n    # Let J represent the number of stickers John had initially\n    # Since the ratio of Sam's to Peter's stickers is 7:5, we have S = (7/5)P\n    \n    # After giving 20% of their stickers to John, Sam and Peter have 80% left\n    # Sam has S - 0.2S = 0.8S stickers left\n    # Peter has P - 0.2P = 0.8P stickers left\n    \n    # John's stickers increased by 80%, which means 0.2S + 0.2P = 0.8J\n    \n    # Sam had 20 stickers more than John in the end, so 0.8S = J + 20\n    \n    # We have three equations to solve:\n    # 0.2S + 0.2P = 0.8J\n    # S = (7/5)P\n    # 0.8S = J + 20\n    \n    # Symbols\n    S, P, J = symbols('S P J')\n    \n    # Equations\n    eq1 = Eq(0.2*S + 0.2*P, 0.8*J)\n    eq2 = Eq(S, (7/5)*P)\n    eq3 = Eq(0.8*S, J + 20)\n    \n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3), (S, P, J))\n    \n    # Extract the solution for P, which is the initial number of stickers Peter had\n    return solutions[P]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    # Distances in meters for each part of the race\n    distance1 = 420\n    distance2 = 620\n    \n    # The remaining distance for the third part of the race\n    distance3 = 1200 - distance1 - distance2\n    \n    # Time for each part of the race in seconds\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time for the entire race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_tests = 4\n    current_score = 89 * current_tests\n    desired_average = 95\n\n    additional_tests = 0\n    while True:\n        total_tests = current_tests + additional_tests\n        necessary_total_score = desired_average * total_tests\n        if necessary_total_score <= current_score + additional_tests * 100:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    tenners, twos = symbols('tenners twos')\n\n    # tenners and twos sum up to 72\n    total_notes_eq = Eq(tenners + twos, 72)\n    \n    # After spending, twice as many tenners as twos are left\n    spent_eq = Eq(0.1 * tenners, 0.25 * twos * 2)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_eq), (tenners, twos))\n\n    # Find the number of tenners and twos initially\n    num_tenners = solutions[tenners]\n    num_twos = solutions[twos]\n\n    # Calculate how much was spent (90% of tens, 75% of twos)\n    spent_tens = num_tenners * 10 * 0.9\n    spent_twos = num_twos * 2 * 0.75\n\n    # Total spent on the gift\n    gift_cost = spent_tens + spent_twos\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # 1/a = 1/9 - 1/18 = 2/18 - 1/18 = 1/18\n    # 1/c = 1/12 - 1/18 = 3/36 - 2/36 = 1/36\n    \n    rate_a = 1 / 18  # Hose A's work rate\n    rate_c = 1 / 36  # Hose C's work rate\n    rate_a_c = 1 / 12  # Hose A and C's combined work rate\n    \n    # Find Hose B's work rate\n    rate_b = rate_a_c - rate_c  # Hose B's work rate when working with Hose C\n    \n    # Find the work rate for all hoses working together\n    combined_rate = rate_a + rate_b + rate_c\n    \n    # Find the time it takes for all the hoses to fill the pool\n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # You are guaranteed to have 2 of the same color if you draw one more than the number of colors.\n    num_colors = 3\n    markers_to_be_sure = num_colors + 1\n    return markers_to_be_sure\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for five_notes in range(59):  # number of $5 notes cannot exceed 58 as Wei Li has 58 notes in total\n        two_notes = 58 - five_notes  # total notes is 58, so $2 notes will be 58 minus number of $5 notes\n        if (five_notes * 5) + (two_notes * 2) == 164:  # checking the total value\n            return five_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference based on the provided terms\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    common_difference = a8 - a7\n\n    # Calculate the first term using the 7th term\n    first_term = a7 - (7 - 1) * common_difference\n\n    # Calculate the 100th term in the sequence\n    a100 = first_term + (100 - 1) * common_difference\n\n    return a100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Let the price of one muffin be m\n    # Therefore, the price of one cupcake is 3m\n    # Total cost of cupcakes and muffins is (36 cupcakes * 3m) + (32 muffins * m)\n    # It is given that this total cost is 5/9 of her total money\n    # Hence, her total money is (36*3m + 32*m) / (5/9)\n    # It is also given that she then spends 1/6 of her money on more cupcakes\n    # Therefore, money spent on cupcakes is also equal to (1/6) of total money\n    \n    # Let's denote total money by T\n    # Then we have the equation for money spent on cupcakes: (36*3m + 32*m) * (1/6) = 187.50\n    \n    # Solving for m using this equation:\n    m = symbols('m')\n    equation = Eq((36*3*m + 32*m) * (1/6), 187.50)\n    price_per_muffin = solve(equation, m)[0]\n    \n    # Now we calculate the money spent on muffins\n    money_spent_on_muffins = 32 * price_per_muffin\n\n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start with the smallest even numbers (2*1, 2*2, ...) except for the smallest (2*1)\n    # since we need at least 2 marbles in each box.\n    # Since two boxes must contain the same number, and all the others must be different,\n    # we start with the second smallest even number being duplicated.\n    marbles = [2*2] * 2  # Two boxes with 4 marbles for the duplicate case\n    for i in range(2, 10):\n        marbles.append(2*i)  # Subsequent unique even valued marbles\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq(3 * a + 8, 14)\n    solution = solve(equation, a)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Using the Pigeonhole principle\n    # At least how many pigeons must there be in one cage\n    min_pigeons_in_max_cage = (total_pigeons + total_cages - 1) // total_cages\n    \n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Since a sprinkler must be installed in the middle of each two parterres,\n    # we need one less sprinkler than the number of parterres.\n    # There are 1007 parterres in a straight line, so the number of sprinklers\n    # needed is 1007 - 1.\n    num_sprinklers = 1007 - 1\n    \n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    james_workings_correct = (papaya_mass * 4 == 3)\n\n    return (james_workings_correct, total_mass)\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    equation1 = Eq(marry, (7 / 5) * alexis)\n    equation2 = Eq(charlotte + (0.2 * marry + 0.2 * alexis), charlotte * 1.8)\n    equation3 = Eq(marry - (0.2 * marry), charlotte + 20)\n\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    day1 = 8\n    day2 = total_length / 6 + 4\n    two_days = total_length * (5/12)\n\n    equation = Eq(day1 + day2, two_days)\n\n    total_road_length = solve(equation, total_length)\n\n    return total_road_length[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    ans = len(list(perm))\n    return ans\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let x be the total number of bottle caps Justin had originally.\n    # After giving away 440 bottle caps, he has 5/9 of his collection left.\n    # This means 5/9 of the original collection x is equal to the original collection minus 440.\n\n    # Mathematical equation: (5/9) * x = x - 440\n    # Rearrange the equation to solve for x:\n    # (5/9) * x + 440 = x\n    # (5/9) * x - (9/9) * x = -440\n    # (-4/9) * x = -440\n    # Multiply both sides by -9/4 to solve for x:\n    # x = (-440) * (-9/4)\n\n    x = (-440) * (-9/4)\n\n    return int(x)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n    corner_wheat = 4\n\n    # Subtract the corner wheat from the total as they are not part of the segments to be divided\n    num_intervals = total_wheat - corner_wheat\n\n    # Divide the perimeter by the number of intervals \n    perimeter = 2 * (length + width)\n    distance_between_wheat = perimeter / num_intervals\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "{\n  \"queId\": \"example_queId\",\n  \"problem\": \"一艘轮船顺流航行$$210$$千米，逆流航行$$120$$千米共用$$12$$小时；顺流航行$$180$$千米、逆流航行$$216$$千米共用$$15$$小时．两个码头相距$$240$$千米．求该船往返一次需多少时间？\",\n  \"trans_problem\": \"A ship sails downstream for $$210$$ kilometers and upstream for $$120$$ kilometers, taking a total of $$12$$ hours. If the same ship sails downstream for $$180$$ kilometers and upstream for $$216$$ kilometers, it takes $$15$$ hours. The distance between the two docks is $$240$$ kilometers. How much time is required for the ship to make a round trip?\"\n}"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Assume all days are rainy, calculate the extra pine nuts theoretically harvested on sunny days\n    total_rainy_nuts = total_days * rainy_nuts\n    extra_nuts = total_nuts - total_rainy_nuts\n\n    # Calculate the number of sunny days\n    sunny_days = extra_nuts / (sunny_nuts - rainy_nuts)\n\n    # Calculate the number of rainy days\n    rainy_days = total_days - sunny_days\n    \n    return int(rainy_days)\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_1_bottle = 15\n    price_2_bottles = 28\n    price_5_bottles = 60\n\n    # Total bottles required\n    total_bottles = 17\n\n    # Initialize minimum cost to a high value\n    min_cost = float('inf')\n\n    # Calculate the combinations of packs that result in at least 17 bottles\n    for packs_of_5 in range(total_bottles // 5 + 1):\n        for packs_of_2 in range((total_bottles - 5 * packs_of_5) // 2 + 1):\n            bottles_of_1 = total_bottles - (5 * packs_of_5 + 2 * packs_of_2)\n            cost = packs_of_5 * price_5_bottles + packs_of_2 * price_2_bottles + bottles_of_1 * price_1_bottle\n            # Keep track of the minimum cost\n            if cost < min_cost:\n                min_cost = cost\n\n    # Convert pence to pounds\n    min_cost_in_pounds = min_cost / 100\n\n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "Here is the translated math question:\nOutput:\n{\n  \"queId\": \"specified_que_id\",\n  \"problem\": \"光的速度是每秒$$30$$万千米，太阳离地球$$1$$亿$$5$$千万千米．问：光从太阳到地球要用几分钟？（答案保留一位小数）\",\n  \"trans_problem\": \"The speed of light is $$300,000$$ kilometers per second. The distance from the Sun to the Earth is $$150$$ million kilometers. How many minutes does it take for light to travel from the Sun to the Earth? (Keep the answer to one decimal place.)\"\n}"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n    one_question_correct = (first_question_correct - both_questions_correct) + \\\n                           (second_question_correct - both_questions_correct)\n    \n    return one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    difference = end_date - start_date\n    ans = difference.days + 1\n    return ans\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of candies Rachel has and a represent the number of candies Alice has.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same number of pieces.\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces of candy, Rachel has 3 times as many as Alice.\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total candies they originally had.\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in meters per second\n    time = 5    # time taken to pass the tree in seconds\n\n    # Length of the train is equal to the distance it covers while passing the tree\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for i in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "from sympy import *\n\ndef solution():\n    # Define the symbol\n    x = symbols('x')\n    \n    # Define the original expression\n    original_expr = 285 + 15 / 5 - 2\n    \n    # Define all possible expressions with one or two pairs of brackets\n    expressions = [\n        (285 + 15) / (5 - 2),\n        (285 + (15 / 5)) - 2,\n        285 + (15 / (5 - 2)),\n        285 + ((15 / 5) - 2),\n        (285 + 15) / 5 - 2,\n        285 + 15 / (5 - 2),\n    ]\n    \n    # Calculate and collect the results\n    results = set()\n    for expr in expressions:\n        results.add(simplify(expr))\n    \n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of mushrooms gathered in the first and second hour\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Create equations based on the problem statement\n    total_mushrooms_eq = Eq(first_hour + second_hour, 40)\n    equal_amounts_eq = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((total_mushrooms_eq, equal_amounts_eq), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for num_brushes in range(1, 10//3 + 1):\n        if (59 - num_brushes * 3) % 10 == 0:\n            return num_brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    difference = 2\n    # Assuming she made x bears on the first day, the total should be the sum of an arithmetic series:\n    # total_bears = x + (x + difference) + (x + 2*difference) + ... + (x + (total_days - 1)*difference)\n    # total_bears = total_days*x + difference*(1 + 2 + ... + (total_days - 1))\n    # Using the formula for the sum of the first n natural numbers: n*(n+1)/2\n    # total_bears = total_days*x + difference*(total_days - 1)*total_days/2\n    # Solving for x gives us the number of bears made on the first day.\n    first_day_bears = (total_bears - (difference*(total_days - 1)*total_days)//2) // total_days\n    fifth_day_bears = first_day_bears + (total_days - 1)*difference\n    return fifth_day_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    # Let x be the number Verity thought of\n    # According to the problem, 7 * x + 8 = 71\n    # We solve for x by inversing the operations\n    # First subtracting 8 from both sides, then dividing by 7\n    \n    result_after_adding = 71 - 8\n    original_number = result_after_adding / 7\n    \n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "Output:\n{\n  \"queId\": \"Your provided question ID here\",\n  \"problem\": \"老师买了同样数目的田格本、横线本和练习本．他发给每个同学$$1$$个田格本、$$3$$个横线本和$$5$$个练习本．这时横线本还剩$$24$$个，那么田格本和练习本共剩了~\\uline{~~~~~~~~~~}~个．\",\n  \"trans_problem\": \"A teacher bought the same number of grid notebooks, ruled notebooks, and exercise books. He gave each student $$1$$ grid notebook, $$3$$ ruled notebooks, and $$5$$ exercise books. Afterward, there were $$24$$ ruled notebooks left. How many grid notebooks and exercise books are left in total?\"\n}\nPlease replace \"Your provided question ID here\" with the actual \"queId\" from your input once you have it."
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # Possible digits for the hundred's place (not including 0)\n    hundreds = [1, 8]\n    # Possible digits for the ten's and unit's place (including 0 after the hundred's place is chosen)\n    tens_and_units = [0, 1, 8]\n    \n    count = 0\n    # Choose a digit for the hundred's place\n    for hundred in hundreds:\n        # Choose a different digit for the ten's place\n        for ten in tens_and_units:\n            if ten != hundred:\n                # Choose a different digit for the unit's place\n                for unit in tens_and_units:\n                    if unit != ten and unit != hundred:\n                        # Form a three-digit number\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # To ensure that a blue marble is drawn without looking,\n    # we need to consider the worst-case scenario where all pink and grey marbles are drawn first.\n    # After that, the next draw should be a blue marble.\n    marbles_to_draw = pink + grey + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_before_tax = sales_tax_paid / sales_tax_rate\n\n    return price_before_tax\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from sympy import isprime\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    range_numbers = list(range(1, 9))\n    for perm in permutations(range_numbers):\n        if all(isprime(perm[i] + perm[i+1]) for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # there were 30 less boys than girls\n    equation1 = Eq(boys, girls - 30)\n    \n    # after 3/5 of the boys and 5/8 of the girls left the hall, \n    # there was an equal number of boys and girls remained\n    equation2 = Eq(boys - (3/5) * boys, girls - (5/8) * girls)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n    \n    # Initial conditions\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n    \n    # After the magic show\n    equation2 = Eq(frogs_initial - dragonflies_initial + (dragonflies_initial - frogs_initial), 11 - 10)\n    \n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n    \n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - (9 + 19 + 29 + 39 + 49 + 59)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Evaluating different possible placements of brackets\n    expressions = set([\n        285 + 15 / (5 - 2),\n        (285 + 15) / (5 - 2),\n        285 + (15 / 5) - 2,\n        (285 + 15) / 5 - 2,\n        285 + 15 / 5 - 2,\n        (285 + 15 / 5) - 2,\n        285 + (15 / 5 - 2),\n        ((285 + 15) / 5) - 2\n    ])\n    return len(expressions)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    combined_apples = amy_apples + john_apples\n    apples_each = combined_apples // 2\n    apples_to_give = amy_apples - apples_each\n\n    return apples_to_give\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(1, 25):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C', positive=True)\n\n    # Rates of work for each pair\n    equation1 = Eq(1/A + 1/B, 1/3)\n    equation2 = Eq(1/B + 1/C, 1/4)\n    equation3 = Eq(1/A + 1/C, 1/8)\n\n    # Solve for individual work rates A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    A_rate = solutions[A]\n    B_rate = solutions[B]\n    C_rate = solutions[C]\n\n    # Combined rate of A, B, and C\n    combined_rate = A_rate + B_rate + C_rate\n    time_together = 1 / combined_rate\n\n    return time_together.evalf()\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    # Initializing sum to 0\n    ans = 0\n\n    # Adding and subtracting consecutive numbers\n    for i in range(1, 101):\n        if i % 2 == 0:  # if the number is even, subtract it\n            ans += i\n        else:  # if the number is odd, subtract it\n            ans -= i\n\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "{\n\"queId\": \"example3\",\n\"problem\": \"恰有$$20$$个因数的最小自然数是多少？（无需计算最终结果，写出要比较的次方形式即可）\",\n\"trans_problem\": \"What is the smallest natural number that has exactly $$20$$ factors? (No need to calculate the final result, just write out the form of powers to be compared.)\"\n}"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n    \n    # Equation representing the sugar content from each type of water\n    # 2 kg of 45% sugar water + x kg of 15% sugar water = Total kg of sugar in 25% mixture of (2+x) kg\n    equation = Eq(2 * 0.45 + x * 0.15, 0.25 * (2 + x))\n    \n    # Solve for x\n    amount_x = solve(equation, x)\n\n    return amount_x[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    # Johnson and Vicky have $48 coins between them\n    equation1 = Eq(johnson + vicky, 48)\n\n    # If Johnson gives Vicky 8 coins, Vicky will have 2 fewer coins than Johnson.\n    equation2 = Eq((vicky + 8) + 2, johnson - 8)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "{\n\"queId\": \"unknown\",\n\"problem\": \"$$4$$包薯片和$$5$$包花生合共值$$82$$元，相同的$$5$$包薯片和$$4$$包花生合共值$$80$$元，问$$1$$包花生价值多少元？\",\n\"trans_problem\": \"If $$4$$ packs of chips and $$5$$ packs of peanuts together cost $$82$$ yuan, and the same $$5$$ packs of chips and $$4$$ packs of peanuts together cost $$80$$ yuan, what is the value of $$1$$ pack of peanuts in yuan?\"\n}"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n\n    girls = (total_boys / boys_to_girls_ratio) * 2\n\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    last_five_sum = sum(int('2' * i) % 100000 for i in range(1, 2018))\n    ans = last_five_sum % 100000\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = 77\n    original_number = (result / 7) - 6\n    return int(original_number)\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % divisor == 1 for divisor in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # Let x be the number of stamps Sally gave to Ting\n    # After giving x stamps, Sally has 40 - x and Ting has 32 + x\n    # The ratio of Sally's stamps to Ting's becomes (40 - x) / (32 + x) = 1 / 2\n    # Solving the equation for x gives us the number of stamps Sally gave to Ting\n    # (40 - x) = 1 * (32 + x) / 2\n    # 80 - 2x = 32 + x\n    x = (80 - 32) / 3  # solving for x\n   \n    # Calculate the end amount of stamps for Ting\n    stamps_ting_end = ting_stamps + x\n\n    return stamps_ting_end\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "{\n\"queId\": \"random_generated_id\",\n\"problem\": \"求$$153.97-208\\frac{3}{37}-133.07-12\\frac{5}{36}+2016.1$$ 的值，并将答案准确至最接近的整数．\",\n\"trans_problem\": \"Calculate the value of $$153.97 - 208\\frac{3}{37} - 133.07 - 12\\frac{5}{36} + 2016.1$$, and round the answer to the nearest whole number.\"\n}"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    time_initial, time_increased = symbols('time_initial time_increased')\n    \n    # At 150 meters per minute for the first part\n    distance_initial = 150 * time_initial\n    # At 200 meters per minute for the second part (150 + 50)\n    distance_increased = 200 * (time_increased)\n    \n    # Equation for total time spent walking in the park\n    total_time = Eq(time_initial + time_increased, time_initial + 10 + time_increased)\n    # Equation for total distance walked in the park\n    total_distance = Eq(distance_initial + distance_increased, 3700)\n    \n    # Solving the equations for 'time_initial' and 'time_increased'\n    solutions = solve((total_time, total_distance), (time_initial, time_increased))\n    \n    # Total time spent is the sum of both durations\n    total_minutes = solutions[time_initial] + solutions[time_increased].evalf() + 10  # Adding the 10 minute delay\n\n    return total_minutes\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    budget = 20\n    packet_price = 4\n    sweets_per_packet = 8\n\n    # Number of packets purchasable with the budget\n    packets_bought = budget // packet_price\n\n    # Total sweets from the packets bought\n    total_sweets = packets_bought * sweets_per_packet\n\n    # Additional free sweets for every two packets bought\n    free_sweets = (packets_bought // 2) * 1\n\n    # Maximum number of sweets\n    max_sweets = total_sweets + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial amounts of each colored counters\n    pink = 5\n    purple = 7\n    orange = 8\n    \n    # Total number of counters initially\n    total = pink + purple + orange\n    \n    # The initial probability of picking a pink counter\n    initial_prob_pink = pink / total\n    \n    # The desired probability of picking a pink counter, which is double the initial probability\n    desired_prob_pink = 2 * initial_prob_pink\n    \n    # Calculate the total number of counters needed to achieve the desired probability\n    # Setting up the equation: pink / (total + x) = desired_prob_pink and solve for x\n    x = (pink - desired_prob_pink * total) / desired_prob_pink\n    \n    # We return the number of extra counters as an integer; it must be rounded up to ensure the desired probability is met\n    from math import ceil\n    ans = ceil(x)\n    return ans\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_value = 0.4 - (1/4)\n    return decimal_value\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Original count condition: boys = 1.4 * girls\n    original_condition = Eq(boys, 1.4 * girls)\n    \n    # After leaving condition: (boys - 24) = 1.5 * (girls - 24)\n    after_leaving_condition = Eq(boys - 24, 1.5 * (girls - 24))\n    \n    # Solve the system of equations\n    solutions = solve((original_condition, after_leaving_condition), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    num_zeroes = 0\n    while n >= 5:\n        n //= 5\n        num_zeroes += n\n    return num_zeroes\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Cindy must take at most 3 socks of each color to not get a pair, so:\n    max_single_color_socks = 3\n    # Number of colors\n    num_colors = 3\n    # She takes 3 of each color and still doesn't have a pair\n    socks_taken_without_pair = max_single_color_socks * num_colors\n    # Next sock must create at least one pair\n    socks_for_one_pair = socks_taken_without_pair + 1\n    # She needs to take one more sock to ensure the second pair of the same color\n    socks_for_two_pairs_same_color = socks_for_one_pair + 1\n\n    return socks_for_two_pairs_same_color\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    cupcakes, muffins = 1, 1  # Assume an initial quantity\n    while True:\n        cupcakes_left = cupcakes - 60\n        muffins_left = muffins - 12\n        if muffins_left == 2 * cupcakes_left:\n            break\n        cupcakes += 1\n        muffins += 1\n    return cupcakes + muffins\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Reverse an arithmetic progression since we want the max for the one who gets the most pieces\n    # They all get at least one piece and there need to be 8 unique pieces distributed, and we have 88 pieces in total\n    total_pieces = 88\n    children = 8\n    pieces_given_out = 0\n    max_pieces_for_child = 0\n\n    # We'll find out how many pieces the first children gets by subtracting the sum of the first\n    # n-1 natural numbers from the total (since every child has to get at least 1 piece each)\n    pieces_to_distribute = total_pieces - sum(range(1, children))\n    \n    # While cycling starting from the child with the most candies\n    # until we reach the child with the least candies\n    for i in range(children, 0, -1):\n        # To minimize the number of candies for the richest child, \n        # give the current child i pieces of candy\n        given_candies = i\n        pieces_given_out += given_candies\n        pieces_to_distribute -= given_candies\n\n        # Maximum pieces to a child is reached when all the pieces are distributed\n        # And the one who gets the most is the last one left in the cycle\n        if pieces_given_out == total_pieces:\n            max_pieces_for_child = given_candies\n            break\n    \n    return max_pieces_for_child\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # George receives $3 more pocket money than Helen every day\n    equation1 = Eq(george_daily, helen_daily + 3)\n    \n    # Each of them spends $5 a day, so we adjust their savings\n    helen_savings = helen_daily - 5\n    george_savings = george_daily -5\n\n    # When Helen saves $60 in total, George would have saved $90 more than Helen\n    # Let's express the number of days it takes for Helen to save $60\n    days_to_save = 60 / helen_savings\n\n    # Now we use the number of days to calculate George's total savings at that time\n    george_total_savings = days_to_save * george_savings\n\n    # George has $90 more than Helen at that time\n    equation2 = Eq(george_total_savings, 60 + 90)\n\n    # Solving the equations for the amount Helen receives each day\n    solutions = solve((equation1, equation2), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angels = 12.25\n    los_angels_to_shanghai = shanghai_to_los_angels + 1.5  # 90 minutes is 1.5 hours\n\n    round_trip = shanghai_to_los_angels + los_angels_to_shanghai\n\n    return round_trip\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of cookies each person initially had\n    sam_original, tim_original = symbols('sam_original tim_original')\n\n    # Create equations based on the problem statement\n    # Equation 1: Total number of cookies they originally had\n    equation1 = Eq(sam_original + tim_original, 1170)\n\n    # Equation 2: After the changes in number of cookies\n    sam_after = 3 / 4 * sam_original  # Sam ate 1/4 of her cookies\n    tim_after = tim_original + 1 / 5 * tim_original  # Tim bought 1/5 more cookies\n    equation2 = Eq(sam_after + 663, tim_after)\n\n    # Solve the equations for sam_original and tim_original\n    solutions = solve((equation1, equation2), (sam_original, tim_original))\n\n    # Calculate the number of cookies Sam ate\n    sam_ate = 1 / 4 * solutions[sam_original]\n\n    return sam_ate\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi / wiya, 3 / 2)\n    equation2 = Eq((eddi + 4) / wiya, 8 / 5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "{\n  \"queId\": \"\",\n  \"problem\": \"设正整数$${{a}_{1}}$$，$${{a}_{2}}$$，$$\\cdots $$，$${{a}_{31}}$$，$${{b}_{1}}$$，$${{b}_{2}}$$，$$\\cdots $$，$${{b}_{31}}$$满足  （$$1$$）$${{a}_{1}} ~\\textless{} ~{{a}_{2}} ~\\textless{} ~\\cdots ~~\\textless{} ~{{a}_{31}}\\leqslant 2015$$，$${{b}_{1}} ~\\textless{} ~{{b}_{2}} ~\\textless{} ~\\cdots ~~\\textless{} ~{{b}_{31}}\\leqslant 2015$$；  （$$2$$）$${{a}_{1}}+{{a}_{2}}+\\cdots +{{a}_{31}}={{b}_{1}}+{{b}_{2}}+\\cdots +{{b}_{31}}$$．  求$$S=\\left\\textbar{} {{a}_{1}}-{{b}_{1}} \\right\\textbar+\\left\\textbar{} {{a}_{2}}-{{b}_{2}} \\right\\textbar+\\cdots +\\left\\textbar{} {{a}_{31}}-{{b}_{31}} \\right\\textbar$$的最大值．\",\n  \"trans_problem\": \"Let positive integers $${{a}_{1}}$$, $${{a}_{2}}$$, $$\\cdots $$, $${{a}_{31}}$$, $${{b}_{1}}$$, $${{b}_{2}}$$, $$\\cdots $$, $${{b}_{31}}$$ satisfy the following: (1) $${{a}_{1}} < {{a}_{2}} < \\cdots < {{a}_{31}} \\leqslant 2015$$, $${{b}_{1}} < {{b}_{2}} < \\cdots < {{b}_{31}} \\leqslant 2015$$; (2) $${{a}_{1}}+{{a}_{2}}+\\cdots+{{a}_{31}}={{b}_{1}}+{{b}_{2}}+\\cdots+{{b}_{31}}$$. Find the maximum value of $$S=\\left| {{a}_{1}}-{{b}_{1}} \\right|+\\left| {{a}_{2}}-{{b}_{2}} \\right|+\\cdots +\\left| {{a}_{31}}-{{b}_{31}} \\right|.$$\"\n}"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "Input:\n{\n  \"queId\": \"unique-question-id\",\n  \"problem\": \"一件工作，甲独做要$$12$$天，乙独做要$$18$$天，丙独做要$$24$$天．这件工作由甲先做了若干天，然后由乙接着做，乙做的天数是甲做的天数的$$3$$倍，再由丙接着做，丙做的天数是乙做的天数的$$2$$倍，终于做完了这件工作．问总共用了多少天？\"\n}\nOutput:\n{\n  \"queId\": \"unique-question-id\",\n  \"problem\": \"一件工作，甲独做要$$12$$天，乙独做要$$18$$天，丙独做要$$24$$天．这件工作由甲先做了若干天，然后由乙接着做，乙做的天数是甲做的天数的$$3$$倍，再由丙接着做，丙做的天数是乙做的天数的$$2$$倍，终于做完了这件工作．问总共用了多少天？\",\n  \"trans_problem\": \"For a certain job, person A alone takes $$12$$ days, person B alone takes $$18$$ days, and person C alone takes $$24$$ days to complete. Person A starts the job and works for a certain number of days, after that person B takes over, working for three times the number of days person A worked. Then, person C continues, working for twice the number of days person B worked, until the job is completed. How many days in total were used to finish the job?\"\n}"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # First part of the trip\n    speed_1 = 40\n    time_1 = 2\n    distance_1 = speed_1 * time_1\n\n    # Second part of the trip\n    speed_2 = 70\n    distance_2 = 280\n    time_2 = distance_2 / speed_2\n\n    # Total distance and total time\n    total_distance = distance_1 + distance_2\n    total_time = time_1 + time_2\n\n    # Average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_count = 0\n    \n    # Three possible positions for the two sevens:\n    # 1. _77, 2. 7_7, 3. 77_\n    # For each position, calculate the number of ways to fill the blanks with digits from 0 to 9, \n    # excluding the case where all three digits are sevens (777).\n    for position in range(3):\n        if position == 0:  # _77, the first position can't be 0, as it's a three-digit number\n            total_count += 9  # Digits 1-9\n        else:  # 7_7 or 77_, all 10 digits are possible, including 0\n            total_count += 10\n    \n    # Subtracting the count for 777 as it's included in all three positions\n    total_count -= 3  # 777 is counted thrice, once for each position\n    \n    return total_count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if (four_page_letters * 4) + (three_page_letters * 3) == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    index_of_8 = digit_str.index('8')\n    place_value = 10 ** (len(digit_str) - index_of_8 - 1)\n    return place_value\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    lcm_days = lcm(25, 20)\n    \n    day = 1\n    month = 3\n    year = 2023  # Assuming the current year is 2023, it doesn't change the answer since we are looking for days from a starting point.\n\n    # Assuming non-leap year for simplicity, as year is not given and LCM doesn't cross February, hence no impact of leap year.\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    passing_days = lcm_days - 1\n\n    while passing_days > 0:\n        days_in_current_month = days_in_month[month]\n        if passing_days < days_in_current_month - day:\n            day += passing_days\n            passing_days = 0\n        else:\n            passing_days -= (days_in_current_month - day + 1)\n            day = 1\n            if month == 12:\n                month = 1\n                year += 1\n            else:\n                month += 1\n    \n    return (day, month)\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Function to calculate number of arrangements for n objects.\n    def arrangements(n):\n        return factorial(n)\n\n    # Total singing performances are 6\n    singing_performances = 6\n    # Total dancing performances are 4, we treat them as 3 groups\n    # Because we need to place at least 1 singing performance between every 2 dancing performances\n    dancing_groups = 3\n\n    # We arrange the 4 dancing performances in 3 groups, which can have 7 places to insert them\n    # (_S_S_S_S_S_S_) - the positions between singing performances and at beginning and end\n    ways_to_insert_dancing = arrangements(singing_performances + 1) // arrangements(singing_performances + 1 - dancing_groups)\n\n    # Now calculate the arrangements of singing and dancing performances within their respective groups.\n    singing_arrangements = arrangements(singing_performances)\n    dancing_arrangements = arrangements(dancing_groups)\n\n    # The total arrangements is the product of the ways to insert dancing and the arrangement of singing performances\n    total_arrangements = ways_to_insert_dancing * singing_arrangements * dancing_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    A = 1\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    m = a0.numerator\n    n = a0.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Define possible digits based on the teacher's hints\n    possible_digits = [str(i) for i in range(10)]\n\n    # From hint 4 (5430), we know these digits are not in the answer\n    for digit in '5430':\n        if digit in possible_digits:\n            possible_digits.remove(digit)\n\n    # Variables to store the confirmed positions\n    confirmed_first_digit = None\n    confirmed_second_digit = None\n    confirmed_third_digit = None\n    confirmed_fourth_digit = None\n\n    # From hint 3 (8642), we know two correct digits in the exact position\n    for i, digit in enumerate('8642'):\n        if digit in possible_digits:\n            if i == 0:\n                confirmed_first_digit = digit\n            elif i == 1:\n                confirmed_second_digit = digit\n            elif i == 2:\n                confirmed_third_digit = digit\n            elif i == 3:\n                confirmed_fourth_digit = digit\n\n    # Now we know 8 and 6 are in the right position,\n    # From hint 1 (8765), we know that 7 and 5 are not in the right position\n    # and they are also not in the possible digits. So they cannot be in the answer.\n    for digit in '75':\n        if digit in possible_digits:\n            possible_digits.remove(digit)\n\n    # From hint 2 (1023), we know that 0, 1, 2, or 3 are correct\n    # but they are not in that position, and since 0 and 3 are not in the possible digits,\n    # the answer contains 1 and 2 in the third or fourth position since 8 and 6 are fixed.\n\n    # As 8 is in the first position and cannot be in the third position (according to hint 1),\n    # so the third position is 2 (from hint 2).\n    # And thus, the second position is 6 (from hint 3).\n    # So, the fourth position must be 1.\n\n    # Putting it all together, we have:\n    if confirmed_first_digit != '8':\n        confirmed_first_digit = '8'\n    if confirmed_second_digit != '6':\n        confirmed_second_digit = '6'\n    if confirmed_third_digit is None:\n        confirmed_third_digit = '2'\n    if confirmed_fourth_digit is None:\n        confirmed_fourth_digit = '1'\n\n    # Joining the confirmed digits to get the 4-digit number\n    ans = confirmed_first_digit + confirmed_second_digit + confirmed_third_digit + confirmed_fourth_digit\n    return int(ans)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistaken_result = Eq((x / 4) - 25, 2021)\n    correct_result = solve(mistaken_result, x)[0] * 4 + 25\n\n    return correct_result\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    def count_factor(num, factor):\n        count = 0\n        while num % factor == 0:\n            num //= factor\n            count += 1\n        return count\n\n    numbers = [75, 56, 12, 105]\n    twos = sum(count_factor(num, 2) for num in numbers)\n    fives = sum(count_factor(num, 5) for num in numbers)\n    \n    return min(twos, fives)\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, donna = symbols('chloe donna')\n\n    equation1 = Eq(chloe, 4 * donna)\n    equation2 = Eq(chloe - donna, 816)\n\n    solutions = solve((equation1, equation2), (chloe, donna))\n\n    return solutions[donna]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Solving the equation (~ + 4) / 8 = 3 using algebra\n    # Multiply both sides by 8 to get rid of the denominator\n    # ~ + 4 = 3 * 8\n    # ~ + 4 = 24\n    # Subtract 4 from both sides to solve for ~\n    # ~ = 24 - 4\n    # ~ = 20\n    ans = 20\n    return ans\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variables for children (c), boys (b), girls (g) and adults (a)\n    c, b, g, a = symbols('c b g a')\n    \n    # Equation 1: a = 3*c (Three times as many adults as children)\n    equation1 = Eq(a, 3*c)\n    \n    # Equation 2: b = 2*g (Twice as many boys as girls)\n    equation2 = Eq(b, 2*g)\n    \n    # Equation 3: c = b + g (The total number of children is the sum of boys and girls)\n    equation3 = Eq(c, b + g)\n    \n    # Equation 4: a = 176 + g (There were 176 more adults than girls)\n    equation4 = Eq(a, 176 + g)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, g, c))\n    \n    # Calculate the total number of people at the concert (children + adults)\n    total_people = solutions[c] + solutions[a]\n    \n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10      # Since we are interested in the ones digit.\n    exponent = 99\n    ones_digit = pow(base, exponent, 10)  # Calculate (base^exponent) mod 10\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193):  # Considering a could be any prime < 193\n        if isprime(a):\n            for b in range(2, 193):  # Considering b could also be any prime < 193\n                if isprime(b) and (3 * a + 11 * b == 193):\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 7 * (10 * a + b) == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.5)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = (14 / (3 * 4))\n    houses_built = houses_per_worker_per_day * 9 * 2\n    return int(houses_built)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = None\n    for bob in range(1, 28):\n        for rex in range(1, 28):\n            for fido in range(1, 28):\n                if fido == bob - 10 and bob != rex != fido and bob + rex + fido == 28:\n                    product = bob * rex * fido\n                    if min_product is None or product < min_product:\n                        min_product = product\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    children = 2/5 * total\n    women = 1/4 * total\n    men = total - children - women\n\n    equation = Eq(children, men + 20)\n    solved_total = solve((equation), (total))\n\n    return solved_total[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of one ball\n    cost_per_ball = symbols('cost_per_ball')\n\n    # Create two equations based on the given scenarios\n    equation1 = Eq(5 * cost_per_ball + 15, 8 * cost_per_ball - 12)\n\n    # Solve the equation for the cost of one ball\n    solution = solve(equation1, cost_per_ball)\n\n    return solution[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        for b in range(a + 1, 1000):\n            if a % 75 == 0 and b % 75 == 0:\n                # Convert each number to a string.\n                str_a = str(a)\n                str_b = str(b)\n                # Count the common digits between A and B\n                common_digits = sum(1 for digit in str_a if digit in str_b)\n                # Check if there are at least two common digits and they are unique in each number\n                if common_digits >= 2 and len(set(str_a)) <= 2 and len(set(str_b)) <= 2:\n                    max_sum = max(max_sum, a + b)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    initial_height = height_after_second_bounce * (3 ** 2)\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator_first_complex = (1/30) + (1/6)\n    \n    # Calculate the denominator of the first complex fraction\n    denominator_first_complex = 2/25 \n    \n    # Calculate the first complex fraction\n    first_complex_fraction = numerator_first_complex / denominator_first_complex\n    \n    # Calculate the numerator of the second complex fraction\n    numerator_second_complex = 2 - (2/3)\n    \n    # Calculate the denominator of the second complex fraction\n    denominator_second_complex = 8/3\n    \n    # Calculate the second complex fraction\n    second_complex_fraction = numerator_second_complex / denominator_second_complex\n    \n    # Add the two complex fractions to get the final answer\n    final_answer = first_complex_fraction + second_complex_fraction\n    \n    return final_answer\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan].evalf()\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the amount of work Lee does per hour\n    # Let N be the amount of work Nancy does per hour\n    # Total work is represented as 1 (complete job)\n\n    L, N = symbols('L N')\n\n    # Equation when both work together for 10 hours\n    equation1 = Eq(L + N, 1/10)\n\n    # Equation when Lee works for 6 hours and Nancy for 20 hours\n    equation2 = Eq(6*L + 20*N, 1)\n    \n    # Solving the system of equations for L and N\n    solutions = solve((equation1, equation2), (L, N))\n\n    # Nancy's rate is N, so time taken is the reciprocal of her rate\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n    total_marks = total_students * total_average\n\n    # Let x be the average marks for class A\n    # Then class B's average marks will be x + 7\n    # 40 * x + 30 * (x + 7) = total_marks \n    \n    class_a_students = 40\n    class_b_students = 30\n    class_b_average_higher_by = 7\n    \n    average_class_a = (total_marks - class_b_students * (total_average + class_b_average_higher_by)) / class_a_students\n    average_class_b = average_class_a + class_b_average_higher_by\n    \n    return average_class_b\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    term1 = 2007 * 2008\n    term2 = 2008 * 2009\n    term3 = 2009  # Since 2009 * 1 = 2009.\n\n    # Calculate the denominator of the complex fraction.\n    denominator = (1/term1) + (1/term2) + (1/term3)\n\n    # Since the whole expression is the reciprocal of the denominator, we take the reciprocal.\n    ans = 1 / denominator\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity) # Ceiling division\n\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    result = (250250 ** 2) - (250249 * 250251)\n    return result\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind = 16\n    total_people = 30\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    total_digits = 0\n    \n    # Numbers 1-9 have one digit each\n    total_digits += 1 * 9\n    \n    # Numbers 10-99 have two digits each\n    total_digits += 2 * (99 - 10 + 1)\n    \n    # Numbers 100-200 have three digits each\n    total_digits += 3 * (200 - 100 + 1)\n    \n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        if (9800 + 10 * a + a) % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if its last two digits are divisible by 4.\n    # Therefore, we need to find J such that 5J6 is divisible by 4.\n    \n    for J in range(10):\n        num = int(f\"5{J}6\")\n        if num % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) * 6, 66)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_extra_water = 32\n    jane_water = audrey_water + jane_extra_water\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    # Define the operation according to the problem statement\n    def custom_operation(a, b):\n        return 5 * a - 2 * b\n\n    # We need to solve the equation 5 * 9 - 2 * x = 33 for x\n    a = 9  # The value for a is given as 9\n    result = 33  # The result of the operation is given as 33\n\n    # Using the operation to solve for x\n    # 5 * a - 2 * x = result => 5 * 9 - 2 * x = 33\n    # => 45 - 2 * x = 33\n    # => 2 * x = 45 - 33\n    # => 2 * x = 12\n    # => x = 12 / 2\n    x = (result - (5 * a)) / -2\n\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # The summation formula for the squares of the first n natural numbers\n    # n*(n+1)(2n+1)/6\n    def sum_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # The summation formula for the cubes of the first n natural numbers\n    # ( n(n+1)/2 )^2\n    def sum_cubes(n):\n        return (n * (n + 1) // 2) ** 2\n\n    # Calculate the two separate summations for 23*24^2 and 0*1^2 to 22*23^2\n    summation = 23 * 24**2 + sum_cubes(22) - sum_squares(22)\n\n    return summation\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360\n\n    # The ratio of time spent going up to going down is 5:4\n    # We can let the time going up be 5 units and going down be 4 units\n    time_up = 5\n    time_down = 4\n\n    # Since the total time is 360 minutes, we can calculate one unit of time\n    unit_time = total_time / (time_up + time_down)\n\n    # Calculate the actual time spent going up and down\n    actual_time_up = time_up * unit_time\n    actual_time_down = time_down * unit_time\n\n    # Speed of going down is 10 m/min faster than going up\n    # Let's assume the speed going up is 's' m/min, then the speed going down is 's + 10' m/min\n    # Now we can set up the equation for the speed based on the total distance\n    # Distance going up = speed going up * time going up\n    # Distance going down = (speed going up + 10) * time going down\n    # The total distance is the sum of the distances going up and down\n\n    # Let's denote the speed going up as s\n    s_up = symbols('s_up')\n\n    # Now we know that\n    # Distance up is s_up * actual_time_up\n    # Distance down is (s_up + 10) * actual_time_down\n\n    # The total distance is then\n    total_distance = (s_up * actual_time_up) + ((s_up + 10) * actual_time_down)\n\n    # We need to isolate 's_up' which is the speed going up to calculate the total distance\n    # However, no actual value for 's_up' is required, subsequent operations show that\n\n    # The total distance equation does not feature an unknown total_distance we need to solve for\n    # Hence we can directly compute it with any symbolic speed as it will cancel out\n\n    ans = total_distance.subs(s_up, 1)  # arbitrarily choose speed going up as 1 m/min\n    \n    return int(ans)\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    # Alice's age after 6 years is 24\n    future_age = 24\n    # To find her current age, we subtract 6 from her future age\n    current_age = future_age - 6\n    # To find her age 9 years ago, we subtract 9 from her current age\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\n\ndef solution():\n    packet_a = 25\n    packet_b = 20\n    \n    # Find Least Common Multiple of packet sizes\n    days_until_new_packets = lcm(packet_a, packet_b)\n    \n    # Since she starts on the 1st of March, we subtract 1 to find the next day she starts on both\n    days_until_new_packets -= 1\n    \n    # March has 31 days, so we compute the date considering this\n    end_of_march = 31\n    days_in_next_month = days_until_new_packets - end_of_march\n    \n    # In this case, next month is April with 30 days.\n    # However, as the LCM of 25 and 20 is 100, which is less than the sum(31 + 30),\n    # the date will still be in March.\n    # But we keep the generic calculation as it would apply to any start date or period.\n    \n    if days_in_next_month > 0:\n        # Next month (April) calculation, if required\n        date_next_month = days_in_next_month\n    else:\n        # Still in March\n        date_next_month = days_until_new_packets + 1  # Plus one as we're starting count from March 1st\n    \n    return date_next_month\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    day = 0\n\n    while True:\n        watermelons_left = watermelons - 9 * day\n        pineapples_left = pineapples - 9 * day\n        \n        if pineapples_left == 3 * watermelons_left:\n            break\n        day += 1\n\n    return day\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each friend sends a card to every other friend, so we have num_friends - 1 cards per friend\n    cards_per_friend = num_friends - 1\n    # Total number of cards sent is the number of friends times the number of cards each friend sends\n    total_cards = num_friends * cards_per_friend\n    return total_cards\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the amount carried by one car\n    car_mass = 24.2 / 4\n    \n    # Calculate the amount carried by one truck\n    truck_mass = 410 / 50\n    \n    # Calculate the difference in mass carried by a truck and a car\n    mass_difference = truck_mass - car_mass\n    \n    return mass_difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    wait_time = 35 - ((9 * 60 + 22) - (9 * 60 + 15)) % 35\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks = days_until_birthday // days_in_a_week\n\n    return weeks\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be Tom's current age and y be Jerry's current age\n    x, y = symbols('x y')\n  \n    # Tom will be twice his age in 4 years\n    equation1 = Eq(x + 4, 2 * x)\n  \n    # Three years ago, the sum of Tom’s and Jerry’s ages was 10\n    equation2 = Eq((x - 3) + (y - 3), 10)\n  \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n  \n    # Jerry's age will be doubled in y years from now\n    jerry_age_doubled = solutions[y]\n  \n    return jerry_age_doubled\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    meeting_time = 5\n\n    # Distance covered by Eddie until they meet\n    distance_covered_by_eddie = eddie_speed * meeting_time\n    # Distance covered by Brother until they meet\n    distance_covered_by_brother = brother_speed * meeting_time\n\n    # Total distance from home to the mall\n    total_distance = distance_covered_by_eddie + distance_covered_by_brother\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    result = (5 / 9) * 243\n    return result\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution_to_equation = solve(equation, x)\n\n    return solution_to_equation[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    total_road_length = 50\n\n    # Calculate the number of intervals between lamp posts\n    number_of_intervals = total_flowers / flowers_between_posts\n\n    # Calculate the distance between every two lamp posts\n    distance_between_posts = total_road_length / (number_of_intervals + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    regions = 1 + circles + circles * (circles - 1) // 2 + circles * (circles - 1) * (circles - 2) // 6\n    return regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_remaining = total_books - books_given_away\n    \n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(mother, 3 * lora)\n    equation2 = Eq(lora + mother, 44)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import primerange, isprime\n\ndef solution():\n    # Initial ages\n    family_ages = {'you': 7, 'brother': 5, 'mother': 29, 'father': 31}\n    # Maximum reasonable prime age to check for (e.g., 100)\n    max_age = 100\n    \n    # Extract ages for convenience\n    your_age = family_ages['you']\n    brother_age = family_ages['brother']\n    mother_age = family_ages['mother']\n    father_age = family_ages['father']\n    \n    # List of primes from the current year 2017 to the maximum age year\n    years_prime = list(primerange(2017, 2017 + max_age))\n    \n    for year in years_prime:\n        # Calculate the current ages at the given year\n        your_current_age = your_age + (year - 2017)\n        brother_current_age = brother_age + (year - 2017)\n        mother_current_age = mother_age + (year - 2017)\n        father_current_age = father_age + (year - 2017)\n        \n        # Check if all current ages are prime\n        if (isprime(your_current_age) and isprime(brother_current_age) and\n            isprime(mother_current_age) and isprime(father_current_age)):\n            # Return father's current age if all family members' ages are prime\n            return father_current_age\n    \n    return None\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_males = 3 / 5\n    males = total_adults * fraction_males\n    return int(males)\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    power_cycle = [4, 6, 4, 6]  # The unit digits of 4^1, 4^2, 4^3, ...\n    cycle_length = len(power_cycle)\n\n    # 2008 modulo cycle_length gives the position in the cycle\n    cycle_position = 2008 % cycle_length\n\n    # When cycle_position is 0, we need the last digit of the cycle\n    if cycle_position == 0:\n        cycle_position = cycle_length\n\n    # Get the unit digit\n    unit_digit = power_cycle[cycle_position - 1]\n\n    return unit_digit\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio = 6\n    paths_book = 4\n    paths_chapel = 5\n\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    total_paths = (paths_audio * paths_audio_to_school +\n                   paths_book * paths_book_to_school +\n                   paths_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n    \n    total_weight = (adam_ben + ben_carl + adam_carl) // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n    \n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Create the equations based on the problem statement\n    total_money_eq = Eq(benson + clive, 705)\n    same_amount_eq = Eq(benson - 34, clive - 63)\n\n    # Solve the equations\n    solutions = solve((total_money_eq, same_amount_eq), (benson, clive))\n\n    # Return Clive's initial amount of money\n    return solutions[clive]\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_time = 12 * 60 + 40  # Convert 12:40 PM to minutes past midnight\n    stay_duration = 2 * 60 + 40  # Convert 2 hours and 40 minutes to minutes\n\n    # Calculate the time Natalie left in minutes past midnight\n    leave_time_in_minutes = arrival_time + stay_duration\n    \n    # Convert minutes back to hours and minutes\n    leave_hour = leave_time_in_minutes // 60\n    leave_minutes = leave_time_in_minutes % 60\n\n    # Since the 24-hour format goes beyond 12:59 PM as 13:00 and so on,\n    # Check if leave_hour exceeds 12 to convert to PM if needed.\n    if leave_hour > 12:\n        leave_hour -= 12  # Convert to 12-hour format\n    \n    return f\"{leave_hour}:{str(leave_minutes).zfill(2)} PM\"\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_degrees = 12\n    exeter_temp = glasgow_temp + warmer_degrees\n    return exeter_temp\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks = 49\n    belle_sticks_received = 11\n    eddie_sticks = symbols('eddie_sticks')\n\n    belle_new_total = belle_sticks + belle_sticks_received\n    equation = Eq(belle_new_total, eddie_sticks)\n\n    eddie_initial_sticks = solve(equation, eddie_sticks)\n\n    return eddie_initial_sticks[0]\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11 + 2 / 27) * 11 + 5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    \n    # 3/4 of Chelsia's money is the same as 5/6 of Brian's money\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money Chelsia and Brian have together\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    total_tea = jason_tea + belinda_tea\n    equal_tea = total_tea // 2\n    tea_to_give = jason_tea - equal_tea\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6]\n    all_combinations = permutations(digits)\n    return len(list(all_combinations))\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost  # converting £10 to pence\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    equation1 = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n\n    return solutions\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    fraction = 1 / 70\n    decimal_str = format(fraction, '.502f')[2:]  # take the first 502 characters after the decimal point\n    return int(decimal_str[499])  # get the 500th character, accounting for 0 indexing\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator\n    denominator = sum(1/((11+j)*(20-j)) for j in range(9))\n    \n    # Divide the numerator by the denominator to get the final answer\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh now has 4 sweets left after eating one, so before eating he had 5.\n    neelesh_had_before_eating = 4 + 1\n    \n    # Neelesh received 1/6 of the original number of sweets Ayesha had.\n    # Since 5 is 1/6 of the total, the total number of sweets is 5 * 6.\n    total_sweets = neelesh_had_before_eating * 6\n    \n    # Since Neelesh received 1/6, Ayesha is left with 5/6 of the sweets.\n    ayesha_left_with = total_sweets - (total_sweets / 6)\n\n    return ayesha_left_with\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the weight of one copper ball and one iron ball as symbols\n    copper, iron = symbols('copper iron')\n\n    # Create two equations based on the problem statement\n    eq1 = Eq(8 * copper + 9 * iron, 135)\n    eq2 = Eq(6 * copper + 3 * iron, 75)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    \n    # Let the number of marbles in Box C be x.\n    # Then the number of marbles in Box B is 2x.\n    # The total number of marbles is the sum of marbles in A, B, and C.\n    # So, 80 + x + 2x = total_marbles\n    # Simplify the equation: 3x + 80 = total_marbles\n    # Solve for x: 3x = total_marbles - 80\n    # x = (total_marbles - 80) / 3\n\n    marbles_in_C = (total_marbles - marbles_in_A) / 3\n    \n    return int(marbles_in_C)\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    # Let x be the number of gummy bears and y be the number of lollipops initially.\n    # According to the problem, we have two equations from the ratios:\n    # (x / y) = (5 / 7)  ->  Equation 1\n    # ((x + 120) / (y + 120)) = (4 / 5)  ->  Equation 2\n\n    # Simplifying both equations, we have:\n    # 5y = 7x  ->  Equation 1\n    # 5(x + 120) = 4(y + 120)  ->  Equation 2\n\n    # Now let's solve the system of equations.\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    equation1 = 5*y - 7*x\n    equation2 = 5*(x + 120) - 4*(y + 120)\n\n    solutions = solve((equation1, equation2), (x, y))\n    x_sol, y_sol = solutions[x], solutions[y]\n\n    # The total number of candies now after adding 120 to each pile\n    total_candy_now = (x_sol + 120) + (y_sol + 120)\n\n    return total_candy_now\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    david_weight_pounds = david_weight_stone * 14\n    andrew_weight_pounds = 275\n    difference = abs(andrew_weight_pounds - david_weight_pounds)\n    return difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    given_term = 25\n    position_of_given_term = nth_term\n    common_difference = 28 - 25\n\n    first_term = given_term - (position_of_given_term - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    ans = sum(numbers) * 3\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3*carl - 5)\n    equation2 = Eq(bella, 5*carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10\n    num1_base10 = int(\"12101\", 3)\n    num2_base10 = int(\"2210\", 3)\n\n    # Subtract the numbers in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 3\n    ans = \"\"\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return ans or \"0\"\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    # The given sequence is an arithmetic sequence where each term increases by 11 from the previous term\n    # The first term a1 is 31 and the last term an is 97\n    # The common difference d is 11\n    # The sum of an arithmetic sequence is given by n/2 * (a1 + an) where n is the number of terms\n    # To find the number of terms n, we rearrange an = a1 + (n-1)d:\n    # 97 = 31 + (n-1)*11\n    # Solving for n: n = (97 - 31) / 11 + 1 = 66 / 11 + 1 = 6 + 1 = 7\n    \n    n = 7  # number of terms\n    a1 = 31  # first term\n    an = 97  # last term\n    \n    # Calculate the sum of the sequence\n    sum_sequence = n/2 * (a1 + an)\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for cake and biscuit\n    cake, biscuit = symbols('cake biscuit')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    # Return the number of calories in one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Choose the first number\n    # Skip next 4 numbers because we cannot have two numbers with difference of 5\n    # In this way, we can choose every 5th number from the list of first 20 positive integers\n    # For example: choosing 1, we can also choose 6, 11, and 16 (total 4 numbers)\n    # But if we start with 2, we can choose 2, 7, 12, 17 (total 4 numbers)\n    # Similarly, starting with 3 gives us 3, 8, 13, 18\n    # Starting with 4 gives us 4, 9, 14, 19\n    # Starting with 5 gives us 5, 10, 15, 20\n    # We see that for any starting position, we can at most select 4 numbers\n    # To maximize n, we should choose the sequence that allows for the most numbers,\n    # which is any of the sequences starting from 1 to 5, all give n = 4\n    # The largest value of n is, therefore, 4\n    return 4\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_questions = correct_answers + wrong_answers\n    \n    total_marks = correct_answers * marks_per_correct\n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for digit_1 in range(10):\n            total_pencils = int(f\"{B}{digit_1}{B}\")\n            if total_pencils % 44 == 0:\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (Fraction(16143, 8) * Fraction(11, 3)) - (Fraction(16155, 8) * Fraction(11, 3))\n    denominator = (Fraction(6051, 3) - Fraction(16155, 8)) * 17\n    fraction = numerator / denominator\n    ans = fraction * Fraction(119, 32)\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j be John's current age and m be his mother's current age\n    j, m = symbols('j m')\n\n    # John's age in 8 years is m - 20 (from the problem statement)\n    equation1 = Eq(j + 8, m - 20)\n\n    # When John's age was 1/5 of his mother's age, the age difference remains constant\n    # So if we find the difference at that point, it will be the same difference now\n    # The difference can be found by substituting m for 5*j (from 5 times his age condition)\n    # And finding the difference between mother's age at that time and John's age at that time\n\n    # Rewrite the equation1 with m as 5*j and solve for j\n    equation2 = Eq(j + 8, 5*j - 20)\n\n    # We have two equations with two unknowns, j and m, but we only need j\n    # So let's solve for j\n    solution = solve(equation2)\n\n    # Once we have the value for j, we can find out how old John was when his mother was 5 times his age\n    # We know the event happened (m - 20) - j = 5j - j years ago\n    # If we plug in the calculated value for j, we will get the answer\n    john_age_when = (5*solution[j] - solution[j]) - solution[j]\n\n    return john_age_when\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = (24 * 8) // math.gcd(24, 8)  # using LCM formula lcm(a, b) = |a * b| / gcd(a, b)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    containers = -(-apples // container_capacity)  # Ceiling division -rounds up\n    return containers\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    # Assuming the total amount collected for charity is given and equals the sum of Romily's and Reema's collections:\n    # You need to provide a total amount collected for charity to find out how much Reema collected.\n    # For example, if the total amount collected is ￡30, you can use the following additional equation:\n    # total = 30\n    # equation2 = Eq(romily + reema, total)\n    # solutions = solve((equation, equation2), (romily, reema))\n\n    # Since the total amount is not given, we cannot uniquely determine how much Reema collected.\n    # Therefore, we can only solve for Reema in terms of Romily's collection.\n    solutions = solve((equation), (reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n    \n    # Find the greatest common divisor of 28 and its own factor to get the smallest multiplier\n    multiplier = (28 // gcd(28, 28**2))\n    \n    return multiplier\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    \n    # Posts are needed at both ends of the interval\n    num_posts = (field_length // post_interval) + 1 \n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    # Andrew is three times as old as Louise\n    equation1 = Eq(andrew, 3 * louise)\n    # The sum of their ages is 84\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    # Returning Louise's age\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    result = sum(positive_numbers) - sum(negative_numbers)\n    return result\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - (lunch_duration + tv_duration + play_duration)\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    growth_rate = 5\n    death_rate = 0.5\n    years = 5\n\n    ans = initial_population * (growth_rate * death_rate)**years\n    return ans\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    largest_two_digit_number = 99\n\n    while True:\n        if (largest_two_digit_number - 3) % 4 == 0 and (largest_two_digit_number - 3) % 5 == 0:\n            return largest_two_digit_number\n        largest_two_digit_number -= 1\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n    \n    # Treat A and B as a single unit since they should always be next to each other.\n    # There are 5 \"units\" to arrange now (unit AB, C, D, E, F).\n    five_units_permutation = factorial(5)\n    \n    # A and B can be arranged in 2! ways because they can switch places (AB or BA).\n    ab_permutation = factorial(2)\n    \n    # The total arrangement is the product of the permutation of the 5 units \n    # and the permutation of A and B within their unit.\n    total_ways = five_units_permutation * ab_permutation\n    \n    return total_ways\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    # Define the variables representing the cost per mile and total fare\n    cost_per_mile = 6  # dollars per mile\n    y = symbols('y')  # total fare in dollars\n    x = symbols('x')  # distance traveled in miles\n    \n    # Write the equation that relates total fare to the distance traveled\n    equation = Eq(y, cost_per_mile * x)\n\n    return equation\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, g, p = symbols('r g p')\n\n    equation1 = Eq(r, g / 4)\n    equation2 = Eq(r, p * 3 / 5)\n    equation3 = Eq(r * 4 + g * 5 + p * 7, 642)\n\n    solutions = solve((equation1, equation2, equation3), (r, g, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Since 248 is 2 more than 246, we will add the product of 135 and 2 to the given product 33210.\n    return 33210 + (135 * 2)\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of steps in the escalator\n    x = symbols('x')\n\n    # When Peter walks 1 step per second, it takes him 10 seconds to reach the top\n    # So the escalator moves 10 steps during these 10 seconds\n    equation1 = Eq(10 + 10, x)\n\n    # When Peter walks 2 steps per second, it takes him 8 seconds to reach the top (16 / 2)\n    # So the escalator moves 8 steps during these 8 seconds\n    equation2 = Eq(16 + 8, x)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1  # One tree at each end\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_numbers = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 0.25 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n    number_of_children = (total_stickers - remaining_stickers) // stickers_per_child\n    return number_of_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_to_sally = total_blocks / 4\n    remaining_blocks = total_blocks - given_to_sally\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # Before giving chocolates away\n    equation1 = Eq(sally/ken, 5/7)\n\n    # After giving chocolates away\n    sally_final = sally + 24\n    ken_final = ken - 24\n    equation2 = Eq(sally_final, 2 * ken_final)\n\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    return solutions[ken] - 24  # Ken's chocolates in the end\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, notebook = symbols('pencil notebook')\n    \n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n    \n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    total_cost = solutions[pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # Only 2, 4 are valid even hundreds digits less than 5 (half of the ones)\n        for tens_digit in range(0, 10, 2):  # All even numbers for the tens digit\n            ones_digit = 2 * hundreds_digit  # Condition (c)\n            number = hundreds_digit * 100 + tens_digit * 10 + ones_digit\n            if (number % 2 == 0 and number % 9 == 0) and (len(set([hundreds_digit, tens_digit, ones_digit])) == 3) and (hundreds_digit < tens_digit):  # Conditions (a), (b), and (d)\n                return number\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 20 / 100\n    tax_percent = 10 / 100\n    total_cost = bill + (bill * tip_percent) + (bill * tax_percent)\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick)/3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    weekly_bill = 82\n    free_hours = 40\n    free_hours_bill = 0\n    max_bill_for_50_hours = free_hours_bill + (10 * 5)\n    max_bill_for_60_hours = max_bill_for_50_hours + (10 * 8)\n\n    if weekly_bill <= max_bill_for_50_hours:\n        additional_hours = (weekly_bill - free_hours_bill) / 5\n        total_hours = free_hours + additional_hours\n    elif weekly_bill <= max_bill_for_60_hours:\n        additional_hours = (weekly_bill - max_bill_for_50_hours) / 8 + 10\n        total_hours = free_hours + additional_hours\n    else:\n        additional_hours = (weekly_bill - max_bill_for_60_hours) / 15 + 20\n        total_hours = free_hours + additional_hours\n    \n    return total_hours\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_square = 4\n    sides_triangle = 3\n    \n    number = (sides_square * 2) - sides_triangle\n    \n    return number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50 # original hourly pay\n    increase_percentage = 12 / 100  # 12% increase represented as a decimal\n    pay_increase = original_pay * increase_percentage  # calculates the pay increase\n\n    new_pay = original_pay + pay_increase  # calculates the new hourly pay\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total = audrey + jane\n    return total\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    diff = joanna_total - amy_total\n    return diff\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1 # Start with one digit pages\n    total_pages = 0\n    total_digits = 0\n    while total_digits < 1014:\n        # Page range for the current number of digits\n        start_page = 10 ** (digits_per_page - 1)\n        end_page = (10 ** digits_per_page) - 1\n\n        # Number of pages with the current number of digits\n        pages_with_current_digits = end_page - start_page + 1\n\n        # Total number of digits if all these pages are used\n        if total_digits + pages_with_current_digits * digits_per_page <= 1014:\n            total_digits += pages_with_current_digits * digits_per_page\n            total_pages += pages_with_current_digits\n        else:\n            # Find how many more pages can be added with the remaining digits\n            remaining_digits = 1014 - total_digits\n            additional_pages = remaining_digits // digits_per_page\n            total_pages += additional_pages\n            break\n\n        digits_per_page += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    # Calculate each pair's contribution to the sum\n    contributions = [(10 * i - (6 + (i - 1) * 10)) for i in range(1, 8)]\n    \n    # Add 2021 to the sum of the contributions\n    ans = sum(contributions) + 2021\n    \n    return ans\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways to choose a teacher and 4 students (irrespective of gender)\n    total_ways_teacher_any_4_students = total_teachers * comb(total_male_students + total_female_students, 4)\n\n    # Total ways to choose a teacher and 4 male students (no female student in the committee)\n    total_ways_teacher_4_male_students = total_teachers * comb(total_male_students, 4)\n\n    # Total ways with at least 1 female student = Total ways - Ways with only male students\n    total_ways_at_least_1_female = total_ways_teacher_any_4_students - total_ways_teacher_4_male_students\n    \n    return total_ways_at_least_1_female\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    term_difference = fifteenth_number - tenth_number\n    steps = 15 - 10\n\n    common_difference = term_difference / steps\n\n    twelfth_number = tenth_number + (2 * common_difference)\n    return twelfth_number\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Alice's age and her sister's age\n    alice, sister = symbols('alice sister')\n    \n    # Create the equations based on the problem description\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + 10 + sister + 10, 53)  # In 10 years, their total age will be 53\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    # Alice's current age\n    return solutions[alice]\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    score = 17\n    total_marks = 20\n    percentage = (score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # A monomial of the form -x^3y^(2n) has a total degree of 3 + 2n,\n    # where 3 is the degree of x^3 and 2n is the degree of y^(2n).\n    # To find n when the total degree is 5, we set up the equation 3 + 2n = 5.\n    \n    # Solving for n:\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "from fractions import Fraction\n\ndef solution():\n    milk_per_cup = Fraction(2, 3)\n    tea_per_cup = Fraction(3, 5)\n    total_cups = 45\n\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n\n    total_liters = total_milk + total_tea\n\n    return float(total_liters)\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of gummy bears Candice buys.\n    # Then, Bernice buys x+8 gummy bears and Angela buys x+8+2 (x+10) gummy bears.\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Each gummy bear costs 6 pence, so we convert £3.42 to pence.\n    total_cost_in_pence = 342\n    \n    # Create equations based on the information given.\n    # Angela = Bernice + 2\n    equation1 = Eq(angela, bernice + 2)\n    # Bernice = Candice + 8\n    equation2 = Eq(bernice, candice + 8)\n    # Total cost = Angela's gummy bears * 6 + Bernice's gummy bears * 6 + Candice's gummy bears * 6\n    equation3 = Eq(angela * 6 + bernice * 6 + candice * 6, total_cost_in_pence)\n\n    # Use sympy's solve function to solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of the list is 20, we know that the middle value when the list\n    # is sorted is 20. In this list, which has 10 numbers, the median would be the\n    # average of the 5th and 6th numbers when sorted.\n    # Since the list is already in sorted order, the middle two numbers are n+7 and n+8.\n    # Thus, the average of these two numbers is the median.\n    median = (n + 7 + n + 8) / 2\n\n    # Given that the median is 20:\n    n = 20 - 7.5  # We subtract 7.5 because 7.5 is half of 15 which is the sum of 7 and 8\n\n    # Now that we have n, we can calculate the mean.\n    # Sum of all the terms:\n    total_sum = n + (n+2) + (n+3) + (n+5) + (n+7) + (n+8) + (n+11) + (n+14) + (n+16) + (n+19)\n    # There are 10 terms in the list, so we divide the total sum by 10 to get the mean.\n    mean = total_sum / 10\n\n    return mean\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one book in pence\n    x = symbols('x')\n    \n    # Sarah's purchase: 8 books (8x) and 3 pencils (3 * 40)\n    sarah_purchase = 8 * x + 3 * 40\n    \n    # Rebecca's purchase: 3 books (3x) and 8 pencils (8 * 40)\n    rebecca_purchase = 3 * x + 8 * 40\n    \n    # Sarah paid 1 pound (100 pence) more than Rebecca\n    equation = Eq(sarah_purchase, rebecca_purchase + 100)\n    \n    # Solve for x\n    book_price_pence = solve(equation, x)[0]\n    \n    # Since the result is in pence, we convert it to pounds by dividing by 100\n    book_price_pounds = book_price_pence / 100\n    \n    return book_price_pounds\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10  # total litres of orange juice\n    container_volume = 2  # litres each container can hold\n\n    number_of_containers = total_volume / container_volume\n\n    return int(number_of_containers)\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the smallest whole number be 'x'\n    # Then the consecutive numbers will be x, x+1, x+2\n    # Their sum is given to be 60\n    \n    # x + (x+1) + (x+2) = 60\n    # Simplify the equation\n    # 3x + 3 = 60\n    # 3x = 60 - 3\n    # x = (60 - 3) / 3\n    # x = 57 / 3\n    # x = 19\n    \n    # The largest number would be x + 2\n    # largest_number = 19 + 2\n    largest_number = 21\n    \n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let's denote the weights of the three apples as a, b, and c such that a < b < c\n\n    # When Tim eats the largest apple,\n    # the mean weight of the remaining two apples is 70 grams\n    # (a + b) / 2 = 70  -> a + b = 140\n\n    # When Tim eats the lightest apple,\n    # the mean weight of the remaining two apples is 105 grams\n    # (b + c) / 2 = 105 -> b + c = 210\n\n    # Now we have two equations:\n    # a + b = 140 --(1)\n    # b + c = 210 --(2)\n\n    # We are interested in finding the weight difference c - a\n    # From equation (1) we can find a in terms of b: a = 140 - b\n    # From equation (2) we can find c in terms of b: c = 210 - b\n\n    # Now, let's subtract equation (1) from equation (2):\n    # (b + c) - (a + b) = 210 - 140 -> c - a = 70\n\n    # That's the weight difference between the heaviest apple and the lightest apple\n    return 70  # weight difference\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    members_not_shaking_hands = 4\n\n    # Total handshakes if everyone shakes hands with everyone else\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes not happening because 4 members do not shake hands with 3 others\n    handshakes_not_happened = members_not_shaking_hands * (members_not_shaking_hands - 1) // 2\n\n    # Subtract the handshakes not happened from the total possible handshakes\n    handshakes_happened = total_handshakes - handshakes_not_happened\n\n    return handshakes_happened\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Assuming A is a digit in a vertical form puzzle\n    # Since no specific puzzle was given, I'll assume a standard vertical addition problem\n    # where A is a single digit that makes the addition correct\n    \n    for A in range(10):\n        if 10 * A + A == A * 11:\n            return A\n        \nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    # Loop through all possible original numbers (1 to 9) as we are looking for a single digit\n    for original_number in range(1, 10):\n        # Add a '0' to the right of the original number to form a new 2-digit number\n        new_number = int(str(original_number) + '0')\n        # Check if the new number is greater than the original number by 27\n        if new_number - original_number == 27:\n            # If condition is met, return the original_number\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    term_number = 11\n    common_difference = 4\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1) * d\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob is always the 3rd in line no matter the direction,\n    # it means there are 2 animals in front of him, and 2 behind him in both dimensions.\n    # Hence, the array has 3 rows and 3 columns, making Bob the center of a 3x3 array.\n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Calculate the total distance between the first and last plum tree\n    total_distance = (41 - 1) * 4\n\n    # Calculate the number of pine trees by dividing the total distance by the distance between pine trees and adding 1 for the first pine tree\n    num_pine_trees = (total_distance // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    ans = smallest_multiple + largest_multiple\n    return ans\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(6 * one_cent, 5 * two_cent)     # 6 one-cent coins have the same height as 5 two-cent coins\n    equation2 = Eq(4 * one_cent, 3 * five_cent)    # 4 one-cent coins have the same height as 3 five-cent coins\n    equation3 = Eq(one_cent + two_cent + five_cent, 124)     # Total number of coins used is 124\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (one_cent, two_cent, five_cent))\n    \n    # Calculate the total value of all the coins in cents\n    total_value = solutions[one_cent] + 2 * solutions[two_cent] + 5 * solutions[five_cent]\n    \n    return total_value\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2/5) * green_pens\n        red_pens = (1/4) * green_pens\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens.is_integer() and blue_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    books_percentage = 0.25\n    dvd_percentage = 0.20\n\n    spent_on_books = initial_amount * books_percentage\n    remaining_after_books = initial_amount - spent_on_books\n    \n    spent_on_dvd = remaining_after_books * dvd_percentage\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m // 12\n\nans = solution(12)  # Example usage with 12 components representing 1 component per month"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in container B at first\n    x = symbols('x')\n\n    # Container A contains 350 mL more water than B initially\n    # After spilling 500 mL, Container B has twice as much water than A\n    equation = Eq(2 * (x - 500), x + 350)\n\n    # Solving the equation for x\n    amount_in_b = solve(equation, x)[0]\n\n    # Amount of water in Container A at first is x + 350\n    amount_in_a_at_first = amount_in_b + 350\n\n    return amount_in_a_at_first\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(998001, 100000, -1):  # Start from the largest 6-digit number and go downwards\n        if str(num) == str(num)[::-1] and num % 6 == 0:  # Check if the number is a palindrome and divisible by 6\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_cm = 1.83 * 100  # Convert meters to centimeters\n    shortage_cm = 10  # Shortage in cm\n    garage_piece_cm = desired_length_cm - shortage_cm  # Length of the piece in the garage in cm\n    return garage_piece_cm\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic variables for the number of pins and needles\n    pins, needles = symbols('pins needles')\n\n    # Given equations\n    # Total pins and needles at first\n    equation_total = Eq(pins + needles, 2540)\n    # After selling 1820 pins\n    equation_pins_sold = Eq(pins - 1820, needles - (4/5)*needles)\n\n    # Solve the system of equations\n    solutions = solve((equation_total, equation_pins_sold), (pins, needles))\n    \n    # Extract the number of needles left (after selling the pins and 4/5 of the needles)\n    needles_left = solutions[needles] - (4/5)*solutions[needles]\n\n    return needles_left\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_marbles = symbols('initial_marbles')\n    \n    # Wei Yan gave 3/8 of his marbles to his friends\n    remaining_after_friends = initial_marbles - (3/8) * initial_marbles\n    \n    # Then he gave 5/7 of the remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends - (5/7) * remaining_after_friends\n    \n    # His cousin gave him 408 marbles, and now he has twice as many as he had at first\n    final_equation = Eq(remaining_after_brother + 408, 2 * initial_marbles)\n    \n    # Solve the equation\n    solution = solve(final_equation, initial_marbles)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    total = 47\n    coin_2p = 2\n    coin_5p = 5\n    ways = 0\n\n    for num_2p_coins in range(0, total // coin_2p + 1):\n        remaining = total - (num_2p_coins * coin_2p)\n        if remaining % coin_5p == 0:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]  # The repeating number pattern\n    pattern_length = len(pattern)  # Length of the repeating pattern\n\n    times_pattern_repeats, remainder = divmod(41, pattern_length)\n    sum_repeated_patterns = sum(pattern) * times_pattern_repeats\n    sum_partial_pattern = sum(pattern[:remainder])\n\n    total_sum = sum_repeated_patterns + sum_partial_pattern\n\n    return total_sum\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    # Calculate the numerator expression\n    numerator = ((9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11)\n    \n    # Calculate the denominator expression\n    denominator = (1 / 8 - 1 / 9 + 1 / 10 - 1 / 11)\n    \n    # Calculate the final result by dividing numerator by denominator\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    father_age_at_birthday = 41\n    brian_age_at_birthday = 14\n    age_difference = father_age_at_birthday - brian_age_at_birthday\n\n    for age_increase in range(1, 100):  # test for the following 100 years\n        brian_future_age = brian_age_at_birthday + age_increase\n        father_future_age = father_age_at_birthday + age_increase\n        \n        # Check if Brian's and his father's age are the reverse of each other\n        if str(brian_future_age) == str(father_future_age)[::-1]:\n            return brian_future_age\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            for x3 in range(1, 11):\n                if x1 + x2 + x3 == 11 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by the number of permutations for each combination\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n\n    # Round each number to the nearest hundred\n    number1_rounded = round(number1, -2)\n    number2_rounded = round(number2, -2)\n\n    # Calculate the estimated difference\n    estimated_difference = number1_rounded - number2_rounded\n\n    return estimated_difference\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # Initialize a count variable\n    count = 0\n\n    # Loop over all possible combinations of two or more numbers\n    for i in range(1, 8):\n        for j in range(i, 8):  # Make sure the numbers are non-decreasing\n            if i + j == 8:  # Two number case\n                count += 1\n            for k in range(j, 8):\n                if i + j + k == 8:  # Three number case\n                    count += 1\n                for l in range(k, 8):\n                    if i + j + k + l == 8:  # Four number case\n                        count += 1\n                    for m in range(l, 8):\n                        if i + j + k + l + m == 8:  # Five number case\n                            count += 1\n                        for n in range(m, 8):\n                            if i + j + k + l + m + n == 8:  # Six number case\n                                count += 1\n                            for o in range(n, 8):\n                                if i + j + k + l + m + n + o == 8:  # Seven number case\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time in seconds\n    length = 480  # length in meters\n    speed = length / time  # speed = distance / time\n    \n    # Convert speed to meters per second if needed, or to km/h by multiplying by 3.6\n    speed_kmh = speed * 3.6\n    \n    return speed_kmh\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5 / 8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n    # Total lampposts includes both the first and the last, so the actual segments are one less\n    total_segments = total_lampposts - 1\n    length_of_road = total_segments * distance_between_lampposts\n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum(page for page in range(1, 51) if '3' in str(page))\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n    combinations = pastas * sauces * toppings\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    max_tries = 0\n    for i in range(1, 11):\n        max_tries += i\n    return max_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    max_number = max(numbers)\n    min_number = min(numbers)\n    difference = max_number - min_number\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    bag_size = 12\n    bags_bought = (guests // bag_size) + (1 if guests % bag_size != 0 else 0)\n    \n    poppers_bought = bags_bought * bag_size\n    poppers_left = poppers_bought - guests\n    return poppers_left\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Creating the initial number as a string\n    num_str = ''.join([str(i) for i in range(1, 31)])\n    \n    # Since we need the smallest number, we should remove the digits from left side as much as possible.\n    # 46 digits means we have to leave out the first 46 digits of the number.\n    # The remaining part of the string will be our answer.\n    ans = num_str[46:]\n\n    return int(ans)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The ones digit of a power of 7 follows a pattern that repeats every 4 steps:\n    # 7^1 -> 7, 7^2 -> 9, 7^3 -> 3, 7^4 -> 1, 7^5 -> 7, and so on.\n    # So we only need to find the remainder of 2023 divided by 4,\n    # and use that to get the corresponding ones digit.\n\n    # Find the remainder when 2023 is divided by 4\n    remainder = 2023 % 4\n    \n    # Return the corresponding ones digit\n    ones_digit = {1: 7, 2: 9, 3: 3, 0: 1}[remainder]\n\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import symbols, nsimplify, sqrt\n    from decimal import Decimal, getcontext\n\n    # Set the precision to 4 decimal places to ensure the final answer can be rounded to 3 decimal places correctly\n    getcontext().prec = 4\n\n    # Calculate the repeating decimals using sympy's nsimplify function\n    neg_thirteen_dot_three = nsimplify(\"-13.333...\")\n    four_dot_zero_nine = nsimplify(\"4.090909...\")\n    eleven_dot_one = nsimplify(\"11.111...\")\n\n    # Calculate the cubed root, square of the number and the square root\n    cube_root = neg_thirteen_dot_three**(1/3)\n    squared_number = four_dot_zero_nine**2\n    sqrt_eleven_dot_one = sqrt(eleven_dot_one)\n\n    # Perform the final calculation\n    result = (cube_root * squared_number) / (Decimal('59.24') - sqrt_eleven_dot_one)\n\n    # Round off to the nearest 3 decimal places\n    ans = round(Decimal(result), 3)\n\n    return ans\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number: 10001 (next after 9999)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome number: 999999 (last 6-digit number)\n    greatest_6_digit_palindrome = 999999\n    \n    # Difference between least 5-digit and greatest 6-digit palindrome numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    ans = comb(10, 2)\n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls_fraction = 3/4\n    total_members = boys / (1 - girls_fraction)\n    girls = total_members * girls_fraction\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return 32 - 15 - 12\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    target_sum = 60\n    years_later = (target_sum - (sara_age + lucy_age)) / 2\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    \n    total_seats = (two_seater_benches * 2) + (three_seater_benches * 3)\n    \n    return total_seats\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie pays £1.50 for 2 bananas and 3 apples\n    # Beth pays £1.45 for 3 bananas and 2 apples\n    # Represent these as two equations\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations for banana and apple\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost for 1 banana and 1 apple\n    cost = solutions[banana] + solutions[apple]\n\n    return cost\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_with = 16\n\n    change = paid_with - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    numbers = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # We should account for the worst-case scenario, where Rona takes out gloves of different colors.\n    # She could take out 1 glove of each of the first 4 colors without having a matching pair.\n    # To ensure she has a pair, she must take out one more glove (which would be a pair of any of the colors).\n    gloves_to_ensure_pair = 4 + 1\n\n    return gloves_to_ensure_pair\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Initial condition equation: 2/5 of basketballs equals the number of footballs\n    initial_condition = Eq(footballs, (2/5) * basketballs)\n    \n    # Condition after selling basketballs: footballs become 2/3 after selling 16 basketballs\n    selling_condition = Eq(footballs, (2/3) * (basketballs - 16))\n    \n    # Solve the system of equations\n    solution = solve((initial_condition, selling_condition), (footballs, basketballs))\n    \n    # Total number of footballs and basketballs at first\n    total_footballs_basketballs = solution[footballs] + solution[basketballs]\n    \n    return total_footballs_basketballs\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8  # Find the first multiple of 8 greater than or equal to 30\n    last_multiple = 82 // 8 * 8  # Find the last multiple of 8 less than or equal to 82\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1  # Count number of multiples\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_gave = 0.20 * sam\n    new_sam = sam - sam_gave\n    new_peter = peter + sam_gave\n\n    # Peter gave 25% of his stickers to Sam\n    peter_gave = 0.25 * new_peter\n    final_sam = new_sam + peter_gave\n    final_peter = new_peter - peter_gave\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(final_sam, final_peter + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the initial number of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    return 13 * (13 - 1) // 2\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10/100)\n    final_price = increased_price * (1 - 10/100)\n    return final_price\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    older_current, younger_current = symbols('older_current younger_current')\n    # Let the number of years ago when the older brother's age was the same as the younger brother's current age be \"x\"\n    # So x years ago, the older brother's age was older_current - x\n    # And the younger brother's age was younger_current - x\n    # At that time, the younger brother was 12 years old, so:\n    equation1 = Eq(younger_current - x, 12)\n    \n    # When the younger brother becomes the same age as the older brother's current age (after \"y\" years),\n    # So after y years, the younger brother's age will be younger_current + y\n    # And the older brother's age will be older_current + y\n    # At that time, the older brother will be 27 years old, so:\n    equation2 = Eq(older_current + y, 27)\n    \n    # Also, at that time, the ages of the brothers will differ by the same amount as they do currently\n    # So the age difference (older_current - younger_current) will remain constant:\n    equation3 = Eq(older_current - younger_current, y - x)\n    \n    # However, we know that y = older_current - younger_current from equation3\n    # So, equation2 can be rewritten using y from equation3:\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n    \n    # Now we have three equations with two unknowns and two parameters (x and y), which are not independent\n    # We can solve equation1 and equation2 for older_current and younger_current\n    solutions = solve((equation1, equation2), (older_current, younger_current, x, y))\n    \n    older_age = solutions[older_current]\n    \n    return older_age\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    running_speed = 12  # teacher's running speed in km/h\n    walking_speed = 8   # students' walking speed in km/h\n    total_time = 7.2 / 60  # total time in hours\n\n    # Distance covered by teacher = distance covered by students + 2 * length of the line\n    # Using relative speed when teacher is running towards the head of the line and back to the end\n    # Forward relative speed (teacher approaching head of line) = running_speed - walking_speed\n    # Backward relative speed (teacher returning) = running_speed + walking_speed\n    # Let the length of the line be x km\n    # Forward time = x / (running_speed - walking_speed)\n    # Backward time = x / (running_speed + walking_speed)\n    \n    # total_time = forward time + backward time\n    # 7.2/60 = x / (12 - 8) + x / (12 + 8)\n    # 7.2/60 = x/4 + x/20\n    # Multiply through by 60 to clear the fractions\n    \n    x = symbols('x')\n    equation = Eq((x / 4) + (x / 20), 7.2 / 60)\n    length_of_line = solve(equation, x)[0]\n\n    return length_of_line\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    father_age_two_years_ago = symbols('father_age_two_years_ago')\n    \n    equation = Eq(father_age_two_years_ago, 9 * flora_age_two_years_ago)\n    solutions = solve(equation, father_age_two_years_ago)\n    father_age_now = solutions[0] + 2\n    \n    return father_age_now\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Number of contests in the group stage for a single round-robin tournament\n    # of 4 members in each group: C(4, 2) = 4! / (2! * (4-2)!)\n    group_games = 6  # which is 4 * 3 / 2\n\n    # Total games in the group stage for 4 groups\n    total_group_games = 4 * group_games\n    \n    # Games in the knockout stage: top 8, top 4, top 2, and the 3rd place match\n    # We have 7 games here which is fixed regardless of the number of initial groups\n    knockout_games = 7\n\n    # Total games in the contest are sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = [x for x in range(31, 40) if x % 4 == 0 and x % 6 == 0]\n    return sweets[0] if sweets else None\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doggo, bugcat, pusheen = symbols('doggo bugcat pusheen')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(doggo + bugcat + pusheen, 189)\n\n    solutions = solve((equation1, equation2, equation3), (doggo, bugcat, pusheen))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, solve\n\n    distance = symbols('distance')\n    speed1 = 4  # km/h\n    speed2 = 6  # km/h\n    time_difference = (20 + 10) / 60  # hours (converted 20 min late + 10 min early to hours)\n\n    # Time = Distance / Speed, and the time difference is because of the speed difference\n    equation = (distance / speed1) - (distance / speed2) - time_difference\n\n    distance_solution = solve(equation, distance)\n\n    return distance_solution[0]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    return 1.1 * (1.2 + 1.3) * 2\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        count += str(i * 2).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1.25 * 100  # Convert from pounds to pence\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n    \n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for num in range(8, 86):\n        count += str(num).count('3')\n    return count\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    unique_permutations = set(permutations(\"CYZZ\"))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # The snail climbs for 5 days and has a different climb on the 6th day.\n    remaining_distance = 18 - total_climbed  # Distance left to climb after 6 days.\n    slide_down = 7 - remaining_distance  # The snail must slide down this much to climb out on the 7th day.\n    return slide_down\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    # Final candy in the bowl is 3\n    remaining_candy = 3\n\n    # Ken took 1 less than half of the remaining pieces before him\n    # Let x be the number of candies before Ken took his share\n    # x/2 - 1 = remaining_candy\n    # Solving for x gives us x = remaining_candy * 2 + 2\n    x = remaining_candy * 2 + 2  # Number of candies before Ken\n    remaining_candy = x  # Update the remaining candies after Ken took his share\n\n    # Nini took 3 more than half of the remaining pieces before her\n    # Let y be the number of candies before Nini took her share\n    # y/2 + 3 = remaining_candy\n    # Solving for y gives us y = (remaining_candy - 3) * 2\n    y = (remaining_candy - 3) * 2  # Number of candies before Nini\n    remaining_candy = y  # Update the remaining candies after Nini took her share\n\n    # Ivy took 2 less than half of the remaining pieces before her\n    # Let z be the number of candies before Ivy took her share\n    # z/2 - 2 = remaining_candy\n    # Solving for z gives us z = (remaining_candy + 2) * 2\n    z = (remaining_candy + 2) * 2  # Number of candies before Ivy\n    remaining_candy = z  # Update the remaining candies after Ivy took her share\n\n    # Eddie took 1 more than half of the original number of candies\n    # Let w be the original number of candies\n    # w/2 + 1 = remaining_candy\n    # Solving for w gives us w = (remaining_candy - 1) * 2\n    w = (remaining_candy - 1) * 2  # Original number of candies\n\n    return w\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n    \n    A = 12\n    B = 16\n    C = 20\n\n    common_group_size = gcd(A, gcd(B, C))\n\n    return common_group_size\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = (3 ** 2) * (2 ** 3)\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_total = 82\n\n    total_average_score = (total_boys + total_girls) * average_total\n    total_boys_score = total_boys * average_boys\n    total_girls_score = total_average_score - total_boys_score\n\n    average_girls = total_girls_score / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to meters for comparison.\n    # 1 foot = 0.3048 meters, 10 millimeters = 1 centimeter, 100 centimeters = 1 meter.\n    \n    # Original estimates in various units\n    height_m = 5\n    height_cm = 120\n    height_mm = 50\n    height_ft = 8\n    \n    # Conversions to meters\n    height_cm_to_m = height_cm / 100  # 120cm to meters\n    height_mm_to_m = height_mm / 1000  # 50mm to meters\n    height_ft_to_m = height_ft * 0.3048  # 8 feet to meters\n    \n    # Possible range for a pupil's height: 1m to 2.5m (typical heights for children aged 11)\n    min_height = 1\n    max_height = 2.5\n    \n    # Check if the estimates are within the typical height range.\n    correct_estimates = {\n        '5m': min_height <= height_m <= max_height,\n        '120cm': min_height <= height_cm_to_m <= max_height,\n        '50mm': min_height <= height_mm_to_m <= max_height,\n        '8ft': min_height <= height_ft_to_m <= max_height\n    }\n    \n    # The correct estimates are returned.\n    for estimate, is_correct in correct_estimates.items():\n        if is_correct:\n            return estimate\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = -3\n    n = 15\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_fish = 25\n    second_catch_total = 200\n    marked_total = 100\n\n    pond_population_estimate = (marked_total * second_catch_total) / marked_fish\n\n    return pond_population_estimate\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be x\n    # The number of girls will then be 3x\n    # Each girl took 2 paintbrushes, so the girls took 2*(3x) paintbrushes\n    # Each boy took 3 paintbrushes, so the boys took 3*x paintbrushes\n    # In total they took 99 paintbrushes:\n    #   2*(3x) + 3*x = 99\n    #   Solving for x: 6x + 3x = 99\n    #                 9x = 99\n    #                  x = 99 / 9\n    #                  x = 11 (number of boys)\n    # The number of girls: 3 * x = 3 * 11 = 33\n    boys = 99 // 9\n    girls = 3 * boys\n    return girls\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    # Unitary method: Find out how many rabbit-days the pile of food can feed\n    total_rabbit_days = rabbits_initial * days_initial\n\n    # Now, calculate the number of days that pile can feed 20 rabbits\n    days_final = total_rabbit_days / rabbits_final\n\n    return days_final\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gift\n    additional_money_needed = dress_cost - total_money\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of trees planted by boys be b, and girls be g.\n    b, g = symbols('b g')\n\n    # Set up the equation: girls planted 12 more trees than the boys\n    equation1 = Eq(g, b + 12)\n\n    # Total number of trees planted is 100\n    equation2 = Eq(b + g, 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Abigail gets up at 07:40\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # 25 minutes later she starts her breakfast\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n    \n    # Breakfast takes 10 minutes to finish\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    \n    # Her journey takes 35 minutes in total\n    journey_end_time = breakfast_end_time + timedelta(minutes=35)\n    \n    # She arrives 5 minutes late for registration\n    registration_time = journey_end_time - timedelta(minutes=5)\n\n    # Return the registration time in \"%H:%M\" format\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n\n    # Calculate the total number of quarters\n    quarters_total = total_dollars * quarters_in_one_dollar\n\n    return int(quarters_total)\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    for two_gram_weights in range(39):  # Maximum 38 2-gram weights since 2*39 = 78 > 77\n        for three_gram_weights in range(26):  # Maximum 25 3-gram weights since 3*26 = 78 > 77\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    # Given scores\n    scores = [96, 85, 89, 92]\n    \n    # Average score\n    average_score = 90\n    \n    # Total number of assignments\n    num_assignments = 5\n    \n    # Calculate the total score for the 5 assignments\n    total_score_for_all_assignments = average_score * num_assignments\n    \n    # Calculate the total score for the first 4 assignments\n    total_score_for_4_assignments = sum(scores)\n    \n    # Calculate the score for the fifth assignment\n    fifth_assignment_score = total_score_for_all_assignments - total_score_for_4_assignments\n    \n    return fifth_assignment_score\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate sum of cubes from 1 to 20\n    sum_cubes_20 = (sum(range(1, 21)))**2\n    # Calculate sum of cubes from 1 to 9\n    sum_cubes_9 = (sum(range(1, 10)))**2\n    # Subtract the sum of cubes from 1 to 9 from the sum of cubes up to 20\n    return sum_cubes_20 - sum_cubes_9\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n\n    return coaches_needed\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure we have at least 5 different colours with at least 10 pencils for each colour,\n    # we can draw the maximum number of pencils from 4 colours without fulfilling the condition,\n    # and then add the necessary pencils from the 5th colour to fulfill the condition.\n    \n    # Drawing 9 pencils from each of the first 4 colours, we don't yet ensure 10 pencils of any colour\n    # So we can draw 9 pencils for each of the 4 colours, which is 4 * 9.\n    four_colours_max = 4 * 9\n    \n    # Then we draw 10 pencils from the 5th colour to ensure we meet the condition for at least 5 different colours.\n    fifth_colour_min = 10\n    \n    # The total minimum number required is the sum of both steps.\n    total_min_draw = four_colours_max + fifth_colour_min\n    \n    return total_min_draw\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Pip and Bud initially had\n    pip, bud = symbols('pip bud')\n\n    # Set up the equations based on the problem statement\n    # pip and bud shared sweets in the ratio of 4:7 initially\n    equation_initial = Eq(pip / bud, 4 / 7)\n\n    # After Santa gave Bud five sweets, the ratio became 8:15\n    equation_after = Eq((pip / (bud + 5)), 8 / 15)\n\n    # Solve the equations\n    solutions = solve((equation_initial, equation_after), (pip, bud))\n\n    # Return the number of sweets Pip had\n    return solutions[pip]\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    for i in range(1, 1000):  # Assuming the upper limit to check is 1000\n        if i % 4 == 3 and i % 5 == 4 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of girls and boys\n    g, b = symbols('g b')\n    \n    # Equation for the total number of pupils in the school\n    total_pupils_eq = Eq(g + b, 1690)\n    \n    # Equation for the difference between the number of boys and girls\n    boys_girls_difference_eq = Eq(b - g, 90)\n    \n    # Calculate the number of girls and boys in the school\n    girls_boys_solution = solve((total_pupils_eq, boys_girls_difference_eq), (g, b))\n    g = girls_boys_solution[g]\n    b = girls_boys_solution[b]\n\n    # Ratios for girls who can swim (g_swim) to girls who cannot swim (g_non_swim)\n    g_swim, g_non_swim = 31 * g / 80, 49 * g / 80\n    \n    # Ratios for boys who can swim (b_swim) and cannot swim (b_non_swim)\n    b_swim = symbols('b_swim')\n    # Equation for the number of boys who can swim and cannot swim\n    boys_swim_difference_eq = Eq(b_swim, b / 2 - 120)\n    # Solve the equation for b_swim\n    b_swim = solve(boys_swim_difference_eq, b_swim)[0]\n    b_non_swim = b - b_swim\n\n    # Calculate the total number of pupils who cannot swim (g_non_swim + b_non_swim)\n    non_swimmers = g_non_swim + b_non_swim\n\n    return int(non_swimmers)\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = (144 + 204) * 2  # Calculate the perimeter of the field\n    wheats_on_side = (116 - 4) // 4  # Subtract corner wheats and divide by 4 as they are evenly placed on four sides\n    distance = perimeter / (wheats_on_side + 1)  # Add 1 since distance is between wheats, not wheats count\n    return distance\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n\n    ans = gcd(length1, length2)\n    \n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # The last digit of a number resulting from multiplication only depends on the last digits of the factors.\n    # For any non-negative integer power n, the last digit of 5^n is always 5.\n    # For any non-negative integer power m, the last digit of 7^m cycles through 7, 9, 3, 1 every 4 numbers.\n    # So the last digit of 7^30 is the same as the last digit of 7^(30 mod 4) = 7^(2) which is 9.\n\n    last_digit_5 = 5\n    last_digit_7 = 9\n\n    # Now we just multiply the last digits and find the last digit of the result.\n    last_digit_result = (last_digit_5 * last_digit_7) % 10\n\n    return last_digit_result\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 46))\n\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:  # Different prime numbers\n                    if a < b and b < c:  # Ensures uniqueness of the solution\n                        # A's statement implies that `a + x != y` for any distinct x, y in {b, c}\n                        if a + b != c and a + c != b:\n                            # B's statement implies that `b - 1` is a prime number and `b - a = 7`\n                            if (b - 1) in primes and abs(b - a) == 7:\n                                # C's statement and the Teacher's confirmation imply that `2c + x = y` for some distinct x, y in {a, b}\n                                if 2 * c + a == b or 2 * c + b == a:\n                                    return a + b + c\n    return None\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Since no specific sharing rule is mentioned, \n    # we assume an equal division between Joe and his friend.\n    total_squares = 16\n    number_of_people = 2  # Joe and his friend\n\n    # The amount of squares Joe has after sharing\n    squares_per_person = total_squares // number_of_people\n\n    return squares_per_person\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    between = 2\n\n    total_children = (laura_position - 1) + between + 1 + amanda_from_end\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime nor composite; 0 is not considered prime or composite\n    D = 0  # 2 less than the smallest prime number\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5, so it must be 5\n    G = 8  # greatest factor of 8 is 8 itself\n    H = 6  # lowest multiple of 6 excluding 0\n\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return phone_number\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_in_seconds = 24 * 60 * 60  # Number of seconds in a day\n    part_of_day = (1/4) * (1/6) * (1/8)\n    seconds = day_in_seconds * part_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_initial = symbols('marry alexis charlotte_initial')\n\n    # Marry and Alexis had stickers in the ratio 7 : 5\n    ratio_eq = Eq(marry / alexis, 7 / 5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_to_charlotte = 0.20 * marry\n    alexis_to_charlotte = 0.20 * alexis\n\n    # Charlotte's stickers increased by 80%\n    charlotte_final = charlotte_initial + marry_to_charlotte + alexis_to_charlotte\n    charlotte_increase_eq = Eq(charlotte_final, 1.80 * charlotte_initial)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    mary_final_eq = Eq(marry - marry_to_charlotte, charlotte_final + 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_increase_eq, mary_final_eq), (marry, alexis, charlotte_initial))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_permutations = set(permutations(digits))\n    \n    four_digit_numbers = [int(''.join(p)) for p in unique_permutations if p[0] != '0']\n    \n    return len(four_digit_numbers)\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    from math import factorial\n\n    # If Eddie and his parents want to stand together, treat them as one unit.\n    # So we have one unit (Eddie and his parents) plus any other family members.\n    # Since no other members are mentioned, let's assume it's just Eddie and his parents.\n    # We can arrange this single unit in 1 way.\n\n    # However, within this unit, Eddie and his parents can be arranged in 3! different ways.\n    # Eddie, Mom, Dad => EMD, EDM, MED, MDE, DEM, DME\n    arrangements_within_unit = factorial(3)\n\n    # Now, if there are no other family members, there is only 1 way to arrange the remaining.\n    # If there were x other family members, it would be factorial(x+1) as we have (unit + x members).\n    # Since we only have the unit, we will treat x=0, meaning factorial(0+1) = factorial(1)\n    arrangements_remainder_family = factorial(1)\n\n    # Apply the principle of multiplication:\n    total_arrangements = arrangements_within_unit * arrangements_remainder_family\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            pip_number = int(f\"{a}{b}{b}{a}\")\n            bud_number = int(f\"{a}{b}{a}{b}\")\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_25_cows_10_days = 25 * 10\n    grass_for_15_cows_20_days = 15 * 20\n  \n    # Find the total amount of grass by taking the least common multiple\n    # of the number of days (which is 10 and 20 days here), and it is 20 days.\n    # The grass can feed 25 cows for 10 days and also feed 15 cows for 20 days.\n    # To find the total grass, we just need to calculate the grass available\n    # for 20 days.\n    total_grass = grass_for_15_cows_20_days\n\n    # Calculate how many cows can be fed for 50 days using the total amount of grass\n    cows_for_50_days = total_grass / 50\n\n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    days = 0\n    pages_read = 0\n\n    while pages_read + (days + 1) <= total_pages:\n        days += 1\n        pages_read += days\n\n    return days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of oranges and y be the number of lemons initially.\n    x, y = symbols('x y')\n    \n    # Initial ratio of oranges to lemons is 3:5.\n    equation1 = Eq(3 * y, 5 * x)\n    \n    # After selling 48 oranges, the ratio becomes 1:2.\n    equation2 = Eq((x - 48) * 2, y)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    correct_minuend = 166\n    incorrect_difference = 81\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = second_day * (5/3)\n    total = first_day + second_day + third_day\n    return total\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    total_cakes = int(250 / flour_per_cake)\n    return total_cakes\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the 3 math books as a single unit and the 2 English books as another unit.\n    num_units = 3  # The math books unit, the English books unit, and the other books unit.\n    \n    # Count the permutations of these 3 units with the 3 other distinct books: 6 items altogether.\n    perm_units_and_other = factorial(6)\n    \n    # Count the permutations within the math books unit (3 books) and the English books unit (2 books).\n    perm_within_math = factorial(3)\n    perm_within_english = factorial(2)\n    \n    # Multiply the permutations of the units with the permutations within each language unit.\n    total_permutations = perm_units_and_other * perm_within_math * perm_within_english\n\n    return total_permutations\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    exclusive_member_discount = 100\n    sales_tax = 0.10\n\n    discounted_price = original_price - (original_price * discount)\n    member_price = discounted_price - exclusive_member_discount\n    final_price = member_price + (member_price * sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (32 * 8) / 20\n    return missing_number\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days Kevin takes off be 'k'\n    k = symbols('k')\n\n    # Ivy's work rate\n    ivy_rate = 1 / 24\n    # Kevin's work rate\n    kevin_rate = 1 / 20\n\n    # Total work done by Ivy is the rate times the total days\n    ivy_work = ivy_rate * 12\n    # Total work done by Kevin is his rate times (total days - days off)\n    kevin_work = kevin_rate * (12 - k)\n\n    # Total work should add up to 1 (the whole job)\n    equation = Eq(ivy_work + kevin_work, 1)\n\n    # Solve for 'k'\n    solutions = solve(equation, k)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to take out 3 socks to ensure that she has at least one pair of the same color.\n    # If she takes out 2 socks, they could be of different colors (1 black and 1 red),\n    # so to be certain, she must take out a third sock, which will definitely form a pair with one of the previously taken socks.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    num_statues = 9\n    num_to_arrange = 4\n\n    ways = factorial(num_statues) // factorial(num_statues - num_to_arrange)\n\n    return ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # in pence (converted from £1.00 to 100p)\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_percent = 8  # GST rate in percent\n\n    gst_amount = bracelet_cost * gst_percent / 100\n    total_cost = bracelet_cost + gst_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2\n    total_pattern = grey_rabbits // pattern_grey\n\n    black_rabbits = total_pattern * 1\n    white_rabbits = total_pattern * 2\n    \n    # In case there are more grey rabbits than a complete pattern\n    remaining_grey = grey_rabbits % pattern_grey\n    if remaining_grey > 0:\n        black_rabbits += 1\n        white_rabbits += 2\n\n    ans = black_rabbits + white_rabbits + grey_rabbits\n    return ans\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # because if divisor were quotient, remainder would be 0\n    dividend = quotient * divisor + remainder  # Using dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return (2015**2 - (2016*2014))\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    bicycles, tricycles = symbols('bicycles tricycles')\n\n    # Bicycles have 2 wheels each, tricycles have 3 wheels each\n    # Equation 1: The total number of bicycles and tricycles is 300\n    equation1 = Eq(bicycles + tricycles, 300)\n\n    # Equation 2: The total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    # 2*bicycles is the number of bicycle wheels, 3*tricycles is the number of tricycle wheels\n    equation2 = Eq(3*tricycles - 2*bicycles, 180)\n\n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 80 / 100 + 4 / 5 * 100 / 100\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimal = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimal, 1)\n    tongtong_answer = 9764.0\n    return rounded_number != tongtong_answer, rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    chocolate_biscuits = chocolate_with_foil + (neither_chocolate_nor_foil - (total_biscuits - foil_wrappers))\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    num_fives = 15\n    num_twos = 10\n    num_zeros = min(num_fives, num_twos)\n    return num_zeros\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the distance, s be the original speed, and t be the original time.\n    # Hence, d = s * t.\n    d, s, t = symbols('d s t')\n\n    # When speed increases by 25%, the time taken decreases by 20 minutes.\n    # Therefore, d = s * 1.25 * (t - 20/60) \n    equation1 = Eq(d, s * 1.25 * (t - 20/60))\n\n    # When speed decreases by 45 m/min, the time taken increases by 75%.\n    # Therefore, d = (s - 45) * t * 1.75\n    equation2 = Eq(d, (s - 45) * t * 1.75)\n\n    # Combine the two equations with the equation d = s * t\n    equation3 = Eq(d, s*t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    # Express following the description:\n    # 1. He sells (half of his crystals + 10) to Yvonne -> initial_crystals / 2 - 10\n    # 2. He mined 20 more crystals -> + 20\n    # 3. He then sells another 14 crystals to Cherlyn -> - 14 \n    # 4. He has 35 crystals in the end.\n    \n    equation = Eq((initial_crystals / 2 - 10) + 20 - 14, 35)\n    \n    solution = solve(equation, initial_crystals)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    all_combinations = permutations(digits)\n    \n    # Since all permutations of the digits have been generated, \n    # each combination would yield two possibilities with the decimal \n    # point because the decimal point can be placed in any of the three gaps\n    # between the four digits.\n    count = sum(1 for _ in all_combinations) * 3\n    \n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    # Since Bala is directly behind Ali, the number of people between Ali and Bala is 0.\n    people_between_Ali_and_Bala = 0\n\n    # The total number of people is people in front of Ali + Ali + Bala + people behind Bala\n    total_people = people_in_front_of_Ali + 1 + 1 + people_behind_of_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    blue_dodges = blue_cars - (black_dodges - fords)\n    blue_fords = blue_cars - blue_dodges\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    \n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let anna_carrots be the number of carrots Anna has originally.\n    anna_carrots, olaf_carrots = symbols('anna_carrots olaf_carrots')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(olaf_carrots, 3 * anna_carrots)  # Olaf had thrice as many carrots as Anna.\n    equation2 = Eq(2 * (anna_carrots), (olaf_carrots - 335))  # After Olaf gave 335 carrots, Anna had twice as many as Olaf.\n    \n    # Solve the equations.\n    solutions = solve((equation1, equation2), (anna_carrots, olaf_carrots))\n    \n    return solutions[anna_carrots]\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85  # Cost of one plant in pence\n    budget_pence = 30 * 100  # Convert budget from pounds to pence\n    num_plants = budget_pence // plant_cost_pence  # Calculate the number of plants that can be bought\n\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the two number symbols\n    x, y = symbols('x y')\n\n    # Form the equations\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The smaller number y\n    smaller_number = solutions[y]\n\n    return smaller_number\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution_dict = solve(equation, x)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return ans\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 11*7):  # The number should be less than the product of 11 and 7 to find the smallest\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start checking from the smallest composite number, which is 4\n    A = 4\n    while True:\n        # Since the numbers are consecutive, assign them accordingly\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        \n        # Check if all four numbers are composite\n        if (any(A % i == 0 for i in range(2, A)) and\n            any(B % i == 0 for i in range(2, B)) and\n            any(C % i == 0 for i in range(2, C)) and\n            any(D % i == 0 for i in range(2, D))):\n            return A + B + C + D\n        # Move to the next potential sequence\n        A += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    num_days_worked = 5\n\n    total_earnings = average_daily_earnings * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct\n        score = correct * 3 - wrong * 2\n        if score == 125:\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    apples = 50\n    children = 8\n    # Since each child gets at least one apple, we distribute one to each child first.\n    apples -= children\n    # Now we have apples - children apples left, and we want to find the least\n    # number of apples the child with the most can get. We will distribute the\n    # remaining apples one by one to the children.\n    most_apples = 1  # start with the 1 apple each child initially gets\n    while apples > 0:\n        # we try to evenly distribute the apples among the children\n        apples_for_each = apples // children\n        # if each child can get at least one more, update most_apples\n        if apples_for_each > 0:\n            most_apples += apples_for_each\n        # distribute one more apple to one child, it will be the one with the most\n        apples -= 1\n        most_apples += 1\n        # the other children will have at least one less apple than the one with the most\n        children -= 1\n    return most_apples\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Calculate the number of ways to choose 2 teams out of 6\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    \n    # Determine greatest common divisor (GCD) for the given numbers\n    gcd_60_72 = gcd(60, 72)\n    ans = gcd(gcd_60_72, 84)\n    \n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    for start in range(1, 13):\n        if (start + (30 % 12)) % 12 == 10:\n            if start == 0:  # Convert 0 back to 12 (clock format)\n                start = 12\n            return start\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for d in range(10):\n        number = int(f\"296{d}12\")\n        if number % 9 == 0:\n            return d\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n\n    while len(sequence) < 2011:\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    # If two-thirds of a number is 24, let's find the number first\n    number = (24 * 3) / 2\n    # Now, find three-quarters of this number\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # First part of the journey\n    time_first_part = 2  # Hours\n    speed_first_part = 40  # Kilometers per hour\n    distance_first_part = time_first_part * speed_first_part  # Kilometers\n\n    # Second part of the journey\n    distance_second_part = 280  # Kilometers\n    speed_second_part = 70  # Kilometers per hour\n    time_second_part = distance_second_part / speed_second_part  # Hours\n\n    # Total distance and total time\n    total_distance = distance_first_part + distance_second_part\n    total_time = time_first_part + time_second_part\n\n    # Average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan_cards, bob_cards = symbols('alan_cards bob_cards')\n    \n    # Bob has $15 more Match Dfex cards than Alan.\n    equation1 = Eq(bob_cards, alan_cards + 15)\n    \n    # Colin gives Bob $25 cards.\n    # Bob now has $3 times as many as Alan.\n    equation2 = Eq(bob_cards + 25, 3 * alan_cards)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan_cards, bob_cards))\n    \n    return solutions[alan_cards]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_423 = 423 % 4  # Remainder of 423 divided by 4\n    remainder_326 = 326 % 4  # Remainder of 326 divided by 4\n    product_remainders = remainder_423 * remainder_326  # Product of the remainders\n    ans = product_remainders % 4  # Remainder of product divided by 4\n    return ans\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # Given the sequence of odd numbers starting from 23\n    first_term = 23\n    common_diff = 2\n\n    # Using the formula for the sum of an arithmetic series: S = n/2 * (first_term + last_term)\n    # And the fact that the sum is a perfect square (m^2), we deduce that n must be odd \n    # because the first term is odd and the common difference is even, which means the last term \n    # will also be odd. Odd * Odd will give an odd result, so n must be odd.\n\n    # n = (2k-1 - first_term)/common_diff + 1\n    # S = n/2 * (first_term + (first_term + (n - 1) * common_diff))\n    # m^2 = n/2 * (2*a + (n - 1) * d)\n    \n    # We look for the smallest n such that n > 30\n    n = 31  # 31 is the next odd number after 30\n\n    while True:\n        last_term = first_term + (n - 1) * common_diff\n        sum_seq = n/2 * (first_term + last_term)\n        m = int(sum_seq**0.5)\n        if m**2 == sum_seq and (last_term + common_diff) / 2 > 30:\n            return m\n        n += 2  # increment by 2 to maintain odd n\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    total_visitors = 100  # Assume a total of 100 visitors for easy calculation\n    men = 37\n    women_and_children = total_visitors - men\n    children = (women_and_children * 4 / 9) - 12\n    women = women_and_children * 5 / 9\n\n    # Scale the number of women according to the actual difference in men and children\n    women *= (men - children) / (men - 37)\n\n    return int(women)\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # We shall use the Pigeonhole Principle formula: minimum_number = n + (k - 1)\n    total_types = 3  # k = number of colours (pigeonholes)\n    max_single_color = max(8, 10, 13)  # n = maximum number of balls of a single color\n    \n    # Calculate the minimum number of times he needs to pick\n    # to ensure he has at least one of each color\n    minimum_number = max_single_color + (total_types - 1) \n    \n    return minimum_number\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_day_per_cow = 1\n    \n    total_parts_eaten = cows * days * parts_per_day_per_cow\n    \n    return total_parts_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana_price, apple_price = symbols('banana_price apple_price')\n\n    # Ellie's transaction equation: 2 bananas + 3 apples = 3 dollars\n    equation1 = Eq(2 * banana_price + 3 * apple_price, 3)\n    \n    # Beth's transaction equation: 3 bananas + 2 apples = 4 dollars\n    equation2 = Eq(3 * banana_price + 2 * apple_price, 4)\n    \n    # Solving the system of equations for the price of bananas and apples\n    prices = solve((equation1, equation2), (banana_price, apple_price))\n    \n    # Calculating Annabella's total payment for 10 bananas and 10 apples using the prices obtained\n    total_payment = 10 * prices[banana_price] + 10 * prices[apple_price]\n\n    return total_payment\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of oil sold from each bucket\n    oil_sold = symbols('oil_sold')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(89 - oil_sold, 12 * (45 - oil_sold))\n    \n    # Solve the equations\n    solution = solve(equation1, (oil_sold))\n    \n    return solution[oil_sold]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that both trains are on time\n    prob_both_on_time = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability that at least one train is late is the complement of both being on time\n    prob_at_least_one_late = 1 - prob_both_on_time\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_has_now = 100\n    \n    strawberries_from_mother = lena_has_now - (lena_had_initially - lena_gave_away)\n\n    return strawberries_from_mother\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    day_off_period = (end_date - start_date).days + 1\n\n    return day_off_period\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # 10 to 99 inclusive\n    numbers_without_six = 8 * 8   # Exclude 6 in tens and units place\n    \n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for number in range(1, 2023):\n        if number % 7 != 0 and number % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    combined_speed = speed_a + speed_b\n\n    time = distance / combined_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n  \n    # equations based on the problem statement\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n  \n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n  \n    return solutions[mango]\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of 2023^2 and 2^2023 individually\n    last_digit_2023_squared = (2023 ** 2) % 10  # Last digit of 2023 squared\n    last_digit_2_power_2023 = pow(2, 2023, 10)  # Last digit of 2 to the power of 2023\n    \n    # Add the last digits and again find the last digit of the sum\n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    \n    # Compute the last digit of the cube of the sum\n    ans = (sum_last_digit ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    lines = 13\n    max_intersections = lines * (lines - 1) // 2\n\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = 5 ** 20 % 10\n    last_digit_7s = 7 ** 20 % 10\n    \n    last_digit = (last_digit_5s * last_digit_7s) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    AB = CD = 14  # Given sides of quadrants, in cm\n    pi = 22 / 7   # Value of pi provided in the question\n\n    # Half of the circumference of a full circle for quadrant sides (AB & CD)\n    half_circumference_quadrant = (2 * pi * AB) / 2\n\n    # Perimeter for one quadrant = half of the circumference + 2 radii\n    # Since there are two identical quadrants, multiply by 2\n    perimeter_quadrants = (half_circumference_quadrant + 2 * AB) * 2\n\n    # Half of the circumference of a full circle for semicircle diameter AB\n    half_circumference_semicircle = (pi * AB) / 2\n\n    # Perimeter for one semicircle = half of the circumference + diameter\n    # Since there are two identical semicircles, multiply by 2\n    perimeter_semicircles = (half_circumference_semicircle + AB) * 2\n\n    # Total perimeter = Perimeter of quadrants + Perimeter of semicircles\n    total_perimeter = perimeter_quadrants + perimeter_semicircles\n\n    return total_perimeter\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 3/5\n\n    # After the first day\n    after_first_day = 48 / remaining_after_second_day\n\n    # Initial number of watermelons\n    initial_watermelons = after_first_day / remaining_after_first_day\n\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(105, 1000, lcm):  # 105 is the first such three digit number.\n        if str(i).startswith('6'):\n            return i\n            \nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost per packet of rice\n    rice_cost_per_packet = symbols('rice_cost_per_packet')\n    \n    # Define the equation based on the given information\n    total_cost = 6 * 95 + 5 * rice_cost_per_packet  # Total cost in pence\n    \n    # Set up the equation where the total cost is equal to £11.70 (1170 pence)\n    equation = Eq(total_cost, 1170)\n    \n    # Solve the equation for the cost per packet of rice\n    solutions = solve(equation, rice_cost_per_packet)\n    \n    # Since we want the answer in pence, no conversion from p to £ is needed\n    return solutions[0]\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    # Number of cakes Emily bought\n    number_of_cakes = 195\n    # Cost per cake\n    cost_per_cake = 46\n    # Total cost for cakes\n    total_cost = number_of_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # We start by manipulating the fraction to match the required form\n    # We know that 13/10 = 1 + 3/10, so we can start with a = 3\n    \n    # To find the next denominator (b), we solve the equation 1/b = 3/10\n    # Therefore, b = 10/3 -> we need the whole part of 10/3 which is 3 and remain is 10 % 3 which is 1\n    # So, b = 3 and we continue with the remainder 1/3\n    \n    # Similarly, for c, we solve 1/c = 1/3\n    # Therefore c = 3\n    \n    # Now we have a = 3, b = 3, c = 3\n    # We plug them into the expression to verify\n    fraction = 1 + 1 / (3 + 1 / (3 + 1 / 3))\n    # This fraction should equal to 13/10\n    \n    # Calculate the value of a + 2b + 3c\n    a, b, c = 3, 3, 3\n    result = a + 2*b + 3*c\n    \n    # Verification step to ensure our fraction is right (optional, but good practice)\n    # Assert the result to make sure the fraction equals 13/10\n    assert fraction == 13/10, \"The derived fraction doesn't equal to 13/10\"\n\n    return result\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house alone\n    x = symbols('x')\n\n    # If the energetic one paints the house in 20 days, his work rate is 1/20 house/day\n    energetic_rate = 1/20\n\n    # The work rate of the lazy one would then be 1/x house/day\n    lazy_rate = 1/x\n\n    # Working together, their combined work rate is 1 house in 12 days, i.e., 1/12 house/day\n    combined_rate = 1/12\n\n    # The equation for the combined work rate is then: energetic_rate + lazy_rate = combined_rate\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve for x\n    days_for_lazy = solve(equation, x)\n\n    return days_for_lazy[0]\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    n = 15  # number of consecutive numbers\n    total_sum = 1650  # sum of the consecutive numbers\n    average = total_sum // n\n    smallest_number = average - (n // 2)\n    largest_number = average + (n // 2)\n    sum_of_largest_and_smallest = smallest_number + largest_number\n    return sum_of_largest_and_smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while True:\n        if num_pies % 4 == 0 and num_pies % 6 == 0:\n            break\n        num_pies += 1\n    return num_pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n\n    # Using the ratio to find the number of girls\n    total_girls = total_boys * (2 / 3)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n\n    # Check all numbers from 1 to 999\n    for num in range(1, 1000):\n        # Convert the number to a string to check each digit\n        str_num = str(num)\n        # Check if all characters in the string are odd digits\n        if all(char in '13579' for char in str_num):\n            oddtastic_count += 1\n\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Remainder when a is divided by 8 is 6\n    # Remainder when b is divided by 8 is 7\n    remainder_a = 6\n    remainder_b = 7\n\n    # Sum of remainders\n    sum_remainders = remainder_a + remainder_b\n\n    # Remainder of the sum when divided by 8\n    remainder_sum = sum_remainders % 8\n\n    return remainder_sum\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    skirts = 8\n    blouses = 2\n    cloth_per_skirt = 2.83\n    \n    total_cloth_used_for_skirts = skirts * cloth_per_skirt\n    remaining_cloth = total_cloth - total_cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / blouses, 1)\n    \n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while digit_count < 2019:\n        digit_count += len(str(num))\n        num += 1\n    # At this point, digit_count is at least 2019.\n    # We need to find out how many digits to move back.\n    num -= 1\n    over_count = digit_count - 2019\n    ans = int(str(num)[len(str(num)) - over_count - 1])\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # There are 11 keys to try and 11 doors; worst case scenario is trying every key for each door.\n    # For the first door, he tries all 11 keys, for the second door he tries 10 remaining keys, and so on...\n    # This results in a sum of 11 + 10 + 9 + ... + 1 = 11 * (11 + 1) / 2\n    # The mathematical formula for the sum of the first 'n' natural numbers is n * (n + 1) / 2\n    num_keys = 11\n    max_tries = sum(range(1, num_keys + 1))\n\n    return max_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_combinations = set(permutations(digits, 4))\n    return len(unique_combinations)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    total_sum = 3009\n    greater_number = 1722\n    smaller_number = total_sum - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # mass of the basket in kilograms (500 grams to kg)\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    num_kittens = 4  # number of kittens\n    \n    # Calculate the total mass of all kittens\n    total_kitten_mass_kg = kitten_mass_kg * num_kittens\n    \n    # Calculate the mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + total_kitten_mass_kg)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_spent = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_spent / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # Mary has three brothers and four sisters\n    mary = 1  # Mary herself\n    \n    # Each person buys an egg for each of their siblings, and none for themselves\n    eggs_bought_per_person = siblings\n    \n    # Total eggs is the number of people times the eggs each person buys\n    total_eggs = (siblings + mary) * eggs_bought_per_person\n    \n    return total_eggs\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    start_time = (7, 50)  # 7:50 AM\n    end_time = (8, 40)    # 8:40 AM\n\n    start_minutes = start_time[0] * 60 + start_time[1]  # Convert start time to minutes\n    end_minutes = end_time[0] * 60 + end_time[1]        # Convert end time to minutes\n\n    duration = end_minutes - start_minutes  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    original_amount = remaining_after_bag / (1 - 1/5)\n    return original_amount\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Since it's a second-degree arithmetic sequence, calculate the differences first\n    difference1 = 6 - 3  # Difference between the second and the first term\n    difference2 = 10 - 6  # Difference between the third and the second term\n    difference3 = 15 - 10  # Difference between the fourth and the third term\n\n    # Then calculate the differences of differences\n    second_difference1 = difference2 - difference1  # Difference of difference between term 2 and term 1\n    second_difference2 = difference3 - difference2  # Difference of difference between term 3 and term 2\n\n    # Assuming the sequence follows a pattern, second differences should be equal\n    # Calculate the next difference based on the pattern\n    next_difference = difference3 + (second_difference2)\n    \n    # Calculate the next number in the sequence by adding the next difference to the last known term\n    next_number = 15 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    oil_poured_out = 5\n    remaining_oil = total_volume - oil_poured_out\n    tanks = 6\n\n    volume_per_tank = remaining_oil / tanks\n    \n    return volume_per_tank\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    equation = Eq((2 / 5) * (money - (1 / 6) * money - 5) - 12, 24)\n\n    ans = solve(equation, money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    grandpa_current_age = 72\n    johnny_current_age = 8\n\n    grandpa_future_age = grandpa_current_age + years\n    johnny_future_age = johnny_current_age + years\n\n    equation = Eq(grandpa_future_age, 5 * johnny_future_age)\n\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    bud_position = pip_position + children_between + 1\n    total_children = bud_position + bud_position_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Alan and Bob's cards\n    alan, bob = symbols('alan bob')\n\n    # We know that initially, Bob has 15 more cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards, and then Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    # Calculate rate based on compounded interest formula A = P(1 + r/n)**(nt)\n    # Here, n = 1 because it's compounded annually.\n    # We need to solve for r in P(1 + r)**t = A\n    rate = (amount / principal) ** (1 / years) - 1\n\n    # Convert to percentage and round to nearest tenth\n    rate_percentage = round(rate * 100, 1)\n\n    return rate_percentage\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of the first n odd numbers is n^2\n    # Melvin selects all odd numbers from 1 to 50\n    # There are 25 odd numbers between 1 and 50. (50 // 2)\n    melvin_sum = (50 // 2) ** 2\n\n    # Sum of the first n even numbers is n * (n + 1)\n    # Monica selects all even numbers from 1 to 50\n    # There are 25 even numbers between 1 and 50. (50 // 2)\n    monica_sum = (50 // 2) * (50 // 2 + 1)\n\n    # Difference between Monica's and Melvin's sums\n    difference = monica_sum - melvin_sum\n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    m, n, x = symbols('m n x')\n\n    # Given x~Δ~9=37, we set up the equation 5x + 3*9 = 37\n    equation = Eq(5*x + 3*9, 37)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # She takes out three balls of different colors first\n    ball_count_to_ensure_one_colour = 3  # worst case: 1 of each of the 3 colors\n\n    # In the worst case, she continues to take out balls of the other two colors without getting 4 of the same color\n    # Since there are 4 orange balls, she can take all of them without getting 4 of the same color\n    ball_count_to_ensure_one_colour += 4\n\n    # Now, in order to ensure that she gets 4 of the same color,\n    # she must take out one more ball. This is because,\n    # at this point, if she does not have 4 balls of blue or orange,\n    # she must have 3 of each and 2 yellow, so she will get 4 of some color with one more ball.\n    ball_count_to_ensure_one_colour += 1\n\n    return ball_count_to_ensure_one_colour\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Number of oranges given at 20 per elderly\n    oranges_at_20 = 20 * (x - 10)\n    \n    # Number of oranges given at 16 per elderly which gives 25 boxes of 24 oranges\n    oranges_at_16 = 16 * x\n    total_oranges = 25 * 24\n    \n    # Set up the equation such that both scenarios equal the same total oranges\n    # Simplify the equation to x = total_oranges / 16 = oranges_at_20\n    x = total_oranges // 16\n    \n    # Substitute x back into the first scenario\n    oranges_at_20 = 20 * (x - 10)\n    \n    # Now, we need to find out the greatest common divisor to distribute the oranges equally\n    from math import gcd\n    total_elderly = x\n    gcd_value = gcd(oranges_at_20, total_elderly)\n    \n    # The number of oranges each elderly should get so that all oranges are distributed\n    oranges_per_elderly = oranges_at_20 // gcd_value\n    \n    return oranges_per_elderly\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1 / 5\n    remaining_weight = 27\n\n    soil_removed_weight = full_weight * removed_soil_fraction\n    empty_wheel_barrow_weight = full_weight - soil_removed_weight - (full_weight - remaining_weight)\n\n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    return solutions[tim] + solutions[tyler]\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of vanilla cupcakes be v\n    # Then, the number of chocolate cupcakes is v + 72\n    # And the number of blueberry cupcakes is v - 36\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling, Sally is left with 427 cupcakes in total\n    leftover_total = Eq(5/6 * chocolate + 1/3 * vanilla + 2/9 * blueberry, 427)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, leftover_total), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] * 1/6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n\n    interval_a = 24\n    interval_b = 30\n\n    least_common_multiple = lcm(interval_a, interval_b)\n\n    hours_passed = least_common_multiple // 60\n    minutes_passed = least_common_multiple % 60\n\n    hours = 9 + hours_passed\n    minutes = minutes_passed\n\n    # Adjust for if the hours exceed 24, we use 24-hour time format\n    hours %= 24\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red_initial, white_initial, red_added_by_pip, white_added_by_bud = symbols('red_initial white_initial red_added_by_pip white_added_by_bud')\n\n    equation1 = Eq(red_initial / white_initial, 3 / 2)\n    equation2 = Eq((red_initial + red_added_by_pip) / white_initial, 5 / 3)\n    equation3 = Eq((red_initial + red_added_by_pip) / (white_initial + white_added_by_bud), 5 / 4)\n    equation4 = Eq(white_added_by_bud, red_added_by_pip + 100)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_added_by_pip, white_added_by_bud))\n\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # a divided by 8 has a remainder 6\n    # b divided by 8 has a remainder 7\n    # (a + b) divided by 8 remainder is (remainder a + remainder b) % 8\n    remainder_a = 6\n    remainder_b = 7\n    remainder_sum = (remainder_a + remainder_b) % 8\n    \n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Since Jessica sits in front of Judy, there's 1 desk (Jessica's)\n    \n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for number in range(2, 57):\n        count += str(number).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    george, agnes, jack = symbols('george agnes jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (george, agnes, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the average weight before Aaron joined\n    # Let n be the number of people in the group before Aaron joined\n    \n    # From the first condition after Aaron joined the group\n    # (nx + 45) / (n + 1) = 61\n    \n    # From the second condition after Ben joined the group\n    # (nx + 45 + 71) / (n + 2) = 62\n    \n    # We have two equations to solve:\n    # nx + 45 = 61(n + 1)\n    # nx + 45 + 71 = 62(n + 2)\n    \n    # Simplify both equations:\n    # nx + 45 = 61n + 61\n    # nx + 116 = 62n + 124\n    \n    # Solve the two equations for n and x\n    from sympy import symbols, Eq, solve\n    \n    n, x = symbols('n x')\n    equation1 = Eq(n*x + 45, 61*(n + 1))\n    equation2 = Eq(n*x + 116, 62*(n + 2))\n\n    solutions = solve((equation1, equation2), (n, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 0\n\n    while total_taken < 2989:\n        # Take out two balls\n        total_taken += 2\n        # Case 1: If both are white, put back one black\n        if white_balls > 1:\n            white_balls -= 2\n            black_balls += 1\n        # Case 2: One white and one black, put back the white\n        else:\n            white_balls -= 1\n            black_balls -= 1\n            white_balls += 1\n\n    remaining_balls = white_balls + black_balls\n\n    return {'remaining_balls': remaining_balls, 'color': 'white' if white_balls > black_balls else 'black'}\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        if a == 0 or c == 0:  # leading zero check\n            continue\n        num1 = a * 1000 + b * 100 + b * 10 + c\n        num2 = c * 10 + e\n        product = num1 * num2\n        if product >= 100000 and product <= 999999:\n            str_product = str(product)\n            if (str_product[1] == str_product[2] == str(b) and\n                str_product[-2] == str(d) and \n                str_product[-1] == str(e)):\n                return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work_rate_per_person = 1 / (initial_people * initial_hours)\n    total_work_required = 1 / work_rate_per_person\n\n    needed_people = total_work_required / target_hours\n\n    return needed_people\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_first_n_numbers = (n * (n + 1)) // 2\n\n    return sum_of_first_n_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    # since 1 metre = 100 centimetres\n    n = 2.1 * 100\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice_per_glass = 1.50\n\n    total_spent = sweets + magazine + stickers + pizza + (4 * orange_juice_per_glass)\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    # Initialize the count to zero.\n    count = 0\n    \n    # Since the question asks for sums of two or more non-zero natural numbers,\n    # we need to iterate and check all possible combinations of two or more numbers.\n    # We start with the smallest case, two numbers, and go up to the largest case, \n    # which is four numbers (since 1+1+1+2=5), but we will be counting distinct sums,\n    # so we won't consider combinations like 1+1+1+2.\n    # For two numbers:\n    count += 1  # This is for the combination (4+1).\n    # For three or more numbers, the only possible combinations are:\n    # Note: (2+1+1+1) is not considered different from (1+1+1+2) in this context.\n    count += 1  # This is for the combination (3+2).\n    \n    # No partitions into more than three numbers are possible as we would end \n    # up with (1+1+1+1+1)=5 for five numbers which has been excluded as per the question.\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):  # since it's a 3-digit number, hundreds digit can't be 0\n        units_digit = hundreds_digit + 2  # hundreds digit should be two less than the units digit\n        if units_digit <= 9:  # units digit must be a valid digit (0-9)\n            for tens_digit in range(0, 10):  # tens digit can be anything from 0 to 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    total_mass = 91.2\n    ratio = 3\n\n    daughter_mass = total_mass / (ratio + 1)\n    mr_han_mass = ratio * daughter_mass\n\n    return mr_han_mass\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    original_chocolates = remaining_after_students / (1 - 0.8)\n    return int(original_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i + 1) ** 2 - i ** 2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # According to the pigeonhole principle, in order for Samantha to have more votes\n    # than anyone else, she needs to have at least one more vote than half of the total\n    # number of votes cast, so that it is not possible for another student to have the\n    # same number of votes.\n    \n    total_votes = 25\n    # Taking the half of the total votes and adding 1 to ensure she has more than the others\n    least_votes_for_majority = (total_votes // 2) + 1\n    \n    return least_votes_for_majority\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                totals.add(i + j + k)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    principal = 6000  # initial amount\n    amount = 8029.35  # final amount\n    years = 5\n\n    # Compound interest formula A = P * (1 + r/n)^(nt)\n    # Since interest is compounded annually, n = 1.\n    # Therefore, the equation simplifies to A = P * (1 + r)^t\n    equation = Eq(principal * (1 + x/100)**years, amount)\n\n    interest_rate = solve(equation, x)\n    return interest_rate[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    current_page_digits = 1\n    \n    while digits_used < 291:\n        pages += 1\n        digits_used += current_page_digits\n        if pages == 10 or pages == 100:\n            current_page_digits += 1\n    \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g_conversion_factor = 1000\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * kg_to_g_conversion_factor\n    return weight_in_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, not_read = symbols('read not_read')\n\n    # initial ratio of pages\n    equation1 = Eq(read, not_read / 5)\n    # after reading 80 more pages, she has read 70% of the total pages\n    equation2 = Eq(read + 80, 0.7 * (read + not_read))\n\n    solutions = solve((equation1, equation2), (read, not_read))\n\n    # total number of pages in the magazine\n    total_pages = solutions[read] + solutions[not_read]\n\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let's denote Vivi's score as v and CC's score as c.\n    # Since Vivi got 15 more points than CC, we have v = c + 15.\n    # Together they got 95 points, so v + c = 95.\n    # They each answered 10 questions. Let x be the number of correct answers CC got.\n    # Then CC's score is 10x - 5(10 - x) because for each incorrect answer CC loses 5 points.\n    # We can substitute v = c + 15 into v + c = 95 to find c.\n    # 10x - 5(10 - x) + 15 + 10x - 5(10 - x) = 95\n    # Simplify the equation:\n    # 20x - 50 + 10x = 110\n    # 30x = 160\n    # x = 160 / 30\n    # x = 5.333, but x must be an integer because you can't answer a fraction of a question.\n    # Therefore, round down to the nearest whole number.\n    x = 160 // 30 \n\n    return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return float(solutions[magazine])\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 6 // 2\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_needed_per_person = 650 / 15\n    flour_needed_for_18_people = flour_needed_per_person * 18\n    return flour_needed_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    adults = 2\n    children = 3\n\n    total_cost = (adults * adult_ticket_price) + (children * child_ticket_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    number = '2581953752'\n    \n    # Generate all possible unique combinations of indices for two cuts\n    cut_positions = list(combinations(range(1, len(number)), 2))\n    \n    min_sum = float('inf')  # Initialize minimum sum to infinity\n    for cut in cut_positions:\n        # Cut the number on selected positions and convert to integers\n        part1 = int(number[:cut[0]])\n        part2 = int(number[cut[0]:cut[1]])\n        part3 = int(number[cut[1]:])\n\n        # Calculate the sum of the parts\n        current_sum = part1 + part2 + part3\n        # Update minimum sum if the current sum is smaller\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n\n    # original equation x + y = 11.63\n    original_eq = Eq(x + y, 11.63)\n\n    # Oliver's mistake x + y/10 = 5.87\n    mistake_eq = Eq(x + (y / 10), 5.87)\n\n    # solve the system of equations\n    solutions = solve((original_eq, mistake_eq), (x, y))\n\n    x_value = solutions[x]\n    y_value = solutions[y]\n\n    # calculate the difference and multiply by 100\n    difference = abs(x_value - y_value) * 100\n\n    return difference\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    \n    meters = 7000000 / mm_to_m_conversion_factor\n    \n    return meters\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = (smallest_divisor * quotient) + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    total_sides = 4\n    flowers_per_side = 6\n    corner_flowers = 4\n    \n    # Each corner flower is shared by two sides, so we subtract the corner flowers \n    # once to make sure they are not counted twice.\n    total_flowers = (flowers_per_side * total_sides) - (corner_flowers)\n    \n    return total_flowers\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n    \n    # Melissa's age when she was 8\n    melissa_age_then = 8\n    # Melissa's mother's age when Melissa was 8\n    mother_age_then = 32\n    \n    # The difference in years between then and now\n    years_passed = melissa_age_now - melissa_age_then\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation1 = Eq(mother_age_now, 3 * melissa_age_now)\n    # The years passed are the same for both Melissa and her mother\n    equation2 = Eq(mother_age_now, mother_age_then + years_passed)\n    \n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of members in each club\n    science, literature, math = symbols('science literature math')\n    \n    # Equations based on the given ratios\n    equation1 = Eq(science / literature, 9 / 10)\n    equation2 = Eq(literature / math, 5 / 7)\n    \n    # Equation based on the total number of members\n    equation3 = Eq(science + literature + math, 99)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n    \n    # Calculate the difference in members between the math and literature clubs\n    diff = solutions[math] - solutions[literature]\n    \n    return diff\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Since we need to make sure to get 3 marbles of the same colour,\n    # we consider the worst-case scenario using the Pigeonhole Principle.\n    # We take the maximum number of marbles of each colour without getting 3 of a kind,\n    # and then add one more to ensure the next marble will result in 3 of a kind.\n    max_blue_without_3_of_a_kind = 2\n    max_yellow_without_3_of_a_kind = 2\n    # There is only 1 red marble, so we can't take 2 without already having a third of another color.\n    # All marbles taken must be of different colors, so we add only 1 for the red.\n    red_marble = 1\n\n    # By summing up the marbles taken so far, we have 2 blue, 2 yellow, and 1 red,\n    # which guarantees that the next marble we take will make 3 of the same colour.\n    marbles_needed = max_blue_without_3_of_a_kind + max_yellow_without_3_of_a_kind + red_marble + 1\n\n    return marbles_needed\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    total_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = total_length - piece1 - piece2\n\n    longest_piece = max(piece1, piece2, piece3)\n    shortest_piece = min(piece1, piece2, piece3)\n\n    difference = longest_piece - shortest_piece\n\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, v = symbols('b v')  # b represents the price of a basketball and v represents the price of a volleyball\n    equation1 = Eq(5*b + 6*v, 325)  # The total cost equation\n    equation2 = Eq(b, v + 10)  # The price relationship between a basketball and a volleyball\n\n    solutions = solve((equation1, equation2), (b, v))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    full_pattern_rep = 47 // len(pattern)\n    remaining_digits = 47 % len(pattern)\n    full_pattern_sum = sum(int(digit) for digit in pattern) * full_pattern_rep\n    partial_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n    ans = full_pattern_sum + partial_pattern_sum\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_of_six_bottles = 2.52\n    cost_per_bottle = cost_of_six_bottles / 6\n    cost_of_nine_bottles = cost_per_bottle * 9\n    return cost_of_nine_bottles\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # The book costs 1/3 of the total amount, so the bag costs 1/2 of the remainder (2/3)\n    # Let x be the total amount she had initially. The book costs x/3 and the bag costs (x/3)*1/2 = x/6\n    # x/3 + x/6 = 132\n    # Combining fractions, we get (2x/6 + x/6) = 132\n    # This simplifies to 3x/6 = 132\n    # Therefore, x/2 = 132 and x = 264 is the total amount\n\n    # Thomas' mistake was in combining fractions of different parts of the total amount, not accounting for the remainder after the book was bought.\n    return 264\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be in the range 1 to 9 since it's the tens digit\n        for b in range(0, 10):  # 'b' must be in the range 0 to 9 since it's the unit digit\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    # Let b be the number of boys in the class\n    # Let g be the number of girls in the class\n    # Total number of pupils in the class is given as 40, so b + g = 40\n    # Total number of pencils owned by the boys is 20 * b\n    # Total number of pencils owned by the girls is 60 * g\n    # Average number of pencils is (total pencils) / (total pupils) = 35\n    # So, (20 * b + 60 * g) / (b + g) = 35\n    # We solve these two equations to find the number of boys (b)\n    \n    from sympy import symbols, Eq, solve\n    \n    b, g = symbols('b g')\n    equation1 = Eq(b + g, 40)\n    equation2 = Eq((20 * b + 60 * g) / (b + g), 35)\n    \n    solutions = solve((equation1, equation2), (b, g))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_questions = 25\n    score = 61\n    max_correct_answers = score // 4\n    jack_unanswered = None\n\n    for correct_jack in range(max_correct_answers + 1):\n        incorrect_jack = total_questions - correct_jack - (score - (correct_jack * 4))\n        if correct_jack * 4 - incorrect_jack == score:\n            for correct_johnson in range(correct_jack):\n                incorrect_johnson = total_questions - correct_johnson - (score - (correct_johnson * 4))\n                if correct_johnson * 4 - incorrect_johnson == score:\n                    jack_unanswered = total_questions - correct_jack - incorrect_jack\n                    return jack_unanswered\n    return jack_unanswered\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Initialize variables for cost calculation\n    standard_price = 4.50\n    discount_price = standard_price * 0.80  # 20% discount\n    shipping_handling = 12\n    total_bill = 120\n\n    # Check for the breakpoint of 20 cupcakes\n    cupcakes_at_standard_price = 20\n    cost_for_20_cupcakes = (cupcakes_at_standard_price * standard_price) + shipping_handling\n    \n    if total_bill <= cost_for_20_cupcakes:\n        # Total bill is within the first 20 cupcakes\n        # Remove shipping and handling then divide by standard price\n        ans = (total_bill - shipping_handling) // standard_price\n    else:\n        # Total includes discounted cupcakes\n        # Calculate how many discounted cupcakes were bought\n        ans = cupcakes_at_standard_price + (total_bill - cost_for_20_cupcakes) / discount_price\n\n    return int(ans)\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pence = 128 + 57\n    ans = total_pence / 100\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = solutions[pigs] * 5 + solutions[goats] * 5\n\n    return total_cost\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    A_value = solve(equation, A)\n\n    return A_value[0]\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lazy, energetic = symbols('lazy energetic')\n    \n    # 1/lazy + 1/energetic = 1/6 (Combined work per day)\n    equation1 = Eq(1/lazy + 1/10, 1/6)\n    solutions = solve(equation1, lazy)\n    \n    return solutions[lazy]\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number\n    original_number = symbols('original_number')\n\n    # Create the equation based on the problem statement\n    equation = Eq((original_number + 45) / 3, original_number * 2)\n\n    # Solve the equation for the original number\n    solution = solve(equation, original_number)\n\n    # Return the solution as the original number John thought of\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_difference = 42\n    years_later = 2\n\n    john_age_later = john_age_now + years_later\n    grandmother_age_now = john_age_now + grandmother_age_difference\n    grandmother_age_later = grandmother_age_now + years_later\n\n    total_age_later = john_age_later + grandmother_age_later\n\n    return total_age_later\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    return -2 + 9\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother must have at least two books, we begin our\n    # distribution with 2 books for each, leaving 4 books to distribute.\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            x3 = 10 - (x1 + x2)\n            if x3 >= 2 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Calculate as if we're having the worst case scenario every time we pick a marble.\n    # If 1 of each color is picked every time, 3 marbles would all be same color (worst case).\n    # So, pick 3 red, then 3 blue, then 3 yellow, only then we are sure to have 4 different colors.\n    \n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n\n    # Worst case we have to pick all of one color first\n    green_pick = green  # We have to pick all the green ones since they are the least.\n\n    # Then we pick 3 of the other colors to ensure we get three different colors\n    three_others = 3\n\n    # Finally, one more marble to ensure we have the fourth color\n    one_more_for_fourth = 1\n\n    # Total calculation\n    total_picks = green_pick + three_others * 3 + one_more_for_fourth\n\n    return total_picks\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_per_day = 40\n    fraction_of_book = 1 / 5\n\n    total_pages = pages_per_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Calculate the value of the number without the middle digit\n    number_without_middle_digit = int('5' * 19 + '9' * 19)\n    \n    # Check for divisible by 7 by finding a digit that makes it divisible\n    for i in range(10):\n        number_with_middle_digit = int('5' * 19 + str(i) + '9' * 19)\n        if number_with_middle_digit % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first_digit = 10  # Smallest two-digit number with unit digit 6\n    last_digit = 96   # Largest two-digit number with unit digit 6\n    step = 10         # Step between consecutive numbers with unit digit 6\n\n    # Calculate number of two-digit numbers with unit digit 6\n    count = ((last_digit - first_digit) // step) + 1\n\n    return count\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    last_child_height = 131\n    tom_position = 10\n    \n    # Since Tom is the 10th in line and the last (31st) child is 131 cm tall,\n    # the maximum height for Tom would be when the 21 children after him \n    # have the consecutive heights from 110 cm to 130 cm.\n    max_tom_height = last_child_height - (31 - tom_position)\n    \n    return max_tom_height\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n\n    for i in range(3, 2023):\n        a, b = b, a + b\n        a %= 3  # Only remainder is relevant, so we can reduce them after each step\n        b %= 3\n    \n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    # Total people = People in front + Rose + People behind\n    total_people = people_in_front + 1 + (position_from_back - 1)\n    return total_people\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    solution = solve(equation, magic_number)\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Start with a reasonable number of students that satisfies the first condition.\n    students = 3\n    # Loop until we find a number of students that satisfies both conditions.\n    while True:\n        if (students * 5 + 3) % 4 == 9 % 4:\n            return students\n        students += 1\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan, chloe + 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n    \n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    quantity_bars = 2\n    note_value = 20\n\n    total_cost = box_price + (bar_price * quantity_bars)\n    change = note_value - total_cost\n\n    return round(change, 2)  # Round to two decimal places to represent money accurately\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Lily has a fixed position on the left end, and her mother has a fixed position on the right end.\n    # That leaves 3 spaces for the other family members to line up.\n    \n    from math import factorial\n\n    # The number of ways to arrange the other 3 family members\n    ways_to_arrange = factorial(3)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n    # the number of terms (rows) can be calculated based on the formula of arithmetic sequence:\n    # last_term = first_term + (num_rows - 1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n    # sum of arithmetic sequence: (n/2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n\n    children_fraction = 3/5\n    men_fraction = 1/2\n\n    children = children_fraction * visitors\n    remaining = visitors - children\n    men = men_fraction * remaining\n\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible permutations of the digits 1 to 8\n    perms = list(permutations(range(1, 9), 2))\n    # Filter out all 2-digit numbers where the tens digit is not twice the ones digit\n    smallest_numbers = [10 * x[0] + x[1] for x in perms if x[1] == 2 * x[0]]\n    # Filter out all 2-digit numbers where the sum of the digits is not 9\n    largest_numbers = [10 * x[0] + x[1] for x in perms if x[0] + x[1] == 9]\n    # Filter out all 2-digit numbers where the tens digit is not 5 more than the ones digit\n    second_largest_numbers = [10 * x[0] + x[1] for x in perms if x[0] == 5 + x[1]]\n    # Filter out all permutations to only include odd numbers\n    odd_numbers = [10 * x[0] + x[1] for x in perms if (10 * x[0] + x[1]) % 2 != 0]\n\n    # The final four numbers must be unique and must include numbers that fit all the criteria\n    final_numbers = set(smallest_numbers + largest_numbers + second_largest_numbers + odd_numbers)\n\n    # Now we need to find the four unique numbers that meet all the criteria\n    for perm in permutations(final_numbers, 4):\n        # The second element is the second smallest number and is the number we need to return\n        # So we sort the permutation and check if our conditions hold\n        perm_sorted = sorted(perm)\n        if (perm_sorted[0] in smallest_numbers and\n            perm_sorted[3] in largest_numbers and\n            perm_sorted[2] in second_largest_numbers and\n            len([num for num in perm_sorted if num in odd_numbers]) == 1):\n            return perm_sorted[1]  # Return the second smallest number\n        \n    return None  # If no solution is found, return None\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Initial average and the total sum for three numbers\n    initial_average = 120\n    total_sum_initial = initial_average * 3\n    \n    # New average and the total sum after adding the fourth number\n    new_average = 150\n    total_sum_new = new_average * 4\n    \n    # Calculate the fourth number\n    fourth_number = total_sum_new - total_sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Sam's stickers = Peter's stickers + 40\n    # After giving, Sam's stickers = Sam's original stickers - 20% + 25% of Peter's new stickers\n    # After giving, Peter's stickers = Peter's original stickers + 20% of Sam's original stickers - 25%\n    # Final count, Sam has 96 stickers more than Peter\n    sam, peter = symbols('sam peter')\n\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - sam * 0.2 + (peter + sam * 0.2) * 0.25, peter + sam * 0.2 - (peter + sam * 0.2) * 0.25 + 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    # Using the sum of squares formula: sum = 1/6 * n * (n+1) * (2n+1)\n    # We need to subtract the squares from 1^2 to 4^2 as we start summing from 5^2\n    sum_to_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_to_4 = (4 * (4 + 1) * (2 * 4 + 1)) // 6\n    sum_from_5_to_n = sum_to_n - sum_to_4\n    return sum_from_5_to_n\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let Anthea initially have 'a' storybooks.\n    # Jason has 30 storybooks.\n    # After giving 4 books to Anthea, Jason has (30 - 4) books.\n    # After receiving 4 books, Anthea has (a + 4) books.\n    \n    # Both will have the same number of storybooks, so\n    # 30 - 4 = a + 4\n    \n    # Solve for 'a':\n    a = (30 - 4) - 4\n    \n    # The difference between Jason and Anthea at first is:\n    difference = 30 - a\n    \n    return difference\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sally's and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n    \n    # Create the two equations based on the problem\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n    \n    # Solve the system of equations for both persons' ages\n    ages = solve((equation1, equation2), (sally, gillian))\n    \n    # Return Sally's current age\n    return ages[sally]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable representing the initial amount of money Amy had\n    original_amount = symbols('original_amount')\n    \n    # After spending 6/11 of her money and an additional 5, the remaining money is:\n    # original_amount - (6/11)*original_amount - 5\n    remaining_after_highlighters = original_amount - (6/11)*original_amount - 5\n    \n    # After spending 3/10 of the remainder and an additional 12, the remaining money is:\n    # remaining_after_highlighters - (3/10)*remaining_after_highlighters - 12\n    remaining_after_pens = remaining_after_highlighters - (3/10)*remaining_after_highlighters - 12\n    \n    # We know that she has 30 left, so we set up the equation as:\n    # remaining_after_pens = 30\n    equation = Eq(remaining_after_pens, 30)\n    \n    # Solve the equation to find the original amount\n    solution_original_amount = solve(equation, original_amount)\n    \n    # Return the solution\n    return solution_original_amount[0]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n\n    # Find the minuend\n    minuend = incorrect_result + incorrect_subtrahend\n\n    correct_subtrahend = 75\n\n    # Find the correct result\n    correct_result = minuend - correct_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    # The LCM (Least Common Multiple) of 3 and 4 will give us the interval at which customers receive both a pen and a file.\n    lcm_of_3_and_4 = 12  # Because 3 * 4 = 12 and they have no common factors other than 1.\n\n    # Now we count how many multiples of 12 are there in the range 1 to 40.\n    ans = 40 // lcm_of_3_and_4\n\n    return ans\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_minutes = 20\n    lily_minutes = hook_minutes - 5\n    return lily_minutes\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_cake = 4\n    apples_per_kg = 9\n    total_kg = 8\n    \n    total_apples = total_kg * apples_per_kg\n    cakes_baked = total_apples // apples_per_cake\n    \n    return cakes_baked\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    return 35 * 9\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5  # in meters\n    number_of_seeds = 12\n\n    # Since seeds are equally spaced along the circumference,\n    # the total distance covered by all seeds will be the circumference of the circle.\n    circumference = distance_between_seeds * number_of_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    cut_pieces = final_pieces - original_pieces\n    pieces_cut_into_three = cut_pieces // 2\n\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_participants = 12 + 8\n    average_all = 14\n    average_boys = 10\n    boys_scores = 12 * average_boys\n\n    total_scores = total_participants * average_all\n    girls_scores = total_scores - boys_scores\n    average_girls = girls_scores / 8\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 1000):  # assuming the number of students is less than 1000\n        if (n + 9) == (int((n + 9) ** 0.5) ** 2) and ((n + 9) + 16) == (((int((n + 9) ** 0.5) + 1) ** 2)):\n            return n\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies baked initially\n    x = symbols('x')\n    \n    # Equation representing the problem\n    cookies_burnt = 3/5 * x\n    cookies_remaining = x - cookies_burnt\n    cookies_sold = 3/4 * cookies_remaining\n    equation = Eq(cookies_burnt, cookies_sold + 42)\n\n    # Solve the equation\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    cost_per_250g = (cost_per_100g / 100) * 250\n    return cost_per_250g\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initial division is into 5 envelopes\n    envelopes_initial = 5\n    postcards_initial = 50\n    # Postcards per envelope after the initial division\n    postcards_per_envelope = postcards_initial // envelopes_initial\n    \n    # Later division is into 2 envelopes\n    envelopes_later = 2\n    \n    # Since each envelope contains the same number of postcards, we multiply the number of\n    # postcards per envelope by the new total number of envelopes to find the total number of postcards\n    total_envelopes = envelopes_initial + envelopes_later\n    total_postcards = total_envelopes * postcards_per_envelope\n    \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Available coin values in pounds\n    coin_values = [1.0, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n    # Iterate through the available coin values\n    for coin in coin_values:\n        # Determine the number of coins of the current denomination in the change\n        num_coins = int(2.50 / coin)\n        \n        # If the number of coins is even, then for each coin there is exactly one other coin of the same value\n        if num_coins % 2 == 0:\n            ans = coin\n            # Return the value of the smallest coin that meets the condition\n            return ans\n      \nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 - 2**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    \n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (int(f\"107{y}\") % 6) == 0:\n            return y\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Loop through the possible numbers based on the constraints\n    # Unit place has a 9, and the result should be 4 times the original number\n    for i in range(1, 1000000):  # let's consider numbers with less than a million digits\n        spec_num = int(str(i) + '9')\n        # put the 9 at the beginning of the number\n        new_num = int('9' + str(i))\n        # Check if the new number is four times the special number\n        if new_num == 4 * spec_num:\n            return spec_num\n\n# Store the result in variable ans\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    \n    concentration = (sugar_weight / total_solution_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def new_operation(a, b):\n        return (a + b) * a\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    jerry_portion = 3/7\n    kevin_speed = 80\n    jerry_speed_fraction = 2/5\n\n    # Kevin and Jerry meet at the same time, so the time is the same for both.\n    # Since Jerry travels 3/7 of the road and Kevin travels 4/7 (the rest) of the road,\n    # Their speeds are proportional to the distances traveled.\n    # Kevin_speed / Jerry_speed = (4/7 road) / (3/7 road) = 4/3\n    # We know that Jerry_speed = jerry_speed_fraction * road_length\n    kevin_to_jerry_speed_ratio = 4/3\n\n    # Calculate Jerry's speed using the proportion with Kevin's speed \n    jerry_speed = kevin_speed / kevin_to_jerry_speed_ratio\n\n    # Jerry's speed is 2/5 of the road length per hour, solve for road length\n    road_length = jerry_speed / jerry_speed_fraction\n\n    return road_length\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # There are 6 students in total (including Laura and Rita)\n    total_students = 6\n\n    # Laura must stand in the front, so there's only one choice for her.\n    laura_choices = 1\n\n    # There are 5 positions remaining, and Rita can't stand at the end,\n    # so she has 4 choices (any position except the last one).\n    rita_choices = 4\n\n    # The remaining 4 students (excluding Laura and Rita) can be arranged\n    # in any order in the remaining 4 positions.\n    other_students_choices = factorial(4)\n\n    # Total number of ways to form the line\n    total_ways = laura_choices * rita_choices * other_students_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    first_discount = 0.5\n    additional_discount = 0.2\n    \n    # Apply the first discount\n    discounted_price = regular_total_price * (1 - first_discount)\n    \n    # Apply the additional discount for buying at least 5 items\n    final_price = discounted_price * (1 - additional_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    # Jack sold 88 apples which is 4/7 of the total number of apples\n    sold_apples = 88\n    fraction = 4 / 7\n\n    # calculate the total number of apples brought today\n    total_apples = sold_apples / fraction\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq((20 * boys + 60 * girls) / 40, 35)\n\n    num_boys = solve(equation, boys)[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the departure and arrival times in their respective local times\n    departure_sg = datetime(2023, 8, 24, 5, 0)  # Singapore time\n    arrival_london = datetime(2023, 8, 24, 11, 0)  # London time\n\n    # Calculate the time difference between Singapore and London\n    time_diff = timedelta(hours=7)\n\n    # Convert the arrival time to Singapore time by adding the time difference\n    arrival_sg = arrival_london + time_diff\n\n    # Calculate the duration of the flight\n    duration = arrival_sg - departure_sg\n\n    return duration.total_seconds() / 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability that Sally wins a game\n    p_win = 0.3\n    # Probability that Sally draws a game\n    p_draw = 0.1\n    # Probability that Sally loses a game, which is 1 minus the probability of winning or drawing\n    p_lose = 1 - p_win - p_draw\n\n    # The probability that Sally wins exactly one of the two games is the sum of two scenarios:\n    # 1. Sally wins the first game and does not win the second game (draws or loses)\n    # 2. Sally does not win the first game (draws or loses) and wins the second game\n    prob_win_one_game = (p_win * (p_draw + p_lose)) + ((p_draw + p_lose) * p_win)\n\n    return prob_win_one_game\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = 1 / 13\n    # obtain a recurring cycle of the decimal part\n    decimal_str = format(decimal, '.2999f')[2:]\n    cycle = decimal_str[:len(decimal_str)-1]\n    cycle_length = len(cycle)\n    # find the digit in the 2012th decimal place\n    position = (2012 - 1) % cycle_length\n    ans = int(cycle[position])\n    return ans\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for i in range(32, 1000, 4):  # Start from 32, as we have 32 lollipops left when putting 4 in each box\n        if (i - 32) % 4 == 0 and (i - 3) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Calculate the greatest common divisor of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # Since D is the greatest divisor of the differences, we assign it to gcd_diff\n    D = gcd_diff\n\n    # The remainder R would be 2010 % D (which is the same as 2377 % D or 3111 % D)\n    R = 2010 % D\n\n    # The largest possible value of D + R\n    return D + R\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi/wiya, 8/7)\n    equation2 = Eq((eddi - 4)/(wiya + 4), 18/17)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - (piece1 + piece2)\n\n    return piece3\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let's assume the number of students in class B is x. \n    # Then, the number of students in class A would be x + 47. \n    # Suppose we move y students from class A to class B, we get the following equations: \n    # New number of students in class A = (x + 47) - y\n    # New number of students in class B = x + y\n    # According to the problem, class A should have 9 more students than class B after the transfer:\n    # (x + 47 - y) - (x + y) = 9\n    # Simplifying the above equation gives us x + 47 - y - x - y = 9 \n    # which further simplifies to -2y = -38 \n    # Solving the equation for y gives us y = 38 / 2 = 19\n    # This means 19 students need to be moved from class A to class B.\n    return 19\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    max_product = 0\n\n    for combination in combinations_with_replacement(range(1, 32), 3):\n        if sum(combination) == 31:\n            product = combination[0] * combination[1] * combination[2]\n            max_product = max(max_product, product)\n\n    return max_product\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + Fraction(7, 8)\n    num2 = 3 + Fraction(2, 3)\n    num3 = 2016.875\n    num4 = Fraction(11, 3)\n    num5 = 2017 + Fraction(1, 3)\n    num6 = 17\n    num7 = 3 + Fraction(23, 32)\n\n    # Calculate the numerator and denominator of the complex fraction\n    numerator = (num1 * num2 - num3 * num4)\n    denominator = (num5 - num3) * num6\n    \n    # Calculate the fraction\n    fraction = numerator / denominator\n\n    # Multiply by the mixed number\n    ans = fraction * num7\n\n    # Convert to a mixed number\n    mixed_num = ans.numerator // ans.denominator\n    frac_part = Fraction(ans.numerator % ans.denominator, ans.denominator)\n\n    # Return the final answer as a float\n    return float(mixed_num + frac_part)\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    return 5 * 7\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30  # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    start_delay = 10  # minutes\n\n    # Distance covered by both before the rabbit sleeps\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n    turtle_distance_before_sleep = turtle_speed * start_delay\n\n    # Time for the turtle to finish the race\n    turtle_race_time = (race_distance - turtle_distance_before_sleep) / turtle_speed\n\n    # Time for the rabbit to finish the race after it wakes up\n    rabbit_race_time_after_sleep = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n\n    # Total time for the rabbit to finish the race (running + sleeping)\n    rabbit_total_time = start_delay + rabbit_sleep_time + rabbit_race_time_after_sleep\n\n    # Determine the winner and the distance between them at the end of the race\n    if rabbit_total_time < turtle_race_time:\n        # Rabbit wins; calculate how far the turtle went in the time the rabbit finished\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n        winner = \"Rabbit\"\n    else:\n        # Turtle wins; calculate how far the rabbit went in the time the turtle finished\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + rabbit_speed * (turtle_race_time - (start_delay + rabbit_sleep_time))\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n        winner = \"Turtle\"\n\n    # Return the result as a tuple (winner, distance_between)\n    return winner, distance_between\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n    \n    total_people = Eq(boys + girls + adults, 480)\n    adults_double_boys = Eq(adults, 2 * boys)\n    girls_triple_boys = Eq(girls, 3 * boys)\n    \n    solutions = solve((total_people, adults_double_boys, girls_triple_boys), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Hundreds digit must be an odd number (1-9)\n        for j in range(10):  # Tens digit can be (0-9)\n            for k in range(10):  # Ones digit can be (0-9)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # According to the problem, we have two equations:\n    # y - x = 57 (difference between two numbers)\n    # x + y = 77 (sum of the numbers)\n\n    # From the first equation, we can express y in terms of x:\n    # y = x + 57\n\n    # Now substitute the value of y in the second equation:\n    # x + (x + 57) = 77\n    # 2x + 57 = 77\n\n    # Now, we solve for x to find the smaller number:\n    # 2x = 77 - 57\n    # 2x = 20\n    x = 20 // 2\n\n    return x\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # Each pair contains 2 avocados\n\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100  # Convert pounds to pence\n\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    outcomes = [0] * (6 + 6 + 1)  # Initialize counts for each possible score (2 to 12)\n    \n    # Loop through all outcomes of the two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            score = die1 + die2\n            outcomes[score] += 1\n    \n    # Find the score with the maximum number of outcomes\n    max_outcomes = max(outcomes)\n    most_likely_score = outcomes.index(max_outcomes)  # Get the score corresponding to the max count\n    \n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = total_average * 36\n    girls_score = girls_average * girls\n    boys_score = boys_average * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    total_heads = 28\n    total_legs = 88\n    # Assuming rhinos and deer to have four legs and ostriches to have two legs, let's denote:\n    # r - the number of rhinos\n    # d - the number of deer\n    # o - the number of ostriches\n    \n    # As per the conditions given:\n    # r = d (the number of rhinos is equal to the number of deer)\n    # r + d + o = total_heads (total number of heads is 28)\n    # 4r + 4d + 2o = total_legs (total number of legs is 88)\n    \n    # Since r = d, let's substitute d with r in our equations:\n    # r + r + o = 28\n    # 2r + o = 28 ... [Equation (1)]\n    \n    # 4r + 4r + 2o = 88 => 8r + 2o = 88\n    # 4r + o = 44 ... [Equation (2)]\n    \n    # Subtracting Equation (1) from Equation (2) to find r:\n    # (4r + o) - (2r + o) = 44 - 28\n    # 2r = 16\n    # r = 8\n    \n    rhinos = 16 / 2\n    return int(rhinos)\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square = 12\n    number_of_tables = 8\n    \n    # Each individual square table can seat 12 people, but\n    # when multiple square tables are combined in a row,\n    # the seating at the joint edges do not offer additional seats.\n    \n    # At the joints of the tables, we effectively lose two seats per joint.\n    # Since there are (number_of_tables - 1) joints,\n    # the number of lost seats is 2 * (number_of_tables - 1).\n\n    lost_seats = 2 * (number_of_tables - 1)\n    \n    # The maximum number of people is the sum of individuals seated at each table\n    # minus the lost seats from the joint edges.\n    max_people = (people_per_square * number_of_tables) - lost_seats\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's marbles\n    Andrew, Boris, Jeffery, Xavier = symbols('Andrew Boris Jeffery Xavier')\n\n    # Average of Boris, Jeffery and Xavier's marbles is their sum divided by 3\n    avg_BJX = (Boris + Jeffery + Xavier) / 3\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(Andrew, avg_BJX - 30)\n\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(Xavier, 3 * Andrew)\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2), (Andrew, Boris, Jeffery, Xavier))\n\n    # Sum of Jeffery and Boris' marbles\n    BJ_sum = solutions[Boris] + solutions[Jeffery]\n\n    return BJ_sum\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "from sympy import divisors, primerange\n\ndef solution():\n    count = 0\n    for prime in primerange(1, 10**6):  # Searching in a reasonable range\n        candidate = prime ** 14  # 15 factors means (e+1) = 15 where e is the exponent of the prime\n        if candidate % 15 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    ones_digit_32 = pow(32, 33, 10)\n    ones_digit_22 = pow(22, 29, 10)\n    ans = (ones_digit_32 - ones_digit_22) % 10\n    return ans\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_per_page = 0\n    pages = 0\n\n    for i in range(1, total_digits + 1):\n        if i < 10:\n            digits_per_page = 1  # pages 1-9\n        elif i < 100:\n            digits_per_page = 2  # pages 10-99\n        else:\n            digits_per_page = 3  # pages 100 and beyond\n\n        if total_digits < (pages + 1) * digits_per_page:\n            break\n        pages += 1\n        \n    return pages\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:15 AM\"\n    travel_duration_str = \"3:50\"\n\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    travel_duration = timedelta(hours=int(travel_duration_str.split(':')[0]), minutes=int(travel_duration_str.split(':')[1]))\n\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n\n    # A is a 2-digit number, B is a 4-digit number\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n\n            # Check if both A+B and A^2 + B^2 are multiples of 7\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                diff = B - A\n\n                # Keep track of the largest difference\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    for start_number in range(1, 13):\n        if (start_number + 30 - 1) % 12 == 10 - 1:  # Subtracted 1 to convert to 0-index\n            return start_number\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Given that 8 x 80 x 100 = 8^2 x Y\n    # We need to solve for Y\n    # First, express the multiplication as a power of 8\n    # 8 x 80 x 100 = 8^1 x (8 x 10) x (10 x 10)\n    # Now combine the like terms (powers of 8 and powers of 10)\n    # 8^1 x 8^1 x 10^1 x 10^2\n    # Using the law of exponents, we add the exponents for 8\n    # 8^(1+1) x 10^(1+2)\n    # Simplifying, we get:\n    Y = 10**(1+2)\n    # Thus, Y should be:\n    return Y\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # using sympy for solving the fractions\n    from sympy import symbols, Eq, solve\n\n    # define the variables\n    x, y, z = symbols('x y z')\n\n    # create the fraction as an equation equal to 2014/37 - 54\n    equation = Eq(1 / (x + 1 / (y + 1 / z)), 2014 / 37 - 54)\n\n    # solve the equation\n    solutions = solve((equation), (x, y, z))\n\n    # since we want x, y, z to be distinct integers, we loop through the solutions\n    for sol in solutions:\n        if isinstance(sol[0], int) and isinstance(sol[1], int) and isinstance(sol[2], int) and \\\n           len(set(sol)) == 3:  # check if all are integers and distinct\n            return sum(sol)\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    number_of_winners = 9\n\n    amount_per_person = total_jackpot / number_of_winners\n\n    return amount_per_person\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the oil sold from each bucket\n    oil_sold = symbols('oil_sold')\n\n    # Equation: After selling the same amount, big bucket has 12 times oil than small one.\n    equation = Eq(89 - oil_sold, 12 * (45 - oil_sold))\n\n    # Solve the equation\n    solution = solve(equation, oil_sold)\n\n    return solution[0]\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    \n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        else:\n            num += 1\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens including himself\n    num_aliens = 1 + 5\n    \n    # The alien and his brothers have 5 legs each, so they need 5 shoes each\n    shoes_per_alien = 5\n    shoes_cost_per_pack = 78\n    shoes_per_pack = 5\n    \n    # They also need 5 socks each (one for each foot), and socks come in pairs\n    socks_per_alien = 5\n    socks_cost_per_pair = 12\n    socks_per_pack = 2\n    \n    # Calculate total number of shoe packs needed\n    total_shoes_needed = (shoes_per_alien * num_aliens)\n    total_shoe_packs_needed = total_shoes_needed // shoes_per_pack if total_shoes_needed % shoes_per_pack == 0 else total_shoes_needed // shoes_per_pack + 1\n    \n    # Calculate total number of sock pairs needed\n    total_socks_needed = (socks_per_alien * num_aliens)\n    total_sock_pairs_needed = total_socks_needed // socks_per_pack if total_socks_needed % socks_per_pack == 0 else total_socks_needed // socks_per_pack + 1\n    \n    # Calculate total cost for shoes and socks\n    total_cost = (total_shoe_packs_needed * shoes_cost_per_pack) + (total_sock_pairs_needed * socks_cost_per_pair)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Given equations imply\n    a = 31 - 26\n    b = 26 - 20\n    c = 31 - 20\n\n    # Calculate the values of a, b, c\n    a = 31 - 26\n    b = 26 - 20\n    c = 31 - 20\n\n    # Since a, b, c are all prime numbers as per the question, \n    # we need to verify that the values we computed are indeed primes.\n    primes = list(primerange(1, 32)) # primes less than 32\n\n    # Calculate the product if all values are prime\n    if a in primes and b in primes and c in primes:\n        return a * b * c\n    else:\n        return \"One or more values are not prime\"\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Assume the distance between home and the park is d km\n    # Average speed going to the park is 5 km/h, time taken is d/5 hours\n    # Average speed coming back is 4 km/h, time taken is d/4 hours\n    # Total time taken is 54 minutes, which is 54/60 hours\n\n    # The total time taken for both trips is the sum of times\n    # (d/5) + (d/4) = 54/60\n    # Multiply through by 20 (LCM of 4 and 5) to clear denominators:\n    # 4d + 5d = 54/60 * 20\n    # 9d = 54/60 * 20\n    # d = (54/60 * 20) / 9\n    # d = (54 * 20) / (60 * 9)\n    \n    d = (54 * 20) / (60 * 9)\n    return d\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    ans = 0\n    num_people = 1\n    while True:\n        num_students = (num_people * 2)**2 - ((num_people-1) * 2)**2\n        num_teachers = ((num_people-1) * 2)**2 - ((num_people-2) * 2)**2\n        difference = num_students - num_teachers\n        \n        if difference == 52:\n            ans = (num_people * 2)**2\n            break\n        num_people += 1\n\n    return ans\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n    equation = Eq((3/4) * rennie, (2/3) * joleen)\n    relation = Eq(joleen, rennie + 5)\n\n    solutions = solve((equation, relation), (joleen, rennie))\n\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of girls be g and the number of boys be b.\n    # According to the problem, the total number of pupils is 26, so:\n    # g + b = 26\n    # The problem also states there are 8 more girls than boys:\n    # g = b + 8\n\n    # We can now express b in terms of g and solve for g:\n    # g + (g - 8) = 26\n    # 2g - 8 = 26\n    # 2g = 34\n    # g = 17\n\n    girls = 17\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    # number of students who like apples = 3 * x\n    # number of students who like bananas = 5 * x\n    # Total number of students = number who like apples + number who like bananas - number who like both\n    # because the students who like both are counted twice, once in apples and once in bananas\n    # 35 = (3 * x) + (5 * x) - x\n    # 35 = 7 * x\n    x = 35 // 7\n\n    return x\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let rate of Lee be L and rate of Nancy be N\n    # They finish the job in 10 hours working together.\n    # Time taken by Nancy to finish the job by herself will be represented by x\n\n    L, N = symbols('L N')\n\n    # Equation 1: (Lee's rate + Nancy's rate) * total time = Full job done\n    equation1 = Eq((L + N) * 10, 1)\n\n    # Equation 2: Nancy's total work + Lee's work for 6 hours = Full job done\n    equation2 = Eq(N * 20 + L * 6, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n\n    # The time taken by Nancy to finish the job by herself is the reciprocal of her rate.\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5  # in kilograms\n    orange_pie_g = 550  # in grams\n    orange_juice_g = 1050  # in grams\n\n    # Convert grams to kilograms\n    orange_pie_kg = orange_pie_g / 1000.0\n    orange_juice_kg = orange_juice_g / 1000.0\n\n    # Calculate the remaining oranges in kilograms\n    remaining_oranges_kg = total_oranges_kg - (orange_pie_kg + orange_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n\n    total_chairs = (total_days / 2) * (2 * first_day_chairs + (total_days - 1) * difference)\n    \n    return int(total_chairs)\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 because it's the tenth place of a two digit number\n        for y in range(10): # y can be from 0 to 9\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A  # return A once the condition of the problem is satisfied\n    return None\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def count_2s_at_digit(number, d):\n    power_of_10 = 10 ** d\n    next_power_of_10 = power_of_10 * 10\n    right = number % power_of_10\n    \n    round_down = number - number % next_power_of_10\n    round_up = round_down + next_power_of_10\n    \n    digit = (number // power_of_10) % 10\n    \n    # if the digit in spot d is\n    if digit < 2:\n        return round_down // 10\n    elif digit == 2:\n        return round_down // 10 + right + 1\n    else:\n        return round_up // 10\n\ndef solution():\n    number = 415\n    count = 0\n    length = len(str(number))\n    \n    for d in range(length):\n        count += count_2s_at_digit(number, d)\n        \n    return count\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    # Prices of items\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85  # 85 cents is $0.85\n\n    # Calculating the total spent\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    ans = (98 - 87) + (76 - 65) + (54 - 43) + (32 - 21) + 10\n    return ans\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Since Benny wants to ensure he has 3 marbles of the same color,\n    # we consider the worst case scenario where he picks the marbles\n    # in a way that prolongs getting 3 of the same color.\n    \n    # He can pick 2 blue marbles without getting 3 of the same,\n    # then 2 yellow marbles, and finally 1 red marble.\n    # This is a total of 2 (blue) + 2 (yellow) + 1 (red) = 5 marbles.\n    \n    # If he picks one more marble after this point (6th marble),\n    # he will have 3 of some color for sure by the Pigeonhole Principle.\n    return 6  # 5 + 1 more pick ensures 3 of the same color.\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_ages = 45\n    # In 5 years, both Mary and her son will be 5 years older\n    sum_ages_in_5_years = current_sum_ages + 5 + 5  # Add 5 years for both Mary and her son\n\n    return sum_ages_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_per_sharpener = 14  # in pence\n    total_sharpeners = 7\n    total_cost_pence = cost_per_sharpener * total_sharpeners\n    pounds_given = 100  # 1 pound = 100 pence\n\n    change_pence = pounds_given - total_cost_pence\n    change_pounds = change_pence / 100  # convert pence back to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n    \n    equation1 = Eq(garrett - sebastian, 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n    \n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = num_people * travel_cost_per_person\n    total_hotel_cost = num_people * hotel_cost_per_day_per_person * days\n    total_spending_money = num_people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total = factorial(7)\n    vowels = ['A', 'E', 'O']\n    vowel_perms = set(permutations(vowels))\n    all_vowels_together = 0\n    for perm in vowel_perms:\n        for positions in permutations(range(4), 3):\n            all_vowels_together += factorial(4)\n    ans = total - all_vowels_together\n    return ans\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls, and b represent the number of boys\n    g, b = symbols('g b')\n    \n    # According to the problem, there were 65 fewer boys than girls in the hall initially.\n    # b = g - 65\n    \n    # After a fraction of the boys and girls left the hall for recess,\n    # there were equal numbers of each remaining.\n    # (1 - 2/5) * b = (1 - 3/7) * g\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(b, g - 65)\n    equation2 = Eq((1 - 2/5) * b, (1 - 3/7) * g)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Getting the number of boys and girls that remained\n    boys_remaining = (1 - 2/5) * solutions[b]\n    girls_remaining = (1 - 3/7) * solutions[g]\n\n    # Total number of students remaining is the sum of boys and girls remaining\n    total_remaining = boys_remaining + girls_remaining\n\n    return total_remaining\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treat the math, chemistry, and physics books as single blocks\n    blocks = 4  # 3 blocks of subjects + 1 biology book\n\n    # Calculate the number of ways to arrange these 4 blocks\n    block_arrangements = factorial(blocks)\n\n    # Calculate the number of ways to arrange the books within each block\n    math_books_arrangements = factorial(4)\n    chemistry_books_arrangements = factorial(3)\n    physics_books_arrangements = factorial(2)\n\n    # Multiply the arrangements of blocks by the arrangements within each block\n    total_arrangements = (block_arrangements * math_books_arrangements * \n                          chemistry_books_arrangements * physics_books_arrangements)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    return height_meters / meters_to_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    ways = category1 * category2 * category3\n\n    return ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    \n    # Iterate through all possible integer lengths for one side of the isosceles triangle\n    for side in range(1, perimeter // 2):\n        for base in range(1, perimeter - 2 * side + 1):\n            if side >= base / 2: # Triangle inequality theorem: each side >= half the base length\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "from sympy import symbols, Eq, solve, isprime\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up equations based on the problem statement\n    eq1 = Eq(31 + a, 26 + b)\n    eq2 = Eq(26 + b, 20 + c)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b, c))\n\n    # Extract solutions for a, b, and c\n    a_value = solutions[a]\n    b_value = solutions[b]\n    c_value = solutions[c]\n\n    # Check if solutions are prime, if not, we find the nearest prime\n    if not isprime(a_value):\n        a_value = next(x for x in range(a_value - 1, 1, -1) if isprime(x))\n    if not isprime(b_value):\n        b_value = next(x for x in range(b_value - 1, 1, -1) if isprime(x))\n    if not isprime(c_value):\n        c_value = next(x for x in range(c_value - 1, 1, -1) if isprime(x))\n\n    # Return the product of a, b, and c\n    return a_value * b_value * c_value\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # For this game, the winning strategy is based on the concept of nim-sum, which is the bitwise XOR of the number of matches in the piles.\n    # If the nim-sum is 0, the next player cannot make a move that leaves the nim-sum at 0, meaning they are in a losing position.\n    # Since Eddie goes first, we should check the nim-sum at the beginning.\n    \n    pile_A = 35\n    pile_B = 24\n    nim_sum = pile_A ^ pile_B\n    \n    # If the initial nim-sum is not 0, Eddie has a winning strategy.\n    if nim_sum != 0:\n        ans = \"Eddie\"\n    else:\n        ans = \"Wei'er\"\n    \n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    people = 6\n    seats = 8\n    fixed_seat = 1\n    ans = factorial(people) // fixed_seat\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    # Initial condition: equal number of boys and girls\n    initial_condition = Eq(boys, girls)\n    # After 12 boys came and 8 girls left\n    after_change = Eq(boys + 12, 2 * (girls - 8))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_change), (boys, girls))\n    total_students_initially = solutions[boys] + solutions[girls]\n\n    return total_students_initially\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    sum_of_numbers = sum(range(31, 42))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    sign = 1  # Start with a positive sign\n    for i in range(80, 55, -2):\n        sum += sign * i\n        sign *= -1  # Switch the sign\n    return sum\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Distance covered in each stage\n    distance1 = 280  # in meters\n    distance2 = 400  # in meters\n    distance3 = 800 - (distance1 + distance2)  # the remaining distance in meters\n\n    # Speed in each stage\n    speed1 = 7  # in meters per second\n    speed2 = 5  # in meters per second\n    speed3 = 8  # in meters per second\n\n    # Time spent in each stage calculated as distance divided by speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent on the race is the sum of time spent in each stage\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 25):\n        prime2 = 25 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length_a = 15\n    length_b = 45\n    ans = gcd(length_a, length_b)\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6, 52)  # 6:52pm in hours, minutes\n    end_time = (8, 24)    # 8:24pm in hours, minutes\n\n    # Calculate the difference in minutes\n    spent_minutes = (end_time[0] - start_time[0]) * 60 + (end_time[1] - start_time[1])\n\n    return spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    return 150 - 12 * 12\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    # Number of intervals between lamp posts is one less than the number of lamp posts\n    number_of_intervals = 50 - 1\n    distance_between_lamps = 2\n\n    # Calculate the length of the road by multiplying number of intervals with the distance between lamp posts\n    length_of_road = number_of_intervals * distance_between_lamps\n\n    return length_of_road\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((5/6)*chocolate + (1/3)*vanilla + (2/9)*blueberry, 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    chocolates_before_selling = solutions[chocolate]\n    chocolates_sold = chocolates_before_selling - (5/6)*chocolates_before_selling\n    \n    return chocolates_sold\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    for eugene_initial in range(1, 260):\n        melvin_initial = 260 - eugene_initial\n        for david_initial in range(0, melvin_initial):\n            melvin_initial = 260 - eugene_initial - david_initial\n            # Eugene gives Melvin twice as many stickers as Melvin had\n            eugene_after = eugene_initial - 2 * melvin_initial\n            melvin_after = melvin_initial + 2 * melvin_initial\n            # Melvin gives David as many stickers as David had\n            melvin_after -= david_initial\n            david_after = david_initial + david_initial\n            # David gives Eugene as many stickers as Eugene had left\n            david_after -= eugene_after\n            eugene_after += eugene_after\n\n            # Check if the ratio matches 46:12:7\n            if (eugene_after * 12 == melvin_after * 46 and\n                david_after * 46 == eugene_after * 7):\n                return eugene_initial\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    number1 = 18\n    number2 = 52\n\n    halfway_number = (number1 + number2) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    max_peaches = (total_peaches + total_students - 1) // total_students\n\n    return max_peaches\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    n = 7  # number of consecutive numbers\n    total_sum = 140  # sum of these numbers\n    # Using the formula for the sum of an arithmetic sequence: total_sum = n/2 * (first_term + last_term)\n    # And knowing that last_term = first_term + n - 1 (because they are consecutive numbers)\n    # We can solve for first_term\n    first_term = (total_sum / n) - (n-1) / 2\n    return int(first_term)\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45  # Cost in pence\n    stamps_cost = 10 * 27      # Cost in pence\n    total_cost_pence = post_cards_cost + stamps_cost\n    total_cost_pounds = total_cost_pence / 100  # Convert pence to pounds\n\n    note_value_pounds = 10\n    change = note_value_pounds - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 7]\n    perm = permutations(digits, 3)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Total ways to arrange Chantel, Tony, and Cale around the table with Claire's seat fixed\n    total_arrangements = 3 * 2 * 1\n\n    # Ways to arrange where Tony sits directly opposite to Claire\n    # Since Claire's seat is fixed, there's only one way for Tony to sit opposite her\n    # and two ways to arrange Chantel and Cale in the remaining seats\n    opposite_arrangements = 1 * 2 * 1\n\n    # Subtract the invalid ways (Tony opposite to Claire) from the total\n    valid_arrangements = total_arrangements - opposite_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate = 180 / 10\n    # Ryan's rate of making tables per day\n    ryan_rate = 180 / 15\n    \n    # Calculate how many more tables Frank makes than Ryan in 1 day\n    difference = frank_rate - ryan_rate\n    \n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n\n    eq1 = Eq(total_questions / 4, (total_questions / 6) + 10)\n\n    total_questions_solved = solve(eq1, total_questions)\n    \n    return total_questions_solved[0]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # The mass is 7.4 kg when rounded off to 1 decimal place, \n    # so the smallest possible mass should be just a little bit smaller than 7.35 kg.\n    # Because if it were 7.35 kg or above, it would round to 7.4 kg.\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_marks = 79\n    correct_mark = 5\n    incorrect_mark = -2\n    total_questions = 20\n\n    # Using the hypothetical approach where all answers are considered correct initially\n    all_correct_marks = total_questions * correct_mark\n\n    # Calculate the difference from the actual marks\n    marks_difference = all_correct_marks - total_marks\n\n    # Calculate the number of incorrect answers, considering 5 - (-2) = 7 marks difference per incorrect answer\n    incorrect_answers = marks_difference / (correct_mark - incorrect_mark)\n\n    # Calculate the number of correct answers\n    correct_answers = total_questions - incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n    num_cakes_sold = total_money_raised / price_per_cake\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_amount = 1440\n    spent_at_restaurant = (3/7) * total_amount\n    left_after_restaurant = total_amount - spent_at_restaurant\n    spent_on_fees = (2/9) * left_after_restaurant\n    left_after_fees = left_after_restaurant - spent_on_fees\n\n    return left_after_fees\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # To find five consecutive numbers such that the sum of any three is divisible by 37 and 60,\n    # we need to find a starting point where the sum of three consecutive numbers (n, n+1, and n+2)\n    # meets both criteria.\n\n    # Since the numbers must be 2-digit numbers, the starting point n, must be >= 10\n    # Let's iterate through the possible starting points for our 5 consecutive numbers.\n    for n in range(10, 100-4):\n        # Check if the sum of three consecutive numbers is divisible by 37\n        if (n + n + 1 + n + 2) % 37 == 0:\n            # Check if the sum of the next three consecutive numbers is divisible by 60\n            if (n + 1 + n + 2 + n + 3) % 60 == 0:\n                # If both conditions are met, the largest number among the five is n+4\n                return n + 4\n    return None\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    candies_to_give = 24 - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(x, y)"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference_in_centimeters = meters_to_centimeters - 30\n    return difference_in_centimeters\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    num = 10\n    ans = 3 * num * (num + 1) * (2 * num + 1) // 6\n    return ans\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # If it takes 6 seconds to chime 3 times, we have 2 intervals between chimes.\n    # Thus, each interval takes 6 / 2 = 3 seconds.\n    # To chime 6 times, there would be 5 intervals between chimes.\n    # Therefore, the total time for 6 chimes is 5 intervals * 3 seconds per interval.\n    interval_time = 6 / 2\n    total_intervals = (6 - 1) * interval_time\n    return total_intervals\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P can complete the job in 12 days working 8 hours a day\n    # So, P can complete 1/12 of the job in 1 day working 8 hours\n    P_work_per_day = (1/12)\n\n    # Q can complete the job in 8 days working 10 hours a day\n    # So, Q can complete 1/8 of the job in 1 day working 10 hours\n    # We need to find how much of the job Q can complete in 1 day working 8 hours\n    Q_work_per_hour = (1/8) / 10\n    Q_work_per_day = Q_work_per_hour * 8\n\n    # Combined work by P and Q in 1 day working 8 hours\n    combined_work_per_day = P_work_per_day + Q_work_per_day\n\n    # Number of days needed for P and Q to complete the job together\n    days_needed = 1 / combined_work_per_day\n    \n    # Since we need the answer in whole days we take the ceil of days_needed\n    from math import ceil\n    whole_days_needed = ceil(days_needed)\n\n    return whole_days_needed\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for page in range(1, 41):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # converting pence to pounds\n    total_cost = 5 * cost_per_kg\n    money_given = 10  # in pounds\n\n    change = money_given - total_cost\n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n    factors = factorint(120)\n    total_factors = 1\n\n    for key in factors:\n        total_factors *= (factors[key] + 1)\n\n    return total_factors\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(5, 16):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    factors = sorted(set([i for i in range(1, product + 1) if product % i == 0]))\n    min_difference = product\n\n    for i in range(len(factors) // 2 + 1):\n        difference = factors[-(i + 1)] - factors[i]\n        if difference < min_difference:\n            min_difference = difference\n\n    return min_difference\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in minutes it takes for Max to cover the distance\n    x = symbols('x')\n\n    # Luca takes 10 minutes more than Max, so Luca takes x + 10 minutes\n    # Distance is the same, so time * speed is constant\n    # Ratio of speeds is 2:3, hence we can write the time ratio as 3:2 when the distance is constant\n    # So, 3 * (time for Max) = 2 * (time for Luca)\n    # Which means, 3 * x = 2 * (x + 10)\n    # Now if Luca had walked at double his usual speed, his time would be halved\n    # We need to find the time for Luca at double speed: (x + 10) / 2\n\n    equation = Eq(3 * x, 2 * (x + 10))\n    solution = solve(equation, x)\n\n    # Time taken by Luca at double speed is half the time of (x + 10)\n    time_at_double_speed = (solution[x] + 10) / 2\n\n    return time_at_double_speed\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durians_weight = 3 * 2.6\n    total_watermelons_weight = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_durians_weight + total_watermelons_weight\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = pencils = 1\n    while True:\n        if (pens == 2 * (pencils - 5)):\n            break\n        pens += 1\n        pencils += 1\n    pens += 18  # She bought another 18 pens\n    return pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    jog_time_hours = 1  # from 6:30 AM to 7:30 AM\n    walk_time_hours = 2  # from 7:30 AM to 9:30 AM\n\n    jog_speed_mph = 6.5  # jogging speed in miles per hour\n    walk_speed_mph = 4.5  # walking speed in miles per hour\n\n    # Distance = Speed * Time\n    distance_jogging = jog_speed_mph * jog_time_hours\n    distance_walking = walk_speed_mph * walk_time_hours\n\n    total_distance = distance_jogging + distance_walking\n    return total_distance\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Define the total number of questions\n    total_questions = 40\n    \n    # Define Tom's score\n    received_score = 71\n    \n    # Define the scoring system\n    mark_per_correct = 2\n    mark_per_wrong = -1\n    \n    # Equation: received_score = correct_answers * mark_per_correct + wrong_answers * mark_per_wrong\n    # Also we know that: correct_answers + wrong_answers = total_questions\n    \n    # Let's denote correct_answers as 'c' and wrong_answers as 'w'.\n    \n    # Using the conditions above we get two equations:\n    # (1) c + w = total_questions\n    # (2) mark_per_correct * c + mark_per_wrong * w = received_score\n    \n    # We can express 'w' from the first equation: w = total_questions - c\n    # Substitute 'w' into the second equation to solve for number of correct answers (c):\n    # mark_per_correct * c + mark_per_wrong * (total_questions - c) = received_score\n    # Simplify this equation to get c:\n    \n    # Combine like terms (mark_per_correct - mark_per_wrong) * c + mark_per_wrong * total_questions = received_score\n    c = (received_score - mark_per_wrong * total_questions) / (mark_per_correct - mark_per_wrong)\n    \n    # We can now find 'w' using the first equation\n    w = total_questions - c\n    \n    # Return number of wrongly answered questions\n    return int(w)\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # To ensure we have at least one \"A\", in the worst case we can draw\n    # all other cards without \"A\" first.\n    cards_per_pattern = 13\n    num_patterns = 4\n    # Without \"A\", we have 12 cards per pattern\n    cards_without_A = cards_per_pattern - 1\n    # Drawing all non-A cards\n    max_draw_without_A = cards_without_A * num_patterns\n    # Next draw must be an \"A\"\n    return max_draw_without_A + 1\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    return sum(str(i).count('2') for i in range(1, 226))\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    length_of_each_piece = 40\n\n    num_pieces = remaining_length // length_of_each_piece\n\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_tennis_players = 1 / 10\n    fraction_of_left_handed_girls = 25 / 100\n\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_tennis_players\n    total_students = total_left_handed / fraction_of_left_handed_girls\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_made = 80\n    butter_used = 20\n    cookies_desired = 100\n\n    butter_needed = (butter_used * cookies_desired) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    return 3 ** 3\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    zero_count = 0\n    current_number = 1\n    while zero_count < 100:\n        for digit in str(current_number):\n            if digit == '0':\n                zero_count += 1\n                if zero_count == 100:\n                    return current_number\n        current_number += 1\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank_per_week = 9  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank_per_week\n\n    return juice_left\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Given departure time in hours and minutes.\n    departure_hour = 10\n    departure_minute = 35\n    \n    # Convert departure time to a datetime object.\n    departure_time = datetime.strptime(f\"{departure_hour}:{departure_minute}\", \"%H:%M\")\n    \n    # Duration of the journey in hours and minutes.\n    journey_hours = 3\n    journey_minutes = 35\n    \n    # Calculate arrival time by adding the duration to the departure time.\n    arrival_time = departure_time + timedelta(hours=journey_hours, minutes=journey_minutes)\n    \n    # Format the arrival time into the required format.\n    ans = arrival_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n    \n    return ans\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    other_cars = total_cars - red_cars - blue_cars\n    return int(other_cars)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    elias_position_from_back = danya_position_from_back - 1\n    \n    total_people = people_in_front_of_elias + elias_position_from_back + 1\n\n    return total_people\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_first_part = 180  # Speed in meters per minute\n    time_first_part = 6     # Time in minutes\n    speed_second_part = 120 # Speed in meters per minute\n    time_second_part = 8    # Time in minutes\n\n    # Distance = speed * time\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n\n    # Total distance is the sum of both parts\n    total_distance = distance_first_part + distance_second_part\n    \n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # As the numbers are consecutive, we use the formula for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    # Here, n = 8 (as there are 8 consecutive numbers)\n    # And the sum is 2012\n    # We need to find the last term which is the largest number\n\n    # sum = n * ((first_term + last_term) / 2)\n    # rearranging the terms to get first_term in terms of last_term:\n    # first_term = (sum * 2 / n) - last_term\n\n    # Since the numbers are consecutive, the difference between the terms is 1.\n    # This means that the last term (largest number) - 7 will give us the first term.\n    # Hence, first_term = last_term - 7\n\n    # Now, substituting the expression for first_term into the equation:\n    # (last_term - 7) = (sum * 2 / n) - last_term\n\n    # Solving for last_term:\n    sum = 2012\n    n = 8\n    last_term = (sum * 2 / n + 7) / 2\n    \n    return int(last_term)\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42/35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    # Sachin's rate of cleaning per hour\n    rate_sachin = 1 / 3\n    # Peter's rate of cleaning per hour\n    rate_peter = 1 / 6\n    # Combined rate when working together\n    combined_rate = rate_sachin + rate_peter\n    # Time taken to clean when working together\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B', integer=True)\n\n    # Original ratio condition\n    equation1 = Eq(A, (5/7) * B)\n    # After transferring students\n    equation2 = Eq(A + 3, (4/5) * (B - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let's denote the initial number of bottles that Faye has as x.\n    # Every exchange operation reduces the number of empty bottles by 3 and increases by 1 due to receiving a new bottle.\n    # After 5 exchanges, she ends up with 4 bottles. It is also mentioned that she got 1 more bottle than expected.\n    # Let's initially assume the expected number of bottles after 5 exchanges to be y.\n    # So, after 5 exchanges she should have y + 1 bottles, which is equal to 4 according to the problem statement.\n    # Hence, y = 4 - 1 = 3. So we are now looking for the initial number of bottles (x) that would give 3 bottles after 5 exchanges.\n    # We can express this in an equation as follows:\n    # x - 3*5 = y\n    # x - 15 = 3\n    # Now we solve for x as:\n    x = 3 + 15\n    return x\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    total_millilitres = total_litres * 1000\n    total_seconds = total_millilitres / flow_rate_per_second\n    return total_seconds\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's say the number of boys (b) can be expressed as n^2, where n is the side length of the square.\n    # Adding 17 girls, we get a larger square with side length (n + 1)^2.\n    # So, we have the equation b + 17 = (n + 1)^2\n    # We need to solve for b and n.\n    \n    # Starting with a possible side length of 1 and increasing it until we find a valid scenario\n    n = 1\n    while True:\n        boys = n * n\n        new_square = (n + 1) * (n + 1)\n        if new_square - boys == 17:\n            return boys  # the total number of boys in the choir\n        n += 1\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let the distance be 'd' in kilometers.\n    # If Ivy leaves at 1 PM and arrives at the destination at 7 PM, it takes 6 hours.\n    # So, the speed is d/6 km per hour.\n    \n    # If she wants to arrive one hour earlier, at 6 PM, it takes 5 hours.\n    # The speed needs to be 2 km/h faster, so the speed is now (d/6 + 2) km per hour.\n    \n    # The distance 'd' remains the same, so we set up the equation d = 5 * (d/6 + 2).\n    # Solve for 'd'.\n    \n    from sympy import symbols, Eq, solve\n    \n    d = symbols('d')\n    equation = Eq(d, 5 * (d / 6 + 2))\n    \n    distance = solve(equation, d)[0]\n    \n    return distance\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    # 1-9: 9 pages, 1 digit each\n    while digits < 237:\n        pages += 1\n        if pages < 10:\n            digits += 1\n        elif pages < 100:\n            digits += 2\n        else:\n            digits += 3\n\n    return pages\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    correct_avg = 1462\n    incorrect_avg = 1468\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    # Difference introduced by incorrect recording\n    diff_in_savings = incorrect_day_savings - correct_day_savings\n\n    # Difference in average due to incorrect day\n    diff_in_avg = incorrect_avg - correct_avg\n\n    # Calculate number of days recorded\n    num_days = diff_in_savings / diff_in_avg\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    pieces_to_cut_first = 4 - 1  # Since the first cut doesn't count\n    time_for_first = 12\n\n    rate_of_cutting = time_for_first / pieces_to_cut_first  # Time per cut\n\n    pieces_to_cut_second = 12 - 1  # Same principle, for 12 pieces\n    time_for_second = rate_of_cutting * pieces_to_cut_second\n\n    return time_for_second\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_tree = current_year - birth_year\n    return age_of_tree\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let n be the first term, d be the common difference of the arithmetic progression\n    n, d = symbols('n d')\n    \n    # The 9th term is n + 8d and the 15th term is n + 14d\n    equation1 = Eq(n + 8*d, (n + 14*d) + 18)\n    \n    # The 20th term is n + 19d and the 12th term is n + 11d\n    equation2 = Eq((n + 19*d) + (n + 11*d), 88)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, d))\n    \n    # Calculate the 32nd term which is n + 31d\n    nth_term = solutions[n] + 31 * solutions[d]\n    \n    return nth_term\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((8 * x + 8) / 2 - 3 * (x + 6), 4 * x + 4 - 3 * x - 18)\n    \n    correct_answer = solve(equation, x)\n\n    return correct_answer[0]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(22+3*(6-2*x), 8+10*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 25\n    common_difference = 28 - 25\n    nth_position = 10\n\n    first_term = nth_term - (nth_position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    product_ages = 2240 // 4\n    for lily_age in range(1, product_ages):\n        for marry_age in range(lily_age + 1, product_ages):\n            carol_age = marry_age + 2\n            if lily_age * marry_age * carol_age == product_ages:\n                return carol_age\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2 / 5) * total_flowers\n    purple_flowers = (1 / 8) * total_flowers\n\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 10):  # x1 is the number of marbles in the first pile\n        x2 = 10 - x1  # x2 is the number of marbles in the second pile\n        if x1 != x2:  # The piles must have different amounts\n            ways += 1\n    return ways // 2  # Divide by 2 to correct for double counting\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters = 2.5\n    quarts_per_liter = 1.05669\n    cup_capacity_quarts = 0.5\n\n    total_quarts = liters * quarts_per_liter\n    cups = total_quarts / cup_capacity_quarts\n\n    return round(cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Pick all cars of two colors that are not guaranteed to be the same.\n    # Then, whatever color you pick next will ensure you have 3 of the same color.\n    red = 5\n    blue = 9\n    white = 4\n    ans = red + blue + 1 # Picking all red and blue cars, plus one more to guarantee 3 of the same color\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert everything to metres first\n    wood1 = 85 / 100  # converting 85 cm to metres\n    wood2 = 2         # already in metres\n    wood3 = 147 / 100 # converting 147 cm to metres\n\n    # Sum up the lengths\n    total_length = wood1 + wood2 + wood3\n\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    two = 2\n    thirty_four_hundredths = 34 / 100\n    ans = two + thirty_four_hundredths\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        remaining_legs = 64 - spiders * 8\n        ants = remaining_legs // 6\n        if spiders * 8 + ants * 6 == 64:\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, vivian = symbols('justin vivian')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (justin, vivian))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    # Given values\n    stamps_given_to_sister = 14\n    stamps_bought = 11\n    stamps_used_for_letter = 2\n    stamps_left = 34\n\n    # Calculate the initial number of stamps before any transactions\n    initial_stamps = stamps_left + stamps_used_for_letter + stamps_given_to_sister - stamps_bought\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    money = 32\n    spent = money / 2\n    remaining = money - spent\n    return remaining\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let h be the initial height from which the ball was dropped.\n    # After the first bounce, it reaches a height of 3h.\n    # After the second bounce, it also reaches a height of 3h.\n    # After the third bounce, it reaches a height of 3h / 2.\n    # After the fourth bounce (which is 36m), it reaches a height of (3h / 2) / 2.\n\n    # Now, we set up our equation based on the description above.\n    # (3h / 2) / 2 = 36\n    # Solving for h gives us the height from which the ball was originally dropped.\n\n    fourth_bounce_height = 36\n    third_bounce_height = fourth_bounce_height * 2  # Multiply by 2 to get the third bounce height\n    initial_height = third_bounce_height / 3  # Divide by 3 to get the initial height\n\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 11.63)          # The correct sum of the numbers\n    equation2 = Eq(x + y/10, 5.87)        # Oliver's mistaken sum\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the difference and multiply by 100\n    difference = abs(solutions[x] - solutions[y]) * 100 \n\n    return difference\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):  # Exclude 8 and duplicates\n        number = int('8' + ''.join(perm))\n        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_cost_pence = 99\n    whole_cd_cost_pounds = 8.99\n    total_cost_separate_pence = single_song_cost_pence * 12\n    total_cost_separate_pounds = total_cost_separate_pence / 100  # Convert pence to pounds\n    savings = total_cost_separate_pounds - whole_cd_cost_pounds\n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        if int(original) > reversed_num:\n            diff = int(original) - reversed_num\n        else:\n            diff = reversed_num - int(original)\n        results.add(diff)\n    ans = results\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    # The first digit can be 1, 2, or 3 (3 possibilities)\n    # The second digit can be 1, 2, or 3 but not the same as the first digit (2 possibilities)\n    # Multiply the possibilities for the two digits to get the total different two-digit numbers\n    count = 3 * 2\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    from itertools import permutations\n\n    digits = '0123456789'\n    min_diff = float('inf')\n\n    for perm in permutations(digits):\n        num1 = int(''.join(perm[:5]))\n        num2 = int(''.join(perm[5:]))\n        \n        current_diff = abs(num1 - num2)\n        \n        if current_diff < min_diff:\n            min_diff = current_diff\n\n    return min_diff\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(0, 10):\n        number = int(f\"3{N}3\")\n        if number % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time taken to pass the tree in seconds\n    length = 450  # length of the train in meters\n\n    # Speed = Distance / Time\n    speed = length / time  # speed of the train in meters per second\n\n    # Convert to km/h from m/s\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_weight = salt + water\n    concentration = (salt / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Peter and Sam have initially\n    sam, peter = symbols('sam peter')\n\n    # Sam Sam had 40 stickers more than Peter initially\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_to_peter = sam - 0.2 * sam\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_to_sam = peter + 0.2 * sam\n\n    # After the exchange, Sam had 25% of Peter's stickers plus his own remaining stickers\n    sam_after = sam_to_peter + 0.25 * peter_to_sam\n    \n    # After the exchange, Peter had 75% of his stickers plus 20% of Sam's initial stickers\n    peter_after = 0.75 * peter_to_sam + 0.2 * sam\n\n    # In the end, Sam had 96 stickers more than Peter\n    final_condition = Eq(sam_after, peter_after + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    # Calculate the ratio of pen cost to pencil cost.\n    ratio = pen_cost / pencil_cost\n    \n    # Number of pencils is the same as the ratio since 1 pen equals 'ratio' pencils.\n    return int(ratio)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_each = friends - 1  # Each friend sends a card to all other friends\n    total_cards_sent = friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    # Find the least common multiple (LCM) of the numbers 1 through 6\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n    \n    water_added = jug_capacity * jugs_added\n    total_water = initial_water + water_added\n    \n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n    alan = 74\n    bilal = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_3_days = 9 * 3\n    cookies_next_2_days = 15 * 2\n    cookies_last_2_days = 10 * 2\n    \n    total_cookies = cookies_first_3_days + cookies_next_2_days + cookies_last_2_days\n    total_days = 3 + 2 + 2\n    \n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    # Use the sum of products formula for consecutive integers:\n    # sum(n * (n + 1)) from n = 1 to n = 100 can be simplified using the known formula\n    # for the sum of the first n natural numbers (n(n + 1)/2) and the sum of squares of\n    # the first n natural numbers (n(n + 1)(2n + 1)/6).\n    n = 100\n    total = (n * (n + 1) * (n + 2)) // 3\n    return total\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The book's weight is the force exerted by gravity, which is 20N.\n    # According to Newton's third law, the force exerted by the table on the book (normal force) is equal in magnitude\n    # and opposite in direction to the force of gravity on the book.\n    # Thus, the magnitude of the force exerted by the table on the book is also 20N.\n    force_magnitude = 20\n    return force_magnitude\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    rate_candy = 1 / 20\n    # David's work rate per day\n    rate_david = 1 / 25\n    \n    # Total work done by Candy in 12 days\n    work_candy = 12 * rate_candy\n    \n    # We know that Candy and David together finish the job by the end of the 12th day,\n    # So the total work done should be 1 (as in 100% of the job)\n    total_work = 1\n    \n    # Let's denote the number of days David takes off as 'david_off_days'\n    # And the number of days David actually works as 'david_work_days'\n    # Since we know that they finish by the end of the 12th day,\n    # david_work_days + david_off_days = 12\n\n    # The total work done by David would then be:\n    # work_david = david_work_days * rate_david\n    \n    # The total work done by both is the sum of individual works, which should equal total work:\n    # work_candy + work_david = total_work\n    # 12 * rate_candy + david_work_days * rate_david = 1\n    \n    # So, solve for david_work_days:\n    david_work_days = (total_work - work_candy) / rate_david\n    \n    # Calculate the days David took off:\n    david_off_days = 12 - david_work_days\n    \n    return david_off_days\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let T be the variable we want to solve\n    T = symbols('T')\n\n    # Calculate the total tax paid considering the brackets given\n    # The first 50000 is taxed at 5%\n    first_50000_tax = 50000 * 0.05\n\n    # The remaining (140000 - 50000) is taxed at 8% + T\n    remaining_tax = (140000 - 50000) * (0.08 + T)\n\n    # The equation for the total tax paid\n    total_tax_paid = Eq(first_50000_tax + remaining_tax, 15100)\n\n    # Solve the equation for T\n    solution_T = solve(total_tax_paid, T)\n\n    return float(solution_T[0])\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    max_balls_without_6_same = (6 - 1) + (9 - 1) + (3 - 1)\n    balls_to_get_6_same = max_balls_without_6_same + 1\n    return balls_to_get_6_same\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    # Let's denote the total number of fruits by x.\n    # Then the number of apples initially is (4/5)*x and the number of pears initially is x - (4/5)*x = (1/5)*x.\n    # After (3/4)*x of the fruits are removed, there are (1/4)*x fruits left.\n    # And we have (1/8) of the initial apples left which equals to (4/5)*x*(1/8) and also equals to 30 pears.\n    # Therefore, (1/4)*x - (4/5)*x*(1/8) = 30.\n    \n    # Equation to solve: (1/4)*x - (4/5)*x*(1/8) = 30\n    # Rearrange the equation to solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/4)*x - (4/5)*x*(1/8), 30)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_six_cakes = 36\n    cakes_made = 6\n\n    time_per_cake = time_for_six_cakes / cakes_made\n\n    total_cakes = 10\n    total_time = time_per_cake * total_cakes\n\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Given values\n    mass = 2  # in kilograms\n    height = 5.0  # in meters\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Using energy conservation, potential energy at the top equals kinetic energy at the bottom.\n    # Potential Energy (PE) = mass * g * height\n    # Kinetic Energy (KE) = 1/2 * mass * v^2, where v is the final velocity\n    # At the bottom, PE = KE => mass * g * height = 1/2 * mass * v^2\n    # We can cancel the mass since it appears on both sides of the equation:\n    # g * height = 1/2 * v^2\n    # Now we solve for v:\n    # v^2 = 2 * g * height\n    # v = sqrt(2 * g * height)\n\n    v = symbols('v')\n    equation = Eq(v**2, 2 * g * height)\n    solutions = solve(equation, v)\n\n    # Since we're looking for speed, we take the positive root.\n    speed = max(solutions)\n\n    return speed\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers = symbols('stickers')\n    pupils = symbols('pupils')\n\n    equation1 = Eq(stickers - 13*pupils - 190, 0)\n    equation2 = Eq(stickers - 17*pupils - 50, 0)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Each child must get at least one orange, so we distribute three oranges first.\n    remaining_oranges = 13 - 3\n    \n    # Now we have to distribute the remaining oranges to the 3 kids\n    # This is equivalent to putting two partitions in the 10 remaining slots between the oranges\n    # Because after one orange, there are 12 spaces where partitions can be put (12 choose 2)\n    ways = comb(remaining_oranges + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for number in range(10, 10**5):\n        digit_sum = sum(int(digit) for digit in str(number))\n        if digit_sum == 20 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, a, m, o, g = perm\n        if s == 0 or o == 0:\n            continue\n        sasmo = 10000 * s + 1000 * a + 100 * s + 10 * m + o\n        ogams = 10000 * o + 1000 * g + 100 * a + 10 * m + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity\n    v0 = 5  # m/s\n\n    # Angle of projection\n    theta = 45  # degrees\n\n    # Height of the building\n    h = 30  # meters\n\n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n\n    # Convert angle to radians\n    theta_rad = math.radians(theta)\n\n    # Calculate horizontal and vertical components of the initial velocity\n    v0x = v0 * math.cos(theta_rad)\n    v0y = v0 * math.sin(theta_rad)\n\n    # Using kinematic equation, vy^2 = v0y^2 + 2g*h to find the final vertical velocity vy\n    vy = math.sqrt(v0y**2 + 2 * g * h)\n\n    # The horizontal velocity v0x remains constant throughout the flight\n    # Calculate the magnitude of the final velocity vector v by combining v0x and vy\n    v = math.sqrt(v0x**2 + vy**2)\n\n    return v\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches and burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    return 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_volume = equal_volume - 28\n    return transfer_volume\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    interest_rate = (amount / principal) ** (1 / years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.50\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the price per box of mangoes be 'm' and price per box of lychees be 'l'\n    m, l = symbols('m l')\n\n    # Given that the price of each box of lychees is $6 less than 2 times the price of each box of mangoes\n    equation1 = Eq(l, 2 * m - 6)\n\n    # The total cost for 24 cases of mangoes and 20 cases of lychees is $1160\n    equation2 = Eq(24 * m + 20 * l, 1160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the animals\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_for_elephants = 8 * solutions[elephant] / solutions[pig]\n    \n    return pigs_for_elephants\n    \nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_rate = 0.18\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    comics_factorial = factorial(4)\n    fictions_factorial = factorial(6)\n    combined_factorial = factorial(2)\n    \n    ans = comics_factorial * fictions_factorial * combined_factorial\n    return ans\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    result = 2.4 * 7 - (6.8 - 7 / 10)\n    return result\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "def solution():\n    from math import factorial as f\n    \n    # Number of places where we can insert the dancing performances is 7 (S _ S _ S _ S _ S _ S _, where S is each singing performance)\n    # We have to choose 4 places out of these 7 to put the dancing performances\n    places_to_choose = f(7) // (f(4) * f(7-4))\n    \n    # Once places are chosen, we can arrange the 6 singing performances among themselves\n    # in 6! ways and 4 dancing performances among themselves in 4! ways\n    arrangement_ways = f(6) * f(4)\n    \n    # Total number of ways is the combination of choosing the places and arranging the performances\n    total_ways = places_to_choose * arrangement_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for dora_correct in range(11):\n        justin_correct = dora_correct + (15 // 10)\n        dora_wrong = 10 - dora_correct\n        justin_wrong = 10 - justin_correct\n        total_points = dora_correct * 10 - dora_wrong * 5 + justin_correct * 10 - justin_wrong * 5\n        if total_points == 155:\n            return dora_correct\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Let's denote total groups in Class A as A_groups (which is 3) and Class B as B_groups\n    A_groups = 3\n    B_groups = 4\n    average_A = 12\n    combined_average = 8\n    \n    # Combined total candies sold by A and B using the combined average\n    total_combined_candies = (A_groups + B_groups) * combined_average\n    \n    # Total candies sold by A using the average for A\n    total_A_candies = A_groups * average_A\n    \n    # Using the total combined candies to find the total candies sold by B\n    total_B_candies = total_combined_candies - total_A_candies\n    \n    # Find the average number of candies sold by each group in Class B\n    average_B = total_B_candies / B_groups\n    \n    return average_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the time it takes for Lee to finish the job alone,\n    # y is the time it takes for Nancy to finish the job alone\n    x, y = symbols('x y')\n\n    # 1/x + 1/y is the rate at which Lee and Nancy work together\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # Since Lee types for 6 hours and Nancy types for 20 hours to finish the job,\n    # the amount of work done is equal to the total job, which is 1.\n    equation2 = Eq(6/x + 20/y, 1)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return total_liters\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    num_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    # number of ways to choose 2 different flavours out of 7\n    ans = comb(7, 2)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    numbers = [6, 9, 18]\n    gcf = gcd(numbers[0], gcd(numbers[1], numbers[2]))\n    return gcf\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    people = 10\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    white, milk, dark = symbols('white milk dark')\n    ratio_white_to_milk_to_dark = Eq(white / milk, 3/7) & Eq(milk / dark, 7/5) & Eq(dark - white, 8)\n    solutions = solve((ratio_white_to_milk_to_dark), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students = symbols('students')\n\n    # equation representing the problem\n    equation = Eq(students / 4 + (students - students / 4 - 3) / 3 + 25, students)\n\n    # solve the equation\n    total_students = solve(equation, students)\n\n    return total_students[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red = 5\n    green = 10\n    \n    while True:\n        # Calculate the probability of getting a green ball\n        probability = green / (red + green)\n        \n        # Check if the probability is 1/3\n        if probability == 1/3:\n            # Return the number of red balls added\n            return red - 5\n\n        # If probability is not yet 1/3, add one more red ball\n        red += 1\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n\n    squares_per_row = large_square_side // small_square_side\n    squares_per_column = large_square_side // small_square_side\n\n    total_squares = squares_per_row * squares_per_column\n\n    return total_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n            \nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5  # pence spent by Avril\n    fraction_of_total = 1 / 4  # one-quarter\n    total_money = spent / fraction_of_total  # total money Avril had\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit of 32^33\n    ones_digit_32 = 2\n    ones_digit_32_pow = ones_digit_32 ** 33 % 10\n\n    # Calculate the ones digit of 22^29\n    ones_digit_22 = 2\n    ones_digit_22_pow = ones_digit_22 ** 29 % 10\n\n    # Find the difference of the ones digits\n    ans = (ones_digit_32_pow - ones_digit_22_pow) % 10\n\n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    pages, sixes = 0, 0\n    while sixes < 18:\n        pages += 1\n        sixes += str(pages).count('6')\n    return pages - 1  # Subtract 1 because the loop will add 1 page after reaching 18 sixes\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    \n    combinations = fruits * vegetables\n    \n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):  # loop over possible outcomes for the first dice\n        for d2 in range(1, 7):  # loop over possible outcomes for the second dice\n            for d3 in range(1, 7):  # loop over possible outcomes for the third dice\n                if d1 != d2 and d1 != d3 and d2 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Ratio 4:9 is equivalent to 81:x\n    # So, we set up the proportion 4/9 = 81/x and solve for x\n    \n    x = (81 * 9) // 4\n    return x\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    sum = 0\n    for n in range(1, 2014):\n        sum += (n ** 3) / (n * (n + 1) * (n + 2))\n    sum += 1 / 4026\n    return sum\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = jump_up * 2 - slide_down\n    jumps = 0\n    distance_covered = 0\n    \n    while distance_covered < height:\n        jumps += 2\n        distance_covered += effective_jump\n        if distance_covered >= height:\n            break\n        # After every 2 jumps the monkey is 7m higher, except for the last bit of the climb\n        # if the distance covered + 5 (one jump) is already enough to reach the top\n        if distance_covered + jump_up >= height:\n            jumps -= 1  # substract 1 because it does not fall back after the last jump\n            break\n    \n    return jumps\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent the number of stickers Peter originally had\n    # Then Sam had p + 40 stickers originally\n    p = symbols('p')\n    \n    # Sam gives 20% of his stickers to Peter, which is 0.2 * (p + 40)\n    # Now Sam has p + 40 - 0.2 * (p + 40) stickers and Peter has p + 0.2 * (p + 40)\n    \n    # Peter then gives 25% of his stickers to Sam, which is 0.25 * (p + 0.2 * (p + 40))\n    # Sam now has p + 40 - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))\n    # Peter now has p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))\n    \n    # The final difference is 96 stickers\n    # Therefore, Sam's final amount minus Peter's final amount equals 96:\n    # (p + 40 - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))) - (p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))) = 96\n    \n    equation = Eq((p + 40 - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))) - (p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))), 96)\n    \n    # Solve the equation for the value of p\n    solution = solve(equation, p)\n\n    # Return the number of stickers Peter had initially\n    return solution[0]\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    diff = 21 - 15  # The common difference in the sequence\n    last_term = 39  # The last given term in the sequence\n    next_term = last_term + diff  # The next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    score_correct = 4\n    score_wrong = -2\n    total_score = 152\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of incorrect answers\n    # We can set up the equation:\n    # score_correct * x + score_wrong * (total_questions - x) = total_score\n    # 4x - 2(80 - x) = 152\n    # 4x - 160 + 2x = 152\n    # 6x = 152 + 160\n    # 6x = 312\n    # x = 312 / 6\n    correct_answers = (total_score + total_questions * score_wrong) / (score_correct + abs(score_wrong))\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_in_9_days = (cans_in_6_days / 6) * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If 16 sausages are to be shared among 24 people,\n    # each person should get 16/24 = 2/3 of a sausage.\n    # Therefore, we need to make enough cuts so that we can have\n    # 24 pieces of sausage, each being 2/3 in size.\n\n    # Since we can cut each sausage into 3 equal pieces (3 cuts for 2 pieces),\n    # we would need 8 sausages cut into 3 pieces each to get 24 pieces.\n\n    # So, we cut 8 sausages into thirds, which requires 8 cuts\n    return 8\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"RAINBOW\"))\n    \n    vowels_permutations = factorial(len(\"AIOW\"))\n    consonants_permutations = factorial(len(\"RNB\"))\n    vowels_together = vowels_permutations * (len(\"RNB\") + 1) * consonants_permutations\n    \n    return total_permutations - vowels_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_future_age = solutions[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of water in Container A as x mL.\n    A_initial = symbols('A_initial')\n\n    # According to the problem, Container A has 350 more mL than Container B initially.\n    B_initial = A_initial - 350\n\n    # After spilling 500mL, the amount of water in Container A becomes:\n    A_after_spill = A_initial - 500\n\n    # According to the problem, Container B then has twice as much as Container A.\n    equation = Eq(B_initial, 2 * A_after_spill)\n\n    # Solve for A_initial.\n    A_initial_solution = solve(equation, A_initial)\n\n    return A_initial_solution[0]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Differences between numbers must be divisible by the unknown integer\n    difference1 = 51 - 39\n    difference2 = 147 - 51\n    difference3 = 147 - 39\n\n    # Calculate the Greatest Common Divisor of differences\n    gcd12 = gcd(difference1, difference2)\n    gcd123 = gcd(gcd12, difference3)\n\n    # The GCD is the integer that we are looking for\n    return gcd123\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Each of the 6 team members, including Lovelle, said 3 sentences to each other.\n    # This does not include speaking to oneself, so it's 3 sentences to 5 other people.\n    sentences_per_member = 3 * 5\n    \n    # Lovelle said that many sentences to each of her team members\n    lovelle_statements = sentences_per_member\n    \n    # But since 12 members did not speak to Lovelle,\n    # these 12 members must have spoken 3 sentences to other members except Lovelle.\n    other_statements = 12 * 3\n    \n    # The total number of sentences spoken within the team is \n    # the sum of the sentences spoken by Lovelle and the 12 other members.\n    total_statements = lovelle_statements + other_statements\n    \n    # Each member speaks to 5 others, and if there are 'n' members in the team,\n    # the total number of possible sentences is 3 * (n-1) (no one speaks to themselves)\n    # So we solve the equation 3 * n * (n - 1) = total_statements * 2\n    # We multiply total_statements by 2 because each statement is counted twice,\n    # once for the speaker and once for the listener.\n    # This simplifies to a quadratic equation: 3n^2 - 3n - 2*total_statements = 0\n\n    members = (1 + ((1 + 4 * 2 * total_statements / 3)**0.5)) / 2\n    return int(members)\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n    \n    # 1-9 use 1 digit each for 9 digits total\n    total_digits += 9\n    \n    # 10-99 use 2 digits each for 90 * 2 = 180 digits total\n    total_digits += (99 - 10 + 1) * 2\n    \n    # 100-325 use 3 digits each\n    total_digits += (325 - 100 + 1) * 3\n    \n    return total_digits\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Since we have no starting point, let's iterate until we find the smallest valid number\n    for total_gums in range(1, 1000):  # arbitrary upper limit\n        remaining_gums_after_music = total_gums - 2  # ate 2 secretly in Music lesson\n        \n        # Shared one third of the remaining gums with friends\n        shared_gums = remaining_gums_after_music // 3\n        remaining_gums_after_break = remaining_gums_after_music - shared_gums\n\n        # Must be divisible by 4 since an equal amount is eaten during the next four lessons\n        if remaining_gums_after_break % 4 == 0:\n            # This is the smallest number of gums there could have been\n            return total_gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_per_hour = 50\n    time_to_complete = total_pieces / average_per_hour\n    return time_to_complete\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    total_permutations = factorial(len(word)) // (factorial(word.count('S')) *\n                                                  factorial(word.count('T')) *\n                                                  factorial(word.count('A')) *\n                                                  factorial(word.count('I')) *\n                                                  factorial(word.count('C')))\n    \n    # To calculate permutations where T's are together, treat TT as one entity\n    word_with_tt_together = \"TTSASTIC\"\n    permutations_with_tt_together = factorial(len(word_with_tt_together)) // (factorial(word_with_tt_together.count('S') - 1) *\n                                                                                factorial(2) *  # for the TT\n                                                                                factorial(word_with_tt_together.count('A')) *\n                                                                                factorial(word_with_tt_together.count('I')) *\n                                                                                factorial(word_with_tt_together.count('C')))\n\n    # Subtract configurations where T's are together from the total permutations\n    count = total_permutations - permutations_with_tt_together\n\n    return count\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    num = 418\n    rounded_num = round(num, -1)\n    return rounded_num\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n    \n    # Sarah had $20 more Pokemon cards than Mark\n    equation1 = Eq(sarah, mark + 20)\n    \n    # Sarah bought 16 extra Pokemon cards today\n    sarah_new = sarah + 16\n    \n    # She had 3 times more Pokemon cards than Mark had\n    equation2 = Eq(sarah_new, 3 * mark)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    # Sarah's original number of Pokemon cards\n    return solutions[sarah]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    expression = (2018 - 20 + 18)\n    return expression // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    max_attempts = 0\n    remaining_keys = 9\n    for chest in range(4, 0, -1):\n        max_attempts += remaining_keys - chest + 1\n        remaining_keys -= 1\n    return max_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # The pattern alternates between adding 500 and subtracting 200.\n    # Starting from 2945, we can follow the pattern to find the missing number.\n    \n    # Pattern: +500, -200, +500, -200, ...\n    sequence = [2945, 3445, 3245, 3745]\n    \n    # Calculate the next number by subtracting 200 from the last number\n    missing_number = sequence[-1] - 200\n    \n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum([i**2 for i in range(1, 26, 2)])\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    return max(i for i in range(10, 100) if i % 3 == 0 and i % 5 == 0)\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour.\n    # Then the number gathered in the second hour would be 40 - x.\n\n    # According to the problem statement, if the father gathered 26 more mushrooms in the first hour,\n    # the number of mushrooms gathered in the first hour would be equal to the second. So we have:\n    # x + 26 = 40 - x\n\n    # Now we solve for x.\n    x = (40 - 26) // 2\n\n    # Once we have x, we can find the number gathered in the second hour.\n    second_hour = 40 - x\n\n    return second_hour\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # There are 11 ten-cent coins each measuring 1.85 cm across.\n    # The total length of the row is equal to the sum of the diameters\n    # of all but the last coin (as the length does not include the entirety of the last coin's diameter).\n    # If we have n coins, then the total length will be the diameter of (n-1) coins plus the radius of the last coin.\n\n    diameter = 1.85  # Diameter of a single coin in cm.\n    num_coins = 11   # Total number of coins.\n\n    total_length = (num_coins - 1) * diameter + (diameter / 2)  # Total length calculation.\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    num_terms = 14\n    first_term = 5\n    common_difference = 3\n    \n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_sequence = num_terms * (first_term + last_term) / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    women, men = symbols('women men')\n    total_cupcakes = 182\n    \n    # Equation representing 4 times as many women as men\n    equation1 = Eq(women, 4 * men)\n    \n    # Equation representing the total number of cupcakes consumed\n    equation2 = Eq((2 * women) + (5 * men), total_cupcakes)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n    \n    return solutions[women]\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    num = 5345\n    ans = round(num, -2)\n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    return (3 / 12) * 20\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    # Handshakes in a complete network of n nodes is n*(n-1)/2\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temperature_difference = night_temp - morning_temp\n\n    return temperature_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # The last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # The last digit of 3^2017\n    ans = (last_digit_2 * last_digit_3) % 10  # The last digit of the product\n    return ans\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    # Since the table is circular, we begin with one person seated,\n    # and arrange the remaining 7 around them, because sitting arrangements\n    # that are rotations of each other are considered the same.\n    ans = factorial(7)\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of ants initially in Jerome's kitchen.\n    x = symbols('x')\n    \n    # Jerome swept away 3/4 of the ants.\n    ants_remaining_after_sweep = x - (3/4)*x  # This is 1/4 of x.\n    \n    # 2/5 of the remaining ants ran out of the kitchen.\n    ants_remaining_after_run = ants_remaining_after_sweep - (2/5)*ants_remaining_after_sweep  # This is 3/5 of 1/4 of x.\n    \n    # After 185 hungry ants crawled in...\n    ants_at_end = ants_remaining_after_run + 185\n    \n    # In the end, the number of ants is twice the number of ants initially.\n    equation = Eq(ants_at_end, 2*x)\n    \n    # Solve for x.\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n\n    total_spent = (books_first_day + books_second_day) * book_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8  # As the sequence seems to be of square numbers, and we need the 8th term\n    next_number = n**2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens_given = pens_per_friend * number_of_friends\n    return total_pens_given\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d = symbols('a d')\n    \n    # The sum of the first four terms is 4a + 6d\n    # The sum of the last four terms is 4a + 26d\n    # The sum of the last four terms is 32 more than the sum of the first four terms\n    \n    equation = Eq(4*a + 26*d, 4*a + 6*d + 32)\n    \n    # Solve for the common difference 'd'\n    solution = solve(equation, d)\n    \n    return solution[d]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def nguyen_number(n):\n        num = 1\n        for _ in range(n-1):\n            num = 2 * num + 4\n            if num >= 100:\n                num = num % 100\n        return num\n\n    ans = nguyen_number(2022)\n    return ans\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n    \n    red_flash_per_minute = 4\n    green_flash_per_minute = 6\n    \n    # Find the least common multiple to know how many times per minute they flash together\n    flashes_per_minute_together = lcm(red_flash_per_minute, green_flash_per_minute)\n    \n    # Calculate the number of times they flash together in one minute\n    times_together_per_minute = int(60 / flashes_per_minute_together)\n    \n    # Since they flash together every \"times_together_per_minute\" in a minute,\n    # we multiply by 60 (minutes in an hour) to find the total in an hour\n    total_flashes_together = times_together_per_minute * 60\n\n    # Including the first and the last time\n    ans = total_flashes_together + 1\n    \n    return ans\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n\n    halfway_point = (num1 + num2) / 2\n\n    return halfway_point\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + (profit_percent / 100))\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = ((new_selling_price - cost_price) / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange\n\n    # Generating a list of prime numbers that are less than 41\n    primes = list(primerange(1, 41))\n\n    # Checking for combinations of a and b that satisfy the equation 3a + 7b = 41\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Converting kilograms to grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Calculate the total volume of the drink\n    # If water makes up 3/5 of the drink, then the remaining 2/5 is juice\n    total_volume_per_bottle = (120 / 2) * 5\n    \n    # Calculate the volume of water in one bottle\n    water_volume_per_bottle = (total_volume_per_bottle * 3) / 5\n    \n    # Calculate the required water for 6 bottles\n    required_water_for_six_bottles = water_volume_per_bottle * 6\n    \n    return required_water_for_six_bottles\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10\n    \n    distance_simon = simon_speed * time_walked\n    distance_friend = friend_speed * time_walked\n    \n    simon_return_speed = 2 * simon_speed\n    time_simon_returns = distance_simon / simon_return_speed\n    \n    distance_friend_when_simon_returns = distance_friend + friend_speed * time_simon_returns\n    \n    return distance_friend_when_simon_returns\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 7  # 2 bells + 2 stars + 2 red balls + 1 green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n    \n    # Number of permutations for n objects is n!,\n    # but we must divide by the factorial of the count of identical items\n    # because swapping identical items does not create a new permutation.\n    permutations = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    \n    return permutations\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Initial volume in liters\n    other_container = 0.25 * initial_volume  # Volume filled in another container in liters\n    cup_volume_ml = 150  # Volume of each cup in milliliters\n    num_cups = 14  # Number of cups filled\n    cup_volume_liters = (cup_volume_ml * num_cups) / 1000  # Convert milliliters to liters\n\n    remaining_volume = initial_volume - (other_container + cup_volume_liters)\n    \n    return remaining_volume\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        if int(p[0]) == 0:  # the S cannot be a zero\n            continue\n        S, E, N, D, M, O, R, Y = map(int, p)\n        if S == 0 or M == 0:\n            continue\n        send = S * 1000 + E * 100 + N * 10 + D\n        more = M * 1000 + O * 100 + R * 10 + E\n        money = M * 10000 + O * 1000 + N * 100 + E * 10 + Y\n        if send + more == money:\n            return (send, more, money)\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "import math\n\ndef solution():\n    def D(n):\n        # Base cases\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        # Recursive formula: D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n        return (n - 1) * (D(n - 1) + D(n - 2))\n\n    ans = D(7)\n    return ans\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Costs for Eddie, Jack, Rose, and Mary to cross the bridge\n    times = [1, 2, 5, 10]\n    \n    # Strategy: Send the fastest two first (1 and 2 minutes), return the fastest (1 minute).\n    # Then, send the slowest two (5 and 10 minutes) and return the second fastest (2 minutes).\n    # Finally, send the fastest two again (1 and 2 minutes).\n    # The total time is thus: 1 + 2 + 1 (first trip and return) \n    # + 5 + 10 (slowest two crossing) + 2 (second fastest return)\n    # + 1 + 2 (fastest two crossing again)\n    total_time = 2 + 2 + 1 + 10 + 2\n    \n    return total_time\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 7 * (100 // 7 - 1)\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    # Speed and time are inversely proportional\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # Since the number is divisible by 99, it's also divisible by 9 and 11.\n    # The divisibility rule for 9: the sum of the digits must be divisible by 9.\n    # The divisibility rule for 11: the difference between the sum of the digits at the odd and even positions must be divisible by 11.\n\n    # The sum of the known digits is 2 + 3 + 3 + 5 = 13\n    # To be divisible by 9, the sum of all digits should be a multiple of 9.\n    # Let's try digits from 0 to 9 for the two blanks.\n    for d1 in range(10):\n        for d2 in range(10):\n            # Check if it meets the divisibility rule by 9.\n            if (13 + d1 + d2) % 9 == 0:\n                # Create the number to check the divisibility by 11.\n                number = int(f\"2{d1}{d2}335\")\n                # Check if the number meets the divisibility rule by 11.\n                # Subtract the sum of digits at even places from the sum of digits at odd places\n                # (2nd, 4th, 6th digits - 1st, 3rd, 5th digits)\n                if (d1 + 3 + 5) - (2 + d2 + 3) % 11 == 0:\n                    return number\n    \n    return None  # If no solution is found (should not be the case)\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let the number of pages Anny can write per day be 'x'.\n    # Then her total homework is 8 * x pages.\n    # If she writes 2 more pages per day, that is (x + 2) pages per day,\n    # and she finishes 2 days earlier, which means in (8 - 2) = 6 days.\n    # So the total homework can also be written as 6 * (x + 2) pages.\n    \n    # We have two expressions for the total homework, which must be equal:\n    # 8 * x = 6 * (x + 2)\n    # We can solve this equation to find the value of x.\n    \n    # Rearrange the equation:\n    # 8x = 6x + 12\n    # 8x - 6x = 12\n    # 2x = 12\n    # x = 6\n    \n    # Now that we have the value of x, which is the number of pages Anny writes per day,\n    # we can calculate the total pages of homework:\n    x = 6\n    total_pages = 8 * x\n    \n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate per minute\n    pip_rate = 5 / 20\n    \n    # Bud's rate per minute\n    bud_rate = 3 / 15\n    \n    # Total time in minutes\n    total_time = 40\n    \n    # Total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_time\n    \n    # Total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_time\n    \n    # Total loaves baked by both\n    total_loaves = pip_loaves + bud_loaves\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Calculate the original price of the house, based on the increased value of 110%\n    increased_value = 11000\n    original_value_after_first_increase = increased_value / 1.1\n    \n    # Calculate the original price of the house, before the first increase of 10%\n    original_price = original_value_after_first_increase / 1.1\n    \n    # Calculate the decreased value after the house loses 10% of its value in the second year\n    decreased_value = original_value_after_first_increase * 0.9\n    \n    # Calculate the amount of profit or loss comparing with the original price\n    profit_or_loss = decreased_value - original_price\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # He could take out all red and black socks before he gets a pair of white socks.\n    max_red_black_socks = 10 + 10 \n    # Then he needs to take out only two more white socks to get a pair of white socks.\n    max_white_socks_to_pair = 2\n    # Total socks at most he must take to guarantee a pair of white socks\n    ans = max_red_black_socks + max_white_socks_to_pair\n    return ans\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12*a) / 4 + (2*a) * 5\n    simplified_expr = simplify(expression)\n    ans = simplified_expr\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    # Given algebraic expression: (6 * d) + (5 * d) - d\n    # Combining like terms: 6d + 5d - d = (6 + 5 - 1)d = 10d\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_cookies = symbols('initial_cookies')\n\n    equation = Eq(initial_cookies - (3/8)*initial_cookies - (1/6)*initial_cookies, 33)\n  \n    solution = solve(equation, initial_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n\n    for i in range(1, 10):\n        numbers = [i] * (i + 2)\n        sequence.extend(numbers)\n    \n    sequence.sort()\n    \n    middle_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[middle_index - 1] + sequence[middle_index]) / 2\n    else:\n        median = sequence[middle_index]\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let's denote Jemma's number as x.\n    \n    # The operation is (x + 3) * 5 = 35\n    # Now we can perform the inverse operations to find x.\n    \n    # First, we divide 35 by 5 to reverse the multiplication.\n    result_after_addition = 35 / 5\n    \n    # Then, we subtract 3 to reverse the addition.\n    jemmas_number = result_after_addition - 3\n    \n    return jemmas_number\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 5)  # Assuming the year 2023 - It could be any non-leap year since the year isn't specified\n    end_date = datetime(2023, 6, 7)\n    one_day = timedelta(days=1)\n\n    # Start on the next Sunday\n    while start_date.weekday() != 6:\n        start_date += one_day\n\n    count_sundays = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:\n            count_sundays += 1\n        start_date += one_day * 7  # Move to the next Sunday\n\n    return count_sundays\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    total_packets = 25\n    \n    flour_per_packet = total_flour / total_packets\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of red marbles and w be the initial number of white marbles\n    # Let p be the number of red balls Pip adds and b be the number of white balls Bud adds, where b = p + 100\n    r, w, p = symbols('r w p')\n\n    # Initial ratio of red to white marbles is 3:2\n    initial_ratio = Eq(r / w, 3 / 2)\n\n    # After Pip adds p red balls, the ratio of red to white balls is 5:3\n    pip_added_ratio = Eq((r + p) / w, 5 / 3)\n\n    # Bud adds b = p + 100 white balls, and the new ratio is 5:4\n    bud_added_ratio = Eq((r + p) / (w + p + 100), 5 / 4)\n\n    # Solving the three equations simultaneously\n    solutions = solve((initial_ratio, pip_added_ratio, bud_added_ratio), (r, w, p))\n\n    # Return the initial number of white balls\n    return solutions[w]\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # Find K for which 5K27K is divisible by both 3 and 4\n    # A number is divisible by 3 if the sum of its digits is divisible by 3\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4\n    for K in range(10):\n        if (5 + K + 2 + 7 + K) % 3 == 0 and (10 * K + 7) % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of brownies, and y be the original number of cookies.\n    x, y = symbols('x y')\n\n    # Original ratio of cookies (y) to brownies (x) is 4:3\n    equation1 = Eq(y/x, 4/3)\n\n    # After giving away 6 brownies, the ratio of cookies to remaining brownies (x - 6) becomes 12:7\n    equation2 = Eq(y/(x - 6), 12/7)\n\n    # Solve the system of equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    x_value = solutions[x]\n    y_value = solutions[y]\n\n    # Calculate the total number of cookies and brownies\n    total = x_value + y_value\n\n    return total\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    initial_companies = 4\n    initial_days = 5\n    initial_distance = 900\n\n    new_companies = 6\n    new_distance = 5400\n\n    work_rate_initial = initial_companies / initial_days\n    total_work_initial = work_rate_initial * initial_distance\n\n    work_rate_new = new_companies\n    total_work_new = new_distance\n\n    new_days = total_work_new / (total_work_initial * work_rate_new)\n    \n    return new_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy_prices = [10, 30]\n    sell_prices = [20, 40]\n\n    # Total profit is the sum of differences between sell and buy prices\n    profit = sum(sell - buy for sell, buy in zip(sell_prices, buy_prices))\n    return profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spend = 93\n    adam_tickets = 6\n    claire_spend = 124\n\n    price_per_ticket = adam_spend / adam_tickets\n    claire_tickets = claire_spend / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25 + (10 - 1) * 3  # 10th term calculation\n    first_term = 25 - (1 - 1) * 3  # 1st term calculation\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    total_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    sum_player_one = 23\n    sum_player_two = total_sum - sum_player_one\n\n    # Since we want the highest single card for Player Two, we will give\n    # them the highest cards possible without exceeding their total sum\n    # and without giving them more cards than required.\n    highest_card_player_two = 0\n    for card in range(8, 0, -1):\n        if sum_player_two - card >= 0:\n            sum_player_two -= card\n            highest_card_player_two = card\n            if sum_player_two == 0 or highest_card_player_two == 4:\n                # Player Two cannot have more than 4 cards\n                break\n\n    return highest_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of identical shoes, so 18 shoes in total\n    time_per_shoe = 2    # minutes to clean one shoe\n    cobblers = 2         # number of cobblers\n\n    # Since both cobblers work at the same time, we divide the total work by the number of cobblers\n    time_to_clean_all = (total_shoes * time_per_shoe) / cobblers\n\n    return time_to_clean_all\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    score = 168\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    \n    # Let's say all attempted questions are correct, Amna will score 4 marks per question\n    max_score = attempted_questions * 4\n    \n    # Now, we have to consider the wrong answers. Since Amna scored 168 and not the maximum,\n    # for every wrong answer, she loses 5 marks (1 mark deducted and 4 marks not scored).\n    wrong_answers = (max_score - score) // 5\n    \n    # Correct answers are the remainder of the attempted questions\n    correct_answers = attempted_questions - wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    number_of_players = 6\n    handshakes = comb(number_of_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n\n    num_buckets = total_litres // bucket_capacity\n\n    return num_buckets\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    # Sum of all odd numbers between 0 and 20\n    sum_odd = sum(range(1, 20, 2))\n    return sum_odd\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n\n    dumplings_to_give = luna_dumplings - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    \n    # Calculate the least common multiple (LCM) of the pack sizes\n    pack_sizes = [6, 8, 9, 15]\n    total_lcm = lcm(*pack_sizes)\n    \n    # Calculate the minimum number of markers by finding the smallest multiple of the LCM that is at least 1000\n    min_markers = total_lcm\n    while min_markers < 1000:\n        min_markers += total_lcm\n    \n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        B, D, E, C = p\n        if B == 0:  # Cannot start with a 0, since it's a 4-digit number\n            continue\n        CBCD = (C * 1000) + (B * 100) + (C * 10) + D\n        CDBC = (C * 1000) + (D * 100) + (B * 10) + C\n        BDEC = (B * 1000) + (D * 100) + (E * 10) + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n            \nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum([sum([i**2 for i in range(1, j+1)]) for j in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHALLENGE\")\n    vowel_count = 3  # Number of vowels that must be together\n    consonant_count = total_letters - vowel_count\n\n    # Treating the three vowels as a single entity for now, we have to arrange\n    # this entity along with the other consonants, which gives us (consonant_count + 1)! ways\n    consonant_arrangements = factorial(consonant_count + 1)\n\n    # Now, within this entity of vowels, 'A' and 'E' can be arranged in 3!/2! ways\n    # because we have a repeating 'E'\n    vowel_arrangements = factorial(vowel_count) // factorial(2)\n\n    # Total ways to arrange the letters is the product of the two\n    return consonant_arrangements * vowel_arrangements\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while True:\n        n += 1\n        if n % 13 == 0:\n            return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar_avg = 450\n    apr_to_jul_avg = 350\n    aug_to_oct_total = 1250\n    nov_to_dec_avg = 400\n\n    # Calculating total spent from January to March (3 months)\n    jan_to_mar_total = jan_to_mar_avg * 3\n\n    # Calculating total spent from April to July (4 months)\n    apr_to_jul_total = apr_to_jul_avg * 4\n\n    # Since we already have the total for August to October, no need to calculate\n\n    # Calculating total spent from November to December (2 months)\n    nov_to_dec_total = nov_to_dec_avg * 2\n\n    # Calculating the total spent for the whole year\n    total_spent_year = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n\n    # Calculating average spent per month from January to December (12 months)\n    avg_spent_year = total_spent_year / 12\n    \n    return avg_spent_year\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    dividend = remainder\n    \n    while True:\n        quotient = dividend // remainder\n        if quotient == remainder:\n            break\n        dividend += 1\n    \n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "from sympy import symbols, Eq, solve, Rational\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    \n    equation1 = Eq(cars, Rational(4, 3) * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    total_vehicles = cars + bikes + lorries\n\n    for total in range(2, 100, 2):  # Iterate through even numbers less than 100\n        equation3 = Eq(total_vehicles, total)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        if solutions and all(value.is_Integer and value > 0 for value in solutions.values()):  # Check for integer positive solutions\n            return solutions\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    row_difference = 2\n    nth_row = 12\n    seats_in_nth_row = first_row_seats + (nth_row - 1) * row_difference\n    return seats_in_nth_row\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    # To find p, we have to identify the prime factors of 245 and ensure that p's factors,\n    # when multiplied by 245's factors, result in each prime being raised to a power of 3.\n    # First, factor 245 (5 * 7^2).\n    # For 245p to be a perfect cube, each prime factor's total count must be a multiple of 3.\n    # Therefore, p must include at least one factor of 7 to make the count of 7's a multiple\n    # of 3, and three factors of 5, to make the count of 5's a multiple of 3.\n    # Thus p must be 5^2 * 7^1 = 25 * 7 = 175 to make 245p a cube.\n    p = 5**2 * 7**1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days = total_pages / pages_per_day\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    entrances = 2\n\n    # When there is one entrance, there is no line after 16 min, so:\n    # Total visitors in 16 min = visitors joining per minute * time\n    # Total check-ins in 16 min = check-in rate per entrance * time\n    total_visitors_16_min = visitors_per_minute * 16\n    total_check_ins_16_min = check_in_per_entrance * 16\n\n    # Since there was no line after 16 minutes with one entrance, we calculate the difference\n    difference = total_check_ins_16_min - total_visitors_16_min\n\n    # With two entrances, the rate at which people are checked in is doubled\n    # We need to find the time where the total check-ins with two entrances equals the total visitors plus the initial difference\n    # Total check-ins with two entrances = check-in rate per entrance * entrances * time\n    # Set the total check-ins with two entrances equal to total visitors coming in 16 min + the initial difference\n    # and solve for time:\n    # (check_in_per_entrance * entrances * time) = total_visitors_16_min + difference\n    \n    time_with_2_entrances = (total_visitors_16_min + difference) / (check_in_per_entrance * entrances)\n\n    return time_with_2_entrances\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    day_climb = 5\n    night_slide = 3\n    net_progress = day_climb - night_slide\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    multiplied_by = 2\n\n    original_number = (final_number - added_number) / multiplied_by\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # Since 1/3 in decimal form is 0.333... and repeats with 3,\n    # the first 1000 digits will all be 3.\n    digit_sum = 3 * 1000\n    return digit_sum\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percent = 10\n    discount_amount = (discount_percent / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let the initial number of oranges be 3x and lemons be 5x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    oranges_initial = 3 * x\n    lemons_initial = 5 * x\n    oranges_sold = 48\n\n    # After selling 48 oranges\n    oranges_after_selling = oranges_initial - oranges_sold\n\n    # The new ratio is 1:2 -> oranges_after_selling/lemons_initial = 1/2\n    equation = Eq(oranges_after_selling / lemons_initial, 1 / 2)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    # Number of lemons initially 5x\n    lemons_initial_count = lemons_initial.subs(x, solutions[0])\n\n    return lemons_initial_count\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2 \n    sides = 3\n    drinks = 5\n\n    num_combos = burgers * sides * drinks\n\n    return num_combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits.\n    # Each student can choose:\n    # 1 type of fruit - 3 ways (apple, pear, cherry)\n    # 2 types of fruits - 3 choose 2 ways (apple & pear, pear & cherry, apple & cherry)\n    # 3 types of fruits - 1 way (apple, pear & cherry)\n    # Total unique combinations = 3 (1 type) + 3 (2 types) + 1 (3 types) = 7\n    \n    # By the Pigeonhole Principle, if we have n pigeonholes and m pigeons,\n    # if m > n, then at least 2 pigeons must be in the same hole.\n    \n    # We have 7 unique combinations (pigeonholes),\n    # and we want to find the minimum number of students (pigeons)\n    # needed to ensure that at least 2 students choose the same combination.\n    \n    # Since each of the 7 combinations could be chosen by 1 student,\n    # having 7 students would not guarantee any repetition.\n    # But once we have 8 students, we are sure that at least 2 students have the same combination.\n\n    ans = 7 + 1  # 7 for each unique combination plus 1 to ensure a repetition\n    return ans\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # Spent 10p which is one quarter\n    total_money = spent * 4  # Multiply by 4 to get the total amount\n    return total_money\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n    a_students = 45\n    b_students = 75\n    c_students = 210\n    common_factor = gcd(gcd(a_students, b_students), c_students)\n    return common_factor\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    \n    # Current year equations\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n\n    # Solve current ages\n    current_ages = solve((equation1, equation2), (judy_age, father_age))\n\n    # Equation for the years ago condition\n    equation3 = Eq(current_ages[father_age] - years_ago, 4 * (current_ages[judy_age] - years_ago))\n\n    # Solve for the years ago\n    years_ago_solution = solve(equation3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Let's denote the number of cats as 'c'\n    # Every cat has 4 legs.\n    # Ducks have 2 legs each, parrots have 2 legs each, and the rabbit has 4 legs.\n    \n    ducks_legs = 3 * 2\n    parrots_legs = 2 * 2\n    rabbit_legs = 1 * 4\n    total_legs_others = ducks_legs + parrots_legs + rabbit_legs\n    \n    # Total legs (32) equals the legs of the ducks, parrots, rabbit, plus the legs of the cats.\n    # Therefore, we can find out the number of legs that all the cats have by subtracting\n    # the legs of ducks, parrots, and rabbit from the total legs.\n    cats_legs = 32 - total_legs_others\n    \n    # Since each cat has 4 legs, we divide the total cat legs by 4 to find the number of cats.\n    cats = cats_legs // 4\n\n    return cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    return comb(11, 2)\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    result = phi(4, phi(8, 3))\n    return result\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the younger and older brother\n    younger_current, older_current = symbols('younger_current older_current')\n    \n    # When the older brother was the same age as the younger brother's current age,\n    # the age difference between their current ages is the same as the difference between\n    # the younger brother being 12 years old\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    \n    # When the younger brother is as old as the older brother's current age,\n    # the older brother will be 27 years old, so the age difference remains constant\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n    \n    # Solve the equations for the current ages\n    solutions = solve((equation1, equation2), (younger_current, older_current))\n    \n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    # Finding LCM of 6, 8, 9, 15\n    from math import gcd\n    lcm = lambda x, y: x * y // gcd(x, y)\n    \n    numbers = [6, 8, 9, 15]\n    lcm_result = numbers[0]\n    for number in numbers[1:]:\n        lcm_result = lcm(lcm_result, number)\n    \n    # Finding the minimum number of markers\n    minimum_markers = lcm_result\n    while minimum_markers < 1000:\n        minimum_markers += lcm_result\n    \n    return minimum_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the number of rooms\n    x = Symbol('x')\n    \n    # Equation for the scenario where 4 people are in each room and 40 students don't have dormitories\n    eq1 = 4*x + 40\n\n    # Equation for the scenario where 6 people are in each room and 24 beds are vacated\n    eq2 = 6*x - 24\n\n    # Since the total number of students is the same in both scenarios, we set equations equal to each other\n    # and solve for x\n    \n    rooms = solve(eq1 - eq2, x)\n    \n    return rooms[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Create symbols for A and B\n\n    equation1 = Eq(A, B + 25)  # A is 25 greater than B\n    equation2 = Eq(A + 35, 6 * B)  # A+35 is 6 times B\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    n_10 = 10\n    n_15 = 15\n    \n    # Calculate the common difference\n    common_difference = (nth_term_15 - nth_term_10) / (n_15 - n_10)\n    \n    # Calculate the first term\n    first_term = nth_term_10 - (n_10 - 1) * common_difference\n    \n    # Calculate the 102nd term\n    n_102 = 102\n    nth_term_102 = first_term + (n_102 - 1) * common_difference\n    \n    return int(nth_term_102)\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_sweets = 18\n    fraction_eaten = 3/5\n\n    total_sweets = eaten_sweets / fraction_eaten\n    sweets_left_over = total_sweets - eaten_sweets\n\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age = 9\n    john_age = 5\n    years_until_jane_is_15 = 15 - jane_age\n    johns_age_when_jane_is_15 = john_age + years_until_jane_is_15\n    return johns_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(100):  # iterating through a reasonable range based on the problem\n        if (13 - x) ** 2 == 25:\n            ans = x\n            break\n    return ans\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.80 * marked_price\n    loss = marked_price - selling_price\n    \n    equation = Eq(loss, 40)\n    ans = solve(equation, cost_price)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return (7 + 3) * 11 - (7 + (3 * 11))\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    apples = 20\n    strawberries = 30\n    both = 10\n    neither = 5\n\n    total = (apples + strawberries - both) + neither\n\n    return total\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # x for Xuanrui, y for Yaokuan\n    \n    # Equation representing the total number of markers\n    equation1 = Eq(x + y, 708)\n    \n    # Equation representing the count after transactions\n    equation2 = Eq(x - 532, y - (3/7)*y)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_percentage = 12 / 100\n    discounted_amount = original_price * discount_percentage\n    final_price = original_price - discounted_amount\n    return final_price\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let the capacity of the tank be C litres.\n    # In 1 minute, Tap X fills C/10 of the tank and Tap Y fills C/Y of the tank.\n    # Together they fill up the tank in 1 minute, so we have:\n    # (C/10 + C/Y) * 6 = C\n    # Simplify: 1/10 + 1/Y = 1/6\n    # Solve for Y: Y = 1 / (1/6 - 1/10)\n    \n    y_inverse = 1/6 - 1/10\n    y_time = 1 / y_inverse\n\n    return y_time\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Let x be the number of correct answers Eddie gave.\n    # Then (10 - x) is the number of incorrect answers or skipped questions.\n    # Eddie gets 6 points for a correct answer and loses 2 points for an incorrect answer or skipping.\n    # The total points Eddie got is 44, so the equation based on the above information is:\n    # 6x - 2(10 - x) = 44\n\n    # Solving the equation for x:\n    x = symbols('x')\n    equation = Eq(6*x - 2*(10 - x), 44)\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    # Calculate factorials and sum them up until 8!\n    total = sum([1, 1*2, 1*2*3, 1*2*3*4, 1*2*3*4*5, 1*2*3*4*5*6, 1*2*3*4*5*6*7, 1*2*3*4*5*6*7*8])\n\n    # Return the last two digits of the sum\n    return total % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    total_volume = 300 + 300\n    sugar_a = 300 * 0.20\n    sugar_b = 300 * 0.30\n    total_sugar = sugar_a + sugar_b\n    concentration = total_sugar / total_volume\n\n    return concentration\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    exchange_rate = 2.50\n    dollars = 1000\n\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Ahmad's and Ryan's marbles\n    total_marbles = 1442\n    ahmad = symbols('ahmad')\n    ryan = symbols('ryan')\n\n    # Create the equations based on the problem\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    # Calculate the number of marbles Ahmad must give to Ryan for equal amounts\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_twos = 175\n    \n    # Exchanging each $10 note for five $2 notes\n    # If we consider each $10 as one $2 and four additional $2 notes,\n    # the total number of original $2 notes is (final_twos - 4 * number_of_tens)\n    # And the total number of notes is the number of $2 notes plus the number of $10 notes (as $2)\n    \n    # total_notes = number_of_twos + number_of_tens\n    # final_twos = number_of_twos + 4 * number_of_tens\n    \n    # number_of_twos is what we need to find out\n    # number_of_tens = total_notes - number_of_twos\n    # So final_twos = number_of_twos + 4 * (total_notes - number_of_twos)\n    # final_twos = number_of_twos + 4 * total_notes - 4 * number_of_twos\n    # final_twos = 4 * total_notes - 3 * number_of_twos\n    # number_of_twos = (4 * total_notes - final_twos) / 3\n    \n    number_of_twos = (4 * total_notes - final_twos) / 3\n    \n    return int(number_of_twos)\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    # Length of the head of the train\n    head_length = 10\n    # Length of each carriage\n    carriage_length = 27\n    # Distance between every adjacent carriage\n    distance_between_carriages = 1\n\n    # Total length of the train\n    total_length = 540\n\n    # Initialize the number of carriages including the head of the train\n    num_carriages = 1  # Start with the head of the train\n\n    # Calculate the remaining length\n    remaining_length = total_length - head_length  # Remaining length after the head\n\n    # Calculate the number of carriages by subtracting the distance between carriages\n    while remaining_length > 0:\n        remaining_length -= (carriage_length + distance_between_carriages)\n        if remaining_length >= 0:\n            num_carriages += 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Number of times '8' appears in the ones place\n    ones_place_count = 28  # From 8 to 288, but we start counting from 0, hence 288//10 -1\n    \n    # Number of times '8' appears in the tens place\n    tens_place_count = (288 // 100) * 10 + (8 + 1)  # (2 * 10) + 9 (for 80 to 88)\n    \n    # '8' does not appear in the hundreds place within the range 0-288\n    \n    # Total count is the sum from both places\n    total_count = ones_place_count + tens_place_count\n    \n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return float(solutions[pen])\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Define the system of equations based on the problem statement\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Get the number of triangles equal to a diamond\n    num_triangles_equal_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_equal_diamond\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    total_score = 82\n\n    # Let x be the number of correct answers\n    # Total questions is the sum of correct and incorrect answers: x + (total_questions - x)\n    # Total score is the sum of points from correct and incorrect answers: correct_points * x + wrong_points * (total_questions - x)\n    # We solve for x:\n    # correct_points * x + wrong_points * (total_questions - x) = total_score\n    # 2 * x - (total_questions - x) = total_score\n    # 2 * x - total_questions + x = total_score\n    # 3 * x - total_questions = total_score\n    # 3 * x = total_score + total_questions\n    # x = (total_score + total_questions) / 3\n\n    correct_answers = (total_score + total_questions) // correct_points\n\n    if total_score == correct_answers * correct_points + (total_questions - correct_answers) * wrong_points:\n        return correct_answers\n    else:\n        return False\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    # Initialize the smallest x to a large number\n    smallest_x = float('inf')\n    # Since x and y are whole numbers, we start y from 0 and go up\n    y = 0\n    while True:\n        # Using the given equation to solve for x in terms of y\n        x = (25 * y + 8) / 24\n        # Check if x is a whole number (integer)\n        if x.is_integer():\n            # Update the smallest_x if the new integer x is smaller\n            smallest_x = min(smallest_x, int(x))\n            # since x increases as y increases we can break the loop when we find the first integer solution\n            break\n        y += 1\n    return smallest_x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1 / i for i in range(2001, 2011))\n    S = 1 / S_inv\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_value, _ = solve_congruence(*congruences)\n    return least_value\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarters_full) / 2\n\n    # since the mass of 1/2 full jar is the average of 1/4 full and 3/4 full jar,\n    # it implies that the mass of the Marmite in half the jar equals the mass of the empty jar.\n    mass_empty_jar = mass_half_full - (mass_three_quarters_full - mass_half_full)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Number of intervals is one less than the number of trees\n    # Since both ends will have trees, we add 1 to the number of intervals to get the number of trees on one side\n    trees_per_side = (road_length // interval) + 1\n\n    # Since trees will be planted on both sides of the road, we multiply by 2\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    num_buses = 7\n\n    total_length = (num_buses * bus_length) + (distance_between_buses * (num_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_1 = 5 / 2.5\n    price_per_kg_2 = 7.70 / 4\n\n    if price_per_kg_1 < price_per_kg_2:\n        return \"2.5kg for £5\"\n    else:\n        return \"4kg for £7.70\"\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    blocks_28_height = 182\n    unit_block_height = blocks_28_height / 28\n    blocks_42_height = unit_block_height * 42\n    return blocks_42_height\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    # Let the original number be x\n    # Mistaken calculation: (x / 4) - 25 = 2021\n    # Rearranging the equation: x / 4 = 2021 + 25\n    # Multiplying by 4 to get the original number: x = (2021 + 25) * 4\n    \n    mistaken_result = 2021\n    correct_operation_addition = 25\n\n    # Finding the original number\n    original_number = (mistaken_result + correct_operation_addition) * 4\n\n    # Calculating the correct answer by multiplying by 4 and adding 25\n    correct_answer = (original_number * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term + 1)\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.5  # Selling the product at 50% above cost\n    discount_price = selling_price * 0.9  # Applying a 10% Christmas discount\n    profit = discount_price - cost_price  # Calculating profit\n\n    ans = profit\n    return ans\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given x:5 = y:3\n    # This is a direct proportional relationship\n    # To find the value of y when x = 5,\n    # we can set up the proportion and solve for y\n\n    # Let x1 = 5 (the given value of x)\n    x1 = 5\n    ratio_x = 5\n    ratio_y = 3\n\n    # Since the relationship is directly proportional,\n    # we can write: x1/ratio_x = y1/ratio_y\n    # From which we get: y1 = (x1 * ratio_y) / ratio_x\n\n    y1 = (x1 * ratio_y) / ratio_x\n\n    # Now we return the value of y when x = 5, which is y1\n    return y1\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Initialize a list to store the sequence, with None placeholders\n    sequence = [None] * 7\n\n    # We are given the 4th and 6th numbers in the sequence\n    sequence[3] = 6\n    sequence[5] = 15\n\n    # Calculating the fifth number by subtracting 4th from 6th\n    sequence[4] = sequence[5] - sequence[3]\n\n    # Now, to find the first three numbers, we go backwards\n    sequence[2] = sequence[3] - sequence[4]\n    sequence[1] = sequence[2] - sequence[3]\n    sequence[0] = sequence[1] - sequence[2]\n\n    # Finally, we can calculate the 7th number\n    sequence[6] = sequence[5] + sequence[4]\n\n    return sequence[6]\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # Knowledge points: Divisibility Rules for 9\n    # A number is divisible by 9 if the sum of its digits is also divisible by 9\n\n    # The digits of the five-digit number are 2, E, 3, E, 2\n    # Let's denote S as the sum of the digits of the number\n    # S = 2 + E + 3 + E + 2 = 7 + 2*E\n    # For the number to be divisible by 9, the sum of the digits S must also be divisible by 9\n\n    # We try all possible values for E (0-9) to find the one that makes S divisible by 9\n    for E in range(10):\n        if (7 + 2*E) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    # Since we are looking for the largest 2-digit number divisible by both 3 and 5,\n    # we need to find the largest number less than 100 that is a multiple of 15 (LCM of 3 and 5).\n    lcm = 3 * 5\n    largest_two_digit_number = 99  # Largest 2-digit number\n\n    # Largest 2-digit multiple of 15.\n    ans = largest_two_digit_number - (largest_two_digit_number % lcm)\n    return ans\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    # Since a perfect square is formed by adding 18 to the original number,\n    # we need to find two perfect squares that differ by 18 and the smaller\n    # one leaves a remainder of 5 when divided by its square root\n    m = 1\n    while True:\n        if (m*m + 5) % m == 5:\n            n = m + 1\n            # Check if adding 18 students completes a perfect square\n            if (m*m + 18) == n*n:\n                # We have our m, n and original number of students\n                original_students = m*m + 5\n                break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Calculate the greatest common divisor (GCD)\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    total_original = 3 * 25\n    total_after_change = 3 * 22\n    change_in_total = total_original - total_after_change\n    original_number = 16 + change_in_total\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert start time to minutes (5 p.m. is 300 minutes past noon)\n    badminton_duration = 45  # Badminton duration in minutes\n    jogging_duration = 30  # Jogging duration in minutes\n    \n    # Total duration in minutes\n    total_duration = badminton_duration + jogging_duration\n    \n    # End time in minutes past noon\n    end_time_minutes = start_time + total_duration\n    \n    # Convert end time back to hours and minutes\n    end_time_hours = end_time_minutes // 60\n    end_time_remain_minutes = end_time_minutes % 60\n    \n    # Adjust for time format (convert from 24hr to 12hr if necessary)\n    end_time_hours_formatted = end_time_hours if end_time_hours <= 12 else end_time_hours - 12\n    \n    # Return end time in hours and minutes\n    return f\"{end_time_hours_formatted}:{end_time_remain_minutes:02d} PM\"\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    # let's denote:\n    # c as the number of correct answers,\n    # w as the number of incorrect answers (wrong answers),\n    # so the unattempted questions would be 25 - c - w (since only one wasn't attempted).\n\n    # From the information given, we know the following relations:\n    # c + w = 24 (Rex answered all but one question)\n    # 4c - 2w = 66 (points system for correct and incorrect answers)\n\n    # Let's represent the first equation as w = 24 - c.\n    # Now we substitute this into the second equation to find the number of correct answers (c).\n    for c in range(25):\n        w = 24 - c\n        if 4*c - 2*w == 66:\n            return c\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    david_sugar = 800 * 0.05\n    eugene_sugar = 200 * 0.30\n    felix_sugar = 300 * 0.10\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    total_solution = 800 + 200 + 300\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Define the edges of a Q3 cube in graph theory. Each vertex of the cube can be represented by a 3-bit binary number.\n    # There are 2^3 = 8 vertices in a Q3 cube. Hence there are C(8, 2) - 8 = 28 - 8 = 20 edges, excluding the 8 edges of the cube.\n    # We can use the combinations from itertools to find all possible edges.\n    from itertools import combinations\n    vertices = [format(i, '03b') for i in range(8)]\n    all_edges = combinations(vertices, 2)\n\n    # Lambda function to check if two vertices are adjacent in the Q3 cube, i.e. they should differ by exactly one bit.\n    is_adjacent = lambda u, v: sum(a != b for a, b in zip(u, v)) == 1\n\n    # Count the number of edges that are not part of the original cube by filtering out the non-adjacent ones.\n    ans = sum(not is_adjacent(u, v) for u, v in all_edges)\n\n    return ans\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20\n    concentration1 = 35 / 100  # converting percentage to a fraction\n\n    volume2 = 30\n    concentration2 = 60 / 100  # converting percentage to a fraction\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n    \n    percent_concentration = (total_juice / total_volume) * 100  # converting back to percentage\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill, andrew + 18)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of badges Wendy made at the beginning.\n    x = symbols('x')\n\n    # Wendy sold 5/7 of the badges on the first day.\n    sold_first_day = 5/7 * x\n\n    # Remaining after first day\n    remaining_after_first_day = x - sold_first_day\n\n    # Wendy sold 1/3 of the remaining on the second day.\n    sold_second_day = 1/3 * remaining_after_first_day\n\n    # Remaining after second day\n    remaining_after_second_day = remaining_after_first_day - sold_second_day\n\n    # Wendy made additional 354 badges.\n    total_badges_after_adding = remaining_after_second_day + 354\n\n    # Wendy had 3 times the badges she made at first after making additional badges.\n    equation = Eq(total_badges_after_adding, 3 * x)\n\n    # Solve the equation to find the number of badges Wendy originally made.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # To determine a single winner from four players,\n    # the number of games played is equal to the number of players minus one.\n    num_players = 4\n    games_needed = num_players - 1\n    \n    return games_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize the smallest number to a high value that will surely be replaced\n    smallest = 999\n\n    # The digits we will use are from 3 to 7 since the difference must be 4 or less and one of the digits is 7\n    for i in range(3, 8):\n        for j in range(3, 8):\n            for k in range(3, 8):\n                # Making sure one of the digits is 7\n                if i == 7 or j == 7 or k == 7:\n                    # Building the number\n                    number = i * 100 + j * 10 + k\n                    # Checking if the number has a difference of 4 or less between any two digits\n                    if abs(i - j) <= 4 and abs(j - k) <= 4 and abs(i - k) <= 4:\n                        # Updating the smallest number\n                        smallest = min(smallest, number)\n    return smallest\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page_num in range(1, 101):\n        count += str(page_num).count('2')\n    return count\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Mapping the given \"Angel\" string to its respective numerical representation\n    angel_to_num = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    # Given Andy's attempt to unlock the treasure chest\n    andy_attempt = \"4005220912\"\n    # Create a dictionary to map the position of the given character in the word \"Devil\" to the number\n    devil_to_num = {'D': andy_attempt[0], 'e': andy_attempt[1], 'v': andy_attempt[2],\n                    'i': andy_attempt[3], 'l': andy_attempt[4]}\n\n    # Check if the mapping of angel_to_num corresponds to the devil_to_num values for 'e' and 'l'\n    can_unlock = True\n    for key in ['e', 'l']: \n        if angel_to_num[key] != devil_to_num[key]:\n            can_unlock = False\n            break\n\n    ans = can_unlock or devil_to_num['D'] + devil_to_num['e'] + devil_to_num['v'] + \\\n          devil_to_num['i'] + devil_to_num['l']\n    return ans\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n    both = (not_by_A + not_by_B) - total_exhibits\n    return both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temperature = 4\n    drop_temperature = 10\n    midnight_temperature = noon_temperature - drop_temperature\n    return midnight_temperature\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blouse = symbols('blouse')\n    \n    equation1 = Eq(3 * (blouse + 14) + 2 * blouse, 317)\n    solutions = solve(equation1, blouse)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, the magician must pick all balls of the most abundant color\n    # plus one more ball to guarantee he has one of the other two colors \n    # plus one more ball to guarantee the third color.\n\n    # Balls counts for each color\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Calculation using the Pigeonhole Principle\n    most_abundant_balls = max(blue_balls, red_balls, green_balls)\n\n    # He needs to pick all from the most abundant one, plus two more balls\n    ans = most_abundant_balls + 2\n\n    return ans\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Loop through potential values of A, starting from the smallest prime number 2\n    A = 2\n    while True:\n        # Check if 8A is a multiple of 3 by finding remainder\n        remainder = (8 * A) % 3\n        # If the remainder is 0, then 8A is a multiple of 3, but A itself cannot be 3 since it's already a prime\n        if remainder == 0 and A != 3:\n            return A\n        # Otherwise, move on to the next prime number. Since A and B are both primes, we can skip even numbers.\n        A += 1 if A == 2 else 2\n        # Check if the new A is prime\n        for i in range(2, int(A ** 0.5) + 1):\n            if A % i == 0:\n                break\n        else:\n            # If the above loop did not break, A is prime and we check the condition again.\n            continue\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Final value after gaining 10% in the first year\n    value_after_first_year = 110000\n    \n    # The increase was 10%, so the initial value was 100% (original value)\n    initial_value = value_after_first_year / 1.10\n    \n    # The house loses 10% of its value in the second year\n    # Since it loses 10%, it retains 90% (100% - 10%) of its value from the last year\n    value_after_second_year = value_after_first_year * 0.90\n    \n    # Calculate the profit or loss by comparing with the original price\n    profit_or_loss = value_after_second_year - initial_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "def solution():\n    from math import factorial\n\n    # Calculate permutations for each group separately\n    # For roses (3 different items)\n    roses = factorial(3)\n    # For jasmines (4 different items)\n    jasmines = factorial(4)\n    # For daisies (1 item, so only 1 permutation)\n    daisies = 1\n\n    # Total arrangements within each type of flower\n    arrangements_within = roses * jasmines * daisies\n\n    # Permutations of the 3 groups\n    # (1 group of roses, 1 group of jasmines, 1 group of daisies)\n    groups_order = factorial(3)\n\n    # Total permutations are combinations of within group arrangements\n    # multiplied by the permutations of the groups\n    total_arrangements = arrangements_within * groups_order\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    multiple_of = 1 * 2 * 3 * 4 * 5 * 6\n    factor_of = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n    count = 0\n    \n    for i in range(multiple_of, factor_of + 1):\n        if i % multiple_of == 0 and factor_of % i == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    n = 60\n    ans = 0\n    while n > 0:\n        n -= ans + 1\n        ans += 1\n    return ans\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    pies = 0\n    while True:\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percent = 20\n    discount_amount = original_price * (discount_percent / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml per minute\n    minutes_per_hour = 60  # minutes in an hour\n    ml_to_liters = 1000  # ml in a liter\n    \n    total_leak_in_ml = leak_rate_per_minute * minutes_per_hour\n    total_leak_in_liters = total_leak_in_ml / ml_to_liters\n    \n    return total_leak_in_liters\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # setting the congruence equations: (remainder, modulo)\n    congruences = [\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (1, 6),\n        (0, 7)\n    ]\n\n    # solving the system using the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    for S in range(1, 10):\n        for E in range(0, 10):\n            if S != E:\n                SEE = (S * 100) + (E * 10) + E\n                EES = (E * 100) + (E * 10) + S\n                SEE2 = SEE * 2\n                if SEE2 == EES:\n                    return SEE\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Since there are 3 different colors, to guarantee a pair, we must take\n    # one more than 3 times the number of colors present.\n    # Worst case: draw one of each color, then the next sock guarantees a pair.\n    num_colors = 3\n    socks_needed = num_colors + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # total_pieces is the number of pieces we have after cutting\n    # initial_pieces is the number of pieces we start with\n    # cut_pieces is the number of pieces each piece of paper is cut into\n    total_pieces = 16\n    initial_pieces = 10\n    cut_pieces = 3\n\n    # if x pieces of paper are cut into three parts, they add (cut_pieces - 1) * x new pieces\n    # the equation is: initial_pieces + (cut_pieces - 1) * x = total_pieces\n    # solve for x: x = (total_pieces - initial_pieces) / (cut_pieces - 1)\n    x = (total_pieces - initial_pieces) / (cut_pieces - 1)\n\n    return int(x)\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # To ensure we get 2 apples of the same colour in the worst case,\n    # we must consider the scenario where we are 'unlucky' each time.\n    # Therefore, we first take one red apple and then one green apple.\n    # This process could repeat until we are forced to take an apple of a colour\n    # we already have. The worst case scenario is then:\n    # 1 red, 1 green, 1 red, and then finally 1 more apple of any colour to guarantee two of the same.\n    \n    # Total apples taken in worst case to guarantee 2 apples of the same colour:\n    apples_taken = 3 + 1  # Three to have one of each and then one more to make a pair\n\n    return apples_taken\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    water_per_pail = 4\n    pails_filled = 4\n    water_left = 7\n\n    original_volume = (water_per_pail * pails_filled) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    x, y, z = (3, 3, 3)  # 243 = 3^5, which is the base for x, y, z\n    value = (x**8) * (y**6) * (z**2)\n    return value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    sum = 0\n    for i in range(1, 47, 2):\n        sum += (i + 1) - i\n    return sum\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    # Create equations based on the given expressions\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    # Initialize the variable to keep track of the result modulo 10\n    mod_result = 1\n\n    # Multiply the numbers, we only keep track of the modulo 10 to find the last non-zero digit\n    for i in range(1, 2011):\n        mod_result *= i\n        # Remove any trailing zeros by taking modulo 10 repeatedly\n        while mod_result % 10 == 0:\n            mod_result //= 10\n        # We only need the last non-zero digit so we keep the result modulo 10\n        mod_result %= 10\n    return mod_result\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Calculate the total number of terms written\n    total_terms = sum([(i+1) * i for i in range(1, 9)])\n    \n    # Since we're looking for the median, we need to find the middle term's index\n    median_index = (total_terms + 1) // 2\n    \n    # Count the total number of terms until we reach the median index\n    count = 0\n    current_number = 0\n    while count < median_index:\n        current_number += 1\n        count += current_number * (current_number - 1)\n        \n    # Since the sequence increases by 1 at each stage and we are counting one less, \n    # current_number will be the median because the sequence is non-decreasing\n    return current_number\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    team_avg = 150\n    subset_avg = team_avg - 2\n    subset_total = subset_avg * 4\n    team_total = team_avg * 6\n    remaining_total = team_total - subset_total\n    remaining_avg = remaining_total / 2\n\n    return remaining_avg\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paved_length = 50\n    num_days = total_length / daily_paved_length\n    return int(num_days)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y = 1\n    for factor in range(2, 43):\n        if 42 % factor == 0:\n            y *= factor\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    fodder_per_cattle_per_day = 10\n    number_of_cattles = 8\n    number_of_days = 4\n\n    total_fodder = fodder_per_cattle_per_day * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_weight_ratio_to_rabbit = 8\n    rabbit_weight_ratio_to_chicken = 2\n    chickens_per_dog = dog_weight_ratio_to_rabbit * rabbit_weight_ratio_to_chicken\n    return chickens_per_dog\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    twenty_thousand = 20000\n    twenty = 20\n\n    num = twenty_thousand - twenty\n\n    return num\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the total number of marbles Larry had initially.\n    # According to the problem,\n    # Larry gave 5/12 of his marbles to Mark. We can represent that as (5/12)x.\n    # Larry gave 30 marbles to Nate.\n    # Larry gave 26 marbles to Ollie.\n    # Larry had 35 marbles left.\n    # We can set up the equation:\n    # x - (5/12)x - 30 - 26 = 35\n    # Combine like terms and solve for x:\n    # (7/12)x = 35 + 30 + 26\n    # (7/12)x = 91\n    # x = (12/7) * 91\n    \n    x = (12/7) * (35 + 30 + 26)\n    \n    return int(x)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')  # Define the symbols for quantities we want to find\n\n    # Initially, Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6 / 5 * jess)\n    \n    # Jill gives eight sweets to Jess, changing the ratio\n    # Jill's new amount is jill - 8, Jess's new amount is jess + 8\n    equation2 = Eq(jill - 8, 4 / 7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        total += sum(int(digit) for digit in str(number))\n    return total\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = total_money / 4\n    return part_given\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.now()\n    age_years = 38\n    age_months = 6\n    birth_year = today.year - age_years\n    birth_month = today.month - age_months\n    if birth_month <= 0:\n        birth_year -= 1\n        birth_month += 12\n    # Birth date is not asked so assume it as today's date for simplicity\n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    # We want to find a 5-digit number xyzwt\n    # such that:\n    # 100000 * x + 10000 * y + 1000 * z + 100 * w + 10 * t + 1 < (xyzwt * 3)\n    # and\n    # xyzwt < 100000 * 1 + 10000 * x + 1000 * y + 100 * z + 10 * w + t\n    # Therefore, the condition we are looking at is:\n    # 100001 * xyzwt = 3 * (100000 + xyzwt)\n    # which simplifies to:\n    # 100001 * xyzwt = 300000 + 3 * xyzwt\n    # Finally:\n    # (100001 - 3) * xyzwt = 300000\n    # xyzwt = 300000 / 99998\n    # Since we are looking for a whole number solution, xyzwt has to be an integer.\n    ans = 300000 // 99998\n    return ans\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pies and cakes\n    pies, cakes = symbols('pies cakes')\n\n    # Given ratios\n    money_ratio_pies_to_cakes = 15 / 7\n    num_ratio_pies_to_cakes = 4 / 1\n    \n    # Given total money collected and price difference\n    total_money = 1848\n    price_diff = 13\n\n    # Equations based on the ratios and total money collected\n    # money_pies / money_cakes = 15 / 7\n    # num_pies / num_cakes = 4 / 1\n    \n    # Let the price of a cake be 'x'\n    # Then the price of a pie is x - 13\n    # 15/7 = (pies * (x - 13)) / (cakes * x)\n    # pies * (x - 13) = (money_ratio_pies_to_cakes) * cakes * x\n\n    # 4/1 = pies / cakes\n    # pies = 4 * cakes\n\n    # The total money is the sum of money from pies and cakes\n    # money_pies + money_cakes = total_money\n    # pies * (x - 13) + cakes * x = total_money\n\n    # Replace 'pies' with 4 * cakes from the ratio of number of pies to cakes\n    cake_price, num_cakes = symbols('cake_price num_cakes')\n\n    equation1 = Eq((4 * num_cakes) * (cake_price - 13), money_ratio_pies_to_cakes * num_cakes * cake_price)\n    equation2 = Eq((4 * num_cakes) * (cake_price - 13) + num_cakes * cake_price, total_money)\n\n    # Solve the system of equations for number of cakes and cake price\n    solutions = solve((equation1, equation2), (cake_price, num_cakes))\n\n    # There will be more than one solution, but we only need the positive one that makes sense in the context\n    for sol in solutions:\n        if all(val.is_real and val > 0 for val in sol):\n            return sol[num_cakes]\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    total = sum(i**4 for i in range(1, 20))\n    return total\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    possible_bead_counts = []\n\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            possible_bead_counts.append(beads)\n\n    # Assuming there's only one valid answer as per typical math questions\n    if len(possible_bead_counts) == 1:\n        ans = possible_bead_counts[0]\n    else:\n        raise Exception('Unexpected number of solutions found.')\n\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Hanson had\n    x = symbols('x')\n\n    # According to the problem, spending 1/4 of money and additional $3\n    # leaves him with 3/4 of the original amount minus $3\n    money_after_CDs = (3/4) * x - 3\n\n    # He then spends 3/5 of the remaining money and additional $6 on batteries\n    # This leaves him with 2/5 of the remaining money after CDs purchase minus $6\n    money_after_batteries = (2/5) * money_after_CDs - 6\n\n    # Finally, he is left with $24\n    equation = Eq(money_after_batteries, 24)\n\n    # Solve the equation for x\n    original_money = solve(equation, x)\n\n    return original_money[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    # Generate all permutations of 4 digits from the 6 given digits\n    for perm in permutations(digits, 4):\n        # Check if the last digit is an even number\n        if perm[-1] in even_digits:\n            # Check if the first digit is not '0' to form a valid four-digit number\n            if perm[0] != '0':\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Let d be the distance between the library and the school\n    # Qiqi's walking time to school is d / 60 minutes\n    # Weiling's walking time to school is d / 72 minutes\n\n    # Weiling starts 2 minutes later and arrives 4 minutes earlier than Qiqi\n    # Therefore, Weiling walks 6 minutes less than Qiqi\n\n    # Qiqi's walking time to school - Weiling's walking time to school = 6 minutes\n    # (d / 60) - (d / 72) = 6\n\n    # Solving the equation for d\n    d = (60 * 72 * 6) / (72 - 60)\n\n    return d\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial as f\n\n    # Number of ways to arrange 5 men\n    men_arrangements = f(5)\n\n    # Number of ways to insert 3 women in the 6 possible positions between and around the men\n    women_arrangements = f(6) // f(6 - 3)\n\n    # Multiplying the number of arrangements for men and women to get all possible combinations\n    total_arrangements = men_arrangements * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_percentage = 0.22\n    sugar_weight = total_weight * sugar_percentage\n    return sugar_weight\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    length_1 = 45\n    length_2 = 30\n\n    # Find the greatest common divisor (GCD) of the two lengths\n    longest_piece_length = gcd(length_1, length_2)\n\n    # Check if Candy's answer is correct\n    candy_correct = longest_piece_length == 180\n    \n    return (candy_correct, longest_piece_length)\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # We can find the units digit by finding the pattern of the units digit of powers of 9\n    # 9^1 = 9 -> units digit is 9\n    # 9^2 = 81 -> units digit is 1\n    # 9^3 = 729 -> units digit is 9\n    # 9^4 = 6561 -> units digit is 1\n    # The pattern repeats every 2 powers (9, 1, 9, 1, ...)\n    # Thus, 9^2015 will have the same units digit as 9^1 (which is 9)\n    # and 9^2016 will have the same units digit as 9^2 (which is 1)\n    # Hence the sum of the units digits will be 9 (from 9^2015) + 1 (from 9^2016) = 10\n    # The units digit of the sum is 0\n\n    return 0\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marcs_time = datetime.strptime(\"11:50\", \"%H:%M\")\n    actual_time = marcs_time + timedelta(minutes=15)  # Correcting Marc's slow watch\n    georges_time = actual_time + timedelta(minutes=7)  # Applying George's fast watch\n\n    # Adding half an hour to George's time\n    future_georges_time = georges_time + timedelta(minutes=30)\n    \n    # Formatting the time as a string\n    ans = future_georges_time.strftime(\"%H:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 540 * 0.45\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    distance_per_period = (3 * 3) - 2  # Each period of 3 jumps results in a net climb\n    periods = (31 - 3) // distance_per_period  # Minus 3 to account for the last jump reaching the top\n    remaining_distance = (31 - 3) % distance_per_period\n\n    # Total number of jumps includes full periods times 3 plus the remaining jumps\n    jumps = (periods * 3) + (remaining_distance // 3 if remaining_distance % 3 == 0 else (remaining_distance // 3) + 1)\n\n    return jumps\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for sympy\n    T = symbols('T')\n    income = symbols('income')\n\n    # Define equations based on the problem description\n    # Equation for tax on the first $30000\n    first_30k_tax = (T / 100) * 30000\n\n    # Equation for tax on the remaining amount\n    remaining_tax = ((T + 3) / 100) * (income - 30000)\n\n    # Total tax paid\n    total_tax = first_30k_tax + remaining_tax\n\n    # Tax paid is (T+1)% of his annual income\n    tax_is_percent_of_income = Eq(total_tax, (T + 1) / 100 * income)\n\n    # Only need to solve for the income\n    solutions = solve((tax_is_percent_of_income), (income))\n\n    # Since we only look for positive income, filter out non-positive solutions\n    income_solution = [sol.evalf() for sol in solutions if sol.evalf() > 0][0]\n\n    return income_solution\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 1\n    total_marks = 90\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (marks_for_correct * correct) - (marks_deducted_for_wrong * wrong) == total_marks:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    combined_rate = a_rate + b_rate\n    time_to_paint_together = 1 / combined_rate\n    return time_to_paint_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    num1 = 20.14\n    num2 = 4.4\n    ans = num1 * num2\n    return ans\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We should consider the worst case scenario using the Pigeonhole Principle\n    # Draw all marbles of the most abundant color first, then the second most, etc.\n    # until we reach the number of marbles that gives us four different colors,\n    # which is the first of the fourth color.\n    \n    # The order of abundance is: red(12), blue(9), yellow(8), red(3).\n    # Draw all 3 reds (+3), then all 8 yellows (+8), then all 9 blues (+9),\n    # and finally one red to ensure 4 different colors (+1).\n    \n    # The number drawn will be 3 (red) + 8 (yellow) + 9 (blue) + 1 (red) = 21\n    ans = 3 + 8 + 9 + 1\n    return ans\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the difference in age between Gigi and Jenny\n    age_diff = 45 - 22\n\n    # Calculate when Gigi was 22 years old\n    gigi_age_22_year = 2002 - (45 - 22)\n\n    # Calculate Jenny's age in the same year\n    jenny_age_when_gigi_22 = (gigi_age_22_year - 1995) + 22\n    \n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # the difference between consecutive terms\n\n    # the nth term of an arithmetic sequence can be found by: a_n = a_1 + (n - 1)d\n    # since the problem asks for positive terms, a_n must be greater than 0\n    # 0 < a_1 + (n - 1)d\n    # 0 < 50 + (n - 1)(-4)\n    # 4n - 4 < 50\n    # 4n < 54\n    # n < 54/4\n    # n < 13.5\n    # Since n needs to be an integer, the last term is for n = 13\n    num_terms = 13\n\n    return num_terms\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    remainder = digits_sum % 9\n    A = (9 - remainder) % 9\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    number = 2\n    while not (number % 3 == 0 and number % 8 == 0 and str(number).endswith('2')):\n        number += 10  # increment by 10 since the last digit must be 2\n    return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    # Starting with known digits\n    known_digits = \"451\"\n    \n    # Loop over possible last digits from 0 to 9\n    for last_digit in range(10):\n        complete_number = int(known_digits + str(last_digit))\n        \n        # Check if the number is divisible by 3 and not by 5 or 9\n        if complete_number % 3 == 0 and complete_number % 5 != 0 and complete_number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)  # Daniel started on May 15, 2023\n    duration_days = 3 * 7  # 3 weeks equals 21 days\n\n    end_date = start_date + timedelta(days=duration_days)\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    \n    # Since we need two different groups and each group must have at least 1 apple,\n    # we can give 1 apple to the first group and the remaining apples go to the second group,\n    # then give 2 apples to the first group and the remaining to the second group, and so on.\n    # This forms a sequence of divisions like (1, 11), (2, 10), ..., (6, 6).\n    # However, since groups need to have different number of apples, the last division is not a valid one.\n    # Therefore, the count of valid divisions is one less than the half of the total apples.\n    \n    count = (total_apples // 2) - 1\n\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25  # Ship's speed in still water in km/h\n    speed_of_current = 3       # Speed of the current in km/h\n    downstream_speed = speed_in_still_water + speed_of_current  # Speed of the ship downstream\n    distance = 140  # Distance to travel downstream in km\n\n    time_to_travel = distance / downstream_speed  # Time required to travel downstream\n\n    return time_to_travel\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost_each = 3.25\n    cupcake_quantity = 3\n    can_quantity = 2\n    \n    total_cupcake_cost = cupcake_cost_each * cupcake_quantity\n    total_can_cost = total_cost - total_cupcake_cost\n    can_cost_each = total_can_cost / can_quantity\n    \n    return can_cost_each\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of correct answers\n    # and (20 - x) be the number of wrong answers\n    # Olivia earns 5 points for each correct answer and loses 2 points for each wrong answer\n    # The total score is the number of correct answers times 5 minus the number of wrong answers times 2\n    # The equation can be written as: 5x - 2(20 - x) = 51\n    # Simplifying the equation gives: 5x - 40 + 2x = 51 => 7x = 91 => x = 91 / 7\n    x = (51 + 2*20) / 7\n    return int(x)\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n    first_light = 0.5  # in minutes\n    second_light = 0.75  # in minutes\n    full_cycle = 9  # in minutes\n\n    # Least common multiple of the first two lights\n    lcm_first_second = lcm(int(first_light * 60), int(second_light * 60)) / 60 # Convert to minutes\n\n    # Now find the minimum cycle for the third light, starting at 30 seconds (0.5 minutes)\n    third_light = 0.5\n    while True:\n        if lcm_first_second == lcm(lcm_first_second, third_light):\n            break\n        third_light += 0.5\n    \n    lcm_all = lcm(lcm_first_second, third_light)\n\n    # Since we know 3 traffic lights turn green at the same time every 9 minutes,\n    # the LCM of all three traffic lights must divide the full cycle time evenly.\n    if full_cycle % lcm_all == 0:\n        ans = third_light\n    else:\n        ans = \"No solution within constraints\"\n\n    return ans\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let the total number of people in groups A and B be a and b respectively\n    # Let's assume there are n full buses for group A and 1 mixed bus\n    # So, for group A, we have 36n + 11 seats taken\n    # For group B, we have b seats taken\n    # Also, after combining 11 from group A with some from group B for another 36-seat bus, we have\n    # b + 11 is a multiple of 36, which means b is of the form 36m - 11, where m is a positive integer\n\n    # Now, let's find the combination of every member of A with every member of B\n    # i.e., total photographs = a * b\n\n    # Each roll can take 36 pictures. We need to find out how many more pictures can the last roll take\n    # i.e., we need to find the remainder when total photographs divided by 36\n\n    # To find the minimum possible numbers of a and b, we start with m = 1\n    m = 1\n    while True:\n        b = 36 * m - 11\n        a = 36 * (m - 1) + 11\n        \n        # Check if a * b is a non-zero and positive to validate our assumption\n        # Also, since each bus must carry some people, m should be at least 2\n        if a > 0 and b > 0 and m >= 2:\n            break\n        \n        m += 1\n\n    total_pictures = a * b\n    remaining_pictures = total_pictures % 36 # The remainder is the additional pictures the last roll of film can take\n\n    return remaining_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Define the differences between terms\n    differences = [12, 11, 10, 9]\n\n    # Get the last number of the sequence and the last difference\n    last_number = 50\n    last_difference = differences[-1]\n\n    # Calculate the next difference by subtracting 1\n    next_difference = last_difference - 1\n\n    # Calculate the next number in the sequence\n    next_number = last_number + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean_value = 5\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since A can pass the ball to anyone from B, C or D (3 choices),\n    # the second person can pass to two remaining people (2 choices),\n    # and the third person has to pass back to A (1 choice),\n    # we can use the multiplication principle of counting.\n    total_ways = 3 * 2 * 1 \n    return total_ways\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    daniel, ming = symbols('daniel ming')\n\n    # Equation representing the current ages\n    equation1 = Eq(daniel, 4 * ming)\n\n    # Equation representing the sum of their ages in six years\n    equation2 = Eq((daniel + 6) + (ming + 6), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper = 25 # weight of each paper in grams\n    number_of_girls = 250 # number of girls sitting the paper\n    total_weight_grams = weight_per_paper * number_of_girls # total weight in grams\n    grams_per_kg = 1000 # number of grams in a kilogram\n    total_weight_kg = total_weight_grams / grams_per_kg # convert grams to kilograms\n    \n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n    \n    max_product = 0\n    digits = [1, 2, 8, 9]\n    \n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Time taken for the 3-meter-long line to clear the bridges\n    time_first_bridge = 8   # in seconds\n    time_second_bridge = 10 # in seconds\n\n    # Length of the first bridge\n    length_first_bridge = 9 # in meters\n\n    # Speed of the line (same for both bridges)\n    # speed = (length of bridge + length of line) / time to cross\n    speed = (length_first_bridge + 3) / time_first_bridge # in meters per second\n\n    # Length of the second bridge\n    # length = time to cross * speed - length of line\n    length_second_bridge = speed * time_second_bridge - 3\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += i ** 2 - (i - 2) ** 2\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    n = symbols('n', integer=True)\n    # Let n be the smallest even number. Then n*(n+2)*(n+4) = 2688.\n    equation = Eq(n * (n + 2) * (n + 4), 2688)\n    solutions = solve(equation)\n\n    # Find the even solution for n and calculate the largest number.\n    for sol in solutions:\n        if sol % 2 == 0:\n            return sol + 4\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"11:55 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"1:40 PM\", \"%I:%M %p\")\n    \n    duration = end_time - start_time\n    duration_in_minutes = duration.seconds / 60\n    \n    return int(duration_in_minutes)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left = 11\n    right = 7\n    crystal = 1  # Crystal herself\n\n    # Since Crystal is in both rows, we count her only once\n    ans = (left + crystal + right) * 2 - crystal\n    return ans\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    count = 0\n    for group1 in range(1, 10):  # Since each group needs at least 1 cupcake\n        group2 = 10 - group1     # The rest of the cupcakes go to group2\n        if group1 != group2:     # Make sure groups have different number of cupcakes\n            count += 1\n    return count // 2  # Since dividing into (group1, group2) is same as (group2, group1)\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    num = 224\n    count = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    # Calculate the time after all lessons and moving periods\n    total_duration = lesson_duration * 3 + moving_period * 2\n    break_time = start_time + total_duration\n\n    return break_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    # Iterating over possible hundreds and tens digits according to given conditions\n    for a in range(1, 10):                   # hundreds digit must be 1-9 because it's a 3-digit number\n        for b in range(a + 5, 10):           # tens digit must be 5 more than hundreds digit\n            c = b - 2                        # ones digit must be 2 less than tens digit\n            if ((a + b + c) / 2) == b:       # half the sum of the digits equals the tens digit\n                return a * 100 + b * 10 + c  # form the 3-digit number abc\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    # Using the gcd function to find the biggest number that divides 28, 84, and 126\n    ans = gcd(gcd(28, 84), 126)\n    \n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n    \n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $5 notes and y be the number of $10 notes\n    x, y = symbols('x y')\n    \n    # Total number of notes is x + y = 57\n    total_notes_eq = Eq(x + y, 57)\n    \n    # After spending, left twice as many $10 notes compared to $5 notes\n    left_notes_eq = Eq((y * (1 - 0.60)), 2 * (x * (1 - 0.25)))\n    \n    # Using sympy to solve the system of equations\n    solutions = solve((total_notes_eq, left_notes_eq), (x, y))\n    \n    # Calculate the cost of the bag\n    cost_of_bag = (solutions[x] * 0.25 * 5) + (solutions[y] * 0.60 * 10)\n    \n    return cost_of_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    return solutions[adam] + solutions[troy]\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Hanson had initially.\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3 on CDs, the amount left is (3/4)x - 3.\n    money_after_CDs = (3/4) * x - 3\n\n    # Then Hanson spent 3/5 of the remaining money and an additional $6 on batteries, left with $24.\n    # So the amount spent on batteries is (3/5)(money_after_CDs) + 6\n    # Finally, the money left after buying batteries is money_after_CDs - (amount spent on batteries)\n    money_left = money_after_CDs - ((3/5) * money_after_CDs + 6)\n\n    # We set up and solve the equation based on the fact that he was left with $24.\n    equation = Eq(money_left, 24)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Loop through all possible hundreds, tens, and ones digits\n    for hundreds in range(1, 10): # hundreds place cannot be zero\n        for tens in range(10): # tens place can be zero\n            for ones in range(0, 10, 2): # ones place has to be even for the number to be even\n                # Check if digits are different and their sum is 8\n                if (hundreds != tens) and (tens != ones) and (ones != hundreds) and (hundreds + tens + ones == 8):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    max_non_green = 5 + 6  # Maximum number of blue and white beads\n    beads_to_ensure_5_green = max_non_green + 5  # Get all non-green beads plus 5 green beads\n    return beads_to_ensure_5_green\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Group stage games:\n    # In a single round-robin tournament with 4 people, each person plays 3 games.\n    # There are 4 groups, so 4 * (4-1)/2 games per group => 6 games per group.\n    group_stage_games = 4 * (4 * (4 - 1) // 2)\n    \n    # Knockout stage games:\n    # Top 8: 4 games, Top 4: 2 games, Top 2: 1 game, plus one game for third place.\n    knockout_stage_games = 4 + 2 + 1 + 1\n\n    # Total games played = group stage games + knockout stage games.\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, 2*B)\n    equation2 = Eq(1/A + 1/B, 1/B - 1/(B + 12))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total work done by A and B together in one day\n    total_work_per_day = 1/solutions[B] + 1/(solutions[B] + 12)\n\n    # Total days to complete the work\n    total_days = 1 / total_work_per_day\n\n    return total_days.evalf()\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of candies Rachel has be R and Alice has be A.\n    R, A = symbols('R A')\n\n    # If Rachel gives Alice 10 pieces of candy, they would have the same number of candies.\n    equation1 = Eq(R - 10, A + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times of Alice's.\n    equation2 = Eq(R + 10, 3 * (A - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (R, A))\n\n    # The total number of candies originally is the sum of R and A.\n    total_candies = solutions[R] + solutions[A]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    total_plants = 9\n    choose_plants = 4\n\n    arrangements = factorial(total_plants) // factorial(total_plants - choose_plants)\n\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    # Inclusion-Exclusion Principle: A ∪ B = A + B - (A ∩ B)\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n\n    initial_stickers = final_stickers + given_away - bought\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 0):\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    import math\n\n    # Calculate the least common multiple of 15 and 21 to get another factor\n    lcm_15_21 = (15*21) // math.gcd(15, 21)\n\n    # Since a number with exactly 8 factors is of the form p^3 or p*q, where p and q are primes,\n    # and given 15 and 21 both factor into primes 3 and 5 (15 = 3 * 5) and 3 and 7 (21 = 3 * 7)\n    # we know our number must be 3^2 * 5 * 7 to have exactly 8 factors\n    # which equals 3 * lcm(15, 21) since lcm(15, 21) is equal to 3 * 5 * 7\n\n    num = 3 * lcm_15_21\n\n    # The sum of the factors of a product of prime powers is the product of the sums of the geometric series for each prime power.\n    # The prime factorization of the number is 3^2 * 5 * 7, so the sum of factors will be:\n    # (1 + 3 + 3^2) * (1 + 5) * (1 + 7)\n    sum_factors = (1 + 3 + 9) * (1 + 5) * (1 + 7)\n\n    return sum_factors\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('0123456789'):\n        if perm[0] != '8':\n            continue\n        num = ''.join(perm)\n        if all(int(num[:i]) % i == 0 for i in range(1, 10)):\n            return int(num)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda = 36\n    belinda_after = belinda - 7\n    matthew = belinda_after\n\n    return matthew\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = 50 / 100\n    increased_rate = original_rate + (original_rate * efficiency_increase)\n    return increased_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n    \n    # The difference between the two numbers \n    diff = abs(2012 - 1274)\n    \n    # To get the largest possible value of D, we need to find the greatest common divisor of the difference.\n    greatest_divisor = gcd(diff, diff)\n    \n    # Now, we need to find the largest odd divisor of greatest_divisor\n    while greatest_divisor % 2 == 0:\n        greatest_divisor //= 2\n    \n    # Given 2012 = D*q_1 + R and 1274 = D*q_2 + R, therefore 2012 - 1274 = D(q_1 - q_2)\n    # Thus, R = 2012 - D*q_1\n    # So the largest value of D - R is D - (2012 - D*q_1), which is max for q_1 = 1\n    # Then, largest D - R is equal to D - (2012 - D)\n    result = greatest_divisor - (2012 - greatest_divisor)\n    \n    return result\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize the list to represent whether the state is winning (True) or losing (False) for the player \n    # who is about to write numbers. The index represents the number of numbers left to write.\n    state = [False] * 53\n\n    # Go through each state from 1 to 52, since state 0 is trivially a losing state as there are no\n    # more numbers to write\n    for i in range(1, 53):\n        # For each move (1, 3, 4, or 6), check if making that move would result in a losing state \n        # for the opponent. If so, the current state is winning.\n        moves = [1, 3, 4, 6]\n        state[i] = any(i - move >= 0 and not state[i - move] for move in moves)\n    \n    # If the first state (with all 52 numbers left) is a winning state, then Betty should go first,\n    # otherwise she should go second.\n    if state[52]:\n        return \"First\", \"Betty should write 1 number. Afterward, whatever Abby writes, Betty should write a number such that the total of the two moves is 7. This ensures that Betty always reaches a multiple of 7 before Abby, keeping control of the game.\"\n    else:\n        return \"Second\", \"Betty should go second and respond to Abby's move by making the total of their two moves add up to 7. For example, if Abby writes 1 number, Betty should write 6 numbers. This ensures that Betty always reaches a multiple of 7, keeping control of the game.\"\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((1, 5), (1, 6), (1, 7))\n    smallest_number, _ = solve_congruence(*congruences)\n    return smallest_number\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remaining_after_grace = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_juice = remaining_after_grace - given_to_evelyn\n\n    return remaining_juice\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of 4^2009 by finding the pattern of the last digit of powers of 4\n    powers_of_4_pattern = [4, 6, 4, 6] # The pattern repeats every 2 cycles\n    last_digit_4 = powers_of_4_pattern[2009 % 2]\n\n    # Calculate the last digit of 6^2010 (any power of 6 will have last digit 6)\n    last_digit_6 = 6\n\n    # Add the last digits and find the last digit of the sum\n    sum_last_digit = (last_digit_4 + last_digit_6) % 10\n\n    return sum_last_digit\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 32):\n        for five_gram_weights in range(0, 13):\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    n1, sum1 = 8, 32  # The sum of the first 8 terms is 32\n    n2, sum2 = 22, 44  # The sum of the first 22 terms is 44\n    n3 = 15  # We need to find the sum of the first 15 terms\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (a1 + an)\n    # S_n1 = n1/2 * (a1 + a8)\n    # S_n2 = n2/2 * (a1 + a22)\n    # We have two equations:\n    # n1/2 * (2*a1 + (n1-1)*d) = sum1 >> 1\n    # n2/2 * (2*a1 + (n2-1)*d) = sum2 >> 2\n    # We need to find S_n3 = n3/2 * (2*a1 + (n3-1)*d)\n    # We can find a1 and d from the above equations and then use it to find S_n3\n\n    # From equation 1 and 2, we can express a1 in terms of d, and then find d\n    # Then we use d to find a1, and finally we calculate S_n3\n\n    # Rearrange equation 1 to find a1 in terms of d: n1 * a1 + n1*(n1-1)/2 * d = 2*sum1\n    # a1 = (2*sum1 - n1*(n1-1)/2 * d) / n1 >> 3\n\n    # Substitute a1 from equation 3 into equation 2 and solve for d\n    a1_expr = (2*sum1 - n1*(n1-1)/2) / n1  # Expression for a1 without d\n    d = (2*(sum2 - (n2/2)*a1_expr)) / (n2*(n2-1)/2 - n1*(n1-1)/2)  # Solve for d\n\n    # Now we have d, use it to get a1\n    a1 = a1_expr - (n1-1)/2 * d\n\n    # Now we have a1 and d, use them to get the sum of the first 15 terms\n    S_n3 = n3/2 * (2*a1 + (n3-1)*d)\n\n    return S_n3\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_6 = 6 * 150\n    average_height_4 = 150 - 2\n    total_height_4 = 4 * average_height_4\n    total_height_other_2 = total_height_6 - total_height_4\n    average_height_other_2 = total_height_other_2 / 2\n\n    return average_height_other_2\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the flow rates of the pipes A, B, and C with variables a, b, and c, respectively.\n    # Let's denote the total capacity of the pool with variable T.\n    a, b, c, T = symbols('a b c T')\n\n    # Setting up the equations based on the given conditions:\n    # Equation 1: for flow rates A and C, A contributes 18 tons when the pool is filled\n    eq1 = Eq(a + c, T)\n    eq2 = Eq(18*a, c)\n\n    # Equation 2: for flow rates B and C, B contributes 27 tons when the pool is filled\n    eq3 = Eq(b + c, T)\n    eq4 = Eq(27*b, c)\n\n    # Given B's flow rate is twice A's rate\n    eq5 = Eq(b, 2*a)\n\n    # Solving the system of equations for the unknowns a, b, c and T.\n    solutions = solve((eq1, eq2, eq3, eq4, eq5), (a, b, c, T))\n\n    return solutions[T]\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    answered_questions = total_questions - 1\n    score_correct = 4\n    score_incorrect = -2\n    rex_score = 66\n\n    for correct in range(answered_questions + 1):\n        incorrect = answered_questions - correct\n        if correct * score_correct + incorrect * score_incorrect == rex_score:\n            return correct\n            \nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum of the first part: 1 + 2 + 3 + ... + 19 + 20\n    sum_forward = sum(range(1, 21))\n    # Calculate the sum of the second part: 19 + 18 + ... + 2 + 1\n    sum_backward = sum(range(1, 20))\n    # The total sum is the sum of both parts\n    total_sum = sum_forward + sum_backward\n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from itertools import permutations\n    all_colors = ['red', 'yellow', 'blue', 'green', 'purple']\n    color_permutations = permutations(all_colors, 4)\n    count = len(list(color_permutations))\n    return count\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    student_get = 1\n    while True:\n        total_students = (20 + student_get) // student_get\n        if (10 + (total_students+1) * student_get) % student_get == 0:\n            return student_get\n        student_get += 1\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_value = 9.32\n    increase_by_fraction = 1 / 10\n    increased_value = initial_value + (initial_value * increase_by_fraction)\n    return increased_value\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n\n    if fraction > decimal:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water_ml = 1000  # Total water in the jug in milliliters\n    water_per_cup_ml = 200  # Water poured into each cup in milliliters\n    number_of_cups = 3  # Number of cups\n\n    water_used_ml = water_per_cup_ml * number_of_cups  # Total water used\n    water_left_ml = total_water_ml - water_used_ml  # Water left in the jug\n\n    return water_left_ml\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, added_flowers = symbols('original_roses original_daisies months added_flowers')\n\n    total_original = Eq(original_roses + original_daisies, 300)\n    future_roses = Eq(original_roses + months * added_flowers, 280)\n    future_daisies = Eq(original_daisies + months * added_flowers, 180)\n    same_added_amount = Eq(original_roses - original_daisies, 280 - 180)\n    \n    solutions = solve((total_original, future_roses, future_daisies, same_added_amount), (original_roses, original_daisies, months, added_flowers))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    half_questions = total_questions / 2\n    first_day = half_questions + 7  # Completed on the 1st day\n    remaining_after_first = total_questions - first_day\n    half_remaining = remaining_after_first / 2\n    second_day = half_remaining - 5  # Completed on the 2nd day\n    remaining_after_second = remaining_after_first - second_day\n    third_day = 23  # Completed on the 3rd day\n\n    # Set up the equation representing the third day as the remaining questions\n    equation = Eq(remaining_after_second, third_day)\n    \n    # Solve the equation to find the total number of questions\n    solution = solve(equation, total_questions)\n    return solution[0]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10\n    \n    common_difference = (fifteenth_term - tenth_term) // position_diff\n    \n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # The lights that remain on are the ones that have been switched an odd number of times.\n    # A light is toggled once for each of its divisors.\n    # A light will be toggled an odd number of times only if it has an odd number of divisors.\n    # The only numbers with an odd number of divisors are perfect squares.\n    # Thus, we need to count the number of perfect squares from 1 to 250.\n    # Initialize count\n    count = 0\n    # Go through each number to see if it is a perfect square\n    for i in range(1, 251):\n        if (i**0.5).is_integer(): # Check if square root is an integer\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Calculate number of problems correct on each test\n    correct_10_problem_test = 10 * 0.20\n    correct_20_problem_test = 20 * 0.80\n    correct_30_problem_test = 30 * 0.90\n\n    # Calculate total number of problems correct\n    total_correct = correct_10_problem_test + correct_20_problem_test + correct_30_problem_test\n\n    # Calculate total number of problems\n    total_problems = 10 + 20 + 30\n\n    # Calculate overall percentage\n    overall_percentage = (total_correct / total_problems) * 100\n\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Calculate the area of each 6 dm (60 cm) side square brick in cm^2\n    area_per_brick_6dm = (60 * 60)\n\n    # Total area to be covered in cm^2 using 6 dm bricks\n    total_area = 80 * area_per_brick_6dm\n\n    # Area of each 64 cm^2 brick\n    area_per_brick_64cm = 64\n\n    # Calculate the number of 64 cm^2 bricks needed\n    num_bricks_64cm = total_area / area_per_brick_64cm\n\n    return int(num_bricks_64cm)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle, bag = symbols('bottle bag')\n    equation1 = Eq(2 * bottle + 3 * bag, 2.55)\n    equation2 = Eq(bottle - bag, 0.15)\n\n    solutions = solve((equation1, equation2), (bottle, bag))\n\n    return solutions[bag]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            max_number = max(max_number, number)\n\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    excess_girls = 30\n    \n    # Let x be the number of boys, then x + 30 is the number of girls.\n    # x + x + 30 = total pupils\n    # 2x + 30 = 500\n    # 2x = 500 - 30\n    x = (total_pupils - excess_girls) / 2\n    num_girls = x + excess_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False  # 91 is not a prime number because it is divisible by i\n    return True  # 91 would be a prime number if it wasn't divisible by any i\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    # Number of digits in A is determined by the log10(A).\n    # Using the fact that log(ab) = log(a) + log(b), and considering exponents, \n    # log(4^n * 25^n) = n*log(4) + n*log(25)\n    # where n = 2018 in our case.\n    import math\n\n    n = 2018\n    num_of_digits = math.floor(n * math.log10(4) + n * math.log10(25)) + 1\n    \n    return num_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10  # length of Ribbon A is given as 10cm\n    length_B = 5 * length_A  # Ribbon B is five times as long as Ribbon A\n\n    total_length = length_A + length_B  # total length of Ribbon A and B combined\n\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    ans = comb(total_players, team_size)\n    \n    return ans\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Initialize a variable to represent the side length difference between boys and girls\n    diff = 2\n\n    # The total number of students can be expressed as the sum of the square of boys' side length\n    # and the square of the girls' side length because they're arranged in square arrays.\n    # For boys, the side length is 's' and for girls, it is 's - diff'.\n    # The difference in their counts is 31 and is given by the equation:\n    # boys = s^2, girls = (s - diff)^2 => s^2 - (s - diff)^2 = 31\n\n    # Start checking for the side length 's' with an initial guess. \n    # Increase 's' until the condition is met.\n    s = 1\n    while s**2 - (s - diff)**2 != 31:\n        s += 1\n\n    # Once the condition is satisfied, calculate the total number of students,\n    # which is the sum of the squares of the boys' side length and girls' side length.\n    # Since the girls are surrounded by boys, we consider from the center to outward,\n    # Thus we must add the square of all even side lengths (girls) from 2 to s-1, inclusive.\n    total_students = s**2\n    for even_side_length in range(2, s, diff):\n        total_students += even_side_length**2\n\n    # Return the total number of students.\n    return total_students\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n\n    # Calculate the cost price based on the profit percentage\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    # Calculate the new profit percentage based on a profit of $5000\n    new_profit_percentage = (5000 / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of apples Mr. Aziz had at first.\n    x = symbols('x')\n\n    # He sold 1/5 of the apples on Monday.\n    monday_sold = x / 5\n\n    # He sold 80 apples on Tuesday.\n    tuesday_sold = 80\n\n    # He was left with 30% of the apples.\n    # Which means he sold 70% of the apples.\n    apples_left = 0.3 * x\n\n    # The equation representing the situation is:\n    # Apples at start - Apples sold on Monday - Apples sold on Tuesday = Apples left\n    equation = Eq(x - monday_sold - tuesday_sold, apples_left)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the number of apples Mr. Aziz had in the end, which is 30% of the total.\n    apples_in_the_end = int(0.3 * solution[0])\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since we have identical balls, the order of the piles does not matter.\n    # We only need to consider the number of balls in each pile.\n    for pile1 in range(1, 10 - 2):  # Pile 1 can have at least 1 ball and at most 7 balls.\n        for pile2 in range(pile1 + 1, 10 - 1):  # Pile 2 needs more balls than pile1, but less than what's remaining.\n            pile3 = 10 - (pile1 + pile2)  # Pile 3 gets the remaining balls\n            if pile3 > pile2:  # Ensure that the pile3 has more balls than pile2 (and implicitly more than pile1)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14): # start from x1 + 1 to ensure x2 > x1\n            x3 = 14 - x1 - x2\n            if x3 > x2: # ensure x3 > x2 > x1\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    # Emily is directly behind Danny, so we count them as 2 people together\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # We will use symbols to represent the first term of the consecutive even numbers.\n    first = symbols('first')\n    \n    # Define the terms based on the first term using the property of consecutive even numbers.\n    fourth = first + 2 * 3\n    seventh = first + 2 * 6\n    \n    # Create an equation based on the given condition.\n    equation = Eq(fourth, (1/3) * (first + seventh) + 6)\n    \n    # Solve the equation for the first term.\n    first_term = solve(equation, first)[0]\n    \n    # Calculate the sum of the seven consecutive even terms.\n    sum_of_terms = sum(first_term + 2 * i for i in range(7))\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    num_pieces = 2\n\n    length_of_each_piece = length_of_wood / num_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_meters_conversion_factor = 1000\n    km = 1.5\n    meters = km * km_to_meters_conversion_factor\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of all 9 numbers\n    sum_with_outlier = total_sum - 180  # Total sum without the 180 number\n    average_without_outlier = sum_with_outlier / 8  # Average of the remaining 8 numbers\n    return average_without_outlier\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    # Given equations based on the problem\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n    \n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers  # Twice as many red markers as blue\n    green_markers = blue_markers + 45  # 45 more green markers than blue\n\n    total_markers = red_markers + blue_markers + green_markers  # Sum of all markers\n\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends, we subtract one tree from the total count per side\n    trees_per_side = (highway_length // distance_between_trees) + 1\n\n    # Trees are planted on both sides of the highway\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    n = 20\n\n    nth_odd = first_odd + (n - 1) * difference\n\n    return nth_odd\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver overtook 5 cars and finished in second place,\n    # it means there was one car that was not overtaken, the one in the first place.\n    # Therefore, we just add the number of overtaken cars + 2 (first place and Ferrari itself)\n    num_cars = 5 + 2  # The overtaken cars, plus the first place and the Ferrari driver's car\n\n    return num_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n\n    total_price = lily_book_price + amy_book_price\n\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    sum_of_angles = (num_sides - 2) * 180\n    interior_angle = sum_of_angles / num_sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = sum(int(\"5\" * i) for i in range(1, 21))\n    ans = total % 10000  # Getting the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Assuming work rate is uniform and no breaks are taken\n    # 2 men take 3 days to build 1 wall\n\n    # 1 man will take double the days (2*3=6) to build 1 wall (Work is inversely proportional to men)\n    # Multiply the days by the number of walls (x), because time taken is directly proportional to work done\n    # Divide the product by the number of men (y), because work done is inversely proportional to number of men\n\n    days_for_one_man_to_build_one_wall = 2 * 3\n    days_for_one_man_to_build_x_walls = days_for_one_man_to_build_one_wall * x\n    days_for_y_men_to_build_x_walls = days_for_one_man_to_build_x_walls / y\n    \n    return days_for_y_men_to_build_x_walls\n\n# The final result 'ans' will be calculated by calling the solution function with specific values for x and y\n# For example:\n# ans = solution(3, 4)  # If we need to find how long it takes for 4 men to build 3 walls"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1/5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked_shirts = symbols('checked_shirts')\n    total_shirts = 72\n    white_shirts = 7 * checked_shirts\n    equation = Eq(white_shirts + checked_shirts, total_shirts)\n    solutions = solve(equation, checked_shirts)\n    white_shirts_sold = 7 * solutions[0]\n    return white_shirts_sold\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n\n    equations = [\n        Eq(x % 3, 2),\n        Eq(x % 4, 3),\n        Eq(x % 5, 4)\n    ]\n\n    solutions = solve(equations)\n\n    for solution in solutions:\n        if solution > 0 and solution < 100:\n            return solution\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    max_num = 0\n    for num in range(100, 1000):\n        if num % 9 == 0 and num % 2 != 0:  # odd and divisible by 9\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:  # tens digit is divisible by 4\n                max_num = max(max_num, num)\n    return max_num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # The pattern is not provided in the question\n    # Without further information or clarification on the specific pattern,\n    # it is not possible to provide a solution.\n    # Please provide the pattern or the picture mentioned in the question.\n\n    # Placeholder for the pattern analysis process\n    # since no pattern is given, no solution can be reached.\n    # The code below is just a placeholder and does not solve the stated problem.\n    # ans = analyze_pattern(provided_pattern)\n    \n    ans = None  # As no pattern is provided, the answer is set to None\n\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Pigeonhole principle dictates that if we want to ensure at least two balls of the same color,\n    # we consider the worst-case scenario where every time we pick a ball of a different color.\n\n    # We have three colors: white, red, and green.\n    # After 3 draws, we may have 1 ball of each color (the worst-case scenario without repetitions).\n    # If we draw one more ball (4th draw), we are guaranteed to have a pair of balls of the same color.\n\n    return 4  # The minimum number of draws required to ensure a pair of the same color.\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # One-third of the number of girls is equal to one-half of the number of boys\n    equation1 = Eq(girls / 3, boys / 2)\n    # The total number of children is the sum of the number of boys and girls\n    equation2 = Eq(girls + boys, 390)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(7, 54, 5):  # Start from 7 because it's the first multiple of 5 after 6\n        if (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # From January to April\n    jan_to_apr = 300 * 4\n    # From May to July\n    may_to_jul = 250 * 3\n    # From August to September\n    aug_to_sep = 750\n    # From October to December\n    oct_to_dec = 300 * 3\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_spent = total_spent / 12\n\n    return average_spent\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    number = (24 * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    total_kg_5_days = 24\n    days = 8.5\n    kg_per_day = total_kg_5_days / 5\n\n    total_kg_8_5_days = kg_per_day * days\n\n    return total_kg_8_5_days\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = (100 - 2) / 100\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    bottom_temp = 17\n    top_temp = -2\n    overall_drop = bottom_temp - top_temp\n    return overall_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_when_tom_reaches_father_age = 70\n\n    age_difference = father_age_when_tom_reaches_father_age - tom_age_now\n    father_age_now = tom_age_now + age_difference\n\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_ratio = 9 / 20\n    women_percentage = 30\n\n    men_count = total_passengers * men_ratio\n    women_count = total_passengers * (women_percentage / 100)\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure = datetime.strptime(\"07:35\", \"%H:%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = train_departure + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "from itertools import product\n\ndef solution():\n    possible_values = []\n    for digits in product(range(4), repeat=4):\n        if sum(digits) == 5:\n            num_base_4 = sum(digit * (4**idx) for idx, digit in enumerate(reversed(digits)))\n            digits_base_6 = []\n            num_temp = num_base_4\n            while num_temp > 0:\n                digits_base_6.append(num_temp % 6)\n                num_temp //= 6\n            if sum(digits_base_6) == 8:\n                digits_base_8 = []\n                num_temp = num_base_4\n                while num_temp > 0:\n                    digits_base_8.append(num_temp % 8)\n                    num_temp //= 8\n                if sum(digits_base_8) == 9 and num_base_4 < 200:\n                    possible_values.append(num_base_4)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # The first digit can be either 2 or 3 (cannot be 0)\n    first_digit_options = 2\n\n    # The second and third digits can be 0, 2, or 3\n    other_digit_options = 3\n    \n    # Total number of different three-digit numbers\n    total_numbers = first_digit_options * other_digit_options * other_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_of_six = 1.10\n    cost_of_twelve = cost_of_six * 2\n    return cost_of_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # pence\n    amount_available = 200  # pence, since £2 is 200 pence\n    num_bags = amount_available // price_per_bag\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let's denote the number of acorns Chip had initially as x\n    # After giving 14 acorns, Chip has (x - 14) acorns\n    # Dale has (total_acorns - x) acorns before receiving the 14 from Chip\n    # After receiving 14 acorns, Dale has (total_acorns - x + 14)\n    # Chip and Dale have the same number of acorns after the exchange\n    # So, we have the equation: x - 14 = total_acorns - x + 14\n    # Solving for x\n    x = (total_acorns + 14 * 2) // 2\n    return x\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # Using the formula for permutations of items where there are duplicates:\n    # Total arrangements = total_books! / (fiction_books! * comic_books!)\n    ans = factorial(total_books) / (factorial(fiction_books) * factorial(comic_books))\n    return int(ans)\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(4, 100):\n        if num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    primes.sort(reverse=True)\n\n    sum_of_primes = 51\n    count = 0\n\n    for prime in primes:\n        while sum_of_primes >= prime:\n            sum_of_primes -= prime\n            count += 1\n        if sum_of_primes == 0:\n            break\n\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    trays_bought = 4\n    total_eggs = eggs_per_tray * trays_bought\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 41, 2):\n        total_sum += (i+1) - i\n    return total_sum\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    # Let's say x is the number of 3-page letters Oni wrote and y is the number of 4-page letters.\n    # x + y = 11 (because Oni has 11 penpals)\n    # 3x + 4y = 38 (because Oni wrote 38 pages in total)\n    \n    # We can write two equations:\n    # y = 11 - x (from the first equation)\n    # Substitute y in the second equation:\n    # 3x + 4(11 - x) = 38\n    # 3x + 44 - 4x = 38\n    # -x = 38 - 44\n    # x = 44 - 38\n    x = 44 - 38\n\n    return x\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    result = 36 * 24\n    return result\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    used_apples_kg = (750 + 1025) / 1000  # converting grams to kilograms\n\n    remaining_apples_kg = total_apples_kg - used_apples_kg\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    total_people = people_in_front_of_amy + amy_position_from_back\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    number_of_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / number_of_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # In the worst case, you draw all 5 red balls, then all 5 white balls.\n    # The next draw, no matter what, will give you a ball of a different color.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the shorter piece of ribbon be x meters long\n    x = symbols('x')\n\n    # If one piece is twice as long as the other, then the longer piece is 2x meters long\n    # The total length of ribbon is the sum of the lengths of the shorter and longer pieces\n    # Therefore, the equation representing the total length is: x + 2x = 12.75\n    \n    equation = Eq(x + 2*x, 12.75)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    # The solution will contain the length of the shorter piece, but we want the length of the longer piece\n    longer_piece_length = 2 * solution[0]\n\n    return float(longer_piece_length)\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    favorite_book_position_from_left = 14\n    books_on_right_of_favorite = 6\n    total_books = favorite_book_position_from_left + books_on_right_of_favorite\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    scaling_factor = 1/2 * 1/2 * 1/2  # Each dimension is halved, so the volume scales down by the cube of 1/2\n    new_volume = original_volume * scaling_factor\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins = symbols('gigi lily coins')\n\n    # Gigi had 120 coins before and now has 3 times what Lily has\n    equation1 = Eq(gigi + coins, 3 * (lily + coins))\n    \n    # Lily had 24 coins before\n    equation2 = Eq(lily, 24)\n    \n    # Gigi had 120 coins before\n    equation3 = Eq(gigi, 120)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins))\n\n    return solutions[coins]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    num_primes = len(primes)\n    total_cards = 20\n    non_prime_cards = total_cards - num_primes\n\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    for b_age in range(15, 100):\n       f_age = 41 + (b_age - 14)\n       if str(b_age).zfill(2) == str(f_age).zfill(2)[::-1]:\n           return b_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate over all the 3-digit numbers\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # The ones digit must be even since the number is odd\n                if (hundreds + tens + ones) == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since you can boil multiple eggs at the same time,\n    # the least amount of time it takes to boil 3 eggs is the same\n    # amount of time it takes to boil one egg, which is 5 minutes.\n    return 5\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    import math\n    students = 35\n    cabin_capacity = 6\n    min_cabins = math.ceil(students / cabin_capacity)\n    return min_cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_g = initial_dough_kg * 1000\n    total_dough_used_g = (num_cookies * cookie_dough_g) + (num_brownies * brownie_dough_g)\n    dough_left_g = total_dough_g - total_dough_used_g\n    dough_left_kg = dough_left_g / 1000\n\n    return round(dough_left_kg, 2)\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Let d be the number of calories Dan can take in today.\n    # The inequality would be d < calories_yesterday.\n    # Since he wants to take in less than 1000 calories, we represent this as\n    ans = 'd < 1000'\n    return ans\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    # Number of biscuits left after the second day\n    remaining_after_second_day = 10\n    \n    # Inverse of the operation from the second day\n    before_eating_second_day = (remaining_after_second_day + 2) * 2\n    \n    # Inverse of the operation from the first day\n    total_biscuits = (before_eating_second_day + 4) * 2\n    \n    return total_biscuits\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the unknowns\n    n = symbols('n', integer=True) # number of terms in the sequence\n    a1 = symbols('a1') # first term\n    d = symbols('d') # common difference\n    \n    # The sum of an arithmetic sequence can be calculated using the formula S = n/2 * (a1 + aN),\n    # where aN is the last term of the sequence. aN can be expressed as a1 + (n-1)*d.\n    # The sum of the first 4 numbers is the sum of the first 4 terms of the sequence.\n    equation1 = Eq(4/2*(a1 + a1 + 3*d), 124)\n    \n    # The sum of the last 4 numbers is the sum of the last 4 terms of the sequence.\n    equation2 = Eq(4/2*(a1 + (n-1)*d + a1 + (n-4)*d), 156)\n    \n    # The sum of all the terms in the sequence is given.\n    equation3 = Eq(n/2*(2*a1 + (n-1)*d), 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (n, a1, d))\n\n    # We're interested in the number of terms, which should be a positive integer\n    for solution in solutions:\n        if solution[n] > 0 and solution[n].is_integer:\n            return solution[n]\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_money = 100\n    days = 15\n    daily_change = [5, -8]  # Deposit 5 on the first day, spend 8 on the second day\n\n    money = initial_money\n    for i in range(days):\n        money += daily_change[i % 2]\n        \n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n\n    wine_gums_per_child = total_wine_gums / children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    # Compute the following:\n    ans = (10**3) + 20 - (3**4)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    # when giving each friend 18 pieces, she has 41 in excess\n    equation1 = Eq(chocolates - 18 * friends, 41)\n\n    # when giving each friend 23 pieces, she is short of 34 pieces\n    equation2 = Eq(chocolates - 23 * friends, -34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n    \n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "from itertools import combinations\n\ndef solution():\n    candidates = range(100, 1000)\n\n    def is_multiple_of_27(number):\n        return number % 27 == 0\n\n    def is_multiple_of_7(number):\n        return number % 7 == 0\n\n    def sum_of_digits_is_17(number):\n        return sum(map(int, str(number))) == 17\n\n    def is_perfect_square(number):\n        return int(number**0.5) ** 2 == number\n\n    def is_factor_of_89100(number):\n        return 89100 % number == 0\n\n    checks = [\n        is_multiple_of_27,\n        is_multiple_of_7,\n        sum_of_digits_is_17,\n        is_perfect_square,\n        is_factor_of_89100\n    ]\n\n    for candidate in candidates:\n        truths = [check(candidate) for check in checks]\n        if truths.count(True) == 3:\n            return candidate\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_on_book = total_money * 0.15\n    remaining_after_book = total_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.30\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    best_boy_pushups = 50\n    mulan_pushups = best_boy_pushups + 1\n    return mulan_pushups\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons = 40\n    blown_up_initially = 22\n    burst_balloons = 3\n    \n    remaining_balloons = total_balloons - (blown_up_initially - burst_balloons)\n    \n    return remaining_balloons\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # Teams that have played nine games each\n    played_nine = 15\n    # Teams that have played ten games each\n    played_ten = 7\n    \n    # Calculate the total number of games played by the teams\n    total_games_played = (played_nine * 9) + (played_ten * 10)\n    \n    # Calculate the total number of games needed for a round-robin tournament\n    total_teams = played_nine + played_ten\n    total_games_needed = (total_teams * (total_teams - 1)) // 2\n    \n    # Calculate the number of games yet to be played\n    games_to_play = total_games_needed - total_games_played\n\n    return games_to_play\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    remaining_candies = 88\n    num_children = 8\n    least_candies_for_max = 1  # Start with the least possible for the child with max candies\n\n    while remaining_candies > 0:\n        current_sum = sum(range(least_candies_for_max, least_candies_for_max + num_children))\n        \n        # Since each child must have at least one piece and they have different amounts,\n        # we start from the current max and work backwards to include the minimum for the others.\n        if current_sum <= remaining_candies:\n            remaining_candies -= current_sum\n            break\n        least_candies_for_max += 1\n        \n    ans = least_candies_for_max + num_children - 1  # The child with the most gets this many\n    \n    return ans\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # For Jerry to win, he should aim to leave an equal number of stones in both stacks.\n    # So, Jerry should take stones from Stack A.\n\n    stones_taken_from_a = 20 - 16  # To make both stacks equal.\n    stack = \"A\"  # Stack from which Jerry takes the stones.\n\n    return f\"Jerry must take {stones_taken_from_a} stone(s) from Stack {stack}.\"\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway = (15 + 37) / 2\n    return halfway\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    for girls in range(1, 1000):  # Assuming a realistic range for class size\n        boys = girls + 16\n        if girls / boys == 7 / 9:\n            total_pupils = girls + boys\n            return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_total = 37 * (1 + 1 + (37 - 1) * 3) // 2\n    mistake_diff = correct_total - 2011\n    mistaken_number = mistake_diff // 6\n    return mistaken_number + 1\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    shortcakes_made = 25 / milk_per_cake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let the middle number in the sequence of 5 consecutive numbers be 'm'\n    # Then the numbers are (m-2), (m-1), m, (m+1), (m+2)\n    # The sum of these 5 numbers is 5m, which is equal to 160\n    # Therefore, m = 160 / 5\n    m = 160 // 5\n\n    # The student with the most balls has (m+2) balls\n    max_balls = m + 2\n    return max_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # convert 2 meter stick to centimeters\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm  # use floor division to get the number of complete pieces\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    return comb(total_balls, balls_to_select)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # We need to find the continued fraction representation of 13/10.\n    # Start with 13/10 and subtract 1 to get the fraction in the form of 1/(a + ...)\n    frac = 13/10 - 1\n\n    # Calculate a, which is the whole number part of the reciprocal of frac\n    a = int(1/frac)\n\n    # Subtract a from the reciprocal of frac to get the next fractional part\n    frac = 1/frac - a\n\n    # Calculate b, which is the whole number part of the reciprocal of frac\n    b = int(1/frac)\n    \n    # Subtract b from the reciprocal of frac to get the next fractional part\n    frac = 1/frac - b\n\n    # Calculate c, which is the whole number part of the reciprocal of frac\n    # Since there's only one layer left, c is simply the denominator left after converting frac to a proper fraction\n    c = int(1/frac)\n\n    # Calculate the final result using the expression a + 2b + 3c\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # We only need to calculate the last digit of 8 to the power of 30,\n    # as the ones digit in base 10 is not affected by any other digit.\n    # Cycle of the last digit for the powers of 8: 8, 4, 2, 6 and repeats.\n    # We can notice that 8 to the power of any number ending with 0 will\n    # have a ones digit of 6, because 30 % 4 = 2, and the cycle index for 8^2 is 6.\n    \n    # Therefore, the ones digit of 8^30 is 6.\n    return 6\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    total_days = total_pages / pages_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * points_correct + incorrect * points_incorrect == 52:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    while 100 >= days * (days + 1) // 2:\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_hand_side = 0.3 * 100\n    right_hand_side = 150\n    ans = right_hand_side / left_hand_side\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_result = sum(number for number in range(1, 21) if number % 6 == 1)\n    return sum_result\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # total weight of the sugar solution in grams\n    sugar_concentration = 0.48  # sugar concentration 48%\n    \n    sugar_weight = total_weight * sugar_concentration  # weight of sugar in the solution\n    water_weight = total_weight - sugar_weight  # weight of water in the solution\n    \n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # Because they were born in seven consecutive years, we have an arithmetic sequence\n    # The ages of the youngest three dwarfs are: x, x + 1, and x + 2\n    # Their sum according to the problem statement is 42\n    # x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    x = 39 // 3\n\n    # Now, we need to find the sum of the ages of the oldest three dwarfs\n    # The ages of the oldest three are: x + 4, x + 5, and x + 6\n    # Their sum is (x + 4) + (x + 5) + (x + 6)\n    # 3x + 15\n    # We already know that x = 13, so we can compute the sum\n    sum_oldest_three = (3 * x) + 15\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):  # Since N is less than 5\n        number = int(f\"12{N}4\")\n        if number % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # Given a four-digit number abcd, where a, b, c, d are its digits,\n    # we need to find its value given that abcd + abc + ab + a = 1370.\n    \n    # The value of abcd is 1000a + 100b + 10c + d.\n    # The value of abc is 100a + 10b + c.\n    # And so on.\n    # Therefore, the equation can be written as follows:\n    # 1000a + 100b + 10c + d + 100a + 10b + c + 10a + b + a = 1370.\n    \n    # Now, we can add the coefficients of a, b, c, and d respectively.\n    # This gives us:\n    # 1111a + 111b + 11c + d = 1370.\n    \n    # We are looking for the value of the four-digit number abcd,\n    # which will be obtained by finding a valid combination of digits a, b, c, d.\n    # We can solve for a first since it has the largest place value, then use it\n    # to solve for the other digits.\n    \n    # Since the smallest value for a must be 1 (so that abcd is a four-digit number),\n    # and the largest value for 1111a would be 9999 (if a=9), we can iterate over the\n    # possible values for a until we find one that satisfies the rest of the equation.\n    \n    for a in range(1, 10):  # a can be from 1 to 9 for a four-digit number\n        for b in range(0, 10):  # b can be from 0 to 9\n            for c in range(0, 10): # c can be from 0 to 9\n                d = 1370 - (1111 * a + 111 * b + 11 * c)  # solve for d\n                if 0 <= d < 10:  # d must be a single digit (0 to 9)\n                    return 1000 * a + 100 * b + 10 * c + d  # return the value of abcd\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "from fractions import Fraction\n\ndef solution():\n    sum_fractions = sum(Fraction(4, 5) for _ in range(5))\n    sum_numbers = sum(10**i * 19 for i in range(5))\n    ans = sum_numbers + sum_fractions\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_in_pence = 408\n    fraction = 5 / 8\n    result = amount_in_pence * fraction\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    age_difference_needed = 35 - current_total_age\n    years_needed = age_difference_needed // 2\n\n    return years_needed\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    total_marks_for_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - total_marks_for_2_tests\n\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += i / i  # the terms with numerator equal to denominator (i/i) will add up to 1\n        for j in range(1, i):\n            ans += 2 * j / i  # the terms other than i/i will appear twice in the sequence\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n\n    # Let's denote number of milk chocolates as 'milk_chocolates'\n    milk_chocolates = (3/4) * total_sweets\n\n    # And accordingly number of fruit drops as 'fruit_drops'\n    fruit_drops = 6  # given in the question\n\n    # From the given ratio of fruit drops to milk chocolates\n    equation = Eq(fruit_drops, (2/7) * milk_chocolates)\n\n    # Solving the equation\n    solutions = solve(equation.subs(milk_chocolates, (3/4) * total_sweets), total_sweets)\n\n    # Assuming there is only one positive solution as the total number of sweets must be positive\n    ans = solutions[0]\n\n    return ans\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for football and volleyball prices\n    football_price, volleyball_price = symbols('football_price volleyball_price')\n\n    # Create the equations based on the problem statement\n    eq1 = football_price + 2 * volleyball_price - 60\n    eq2 = 2 * football_price - 16 - 60\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (football_price, volleyball_price))\n\n    # Extract volleyball price from the solutions\n    volleyball_price = solutions[volleyball_price]\n\n    return volleyball_price\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Given the information, we analyze each case:\n    # From 1703 and 3541, 3 cannot be the first digit.\n    # From 2745 and 1703, 2 and 7 cannot be the correct ones\n    # Combined with 1703, we can infer that 0 must be the second digit, and 3 must be the third digit.\n    # From 3541, we know 4 cannot be the last digit, and it cannot be the first (from 2745).\n    # Thus, 4 is the second digit, but we already determined the second digit to be 0.\n    # Therefore, 4 must be the first digit.\n    # By elimination, 1 is the last digit.\n    return 4031\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_to_n = n * (n + 1) // 2\n    ans = sum_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the ages of the students as symbols.\n    a, b, c, d, e = symbols('a b c d e')\n\n    # We know that the mode is 7, which means at least two members have the age of 7.\n    equation1 = Eq(a, 7)\n    equation2 = Eq(b, 7)\n\n    # We also know that the mean age is 9, which means the sum of ages is 9 * 5 = 45.\n    equation3 = Eq(a + b + c + d + e, 45)\n\n    # The median age is 8; because we have the ages in order, this means c is 8.\n    equation4 = Eq(c, 8)\n\n    # Finally, the age range is 6, which means the eldest member is 7 + 6 = 13.\n    # So, e is the eldest member and a or b is the youngest.\n    # Since 7 is the mode, either d is the second oldest member.\n    # We need to solve for d, given that e - d = 6.\n    equation5 = Eq(e, 13)\n\n    # Now we solve the equations.\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, d, e))\n\n    # The second oldest member would be 'd'.\n    return solutions[d]\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    # There are three books to arrange, so we just need to calculate 3!\n    num_arrangements = factorial(3)\n    return num_arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(5)  # Total ways to arrange 5 people\n    a_first_or_last = factorial(4) * 2  # Ways when A is first or last (A fixed, others permute)\n    return total_ways - a_first_or_last\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    \n    # Number of players in the knockout tournament\n    players = 16\n    # In a knockout tournament, each round eliminates half of the players\n    # Therefore the number of rounds is the logarithm base 2 of the number of players\n    rounds = math.ceil(math.log(players, 2))\n    \n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n\n    total = red + yellow\n\n    return total\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    # Let x be the initial number of girls.\n    # According to Ollie's initial ratio, boys:girls = 2:1, \n    # so boys:girls before additional children would be\n    # 1.5x:x (since the number of boys was 50% more than girls, which means boys = girls + 50% of girls = 1.5 girls).\n    # Now, x + 12 boys and x + 12 girls join the group making the ratio after 19:14.\n    \n    # Setting up the proportion of the number of boys to girls after additional children join:\n    # (1.5x + 12) / (x + 12) = 19 / 14\n    # Solving for x:\n    x = (12*14 - 19*12)/(19 - 1.5*14)\n\n    # Since x is the number of girls in the morning, the number of boys is 1.5x in the morning.\n    # Total number of children in the morning:\n    total_morning = (1.5*x) + x\n\n    # Total number of children in the afternoon (after 12 more boys and 12 more girls join):\n    total_afternoon = total_morning + 12 + 12\n    \n    # Return the total number of children in the afternoon\n    return int(total_afternoon)\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of apples and o be the number of oranges\n    a, o = symbols('a o')\n\n    # Original ratio of apples to oranges (3/8 = a/o)\n    original_ratio = Eq(3 * o, 8 * a)\n    # After removing one apple, new ratio (1/3 = (a-1)/o)\n    new_ratio = Eq(o, 3 * (a - 1))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (a, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if tens < hundreds and tens < ones and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n    def D(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1) * (D(n-1) + D(n-2))\n    ans = D(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(table, 2 * chair)  # A table cost two times as much as a chair\n    equation2 = Eq(2 * table + 3 * chair, 280)  # Two tables and three chairs cost $280\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    num_classmates = 10\n    notebook_cost = 3\n    pencil_cost = 9\n    \n    max_pencils = total_money // pencil_cost\n    \n    for pencils in range(max_pencils + 1):\n        notebooks = num_classmates - pencils\n        if notebooks * notebook_cost + pencils * pencil_cost == total_money:\n            return pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    students_total = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = students_total - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 32)])\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    from math import factorial\n\n    # Calculate the factorial of 50\n    factorial_50 = factorial(50)\n\n    # Initialize counter for zeros\n    zero_count = 0\n\n    # Count the number of trailing zeros in the factorial\n    while factorial_50 % 10 == 0:\n        zero_count += 1\n        factorial_50 //= 10\n\n    return zero_count\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Given that the sum of six consecutive even numbers is 510.\n    # Let the first even number be x. Then others will be x+2, x+4, ..., x+10.\n    # The sum of these numbers will be: x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) = 510\n    # Simplifying the sum: 6x + (2+4+6+8+10) = 510\n    # Calculate the constant sum: 2+4+6+8+10 = 30\n    # The equation will be: 6x + 30 = 510\n    # Find x: 6x = 510 - 30; x = 480 / 6; x = 80\n    # The numbers are: 80, 82, 84, 86, 88, 90\n    \n    first_even = (510 - 30) / 6\n    numbers = [first_even + 2 * i for i in range(6)]\n    \n    # Mean is the sum of the numbers divided by the count of numbers.\n    mean = sum(numbers) / len(numbers)\n\n    # Median for even number of elements is the average of the two middle numbers.\n    median = (numbers[2] + numbers[3]) / 2\n\n    # The difference between the mean and the median of the numbers.\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    # Let x be the number of games played\n    # Helen's new amount is (helen_original + x) and Oliver's new amount is (oliver_original - x)\n    # Helen has 10 more cards than Oliver, helen_original + x = (oliver_original - x) + 10\n    # rearrange the equation for x: x = (helen_original - oliver_original + 10) / 2\n    x = (helen_original - oliver_original + 10) // 2\n    # Helen's new amount of cards is helen_original + x\n    helen_now = helen_original + x\n    \n    return helen_now\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    total_value = A + B + C\n\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    # Calculate the amount of sugar based on the concentration\n    total_weight = 250  # Total weight of the sugar solution\n    concentration = 0.65  # 65% concentration\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = 31\n    second_climb = 17\n\n    final_height = initial_height + first_climb - first_descent + second_climb\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtracting 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # If the smallest number is x, the five consecutive numbers are x, x+1, x+2, x+3, x+4.\n    # The sum of these five numbers is 5x + 10.\n    # Given that this sum is 40, we have 5x + 10 = 40.\n    # Solving for x, we get x = (40 - 10) / 5.\n    x = (40 - 10) / 5\n    return x\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Given values\n    fourth_term = 39\n    twelfth_term = 57\n    # The difference between terms in an arithmetic sequence is constant\n    term_difference = (twelfth_term - fourth_term) / (12 - 4)\n    # Calculate the first term using the term difference and the fourth term\n    first_term = fourth_term - (4 - 1) * term_difference\n    return first_term\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Find all unique permutations of the digits\n    digits = '0134689'\n    perms = [''.join(p) for p in permutations(digits) if p[0] != '0']\n\n    # Filter permutations that are divisible by 9\n    multiples_of_nine = [int(p) for p in perms if int(p) % 9 == 0]\n\n    # Calculate the largest possible value of (M - N) / 9\n    M = max(multiples_of_nine)\n    N = min(multiples_of_nine)\n    ans = (M - N) // 9\n    return ans\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '2']\n    all_combinations = set(permutations(digits))  # Get all unique permutations of digits\n    max_value = max(int(''.join(comb)) for comb in all_combinations)  # Find the maximum value\n    return max_value\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    num_str = \"four million four hundred and four\"\n    # Replace strings with their digit equivalent.\n    digits_mapping = {\n        'million': '000000',\n        'four': '4',\n        'hundred': '00',\n        'and': '',\n    }\n\n    # Replace words with corresponding digits using a loop\n    for word, digit in digits_mapping.items():\n        num_str = num_str.replace(word, digit)\n    \n    # Eliminating spaces and leading zeros if any\n    ans = int(num_str.replace(\" \", \"\"))\n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.3 + 20 * 0.2\n    total_solution = 30 + 20\n\n    # Let x be the grams of water added\n    # We want the final solution to be 10% salt\n    # (total_salt) / (total_solution + x) = 0.1\n\n    x = total_salt / 0.1 - total_solution\n\n    return x\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n    \n    corrected_sum = incorrect_sum - (incorrect_addend - correct_addend)\n\n    return corrected_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box = symbols('box')  # use 'box' as the variable for the integer in each box\n    equation = Eq(box ** 2 + box, 380)  # create the equation □ × □ + □ = 380\n\n    solution = solve(equation, box)  # solve the equation\n\n    integer_solution = [s for s in solution if s.is_integer][0]  # filter for the integer solution\n    \n    return integer_solution\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mangoes, strawberries = symbols('mangoes strawberries')\n    original_condition = Eq(mangoes, strawberries + 448)\n    after_giving_away = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((original_condition, after_giving_away), (mangoes, strawberries))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Johnson's speed is 600 m/min\n    # Vicky's speed is 250 m/min\n    # Race distance is 3000 m\n\n    # Johnson's time to finish the race\n    johnson_time = 3000 / 600\n    \n    # Vicky's time to finish the race\n    vicky_time = 3000 / 250\n    \n    # Difference in time\n    time_difference = vicky_time - johnson_time\n    \n    # Return the time difference in minutes\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To make sure we get 29 balls of one color, 28 balls of another color, and 10 balls of the last color,\n    # in the worst case scenario we would need to pick balls as follows:\n    # - pick all 40 red balls and still not have 29 balls of one color\n    # - pick all 30 white balls and still not have 29 balls of one color\n    # - then start picking the blue balls until we have 29, which will take picking 29 blue balls\n    \n    # After picking 29 blue balls, we will have 29 blue, 0 red (all 40 picked with white), and 0 white (all 30 picked with red)\n    # We would still need to continue to pick the remaining colors to get 28 balls of another color and 10 of the last color.\n    # Since we've already exhausted the red and white balls, we will continue picking blue balls.\n    \n    # Thus we will start picking until we have 29 of one color and 28 of another, which is achieved after picking 1 more blue ball\n    # Now we have 30 blue balls, 40 red balls, and 30 white balls = 100 balls in total to achieve the 29-28 count.\n    # To then ensure 10 balls of the last color, we don't need to pick anymore since we've already picked 40 red balls and 30 white balls.\n    \n    # In conclusion, the answer is 29 (to get 29 blue) + 40 (red) + 30 (white) + 1 (to get 28 blue) = 100\n    return 100\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # To guarantee at least 3 cards have the same number, consider the worst case scenario where\n    # the cards drawn have the maximum possible unique numbers before the third same numbered\n    # card is drawn using the Pigeonhole Principle.\n\n    # If we draw 2 cards of each number, we have 2 * 13 numbers = 26.\n    # Notice that drawing another card would cause at least one number to have a third card.\n\n    return 26 + 1  # Draw one more to get at least 3 cards of the same number.\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = sum(1 for x in range(1, 21) if isprime(x))\n    total_cards = 20\n\n    proportion = prime_count / total_cards\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    given_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n\n    # Calculate the total sum of the known numbers\n    total_sum_known = sum(given_numbers)\n\n    # Find the total sum if the mean is 8\n    total_sum_with_missing = mean_value * total_numbers\n\n    # Find the missing number\n    missing_number = total_sum_with_missing - total_sum_known\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume that gets transferred from each bottle\n    x = symbols('x')\n\n    # Amount of lime in Bottle A initially (litres * concentration)\n    lime_in_A = 5 * 0.10\n    # Amount of lime in Bottle B initially\n    lime_in_B = 3 * 0.20\n\n    # After transfer, the new volume of each bottle is (5 - x) for A and (3 + x) for B\n\n    # New concentration in A = (lime_in_A - 0.10 * x + 0.20 * x) / (5 - x)\n    # New concentration in B = (lime_in_B + 0.10 * x - 0.20 * x) / (3 + x)\n\n    # We set the two concentrations equal to each other and solve for x\n    equation = Eq((lime_in_A - 0.10 * x + 0.20 * x) / (5 - x), (lime_in_B + 0.10 * x - 0.20 * x) / (3 + x))\n\n    # Solve the equation for x\n    solution_volume = solve(equation, x)[0]\n\n    return solution_volume\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    # The sum of the first n natural numbers is given by the formula: S_n = n(n + 1) / 2\n    # So, sum of numbers from 1 to 50 is S_50 = 50 * 51 / 2 = 1275 (given)\n\n    # The sum of numbers from 2 to 51 is S_51 - 1 (Because we need to exclude the first number)\n    n = 51\n    sum_2_to_51 = (n * (n + 1) // 2) - 1  # Use integer division for whole numbers\n\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    # variable to count the number of ways\n    count = 0\n    \n    # generate all permutations of the students, considering C is not included yet.\n    for perm in permutations('ABDEFGH'):\n        # convert the tuple to a list to manipulate it\n        perm_list = list(perm)\n        # indices where A and B are located\n        idx_A = perm_list.index('A')\n        idx_B = perm_list.index('B')\n        \n        # to check if C can be placed between A and B, we need to ensure idx_A and idx_B are not next to each other.\n        if abs(idx_A - idx_B) != 1:\n            # now we have to add C to the position between A and B\n            idx_C = (idx_A + idx_B) // 2\n            perm_list.insert(idx_C, 'C')\n            \n            # check if D and E are next to each other in the new permutation with C included\n            idx_D = perm_list.index('D')\n            idx_E = perm_list.index('E')\n            if abs(idx_D - idx_E) == 1:\n                # check if F and G are next to each other in the same way\n                idx_F = perm_list.index('F')\n                idx_G = perm_list.index('G')\n                if abs(idx_F - idx_G) == 1:\n                    count += 1  # if all conditions are met, increment the count\n\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    price_combinations = set()\n\n    for notebook_price in notebook_prices:\n        for calendar_price in calendar_prices:\n            total_price = notebook_price + calendar_price\n            price_combinations.add(total_price)\n\n    return len(price_combinations)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    hundreds_digit = 0\n    number = 123\n    for i in range(1, 124):\n        hundreds_digit = (hundreds_digit + number * i) % 1000  # Keep track of the last three digits\n        number = number * 10 % 1000  # keep track of the last three digits of the base number as it grows\n\n    return (hundreds_digit // 100) % 10  # Extract the hundreds digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "from math import gcd\n\ndef solution():\n    # original dimensions\n    original_length = 90\n    length_ratio = 5\n    breadth_ratio = 2\n    \n    # new length after reduction\n    new_length = original_length - 70.5\n    \n    # determine the breadth based on the length and ratio\n    original_breadth = (original_length / length_ratio) * breadth_ratio\n    new_breadth = (new_length / length_ratio) * breadth_ratio\n    \n    # find the maximum breadth size for the lego by finding the GCD\n    greatest_common_divisor = gcd(int(new_length * 10), int(new_breadth * 10))\n    \n    # convert from tenths of cm to cm and return the maximum breadth size\n    max_breadth = new_breadth / greatest_common_divisor * greatest_common_divisor / 10\n    \n    return max_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    brother_total = total // 3  # Since Zoey has twice as much as her brother after losing one coin\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if total - coin == 2 * brother_total:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Applying the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # time taken by Jaan to finish the race\n    kane_distance = 200 - 12.5  # distance covered by Kane when Jaan finished\n    kane_speed = kane_distance / jaan_time  # speed of Kane\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_cost = 5.50\n    milk_cost = 3.75\n    voucher = 110 / 100  # Convert pence to pounds\n\n    total_cost = cake_cost + milk_cost\n    actual_payment = total_cost - voucher\n\n    return actual_payment\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    normal_hours = 8\n    worked_hours = 10\n    overtime_hours = worked_hours - normal_hours\n\n    overtime_rate = normal_rate * overtime_multiplier\n    total_earnings = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_earnings\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their work rates\n    john_rate, raj_rate, pete_rate = symbols('john_rate raj_rate pete_rate')\n\n    # Convert minutes to hours\n    one_hour = 1\n    one_hour_twelve_minutes = 1 + 12 / 60\n    one_hour_thirty_minutes = 1 + 30 / 60\n\n    # Set up equations based on rates and time taken for each combination\n    # All three together finish in 1 hour\n    equation1 = Eq(john_rate + raj_rate + pete_rate, 1 / one_hour)\n    # John and Raj together finish in 1 hour and 12 minutes\n    equation2 = Eq(john_rate + raj_rate, 1 / one_hour_twelve_minutes)\n    # Raj and Pete together finish in 1 hour and 30 minutes\n    equation3 = Eq(raj_rate + pete_rate, 1 / one_hour_thirty_minutes)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (john_rate, raj_rate, pete_rate))\n\n    # Calculate time for Raj to complete the job by himself (in hours, then convert to minutes)\n    raj_time_hours = 1 / solutions[raj_rate]\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the elder brother (e) and younger brother (y)\n    e, y = symbols('e y')\n\n    # First equation: The current ages of two brothers add up to 42\n    equation1 = Eq(e + y, 42)\n\n    # Second equation: A few years ago, the elder brother's age was y, and the younger brother's \n    # age was half the elder brother's current age, so we use e - y to denote the difference in \n    # their ages at that time\n    equation2 = Eq(y, (e - (e - y)) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, y))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Find the number of times '928' repeats to form the pattern\n    repeat_count = 99 // 3\n    \n    # Since '928' is divisible by 9, all we care about is the remainder of the last part if 99 is not divisible by 3\n    remainder_digits = 99 % 3\n    \n    # Take the required number of digits from the start of '928' to form the remainder\n    last_part = \"928\"[:remainder_digits]\n    \n    # Calculate the remainder when the last part is divided by 9\n    remainder = int(last_part) % 9 if last_part else 0\n    \n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Worst case scenario:\n    # Taking 2 balls of each color, we still can't guarantee we have 3 of the same color.\n    # Thus, upon taking one more, we are sure to have 3 of the same color.\n    balls_needed = (2 * 4) + 1  # 2 each from white, blue, green, orange + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The problem can be represented by the following system of congruences:\n    #  x ≡ 1 (mod 5)\n    #  x ≡ 1 (mod 6)\n    #  x ≡ 1 (mod 7)\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):  # Tens digit must be from 1 to 9\n        for ones in range(10):  # Ones digit must be from 0 to 9\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    matches = Symbol('matches')\n    teams = Symbol('teams')\n    \n    # There are (teams choose 2) * 2 matches in total (because each team plays each other team twice)\n    # We solve the equation for the number of teams given that the total number of matches is 30\n    equation = Eq((teams * (teams - 1)), 30 * 2)\n\n    solutions = solve(equation, teams)\n\n    # We're looking for the positive solution since the number of teams cannot be negative\n    num_teams = [sol for sol in solutions if sol.is_real and sol > 0]\n    \n    return num_teams[0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 40\n    # current_sum = George's current age + Sister's current age = 34\n    # future_sum = (George's current age + x) + (Sister's current age + x) = 40\n\n    # Let's simplify the future_sum equation:\n    # 2x + current_sum = future_sum\n    # 2x + 34 = 40\n    # 2x = 40 - 34\n    # 2x = 6\n    # x = 6 / 2\n    # x = 3\n    \n    x = (40 - 34) / 2\n    return int(x)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of rope used for one turn around the tree\n    x = symbols('x')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(10 * x + 3, 12 * x - 3)\n    \n    # Solve the equation\n    solution = solve(equation1, x)\n    \n    # Calculate the length of rope left after 8 turns\n    length_left_after_8_turns = 8 * solution[x] + 3\n    \n    # Return the length\n    return length_left_after_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    max_without_same_country = (5 - 1) * 11\n    participants_needed = max_without_same_country + 1\n    return participants_needed\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = -(-students // tables_per_row)  # Ceiling division\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    # Loop through all permutations of digits 0-9 for A,B,C,D,E\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n\n        # Ensure that A and D are not 0 as they are the leading digits in the numbers\n        if A == 0 or D == 0:\n            continue\n\n        # Calculate the numbers based on the current permutation\n        num1 = 10 * A + B  # AB represented by A and B\n        num2 = 10 * C + D  # CD represented by C and D\n        num3 = 100 * A + 10 * E + B  # AEB represented by A, E and B\n\n        # Check if the conditions are satisfied\n        if num1 + num2 == num3:\n            return A + B + C + D\n    \n    return \"No solution found\"\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Catherine has 5 more cards than Ben \n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n\n    # Ash has three times as many cards as Ben \n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    spent = 3/7 * total_money\n    not_used = total_money - spent\n\n    equation = Eq(spent - not_used, 12)\n\n    solution = solve(equation, total_money)\n\n    amount_spent_on_bag = 3/7 * solution[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    doubled_number_with_six = 28\n    original_number = (doubled_number_with_six - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # The ages of the youngest three dwarfs form an arithmetic sequence with a common difference of 1 year.\n    # Since their ages add up to 42, and there are 3 of them, the average age is the age of the middle dwarf.\n    # So, middle_age = total_age / number_of_dwarfs\n    middle_age = 42 / 3\n    \n    # The middle age is the fourth dwarf's age since there are 7 dwarfs in total and they are equally spaced.\n    # The ages of the oldest three are 3 consecutive numbers following the middle_age.\n    oldest_three_ages_sum = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n    \n    return oldest_three_ages_sum\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 8):  # since we need to operate 7 times, we range from 1 to 7\n        result -= i\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total_toys = Eq(A + B + C, 659)\n    AB_toys = Eq(A + B, 447)\n    BC_toys = Eq(B + C, 335)\n\n    solutions = solve((total_toys, AB_toys, BC_toys), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    factors = [i for i in range(1, 73) if 72 % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    # Let the number of boys be x\n    # Then the number of girls will be x + 30\n    # The sum of the number of boys and girls is equal to the total number of pupils\n    # Which gives us the equation: x + (x + 30) = total_pupils\n    # Simplifying we get: 2x + 30 = 500\n    # Solving for x: 2x = 500 - 30 => 2x = 470 => x = 470 / 2 => x = 235\n    # So the number of boys is 235 and the number of girls will be 235 + 30\n\n    num_boys = (total_pupils - 30) / 2\n    num_girls = num_boys + 30\n    return int(num_girls)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # Create equations based on the given information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    # Calculate the total cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n\n    total_sausages_before = initial_trays * initial_mean\n    total_sausages_after = total_sausages_before + additional_sausages\n    total_trays_after = initial_trays + 1\n\n    new_mean = total_sausages_after / total_trays_after\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, hundreds):\n            for ones in range(0, 10):\n                if ones > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    improper_fraction = (3 * 2 + 1) / 2\n    # Calculate division of the improper fraction by 1/4\n    result = improper_fraction / (1 / 4)\n    return result\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    train_length = 137\n    first_bridge_length = 263\n    first_bridge_time = 20\n    second_bridge_time = 27\n\n    # Speed = Distance / Time => Distance = Speed * Time\n    # The speed of the train is the same in both cases since we're told it's crossing at the same speed\n    # Therefore the distance it travels over the respective times are proportional\n    # Distance covered while crossing the first bridge:\n    # train_length + first_bridge_length = speed * first_bridge_time\n    train_speed = (train_length + first_bridge_length) / first_bridge_time\n    \n    # Distance covered while crossing the second bridge is:\n    # train_length + second_bridge_length = speed * second_bridge_time\n    # The speed is the same, so we replace the speed with what we got above and solve for second_bridge_length:\n    second_bridge_length = train_speed * second_bridge_time - train_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    money_each_should_have = total_money // 2\n\n    money_brenda_should_give = brenda_money - money_each_should_have\n  \n    return money_brenda_should_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Since each student gets at least one book, we start by giving each student one book.\n    # After that, there are 4 books left to distribute among the 3 students.\n    ways = factorial(7)  # Start with the number of ways to distribute 7 books.\n    \n    # We need to multiply by the number of ways to choose which student gets each of the remaining 4 books.\n    # This can be done in 3^4 ways since each of the 4 books can go to any of the 3 students.\n    ways *= 3**4\n    \n    return ways\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of blue balls and y be the number of red balls\n    x, y = symbols('x y')\n\n    # Given the total balls\n    total_balls_eq = Eq(x + y, 125)\n\n    # Given the relationship equation: (2/5)*x = (3/5)*y\n    ratio_eq = Eq((2/5)*x, (3/5)*y)\n\n    # Solving the system of equations\n    solutions = solve((total_balls_eq, ratio_eq), (x, y))\n\n    # Calculating how many more blue balls than red balls\n    blue_more_than_red = solutions[x] - solutions[y]\n\n    return blue_more_than_red\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining variables for the cost of one watch and one handbag\n    cost_watch, cost_handbag = symbols('cost_watch cost_handbag')\n\n    # using the given information to set up equations\n    eq1 = Eq(3 * cost_watch + 5 * cost_handbag, 915)\n    eq2 = Eq(4 * cost_watch + 2 * cost_handbag, 632)\n\n    # solving the equations\n    solutions = solve((eq1, eq2), (cost_watch, cost_handbag))\n\n    # calculating the cost of 2 watches and 2 handbags\n    total_cost = 2 * solutions[cost_watch] + 2 * solutions[cost_handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The least possible number for the child with the most pieces is when the distribution to others is maximal\n    # We start by giving each of the other 7 children 1 piece\n    pieces_given = 7\n    # Now we divide the remaining among the other 7 children in increasing order\n    remaining_pieces = 88 - pieces_given\n    # Start from 2, since 1 is already given to each child\n    next_piece_count = 2\n    while remaining_pieces >= next_piece_count + pieces_given:\n        pieces_given += next_piece_count\n        next_piece_count += 1\n        remaining_pieces -= next_piece_count\n    \n    # The remaining pieces would be the least possible number for the last child\n    least_pieces_for_max_child = remaining_pieces\n\n    return least_pieces_for_max_child\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmothers_age_2008 = 80\n    # Daughter's age on 1st December 1996\n    daughters_age_1996 = 40\n    # Calculate the year difference between 2008 and 1996\n    year_diff = 2008 - 1996\n    # Calculate grandmother's age in 1996\n    grandmothers_age_1996 = grandmothers_age_2008 - year_diff\n    # Calculate the age of the grandmother when her daughter was born (difference between their ages)\n    grandmothers_age_when_daughter_born = grandmothers_age_1996 - daughters_age_1996\n    \n    return grandmothers_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are four individuals, labeled A, B, C, D.\n    # A starts with the ball and after 3 passes it must return to A.\n    # We can label the passes as A -> X -> Y -> A, where X and Y represent different individuals.\n\n    count = 0\n    # Considering that we have 3 people to whom A can pass the ball (B, C, D)\n    for X in ('B', 'C', 'D'):\n        # For each of these, we have 2 remaining people to pass the ball to\n        for Y in ('B', 'C', 'D'):\n            if X != Y:  # X and Y must be different individuals\n                # The pass can end with A only after it has been passed by X to Y\n                # and then by Y back to A. This is one possible sequence.\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Nicole and Eddy's initial number of tokens\n    nicole, eddy = symbols('nicole eddy')\n\n    # Equation representing the relationship of tokens before they used any\n    equation1 = Eq(nicole, 3 * eddy)\n    \n    # Equation representing the total tokens they have after using some\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    # The solution for the number of tokens Nicole had at first\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial as fact\n    \n    # Treat A and B as a single unit AB since they want to stand next to each other\n    # There are 8 people, but with AB counted as one, we have 7 units to arrange\n    # This gives us 7! ways to arrange the units\n    AB_unit_ways = fact(7)\n    \n    # Now A and B within AB unit can be arranged in 2! ways\n    AB_arrangement_ways = fact(2)\n    \n    # Total ways AB can be arranged\n    total_AB_combinations = AB_unit_ways * AB_arrangement_ways\n    \n    # Now consider C and D, to calculate the ways in which they can't stand next to each other\n    # we subtract from total ways, the ways in which C and D are together.\n    # Treating C and D as a unit, we have 7 units (with CD as one), which is 7! ways.\n    CD_unit_ways = fact(7)\n    \n    # C and D within CD unit can be arranged in 2! ways\n    CD_arrangement_ways = fact(2)\n    \n    # Total ways CD can't be next to each other is total arrangements - arrangements when together\n    total_CD_combinations = total_AB_combinations - CD_unit_ways * CD_arrangement_ways\n    \n    return total_CD_combinations\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 80 / 100 + 4 / 5 * 100 / 100\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration * 100\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, valeria = symbols('mike valeria')\n    total_candy = 36\n    mike_left = 6\n    valeria_left = 22\n    \n    equation1 = Eq(mike - valeria, mike_left - valeria_left)\n    equation2 = Eq(mike + valeria, total_candy)\n    \n    solutions = solve((equation1, equation2), (mike, valeria))\n    \n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Calculate 12^50 and take the 75th root since we are comparing k**75 to 12**50\n    # k**75 < 12**50 would translate to k < (12**50)**(1/75) since both sides are positive\n    num_base_12 = 12**50\n    k = num_base_12**(1/75)\n\n    # The question asks for the largest whole number, so we take the floor of k\n    ans = int(k) - 1 if k % 1 == 0 else int(k)\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    # Final count of oranges after throwing away and buying\n    final_count = 133\n    # Number of oranges thrown away\n    thrown_away = 34\n    # Number of oranges bought\n    bought = 25\n    \n    # Calculate the initial number of oranges\n    initial_count = final_count - bought + thrown_away\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n    \n    ans = psi_operation(psi_operation(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 20))\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    # Let the number of girls be g and the number of boys be b\n    # The total number of students is the sum of the number of girls and boys: g + b = 36\n    # The total score of the class is the average score multiplied by the number of students: 36 * 89\n    # The total score of the girls is the average score of the girls multiplied by their number: 88 * g\n    # The total score of the boys is the average score of the boys multiplied by their number: 91 * (36 - g)\n    # The total score of the class is also the sum of the girls' score and the boys' score: 88 * g + 91 * (36 - g) = 36 * 89\n    # We have one equation with one unknown (g), which we can solve:\n    from sympy import symbols, Eq, solve\n    g = symbols('g')\n    equation = Eq(88 * g + 91 * (36 - g), 36 * 89)\n    num_girls = solve(equation, g)[0]\n    return num_girls\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # number of legs for each kind of pet\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n\n    # legs accounted for without birds\n    legs_accounted_for = cats_legs + dogs_legs + rabbit_legs\n\n    # total legs of all pets\n    total_legs = 28\n    \n    # calculate the remaining legs to be accounted for by birds (each bird has 2 legs)\n    remaining_legs_for_birds = total_legs - legs_accounted_for\n    \n    # number of birds\n    birds = remaining_legs_for_birds // 2\n    \n    return birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # The amount of work one person does in one hour is 1 work unit / (5 people * 6 hours) = 1/30 work units per hour per person.\n    work_per_person_per_hour = 1 / (5 * 6)\n    \n    # The neighbour's fence is twice as long, so it requires 2 work units.\n    total_work_units_required = 2\n    \n    # We need to find the minimum number of people that can complete 2 work units in less than 5 hours.\n    # Let's define the number of people needed as p.\n    # They will work for 5 hours, so the total work done by p people will be 5 * p * (work_per_person_per_hour).\n    # This must be at least equal to the total_work_units_required.\n    # So, we find the first integer p for which 5 * p * (work_per_person_per_hour) is greater than total_work_units_required.\n\n    p = 1  # Start with 1 person and increase until the condition is met.\n    while 5 * p * work_per_person_per_hour < total_work_units_required:\n        p += 1\n\n    return p\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_required_for_one_interval = 12 / 4  # Time to walk one floor interval\n    total_intervals_in_30_min = 30 / time_required_for_one_interval\n    return int(total_intervals_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_21_6_grams = cookies_per_gram * 21.6\n    return cookies_with_21_6_grams\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int(\"12345654321\", 8)\n\n    # Calculate the remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n\n    # Sum of the remainders\n    ans = remainder_7 + remainder_9\n\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, wallet, handbag = symbols('belt wallet handbag')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n    \n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Three years ago, the combined age of two cats was 7 years.\n    combined_age_past = 7\n    \n    # Since it was 3 years ago, we add 3 years for each cat to get their current combined age.\n    current_combined_age = combined_age_past + 3 * 2\n\n    # Four years in the future, we add 4 years for each cat to their current combined age.\n    future_combined_age = current_combined_age + 4 * 2\n\n    return future_combined_age\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return float(solutions[magazine])\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    # Using the formula for the sum of squares: sum = 1/6 * n * (n + 1) * (n + 2)\n    # and adjusting it for the problem, which is actually the sum of n*(n+1)\n    sum_of_products = (n * (n + 1) * (n + 2)) // 3\n    return sum_of_products\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n\n    ans = 0\n    for i in range(1, math.isqrt(2016) + 1):\n        if 2016 % (i * i) == 0:\n            ans += 1\n\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    n = symbols('n', integer=True)\n    eq = Eq(n + (n + 1) + (n + 2), 60)\n    solution = solve(eq, n)\n    largest_number = solution[0] + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    # Iterate over all possible digits for A, B, C, and D\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    # Ensure all digits are different\n                    if len(set([A, B, C, D])) == 4:\n                        # Check if the condition ABA + CDC = 726 holds\n                        if A * 101 + C * 101 + B * 10 + D * 10 == 726:\n                            # Return the sum of A, B, C, and D\n                            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Maximum shirts she could take without getting a yellow one is all shirts of other colors\n    max_non_yellow = 6 + 4 + 12  # orange, pink, brown\n    \n    # To guarantee at least 1 yellow, she would have to take one more than the non-yellow ones\n    min_shirts_for_yellow = max_non_yellow + 1\n    \n    return min_shirts_for_yellow\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Using ceiling division to always round up\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Convert the mixed fractions to improper fractions and add them, and then add 1\n    ans = 9 + 4/5 + 99 + 4/5 + 199 + 4/5 + 2999 + 4/5 + 39999 + 4/5 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6 * x, 2 - (3 * x - 16))\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders when dividing by 2, 3, 4, and 6 are all 1, so we have the congruences:\n    # age ≡ 1 (mod 2)\n    # age ≡ 1 (mod 3)\n    # age ≡ 1 (mod 4)\n    # age ≡ 1 (mod 6)\n    # Since 7 leaves no remainder: age ≡ 0 (mod 7)\n    # We can combine these into the system:\n    # age ≡ 1 (mod lcm(2, 3, 4, 6))\n    # age ≡ 0 (mod 7)\n    # lcm(2, 3, 4, 6) = 12\n\n    congruences = [(1, 12), (0, 7)]\n    lcm_mod, age = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Since 94 and 80 are in the sequence and there is supposed to be one number in between them,\n    # we can assume it's an arithmetic sequence and calculate the common difference.\n    # However, we notice that 80 and 73 have a difference of 7, and 73 and 66 also have a difference of 7.\n    # Therefore, it's better to first check if there's a constant arithmetic difference between 80, 73 and 66.\n\n    difference1 = 80 - 73  # Difference between the third and fourth terms\n    difference2 = 73 - 66  # Difference between the fourth and fifth terms\n\n    # Checking if the sequence continues with the same difference\n    if difference1 == difference2:\n        # Since to go from 94 to 80 in one step doesn't fit the established common difference of 7,\n        # it might be a two-step movement in the sequence. Therefore, we try to extend the sequence backward.\n        # We must find the term before 94 to see if the sequence has a consistent pattern.\n        suspected_term_before_94 = 94 + difference1\n\n        # Now we check if the difference between this suspected term and 94 is the same as the difference found later in the sequence.\n        if suspected_term_before_94 - 94 == difference1:\n            # If it is, our assumption about an arithmetic pattern is most likely correct.\n            # Now we can find the number missing in the sequence by simply subtracting the difference from 94.\n            missing_number = 94 - difference1\n        else:\n            # If not, there isn't enough info to determine a pattern based on the provided terms.\n            missing_number = None\n    else:\n        # If differences are not equal, it is not a standard arithmetic sequence and additional rules or patterns would be needed to find the missing number.\n        missing_number = None\n    \n    return missing_number\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glasses_sold * wine_glass_ml) + (tumblers_sold * tumbler_ml)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, p, l = symbols('a p l')\n\n    # Original ratios\n    original_ratio_avocados_to_peaches = Eq(a / p, 2 / 9)\n    original_ratio_peaches_to_lemons = Eq(p / l, 9 / 8)\n\n    # Sold fruits\n    avocados_sold = 52\n    peaches_sold = 12\n    lemons_sold = 60\n\n    # New ratio after selling\n    new_ratio_peaches_to_lemons = Eq((p - peaches_sold) / (l - lemons_sold), 6/5)\n\n    # Express lemons in terms of peaches from the original ratio\n    lemons_in_terms_of_peaches = solve(original_ratio_peaches_to_lemons, l)[0]\n\n    # Replace lemons in the new ratio equation\n    new_ratio_with_substitution = new_ratio_peaches_to_lemons.subs(l, lemons_in_terms_of_peaches)\n\n    # Solve for the number of peaches\n    number_of_peaches = solve(new_ratio_with_substitution, p)[0]\n\n    # Calculate number of avocados and lemons using the value of peaches found\n    number_of_avocados = solve(original_ratio_avocados_to_peaches.subs(p, number_of_peaches), a)[0]\n    number_of_lemons = lemons_in_terms_of_peaches.subs(p, number_of_peaches)\n\n    # Calculate remaining fruits\n    remaining_avocados = number_of_avocados - avocados_sold\n    remaining_peaches = number_of_peaches - peaches_sold\n    remaining_lemons = number_of_lemons - lemons_sold\n\n    # Calculate the total number of remaining fruits\n    total_remaining = remaining_avocados + remaining_peaches + remaining_lemons\n\n    return total_remaining\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of a number raised to a power only depends on the last digit of the base and the cycle of its powers.\n    # For the base 2, the cycle is: 2, 4, 8, 6, and then it repeats every 4 powers.\n    # Since we are looking at 2 raised to the 859433rd power, we have to find where 859433 lands in the cycle of 4.\n    \n    cycle_length = 4\n    power = 859433\n\n    # Find the position in the cycle\n    cycle_position = power % cycle_length\n\n    # Mapping the cycle position to the last digit\n    last_digits = {0: 6, 1: 2, 2: 4, 3: 8}\n\n    # The last digit of the number is the last digit corresponding to the cycle position\n    last_digit = last_digits[cycle_position]\n\n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    facing_teacher = 0\n    for number in range(1, 61):\n        if number % 3 == 0 and number % 5 == 0:\n            continue\n        elif number % 3 == 0 or number % 5 == 0:\n            facing_teacher += 1\n    facing_teacher = 60 - facing_teacher\n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "from sympy import lcm, solve, symbols\n\ndef solution():\n    Peter = symbols('Peter')\n    least_common_multiple = lcm([2, 4, 6])\n\n    # Define the equations according to the problem statement\n    equation = ((Peter % 2 == 1) & (Peter % 4 == 1) & (Peter % 6 == 1) & (Peter % 7 == 5))\n\n    # Solve the equation considering the least common multiple for efficiency\n    solution_set = solve((equation, Peter >= least_common_multiple), Peter)\n\n    # Filter the age of Peter that satisfy the equation constraints\n    for age in solution_set:\n        if age.is_integer and age > 0:\n            return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Jess have x sweets initially and Jill have y sweets\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, (6/5) * jess)\n\n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Total number of sweets they have altogether\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    # Find the largest number formed by digits that is divisible by all the digits used\n    max_number = 0\n    \n    for i in range(7, 0, -1):  # Since we're looking for the largest number, start with the largest number of digits\n        for perm in permutations(range(1, 8), i):  # Generate all permutations of i digits\n            number = int(''.join(map(str, perm)))  # Convert the tuple of digits to an integer\n            if all(number % digit == 0 for digit in perm if digit > 0):  # Check if number is divisible by all its digits\n                max_number = max(max_number, number)\n                break  # No need to check further if we found the max number for i digits\n\n        if max_number > 0:  # We found our number, no need to check permutations with fewer digits\n            break\n\n    return max_number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for n in range(1, int(900**(0.5))+1, 2):\n        for start in range(1, 901, 2):\n            sequence_sum = n * (start + (start + (n - 1)))\n            if sequence_sum == 3600:  # 900 * 4 because the sequence is of odd numbers\n                max_length = max(max_length, n)\n                break\n            if sequence_sum > 3600:\n                break\n    return max_length\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # From the problem we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Adding all three equations together:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # Dividing both sides by 2 gives us the total weight:\n    total_weight = (102 + 97 + 93) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    number = 120\n    while True:\n        number += 1\n        if number % 53 == 2:\n            return number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm_to_m = 2 / 100\n\n    ans = height_m + height_cm_to_m\n\n    return ans\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * 1.25\n    third_test = second_test * 0.8\n    total_marks = first_test + second_test + third_test\n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal_amount = 5000\n    interest_rate = 0.03\n    years = 2\n\n    final_amount = principal_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(6 * pupils - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    \n    total_savings = january_savings + february_savings + march_savings\n    number_of_months = 3\n    \n    mean_savings = total_savings / number_of_months\n    \n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(7, 106, 7))\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else (56 // 4 + 1)\n    last_multiple = 92 // 4\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    speed_still_water = 15\n    time_downstream = 8\n    speed_downstream = distance / time_downstream\n\n    # Let the speed of the stream be 's'\n    # speed_downstream = speed_still_water + s\n    # Solving for s\n    speed_stream = speed_downstream - speed_still_water\n\n    # Speed upstream = Speed in still water - Speed of stream\n    speed_upstream = speed_still_water - speed_stream\n\n    # Time taken to travel upstream = Distance / Speed upstream\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    number_of_students = 15\n    number_to_select = 2\n    \n    return comb(number_of_students, number_to_select)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the food consumed by kangaroo and hippo\n    kangaroo_food = symbols('kangaroo_food')\n    hippo_food = symbols('hippo_food')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(hippo_food, kangaroo_food + 45)\n    equation2 = Eq(hippo_food * 20, 10 * kangaroo_food * 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (kangaroo_food, hippo_food))\n\n    # Get the amount of food consumed by the hippo in 20 days\n    hippo_total_food = solutions[hippo_food] * 20\n\n    return hippo_total_food\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    waiting_time = timedelta(hours=1, minutes=25)\n    waiting_start = datetime.strptime(\"15:15\", \"%H:%M\")\n    meeting_time = waiting_start + waiting_time\n    return meeting_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    least_num_pencils, _ = solve_congruence(*congruences)\n\n    return least_num_pencils\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Amount of work A can do in 1 day\n    work_per_day_A = 1 / 15\n    # Amount of work B can do in 1 day\n    work_per_day_B = 1 / 20\n\n    # Total work done by A and B together in 2 days\n    work_done_in_2_days = 2 * (work_per_day_A + work_per_day_B)\n\n    # Remaining work to be done by A after B leaves\n    remaining_work = 1 - work_done_in_2_days\n\n    # Days A needs to finish the remaining work\n    days_for_A_to_finish = remaining_work / work_per_day_A\n\n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # We can draw a scenario where we pick the least favorable outcome each time\n    # Let's say we pick one green ball, then one blue ball, which ensures we don't have a matching pair yet.\n    # If we took another ball, it must either be green or blue, therefore, ensuring a matching pair.\n    # So, we need to pick 1 (green) + 1 (blue) + 1 (to ensure we have a pair) = 3 balls.\n    \n    num_balls_to_ensure_pair = 3\n    return num_balls_to_ensure_pair\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # There are 12 zodiac signs and we want to guarantee at least 11 students who share the same zodiac sign.\n    # Using the Pigeonhole Principle, calculate the minimum number of students needed to force a pigeonhole with at least 11 students.\n    # Number of pigeonholes (zodiac signs) = 12\n    # Pigeons (students) per pigeonhole needed = 11\n    # However, having 11 students for each zodiac sign doesn't guarantee that there is a zodiac sign with 11 students, since we could have 10 students per zodiac sign plus one additional student.\n    # Therefore, we need 11 students for each of the 11 zodiac signs to guarantee that, and then we add 1 more student to ensure that the 12th zodiac sign has at least 11 students.\n    # So if each zodiac sign has 10 students, we have 10 * 12 = 120 students,\n    # To guarantee the 11th student in any of the zodiac signs, we need to add 1 more student, so the total is 120 + 1.\n    \n    ans = 10 * 12 + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(perms):\n    count = 0\n    for perm in perms:\n        a_index = perm.index('A')\n        b_index = perm.index('B')\n        c_index = perm.index('C')\n        d_index = perm.index('D')\n        e_index = perm.index('E')\n        f_index = perm.index('F')\n        g_index = perm.index('G')\n        # Check A is between B and C\n        if (b_index < a_index < c_index) or (c_index < a_index < b_index):\n            # Check D and E are together\n            if abs(d_index - e_index) == 1:\n                # Check F and G are not adjacent\n                if abs(f_index - g_index) != 1:\n                    count += 1\n    return count\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    perms = permutations(students)\n    ans = count_valid_permutations(perms)\n    return ans\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Number of balls for each color\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n\n    # Using the Pigeonhole Principle, to ensure 10 balls of the same color, one must consider the worst case.\n    # The worst case is when she picks all yellow balls (5), and up to 9 balls from both white and black\n    # This makes 5 + 9 + 9 = 23\n    # The next ball she picks must be the 10th ball of either white or black\n    least_balls = yellow_balls + (10 - 1) + (10 - 1) + 1\n\n    return least_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_seat = (start_seat + total_candies - 1) % total_children\n    return last_seat if last_seat != 0 else total_children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    # Sum of arithmetic sequence: n/2 * (2*a + (n-1)*d)\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    # Calculate least common multiple of the two periods\n    cycle_days = lcm(7, 3)\n    \n    # Florence eats both spaghetti and apple pie every cycle_days days.\n    # Since she eats both on 2nd January, she will next eat them both on the same day\n    # after cycle_days have passed, which will be on day 1 + cycle_days (since we start counting from 1).\n    return 1 + cycle_days\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    total_sum = 0\n    for n in range(1, 101):\n        total_sum += n**2 - n\n    return total_sum\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    max_without_both = total_children - min(children_with_dogs, children_with_cats)\n    \n    children_with_both = children_with_dogs + children_with_cats - total_children\n\n    return max(children_with_both, max_without_both)\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shirts, skirts = symbols('shirts skirts')\n    \n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3)*shirts + (5/6)*skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    num_cloaks_length = total_length // cloak_length\n    num_cloaks_width = total_width // cloak_width\n\n    total_cloaks = num_cloaks_length * num_cloaks_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Given values\n    distance = 120  # in miles\n    speed_to = 20  # in miles per hour\n    avg_speed_expected = 30  # in miles per hour\n\n    # Time taken to travel to the place\n    time_to = distance / speed_to\n    \n    # Total time for the round trip at the expected average speed\n    total_time = (2 * distance) / avg_speed_expected\n    \n    # Time remaining for the return trip\n    time_back = total_time - time_to\n    \n    # Speed required for the return trip\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (7, 11)]  # (remainder, modulus)\n    ans, _ = solve_congruence(*congruences)\n    \n    # Ensuring ans is between 400 and 800\n    while ans < 400:\n        ans += 5 * 6 * 11  # LCM of moduli\n\n    return ans\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nel_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n\n    total_sweets = (nel_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n\n    for number in range(1, 35):  # 34 shirts, so range 1 to 35 (35 is not included)\n        total_digits += len(str(number))  # Convert number to string and count the digits\n\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # If it takes 2 minutes to cut a metal rod into two pieces, \n    # then to cut it into 5 pieces, we need 4 cuts.\n    # Each cut takes 2 minutes, so total time is 4 cuts * 2 minutes each.\n    total_minutes = 4 * 2\n    return total_minutes\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    total_sum = sum(numbers)\n    count = len(numbers)\n    average = total_sum / count\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    number_of_original_numbers = 3\n    number_of_new_numbers = number_of_original_numbers + 1  # adding one number\n\n    # Total of original numbers\n    total_original = original_average * number_of_original_numbers\n\n    # Calculate the new total for the new average\n    total_new = new_average * number_of_new_numbers\n    \n    # Find the number that must be added\n    number_to_add = total_new - total_original\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles\n    jovan, sean, herman = symbols('jovan sean herman')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(jovan, herman - 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n\n    # Calculate the total number of marbles\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[herman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    days = (12 * 15) / 20\n    return days\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    \n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum using the formula for the sum of an arithmetic sequence\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    a, b, c = 6, 9, 12\n    \n    ans = gcd(gcd(a, b), c)\n    \n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    total_companies = 4\n    total_days = 5\n    \n    # Calculate the rate at which one company builds the expressway per day\n    per_company_per_day = (total_length / total_days) / total_companies\n    \n    return per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # Five-legged alien and his 5 brothers makes 6 aliens in total\n    num_aliens = 6\n\n    # Each alien has 5 legs\n    num_legs_per_alien = 5\n\n    # Total number of legs\n    total_legs = num_aliens * num_legs_per_alien\n\n    # Cost of shoes for one set (5 individual shoes)\n    cost_shoes_per_set = 78\n\n    # Since each set has 5 shoes, number of sets required \n    # is the same as the total number of aliens\n    num_shoe_sets = num_aliens\n\n    # Total cost of shoes\n    total_cost_shoes = cost_shoes_per_set * num_shoe_sets\n\n    # Cost of one pair of socks\n    cost_socks_per_pair = 12\n\n    # Since there are 5 legs per alien, we need 5/2 pairs of socks per alien\n    # (since one pair of socks can serve two legs)\n    num_socks_pairs_needed = total_legs / 2\n\n    # Total cost of socks\n    total_cost_socks = cost_socks_per_pair * num_socks_pairs_needed\n    \n    # Total cost of items\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, stdev\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # using the stars and bars theorem\n    from math import comb\n    num_oranges = 13\n    num_kids = 3\n    # (13+3-1) choose (3-1) - this accounts for distributing the oranges among 3 kids\n    ans = comb(num_oranges + num_kids - 1, num_kids - 1)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    for thousands in range(10):\n        for hundreds in range(10):\n            for tens in range(10):\n                for ones in range(10):\n                    original = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    new_number = ones * 1000 + thousands * 100 + hundreds * 10 + tens\n                    if new_number - original == 5877:\n                        return original\n    return None\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david_50c_cookies, jeremy_50c_cookies, jeremy_10c_cookies = symbols('david_50c_cookies jeremy_50c_cookies jeremy_10c_cookies')\n    \n    # David's cookies cost three times as much as Jeremy's. \n    # David has only one $0.50 cookie, so the cost of David's cookies is 0.50 dollars.\n    david_cookies_cost = 0.50\n    \n    # Jeremy has 3/5 as many $0.50 cookies as $0.10 cookies.\n    equation1 = Eq(jeremy_50c_cookies, (3/5) * jeremy_10c_cookies)\n    \n    # There are 60 fewer $0.10 cookies than $0.50 cookies.\n    equation2 = Eq(jeremy_10c_cookies, jeremy_50c_cookies - 60)\n    \n    # David's $0.50 cookies cost three times that of Jeremy's cookies.\n    # Cost of Jeremy's cookies (both $0.50 and $0.10 ones) is 1/3 of David's cost.\n    jeremy_cookies_cost = (jeremy_50c_cookies * 0.50 + jeremy_10c_cookies * 0.10) / 3\n    \n    # The cost of Jeremy's cookies is equal to the cost of David's cookies.\n    equation3 = Eq(jeremy_cookies_cost, david_cookies_cost)\n    \n    solutions = solve((equation1, equation2, equation3), (jeremy_50c_cookies, jeremy_10c_cookies))\n    \n    # Calculate the total cost of Jeremy's cookies.\n    total_cost = solutions[jeremy_50c_cookies] * 0.50 + solutions[jeremy_10c_cookies] * 0.10\n    \n    return total_cost\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n\n    candy_products = {a * b for a, b in candy_combinations}\n    candice_products = {a * b * c for a, b, c in candice_combinations}\n\n    common_products = candy_products.intersection(candice_products)\n    used_numbers = set()\n\n    for product in common_products:\n        for combo in candy_combinations:\n            if combo[0] * combo[1] == product:\n                used_numbers.update(combo)\n        for combo in candice_combinations:\n            if combo[0] * combo[1] * combo[2] == product:\n                used_numbers.update(combo)\n\n    for number in numbers:\n        if number not in used_numbers:\n            return number\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [x for x in possible_totals if (x - 4) % 7 == 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20  # distance between the 1st and 5th tree\n    distance_between_each_tree = distance_between_first_and_fifth / (5 - 1)  # interval between each tree\n    whole_road_length = 200\n    \n    # Number of intervals is one less than the number of trees\n    num_intervals = whole_road_length / distance_between_each_tree\n    num_trees = int(num_intervals + 1)\n\n    return num_trees\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # The combined rate of both taps\n\n    time_to_fill_half = 0.5 / combined_rate  # Time to fill half the tank\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    initial_expression = (36 * 21) / (6 * 7)\n    step1 = 36 * 21 / 6 * 7\n    step2 = (36 / 6) * 21 * 7\n    step3 = 6 * 21 * 7\n    correct_answer = step2\n\n    # Check if his answer is correct\n    is_correct = (step3 == initial_expression)\n\n    return correct_answer, is_correct\n\nans, is_correct = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    for i in range(1, girls + 1):\n        boys_side = i\n        total_side = boys_side + 1\n        if boys_side ** 2 + (2 * boys_side) + 1 == total_side ** 2:\n            boys = boys_side ** 2\n            return boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age = jane_age * 2\n    cousin_future_age = cousin_age + 8\n    return cousin_future_age\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n\n    # Ann is 8th, + 3 in between, +1 David, +1 the last person in the queue.\n    total_people = ann_position + people_between + 1 + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 22:\n        page += 1\n        count += str(page).count('8')\n    return page\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (8 * 9) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we get 29 balls of one color, we must pick all balls of the other two colors\n    # plus one more, which will be the 29th ball of the first color.\n    pick_all_red_and_white = 40 + 30\n    # We need to pick one more ball to ensure we have 29 of one color.\n    one_more_ball = 1\n    # Total balls we need to pick at least:\n    balls_to_pick = pick_all_red_and_white + one_more_ball\n    return balls_to_pick\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days = (total_distance - climb_per_day) / net_distance_per_day + 1\n    return int(days)\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = (maths_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800  # Initial amount of money put in the bank\n    rate = 0.08  # Annual interest rate (8%)\n    time = 3  # Number of years\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n    difference = height_mountain_world - height_mountain_england\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 50))\n    for prime in primes:\n        if prime < 50 and prime - 2 < 50 and (prime - 2) % 3 == 0 and (prime + 2) % 5 == 0:\n            return prime\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')  # Define symbols for each person's money.\n\n    # Equations representing the scenario.\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)  # Sum of money after spending.\n    equation2 = Eq(alicia / 2, beth - 60)  # Alicia and Beth have the same amount after Alicia and Beth spent.\n    equation3 = Eq(alicia / 2, casey - 3 * (alicia / 2))  # Alicia and Casey have the same amount after spending.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 2014! contains the factor 10 (which is 2*5), the last digit must be 0\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    prime_factors_2 = 0\n    prime_factors_5 = 0\n\n    factors = [2, 2, 3, 8, 5, 5, 5]\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            prime_factors_2 += 1\n            factor /= 2\n        while factor % 5 == 0:\n            prime_factors_5 += 1\n            factor /= 5\n\n    ans = min(prime_factors_2, prime_factors_5)\n    return ans\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    factor = 30 / numerator\n    ans = denominator * factor\n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n\n    # Working backwards from the given steps\n    final_answer = 1\n    after_subtracting_8 = final_answer + 8\n    after_dividing_by_8 = after_subtracting_8 * 8\n    after_multiplying_by_3 = after_dividing_by_8 / 3\n    original_sum = after_multiplying_by_3 - 6\n\n    # Equation for the original number\n    equation = Eq(original_number + 6, original_sum)\n    \n    # Solve for the original number\n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    original_number_value = solve(equation, original_number)\n\n    return original_number_value[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the number of cookies eaten on the first day be x\n    x = symbols('x')\n    \n    # The total number of cookies eaten over the five days can be represented as an arithmetic series\n    # S_n = n / 2 * (2a + (n - 1)d)\n    # Where S_n = 100 (total cookies), n = 5 (number of days), a = x (cookies eaten on the first day),\n    # and d = 6 (common difference, as he ate 6 more each day)\n    \n    # Equation representing the sum of the arithmetic series\n    total_cookies = 5 / 2 * (2 * x + (5 - 1) * 6)\n\n    # Create an equation to solve for x\n    equation = Eq(total_cookies, 100)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    num_boxes = 8\n    \n    remaining_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_seashells)\n    seashells_per_box = remaining_seashells // num_boxes\n    \n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "from sympy import primerange, isprime\n\ndef solution():\n    # Candidates are numbers less than 90 and multiples of 9\n    candidates = [x for x in range(1, 90) if x % 9 == 0]\n\n    for num in candidates:\n        if isprime(num + 1) and (num - 1) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percent = 18\n    amount = 250\n    \n    ans = (percent / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    # There are 4 men and 4 women and they want to stand alternately.\n    # Let's position the men first, and then the women.\n    # The men can be arranged in 4! ways and the women can be arranged in 4! ways.\n\n    # Therefore, the total number of ways is 4! * 4!\n    return factorial(4) * factorial(4)\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # Total number of permutations for 5 letters\n    p_count = factorial(2)  # Number of permutations for the 2 'P's in HAPPY\n    num_ways = total_letters // p_count  # Divide out the permutations for repeated 'P's\n\n    return num_ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley_pages = symbols('ashley_pages')\n\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    equation = Eq(justin_pages, crystal_pages + 72)\n\n    ashley_pages_solution = solve(equation, ashley_pages)\n\n    total_pages = ashley_pages_solution[0] + 2 * ashley_pages_solution[0] + 10 * ashley_pages_solution[0]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_of_boys = 2 / 5\n    total_children = girls / (1 - fraction_of_boys)\n    boys = fraction_of_boys * total_children\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n\n    n = 96\n    factors = factorint(n)\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= power + 1\n\n    return num_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    \n    # Since Peter is directly in front of John, they are counted once each.\n    peter_and_john = 2\n    \n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n    \n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time_in_hours = 12  # in 24-hour format\n    flight_duration_in_hours = 4\n    time_difference_in_hours = 3  # St Petersburg is 3 hours ahead of England\n\n    arrival_time_in_hours = (departure_time_in_hours + flight_duration_in_hours + time_difference_in_hours) % 24\n    return arrival_time_in_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if N != O:\n                return N * 10 + O\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([i if (i % 4 == 2) else -i for i in range(32, 51, 2)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors, so Cindy must pick one more than 3 times the number of colors\n    # to ensure she has at least one pair of the same color.\n    # This is because in the worst case she could pick one of each color for the first three,\n    # and then the fourth sock will definitely match one of the previously picked socks (Pigeonhole Principle).\n    \n    sock_colors = 3\n    max_single_socks = sock_colors\n    one_pair = 1\n\n    socks_needed = max_single_socks + one_pair\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    kg = 2.5\n    ans = kg * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # congruences in the form of (remainder, modulo)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    lcm_num, _ = solve_congruence(*congruences)\n    \n    return lcm_num\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_boy = 4\n    sweets_girl = 12\n\n    # Let the total number of children be x\n    # Then the number of boys is (3/8)*x and the number of girls is (5/8)*x\n    # We have the equation 4 * (3/8)*x + 12 * (5/8)*x = 360 to solve for x\n\n    # Simplifying the equation gives us x = (360 * 8) / (3 * 4 + 5 * 12)\n    x = (total_sweets * 8) / (fraction_boys * sweets_boy + (1 - fraction_boys) * sweets_girl)\n\n    # We need to find the number of girls, which is (5/8)*x\n    girls = (1 - fraction_boys) * x\n\n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 5 / 100  # 5 cm on map represents 1 km\n    map_distance_cm = 12\n    ground_distance_km = (map_distance_cm / scale_ratio) / 1000  # Convert cm to km\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(1, 26):\n        product *= (1/(i+1) - 1/(51-i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    # Set up the system of congruences as equations\n    eq1 = x % 7 == 5\n    eq2 = x % 8 == 6\n    eq3 = x % 10 == 6\n\n    # Using Chinese Remainder Theorem to solve the congruences\n    remainder_conditions = [(7, 5), (8, 6), (10, 6)]\n    number = solve([eq1, eq2, eq3])[0]\n\n    # Number divided by 6, 7, 8 gives quotient sum 265\n    eq_sum = (number // 6) + (number // 7) + (number // 8) == 265\n    # Solve for the number that fits all conditions\n    ans = solve(eq_sum, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    time_seconds = 24\n    \n    # Convert speed from kilometers per hour to meters per second\n    speed_mps = (speed_kmh * 1000) / (60 * 60)\n    \n    # Distance traveled in meters is speed (m/s) times time (seconds)\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    # Jimmy says: \"I ate 7 more carrots than Jack.\"\n    equation1 = Eq(jimmy, jack + 7)\n    \n    # Tommy says: \"The carrots I ate are 3 times the carrots Jimmy ate.\"\n    equation2 = Eq(tommy, 3 * jimmy)\n    \n    # Jack says: \"We ate a total of 43 carrots.\"\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n    \n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Pip's statement is almost correct, but not fully complete.\n    # According to the definition, a composite number is a positive integer greater than 1\n    # that has at least one positive divisor other than one and itself, which means it\n    # can be formed by multiplying two smaller positive integers. However, the number 1 is\n    # neither prime nor composite, so the definition should exclude 1.\n    \n    # To check if Pip is correct, we need to verify if all positive integers greater than 1\n    # that are not prime are indeed composite numbers with the exception of 1.\n    \n    # We'll check for numbers from 2 to 10 as an example\n    pip_is_correct = True\n    for n in range(2, 11):\n        if not is_prime(n) and not is_composite(n):\n            pip_is_correct = False\n    \n    # Finally, we return whether Pip's definition of composite numbers was correct or not.\n    return pip_is_correct\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n  \ndef is_composite(n):\n    return n > 1 and not is_prime(n)\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = math_students + language_students - total_students\n\n    only_math_students = math_students - both_classes\n\n    return only_math_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    prod = 1  # Start with product equal to 1\n    for i in range(2, 10):  # Iterate from 2 to 9\n        prod *= Fraction(1 + 1/i)\n    \n    return prod\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    # Choose 3 different numbers to be the splits out of the 11 possibilities (since 12 balloons can be split at positions 1 to 11)\n    for splits in combinations(range(1, 12), 3):\n        # If consecutive splits have a difference of at least 1, then this will produce groups of different sizes\n        if splits[1] - splits[0] > 0 and splits[2] - splits[1] > 0 and 12 - splits[2] > 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Kasia keeps 13 for herself.\n    kasia_keeps = 13\n\n    # Total sweets Kasia has initially.\n    total_sweets = 42\n\n    # Sweets left after Kasia keeps hers.\n    sweets_left = total_sweets - kasia_keeps\n\n    # Sweets shared equally between Maya and Lucie.\n    sweets_each_friend = sweets_left // 2\n\n    # Lucie gives 2/7 of her sweets to Joan.\n    sweets_to_joan = (2 / 7) * sweets_each_friend\n\n    # Lucie keeps the rest of her sweets.\n    sweets_lucie_keeps = sweets_each_friend - sweets_to_joan\n\n    return int(sweets_lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Starting with the first square layer and checking this for every odd square layer\n    boys_diff = 0  # Difference between boys and girls\n    side_length = 1  # Starting with a 1x1 square\n\n    while True:\n        if side_length % 2 == 0:  # if side length is even, it's a layer of girls\n            girls = side_length * 4 - 4\n            boys_diff -= girls\n        else:  # if side length is odd, it's a layer of boys\n            boys = side_length * 4 - 4\n            boys_diff += boys\n        \n        # Check if the current difference matches the condition\n        if boys_diff == 52:\n            total_students = side_length**2  # Total students is the area of the square\n            return total_students\n        \n        # go to the next layer (square)\n        side_length += 1\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2*(9 - x), 4*(x - 5) + 5)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Initial fraction of pension\n    total_fraction = 1\n    \n    # Fraction spent on Friday\n    friday_spent = 1/4\n    # Remaining fraction after Friday\n    remaining_after_friday = total_fraction - friday_spent\n    \n    # Fraction spent on Saturday\n    saturday_spent = remaining_after_friday * (1/3)\n    \n    # Remaining fraction after Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n    \n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let t be the total litres of water needed to fill the tank.\n    # If using a 5-litre pail, 4 litres will overflow, so t = 5x - 4, where x is the number of 5-litre pails used.\n    # If using a 3-litre pail, he needs 4 more pails, so t = 3(y + 4), where y is the number of 3-litre pails used.\n    # The equations imply that there is an integer number of pails such that the total litres are the same:\n    # 5x - 4 = 3(y + 4)\n    # To find the smallest such x and y that meets the conditions, we can iterate from 1 upwards.\n\n    x = 1\n    while True:\n        litres_with_5_litres_pail = 5 * x - 4\n        # The total litres must be divisible by 3 to use the 3-litre pails\n        if litres_with_5_litres_pail % 3 == 0:\n            y = (litres_with_5_litres_pail // 3) - 4\n            if y >= 1 and (5 * x - 4) == (3 * (y + 4)):\n                return litres_with_5_litres_pail\n        x += 1\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4\n    num_adults = total_people * (1 / ratio_sum)\n    return int(num_adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    ans = num_school_bags * num_pencil_boxes\n    return ans\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    repeating_sequence = \"6129043\"\n    sum_digits = 0\n\n    for i in range(212):\n        sum_digits += int(repeating_sequence[i % len(repeating_sequence)])\n\n    return sum_digits\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    n = 1\n    while True:\n        initial_total = n * n\n        new_total = (n + 1) * (n + 1)\n        if new_total - initial_total == 31:\n            return new_total\n        n += 1\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1  # one willow tree between every 2 ginkgo trees\n\n    return willow_trees\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial number of apples be 'a' and initial number of pears be 'p'\n    a, p = symbols('a p')\n    \n    # Original ratio equation: a/p = 3/4\n    equation1 = Eq(a/p, 3/4)\n    \n    # After replacement, the number of apples and pears changed\n    # New number of apples: a + 36\n    # New number of pears: p - 36\n    # New ratio equation: (a + 36) / (p - 36) = 3/2\n    equation2 = Eq((a + 36)/(p - 36), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n\n    # The solution will give us the number of apples and pears initially\n    initial_apples = solutions[a]\n\n    return initial_apples\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    ans = 36 / 100 * 50\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    n = 1\n    count_5s = 0\n    while True:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_5s += 1\n            temp //= 5\n        if count_5s >= 28:\n            break\n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # The worst case scenario is:\n    # - Daniel picks all yellow socks first (there's no matching pair), then picks one green. (9 picks)\n    # - Since green socks are identical, he needs just to pick one more green to get a pair. (1 pick)\n    # - He can next pick all the remaining greens without getting a second pair. (6 picks)\n    # - The first white sock he picks after that will have no match (1 pick),\n    # - and the second white sock will match the first one. (1 pick)\n    # So he has a pair of green and a pair of white socks. (Total = 18 picks)\n\n    return 9 + 1 + 6 + 1 + 1\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_cost = 1.09 * 5\n    chocolate_cost = 0.55 * 6\n    total_cost = lemonade_cost + chocolate_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    # Let x be Sam's current age\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Sam's age in four years is x + 4\n    # Sam's age four years ago is x - 4\n    # In four years time, Sam is twice as old as he was four years ago:\n    equation = Eq(x + 4, 2 * (x - 4))\n    # Solve for x\n    sam_age = solve(equation, x)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial as fact\nfrom itertools import permutations\n\ndef solution():\n    word = \"RAINBOW\"\n    vowels = ['A', 'I', 'O']\n    consonants = ['R', 'N', 'B', 'W']\n\n    # Total permutations of the word\n    total_permutations = fact(len(word))\n\n    # Permutations of the vowels\n    vowel_permutations = fact(len(vowels))\n\n    # Permutations of the consonants\n    consonant_permutations = fact(len(consonants))\n\n    # Permutations when vowels are together\n    together_permutations = vowel_permutations * fact(len(consonants) + 1)\n\n    # Subtracting the number of permutations when vowels are together from the total\n    result = total_permutations - together_permutations\n\n    return result\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n    # generate all permutations of the digits 3, 7, 2, 8\n    perms = permutations(['3', '7', '2', '8'])\n    # convert each permutation into an integer and filter out even numbers\n    odd_numbers = filter(lambda x: int(''.join(x)) % 2 != 0, perms)\n    # find the smallest odd number from the filtered permutations\n    n = min(int(''.join(num)) for num in odd_numbers)\n    return n\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let the first term be 'a', and the common difference be 'd'.\n    # Sum of the first 'n' terms of an arithmetic progression is given by: S_n = n/2 * (2a + (n - 1)d)\n    # So according to the problem we have two equations:\n    # 20 = 10/2 * (2a + (10 - 1)d) => 20 = 5 * (2a + 9d) => 4 = 2a + 9d - Eq1\n    # 90 = 30/2 * (2a + (30 - 1)d) => 90 = 15 * (2a + 29d) => 6 = 2a + 29d - Eq2\n    # Now, we will solve these two equations to find 'd'.\n    # Subtract Eq1 from Eq2 to eliminate 'a':\n    # (6 - 4) = (2a + 29d) - (2a + 9d)\n    # 2 = 20d => d = 0.1\n    \n    # Common difference 'd' is:\n    d = 0.1\n\n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    answer = None\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            answer = number\n            break\n    return answer\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(15/100 * x - 25/100 * (1000 - x), -50)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    return int(solve_congruence(*congruences)[0])\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    # 3 times the number of chickens is 5 times the number of cows\n    equation1 = Eq(3 * chickens, 5 * cows)\n\n    # 2 times the number of goats is 10 times the number of cows\n    equation2 = Eq(2 * goats, 10 * cows)\n\n    # He has 40 chickens and goats combined\n    equation3 = Eq(chickens + goats, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Calculate the total number of animal feet:\n    # Chickens have 2 feet each, goats and cows have 4 feet each\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n    \n    stickers_penny = (ratio_penny / total_ratio) * total_stickers\n    \n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def count_digit_occurrences_in_range(digit, range_start, range_end):\n    count = 0\n    for number in range(range_start, range_end + 1): # Include range_end in the loop\n        count += str(number).count(str(digit))\n    return count\n\ndef solution():\n    return count_digit_occurrences_in_range(2, 1, 150)\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_min = 125\n    words_in_9_min = words_per_min * 9\n    words_in_6_days = words_in_9_min * 6\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hour = 3.6\n    time_seconds = 300\n\n    # Convert speed to meter per second (1 km = 1000 meters, 1 hour = 3600 seconds)\n    speed_m_per_second = speed_km_per_hour * (1000 / 3600)\n\n    # Calculate the distance in meters\n    distance_meters = speed_m_per_second * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let the total number of apples Jack has be x.\n    # Yesterday he brought x/2 (half of all apples he has).\n    # He sold 40 apples, which is 4/7 of the apples he brought.\n    # So, the apples he brought (x/2) is equal to (7/4)*40 (since 40 is 4/7 of the apples he brought).\n    # Therefore, x/2 = (7/4)*40\n    # Solve for x:\n    x = (7/4) * 40 * 2\n    \n    return x\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    ans = sum(range(200, 209, 2))\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    perm = permutations(digits)\n    closest_num = None\n    min_diff = float('inf')\n    \n    for p in perm:\n        num = int(''.join(p))\n        diff = abs(2978 - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n            \n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    ans = 1\n    for i in range(1, lines + 1):\n        ans += i\n    return ans\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d\n    # The average of the first 2 numbers (a, b) is 10\n    # The average of the last 2 numbers (c, d) is 22\n    # The average of the first and last numbers (a, d) is 14\n    \n    # From the averages, we can write the following equations:\n    # (a + b) / 2 = 10  -->  a + b = 20 (1)\n    # (c + d) / 2 = 22  -->  c + d = 44 (2)\n    # (a + d) / 2 = 14  -->  a + d = 28 (3)\n\n    # From equation (3) we can express d as: d = 28 - a (4)\n\n    # Now we need to find the average of the two middle numbers which is (b + c) / 2\n    # To find b + c, we use equations (1), (2), and (4):\n\n    # From (1) b = 20 - a\n    # From (2) c = 44 - d\n    # From (4) by replacing d in the equation for c: c = 44 - (28 - a) = 16 + a\n\n    # Now we can express b + c as follows:\n    b_plus_c = (20 - a) + (16 + a)  # a cancelled out\n\n    # The average of b and c is half of their sum:\n    average_middle_numbers = b_plus_c / 2\n    return average_middle_numbers\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    # Since the product is 7007, find its prime factors\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n        if n == 1:\n            break\n    \n    # The factors should be 7, 7, 11, 13 as 7x7x11x13 = 7007\n    # 7 x 11 = 77 and 7 x 13 = 91 are the two-digit multiples of 7\n    # Return their sum\n    return 77 + 91\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    number = (result + 10) / 2\n    return int(number)\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Number of terms can be found by using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (num_terms - 1) * difference\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of an arithmetic sequence: sum = (num_terms / 2) * (first_term + last_term)\n    total_seats = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    avg_AB = 22\n    C = 19\n    A_plus_B = 2 * avg_AB\n    avg_ABC = (A_plus_B + C) / 3\n    return avg_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import date\n\n    birth_date = date(1533, 9, 7)\n    death_date = date(1603, 3, 24)\n    age = death_date.year - birth_date.year\n\n    # If death_date comes before the birthday in the year of death, subtract one year from the age\n    if (death_date.month, death_date.day) < (birth_date.month, birth_date.day):\n        age -= 1\n\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    \n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # According to the Pigeonhole Principle, at least one layer will have\n    # at least ceil(total_cakes / total_layers) cakes\n    max_cakes_in_layer = -(-total_cakes // total_layers)  # Ceiling division\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # let's denote:\n    # C = average age of Chinese teachers\n    # E = average age of English teachers\n    # M = average age of Mathematics teachers\n    # We have the following three equations:\n    # (C + E) / 2 = 34\n    # (E + M) / 2 = 36\n    # (C + M) / 2 = 44\n    # From the equations, we have:\n    # C + E = 68\n    # E + M = 72\n    # C + M = 88\n    # Adding all the equations we get:\n    # 2C + 2E + 2M = 68 + 72 + 88\n    # C + E + M = (68 + 72 + 88) / 2\n\n    total_average = (68 + 72 + 88) / 2\n    # Now we need to divide the summed average by 3 to get the average age of the 3 subject teachers\n    ans = total_average / 3\n    return ans\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = 1\n    while (side_length + 1) ** 2 <= 23:\n        side_length += 1\n    cut_length = side_length ** 2\n    remaining_length = 23 - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    subtracted_value = 20 + (1 * 7)\n    expression_value = (21 + 1) * 7\n    ans = expression_value - subtracted_value\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    result = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - int((2018 + i) / 5)\n        result += frac_part\n    return result\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Arithmetic progression sum formula: sum = n/2 * (first_term + last_term)\n    # In this case:\n    # sum = 425, n = 10, first_term = 11, we need to find the common_difference\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    common_difference = symbols('d')\n    \n    # Given formula, where last_term = first_term + (n - 1)*common_difference\n    last_term = 11 + (10 - 1) * common_difference\n    \n    # Equation based on the sum of arithmetic progression\n    equation = Eq(10 / 2 * (11 + last_term), 425)\n    \n    # Solve the equation for the common_difference\n    solved_difference = solve(equation, common_difference)\n    \n    # Return the first (and only) solution\n    return solved_difference[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    \n    # 3/4 of Chelsia's money equals 2/3 of Benson's money\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    # Chelsia has $18 less than Benson\n    equation2 = Eq(chelsia + 18, benson)\n\n    # Solve the equations to find individual amounts\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    chelsia_money = solutions[chelsia]\n    benson_money = solutions[benson]\n    \n    # Calculate total sum of money\n    total_sum = chelsia_money + benson_money\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Calculate the average of the seven numbers since the sequence is arithmetic,\n    # the average is the middle term\n    average = 357 // 7\n    \n    # Smallest number is 3 terms less than the average since they are consecutive odd numbers\n    smallest_number = average - 3 * 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    count_1 = 2\n    count_2 = 1\n    count_3 = 1\n    count_4 = 1\n    ans = factorial(total_digits) // (factorial(count_1) * factorial(count_2) * factorial(count_3) * factorial(count_4))\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A = 1 / sum(1 / i for i in range(1995, 2009))\n    ans = int(A)\n    return ans\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of each chair\n    x = symbols('x')\n    # Each table costs 25 more than each chair, hence the cost of each table is x + 25\n\n    # The total cost of 5 tables and 12 chairs is $720\n    # So, 5*(x + 25) + 12*x = 720\n    equation = Eq(5 * (x + 25) + 12 * x, 720)\n\n    # Solving for x gives us the cost of each chair\n    cost_of_chair = solve(equation, x)[0]\n\n    # The cost of each table is x + 25\n    cost_of_table = cost_of_chair + 25\n\n    return cost_of_table\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2 and\n            num % 4 == 2 and\n            num % 5 == 2 and\n            num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_time, carter_time = 9, 13\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    equation = Eq(martin_speed / carter_speed, martin_time / carter_time)\n\n    speed_difference = Eq(martin_speed - carter_speed, 20)\n\n    solutions = solve((equation, speed_difference), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):       # First number\n        for x2 in range(1, 13):   # Second number\n            for x3 in range(1, 13):  # Third number\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let george_hours be the number of hours George takes to paint the room alone.\n    george_hours = symbols('george_hours')\n\n    # Equation derived from the fact that their combined work rate is the sum of their individual work rates.\n    # 1/Fred's hours + 1/George's hours = 1/combined hours\n    equation = Eq(1/9 + 1/george_hours, 1/6)\n\n    # Solve for the number of hours George takes\n    george_time = solve(equation, george_hours)\n\n    return george_time[0]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We need to solve the congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    # Using the Chinese Remainder Theorem (CRT)\n    \n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(x)  # Replace 'x' with the amount of cloth used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    num_red_apples = 14\n    num_yellow_apples = 20\n    \n    # by the pigeonhole principle, we draw one more than the number of distinct categories to ensure a same-category item is drawn\n    ans = max(num_red_apples, num_yellow_apples) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the number of red pens originally be 3x and the number of black pens 7x\n    # After selling y pens from both red and black, the new ratio becomes 5:13\n    # This gives us two equations:\n    # 3x - y / 7x - y = 5 / 13\n    # and the second condition: 3x - y = 20 (since 20 red pens are left in the end)\n\n    # Let x be the original multiple for red pens, y be the number of pens sold\n    x, y = symbols('x y')\n\n    # Equation for the new ratio after selling y pens\n    equation1 = Eq((3*x - y) / (7*x - y), 5 / 13)\n\n    # Equation for the number of red pens left\n    equation2 = Eq(3*x - y, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of red pens sold is y\n    return solutions[y]\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132+68) * (520-506)\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Since Tina has 2 cats, 2 dogs, and 1 rabbit,\n    # The total number of legs for these animals is:\n    # 2 cats * 4 legs/cat + 2 dogs * 4 legs/dog + 1 rabbit * 4 legs/rabbit\n    legs_from_cats_dogs_rabbits = 2 * 4 + 2 * 4 + 1 * 4\n\n    # As we know the total number of legs is 28, we subtract the legs from\n    # cats, dogs, and rabbits from the total to determine the legs from the birds.\n    legs_from_birds = 28 - legs_from_cats_dogs_rabbits\n\n    # Since birds have 2 legs each, we divide the remaining legs by 2 to find\n    # out the number of birds Tina has.\n    number_of_birds = legs_from_birds // 2\n\n    return number_of_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # There are 5 possible entrances for each of the 4 visitors\n    # Since order matters, we use permutations\n    # Each visitor has 5 choices, and there are 4 visitors,\n    # so we calculate 5^4 (5 raised to the power of 4)\n    ways = 5 ** 4\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    value_after_first_year = 10500\n    original_value = value_after_first_year / 1.05\n    value_after_second_year = original_value * (1 - 0.05)\n    profit_or_loss = value_after_second_year - original_value\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_35 = 200 // 35  # 35 is the LCM of 5 and 7\n\n    return count_by_5 + count_by_7 - count_by_35\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    number = 27 * 3\n    return number\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    desired_average = 6\n    total_for_average = desired_average * (len(numbers) + 1)\n    missing_number = total_for_average - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n\n    num_bags = total_weight // bag_weight\n    if total_weight % bag_weight != 0:\n        num_bags += 1\n\n    return num_bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    final_step = result + 50\n    day_of_birth = final_step % 100\n    month_of_birth = (final_step - day_of_birth) // 100\n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(10, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a pen and a ruler\n    pen, ruler = symbols('pen ruler')\n\n    # Equation 1: Chuck bought 2 rulers and 9 pens for $21.60\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    # Equation 2: A ruler costs $0.90 more than a pen\n    equation2 = Eq(ruler, pen + 0.90)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pen, ruler))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for p in permutations(digits):\n        first = int(''.join(p[:3]))\n        second = int(''.join(p[3:5]))\n        third = int(''.join(p[5:]))\n        if second == 2 * first and third == 4 * first:\n            return third\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the first increasing sequence\n    first_term_inc = 4\n    last_term_inc = 400\n    common_diff_inc = 4\n    num_of_terms_inc = (last_term_inc - first_term_inc) // common_diff_inc + 1\n    sum_of_inc = (num_of_terms_inc * (first_term_inc + last_term_inc)) // 2\n    \n    # Calculate the sum of the second decreasing sequence, excluding the first and last terms\n    # because they're already counted in the increasing sequence.\n    first_term_dec = 396\n    last_term_dec = 4\n    common_diff_dec = 4\n    num_of_terms_dec = (first_term_dec - last_term_dec) // common_diff_dec + 1\n    sum_of_dec = (num_of_terms_dec * (first_term_dec + last_term_dec)) // 2\n    \n    # The total sum is the sum of both sequences\n    total_sum = sum_of_inc + sum_of_dec\n    \n    return total_sum\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    richard_money = 10\n\n    if richard_money < initial_cup_price:\n        return 0\n\n    cups_afforded = 1\n    remaining_money = richard_money - initial_cup_price\n\n    refills_afforded = remaining_money // refill_price\n\n    total_cups = cups_afforded + refills_afforded\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Total number of books of each type\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n\n    # Ways to arrange books of the same kind among themselves\n    story_arrangements = factorial(story_books)\n    comic_arrangements = factorial(comic_books)\n    science_arrangements = factorial(science_books)\n    \n    # There are 3 kinds of books, which can be arranged in 3! ways\n    kind_arrangements = factorial(3)\n\n    # Total arrangements = arrangements of kinds * arrangements within each kind\n    total_arrangements = kind_arrangements * story_arrangements * comic_arrangements * science_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the tax rate T as a symbol\n    T = symbols('T')\n\n    # Calculate tax for the first 50,000\n    tax_for_first_50k = 0.06 * 50000\n\n    # Set up the equation for the income tax paid for the amount above 50,000\n    tax_for_rest = (0.06 + T) * (120000 - 50000)\n\n    # Equation representing the total income tax paid\n    total_tax_paid = Eq(tax_for_first_50k + tax_for_rest, 10000)\n\n    # Solve for T\n    solution_T = solve(total_tax_paid, T)\n\n    return float(solution_T[0])\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend should get at least one ice-cream, we give one to each.\n    remaining_ice_creams = 5 - 3 \n\n    # Now, we need to distribute the remaining ice-creams amongst 3 friends.\n    # This is the same as the number of ways to put 2 indistinguishable items (remaining ice-creams)\n    # into 3 distinguishable bins (friends).\n    # Using stars and bars method, we have (n + k - 1) choose (k - 1) where n is the number of items,\n    # and k is the number of bins. Here n is 2 and k is 3.\n    \n    from math import comb\n    ans = comb(remaining_ice_creams + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n    \n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    total_months = 12\n    \n    average_per_month = total_spent / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Let's assume the distance to the library is d meters.\n    \n    # The time taken to walk to the library is distance/speed\n    time_to_library = 1 / walking_speed\n\n    # The time taken to cycle back from the library is distance/speed\n    time_from_library = 1 / cycling_speed\n\n    # Total time for the round trip\n    total_time = time_to_library + time_from_library\n\n    # Total distance for the round trip\n    total_distance = 2  # because he travels the same distance twice (d to the library and d back)\n\n    # Average speed is total distance divided by total time\n    avg_speed = total_distance / total_time\n\n    return avg_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her.\n    # The cost of 1 serving of ice cream can be calculated as follows:\n    # (x + 2.30) / 5 = (x - 0.30) / 3\n    # Solve the above equation for x\n\n    x = (2.30 * 3 + 0.30 * 5) / (5 - 3)\n    \n    return x\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    ans = solve(equation, x)\n\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    M = symbols('M')\n\n    # Define the equation where the total number of sweets is 127M\n    equation = Eq(127 * 10 + M, 25 * (M + 1))\n\n    # Solve for M\n    solution_M = solve(equation, M)\n    \n    # If there's more than one solution for M, we find the largest one that fits\n    # because M is the last digit of the number of sweets in each bag and the total number is 127_M.\n    M_value = max(solution_M)\n\n    # Calculate the number of sweets in each bag\n    sweets_per_bag = M_value + 1\n\n    return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    x = symbols('x')\n    y = symbols('y')\n    \n    # 9:x = y:2 is a direct proportion.\n    # Setting up the proportion equation: (9 / x) = (y / 2)\n    proportion_eq = Eq(9 / x, y / 2)\n    \n    # Solving the proportion for y when x = 3\n    y_value_when_x_3 = solve(proportion_eq.subs(x, 3), y)[0]\n    \n    return \"directly\", y_value_when_x_3\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    odd_numbers = []\n    for p in permutations('2356'):\n        num = int(''.join(p))\n        if num % 2 != 0:  # check if the number is odd\n            odd_numbers.append(num)\n    \n    ans = min(odd_numbers)  # smallest odd number from the permutations\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You need to take all balls of one color and one more ball to ensure you have at least two of the same color.\n    # Since there are 7 green balls, taking 8 balls (7 green + 1 blue) ensures at least two balls of the same color (green in this case).\n    # Alternatively, you could take 7 blue balls and one additional ball (either green or blue) to have at least two of the same color (blue in this case).\n    # Therefore, the answer is the number of balls of one color plus one.\n\n    return max(7, 8) + 1\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number we think of\n    x = symbols('x')\n    # Add 3 to x\n    x_plus_3 = x + 3\n    # Multiply by 2\n    times_2 = x_plus_3 * 2\n    # Take away 2\n    minus_2 = times_2 - 2\n    # Add 10\n    add_10 = minus_2 + 10\n    # Divide by 2\n    div_2 = add_10 / 2\n    # Take away the number you started with (x)\n    final_result = div_2 - x\n\n    # Simplify the final result\n    ans = simplify(final_result)\n\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let f be the initial number of Felicia's bracelets\n    # Let j be the initial number of Janice's bracelets, which is given as 96\n    j = 96\n    \n    # After the transactions, Felicia has (2/5)f bracelets left and Janice has j + (3/5 * 2/5)f bracelets\n    # The ratio of Felicia's bracelets to Janice's bracelets is 5:7\n    # (2/5)f / (j + (3/5 * 2/5)f) = 5/7\n    # Solving for f:\n    f = (5/2) * (7 * j / (35 - 6))\n    \n    # Janice bought (3/5 * 2/5)f of Felicia's bracelets\n    bracelets_bought = (3/5) * (2/5) * f\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    \n    ans = round(numerator / denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Cost variables\n    sci_fi_cost = 4\n    comic_cost = 5\n    novel_cost = 6\n\n    # Number of books variables\n    total_books = 50\n    sci_fi_books = 20\n    comic_books = 10\n    novel_books = 20\n\n    # Total cost calculation without donation\n    total_cost_without_donation = (sci_fi_cost * sci_fi_books) + \\\n                                  (comic_cost * comic_books) + \\\n                                  (novel_cost * novel_books)\n\n    # Calculate average cost per book without donation\n    average_cost = total_cost_without_donation / total_books\n\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n    \n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    \n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7)*(jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    orange = 6\n    pink = 4\n    brown = 12\n    # Worst case scenario, Annabella takes all the non-yellow shirts first\n    worst_case_non_yellow = orange + pink + brown\n\n    # To make sure she gets at least 1 yellow shirt, she must take 1 more shirt\n    ans = worst_case_non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "from math import lcm\n\ndef solution():\n    # Least Common Multiple of 9, 10, and 15\n    min_students = lcm(9, 10, 15)\n    return min_students\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    # Total number of three-digit numbers\n    total_three_digit_numbers = 9 * 10 * 10\n    \n    # Number of three-digit numbers with no '7' at all\n    no_sevens_at_all = 8 * 9 * 9\n    \n    # Number of three-digit numbers with exactly one '7'\n    # There are three positions where '7' can be placed\n    one_seven = 3 * (8 * 9)\n    \n    # Total number of three-digit numbers with at least two sevens\n    # This is given by total - no_sevens_at_all - one_seven\n    at_least_two_sevens = total_three_digit_numbers - no_sevens_at_all - one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_price = 3.90\n    individual_price = 0.35\n    individual_total_price = individual_price * 15\n    savings = individual_total_price - multipack_price\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_in_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_in_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Given that 3/4 + 3/4 + 3/4 = 1 + box * 1/4\n    # The left-hand side simplifies to 9/4\n    lhs = (3/4) * 3\n    # The right-hand side simplifies to 1 + box * 1/4\n    \n    # We subtract 1 from both sides to solve for box * 1/4\n    rhs = lhs - 1\n    \n    # We divide both sides by 1/4 to solve for the box\n    box = rhs / (1/4)\n    \n    # Return the answer\n    return box\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term and a_n is the nth term\n    # n is the number of terms, and the common difference is d\n    \n    n = 20  # Number of terms\n    S_n = 560  # Sum of terms\n    d = 2  # Common difference\n\n    # a_1 is the first term and a_20 is the 20th term\n    a_1 = symbols('a_1')\n    a_20 = a_1 + (n - 1) * d\n    \n    # Set up the equation for the sum of the arithmetic sequence\n    equation = Eq(n / 2 * (a_1 + a_20), S_n)\n    \n    # Solve the equation\n    solution = solve(equation, a_1)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    progress_per_day = climb_up - slip_down\n    day = 0\n    current_depth = 0\n\n    while True:\n        day += 1  # worm climbs at the start of the day\n        current_depth += climb_up\n        if current_depth >= depth:  # if it reaches or exceeds the depth, it's out\n            break\n        current_depth -= slip_down  # slips down at night\n\n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_period_days = 4\n    second_period_days = 6\n    third_period_days = 5\n    \n    first_period_pages = 25 * first_period_days\n    second_period_pages = 40 * second_period_days\n    third_period_pages = 80  # total pages, not per day\n\n    total_days = first_period_days + second_period_days + third_period_days\n    total_pages = first_period_pages + second_period_pages + third_period_pages\n\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_toys_after = 14\n    brother_toys_after = 12\n    difference = 10\n\n    brother_toys_original = brother_toys_after - (penny_toys_after - brother_toys_after - difference)\n\n    return brother_toys_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    result = 12345679 * 63\n    return result\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):\n        tens = age // 10\n        ones = age % 10\n        if ones * 10 + tens + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To be sure that Tom has 4 cards of the same suit,\n    # he must draw enough cards to cover the worst-case scenario:\n    # That is, he draws at most 3 cards from each suit without getting a fourth of any suit.\n    # After that point, the next card he draws must be the fourth card of one of the suits.\n    \n    max_cards_without_four_of_a_suit = 3 * 4\n    # He needs to draw one more card to be sure to have four of the same suit\n    cards_to_draw = max_cards_without_four_of_a_suit + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60\n    tickets_remaining = 28\n    percent_remaining = 100 - percent_sold\n    \n    total_capacity = tickets_remaining * 100 / percent_remaining\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money they each spent.\n    x = symbols('x')\n\n    # Hayden's remaining money after spending is 1420 - x.\n    # Mitchell's remaining money after spending is 505 - x.\n    # According to the problem, Hayden has 4 times as much money left as Mitchell.\n    equation = Eq(1420 - x, 4 * (505 - x))\n\n    # Solve the equation for x.\n    solution = solve(equation, x)\n\n    # The amount of money each of them spent is the solution.\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (2 / 3) * number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Number of girls is 45\n    girls = 45\n    \n    # Fraction of children who are girls = 1 - fraction of children who are boys\n    fraction_girls = 1 - (3 / 8)\n    \n    # Total number of children, since the fraction of children who are girls is known and there are 45 girls\n    children = girls / fraction_girls\n    \n    # Fraction of the people who are children = 1 - fraction of the people who are adults\n    fraction_children = 1 - (3 / 7)\n    \n    # Total number of people at the party, since the fraction of people who are children is known\n    total_people = children / fraction_children\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5 * 2       # Total amount from two-dollar notes\n    fifty_cent_coins = 7 * 0.5     # Total amount from fifty-cent coins (converted to dollars)\n    total = two_dollar_notes + fifty_cent_coins  # Total amount before purchase\n    cost_of_file = 11.95           # Cost of the file\n    remaining = total - cost_of_file  # Amount remaining after purchase\n\n    return remaining\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance_per_day = climb_distance - slide_distance\n    days = (total_distance - climb_distance) // net_distance_per_day\n    if (total_distance - climb_distance) % net_distance_per_day != 0:\n        days += 1\n    \n    # Add the final day when the snail climbs out of the burrow\n    days += 1\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(18, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n    total_willow_trees = (ginkgo_trees - 1) * willow_trees_between\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship = 28  # Speed of the ship in still water in km/h\n    speed_current = 3  # Speed of the current in km/h\n    distance = 150  # Distance to travel upstream in km\n\n    # Speed upstream is the ship's speed minus the current's speed\n    speed_upstream = speed_ship - speed_current\n\n    # Time is distance divided by speed\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # x + y = 102 (Adam + Ben)\n    # y + z = 97  (Ben + Carl)\n    # x + z = 93  (Adam + Carl)\n    # Sum all equations: 2x + 2y + 2z = 292\n    # Divide by 2 to get the total weight: x + y + z = 146\n\n    total_weight = (102 + 97 + 93) // 2\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost_per_kg = 7.48\n    cheese_weight_g = 500\n    cheese_cost = (cheese_cost_per_kg / 1000) * cheese_weight_g\n\n    apple_cost_each = 0.12\n    apple_quantity = 8\n    apple_cost = apple_cost_each * apple_quantity\n\n    yoghurt_cost_each = 0.46\n    yoghurt_quantity = 2\n    yoghurt_cost = yoghurt_cost_each * yoghurt_quantity\n\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    note_amount = 10\n\n    change = note_amount - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Zack's rate per hour\n    zack_rate = 150\n\n    # Total hours for Andy and Zack to sell all aircrafts together\n    total_hours_together = 6\n\n    # Total aircrafts to be sold\n    total_aircrafts = 1200\n\n    # Combined rate of Andy and Zack per hour\n    combined_rate = total_aircrafts / total_hours_together\n\n    # Andy's rate per hour\n    andy_rate = combined_rate - zack_rate\n\n    # Time it takes for Andy to sell all the aircrafts by himself\n    time_for_andy_alone = total_aircrafts / andy_rate\n\n    return time_for_andy_alone\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Start the total sum of people from the difference, which is the excess number of students\n    total_people = 80\n    # Define an initial difference between the number of students and teachers for the first layer\n    layer_difference = 80\n    \n    # Since each new layer of students adds 4 people to the difference (forming a square),\n    # the next possible layer should reduce that difference by 4 (since it's a layer of teachers)\n    # Keep adding layers until the difference cannot form a square layer\n    while True: \n        # Try to form the next layer by adding or subtracting 4 (alternating student and teacher layers)\n        layer_difference += 4\n        \n        # Calculate the side length of the square that would form with this difference\n        side_length = int((layer_difference)**0.5)\n        \n        # If the square of that side length equals the difference, we can form another layer\n        if side_length**2 == layer_difference:\n            # Add the number of people in this layer to the total\n            total_people += 2*side_length + (2*(side_length - 1))\n        else:\n            # Cannot form a full layer, exit the loop\n            break\n            \n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratios_sum = 2 + 7 + 6\n    orange_ratio = 7\n    \n    orange_juice_volume = (orange_ratio / ratios_sum) * total_volume\n    \n    return orange_juice_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the bigger number, y is the smaller number\n\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    days_in_a_week = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_daily * days_in_a_week\n    remaining_amount = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return remaining_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for how much Steve, Mark and Ryan originally had\n    steve, mark, ryan, meal = symbols('steve mark ryan meal')\n\n    # Steve had ＄40 more than Mark\n    equation1 = Eq(steve, mark + 40)\n    \n    # Situation when Steve paid for the meal\n    equation2 = Eq((steve - meal)/3, mark/8)\n    equation3 = Eq(mark/8, ryan/9)\n\n    # Situation when Ryan paid for the meal\n    equation4 = Eq(steve/5, mark/4)\n    equation5 = Eq((ryan - meal)/1, steve/5)\n\n    # Situation when Mark paid for the meal\n    equation6 = Eq(steve/10, (mark - meal)/1)\n    equation7 = Eq((mark - meal)/1, ryan/9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (steve, mark, ryan, meal))\n\n    return solutions[meal]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    debt_repayment = 10.50\n    remaining_after_debt = initial_amount - debt_repayment\n    amount_spent_on_magazines = remaining_after_debt / 2\n    amount_left = remaining_after_debt - amount_spent_on_magazines\n\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to its prime factors\n    factors = factorint(44000)\n\n    # Initialize q to 1\n    q = 1\n\n    # Loop through the factors and their powers\n    for prime, power in factors.items():\n        # If the power is not divisible by 3, this prime factor must be part of q\n        if power % 3 != 0:\n            # Calculate the power that needs to be multiplied to make it a full cube\n            power_needed_for_cube = (3 - (power % 3)) % 3\n            q *= prime ** power_needed_for_cube\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    width = symbols('width')\n    length = 2 * width\n    perimeter = Eq(2 * (length + width), 72)\n    \n    solutions = solve(perimeter, width)\n    rectangle_length = 2 * solutions[0]\n    \n    return rectangle_length\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = 0\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4\n    applied_force = 250  # force applied parallel to the floor in N\n\n    # Calculate the force of static friction\n    force_of_static_friction = mass * 9.81 * coefficient_of_static_friction  # F = μ * N, where N = mass * g (g = 9.81 m/s^2)\n\n    # The force of static friction cannot be greater than the applied force\n    if force_of_static_friction > applied_force:\n        force_of_static_friction = applied_force\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    # given terms and their positions\n    term3 = 23\n    position3 = 3\n    term15 = 155\n    position15 = 15\n\n    # calculate common difference using the arithmetic sequence formula\n    # term_n = term_1 + (n-1) * common_difference\n    # common_difference = (term_n - term_1) / (n-1)\n    common_difference = (term15 - term3) / (position15 - position3)\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')  # Define symbols for A and B's scores\n    \n    # B's score is 50 points less than A's score\n    equation1 = Eq(B, A - 50)\n    \n    # A's score would be 5 times B's score if B gave A 25 points\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = cube + 1\n        root = square**0.5\n        if root.is_integer():\n            return int(square)\n        i += 1\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = total_parts / (total_workers * total_hours)\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    distance_climbed_per_day = 5\n    slide_down_at_night = 3\n    total_distance = 16\n    effective_climb_per_day = distance_climbed_per_day - slide_down_at_night\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_climbed_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_down_at_night\n        \n    return days\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n    share_difference = 6\n\n    # Let's say James has \"x\" buttons\n    # Then Nina has \"x + share_difference\" buttons\n    # Together, they have total_buttons, so:\n    # x + (x + share_difference) = total_buttons\n    # After sharing x + share_difference - 6 = x + 6\n    # Simplify to get the number of buttons James originally has\n\n    x = (total_buttons - share_difference) // 2\n    nina_buttons_original = x + share_difference\n    \n    return nina_buttons_original\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given that the tax increases by 5 cents for every additional bag,\n    # we can say that y = 5x, where y is the tax in cents and x is the number of bags used.\n    \n    # As the tax charged (y) is equal to the number of bags used (x) multiplied by the tax rate (5 cents),\n    # the equation relating the two values is:\n    \n    # y = coefficient * x\n    # Where the coefficient is the tax per bag, which is 5 cents.\n    coefficient = 5\n    \n    # We define a dummy value for x to demonstrate the equation, but in reality this function\n    # simply represents the equation itself without calculating a specific value.\n    x = 1  # dummy value\n    y = coefficient * x  # This line symbolizes the equation y = 5x\n\n    # The final result is the equation in the form of a lambda function that can be used to calculate y for any x\n    ans = lambda x: coefficient * x\n    \n    return ans\n\n# In a practical scenario, solution would return a callable function representing the equation y = 5x\n# and we could use it to calculate y for any given x like so:\n# y_for_10_bags = solution()(10)\n# But since the question asks for the equation itself, the `solution` function as defined suffices.\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences are of the form x ≡ a (mod m)\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    num_fraction = 8 / 100\n    num_decimal = 0.7\n\n    if num_fraction > num_decimal:\n        ans = num_fraction\n    else:\n        ans = num_decimal\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    term1 = Fraction(3)\n    term2 = Fraction(4, 5)\n    term3 = Fraction(1*9 + 1, 9) # Converting 1 1/9 to improper fraction\n    term4 = Fraction(5*2 + 1, 2) # Converting 5 1/2 to improper fraction\n    term5 = Fraction(3, 11)\n\n    ans = term1 * term2 * term3 * term4 * term5\n    return ans\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_cost = 275\n    max_short_term_days = 5\n\n    # Calculate the cost for 5 days or less\n    cost_for_max_short_term = flat_fee + (daily_fee_short * max_short_term_days)\n    \n    if total_cost <= cost_for_max_short_term:\n        # If the total cost is less than or equal to the cost for 5 days,\n        # Steven rented the car for total_cost minus flat_fee divided by daily_fee_short days\n        num_days = (total_cost - flat_fee) / daily_fee_short\n    else:\n        # If the total cost is more, then Steven rented the car for 5 days at the short term rate,\n        # plus additional days at the long term rate\n        num_days = max_short_term_days + (total_cost - cost_for_max_short_term) / daily_fee_long\n\n    return int(num_days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height\n\n    while True:\n        rebound_height = initial_height * rebound_ratio\n        if rebound_height < 1e-6:\n            break\n        total_distance += 2 * rebound_height\n        initial_height = rebound_height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    sheet_number = 1\n    while True:\n        pages_sum = (sheet_number * 4) + (sheet_number * 4 - 1) + 1 + 2\n        if pages_sum == 58:\n            return sheet_number\n        sheet_number += 1\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # green - 60 = yellow - 14\n    equation1 = Eq(green - 60, yellow - 14)\n\n    # (yellow - 14) = 3 * (green - 60)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Initially, green = yellow\n    equation3 = Eq(green, yellow)\n\n    solutions = solve((equation1, equation2, equation3), (green, yellow))\n\n    return solutions[green] - 60\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n    race_distance = 3000  # metres\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence * 2 - last_term  # Multiply by 2 and exclude last term repeated\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n    bad_apples = (percentage_bad / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    pencil_cost_per_unit = 1.80 / 12\n    pen_cost_per_unit = (7 / 3) * pencil_cost_per_unit\n    cost_of_five_pens = 5 * pen_cost_per_unit\n    return cost_of_five_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols to use in the equations\n    t = symbols('t')  # time after 6:10 pm in hours\n\n    # Simon's travel distance equation\n    # distance = speed * time\n    simon_distance = 80 * t\n\n    # Wife's travel distance equation\n    # distance = speed * time + initial distance head start\n    wife_distance = 60 * t + 15\n\n    # Setting the equations equal to find the time when Simon overtakes his wife\n    # Simon's and his wife's distances are the same at the point of overtaking\n    equation = Eq(simon_distance, wife_distance)\n\n    # Solve the equation for t\n    t_overtake = solve(equation, t)\n\n    # Convert the overtaking time to minutes and add to the start time 6:10 pm\n    overtaking_time_minutes = int(t_overtake[0] * 60)\n    hours = overtaking_time_minutes // 60\n    minutes = overtaking_time_minutes % 60\n\n    # Start time is 6:10 pm, so add the overtaking hours and minutes to it\n    overtaking_hour = 18 + hours\n    overtaking_minute = 10 + minutes\n\n    # If overtaking_minute is 60 or more, adjust the time\n    if overtaking_minute >= 60:\n        overtaking_hour += overtaking_minute // 60  # Add extra hours if minutes exceed 60\n        overtaking_minute = overtaking_minute % 60  # Remainder is the actual minutes\n\n    # Format the time in hh:mm format\n    overtaking_time_formatted = f\"{overtaking_hour:02}:{overtaking_minute:02}\"\n\n    return overtaking_time_formatted\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n    return drinks * food_items\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            ans += 1\n        if i % 5 == 0:\n            ans = ans - 1 if ans > 0 else ans + 1\n    return 100 - ans\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Ways to reach the 5th step\n    ways_to_5th = fibonacci(5) # He can step on the 1st, 2nd, 3rd, or 4th step before stepping on the 5th\n    \n    # Ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = fibonacci(6) # Subtracting one because we start from step 5\n    \n    # Total ways is the product of the two\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n    \n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The problem is a classic river crossing puzzle. The idea is to minimize the total time\n    # by ensuring that the people who paddle take turns efficiently.\n    # Since One trip is always going to take more than 5 mins (as Jason and Chi Yew take 5 mins each)\n    \n    # Step 1: Send the two fastest (Jason and Chi Yew) to the other side. 5 minutes taken.\n    # Step 2: One of them comes back with the boat. 5 more minutes taken, total = 10 minutes.\n    # Step 3: The two slowest (Wei Jie and Michael) go to the other side. 9 minutes taken because Wei Jie is slower.\n    #          Total time now is 19 minutes.\n    # Step 4: The faster of the original pair (Jason or Chi Yew) goes back to the starting side with the boat.\n    #          5 more minutes taken, total = 24 minutes.\n    # Step 5: The fastest two (Jason and Chi Yew) go again to the other side. 5 minutes taken.\n    #          Total time now is 29 minutes.\n    # This approach minimizes the time because it minimizes the number of slow crossings.\n\n    # Total time for crossing the river\n    total_time = 5 + 5 + 9 + 5 + 5\n\n    # They are not correct; here is the correct working with the answer\n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1/5\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    \n    meters_per_day = total_road / total_days\n    \n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    max_people_per_country_before_guarantee = 8\n    participants = (max_people_per_country_before_guarantee * countries) + 1\n    return participants\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(88 / A, 22)  # Sandra's mistaken calculation\n    solution_to_mistake = solve(equation, A)\n\n    # Calculate the correct answer using the correct number\n    correct_answer = 98 / solution_to_mistake[0]\n    \n    return (solution_to_mistake[0], correct_answer)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four_calculators = 32\n    cost_of_one_calculator = cost_of_four_calculators / 4\n    cost_of_twelve_calculators = cost_of_one_calculator * 12\n    return cost_of_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # speed of Lucas (laps per minute)\n    lucas_speed = 5 / 6\n    # speed of Miller (laps per minute)\n    miller_speed = 5 / 10\n    \n    # relative speed (difference in speed since they go in the same direction)\n    relative_speed = lucas_speed - miller_speed\n    \n    # time taken to complete one overtaking (minutes)\n    time_to_overtake_once = 1 / relative_speed\n    \n    # time taken to complete the second overtaking (minutes)\n    time_to_overtake_twice = time_to_overtake_once * 2\n    \n    return time_to_overtake_twice\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # Find the maximum amount before rounding to the nearest $10\n    max_before_round = 1670 + 4\n    return max_before_round\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # We know that the sum S of an arithmetic sequence can be calculated by the formula:\n    # S = n/2 * (a1 + an)\n    # where:\n    # n = the number of terms\n    # a1 = the first term\n    # an = the last (nth) term\n\n    # We have the sum S = 2014 and n = 53.\n    # We need to find the last term an.\n\n    # from the formula, we have:\n    # 2014 = 53/2 * (a1 + an)\n    # rearranging the formula to solve for an, we get:\n    # an = (2 * 2014 / 53) - a1\n\n    # We also know that the sequence is made up of consecutive whole numbers, \n    # so the difference between each term is 1.\n    # This means that an = a1 + 53 - 1 (as there are 53 terms including the first term)\n\n    # Combining both expressions of an we have:\n    # a1 + 53 - 1 = (2 * 2014 / 53) - a1\n\n    # Solving for a1:\n    # 2 * a1 = (2 * 2014 / 53) - (53 - 1)\n    # a1 = ((2 * 2014 / 53) - 52) / 2\n    # a1 = ((2 * 2014) - 53 * 52) / (2 * 53)\n    # a1 = (4028 - 2756) / 106\n    # a1 = 1272 / 106\n    # a1 = 12\n\n    # Once we know a1, we can find an\n    # an = a1 + 53 - 1\n    # an = 12 + 53 - 1\n    # an = 64\n    \n    # The largest number an is 64.\n    a1 = 12\n    an = a1 + 53 - 1\n\n    return an\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    num = 5217\n    divisor = 13\n    remainder = num % divisor\n    \n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes = hours * 60\n    return int(minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    \n    children_fraction = 3/5\n    men_fraction = 1/4\n    children_more_than_men = 120\n    \n    # Total children\n    children = children_fraction * visitors\n    # Remaining visitors after children\n    remaining_visitors = visitors - children\n    # Total men\n    men = men_fraction * remaining_visitors\n    \n    # Equation based on the condition given: children = men + 120\n    equation = Eq(children, men + children_more_than_men)\n    \n    # Solving the equation for the total number of visitors\n    solutions = solve(equation, visitors)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # base rate in cents for up to 15 minutes\n    additional_rate = 5  # rate in cents for each additional minute\n    total_cost = 140  # total cost in cents\n\n    additional_cost = total_cost - base_rate  # cost of additional minutes\n    additional_minutes = additional_cost / additional_rate  # number of additional minutes\n\n    total_minutes = 15 + additional_minutes  # total minutes including the base 15 minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Tim's current age as T and his mother's current age as M.\n    T, M = symbols('T M')\n    \n    # The first equation represents Tim's current age.\n    equation1 = Eq(T, 8)\n    \n    # The second equation uses the information provided: By the time Tim is M years old,\n    # his mother will be 54 years old. This implies that Tim's mother is M - T years\n    # older than Tim. Therefore, M + (M - T) equals 54.\n    equation2 = Eq(M + (M - T), 54)\n    \n    # Solving the system of equations will give us the value of M, which represents\n    # Tim's mother's current age.\n    solutions = solve((equation1, equation2), (T, M))\n    \n    return solutions[M]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # orange string length in meters\n    orange_to_purple_ratio = 9.2\n    \n    purple_length_m = orange_length_m / orange_to_purple_ratio\n    green_extra_length_cm = 24.9  # green string is longer than the purple string by this amount in cm\n\n    # Conversion from cm to m\n    green_extra_length_m = green_extra_length_cm / 100\n    green_length_m = purple_length_m + green_extra_length_m\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol representing the unknown value A\n    A = symbols('A')\n    \n    # Define the equation given by the puzzle\n    equation = Eq(2*A + 3*A + 4*A, 396)\n    \n    # Solve the equation for A\n    solution = solve(equation, A)\n    \n    # Get the first (and in this case only) solution as the answer\n    return solution[0]\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    total_work = 1\n    ivy_rate = total_work / 24\n    kevin_rate = total_work / 20\n\n    # Let x be the number of days Kevin takes off\n    # In 18 days, Ivy does her part of the work 18 * ivy_rate\n    # Kevin works for (18 - x) days, so he does (18 - x) * kevin_rate part of the work\n    # Together they complete the job, so the sum of their work is equal to total_work\n\n    x = symbols('x')\n    equation = Eq((18 - x) * kevin_rate + 18 * ivy_rate, total_work)\n\n    days_off = solve(equation, x)[0]\n\n    return days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the length of the shorter piece, y is the length of the longer piece\n    equation1 = Eq(x + y, 49.5)  # sum of both pieces is 49.5 meters\n    equation2 = Eq(y, 5 * x)  # the longer piece is 5 times the shorter piece\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return round(solutions[y], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    \n    # There are 3 days: Monday, Tuesday, and Wednesday\n    total_days = 3\n    \n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * total_days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5  # Sum of the ratio parts\n    total_litres = 36  # Total litres of fruit drink\n\n    apple_ratio = 4  # Apple juice part of the ratio\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Total number of pupils left at school is 400\n    total_left = 400\n\n    # Proportion of Year 7 pupils left is 10%\n    year_7_proportion_left = 0.10\n\n    # Calculate the number of Year 7 pupils left as a count\n    year_7_count_left = total_left * year_7_proportion_left\n\n    # Proportion of Year 7 pupils normally is 20%\n    year_7_proportion_normal = 0.20\n\n    # Calculate the normal total count of pupils in school with the help of Year 7 pupils left\n    # The number of Year 7 pupils left (10% of 400) should equal the normal number of Year 7 pupils\n    # minus the ones missing (20% of normal total count)\n    # So, year_7_count_left = (year_7_proportion_normal * normal_total_count) - missing_Year_7_girls\n    # But we know that year_7_count_left = 10% of 400 = 40, which is also 10% of the normal total count\n    # Therefore, 40 = 10% of normal total count\n    # Hence, normal_total_count can be calculated as:\n    normal_total_count = year_7_count_left / year_7_proportion_left\n\n    return int(normal_total_count)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    day_progress = 4\n    night_regress = 1\n    well_height = 25\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < well_height:\n        day_count += 1\n        total_climbed += day_progress\n\n        if total_climbed >= well_height:\n            break\n        total_climbed -= night_regress\n\n    return day_count\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to complete the book by himself\n    t = symbols('t')\n\n    # Nancy's work rate is 1/6 book per day\n    # Tim's work rate is 1/t book per day\n    \n    # Working together, their combined work rate is 1/6 + 1/t = 1/4 book per day\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t\n    tim_days = solve(equation, t)\n\n    return tim_days[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100  # Initial pocket money\n    period = 2  # Deposit and spend cycle in days\n    days = 15\n    # Calculate the number of complete cycles and remaining days after the last complete cycle\n    complete_cycles, remaining_days = divmod(days, period)\n\n    # Money change over one complete cycle (deposit £5 and spend £8)\n    cycle_money_change = 5 - 8\n\n    # Calculate the total money change after all complete cycles\n    total_money_change = cycle_money_change * complete_cycles\n\n    # Calculate the money change for any remaining days after the last complete cycle\n    if remaining_days > 0:\n        # If there is an odd remaining day, it means Bob deposits on that day\n        total_money_change += 5\n\n    # Calculate the final amount of money Bob has after 15 days\n    final_money = total_money + total_money_change\n\n    return final_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = \"333\" * 4  # Create a string with 12 digits of 3\n    number = int(number_str)  # Convert the string to an integer\n    remainder = number % 7  # Calculate the remainder when divided by 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    height = 31\n    up = 3\n    down = 2\n    net_movement = up - down\n    jumps = 0\n    \n    while height > 0:\n        jumps += 1\n        height -= up\n        if height <= 0:\n            break\n        height += down\n        \n    return jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    sum_terms = 0\n    sum_terms += 1 / 22 # last term by itself\n\n    # Adding terms as per given pattern\n    sum_terms += (1 / (1 * 2)) + (2 / (2 * 4))\n    sum_terms += (3 / (4 * 7)) + (4 / (7 * 11))\n    sum_terms += (5 / (11 * 16)) + (6 / (16 * 22))\n\n    return sum_terms\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    money_left_after_dress = 40 / (2/5)\n    initial_money = money_left_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial \n\n    def find_factors(n, div):\n        count = 0\n        while n >= div:\n            n //= div\n            count += n\n        return count\n\n    num_zeros = min(find_factors(999, 5) - find_factors(300, 5), \n                    find_factors(999, 2) - find_factors(300, 2))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    numbers = [198, 298, 398, 498]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    return 4 * a + 0.6 * b\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    side_students = 60 // 4  # Students on one side of the outer layer\n    total_students = 0\n\n    # Starting from the outer layer and moving inward, calculate total number of students\n    while side_students > 0:\n        total_students += side_students ** 2\n        side_students -= 2  # Move to the next inner square\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    total_vehicles = cars + bikes + lorries\n    \n    eq1 = Eq(cars, bikes + bikes / 3)\n    eq2 = Eq(bikes, lorries + lorries / 4)\n   \n    solutions = []\n    for total in range(2, 100, 2):  # total is even and less than 100\n        eq3 = Eq(total_vehicles, total)\n        result = solve((eq1, eq2, eq3), (cars, bikes, lorries), dict=True)\n        if result and all(value.is_integer and value > 0 for sol in result for value in sol.values()):\n            solutions.extend(result)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of buttons in box A, and y be the initial number of buttons in box B\n    x, y = symbols('x y')\n\n    # From the question, we have the following relationships:\n    # x = y + 64 (64 more buttons in A than in B at first)\n    # y_new = y - 28 (B has 28 fewer buttons than before)\n    # x_new = x + (y - y_new) / 2 (A gains 1 button for every 2 taken from B)\n    # x_new + y_new = 4 * y_new (ratio of the total buttons to the buttons in B is 4:1)\n\n    y_new = y - 28  # New number of buttons in box B\n    x_new = x + (y - y_new) / 2  # New number of buttons in box A\n\n    # Equation system\n    equation1 = Eq(x, y + 64)\n    equation2 = Eq(x_new + y_new, 4 * y_new)\n\n    # Solve the system of equations for x and y\n    solution_dict = solve((equation1, equation2), (x, y))\n\n    return solution_dict[x]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 + 1)**2 - (layer * 2)**2\n        if layer % 2 == 0:\n            red_tiles += min(tiles_in_layer, total_tiles)\n        else:\n            green_tiles += min(tiles_in_layer, total_tiles)\n        total_tiles -= tiles_in_layer\n        layer += 1\n    \n    color_more_used = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n    \n    return (color_more_used, difference)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    result = 764 * 7\n    return result\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_gained = 24\n    total_rounds_played = 12\n    cards_per_win = 4\n    cards_per_loss = -2  # negative because she loses cards\n\n    # Let's create equations based on the given information:\n    # Let w be the number of rounds won and l be the number of rounds lost.\n    # We have two equations:\n    # w + l = total_rounds_played (12 rounds in total)\n    # 4w - 2l = total_cards_gained (24 cards gained)\n\n    # From the first equation, we can express l in terms of w: l = total_rounds_played - w\n    # Substituting l in the second equation, we get:\n    # 4w - 2(total_rounds_played - w) = total_cards_gained\n    # 4w - 24 + 2w = 24\n    # 6w - 24 = 24\n    # 6w = 48\n    # w = 8\n\n    # Now we substitute w back into the first equation to find l\n    l = total_rounds_played - (total_cards_gained / (cards_per_win + cards_per_loss))\n\n    return int(l)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10\n\n    number_of_bins = (length_of_boulevard // interval) + 1\n\n    return number_of_bins\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        rounds += 1\n        if x >= y and x >= z:\n            x -= 2\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # For dividing n identical items into r identical groups, the formula is:\n    # (n + r - 1) choose (r - 1)\n    # In this case, we have 7 lollipops and 3 plates.\n    # This means we need to calculate (7 + 3 - 1) choose (3 - 1)\n    from math import comb\n    n = 7\n    r = 3    \n    ans = comb(n + r - 1, r - 1)\n    return ans\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # A number is divisible by 33 if and only if it is divisible by both 3 and 11.\n    # For a number to be divisible by 3, the sum of its digits must be divisible by 3.\n    # For a number to be divisible by 11, the difference between the sum of the digits in the odd positions and the sum of the digits in the even positions must be divisible by 11.\n    \n    # Initialize variable n, which represents the number of '2011' repetitions\n    n = 0\n    \n    # Start checking for divisibility by incrementing n until the number is divisible by 33\n    while True:\n        # Build the number as a string\n        number_string = '26' + '2011' * n + '7'\n        \n        # Convert the string to integers\n        digits = list(map(int, number_string))\n        \n        # Check if the sum of digits is divisible by 3\n        if sum(digits) % 3 != 0:\n            n += 1\n            continue\n        \n        # Check if the difference between the sum of the digits in the odd and even positions is divisible by 11\n        odd_sum = sum(digits[i] for i in range(len(digits)) if i % 2 == 0)\n        even_sum = sum(digits[i] for i in range(len(digits)) if i % 2 != 0)\n        if (odd_sum - even_sum) % 11 != 0:\n            n += 1\n            continue\n        \n        # If both divisibility checks pass, we've found the smallest n\n        break\n    \n    return n\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If Bob takes 3 minutes to cut a log into 4 pieces, he makes 3 cuts (since each cut creates an additional piece).\n    cuts_for_4_pieces = 3\n    minutes_per_cut = 3 / cuts_for_4_pieces  # minutes needed for each cut\n\n    # To cut a log into 8 pieces, Bob needs 7 cuts.\n    cuts_for_8_pieces = 7\n    total_minutes_for_8_pieces = minutes_per_cut * cuts_for_8_pieces\n\n    return total_minutes_for_8_pieces\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah*(2/5), 2*chai_seng*(1/7))\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    current_collection = total_cards - duplicates + new_cards\n    \n    return current_collection\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single entity, thus we have 7 entities to arrange\n    entity_count = 7\n    \n    # Calculate the permutations for 7 entities around a circular table\n    permutations = factorial(entity_count - 1)\n    \n    # Amy and Judy can be arranged in 2! ways as they can switch places with each other\n    aj_permutations = factorial(2)\n    \n    # The total number of different orders is the product of the two permutations\n    total_permutations = permutations * aj_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_start, ben_start = symbols('andy_start ben_start')\n\n    andy_end = andy_start + (andy_start / 3)\n    ben_end = ben_start + (ben_start / 5)\n\n    equation1 = Eq(ben_start - andy_start, 84)\n    equation2 = Eq(andy_end, ben_end / 3)\n\n    solutions = solve((equation1, equation2), (andy_start, ben_start))\n\n    andy_final = solutions[andy_start] + solutions[andy_start] / 3\n\n    return andy_final\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1/i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5% as a decimal\n    years = 0\n\n    while principal < final_amount:\n        principal += principal * interest_rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    \n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    sum_of_numbers = 0.7 + 0.04 + 1.006\n    return sum_of_numbers\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # The numbers on the hats have to be distinct two-digit numbers\n    two_digit_numbers = set(range(10, 100))\n\n    # 4 students raised their hand for the first unknown number\n    # Since we can't deduce the unknown number, we ignore this information\n    # Instead, focus on the fact that for the second question, 6 students raised their hands\n    # Any number divisible by 24 must end in a multiple of 4 and must be even\n    # Also, the sum of the digits of a number divisible by 3 must be divisible by 3\n\n    # Find all two-digit numbers divisible by 24\n    divisible_by_24 = set(n for n in two_digit_numbers if n % 24 == 0)\n\n    # Since Tom raised his hand in both rounds, his number must be divisible by 24\n    # There are at least 6 - 1 = 5 other numbers divisible by 24\n    # We assume the minimum number of divisible by 24 to find max sum of Tom's view\n\n    # We remove 5 numbers from the divisible_by_24 set (excluding the smallest as it might be Tom's)\n    for i in range(6):\n        divisible_by_24.remove(min(divisible_by_24))\n\n    # Now we find all two-digit numbers not divisible by 24, which are 3 remaining\n    not_div_by_24 = two_digit_numbers - divisible_by_24\n\n    # Among the remaining numbers, 3 must be not divisible by 24\n    # We again remove the 3 smallest numbers assuming they are the friends' hats\n    for i in range(3):\n        not_div_by_24.remove(min(not_div_by_24))\n\n    # The sum of all 8 numbers Tom saw is the sum of remaining in both sets\n    ans = sum(divisible_by_24) + sum(not_div_by_24)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    even_negative = -16  # second term is the first even negative\n    odd_positive = 18    # first term is the first odd positive\n    terms_count = 5      # 5 terms are given\n\n    # calculate the term number for n\n    term_number = terms_count + 1\n\n    # determine if term_number is even or odd to decide the sequence of n\n    if term_number % 2 == 0:  # Even term number, should follow even negative sequence\n        # Calculate next even negative number\n        # starts at -16 and decreases by 1 for each new even position\n        n = even_negative - (term_number // 2 - 1)\n    else:  # Odd term number, should follow odd positive sequence\n        # Calculate next odd positive number\n        # starts at 18 and increases by 1 for each new odd position\n        n = odd_positive + (term_number // 2)\n\n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    # a > b > c > d are distinct positive whole numbers in descending order\n\n    # sum of the smallest number and the average of the other three numbers is 39\n    equation1 = Eq(d + (a + b + c)/3, 39)\n\n    # sum of the largest number and the average of the other three numbers is 51\n    equation2 = Eq(a + (b + c + d)/3, 51)\n\n    # Since the numbers are distinct and positive whole numbers, we include inequality constraints\n    inequalities = (a > b, b > c, c > d, d > 0)\n\n    # Solving the equations and inequalities for maximum value of 'a'\n    solutions = solve((equation1, equation2, *inequalities), (a, b, c, d), dict=True)\n\n    max_a_value = max(solution[a] for solution in solutions)\n    return max_a_value\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n    \n    # Calculation based on proportion\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n\n    return new_denominator\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_students = 43\n    total_math = 30\n    total_science = 28\n    total_english = 25\n\n    # Using Inclusion-Exclusion Principle to find the maximum number of students\n    # who could have passed all three tests. We start by assuming that all students\n    # who passed at least one test have passed exactly one. Then we adjust for the\n    # overlap of two tests at a time, and the result will give us the maximum possible\n    # overlap for all three tests.\n\n    # Maximum number of students who passed all three tests is the total count\n    # minus the individual counts, plus the adjustment for overlaps of two tests.\n    # If this number is negative, then the maximum number that passed all three is zero.\n    max_all_three = total_students - (total_math + total_science + total_english)\n    \n    # Since no student can pass fewer than zero tests, if calculated max_all_three is less than zero,\n    # it indicates there's no such case where a student didn't pass any tests, so we set it to zero.\n    max_all_three = max(max_all_three, 0)\n\n    return max_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between school and home\n    d = symbols('d')\n\n    # Ahmad's speed is 80 meters per minute\n    # His brother's speed is 50 meters per minute\n    # Ahmad meets his brother 210 meters away from school\n    # Ahmad has traveled that amount more than his brother\n\n    # Time taken by Ahmad to go to school and come back to the meeting point\n    # This is equal to d (to school) plus (d - 210) (back to meeting point)\n    time_ahmad = d / 80 + (d - 210) / 80\n\n    # Time taken by his brother to reach the meeting point\n    time_brother = (d - 210) / 50\n\n    # These two times should be equal\n    equation = Eq(time_ahmad, time_brother)\n\n    # Solve for d\n    distance = solve(equation, d)[0]\n\n    return distance\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since each pencil case cannot be empty, we start by putting one pen in each case.\n    # This leaves us with 6 - 3 = 3 pens to distribute.\n    remaining_pens = 6 - 3\n\n    # The problem is equivalent to the number of ways we can place two dividers between pens to split them\n    # into three groups (as each group will represent the pens in one pencil case).\n    # This is a stars-and-bars problem (bins-and-balls), and the number of ways to do this is given by the\n    # combination formula: C(n + k - 1, k - 1) where n is the remaining items to distribute and k is the number of bins. \n    # Here, n = remaining_pens and k = 3.\n\n    from math import comb\n    ways = comb(remaining_pens + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Calculating the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculating the denominator of the first complex fraction\n    denominator1 = 2/25\n    # Dividing the numerator by the denominator for the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n    \n    # Simplifying the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # The denominator of the second complex fraction is already simplified\n    denominator2 = 8/3\n    # Dividing the numerator by the denominator for the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n    \n    # Adding the results of the two complex fractions\n    ans = complex_fraction1 + complex_fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number_str = str(8844)\n\n    first_8_place_value = int(number_str[0]) * 1000\n    second_8_place_value = int(number_str[1]) * 100\n\n    difference = first_8_place_value - second_8_place_value\n\n    return difference\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by 4, the last two digits must be divisible by 4.\n    # Since the number has to be divisible by 5 as well, the last digit (A) must be 0 or 5.\n    # If A is 0, then 20 is divisible by 4. If A is 5, then 25 is not divisible by 4.\n    # Therefore, A must be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement, which will be the same as the remainders\n    remainders = (1, 2, 7)\n\n    # Step 2: Find the LCM of all the divisors, the divisors are 5, 6, and 11\n    divisors = (5, 6, 11)\n    lcm_value = 5 * 6 * 11  # Since 5, 6 and 11 are co-prime, their LCM is their product\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # Solve the congruences\n    congruences = [(r, m) for r, m in zip(remainders, divisors)]\n    solution_mod = solve_congruence(*congruences)\n\n    # The answer is the first element of the tuple returned by solve_congruence\n    unknown = solution_mod[0]\n\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            break\n    return num - 40309\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find the largest five-digit palindromic number that is multiple of 45\n    # Since the number is a multiple of 45, it's also a multiple of 5 and 9\n    # All multiples of 5 end with 0 or 5. Since it's a palindromic number, it can't end with 0\n    # It should start and end with 9, because we are looking for the largest one\n    for i in range(9, -1, -1):  # Count down from 9 to 0 for the second digit (and second-last digit)\n        for j in range(9, -1, -1):  # Count down from 9 to 0 for the middle digit\n            largest_palindrome = int(f\"9{i}{j}{i}9\")\n            if largest_palindrome % 45 == 0:\n                break\n        if largest_palindrome % 45 == 0:\n            break\n            \n    # Find the smallest five-digit palindromic number that is a multiple of 45\n    for i in range(1, 10):  # The first digit (and last digit) must start from 1 to avoid 0\n        for j in range(0, 10):  # Count up for the middle digit\n            smallest_palindrome = int(f\"1{i}{j}{i}5\")\n            if smallest_palindrome % 45 == 0:\n                break\n        if smallest_palindrome % 45 == 0:\n            break\n\n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    ribbon1_length = 16\n    ribbon2_length = 24\n\n    ans = gcd(ribbon1_length, ribbon2_length)\n\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_wage\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = 10\n    top_students = 3\n    last_students = total_students - top_students\n    mean_top = 92\n    x = symbols('x')  # mean score of all students\n\n    # Equation representing the sum of scores of all students\n    equation1 = Eq(top_students * mean_top + last_students * (x - 6), total_students * x)\n    \n    # Solve for x to find the mean score of all students\n    mean_all = solve(equation1, x)\n\n    return mean_all[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8*4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            if all(int(d2)-int(d1) == 1 for d1, d2 in zip(sorted(digits), sorted(digits)[1:])):\n                lucky_years += len(set(permutations(digits)))\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        X_bags = [x for x in bags if x != red_marbles]\n        for i in range(len(X_bags)):\n            for j in range(i + 1, len(X_bags)):\n                Jaslin_bags = X_bags[i] + X_bags[j]\n                George_bags = sum(X_bags) - Jaslin_bags\n                if Jaslin_bags == 2 * George_bags:\n                    return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Andre and Beth's original amount of sweets\n    Andre, Beth = symbols('Andre Beth')\n\n    # Andre and Beth both had a total of 24 sweets\n    equation1 = Eq(Andre + Beth, 24)\n\n    # After their teacher gave them 4 sweets each, Andre now has 6 sweets more than Beth\n    equation2 = Eq(Andre + 4, Beth + 4 + 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (Andre, Beth))\n\n    # Beth's sweets now after getting extra 4 sweets from the teacher\n    beth_sweets_now = solutions[Beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest number be x.\n    # Then the 5 consecutive even numbers are: x, x+2, x+4, x+6, and x+8.\n    # Their sum is: x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # This simplifies to: 5x + 20 = 100\n    # To find x, we solve for x: 5x = 100 - 20\n    # Thus, x = (100 - 20) / 5\n    \n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550  # distance travelled in 5 hours\n    hours = 5  # time taken to travel 550 km\n    new_time = 3  # time to find distance for\n\n    speed = distance / hours  # constant speed\n    new_distance = speed * new_time  # distance travelled in 3 hours\n\n    return new_distance\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    apples_left = 150  # Apples left after selling\n    fraction_sold = 2/5\n    fraction_left = 1 - fraction_sold\n\n    total_apples = apples_left / fraction_left\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    def is_even(arrangement):\n        for color in 'RBGYOP':\n            indices = [i for i, block in enumerate(arrangement) if block == color]\n            if (indices[1] - indices[0] - 1) % 2 != 0:\n                return False\n        return True\n\n    blocks = 'RRBBYYGGOOPP'\n    even_count = 0\n    total_count = 0\n    for p in set(permutations(blocks)):\n        total_count += 1\n        if is_even(p):\n            even_count += 1\n\n    d = gcd(even_count, total_count)\n    m = even_count // d\n    n = total_count // d\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    jumps = 15 - 1\n    distance_per_jump = 3\n    total_distance = jumps * distance_per_jump\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits\n    # We do not include boxes of chocolate in the count for fruits\n    friends = 6\n\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Define the fill rates for each inlet\n    rate_A = 1 / 36  # Pool per minute\n    rate_B = 1 / 48  # Pool per minute\n    \n    # Define the initial amount of pool filled\n    total_fill = 0\n    total_time = 0\n    \n    # While the pool is not yet filled\n    while total_fill < 1:\n        if total_time % 6 < 3: # Inlet A -> 1 min; B -> 2 mins; A -> 2 mins; (we are in the 5-minute cycle)\n            total_fill += rate_A\n            total_time += 1\n        else: # Inlet B -> 1 min; A -> 1 min; B -> 2 mins;\n            total_fill += rate_B\n            total_time += 1\n            \n        if total_time % 6 == 0:  # Every 6 minutes, the pattern repeats\n            total_fill += rate_B  # Additional 1 min of inlet B\n            \n    return total_time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Let A represent Alan's time to paint the room alone\n    # 1/A + 1/6 = 1/4\n    # 1/A = 1/4 - 1/6\n    # 1/A = (6 - 4) / 24\n    # 1/A = 2 / 24\n    # A = 24 / 2\n    A = 24 / 2\n\n    return A\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    # Probability that it will not rain on both days\n    prob_no_rain_both_days = prob_no_rain_saturday * prob_no_rain_sunday\n\n    # Probability that it will rain on at least one day\n    prob_rain_at_least_one_day = 1 - prob_no_rain_both_days\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_questions = 10\n    correct_points = 10\n    incorrect_penalty = 3\n    total_points = 48\n\n    # Let x be the number of questions Eddie answered correctly.\n    # The number of questions he answered incorrectly then is total_questions - x.\n\n    # The total points can be expressed in terms of x as follows:\n    # total_points = x * correct_points - (total_questions - x) * incorrect_penalty\n\n    # Now solve for x.\n    for x in range(total_questions + 1):\n        if (x * correct_points - (total_questions - x) * incorrect_penalty) == total_points:\n            incorrect_answers = total_questions - x\n            return incorrect_answers\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    count = 0\n    n = 1\n    while count < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count += 1\n            temp //= 5\n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10\n    borrowed_bottles = 1\n    empty_bottles = total_bottles\n\n    # Lucas can drink the initial bottles plus the one borrowed\n    total_drunk = total_bottles + borrowed_bottles\n\n    while empty_bottles + borrowed_bottles >= 2:\n        # Exchange empty bottles for new ones\n        new_bottles = (empty_bottles + borrowed_bottles) // 2\n        remaining_borrowed = (empty_bottles + borrowed_bottles) % 2\n        # Drink new bottles\n        total_drunk += new_bottles\n        \n        # If Lucas still has borrowed bottle, return it after drinking the last possible bottle\n        if remaining_borrowed == 1 and borrowed_bottles == 1 and new_bottles * 2 == empty_bottles:\n            borrowed_bottles = 0\n\n        # Update empty bottles count\n        empty_bottles = new_bottles\n\n    return total_drunk - borrowed_bottles  # Subtract the borrowed bottle that needs to be returned\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let x be the number of minutes after which the height of A's waterline is 3 times that of B\n    # Pool A drains its water in 10 minutes, and Pool B drains its water in 6 minutes\n    # The rate of draining Pool A is 1/10 per minute\n    # The rate of draining Pool B is 1/6 per minute\n    # The amount of water drained from Pool A after x minutes is x/10\n    # The amount of water drained from Pool B after x minutes is x/6\n    # Since the height of A's waterline is 3 times of B, the remaining amount in Pool A is 3 times of B\n    \n    # Let H be the initial height of water in the pools\n    # Remaining height in Pool A = H - x/10\n    # Remaining height in Pool B = H - x/6\n    # According to the condition (H - x/10) = 3 * (H - x/6)\n    \n    # Solving equation for x\n    # (H - x/10) = 3H - x/2\n    # Multiplying all terms by 10 to get rid of denominators\n    # 10H - x = 30H - 5x\n    # 4x = 20H\n    # x = 5H\n    \n    # Since H does not matter (it will cancel out), we can find x by substituting the rates of draining.\n    # We need to find a time x such that 1 - (x/10) is 3 times (1 - (x/6))\n    x = symbols('x')\n    equation = Eq(1 - (x / 10), 3 * (1 - (x / 6)))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    # total children in queue\n    total_children = 18\n    # Vanessa's position from the front\n    vanessa_position = 10\n    # Andrea's position from the end\n    andrea_position_from_end = 12\n    # Andrea's position from the front\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    # Number of children between Vanessa and Andrea\n    children_between = abs(andrea_position_from_front - vanessa_position) - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    initial_sweets = 320\n    weekly_increase = 30\n    weeks = 7\n    final_sweets = 348\n\n    total_sweets_bought = weekly_increase * weeks\n    sweets_eaten_per_week = (initial_sweets + total_sweets_bought - final_sweets) // weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise = 4\n    sally = 3 * louise\n    return sally\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has.\n    # Then, Chenxi has x + 5 sweets.\n    # After Chenxi gives Yue Ying 10 sweets, Chenxi will have x + 5 - 10 sweets and Yue Ying will have x + 10 sweets.\n    # The difference will be (x + 5 - 10) - (x + 10), which simplifies to -15.\n    \n    difference_after_giving = -15\n    return abs(difference_after_giving)\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "from math import factorial\n\ndef solution():\n    # The order of people does not matter in a round table, so we fix one person \n    # and arrange the remaining (n-1)! ways.\n    num_people = 10 - 1\n    ans = factorial(num_people)\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # let x be the distance from home to office\n    # let t be the time in hours at speed 3 km/h without being late\n    # speed = distance / time\n    # 3 km/h speed, 12 min late: x = 3 * (t + 1/5)\n    # 7 km/h speed, 8 min early: x = 7 * (t - 2/15)\n\n    # Setting up the equations\n    # x = 3t + 3/5\n    # x = 7t - 14/15\n\n    # Equating both expressions for x\n    # 3t + 3/5 = 7t - 14/15\n\n    # Simplifying the equation (multiplying both sides by 15 to remove fractions)\n    # 45t + 9 = 105t - 14\n\n    # Moving terms involving t to one side and constants to the other\n    # 45t - 105t = -14 - 9\n\n    # Combining like terms\n    # -60t = -23\n\n    # Solving for t\n    t = 23/60\n\n    # Now, use the value of t to find the distance x using one of the original equations\n    # x = 3t + 3/5\n    x = 3 * t + 3/5\n\n    # Simplify x to get the distance in km\n    distance = x\n\n    return distance\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(2, 69):\n        if isprime(i) and isprime(69 - i):\n            return abs(i - (69 - i))\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    number_of_goats = 6\n    number_of_lambs = 4 * number_of_goats - 4\n    return number_of_lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of students in school A and B\n    school_a, school_b = symbols('school_a school_b')\n    \n    # Equation before the transfer: school_a + school_b = 1050\n    equation1 = Eq(school_a + school_b, 1050)\n    \n    # After transferring 20 students, school A still has 10 more students than school B\n    # school_a - 20 = school_b + 10\n    # Equation after the transfer: school_a - school_b = 20 + 10\n    equation2 = Eq(school_a - school_b, 20 + 10)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (school_a, school_b))\n    \n    return solutions[school_a]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from sympy import symbols, Max\n\ndef solution():\n    # Declare a symbol for the expression calculation\n    x = symbols('x')\n\n    # Create expressions based on different bracket insertions\n    expressions = [\n        (15 + 5) * (5 + 15) - 6 + 7,\n        15 + (5 * 5 + 15) - (6 + 7),\n        (15 + 5) * (5 + 15 - 6 + 7),\n        15 + 5 * (5 + (15 - 6) + 7),\n        (15 + (5 * 5) + 15) - 6 + 7,\n        15 + 5 * (5 + 15) - 6 + 7\n    ]\n    \n    # Find and return the maximum result from the expressions\n    ans = max([expr.evalf() for expr in expressions])\n\n    return ans\n\n# Call the solution function\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if (correct * 10) - (incorrect * 5) == 70:\n            return correct\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from itertools import permutations\n    from sympy import isprime\n\n    digits = '08072003'\n    perms = set()\n    \n    # Generate all permutations of the digits\n    for i in range(1, len(digits) + 1):\n        perms.update([''.join(p) for p in permutations(digits, i)])\n    \n    # Convert to integers and filter only unique prime numbers less than 50\n    primes = set(int(p) for p in perms if isprime(int(p)) and int(p) < 50)\n    \n    # Find the largest prime number\n    ans = max(primes)\n    \n    return ans\n\n# Call the solution function and store the result in the variable ans\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_avg = 54\n    first_two_avg = 48\n    total_sum = total_avg * 5\n    first_two_sum = first_two_avg * 2\n    last_three_sum = total_sum - first_two_sum\n    last_three_avg = last_three_sum / 3\n    return last_three_avg\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    teddy_age, father_age, years_later = symbols('teddy_age father_age years_later')\n\n    # When Teddy was 5, his father was 7 times older\n    equation1 = Eq(father_age, 7 * 5)\n\n    # Determine the difference in ages\n    age_difference = father_age - 5\n\n    # When the father is 40 years old, find out how many years later that is\n    years_later = 40 - father_age\n\n    # Teddy's age when his father is 40\n    teddy_age_when_father_40 = age_difference + 40\n\n    # Solve the equation\n    teddy_age = teddy_age_when_father_40 - years_later\n\n    # As we already know father's age when Teddy was 5, we can calculate Teddy's age directly\n    return teddy_age.subs(father_age, 7 * 5)\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n    \n    # Using the inclusion-exclusion principle\n    writing_students_only = total_students - (maths_students + neither_classes_students) + both_classes_students\n    \n    return writing_students_only\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_of_sequence = sum(range(1, 18, 2))\n    return sum_of_sequence\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from sympy import Rational, solve, symbols\n\n    total_people = symbols('total_people')\n\n    # 2/7 of the audience were adults\n    adults_fraction = Rational(2, 7)\n\n    # 4/5 of the remaining audience were boys\n    boys_fraction_of_remaining = Rational(4, 5)\n\n    # Remaining fraction after adults are taken into account\n    remaining_fraction = 1 - adults_fraction # 5/7\n\n    # Fraction of the remaining audience that were girls\n    girls_fraction_of_remaining = 1 - boys_fraction_of_remaining # 1/5\n\n    # Girls fraction of the total audience\n    girls_fraction = girls_fraction_of_remaining * remaining_fraction # (1/5) * (5/7) = 1/7\n\n    # Adults fraction of the audience\n    adults_fraction_of_total = adults_fraction # 2/7\n\n    # Difference in terms of fractions of the total audience\n    difference_fraction = adults_fraction_of_total - girls_fraction # (2/7) - (1/7)\n\n    # Given that there are 80 more adults than girls\n    adults_minus_girls = 80\n\n    # Equation to solve for total number of people based on the difference\n    equation = (difference_fraction) * total_people - adults_minus_girls\n\n    # Solve the equation to find the total number of people\n    solution = solve(equation, total_people)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Initial number of slices\n    slices = 1 \n\n    # Each cut increases the number of slices from the previous cut by 1\n    # The first cut doesn't follow this rule because you go from 1 slice to 2 slices\n    for i in range(2, 5):\n        slices += i\n\n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n    \n    # Calculate rabbit's position from the left (elephant to rabbit distance includes both)\n    rabbit_position_from_left = elephant_position_from_left + toys_between_rabbit_and_elephant + 1\n    \n    # Calculate rabbit's position from the right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 110):  # 1 through 109 inclusive\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = symbols('pink')\n    gray = 11 * pink\n    total_dolphins = pink + gray\n\n    number_of_pink = solve(Eq(total_dolphins, 48), pink)[0]\n\n    return number_of_pink\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # area of a triangle formula: area = (base * height) / 2\n    # solving for height: height = (area * 2) / base\n    height = (area * 2) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    # Starting number\n    start = 2\n    # Ending number\n    end = 32\n    # Step size\n    step = 3\n\n    # Calculate the sum of squares in the series\n    ans = sum([(start + i * step) ** 2 for i in range((end - start) // step + 1)])\n    \n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since 4^982 = (2^2)^982 = 2^1964 and 2^1963 is one power less, we can simplify the denominator:\n    # 2^1964 - 2^1963 = 2^1963 * (2^1 - 1) = 2^1963\n    # Now we have: 2^2019 / 2^1963 = 2^(2019-1963) = 2^56\n    # We want to find the remainder when 2^56 is divided by 5\n\n    remainder = pow(2, 56, 5)\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for original number of chairs and tables\n    chairs, tables = symbols('chairs tables')\n    \n    # Since originally the number of chairs and tables was equal\n    equation1 = Eq(chairs, tables)\n    \n    # After selling 42 tables and bringing in 24 chairs, chairs become 4 times tables\n    # chairs + 24 = 4 * (tables - 42)\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chairs, tables))\n    \n    # Return the number of chairs originally\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = (35 / 100) * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = left_of_candy + candy_cabinet + right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_day1 = 455\n    books_day2 = 198\n    \n    total_books = books_day1 + books_day2\n    \n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits_sum = sum(int(digit) for digit in str(i))\n            if digits_sum == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    # A number is divisible by 18 if and only if it is divisible by both 2 and 9.\n    # For divisibility by 2, the number must end in an even digit.\n    # For divisibility by 9, the sum of the digits must be divisible by 9.\n    \n    for Y in range(10):  # Since Y is a digit, it ranges from 0 to 9\n        number = 1060 + Y  # Constructing the number by adding Y to 1060.\n        # Check divisibility by 18\n        if number % 2 == 0 and number % 9 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n\n    total_boxes = boxes_per_class * number_of_classes\n\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    largest_value = 0\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"49{i}{j}\")\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                largest_value = max(largest_value, number)\n    return largest_value\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    \n    equation1 = Eq(motorcycles + cars + lorries, 27)\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    equation3 = Eq(cars, lorries)\n    \n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n    \n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let's assume the mass of the empty jar is j and the mass of one chocolate is c\n    # According to the information given:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # We have two equations, we can solve them to find the values for j and c\n    # Let's subtract the first equation from the second to eliminate j and solve for c\n    c = (317 - 185) / (17 - 5)  # c is the mass of one chocolate\n    j = 185 - 5 * c  # Now we can find the mass of the empty jar\n\n    # Now we want to find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = j + 10 * c\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    return solutions[kristoff] - solutions[ana]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_mass = 700  # Total mass of the sugar solution\n    concentration = 0.32  # Concentration of sugar in the solution\n    sugar_mass = total_mass * concentration  # Mass of sugar\n    \n    water_mass = total_mass - sugar_mass  # Mass of water\n    return water_mass\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    def is_divisible_by_3(number):\n        return sum(int(digit) for digit in str(number)) % 3 == 0\n\n    def is_divisible_by_11(number):\n        digits = [int(digit) for digit in str(number)]\n        alternating_sum = sum(digits[::2]) - sum(digits[1::2])\n        return alternating_sum % 11 == 0\n\n    for i in range(1000):\n        number = int(f\"1992{i:03d}0\")\n        if number % 2 == 0 and is_divisible_by_3(number) and is_divisible_by_11(number):\n            return number\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of apples John bought as 'a'.\n    # Therefore, the number of pears is (4/5) * a.\n    # And, the number of mangoes is (2/5) * a.\n    \n    # Let the total money spent on apples be '3x' and pears be '2x'\n    # According to the given ratio for pears and mangoes, we have:\n    # Money spent on pears is '1y' and on mangoes is '5y'\n\n    # But we also know that the money spent on pears and apples has a relation of 3:2\n    # So, 2x = 1y, or y = 2x\n\n    # Therefore, the total money spent on fruits is 150\n    # 3x (apples) + 2x (pears) + 10x (5y where y=2x, for mangoes) = 150\n    # This gives us 3x + 2x + 10x = 150\n\n    a, x = symbols('a x')\n    equation = Eq(3*x + 2*x + 10*x, 150)\n\n    x_val = solve(equation, x)[0]\n    a_val = solve(Eq(0.60 * a, 3*x_val), a)[0]\n\n    # The number of pears is (4/5) * a and the number of mangoes is (2/5) * a\n    pears = (4/5) * a_val\n    mangoes = (2/5) * a_val\n    total_fruits = a_val + pears + mangoes\n\n    return total_fruits\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 0.1\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    intervals = num_trees - 1\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half_per_month = 65\n    months_in_half_year = 6\n    \n    total_second_half = average_second_half_per_month * months_in_half_year\n    \n    total_year = total_first_half + total_second_half\n    average_per_month_last_year = total_year / (months_in_half_year * 2)\n    \n    return average_per_month_last_year\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n\n    ways = factorial(total_letters)\n    for count in letter_counts.values():\n        ways //= factorial(count)\n\n    return ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3  # Hazel will be 9 years old in 3 years, so subtract 3 from 9\n    jessica_current_age = hazel_current_age - 3  # Jessica is 3 years younger than Hazel\n\n    # Calculate their ages next year\n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n\n    # Sum of their ages next year\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n            \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_first_five = 94 * 5\n    total_score_six = 92 * 6\n    score_sixth_assignment = total_score_six - total_score_first_five\n\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n    \n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n    total_pairs_sold = total_profit / profit_per_pair\n    initial_pairs_purchased = total_pairs_sold + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    return 30 - 8 + 10\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Define the variable\n    x = symbols('x')\n    # Equation based on the problem statement\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n    # Solve the equation\n    original_number = solve(equation, x)\n\n    # Return the solution\n    return original_number[0]\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the time when the musical ended and how long the second half lasted.\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    half_duration = timedelta(hours=1, minutes=45) // 2\n\n    # Calculate the start time by subtracting the duration of half the musical.\n    start_time = end_time - half_duration\n\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_per_day = 10\n    leak_per_night = 3\n    effective_fill_per_day = fill_per_day - leak_per_night\n    days = 0\n    water_filled = 3  # the pool starts with 3 liters\n\n    while water_filled < total_water_needed:\n        days += 1\n        if days > 1:  # from the second day onwards\n            water_filled += effective_fill_per_day\n        else:\n            water_filled -= leak_per_night  # the first night's leak\n\n    return days\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcd = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcd\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    seconds = 30 * 60  # 30 minutes to seconds\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_current_number = len(str(current_number))\n        if digits_written + digits_in_current_number > seconds:\n            break\n        digits_written += digits_in_current_number\n        current_number += 1\n        \n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n\n    smallest = min(amounts)\n    largest = max(amounts)\n\n    difference = largest - smallest\n\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%p')\n    game_duration = timedelta(minutes=225)\n\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell could draw all the blue, white, and black marbles before drawing a green one\n    blue = 5\n    white = 9\n    black = 2\n    # The first green marble could be drawn just after all other colors have been drawn.\n    darrell_must_draw = blue + white + black + 1\n\n    return darrell_must_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    num_teams = 20\n    # Each match is a combination of 2 teams out of the total number of teams.\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # The snail climbs a total of 6*6 + 2 = 38 meters (6 meters each day for 6 days, plus 2 meters on the 7th day)\n    total_climbed = 6 * 6 + 2\n    # On the 7th day, the snail is out, which means it has climbed a total of 20 meters\n    total_well_height = 20\n    # Calculate how much the snail slides down during the night\n    # by subtracting the well height from total climbed distance\n    slide_down = total_climbed - total_well_height\n    return slide_down\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        initial_rabbits = 3 * initial_rabbits - initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let candy's speed be x meters per minute\n    candy_speed = symbols('candy_speed')\n\n    # Total time taken by Candy to meet Ivy = 6 + 12 = 18 minutes\n    candy_time = 18\n\n    # Ivy's speed = candy_speed + 20\n    ivy_speed = candy_speed + 20\n\n    # Total time taken by Ivy to meet Candy = 12 minutes\n    ivy_time = 12\n\n    # Distance covered by Candy when they meet = candy_speed * candy_time\n    # Distance covered by Ivy when they meet = ivy_speed * ivy_time\n    # The sum of the distances covered by both should be 1200 meters\n\n    distance_eq = Eq(candy_speed * candy_time + ivy_speed * ivy_time, 1200)\n\n    # Solve for candy_speed\n    candy_speed_value = solve(distance_eq, candy_speed)\n\n    return candy_speed_value[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # There are 8 players, so each player will play 7 matches (one match against every other player).\n    total_matches = 7\n\n    # Since each player records a different number of wins,\n    # wins are distributed from 0 to 7 (0 for the player with all losses and 7 for the champion).\n    # The champion is the one with the highest number of wins, which is 7.\n    champion_wins = total_matches\n\n    return champion_wins\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120 = 120 / puffs_per_hour\n    return hours_for_120\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Mass of the metals\n    mass_metal1 = 6  # mg\n    mass_metal2 = 14  # mg\n\n    # Nickel concentration in the metals\n    nickel_concentration1 = 45  # percentage\n    nickel_concentration2 = 60  # percentage\n\n    # Total mass of nickel in each metal\n    nickel_mass1 = (nickel_concentration1 / 100) * mass_metal1\n    nickel_mass2 = (nickel_concentration2 / 100) * mass_metal2\n\n    # Total mass of the new metal\n    total_mass_new_metal = mass_metal1 + mass_metal2\n\n    # Total mass of nickel in the new metal\n    total_nickel_mass_new_metal = nickel_mass1 + nickel_mass2\n\n    # Percent concentration of nickel in the new metal\n    percent_nickel_new_metal = (total_nickel_mass_new_metal / total_mass_new_metal) * 100\n\n    return percent_nickel_new_metal\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for a in range(1, 14):\n        for b in range(1, 14 - a):\n            for c in range(1, 14 - a - b):\n                d = 13 - a - b - c\n                max_product = max(max_product, a * b * c * d)\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n\n    edward_age = 8 + years\n    mother_age = 32 + years\n\n    equation = Eq(mother_age, 3 * edward_age)\n\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio_cm_to_m = 1 / 6  # 1 cm represents 6 m\n    playground_length_plan_cm = 5  # playground length on the plan in cm\n    \n    real_playground_length_m = playground_length_plan_cm / scale_ratio_cm_to_m  # convert plan length to real length in meters\n    \n    return real_playground_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 1000):  # Assuming there are not more than 1000 students\n        original_square = n ** 2\n        students = original_square + 11\n        new_square = (n + 1) ** 2\n        if new_square - students == 12:\n            return students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n    num_boxes = total_money // cookie_box_price\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_average = 30\n    girls_average = 20\n    total_average = 26\n\n    girls = (boys * (boys_average - total_average)) / (total_average - girls_average)\n\n    return int(girls)\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    tank_B = tank_A + 56\n    return tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n     \n    for basketballs in range(total_items + 1):\n        volleyballs = total_items - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15e6\n    richie_share = total_wealth * 1/3\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * 1/2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2/5\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let m be the mass of mint candies, t be the total mass of candies\n    m, t = symbols('m t')\n\n    # t1, t2, t3 are the total masses of the 3 containers\n    t1 = t * (2/5) + m\n    t2 = t * (2/7) + m\n    t3 = t * (2/9) + m\n\n    # We know that the sum of all masses is 1371\n    total_mass_eq = Eq(t1 + t2 + t3, 1371)\n\n    # Solve the system of equations\n    solutions = solve((total_mass_eq), (m, t))\n\n    m_value = solutions[m]\n\n    # The mass of all strawberry candies is the sum of strawberry candies from all three containers\n    mass_strawberry = t1 * (2/5) + t2 * (2/7) + t3 * (2/9)\n\n    # Substitute m value into the mass_strawberry expression\n    mass_strawberry_value = mass_strawberry.subs(m, m_value)\n\n    return mass_strawberry_value.evalf()\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_given_to_Lily = total_candy * 3 / 4\n    remaining_candy = total_candy - candy_given_to_Lily\n    candy_given_to_brother = remaining_candy * 1 / 3\n    final_candy_count = remaining_candy - candy_given_to_brother\n    return final_candy_count\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    # Initialize the sum to 0, which will store the value of the series\n    total_sum = 0\n    \n    # Loop through the series starting from 1/2 to 59/60\n    for denominator in range(2, 61):\n        for numerator in range(1, denominator):\n            total_sum += numerator / denominator\n    \n    return total_sum\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n    saturday = friday + 27\n    sunday = friday - 14\n\n    equation = Eq(friday + saturday + sunday, 475)\n\n    sold_on_friday = solve(equation, friday)\n\n    return sold_on_friday[0]\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declaring the symbols for the amount Roy and Dennis have\n    roy, dennis = symbols('roy dennis')\n    \n    # The total money shared\n    total_money = 340\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(roy + dennis, total_money)\n    equation2 = Eq(dennis - dennis/4, 2 * (roy - 2*roy/3))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n    \n    # Dennis' amount after spending 1/4 of his money\n    dennis_end = solutions[dennis] - solutions[dennis]/4\n\n    return dennis_end\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    pages_with_one_digit = 9\n    pages_with_two_digits = 90 * 2\n    pages_with_three_digits = 300 - pages_with_one_digit - pages_with_two_digits\n    \n    number_of_three_digit_pages = pages_with_three_digits // 3\n    last_page_number = 99 + number_of_three_digit_pages\n    \n    return last_page_number\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    ball_cost = 20.45\n    num_hoops = 6\n\n    total_ball_cost = num_balls * ball_cost\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / num_hoops\n\n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    import math\n\n    num = 693\n    factors = {}\n\n    # Prime factorization of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        while num % i == 0:\n            num //= i\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n                \n    if num > 1: # If there's any prime factor left\n        factors[num] = 1\n\n    # For a number to be a perfect square, all the exponents in its\n    # prime factorization must be even. So we'll multiply the original \n    # number by any of its prime factors raised to an exponent that \n    # will make the exponent of that prime factor even.\n    \n    smallest_multiplier = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            smallest_multiplier *= prime\n\n    return smallest_multiplier\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    each_volume = 3  # in liters\n    drank_volume = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_volume = total_cartons * each_volume\n    remaining_volume = total_volume - drank_volume\n\n    containers_needed = -(-remaining_volume // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    A_value = solve(equation, A)\n    return A_value[0]\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # The unit digit of a power can be found by looking at the unit digit cycles\n    # For any number ending with 3, the cycle is (3, 9, 7, 1) for the powers of 1, 2, 3, 4 and repeats\n    # For the number 13, the cycle length is 4; so we find the remainder when 242 is divided by 4 to get the position in cycle.\n    unit_digit_13_power = [3, 9, 7, 1]\n    unit_digit_13 = unit_digit_13_power[242 % len(unit_digit_13_power) - 1]  # Adjust for 0-indexed\n\n    # For any number ending with 7, the unit digit cycle is (7, 9, 3, 1)\n    # For the number 17, similarly the cycle length is 4, so we take 379 % 4 to get the position.\n    unit_digit_17_power = [7, 9, 3, 1]\n    unit_digit_17 = unit_digit_17_power[379 % len(unit_digit_17_power) - 1]\n\n    # For any number ending with 4, the unit digit cycle is (4, 6) for the powers of 1, 2 and repeats.\n    # However, since 4 is raised to an even power here, its unit digit will be 6\n    # Multiplying by 4 won't change the unit digit because 6*4's unit digit is also 6\n    # We directly take unit digit as 6.\n    unit_digit_4_power = 6\n\n    # Now we add the unit digits and take the unit digit of the sum\n    sum_unit_digit = (unit_digit_13 + unit_digit_17 * unit_digit_4_power) % 10\n\n    return sum_unit_digit\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original number of stickers Alexis had\n    x = symbols('x')\n    \n    # Marry had 7/5 times the stickers of Alexis\n    marry_stickers = (7/5) * x\n\n    # Both gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry_stickers\n    alexis_gave = 0.20 * x\n\n    # Charlotte's stickers increased by 80%\n    charlotte_stickers = (marry_gave + alexis_gave) / 0.80\n\n    # Marry had 20 stickers more than Charlotte in the end\n    equation = Eq(marry_stickers - marry_gave - 20, charlotte_stickers)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    # Calculate the cost of 3 1/2 kg of steak at £7.50 per kilogram\n    cost_of_steak = 3.5 * 7.50\n    # Amount Vani has\n    vani_has = 20\n    # Calculate how much more money she needs, if any\n    more_money_needed = max(0, cost_of_steak - vani_has)\n    \n    return more_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n    return eddie_position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    light, heavy = symbols('light heavy')\n    \n    equation1 = Eq(heavy, 2 * light)\n    equation2 = Eq(6 * light + 6 * heavy, 65.7)\n    \n    solutions = solve((equation1, equation2), (light, heavy))\n    \n    # Round the mass of the light bowling ball to the nearest kg\n    light_mass = round(solutions[light])\n\n    return light_mass\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    avg = sum(scores) / len(scores)\n    return avg\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the average information\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    # Solve the system of equations for A, B, C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the average of A, B, and C\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    \n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    jay_pens = 6 * denise_pens\n    total_pens = denise_pens + jay_pens\n    equation = Eq(total_pens, 126)\n\n    solutions = solve(equation, denise_pens)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # cost of 5 chocolate bars\n    cost_chocolate_bar = 5 * 1.26\n    # cost of each cookie\n    cost_per_cookie = cost_chocolate_bar / 6\n    # money spent on 4 cookies\n    spent_on_cookies = 4 * cost_per_cookie\n    # initial amount of money\n    initial_money = 9.05\n    # money left after buying 4 cookies\n    money_left = initial_money - spent_on_cookies\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Every 2 girls share 1 ball: number of balls for girls is g/2\n    # Every 3 boys share 1 ball: number of balls for boys is b/3\n    # Total number of balls is 250\n    equation1 = Eq(g / 2 + b / 3, 250)\n\n    # There are 650 children in total\n    equation2 = Eq(g + b, 650)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g = number of girls initially, b = number of boys initially\n    g, b = symbols('g b')\n    \n    # g - 25 = (2/3) * (b) --> Number of girls after 25 left is 2/3 of the number of boys\n    equation1 = Eq(g - 25, (2/3) * b)\n    \n    # b - 15 = g - 25 --> Number of boys after 15 left equals the number of girls after 25 left\n    equation2 = Eq(b - 15, g - 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Total number of students initially is the sum of boys and girls\n    total_students = solutions[g] + solutions[b]\n    \n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be 1-9\n        for tens in range(0, 10):  # Tens digit must be 0-9\n            for ones in range(0, 10, 2):  # Ones digit must be even, therefore 0-9, step by 2\n                if hundreds + tens + ones == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let's denote x as the total number of 10-cent coins and y as the total number of 50-cent coins\n    # Given ratio x:y = 8:3\n    \n    # Equation based on ratio: x/8 = y/3\n    # Equation based on total value: 0.10 * x + 0.50 * y = 75.90\n    \n    # Solving the two equations for x and y:\n    # x = (8/3) * y\n    # 0.10 * ((8/3) * y) + 0.50 * y = 75.90\n    # Simplifying we get:\n    # (0.10 * (8/3) + 0.50) * y = 75.90\n    # Find y\n    y = (75.90) / (0.10 * (8/3) + 0.50)\n    \n    # Total value for 50-cent coins\n    total_value_50 = 0.50 * y\n    \n    return round(total_value_50, 2)\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # Set up the equation 8 * 11 = box * 9 + 34\n    # To find the value of box, we rearrange the equation to solve for box\n    box = (8 * 11 - 34) / 9\n    return box\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n    midnight_temperature = midday_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    discount = original_price - 6400\n    return discount\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # Area of the square base\n    hole_area = 3 * 3  # Area of the square hole\n    filled_area = base_area - hole_area  # Area of the base with the hole removed\n\n    height = 320 / filled_area  # Volume of the prism divided by the area of the base\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so we have 7 entities to arrange.\n    entities = 7 \n\n    # There are 2! ways to arrange Amy and Judy in their seats.\n    amy_judy_arrangement = factorial(2)\n\n    # The total number of ways to arrange 7 entities around a circular table \n    # is (7-1)! because rotating the table doesn't change the order.\n    arrangements = factorial(entities - 1)\n\n    # Multiply the two to get the total arrangements.\n    total_arrangements = arrangements * amy_judy_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # Initialize the number of cuts and pieces variables\n    cuts = 0\n    pieces = 1\n\n    # Each cut can increase the number of pieces by at most the number of cuts made before plus one\n    while pieces < 46:\n        cuts += 1\n        pieces += cuts\n\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize the pattern trackers\n    count, i = 0, 0\n\n    # Loop until we reach the 2008th number\n    while count < 2008:\n        i += 1  # Increment the pattern counter\n        for j in range(1, i + 1):\n            count += 1  # Increment the sequence counter\n            if count == 2008:\n                return j  # Return the 2008th number\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    balance_equation = 3 * x_weight  # 3 x's weight\n    y_weight = balance_equation / 10  # 10 y's weight\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) // 3\n    return cucumbers\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 9]\n    digit_permutations = permutations(digits, 3)\n    count = len(list(digit_permutations))\n\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Three-digit numbers must have a non-zero first digit\n        for j in range(10):  # Second and third digits can be 0 to 9\n            for k in range(10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_numbers = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            sum_numbers += number\n    return sum_numbers\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_bags = total_bags // 3\n    remaining_bags = total_bags - given_bags\n    return remaining_bags\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Since we know the total number of matches is odd (7) and both players play optimally,\n    # Chris must ensure that Dylan is always left with an even number of matches.\n    # This way, no matter if Dylan takes 1 or 2 matches, Chris will always be able to respond\n    # by leaving an even number of matches for Dylan's turn, until only 1 match is left for Chris to win.\n    # So, Chris should take away an odd number of matches on the first turn to leave an even number for Dylan.\n\n    matches_remaining = 7  # Total matches at the start\n    # Chris wants to make the number of matches remaining even for Dylan's turn\n    matches_to_take = 1  # Chris can take either 1 or 2 matches on the first turn\n\n    # After Chris takes 1 match, 6 will be left, which is even.\n    # This allows Chris to always respond to Dylan's move by making the number of matches left even again.\n\n    return matches_to_take\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # A cannot be zero because it's a 3-digit number\n            return 100 * A + 10 * B + C\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Initial variables\n    constant_difference = 6\n    nth_term = 100  # mosquitoes on the 16th night\n    n = 16  # the 16th night\n    \n    # To find the first_term we use the formula: first_term = nth_term - (n-1)*constant_difference\n    first_term = nth_term - (n - 1) * constant_difference\n    \n    # Number of terms in the sequence\n    total_days = 31\n    \n    # Using the formula for the sum of arithmetic sequences: sum = n/2 * (first_term + last_term)\n    # where last_term = first_term + (total_days-1)*constant_difference\n    last_term = first_term + (total_days - 1) * constant_difference\n    sum_of_terms = total_days / 2 * (first_term + last_term)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        ABAC = 1000 * A + 100 * B + 10 * A + C\n        DBEC = 1000 * D + 100 * B + 10 * E + C\n        ACEDC = 10000 * A + 1000 * C + 100 * E + 10 * D + C\n        \n        if ABAC + DBEC == ACEDC and A != 0 and D != 0:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time_minutes = (9 * 60) + 23\n    afternoon_time_minutes = (13 * 60) + 6\n    diff_minutes = afternoon_time_minutes - morning_time_minutes\n    return diff_minutes\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Since there is no detail provided about the number of restaurants or any conditions,\n    # it's impossible to answer this question with the given information.\n\n    # Please provide the number of restaurants or any other conditions related to the choices.\n\n    # Placeholder return for the function, since we cannot compute the actual answer.\n    return None\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # The sequence consists of two parts:\n    # An ascending sequence from 1 to 9 inclusive\n    # A descending sequence from 8 back to 1 inclusive\n    \n    # Sum of ascending sequence (1 to 9)\n    sum_ascending = sum(range(1, 10))\n    # Sum of descending sequence (8 to 1)\n    sum_descending = sum(range(1, 9))\n    \n    # Total sum is sum of both sequences\n    total_sum = sum_ascending + sum_descending\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # 3 notebooks (+3n), 4 pencil cases (+4p), and 5 erasers (+5e) cost 50\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n\n    # A notebook and a pencil case cost 6\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost 8\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([53-50, 47-44, 41-38, 35-32, 29-26, 23])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48  # in meters\n    speed = 8  # meters per minute\n    time_taken = distance / speed  # in minutes\n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for permutation in permutations(range(10), 4):\n        A, E, _, _ = permutation\n        if A == 0:\n            continue\n        number = A * 1001 + E * 110\n        if len(set(str(number))) == 2:\n            return number\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25  # average age times number of family members\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # We convert all the measurements to centimeters for comparison\n    measurements = [8300, 200, 8, 50]  # Conversion of m to cm is by multiplying by 100\n\n    # Generally, the height of a classroom door is close to 200cm\n    door_height_cm = 200\n\n    # Find the measurement closest to the typical door height\n    closest = min(measurements, key=lambda x: abs(x - door_height_cm))\n\n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages = 0\n    digits_used = 0\n\n    # Find the number of digits used by pages with 1-digit, 2-digits, etc.\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n\n    # Once we exceed the total number of digits, go one page back\n    if digits_used > total_digits:\n        pages -= 1\n\n    return pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12  # Fraction of money left after lunch\n    remaining_after_dinner = 1 - 2/7  # Fraction of money left after dinner\n    \n    # Calculate the remaining fraction after lunch and dinner\n    remaining_fraction = remaining_after_lunch * remaining_after_dinner\n    \n    # Calculate the original amount of money before spending\n    original_amount = 45 / remaining_fraction\n    \n    return original_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits_per_page = 0\n    pages = 0\n    \n    for i in range(1, 10):\n        next_digits = 9 * i * (10**(i-1))\n        if total_digits > next_digits:\n            total_digits -= next_digits\n            pages += 9 * (10**(i-1))\n        else:\n            pages += total_digits // i\n            break\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    # Total number of games if each player plays every other player once\n    total_games = (5 * (5 - 1)) // 2\n    \n    # Calculate the total number of wins from the given information\n    wins_by_known_players = 2 + 1 + 4 + 3\n    \n    # Calculate the number of wins by Gina\n    gina_wins = total_games - wins_by_known_players\n    \n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = math.radians(20)  # Convert degree to radians for calculation\n    d = 400  # distance along the slope\n    friction_coefficient = 0.2  # Coefficient of kinetic friction\n    g = 9.81  # Acceleration due to gravity in m/s^2\n\n    # The acceleration along the slope can be calculated by the difference between the component of gravity along the slope\n    # and the force of friction, which is the normal force (component of gravity perpendicular to the slope) times the coefficient of friction.\n    # Component of gravity along the slope (parallel) is g * sin(angle)\n    # Component of gravity perpendicular to the slope (normal) is g * cos(angle)\n    # Force of friction is friction_coefficient * normal force\n    # Thus, acceleration 'a' along the slope is:\n    a = g * math.sin(angle) - friction_coefficient * g * math.cos(angle)\n\n    # We can use the kinematic equation v^2 = u^2 + 2*a*d, where\n    # v is the final velocity (speed at the bottom we want to find),\n    # u is the initial velocity (0 m/s, starts from rest),\n    # a is the acceleration we computed, and\n    # d is the distance along the slope.\n    # Since initial velocity u is 0, the equation simplifies to v^2 = 2 * a * d\n\n    # Calculate the final speed v at the bottom of the run\n    v = math.sqrt(2 * a * d)\n\n    return v\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_cost = 5\n    bag_cost = 10\n    total_spent = 300\n\n    # Marcus' calculation assumes 1 bag per group, but actually there are 4 shirts for each bag.\n    group_cost = (shirt_cost * 4) + bag_cost\n    number_of_groups = total_spent // group_cost\n    shirts_bought = number_of_groups * 4  # Correct number of shirts bought per group\n\n    # Check if Marcus's solution is correct\n    is_correct = (shirts_bought == 20)\n\n    return shirts_bought, is_correct\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_work_rate = 1 / (6 * 5)  # The work rate of one man (jobs per day)\n    women_work_rate = 1 / (5 * 6)  # The work rate of one woman (jobs per day)\n\n    combined_work_rate = 10 * men_work_rate + 5 * women_work_rate  # Total work rate of 10 men and 5 women\n\n    days_to_complete = 1 / combined_work_rate  # Time to complete one job\n\n    return days_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: three times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    \n    # After 12 boys leave and 20 girls join, the number of boys and girls is equal\n    equation2 = Eq(boys - 12, girls + 20)\n    \n    # Solve the system of equations for boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let x be the number of correct answers Avril got.\n    # Therefore, Avril scored 10x points for correct answers.\n    # Since they answered 10 questions each, Avril got (10 - x) wrong, subtracting 5(10 - x) points.\n    # This means Avril scored 10x - 5(10 - x) points in total.\n\n    # Similarly for Eddie, let y be the number of correct answers Eddie got.\n    # Eddie scored 10y points for correct answers and lost 5(10 - y) for wrong answers.\n    # So, Eddie's total is 10y - 5(10 - y).\n\n    # According to the problem, the total score for Eddie and Avril is 155 points:\n    # 10x - 5(10 - x) + 10y - 5(10 - y) = 155\n    # And Eddie scored 15 more points than Avril:\n    # 10y - 5(10 - y) = 10x - 5(10 - x) + 15\n\n    # We use these two equations to solve for x and y, the number of correct answers for Avril and Eddie.\n\n    # Let's simplify each player's total score expressions\n    # Avril's score: 10x - 50 + 5x = 15x - 50\n    # Eddie's score: 10y - 50 + 5y = 15y - 50\n\n    # The system of equations becomes:\n    # 15x - 50 + 15y - 50 = 155 -> Equation 1\n    # 15y - 50 = 15x - 50 + 15 -> Equation 2\n\n    # Simplifying Equation 1 gives us:\n    # 15x + 15y = 255\n\n    # From Equation 2, express y in terms of x:\n    # 15y = 15x + 15\n    # y = x + 1\n\n    # Substitute y in Equation 1 with x + 1:\n    # 15x + 15(x + 1) = 255\n    # 15x + 15x + 15 = 255\n    # 30x = 240\n    # x = 8\n\n    # Thus, Avril answered correctly 8 questions.\n    return 8\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the coffee beans\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n\n    # Calculate the Greatest Common Divisor (GCD) of the three weights\n    greatest_mass = gcd(gcd(weight_A, weight_B), weight_C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    min_apples = (apples - children) // children + 1\n    return min_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # let the number of apples be x\n    # then the number of bananas will be 2x, and oranges will be 3x\n    # Total fruits: x + 2x + 3x = 24\n    \n    # Combining terms: 6x = 24\n    x = 24 / 6\n    \n    # The number of bananas is twice the number of apples\n    bananas = 2 * x\n    \n    return bananas\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    \n    anna_age = 8 + years\n    mother_age = 44 + years\n    \n    equation = Eq(mother_age, 3 * anna_age)\n    \n    answer = solve(equation, years)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short = 7\n    may_total_length_more = 2.4 * 100  # converting to cm\n    \n    # May's total length of short ribbons\n    may_short_length = may_short * 40\n    \n    # Let's let nancy_short be the number of short ribbons Nancy has\n    # and let may_long be the number of long ribbons May has\n    # Since May and Nancy have an equal number of pieces of ribbon, we can write:\n    # may_short + may_long = nancy_short + 18\n    # Additionally, since May's ribbons are 2.4 m longer in total, we can write:\n    # may_short_length + 70 * may_long = 40 * nancy_short + 70 * 18 + may_total_length_more\n    \n    # We have two equations and two unknowns (nancy_short and may_long).\n    # We can solve these equations to find the number of pieces of ribbon May has.\n    \n    from sympy import symbols, Eq, solve\n\n    nancy_short, may_long = symbols('nancy_short may_long')\n\n    # Equation: equal number of pieces of ribbon\n    eq_pieces = Eq(may_short + may_long, nancy_short + 18)\n    # Equation: total length difference\n    eq_length = Eq(may_short_length + 70 * may_long, 40 * nancy_short + 70 * 18 - may_total_length_more)\n\n    # Solving equations\n    solution = solve((eq_pieces, eq_length), (nancy_short, may_long))\n\n    # Number of ribbon pieces May has is the sum of her short and long ribbons\n    total_may_ribbons = may_short + solution[may_long]\n\n    return total_may_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n    # Assume that all the animals are chickens,\n    # chickens have 2 legs, so let's start by calculating the number of legs.\n    all_chickens_legs = total_animals * 2\n\n    # The remaining legs will belong to the rabbits (have 4 legs)\n    remaining_legs = total_legs - all_chickens_legs\n    # Since each rabbit has 4 legs, divide the remaining legs by 4 to\n    # find the number of rabbits.\n    num_rabbits = remaining_legs / 2\n\n    return int(num_rabbits)\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 4 == 3 and number % 5 == 3:\n            return number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_paint_ratio = 3\n    total_paint = 1\n\n    red_paint = (red_paint_ratio / total_ratio) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    known_numbers_sum = 9 + 7 + 5 + 8 + 4 + 1 + 8\n    total_numbers = 8\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - known_numbers_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given_to_sister = total_money * (1/4)\n    money_left = total_money - money_given_to_sister\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Start by giving each of the 8 children 1 apple to satisfy the condition that each gets at least 1 apple.\n    # Then distribute the remaining apples (50 - 8) one by one to the children with the least apples until the condition is violated.\n    apples_left = 50 - 8  # Number of apples left to distribute after giving each child 1 apple\n    apples_distribution = [1] * 8  # Starting distribution of 1 apple to each child\n\n    while True:\n        for i in range(8):\n            # Give an apple to the child with the least apples\n            apples_distribution[i] += 1\n            apples_left -= 1\n            \n            # Break if there are no more apples to distribute\n            if apples_left == 0:\n                break\n        # Sort the distribution to ensure the child with least apples gets the next apple\n        apples_distribution.sort()\n        \n        # The distribution must be such that all the counts are different\n        # Since the list is sorted, we just compare adjacent elements\n        for i in range(1, 8):\n            if apples_distribution[i] == apples_distribution[i - 1]:\n                break\n        else:\n            # If the loop didn't break, the distribution is valid\n            # Check if distribution is finished\n            if apples_left == 0:\n                ans = max(apples_distribution)  # The child with most apples\n                return ans\n            continue\n        # If we reached this point, the distribution violated the condition and we should stop\n        break\n    \n    # The condition was violated, so we need to reduce the count from the last child who received an apple\n    # And redistribute to maintain the different counts condition\n    last_child_to_receive = apples_distribution.index(max(apples_distribution))\n    apples_distribution[last_child_to_receive] -= 1\n    ans = max(apples_distribution)  # Final count for the child with most apples\n    return ans\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let's denote the amount of grass consumed by one cow in one day as x.\n    # The total amount of grass G which can feed 8 cows for 10 days is then 80x.\n    # The same amount of grass can feed 4 cows for 15 days, hence 60x = 80x.\n    # To feed n cows for 5 days, we have 5nx = 80x.\n\n    # From the given data:\n    # 8 cows for 10 days: 8 * 10 * x = 80x\n    # 4 cows for 15 days: 4 * 15 * x = 60x\n    # These two expressions equal to the same total amount of grass G, so:\n    # 80x = 60x\n    # The amount of grass remains constant, so we can set them equal.\n    # For 5 days, with unknown number of cows n, we have:\n    # 5 * n * x = 80x\n    # Solving for n:\n    n = 80 / 5\n\n    return n\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    ans = 53 * 84\n    return ans\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let 'c' be the cost of each compact disc\n    # 4 CDs + 3 tapes = £83, each tape costs £9\n    # 4*c + 3*9 = 83\n    # 4*c + 27 = 83\n    # 4*c = 83 - 27\n    # 4*c = 56\n    # c = 56 / 4\n    c = 56 / 4\n\n    return c\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # Will forgot to put down the decimal, so he used 122 instead of 1.22\n    # Let's denote the dividend as 'x'\n    # According to the problem, x / 122 = (x / 1.22) - 99.396\n    # We can solve for x with algebra\n    # x * (1/122) = x * (1/1.22) - 99.396\n    # x / 122 = x / 1.22 - 99.396\n    # x / 122 + 99.396 = x / 1.22\n    # Multiply both sides by 122 * 1.22 to get rid of the denominators:\n    # x + 99.396 * 122 * 1.22 = x * 122\n    # Now solve for x:\n    # x + 99.396 * 148.84 - x * 122 = 0\n    # x(1 - 122) = -99.396 * 148.84\n    # x = -99.396 * 148.84 / (1 - 122)\n    x = -99.396 * 148.84 / (1 - 122)\n    # This will give us the dividend, however, the question asks for the true result which is x / 1.22\n    true_result = x / 1.22\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    # Let x be the number of cards Hisham has\n    # Then Melissa has 2x cards\n    # The total number of cards is x + 2x = 876\n    \n    # Solve for x\n    x = 876 // 3\n    \n    # After Melissa gives away some cards, Hisham and Melissa should have the same amount\n    # The number of cards Melissa should give to Hisham is the difference between what she has (2x) and what they should end up with (876 / 2)\n    cards_to_give = (2 * x) - (876 // 2)\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = 0, 0  # Initialize the first two numbers\n    c = 6        # Given fourth number\n\n    # Using the fact that each number is the sum of the previous two numbers\n    # We need to solve for the first two numbers\n    # E.g., fifth number would be b + c\n    # And the sixth number would be c + (b + c) = 15\n    # Now, the first number 'a' is just the second number 'b' but one step ahead.\n    # Which gives us a + c = b + c + b = 15\n    # We find 'b' using the above relation and 'a' consequently as they are sequentially one behind the other.\n    \n    b = 15 - c   # This implies that (b + c) + b = 15 thus solving for b\n    a = b - (c - b)  # This follows from the fact that c = a + b which implies a = c - b and we have just shifted b to be the first number\n    \n    # Using a and b to calculate the seventh number which is the sum of the fifth and sixth numbers\n    fifth_number = b + c\n    sixth_number = c + fifth_number\n    seventh_number = fifth_number + sixth_number\n    \n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Tasha's final answer was 35\n    final_answer = 35\n    # We need to perform the inverse operations to find the original number\n    # The inverse of adding 8 is subtracting 8\n    subtracted_eight = final_answer - 8\n    # The inverse of multiplying by 3 is dividing by 3\n    original_number = subtracted_eight / 3\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # convert 1.7 liters to milliliters\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * sum(1 / (5 * i * (5 * i + 5)) for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    perm = permutations(digits)\n    smallest_odd = float('inf')\n    \n    for p in perm:\n        num = int(''.join(map(str, p)))\n        if num % 2 != 0 and num < smallest_odd and len(str(num)) == 5:\n            smallest_odd = num\n\n    return smallest_odd\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    men_work_rate = 1 / (24 * 16)\n    women_work_rate = 1 / (16 * 24)\n    \n    combined_work_rate = (10 * men_work_rate) + (6 * women_work_rate)\n    \n    time_to_complete = 1 / combined_work_rate\n    \n    return time_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    n = 4\n    ans = n * (n + 1) // 2 + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_value = solve(equation, julie)[0]\n    marion_value = 2 * julie_value\n    ethan_value = 5 * julie_value\n\n    total_earnings = julie_value + marion_value + ethan_value\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial as fact\n\n    total_ways = fact(5)  # total permutations for 5 people\n    middle_ways = fact(4)  # permutations when Eddie is in the middle\n    # Eddie doesn't want to be in the middle, so we subtract those scenarios\n    ways_with_conditions = total_ways - middle_ways\n\n    return ways_with_conditions\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given geometric sequence terms: a, n, 24, 12, 6, where a is the first term (96) in the sequence\n    a = 96\n    third_term = 24\n    fourth_term = 12\n    \n    # The ratio (r) can be found by dividing the fourth term by the third term\n    r = fourth_term / third_term\n    \n    # Now we can find the second term by multiplying the first term by r (since it's a geometric sequence)\n    n = a * r\n    \n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    watch = initial_money / 3\n    tie = 56\n    remaining_money = 3 * initial_money / 8 \n\n    equation = Eq(initial_money - watch - tie, remaining_money)\n\n    solved = solve(equation, initial_money)\n\n    spent = initial_money - remaining_money\n    spent_amount = spent.subs(initial_money, solved[0])\n\n    return spent_amount.evalf()\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "def solution():\n    from itertools import permutations\n    \n    # Create all permutations of numbers 1 to 9\n    all_permutations = permutations('123456789')\n    \n    # Initialize variable to store the minimum number divisible by 11\n    min_divisible_by_eleven = float('inf')\n    \n    # Check all permutations for divisibility by 11\n    for perm in all_permutations:\n        number = int(''.join(perm))\n        \n        # Update if the number is divisible by 11 and less than the current minimum\n        if number % 11 == 0 and number < min_divisible_by_eleven:\n            min_divisible_by_eleven = number\n    \n    return min_divisible_by_eleven\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # meters per second\n    train_speed = 57  # meters per second\n    time_to_pass = 10  # seconds\n    \n    # Relative speed is the sum of Eddie's speed and the train's speed\n    relative_speed = eddie_speed + train_speed\n    \n    # The length of the train is the relative speed times the time it takes to pass Eddie\n    train_length = relative_speed * time_to_pass\n    \n    return train_length\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operations = ['+', '*']\n    max_value = 0\n    for ops in product(operations, repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # These are our congruences: x ≡ 1 (mod 5), x ≡ 2 (mod 7), x ≡ 3 (mod 9)\n    congruences = [(1, 5), (2, 7), (3, 9)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    marks_awarded = 63\n    correct_marks = 8\n    incorrect_deduction = 3\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks - incorrect_answers * incorrect_deduction == marks_awarded:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # length of the train in meters\n    bridge_length = 900  # length of the bridge in meters\n    speed = 400  # speed of the train in meters per minute\n\n    total_distance = train_length + bridge_length  # total distance to be covered\n    time = total_distance / speed  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3\n    return b\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Number of terms\n    n = 60\n    \n    # Sum of first 5 numbers\n    S_first_5 = 10\n    \n    # Average of first 5 numbers (mean = sum / number_of_terms)\n    mean_first_5 = S_first_5 / 5\n    \n    # Sum of last 5 numbers\n    S_last_5 = 120\n    \n    # Average of last 5 numbers (mean = sum / number_of_terms)\n    mean_last_5 = S_last_5 / 5\n    \n    # Mean of the sequence = (mean of first 5 + mean of last 5) / 2\n    mean_sequence = (mean_first_5 + mean_last_5) / 2\n    \n    # Sum of all terms = mean of sequence * number of terms\n    sum_of_sequence = mean_sequence * n\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age, pip_age, pit_age = 45, 7, 14\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the original number of stickers Peter had\n    p = symbols('p', positive=True, integer=True)\n\n    # Sam had 40 more stickers than Peter initially\n    s = p + 40\n\n    # After transactions, Sam and Peter's new sticker count\n    s_new = s - 0.20 * s + 0.25 * p\n    p_new = p + 0.20 * s - 0.25 * p\n\n    # The difference after swapping stickers\n    equation = Eq(s_new - p_new, 96)\n\n    # Solve the equation for p\n    solution = solve((equation), (p))\n\n    return solution[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n    # Hazel's age in 12 years will be three times her current age\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age then\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_n = n * (n + 1) // 2\n    ans = sum_n ** 2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # To ensure 2 cards with consecutive numbers, worst-case scenario for the pigeonhole principle is that:\n    # one draws all non-consecutive cards. Since there are 13 numbers, the worst case would be drawing all cards of 1 number,\n    # plus one additional card to finally get a consecutive number.\n    # So, one would need to draw (4 cards per number * 12 non-consecutive numbers) + 1 extra card = 49 cards to ensure at least 2 have consecutive numbers.\n    ans = 4 * (13 - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    result = 10 * 2\n    return result\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    total_sheets = 36 // 2  # Each sheet has two pages\n    fifth_sheet = 5\n    \n    # Each sheet will have two consecutive numbers and two other numbers which are adding total_sheets\n    # to the consecutive numbers: [n, n+1, n+total_sheets, n+total_sheets+1]\n    # As we start counting sheets from 1, we calculate pages for the fifth sheet.\n    first_page = ((fifth_sheet - 1) * 2) + 1\n    second_page = first_page + 1\n    third_page = first_page + total_sheets\n    fourth_page = third_page + 1\n    \n    # The sum of all page numbers on the fifth sheet:\n    page_sum = first_page + second_page + third_page + fourth_page\n    \n    return page_sum\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of laptops\n    x = symbols('x')\n    \n    # Original profit per laptop is the selling price minus the original cost\n    # Therefore, original cost is selling price - profit / number of laptops\n    original_total_profit = 60000\n    selling_price = 2000\n    original_cost_per_laptop = selling_price - (original_total_profit / x)\n    \n    # New profit is 30% more than the original profit\n    new_total_profit = original_total_profit * 1.3\n    \n    # New cost per laptop is reduced by 1/5 of the original cost\n    new_cost_per_laptop = original_cost_per_laptop - (original_cost_per_laptop / 5)\n    \n    # New profit per laptop is the selling price minus the new cost\n    new_profit_per_laptop = selling_price - new_cost_per_laptop\n    \n    # We setup the equation based on the new total profit\n    equation = Eq(new_total_profit, new_profit_per_laptop * x)\n    \n    # Solve the equation to find the number of laptops\n    solution = solve(equation, x)\n\n    # The solution should contain only one element since it's a linear equation\n    return solution[0]\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    a = 1  # a must be a positive integer, start with the smallest possible value\n    while True:\n        # Check if a satisfies the condition that a < 7 (to form an increasing sequence)\n        # and a is not a multiple of 7 or 28 (to ensure different remainders when divided by 7 and 28)\n        if a < 7 and 7 % a != 0 and 28 % a != 0:\n            # Calculate the remainders for 7, 9 and 28\n            # The remainders must be in the form of an arithmetic sequence, so we add multiples of a\n            r7 = a\n            r9 = 2 * a  # This ensures the remainder for 9 is more than for 7\n            r28 = 3 * a # This ensures the remainder for 28 is more than for 9\n            \n            # Use the Chinese Remainder Theorem to find the smallest M that satisfies all the remainders\n            m = r7\n            while True:\n                # Check if M gives the correct remainders when divided by 7, 9, a, and 28\n                if m % 7 == r7 and m % 9 == r9 and m % 28 == r28 and m % a == 0:\n                    return m\n                m += 7  # Increment by 7, since M must be a multiple of 7 (remainder when divided by 7 is 0)\n        a += 1  # Increment a and check again\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    \n    ellie_work = ellie_rate * combined_weeks\n    gloria_work = total_people - ellie_work\n    \n    gloria_weekly_rate = gloria_work / combined_weeks\n    \n    weeks_for_gloria = total_people / gloria_weekly_rate\n    \n    return weeks_for_gloria\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    difference = 36\n    # Since boys and girls are arranged in square layers,\n    # we should look for two consecutive square numbers with a difference of 36.\n    # The total number of students will be the sum of the two square numbers.\n    i = 1\n    while True:\n        boys = i * i\n        girls = (i - 2) * (i - 2)  # Inner square will always have side 2 less than the outer square\n        if boys - girls == difference:\n            total_students = boys + girls\n            break\n        i += 1\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Time taken by three men to dig a trench 120 metres long\n    time_three_men = 2  # days\n    length_three_men = 120  # metres\n\n    # Work done by one man in one day (unitary work)\n    work_one_man_one_day = length_three_men / (3 * time_three_men)  # metres per man per day\n\n    # Length to be dug by four men\n    length_four_men = 880  # metres\n\n    # Total man-days required to dig 880 metres\n    total_man_days = length_four_men / work_one_man_one_day\n\n    # Time taken by four men to dig a trench 880 metres long\n    time_four_men = total_man_days / 4  # days\n\n    return time_four_men\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return numerator\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 285 + Fraction(6, 7)\n    num2 = 181 + Fraction(10, 11)\n    num3 = 153 + Fraction(12, 13)\n    den = Fraction(1, 7) + Fraction(1, 11) + Fraction(1, 13)\n    \n    result = (num1 + num2 + num3) / den\n    return result\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    books_first_shelf = 18\n    books_second_shelf = 24\n\n    # Let x be the number of books moved from the first to the second shelf.\n    # After moving x books, the first shelf will have (18 - x) books,\n    # and the second shelf will have (24 + x) books.\n    # We want the second shelf to have twice as many books as the first shelf,\n    # so we can set up the equation: 24 + x = 2 * (18 - x)\n\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n\n    # Solve for x\n    solution = solve(equation, x)\n    \n    # We take the non-negative solution as it is not possible to move a negative number of books\n    number_of_books_to_move = max(solution)\n\n    return number_of_books_to_move\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # sec\n    distance = 300  # m\n    speed = distance / time  # m/s\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 28 - 3 * (24 - 5 * x) - 1\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the total number of pupils in the class\n    x = symbols('x')\n\n    # 5 pupils are in the band\n    band = 5\n\n    # 3/4 of the remaining pupils are in the choir\n    choir = (3/4) * (x - band)\n\n    # 2/9 of the class are neither in the band nor the choir\n    neither = (2/9) * x\n\n    # Equation representing the total number of pupils\n    equation = Eq(band + choir + neither, x)\n\n    # Solve for x\n    total_pupils = solve(equation, x)[0]\n\n    return total_pupils\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    difference = (ninth_term - third_term) / (9 - 3)\n    \n    first_term = third_term - 2 * difference\n    eleventh_term = first_term + 10 * difference\n    \n    return eleventh_term\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # Let x be the number of long tubes and y be the number of short tubes\n    # We have the system of equations: 8x + 5y = 47 and x + y is minimum\n    # We will try to maximize the number of long tubes since they have a larger capacity\n    \n    max_long_tubes = 47 // 8  # Maximum possible long tubes if no short tubes are used\n    for x in range(max_long_tubes, -1, -1):\n        y = (47 - 8 * x) / 5\n        if y.is_integer():  # Check if we can use a whole number of short tubes\n            return x\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Initialize lollipops count\n    lollipops = 0\n    \n    # We know that the number of lollipops should be in the form of\n    # lollipops = 4 * boxes + 32 when putting 4 in each box\n    # lollipops = 7 * (boxes - 1) + 3 when putting 7 in each box\n    # Therefore, it should also satisfy\n    # 7 * k + 3 = 4 * j + 32 for some integers k and j\n\n    # to find such integers, let's iterate possible values of j,\n    # since we know that for each j we can compute k and check if it's an integer\n    j = 0\n    while True:\n        # Check if the remaining when dividing by 7 is 3\n        if (4 * j + 32 - 3) % 7 == 0:\n            # Calculate the total number of lollipops\n            lollipops = 4 * j + 32\n            break\n        j += 1\n        \n    return lollipops\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Define a function to calculate the square of the sum of an arithmetic series\n    def sum_of_squares(n):\n        return ((n * (n + 1)) // 2) ** 2\n\n    # The sum of cubes of the given sequence\n    # Subtract the sum of cubes of excluded numbers (3, 6, 9, 12)\n    # from the sum of cubes of first 14 natural numbers\n    ans = sum_of_squares(14) - sum_of_squares(3) - sum_of_squares(6) - sum_of_squares(9) - sum_of_squares(12)\n\n    return ans\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the number Will multiplies 4.32 with.\n    # The result without the decimal point is 432 * x.\n    # The true result is 4.32 * x.\n    # According to the problem, 432 * x - 4.32 * x = 2138.4\n    # This simplifies to 427.68 * x = 2138.4\n    # Now solving for x we get:\n    x = 2138.4 / 427.68\n\n    # After finding x, we calculate the true result which is 4.32 * x\n    true_result = 4.32 * x\n\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Find the differences between the numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2017\n    \n    # Find the greatest common divisor of the differences\n    from math import gcd\n    A_gcd = gcd(diff1, diff2)\n    \n    # Find divisors of the gcd, as the differences have to be divisible by A for the remainders to be same\n    divisors = []\n    for i in range(1, A_gcd + 1):\n        if A_gcd % i == 0:\n            divisors.append(i)\n    \n    # The sum of possible values of A, excluding 1 and A_gcd itself\n    # because if A was 1 or A_gcd, the remainders would be 0, which are not 'the same' in a meaningful way for the problem\n    return sum(divisors) - 1 - A_gcd\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    result = 9 + 99 + 999 + 9999\n    return result\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let x be the number of bracelets Felicia had originally\n    felicia_sold_fraction = 3/5\n    janice_bought_fraction = 2/5\n    final_ratio = 5/7\n    janice_initial = 96\n\n    # Felicia sold 3/5 of her bracelets and Janice bought 2/5 of those\n    # Therefore, Janice now has her initial amount plus 2/5 of what Felicia sold\n    # Also, after selling 3/5, Felicia has 2/5 of her original bracelets left\n    # This means that 2/5 of Felicia's bracelets are equal to 5/7 of Janice's final amount\n\n    # Set up the equation for the final ratio after Janice buys the bracelets\n    # 2/5 * x / (janice_initial + (3/5 * x) * (2/5)) = 5/7\n\n    # Simplify to solve for x\n    # 2x / (5 * (janice_initial + 3/5 * 2/5 * x)) = 5/7\n    # 2x / (5 * janice_initial + 6/25 * x) = 5/7\n\n    # Cross-multiply to get rid of the fraction\n    # 14x = 25 * 5 * janice_initial + 30/25 * x\n    # 14x = 125 * janice_initial + 6/5 * x\n    # 14x - 6/5 * x = 125 * janice_initial\n    # 70/5 * x - 6/5 * x = 125 * janice_initial\n    # 64/5 * x = 125 * janice_initial\n    # x = (125 * janice_initial) * 5/64\n\n    x = (125 * janice_initial) * (5/64)\n\n    # Now we know the original number of Felicia's bracelets,\n    # we can find out how many she sold and how many Janice bought\n    felicia_sold = felicia_sold_fraction * x\n    janice_bought = janice_bought_fraction * felicia_sold\n\n    return int(janice_bought)\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the original number of milk candies and f be the original number of fruit candies\n    m, f = symbols('m f')\n    \n    # Original ratio 7:9\n    eq1 = Eq(m / f, 7 / 9)\n    \n    # After eating 8 milk candies, ratio changes to 2:3\n    eq2 = Eq((m - 8) / f, 2 / 3)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (m, f))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(5 * boys + 3 * girls, 448)  # Total candies given out\n    equation2 = Eq(girls, boys + 8)            # Girls are 8 more than boys\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    lemonade_price = 4\n    plus_price = 7\n    total_bottles = 350\n    total_income = 2012\n    min_plus_bottles = (total_income - lemonade_price * total_bottles) // (plus_price - lemonade_price)\n    while (total_income - (min_plus_bottles * plus_price)) % lemonade_price != 0:\n        min_plus_bottles += 1\n    return min_plus_bottles\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initial = 60\n    apples_per_friend_initial = 4\n\n    # Find out how many friends Ben has\n    num_friends = apples_initial // apples_per_friend_initial\n\n    # Each friend asks for one more apple\n    apples_per_friend_new = apples_per_friend_initial + 1\n\n    # Calculate the total number of apples needed\n    total_apples_needed = num_friends * apples_per_friend_new\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # grandmother was 80 years old on 1st December 2008\n    grandmother_age_2008 = 80\n    # grandmother's age on 1st December 1996\n    grandmother_age_1996 = grandmother_age_2008 - (2008 - 1996)\n\n    # mum was 40 years old on 1st December 1996\n    mum_age_1996 = 40\n    # mum's age when she was born (which is 0)\n\n    # grandmother's age when mum was born\n    grandmother_age_when_mum_born = grandmother_age_1996 - mum_age_1996\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        total_students = groups_of_6 * 6 + groups_of_4 * 4\n        if total_students == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Maximum socks taken without getting a white pair include:\n    # All black socks + All red socks + 1 white sock\n    max_black_socks = 10\n    max_red_socks = 10\n    one_white_sock = 1\n\n    # Maximum socks that Yohan must take to ensure a pair of white socks\n    max_socks_without_white_pair = max_black_socks + max_red_socks + one_white_sock\n\n    # Add one more to get at least one pair of white socks\n    max_socks_for_white_pair = max_socks_without_white_pair + 1\n\n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    numbers_initial = 3\n    average_final = 90\n    numbers_final = 4\n\n    # The total of the initial three numbers\n    total_initial = average_initial * numbers_initial\n    # The new total including the fourth number\n    total_final = average_final * numbers_final\n\n    # The fourth number\n    fourth_number = total_final - total_initial\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible permutations of the digits 0-9 for 3 digits number\n    perm = permutations(range(10), 3)\n\n    # Convert tuples to integers and collect valid numbers\n    valid_numbers = [100*a + 10*b + c for a, b, c in perm if a != 0]\n\n    # Assuming there is only one valid number that meets the criteria\n    return valid_numbers[0]\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen trade ratio: 3 fish for 2 rabbit\n    fish_to_rabbit = 3 / 2\n    # Oscar trade ratio: 3 rabbits for 4 packs of wheat\n    rabbit_to_wheat = 4 / 3\n\n    # Combined trade ratio: fish to packs of wheat\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Discover how many fish Owen should give for 1 pack of wheat\n    fish_for_one_pack_wheat = 1 / fish_to_wheat\n\n    # Find out how many fish are needed for 8 packs of wheat\n    fish_for_eight_packs_wheat = fish_for_one_pack_wheat * 8\n\n    return fish_for_eight_packs_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    pens_cost = 3 * 1.60\n    pencils_cost = 2 * 0.62\n    magazine_cost = 4.50\n    \n    total_cost = pens_cost + pencils_cost + magazine_cost\n    change = 20 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    original_price_handbag = 428 / (1 - 0.20)\n    total_discount = 121\n    discount_on_purse = total_discount - (original_price_handbag - 428)\n    original_price_purse = discount_on_purse / 0.28\n\n    return original_price_purse\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    i = 5\n    while (n // i > 0):\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    progress_per_day = 4 - 1  # Net progress each day (climbs up 4m, slides down 1m)\n    total_distance = 25\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += 4  # Snail climbs up during the day\n        if current_distance >= total_distance:\n            break\n        current_distance -= 1  # Slides down at night\n\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since the number is 0.A22A22A22... and so on,\n    # First calculate the sum of one full cycle of the recurring pattern (A + 2 + 2)\n    recurring_sum = A + 2 + 2\n    \n    # There are 20 digits, and since each cycle has 3 digits,\n    # We can find how many full cycles there are in the first 20 digits\n    full_cycles = 20 // 3  # integer division\n    \n    # Now, add the sum of the digits in these full cycles\n    total_sum = full_cycles * recurring_sum\n    \n    # We need to account for the remaining digits after the full cycles\n    remaining_digits = 20 % 3\n    \n    # If there's 1 remaining digit, we add A,\n    # If there're 2 remaining digits, we add A + 2\n    if remaining_digits == 1:\n        total_sum += A\n    elif remaining_digits == 2:\n        total_sum += A + 2\n    \n    # We know the total sum of the digits is 80\n    # We can solve for A now\n    A = (80 - full_cycles * 4) // (full_cycles + remaining_digits)\n    \n    return A\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_amount = symbols('original_amount')\n    money_spent_chair = 120\n    money_left_after_chair = original_amount - money_spent_chair\n    money_spent_jacket = 0.40 * money_left_after_chair\n    money_left = original_amount * 0.30\n    \n    equation = Eq(money_left, money_left_after_chair - money_spent_jacket)\n    \n    solution = solve(equation, original_amount)\n    \n    return solution[0]\n\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate time spent jogging from 6:30 am to 7:00 am\n    jogging_time = (7 * 60) - (6 * 60 + 30)  # in minutes\n    jogging_time_in_hours = jogging_time / 60  # convert minutes to hours\n\n    # Calculate distance covered jogging\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time_in_hours\n\n    # Calculate time spent walking from 7:00 am to 8:00 am\n    walking_time = (8 * 60) - (7 * 60)  # in minutes\n    walking_time_in_hours = walking_time / 60  # convert minutes to hours\n\n    # Calculate distance covered walking\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time_in_hours\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n\n    lcm = a * b // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n    \n    # Using the Pigeonhole Principle, we divide the total number of books\n    # by the number of layers to find the minimum number in the fullest layer.\n    # To ensure we find the least number capable in the layer with the most books,\n    # we need to add 1 if there's a remainder (since we want the \"at least\" count)\n    min_books_in_fullest_layer = (total_books // total_layers) + (total_books % total_layers != 0)\n    \n    return min_books_in_fullest_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of books before and after buying the additional 2 books\n    books_before, books_after = symbols('books_before books_after')\n    \n    # Equation 1: Total cost before buying the additional books\n    equation1 = Eq(3.50 * books_before, books_before * 3.50)\n    \n    # Equation 2: Total cost after buying the additional books\n    equation2 = Eq(3.50 * books_before + 2 * 6, books_after * 4)\n    \n    # Equation 3: Number of books after buying the additional books\n    equation3 = Eq(books_before + 2, books_after)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (books_before, books_after))\n\n    return solutions[books_after]\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # The hundred's place can be 1, 2, or 3.\n        for ten in range(4):  # The ten's place can be 0, 1, 2, 3 but not the same as hundred's.\n            for unit in range(4):  # The unit's place can be 0, 1, 2, 3 but not the same as hundred's and ten's.\n                if hundred != ten and hundred != unit and ten != unit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        term += common_difference\n        num_terms += 1\n        \n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / (alice - 8), 3)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n    total_weight_g = total_weight_kg * 1000\n    \n    num_pieces = total_weight_g / piece_weight_g\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is approximately 1.056688 quarts\n    liters_to_quarts = 2.5 * 1.056688\n    # The capacity of the cup in quarts\n    cup_capacity = 0.5\n    # Calculate the number of cups she can drink\n    cups = liters_to_quarts / cup_capacity\n    # Return the rounded result to the nearest integer\n    return round(cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    for x in range(1, 19):\n        if 3 * x == 18:\n            return x\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging in hours\n    jogging_time = 1  # from 6:30 am to 7:30 am\n    \n    # Time spent walking in hours\n    walking_time = 2  # from 7:30 am to 9:30 am\n    \n    # Jogging speed in miles per hour\n    jogging_speed = 6\n    \n    # Walking speed in miles per hour\n    walking_speed = 5\n    \n    # Distance traveled while jogging\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Distance traveled while walking\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # B=2 and D=0, so consider the equation using these values\n    # 5 x |A 2 C 0 E F| = 6 x |E F A 2 C 0|\n    # To solve for A, C, E, F where all numbers must be distinct and between 1 to 9 except B and D\n    for A in range(1, 10):\n        for C in range(1, 10):\n            for E in range(1, 10):\n                for F in range(1, 10):\n                    if A == C or A == E or A == F or C == E or C == F or E == F or A == 2 or C == 2 or E == 2 or F == 2:\n                        continue\n\n                    ABCDEF = A * 100000 + 2 * 10000 + C * 1000 + 0 * 100 + E * 10 + F\n                    EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + C * 10 + 0\n\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return E * 1000 + F * 100 + A * 10 + C\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    angel, belle = symbols('angel belle')\n    \n    # Angel had 5/6 as many sweet wrappers as Belle\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, 0.75 * belle)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n    \n    # We only need the number of sweet wrappers Belle had\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # equation for the relationship six years ago\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    # equation for the sum of current ages\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of children and y as the original amount of money\n    x, y = symbols('x y')\n    \n    # If there was 20p more, there would be enough for each child to receive 70p\n    equation1 = Eq(y + 20, 70 * x)\n    \n    # If each child were to receive 60p, then 2.10 pounds would be left over\n    equation2 = Eq(y - 60 * x, 2.10 * 100)  # converting 2.10 pounds to pence\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remittance = salary * 0.20\n    bank_charge = remittance * 0.005\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 for permutations of vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n\n    ans = account_balance + payment_received\n\n    return ans\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for num in range(10, 10000):\n        if int(str(9) + str(num)[:-1]) == 4 * num:\n            return num\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "from math import factorial\n\ndef solution():\n    # There are 5 students excluding Eddie and Avril\n    others = 5\n    # Eddie is fixed on the left, and Avril can either be on Eddie's right (1 way)\n    eddie_and_avril = 1\n    \n    # The rest of the students can be in any order, so use factorial for permutations\n    permutations_of_others = factorial(others)\n    \n    # Use the principle of multiplication to find the total number of ways\n    total_ways = eddie_and_avril * permutations_of_others\n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Total gloves for each color\n    blue_gloves = 1 + 3  # left-hand + right-hand\n    green_gloves = 2 + 4  # left-hand + right-hand\n\n    # Taking one more than there are colors ensures at least one pair\n    minimum_gloves_needed = max(blue_gloves, green_gloves) + 1\n\n    return minimum_gloves_needed\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"2nd March\", \"%dth %B\")\n    end_date = datetime.strptime(\"15th April\", \"%dth %B\")\n\n    # Account for the correct year, assuming non-leap year for simplicity\n    # (as no year provided, we assume a common year)\n    start_date = start_date.replace(year=2023)\n    end_date = end_date.replace(year=2023)\n\n    difference = end_date - start_date\n\n    return difference.days + 1  # Adding one to include the start date\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    base_cost = 200\n    increase_percentage = 45\n\n    increased_cost = base_cost * (1 + increase_percentage / 100)\n    \n    return increased_cost\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    known_sum = sum(known_numbers)\n    total_numbers = 8\n    target_mean = 6\n    \n    total_sum = target_mean * total_numbers\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # circumference of the garden\n    circumference = 300\n    \n    # first interval at every 3m\n    first_interval = 3\n    \n    # total holes dug after first interval\n    total_holes_first = 30\n    \n    # remaining distance after digging 30 holes with 3m interval\n    remaining_distance = circumference - (first_interval * total_holes_first)\n    \n    # new interval at every 5m\n    new_interval = 5\n    \n    # Calculate how many more holes can be dug with the new 5m interval\n    additional_holes = remaining_distance // new_interval\n    \n    # if the remaining distance is not divisible evenly by the new interval,\n    # one more hole is needed for the last tree\n    if remaining_distance % new_interval != 0:\n        additional_holes += 1\n\n    return additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Number of ways to reach the 5th step (1 or 2 steps at a time)\n    # It is similar to Fibonacci series problem, where the next number is the sum\n    # of two preceding ones. So the possible combinations to reach step 5 are:\n    # 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1, 1+2+2, 2+1+2, 2+2+1\n    ways_to_5 = 1 + 4 + 3 + 3 + 3 + 2 + 2 + 2 \n\n    # Number of ways to reach the 10th step from the 5th step\n    # Since Nelson is stepping on the 5th step, we now consider ways to climb\n    # the remaining 5 steps (from 5th to 10th), similar to finding ways to reach\n    # the 5th step\n    ways_from_5_to_10 = ways_to_5\n\n    # Total number of ways to climb 10 steps is the product of the number of ways\n    # to reach the 5th step and the number of ways to climb from 5th to 10th\n    total_ways = ways_to_5 * ways_from_5_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of sweets for Rachel and Alice\n    rachel, alice = symbols('rachel alice')\n    \n    # Equation1: If Rachel gives Alice 10 pieces of sweet, then they have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Equation2: If they both eat 8 pieces of sweet, Rachel has 3 times as many sweets left over as Alice\n    equation2 = Eq((rachel - 8) * 3, alice - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of pieces of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    x = 1\n    while True:\n        if x % 3 == 1 and x % 4 == 3 and x % 5 == 4:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Brackets can only be placed between operators and not between numbers and operators directly.\n    # So the options for bracket placement would be around addition and subtraction.\n    # Since multiplication has a higher precedence and thus pairs well with addition or subtraction, we prioritize it.\n    # To maximize the result, we try to maximize the result of multiplications.\n    # Hence, one pair of brackets should be with the multiplication \n    # and the other pair either at the start or end to include as many addition operations as possible.\n\n    # The initial expression is: 15+5*5+15-6+7 without brackets\n\n    # Option 1: (15+5)*(5+15)-6+7\n    option1 = (15+5)*(5+15)-6+7\n\n    # Option 2: 15+(5*(5+15)-6)+7\n    option2 = 15+(5*(5+15)-6)+7\n\n    # Option 3: 15+5*(5+(15-6+7))\n    option3 = 15+5*(5+(15-6+7))\n\n    # Option 4: ((15+5)*5+15-6)+7\n    option4 = ((15+5)*5+15-6)+7\n\n    # Now we find the largest result\n    max_result = max(option1, option2, option3, option4)\n    return max_result\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits_per_stage = [9, 90 * 2, 900 * 3]\n    stage = 1\n    page_count = 0\n\n    while total_digits > 0:\n        if total_digits > digits_per_stage[stage - 1]:\n            total_digits -= digits_per_stage[stage - 1]\n            page_count += 10 ** (stage - 1) * 9\n            stage += 1\n        else:\n            break\n\n    if stage == 1:\n        pages_with_remainder = total_digits // stage\n    else:\n        pages_with_remainder = total_digits // stage + 10 ** (stage - 1) - 1\n\n    if total_digits % stage != 0:\n        pages_with_remainder += 1\n\n    return page_count + pages_with_remainder\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    desired_average_billy = 80 + 10\n\n    # Billy's total after 5 assignments to achieve the new average\n    new_billy_total = desired_average_billy * 5\n\n    # Score needed on the fifth assignment\n    score_needed = new_billy_total - billy_total\n\n    return score_needed\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes_needed = (total_length + pipe_length - 1) // pipe_length\n\n    return num_pipes_needed\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if i + (1000 - i) == 1000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    d = 44 - 39  # common difference\n    a_n = 39 - (6 * d)  # computing the first term using a_n formula a_n = a_1 + (n-1)*d\n\n    a_100 = a_n + (100 - 1) * d  # computing the 100th term using the nth term formula\n\n    return a_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(1260)\n    m = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_when_div_by_4 = 3\n    remainder_when_div_by_7 = 3\n\n    # Iterate until we find a number that leaves a remainder of 3\n    # when divided by 4 or 7\n    number_of_cards = 0\n    while True:\n        if (number_of_cards % 4 == remainder_when_div_by_4) and \\\n           (number_of_cards % 7 == remainder_when_div_by_7):\n            break\n        number_of_cards += 1\n\n    # Find the remainder when that number is divided by 28\n    remainder_when_div_by_28 = number_of_cards % 28\n\n    return remainder_when_div_by_28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11 # Since 8 and 11 are coprime, their LCM is their product\n    for num in range(10, 100): # Two-digit numbers range from 10 to 99\n        if num % 8 == 6 and num % 11 == 6:\n            return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Given that the base is 9, we only need to consider the pattern of the ones digit in the powers of 9.\n    # 9^1 = 9 (ones digit is 9)\n    # 9^2 = 81 (ones digit is 1)\n    # 9^3 = 729 (ones digit is 9)\n    # 9^4 = 6561 (ones digit is 1)\n    # The pattern repeats every 2 powers.\n    \n    # Since 99 is odd, it follows the pattern of 9^1 which has a ones digit of 9.\n    return 9\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity)  # Ceiling division\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Step 5: Reverse subtracting 50\n    \n    # Step 4: Reverse adding the day of his birth twice\n    # We create a loop because we don't know the birthday yet, it's what we're trying to find\n    for day in range(1, 32): # Assuming day of birth to be between 1 and 31 inclusive\n        temp_result = result - (day * 2)\n        # Step 3: Reverse multiplying the result by 50\n        if temp_result % 50 == 0:\n            temp_result //= 50\n            # Step 2: Reverse adding 1 to the result\n            temp_result -= 1\n            # Step 1: Reverse multiplying the month by 4\n            if temp_result % 4 == 0:\n                month = temp_result // 4\n                # Assuming a valid month is between 1 and 12 inclusive\n                if 1 <= month <= 12:\n                    return (month, day)\n    return None\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n\n    return stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    \n    percent_concentration = (sugar / total_mixture) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Considering the 4 pupils who insist on standing together as one unit,\n    # we now have 5 units to arrange (the group of 4 pupils + the other 4 individual pupils).\n    units_to_arrange = factorial(5)\n    \n    # There are also 4! ways to arrange the 4 pupils within their group.\n    arrangements_within_group = factorial(4)\n    \n    # Total arrangements is the product of arranging the units and \n    # arranging the pupils within the insisted group.\n    total_arrangements = units_to_arrange * arrangements_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # As the numbers are consecutive, let's call them x, x+1, x+2\n    # Their sum is x + (x+1) + (x+2) = 60\n    # Simplifying, we get 3x + 3 = 60\n    # Thus, 3x = 57\n    # And x = 57 / 3\n    x = 57 // 3\n\n    # The largest number is x+2\n    largest_number = x + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price = 8.70\n    beef_price = 9.40\n    \n    lamb_kg = 7\n    beef_kg = 30\n    \n    total_cost = (lamb_price * lamb_kg) + (beef_price * beef_kg)\n    \n    return total_cost\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g be the number of gold medals, s be the number of silver medals,\n    # then we have 5g + 4s = 331 and g + s = 80\n\n    # 5g + 4s = 331\n    # g + s = 80 -> g = 80 - s\n    # Substitute g in the first equation:\n    # 5(80 - s) + 4s = 331\n    # 400 - 5s + 4s = 331\n    # -5s + 4s = 331 - 400\n    # -s = -69\n    # s = 69\n\n    # Substitute s back to g + s = 80\n    # g = 80 - 69\n    g = 80 - 69\n\n    return g\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the other five ponies.\n    x = symbols('x')\n\n    # Initially, the average value per pony in the small stable is (x + 250000) / 3\n    # In the large stable, it is x / 3.\n\n    # After Rein Beau moved to the large stable, the average value in the small stable becomes x / 3,\n    # And the average value in the large stable becomes (x + 250000) / 3.\n\n    # According to the problem, after moving Rein Beau, each average increases by £10,000.\n    equation = Eq((x + 250000) / 3 - x / 3, 10000)\n\n    # Solving the equation for x.\n    total_value_of_ponies = solve(equation, x)[0]\n\n    # Adding value of Rein Beau to find the total value of all six ponies.\n    total_value = total_value_of_ponies + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rate of work done by the master per day as m, and by an apprentice as a.\n    m, a = symbols('m a')\n\n    # First equation comes from 1 master and 3 apprentices working for 4 days to complete 1 task\n    eq1 = Eq(m + 3*a, 1/4)\n\n    # Second equation comes from 2 masters and 1 apprentice working for 3 days to complete 1 task\n    eq2 = Eq(2*m + a, 1/3)\n\n    # Solve the system of equations\n    rates = solve((eq1, eq2), (m, a))\n\n    # Find the time for 1 apprentice to complete the task by inverting the rate\n    apprentice_time = 1 / rates[a]\n\n    return apprentice_time\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_spectators = symbols('total_spectators')\n    children = (1/3) * total_spectators\n    remainder = total_spectators - children\n    men = (5/8) * remainder\n    women = 80\n\n    equation = Eq(total_spectators, children + men + women)\n\n    solutions = solve(equation, total_spectators)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Assuming ★ is a binary operation with property f(a, b) such that:\n    # if a < b: a ★ b = b\n    # if a >= b: a ★ b = a + b\n    \n    def star_operation(a, b):\n        if a < b:\n            return b\n        else:\n            return a + b\n\n    ans = star_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Given information\n    elephant_left_to_right = 10\n    rabbit_right_to_left = 9\n    dolls_between = 5\n    \n    # Total number of dolls is sum of:\n    # - the position of the elephant from the left (minus 1 because the elephant itself is not counted)\n    # - the number of dolls between the elephant and the rabbit\n    # - the position of the rabbit from the right\n    total_dolls = (elephant_left_to_right - 1) + dolls_between + rabbit_right_to_left\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    inner_brackets = (11 / 52) / (2 + 3 / 4) * (4.3 - 1.8)\n    ans = 0.4 * inner_brackets * 26\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more = 32\n    total = 0\n    for i in range(1, 100, 2):  # Starting from 1 and increasing by 2 for each layer (boys on odd, girls on even)\n        boys = (i * 4 - 4) if i != 1 else 1  # Boys on current layer\n        girls = max((i - 2) * 4, 0)  # Girls on previous layer\n        if boys - girls == boys_more:  # Check if exactly 32 more boys than girls\n            total_layers = (i - 1) // 2 + 1  # Total number of layers (including boys and girls)\n            total_students = total_layers**2  # Total students is square of total layers\n            return total_students\n    return total\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61)) # 61 is exclusive\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    a10 = 23\n    a15 = 38\n    n = 102\n    \n    # common difference d\n    d = (a15 - a10) // (15 - 10)\n    \n    # a1, the first term of the sequence\n    a1 = a10 - d * (10 - 1)\n    \n    # an, the nth term of the sequence\n    an = a1 + d * (n - 1)\n    \n    return an\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n\n    non_english_books = total_books - english_books\n    comics = non_english_books // 3\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return total_liters\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = (accurate_shots * score_per_accurate_shot) + (missed_shots * 0)\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count_zeros = 0\n    for i in range(1, 201):\n        count_zeros += str(i).count('0')\n    return count_zeros\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    from fractions import Fraction\n\n    ans = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25) + (2 - Fraction(2, 3)) / Fraction(8, 3)\n    return ans\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses and d be the original number of daisies\n    r, d = symbols('r d')\n    \n    # Let m be the number of months and x be the number of roses and daisies added each month\n    m, x = symbols('m x')\n    \n    # Given equations:\n    # r + d = 300          (Total number of flowers originally)\n    # r + m*x = 280        (Total number of roses after a few months)\n    # d + m*x = 180        (Total number of daisies after a few months)\n    \n    # Since r + d = 300, we can express d as 300 - r\n    d_expr = 300 - r\n    \n    # Setup the system of equations\n    equation1 = Eq(r + d, 300)\n    equation2 = Eq(r + m*x, 280)\n    equation3 = Eq(300 - r + m*x, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, m, x))\n    \n    # We need to find r, the original number of roses in the park\n    return solutions[r]\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8:\n                count += 1\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 8:\n                    count += 1\n                for x4 in range(1, 8):\n                    if x1 + x2 + x3 + x4 == 8:\n                        count += 1\n                    for x5 in range(1, 8):\n                        if x1 + x2 + x3 + x4 + x5 == 8:\n                            count += 1\n                        for x6 in range(1, 8):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                count += 1\n                            for x7 in range(1, 8):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                    count += 1\n    # Divide by 2 to account for the different order of the numbers\n    # Since we are looking for combinations and order does not matter\n    return count // 2\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    def distribute(min_apples, children, remaining_apples):\n        if children == 1:\n            # Base case: only one child left, so he gets all the remaining apples\n            return [[remaining_apples]]\n        else:\n            distributions = []\n            # Start from `min_apples` to ensure each child gets a different amount\n            # The new child cannot get more apples than the remaining divided by the remaining children to avoid repetition\n            for apples in range(min_apples, remaining_apples - children + 2):\n                # Recursively distribute the remaining apples (remaining_apples - apples) to (children - 1)\n                for next_distribution in distribute(apples + 1, children - 1, remaining_apples - apples):\n                    distributions.append([apples] + next_distribution)\n            return distributions \n            \n    all_distributions = distribute(1, 8, 50)\n    \n    # Find the minimum apples for the child who gets the most\n    min_max_apples = min(max(distribution) for distribution in all_distributions)\n    return min_max_apples\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n\n    cost_per_kg = total_cost / total_kg\n\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    \n    # Equation representing the mass of 3 apples and 5 oranges\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    \n    # Equation representing the mass of 3 apples and 7 oranges\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n    \n    return duration\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    men_with_bow_ties = 18\n    men_with_spectacles = 23\n    \n    # Men that must at least be wearing either bow ties or spectacles, or both\n    men_with_either_or_both = men_with_bow_ties + men_with_spectacles\n    \n    # The maximum number of men that do not wear bow ties nor spectacles\n    # If men_with_either_or_both exceeds total_men, then the excess represents the double-counted men (who wear both)\n    max_men_without_either = total_men - max(men_with_either_or_both - total_men, 0)\n    \n    return max_men_without_either\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    twenty_percent = 0.20 * base_amount\n    fifty_percent_of_twenty = 0.50 * twenty_percent\n\n    return fifty_percent_of_twenty\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    total_apples = 19\n    num_children = 5\n    # Start with the case where the distribution is as even as possible\n    apples = sorted(range(1, num_children + 1), reverse=True)\n    remaining_apples = total_apples - sum(apples)\n    \n    # Distribute remaining apples starting from the child with the most\n    for i in range(remaining_apples):\n        apples[i % num_children] += 1\n    \n    # The largest number of apples is the first element after sorting in descending order\n    max_apples = sorted(apples, reverse=True)[0]\n    return max_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Combine Ali and Bala as a single unit, since they must stand together\n    # Now we have 4 units to arrange: (Ali & Bala), Charles, Dan, Ella\n    \n    # Dan must stand at the furthest left, so we have 3 spaces for the other 3 units\n    # The possible arrangements for the remaining units are factorial of the number of units\n    arrangements_for_remaining_units = factorial(3)\n\n    # Ali and Bala can arrange themselves in 2 different ways since they are 2 distinct people\n    arrangements_for_ali_and_bala = factorial(2)\n\n    # Total arrangements are the product of the possible arrangements for the units and\n    # the possible arrangements for Ali and Bala within their unit\n    total_arrangements = arrangements_for_remaining_units * arrangements_for_ali_and_bala\n\n    return total_arrangements\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n\n    # Pages 1-9: 9 pages with 1 digit each\n    total_digits += 1 * 9\n    \n    # Pages 10-99: 90 pages with 2 digits each\n    total_digits += 2 * 90\n    \n    # Pages 100-140: 41 pages with 3 digits each\n    total_digits += 3 * 41\n    \n    return total_digits\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # First, we find the direct trade ratio between fishes and rabbits\n    fishes_per_rabbit = 3 / 2\n\n    # Then we find the direct trade ratio between rabbits and packs of wheat\n    rabbits_per_pack_of_wheat = 3 / 4\n\n    # We combine both ratios to find the fish per pack of wheat ratio\n    fishes_per_pack_of_wheat = fishes_per_rabbit * rabbits_per_pack_of_wheat\n\n    # Since we want to find out how many fishes for 8 packs of wheat\n    fishes_for_8_packs_of_wheat = fishes_per_pack_of_wheat * 8\n\n    return fishes_for_8_packs_of_wheat\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # We use brute force to check all possible two 2-digit numbers\n    for num1 in range(10, 100):\n        for num2 in range(10, 100):\n            if ((num1 % 10)*10 + num1 // 10) - ((num2 % 10)*10 + num2 // 10) == 36:\n                correct_diff = num1 - num2\n                return correct_diff\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    average = total_students / number_of_classes\n    return average\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    red = 15\n    white = 9\n    yellow = 6\n\n    # Worst case scenario: draw all balls of one color and one more ball from the second color.\n    # Then draw one more ball which is guaranteed to be of the third color.\n    max_single_color_draws = max(red, white, yellow)\n    \n    # Need to draw one ball more than all balls of one colour to ensure we get at least 2 different colours.\n    draws_for_two_colors = max_single_color_draws + 1\n    \n    # One more draw will ensure the third color.\n    draws_for_three_colors = draws_for_two_colors + 1\n    \n    return draws_for_three_colors\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    number_of_permutations = len(list(permutations(digits, 3)))\n    return number_of_permutations\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_part_tax = 0.06 * 50000\n    second_part_tax = (0.06 + T / 100) * (120000 - 50000)\n    \n    total_tax = Eq(first_part_tax + second_part_tax, 10000)\n    \n    T_value = solve(total_tax, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    # Gifts that Richard and Kevin are interested in\n    richard_gifts = {'toy car', 'puzzle'}\n    kevin_gifts = {'toy car', 'calculator'}\n    \n    # Total number of gifts excluding the common interest\n    remaining_gifts = 7 - len(richard_gifts.union(kevin_gifts))\n    \n    # Total permutations of the remaining gifts among the other children\n    permutations_of_remaining = len(list(permutations(range(remaining_gifts), remaining_gifts)))\n    \n    # Cases where Richard gets the toy car\n    richard_gets_toy_car = permutations_of_remaining\n    \n    # Cases where Kevin gets the toy car\n    kevin_gets_toy_car = permutations_of_remaining\n    \n    # Cases where neither gets the toy car (both get their second choice)\n    neither_gets_toy_car = permutations_of_remaining\n    \n    # Since each child gets only one present, we sum up the cases\n    # Subtracting 1 because there's an overlap where both Richard and Kevin want the toy car\n    return richard_gets_toy_car + kevin_gets_toy_car + neither_gets_toy_car - 1\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    # Total distance traveled for the entire train to be in the tunnel is the sum \n    # of the train and tunnel length.\n    total_distance = train_length + tunnel_length\n\n    # Time is distance divided by speed.\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    # Let the weight of Jessie be x grams\n    # Therefore, the weight of Buzz will be 3x grams\n    # Given that Buzz is 450g heavier than Jessie, we can write the following equation\n    # 3x = x + 450\n    \n    # Solving for x gives us the weight of Jessie\n    x = 450 / 2\n    \n    # Now, we can find the weight of Buzz by multiplying Jessie's weight by 3\n    buzz_weight = 3 * x\n    \n    return buzz_weight\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # To minimize the difference, we want one number to be as low as possible and the other to be as high as possible.\n    # First, assign the smallest digit (0) to the second highest place of the smaller number to avoid leading zero\n    # Next, assign the remaining smallest digits to the remaining places of the smaller number\n    # Assign the largest digits to the higher places of the larger number\n    # Example: Smaller number 10234, larger number 98765\n\n    # All digits from 0 to 9\n    digits = sorted(range(10))\n\n    # Smaller number - we're choosing 10234 by first taking '0' for the second place and then taking the next 4 smallest digits\n    smaller_number = digits[1] * 10000 + digits[0] * 1000 + digits[2] * 100 + digits[3] * 10 + digits[4]\n\n    # Larger number - the remaining digits in reverse order\n    larger_number = digits[9] * 10000 + digits[8] * 1000 + digits[7] * 100 + digits[6] * 10 + digits[5]\n\n    # Calculate the difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # Cost in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    \n    # Convert £1 to pence and calculate the change\n    total_paid = 100  # £1 is 100 pence\n    change = total_paid - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all the numbers in the sequence are prime\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.80)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n    \n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    time = 10  # hours\n\n    # Jack and Rose meet after 10 hours.\n    # Distance covered by Jack = Jack's speed * time\n    jack_distance = jack_speed * time\n    # Distance covered by Rose = Rose's speed * time\n    rose_distance = rose_speed * time\n    \n    # The distance between Town A and Town B is the difference in distances\n    # covered by Jack and Rose.\n    distance_between_towns = jack_distance - rose_distance\n\n    return distance_between_towns\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = 0\n    for i in range(2, 2021, 4):\n        ans += (i + 2) ** 2 - i ** 2\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_13 = 5000 // (7 * 13)\n    \n    ans = count_7 + count_13 - count_7_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    unique_chars = set(word)\n    total_perms = factorial(len(word))\n    for char in unique_chars:\n        total_perms //= factorial(word.count(char))\n\n    # Calculate permutations with S's together \n    grouped_S = \"SSSS\" + word.replace(\"S\", \"\")\n    grouped_perms = factorial(len(grouped_S))\n    for char in set(grouped_S):\n        grouped_perms //= factorial(grouped_S.count(char))\n\n    # Use the principle of inclusion-exclusion\n    ans = total_perms - grouped_perms\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_david_worked = symbols('days_david_worked')\n    days_emma_worked = 14 - days_david_worked\n\n    equation = Eq(days_david_worked/10 + days_emma_worked/18, 1)\n\n    days_david_worked_solution = solve(equation, days_david_worked)\n\n    return 14 - days_david_worked_solution[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    t_shirts_total = 145\n    money_left = 56\n\n    single_t_shirt_price = money_left / (t_shirts_total - t_shirts_bought)\n    initial_money = single_t_shirt_price * t_shirts_total\n\n    return initial_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    total_heights = 132 - 124 + 1  # +1 because the range is inclusive\n    min_class_size = total_heights * 3 + 1  # Pigeonhole principle, worst case 3 of each height plus one more\n    return min_class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    initial_pay = 6.50\n    percentage_increase = 12 / 100\n    new_pay = initial_pay * (1 + percentage_increase)\n    return new_pay\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The average of an evenly spaced set of numbers is the midpoint of the set.\n    # i.e., average = (first_number + last_number) / 2\n    # Given the average is 119 and the total numbers is 14\n    # We convert the average to an even number by subtracting 0.5, ensuring the first and last numbers of the equally spaced set are even\n    # average_even = 119 - 0.5 = 118.5\n    average_even = 119 - 0.5\n\n    # Now we calculate the first (smallest) number of the set\n    # The smallest number is equal to the average minus half of the total spread of the numbers\n    # Spread is (total numbers - 1) * difference between consecutive numbers which is 2 for even numbers\n    # first_number = average_even - (number_count - 1) * difference / 2\n    number_count = 14\n    difference = 2\n    first_number = average_even - (number_count - 1) * difference / 2\n\n    return int(first_number)\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126  # in pence\n    # Let n be the number of each type of coin. We have 2p, 5p coins and each are in equal number.\n    # So, the total amount will be n * 2p + n * 5p = n * (2 + 5)p = n * 7p\n    # We need to find such n that n * 7p = 126p\n    # Hence, n = total_amount / 7\n\n    n = total_amount // 7  # Using integer division because we can't have a fraction of a coin\n    \n    # The total number of coins will be 3 times n because there are three equal groups (2p, 5p)\n    ans = n * 3\n    return ans\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    base = 3\n    exponent = 2009\n    cycle = [3, 9, 7, 1]  # Pattern repeats every 4 powers for the unit digit of 3's powers\n    cycle_length = len(cycle)\n    remainder = exponent % cycle_length\n    ones_digit = cycle[remainder - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel needs 12 minutes to cut a piece of wood into 5 sections.\n    # This means she needs 12 minutes to make 4 cuts.\n    # Therefore, the time per cut is 12 minutes / 4 cuts.\n    time_per_cut = 12 / 4\n\n    # If she needs to cut the piece of wood 5 times,\n    # Then she will need (5 cuts) * (time per cut).\n    time_needed = 5 * time_per_cut\n\n    return time_needed\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2\n    while True:\n        if num % 2 == 0 and num % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n        num += 2  # Increment by 2 to ensure it's even\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_price = 30\n\n    # Since the child ticket price is after a 25% discount, \n    # the original price (adult ticket price) can be found by dividing \n    # by (1 - discount).\n    adult_ticket_price = child_ticket_price / (1 - child_discount)\n\n    senior_discount = 0.20\n    # The senior citizen ticket price can be found by applying a 20% discount\n    # on the adult ticket price.\n    senior_ticket_price = adult_ticket_price * (1 - senior_discount)\n\n    return senior_ticket_price\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be x.\n    girls = 36  # given number of girls\n    fraction_of_boys = 5 / 9\n\n    # Fraction of people who are children is 1 - 2/5 = 3/5\n    fraction_of_children = 1 - (2 / 5)\n    # Fraction of children who are girls is 1 - 5/9 = 4/9.\n    fraction_of_girls_among_children = 1 - fraction_of_boys\n\n    # Since the girls are part of the children (3/5) and they are 4/9 of the children.\n    # So we can set up the equation:\n    # (3/5) * (4/9) * x = 36\n    # Solve for x to find the total number of people at the party\n    x = 36 / (fraction_of_children * fraction_of_girls_among_children)\n\n    return int(x)\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import comb\n\n    # Ways to distribute n books among k kids is equivalent to distributing n + k - 1\n    # books to k kids with each getting at least 1 book because we can treat this as placing\n    # k - 1 dividers among the books. So, it's a combination problem of choosing k - 1 places\n    # from n + k - 1 places.\n    \n    n_books = 20\n    k_kids = 4\n    ans = comb(n_books + k_kids - 1, k_kids - 1)\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    # 3 men take 30 days to build a house\n    men = 3\n    days = 30\n\n    # Total work done is men * days\n    total_work = men * days\n\n    # 2 people working at the same rate\n    workers = 2\n\n    # Calculate how many days they need to finish the total work\n    days_needed = total_work / workers\n\n    return days_needed\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n\n    # Will's age in 8 years will be Will's current age + 8\n    # Will's age 4 years ago was Will's current age - 4\n    # According to Will, his age in 8 years is 4 times what it was 4 years ago\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    # Solve the equation for Will's current age\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # Number of ways to choose one train, one car, and one boat\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the Law of Addition for choosing one from each type of transport \n    num_ways = trains + cars + boats\n\n    return num_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    num_days = total_pages // pages_per_day\n\n    if total_pages % pages_per_day != 0:\n        num_days += 1  # Add an extra day to finish the remaining pages\n\n    return num_days\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    total_books = 30\n    minimum_books_per_kid = 2\n    kids = 5\n    \n    # Distribute the minimum number of books to each kid first\n    total_distributed = kids * minimum_books_per_kid\n    remaining_books = total_books - total_distributed\n    \n    # Use stars and bars combinatorics method to distribute remaining books\n    # + (kids - 1) represents the 'bars' which separates the 'stars' (books)\n    ans = comb(remaining_books + kids - 1, kids - 1)\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n\n    # Convert millilitres to litres\n    return total_soup / 1000\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_either = (like_one_direction + like_the_vamps) - like_both\n    like_neither = total_girls - like_either\n\n    return like_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    # 4 jugs + 5 cups = 85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n\n    # 2 jugs + 2 cups = 40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Define the coins in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    amount = 44  # Susan's exact bus fare in pence\n    \n    # Function to calculate the minimum number of coins for the change\n    def min_coins(amount, coins):\n        num_coins = 0\n        remaining = amount\n        \n        for coin in coins:\n            # While we can still use coin, subtract it from the remaining amount,\n            # and increment the count of coins used.\n            while remaining >= coin:\n                remaining -= coin\n                num_coins += 1\n        \n        return num_coins\n    \n    # Calculate the minimum number of coins needed for a 50p payment:\n    # The most common coin Susan might pay with that requires change is 50p\n    pay_amount = 50  # 50p is the next round amount Susan can use to pay\n    change = pay_amount - amount  # Change to be returned\n    \n    # Get minimum number of coins for change\n    min_change_coins = min_coins(change, coins)\n    \n    # The final minimum number of coins that change hands is the combination of\n    # Susan's payment and the driver's change returned.\n    # Since Susan pays with a 50p coin, that's just 1 coin + change coins.\n    min_total_coins = 1 + min_change_coins\n    \n    return min_total_coins\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    # Define all possible operations\n    operations = ['+', '-', '*', '/']\n    \n    # Generate all possible permutations of operations\n    permutations_of_operations = permutations(operations, len(operations))\n    \n    # Function to calculate the value of the expression based on operations\n    def calculate_expression(ops):\n        expressions = [\n            (1/2).__getattribute__(ops[0])(1/9),\n            (1/3).__getattribute__(ops[1])(1/8),\n            (1/4).__getattribute__(ops[2])(1/7),\n            (1/5).__getattribute__(ops[3])(1/6)\n        ]\n        return expressions\n\n    max_sum = float('-inf')\n    best_expression = None\n    \n    # Iterate through all permutations to calculate the one with maximum sum\n    for ops in permutations_of_operations:\n        expressions = calculate_expression(ops)\n        current_sum = sum(expressions)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_expression = expressions\n            \n    # Sort the expressions to find the second largest\n    best_expression.sort()\n    second_largest = best_expression[-2]  # Get the second largest number\n    \n    # Convert the number to a Fraction to get A and B\n    from fractions import Fraction\n    fraction = Fraction(second_largest).limit_denominator()\n    A, B = fraction.numerator, fraction.denominator\n    \n    return A + B\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    num_chairs_each = 28\n    total_chairs = num_classrooms * num_chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 89)])\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n    pupils_each_room = total_pupils // 2\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n\n    # Set up the inequality\n    inequality = Eq((x + 3) / (2 * x + 5), 0.505)\n\n    # Solve the inequality\n    result = solve(inequality, x)\n\n    # Return the largest integer less than the result\n    ans = int(result[0]) - 1\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_money = 89.65\n    remaining_money = 20.35\n    \n    initial_money = spent_money + remaining_money\n    \n    return initial_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # A right angled triangle in a circle can only occur when the hypotenuse is the diameter of the circle\n    # There are 12 points, so there are 12/2 = 6 diameters possible (since each diameter will be shared by two points)\n    # For each diameter, there are 10 remaining points that can serve as the third vertex to form a right angle\n    # Hence, for each of the 6 diameters, we have 10 possible right angled triangles\n\n    number_of_diameters = 12 // 2\n    points_for_third_vertex = 12 - 2  # Since diameter uses 2 points\n\n    # Total number of triangles is number of diameters time possible points for third vertex\n    total_triangles = number_of_diameters * points_for_third_vertex\n\n    return total_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given terms in the sequence\n    term_10 = 23\n    term_15 = 38\n\n    # Calculate the common difference using the given terms\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # Calculate the 12th term using the 10th term and common difference\n    term_12 = term_10 + common_difference * (12 - 10)\n\n    return term_12\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    s = 0  # Initialize the sum as 0\n    for n in range(8):  # Here, we have 8 fractions to calculate\n        if n == 0:\n            term = 1 / (n + 1)  # The last term as per the given expression\n        else:\n            s_n = n * (n + 1) // 2  # Calculate the nth triangular number\n            term = n / (s_n * (s_n + n))  # Apply the formula for other terms\n        s += term  # Add the term to the sum\n    return s\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a_students = 24\n    class_b_students = 36\n    class_c_students = 42\n\n    # Find the greatest common divisor (GCD) of the three class student numbers\n    gcd_ab = gcd(class_a_students, class_b_students)\n    gcd_abc = gcd(gcd_ab, class_c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    num_children = 200\n    cost_per_day_per_child = 4.36\n    num_days = 5\n\n    total_cost = num_children * cost_per_day_per_child * num_days\n    \n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_for_correct = 5\n    points_lost_otherwise = 3\n    total_points = 76\n\n    # Let the number of correct answers be x\n    for x in range(total_questions + 1):\n        # Number of incorrect answers would be total_questions - x\n        # Equation: points_for_correct * x - points_lost_otherwise * (total_questions - x) = total_points\n        if points_for_correct * x - points_lost_otherwise * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3 / 8\n    weight_in_kg = 16\n    ans = fraction * weight_in_kg\n    return ans\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    \n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.90\n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n    \n    cost_price_value = solve(equation, cost_price)[0]\n\n    return cost_price_value\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solveset, S\n\n    x = symbols('x')\n    eq1 = Eq(abs(x + 1), 2 * x + 5)\n    solutions = solveset(eq1, x, domain=S.Reals)\n    \n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's the first digit\n        for b in range(10):  # b can be from 0 to 9\n            if int(f'{a}{b}') + int(f'{b}{a}') + b == int(f'{a}{a}{b}'):\n                return a + b\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # First part: Arranging four different colored socks\n    ways_for_different_socks = factorial(4)  # 4!\n    \n    # Second part: Arranging two different colored pairs of socks\n    ways_for_pairs = factorial(4) // (factorial(2) ** 2)  # 4! / (2! * 2!)\n    \n    return ways_for_different_socks, ways_for_pairs\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    num_handshakes = (num_people * (num_people - 1)) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    total_sweets = 24\n    sweets_addition = 4\n    sweets_difference = 6\n\n    # The equation representing the total sweets before the addition\n    equation1 = Eq(andre + beth, total_sweets)\n\n    # The equation representing the difference after each received more sweets\n    equation2 = Eq(andre + sweets_addition, beth + sweets_addition + sweets_difference)\n\n    # Solving the equations to get the number of sweets Beth has after getting more sweets\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    beth_sweets_after = solutions[beth] + sweets_addition\n\n    return beth_sweets_after\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum_positive = sum([i for i in range(1, 201, 4)])\n    sum_negative = sum([i for i in range(2, 201, 4)])\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    total_taller_than_190 = 750\n\n    between_180_and_190 = total_taller_than_180 - total_taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "from math import factorial\n\ndef solution():\n    ways_for_Judy = 2  # Judy can stand at either end of the line\n    ways_for_friends = factorial(5)  # The number of ways to arrange 5 people in order\n    total_ways = ways_for_Judy * ways_for_friends\n    return total_ways\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea should leave Ben with a multiple of 4 apples after her turn,\n    # since whatever number of apples (1, 2, or 3) Ben takes, Anthea can take\n    # the remainder to go back to the next multiple of 4.\n    \n    # To ensure she leaves Ben with a multiple of 4 apples, Anthea should make the\n    # remaining apples after her turn a multiple of 4. 18 is not a multiple of 4,\n    # but 16 is the nearest multiple of 4 below 18.\n    \n    # Anthea should take: 18 - 16 = 2 apples.\n\n    apples_to_take = 18 % 4\n    if apples_to_take == 0:\n        apples_to_take = 2  # Usually, we take 1 but since if we take 1 Ben can use the same strategy, so we take 2 here\n\n    return apples_to_take\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return round(cost_for_five_bars, 2)\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtakes = 5\n    final_position = 2\n    num_cars = overtakes + final_position\n    return num_cars\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    \n    # Equation 1: Andre and Beth have a total of 24 sweets\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation 2: After receiving 4 more sweets, Andre has 6 sweets more than Beth\n    equation2 = Eq(andre + 4, beth + 6 + 4)\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # Beth's sweets after receiving the 4 sweets\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Let x be the number we're looking for\n    # According to the problem, if we take away 6 from x and then divide by 12, the result is 2\n    # We can represent this with the following equation: (x - 6) / 12 = 2\n    # Solving for x gives us x = 2 * 12 + 6\n    x = 2 * 12 + 6\n    return x\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Leo must leave a multiple of 3 apples to Mia to ensure that however Mia decides (taking 1 or 2 apples)\n    # Leo can always adjust his move to keep the number of apples in a multiple of 3 after his turn\n    # This means if Leo picks an amount in the first turn that leaves a multiple of 3,\n    # he can always win by maintaining this strategy\n    \n    # Going backwards from 14, the nearest multiple of 3 is 12 (14 - 2 = 12)\n    # Therefore, Leo needs to take 2 apples to ensure his victory\n\n    return 2\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Calculate the sum of the four numbers using the initial average\n    sum_of_four = 4 * 130\n    \n    # Calculate the sum of the remaining three numbers using the new average\n    sum_of_three = 3 * 110\n    \n    # The number removed is the difference between the two sums\n    number_removed = sum_of_four - sum_of_three\n    \n    return number_removed\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for all time values\n    light1_cycle = 1 * 60  # 1 minute in seconds\n    light2_cycle = 1.5 * 60  # 1.5 minutes in seconds\n    light3_min_cycle = 30  # 30 seconds minimum for light 3\n\n    # Find least common multiple for the first two lights (in seconds)\n    lcm_first_two = lcm(light1_cycle, light2_cycle)\n\n    # The third light should at least take 30 seconds, so we need to find\n    # the smallest multiple of lcm_first_two that is greater than or equal\n    # to light3_min_cycle. Since we need the lights to turn green every 9 minutes,\n    # we also need to ensure that the cycle does not exceed 9 minutes.\n    max_cycle_time = 9 * 60  # 9 minutes in seconds\n\n    # Starting from the minimum cycle time for the third light, find the first\n    # multiple of lcm_first_two that is greater than or equal to 30 seconds\n    # and less than or equal to 9 minutes.\n    for cycle_time in range(light3_min_cycle, max_cycle_time + 1):\n        if cycle_time % lcm_first_two == 0:\n            return cycle_time  # Return the shortest valid cycle time for light 3 in seconds\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the minutes the younger sister spent on maths\n    # Let e be the minutes the younger sister spent on English\n    m, e = symbols('m e')\n\n    # Elder sister spent m + 10 minutes on maths\n    # Younger sister spent e + 12 minutes on maths\n    # Elder sister spent e - 4 minutes on English\n    # Total time elder sister spent is 88 minutes\n\n    # Equation for younger sister: e + m + 12 = total time spent by younger sister\n    # Equation for elder sister: (m + 10) + (e - 4) = 88\n    \n    equations = (Eq(m + 10 + e - 4, 88), Eq(e, m + 12))\n    \n    solutions = solve(equations, (m, e))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be x and the value of one gold ring be y.\n    # We have the relationship: 12x = (3/4) * 6y\n    # Simplify it to: 12x = (1/2) * 6y, which implies 2x = y\n    # We are looking for how many silver spoons have the same value as 3 gold rings.\n    # This can be represented by the equation: n * x = 3 * y, where n is the number of silver spoons we are looking for.\n    # By substituting y with 2x (from our initial equation), we get: n * x = 3 * 2x\n    # Simplify this to: n * x = 6x, which gives us n = 6.\n    \n    # Therefore, 6 silver spoons have the same value as 3 gold rings.\n    return 6\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Initial count of boys and girls\n    boys = 0\n    girls = 0\n    \n    # Start with a square of side 1 (which contains only boys) and build up\n    side_length = 1\n    \n    while True:\n        # Each layer is a square. Odd layers (1, 3, ...) are boys, even layers (2, 4, ...) are girls.\n        if side_length % 2 == 1:\n            boys += side_length * side_length\n        else:\n            girls += side_length * side_length\n        \n        # The difference is provided in the problem\n        if boys - girls == 55:\n            total_students = boys + girls\n            return total_students\n        \n        # Increase the side length by 2 to account for the next layer of boys and girls\n        side_length += 2\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, m = symbols('p m')\n    equation1 = Eq(3*p + 2*m, 13)\n    equation2 = Eq(2*p + 3*m, 12)\n\n    solutions = solve((equation1, equation2), (p, m))\n\n    total_cost = 7*solutions[p] + 7*solutions[m]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    brush_cost = 1\n\n    # Assume all items are paintbrushes\n    cost_if_all_brushes = total_items * brush_cost\n    remaining_cost = total_cost - cost_if_all_brushes\n\n    # Extra cost per item if it's a marker, instead of a paintbrush\n    extra_cost_per_marker = marker_cost - brush_cost\n\n    # Number of markers to account for the remaining cost\n    num_markers = remaining_cost // extra_cost_per_marker\n\n    return num_markers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of female teachers\n    x = symbols('x')\n    \n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # Average weight of female teachers times number of female teachers (x)\n    total_female_weight = 60 * x\n    \n    # Total weight of all teachers (male + female)\n    total_weight = total_male_weight + total_female_weight\n    \n    # Average weight of all teachers times total number of teachers (3 males + x females)\n    total_average_weight = 65 * (3 + x)\n    \n    # Setting up the equation\n    equation = Eq(total_weight, total_average_weight)\n    \n    # Solving for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from the front and 7th from the back, so there are 4 students in front, \n    # Cora herself, and 6 students behind her, thus 5 + 6 rows.\n    rows = 5 + 6\n    \n    # Cora is 2nd from the left and 4th from the right, so there is 1 student to her left, \n    # Cora herself, and 3 students to her right, thus 2 + 3 columns.\n    columns = 2 + 3\n    \n    # The total number of students is the product of the number of rows and columns.\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55 to find the primes\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n    \n    # Combine the factors and update the power\n    all_factors = {}\n    for prime, power in factors_33.items():\n        all_factors[prime] = all_factors.get(prime, 0) + power\n    for prime, power in factors_55.items():\n        all_factors[prime] = all_factors.get(prime, 0) + power\n    \n    # For a number to be a square, all prime factors must have even powers\n    m = 1\n    for prime, power in all_factors.items():\n        if power % 2 != 0:\n            m *= prime\n    \n    return m\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # If each plate has at least 2 pieces, we have already placed 6 pieces (2 on each plate),\n    # leaving us with 2 pieces to freely distribute among the 3 plates.\n    # We can use the \"stars and bars\" combinatorial method to calculate the number of distributions.\n    from math import comb\n\n    # We have 2 identical items (remaining candies) to place into 3 different categories (plates),\n    # which equals to comb(n + k - 1, k - 1) where n = 2 (remaining candies) and k = 3 (plates)\n    # comb(2 + 3 - 1, 3 - 1) = comb(4, 2)\n    return comb(4, 2)\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    total_runners = 4  # Star's position is fixed, so we arrange the other 4 teammates\n    ans = factorial(total_runners)  # The number of arrangements is 4!\n    \n    return ans\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(x, y):\n        return (x * y) + (x + y)\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    segments_for_60_minutes = 31\n    time_for_one_cut = 60 / (segments_for_60_minutes - 1)\n    num_segments_needed = 50\n    total_time = time_for_one_cut * (num_segments_needed - 1)\n    return total_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        number += 3*5*7\n\n    return number\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # iterate through all 4-digit integers with increasing digits\n    for i in range(1000, 10000):\n        # convert integer to string to access individual digits\n        s = str(i)\n        # check if digits are increasing from left to right\n        if s[0] < s[1] < s[2] < s[3]:\n            # reverse the string to obtain decreasing digits from left to right\n            reverse_s = s[::-1]\n            # check all permutations for the third integer\n            from itertools import permutations\n            for perm in permutations(s):\n                # convert tuple to string\n                third_s = ''.join(perm)\n                # convert strings to integers to calculate the sum\n                if (i + int(reverse_s) + int(third_s)) == 26352:\n                    # return the smallest integer, which is 'i'\n                    return i\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy, flowers_given = symbols('candy nancy flowers_given')\n\n    initial_candy = 11\n    initial_nancy = 9\n\n    equation1 = Eq(candy, initial_candy - flowers_given)\n    equation2 = Eq(nancy, initial_nancy + flowers_given)\n    equation3 = Eq(nancy, candy + 8)\n\n    solutions = solve((equation1, equation2, equation3), (candy, nancy, flowers_given))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    factorial_total = factorial(total_letters)\n    a_count = 2\n    r_count = 2\n    factorial_a = factorial(a_count)\n    factorial_r = factorial(r_count)\n    ans = factorial_total // (factorial_a * factorial_r)\n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n\n    increased_price = original_price + (original_price * increase_percentage)\n\n    return increased_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60 * 3  # Mum gave 60p for 3 days (Monday, Tuesday, and Wednesday)\n    money_from_dad = 40 * 3  # Dad gave 40p for 3 days (Monday, Tuesday, and Wednesday)\n    total_money = money_from_mum + money_from_dad  # Sum the money from both\n    return total_money  # Return the total amount of money Mike has\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n\n    temperature_change = midday_temp - midnight_temp\n\n    return temperature_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43        # cost of one pen in pence\n    booklet_cost_p = 185   # cost of one booklet in pence, converted to pence (£1.85 = 185p)\n    \n    total_cost_p = 3 * pen_cost_p + 4 * booklet_cost_p  # Total cost in pence\n    amount_given_p = 1000  # Amount given (£10 = 1000p)\n    \n    change_p = amount_given_p - total_cost_p  # Change in pence\n    \n    change_pounds = change_p / 100  # Convert change back to pounds\n    \n    return change_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    \n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Sibel is counted twice\n    \n    return total_people\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St Petersburg (as of my knowledge cutoff in 2023) is approximately 5.4 million\n    population = 5400000\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Looping through all 3-digit numbers\n        # Convert integer to a list of digits\n        digits = [int(d) for d in str(i)]\n        # Check if adjacent digits differ by at least 7\n        if abs(digits[0] - digits[1]) >= 7 and abs(digits[1] - digits[2]) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))  # 10 is a safe number to find at least three primes\n    return primes[2]  # Index 2 gives the third element in the list\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for th in range(5, 10):  # Thousands digit must be between 5 and 9 (inclusive)\n        for hu in range(0, 10):  # Hundreds digit can be between 0 and 9\n            for te in range(0, 10):  # Tens digit can be between 0 and 9\n                for on in range(1, 10):  # Ones digit can be between 1 and 9 (cannot be 0)\n                    if hu == 0 or th % hu == 0:\n                        if te == 0 or th % te == 0:\n                            if on == 0 or th % on == 0:\n                                count += 1\n    return count\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tilde = symbols('tilde')\n\n    equation = Eq((tilde + 7) / 9, 9)\n    solution = solve(equation, tilde)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # The 4th child is opposite the 22nd child, which means that the distance between them\n    # should be half the total number of children in the circle.\n    \n    distance = abs(22 - 4)  # Distance in terms of position between the 4th and 22nd child\n    # The distance between two opposite points in a circle is half of the circumference\n    # Therefore, the total number of children in the circle is distance * 2\n    \n    total_children = distance * 2\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10 # First week\n    common_difference = 4 # The difference between consecutive terms\n    num_weeks = 10 # Number of weeks\n\n    nth_term = first_term + (num_weeks - 1) * common_difference\n    total_coins = (num_weeks * (first_term + nth_term)) // 2\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # From given conditions, create a dictionary to store possible digits for each position\n    possible_digits = {'0': set(), '1': set(), '2': set(), '3': set()}\n\n    # Populate the possible_digits with the negation of the digits in the attempt with all wrong digits (1258)\n    for i, digit in enumerate('1258'):\n        possible_digits[str(i)] = set('0123456789') - set(digit)\n\n    # Define the attempts with two correct digits\n    attempts = ['5648', '3628', '3147', '5629']\n\n    # For each attempt, eliminate the possibilities based on correct and incorrect digits\n    for attempt in attempts:\n        # Create a list to hold indices of correct digits for this attempt\n        correct_indices = []\n        for i, digit in enumerate(attempt):\n            if digit in possible_digits[str(i)]:\n                correct_indices.append(i)\n        \n        # If we have more than two correct indices something is wrong cause we know only two digits are correct in each attempt\n        if len(correct_indices) > 2:\n            return None  # No valid solution exists\n\n        # For every digit position (0 to 3)\n        for i in range(4):\n            # If the digit position is not one of the two correct indices, remove this digit as a possibility from its set\n            if i not in correct_indices:\n                possible_digits[str(i)].discard(attempt[i])\n\n    # By now, possible_digits should hold exactly one digit for each position\n    # Let's construct the final answer\n    ans = ''\n    for i in range(4):\n        if len(possible_digits[str(i)]) != 1:\n            return None  # No valid solution exists\n        ans += possible_digits[str(i)].pop()\n\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the marks of each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given conditions\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, D\n    equation3 = Eq(E, 96)                # Mark of E\n    equation4 = Eq(B, D)                 # B and D have the same score\n    equation5 = Eq(A, E + 1)             # A has the highest mark\n\n    # All marks are above 91, set minimum value constraints\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5) + constraints, (A, B, C, D, E))\n\n    # Get the mark of D\n    return solutions[D]\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n\n    years = symbols('years')\n    equation = Eq(principal * (1 + interest_rate) ** years, final_amount)\n    actual_years = solve(equation, years)\n    \n    if float(actual_years[0]) == 5:\n        return \"She is right\"\n    else:\n        return \"She is wrong\", actual_years[0]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    one_fourth_full = 250\n    three_fourth_full = 350\n    \n    # The difference between three fourths and one fourth is half the mass of marmite.\n    half_full_marmite_mass = three_fourth_full - one_fourth_full\n    \n    # Therefore, the mass of a full jar of marmite is twice the mass of half a jar.\n    full_marmite_mass = 2 * half_full_marmite_mass\n    \n    # The mass when the jar is 3/4 full includes the weight of the empty jar.\n    # Hence, the weight of the empty jar can be calculated by subtracting the weight of full marmite from the weight when the jar is 3/4 full.\n    empty_jar_mass = three_fourth_full - full_marmite_mass\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_l = 13.15\n    bottle_fraction = 1/7\n    bottle_capacity_l = 9.1\n    cup_capacity_ml = 350\n    cups_count = 4\n    ml_to_l = 1e-3\n\n    used_for_bottle_l = bottle_capacity_l * bottle_fraction\n    used_for_cups_l = cups_count * cup_capacity_ml * ml_to_l\n\n    remaining_soda_l = total_soda_l - (used_for_bottle_l + used_for_cups_l)\n\n    return remaining_soda_l\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of father and son\n    father_now, son_now = symbols('father_now son_now')\n    \n    # Equation representing the statement: \"6 years ago, father's age was 5 times the son's age.\"\n    equation1 = Eq(father_now - 6, 5 * (son_now - 6))\n    \n    # Equation representing the statement: \"The sum of their ages is 78 this year.\"\n    equation2 = Eq(father_now + son_now, 78)\n    \n    # Solving the equations for the current ages of father and son\n    solutions = solve((equation1, equation2), (father_now, son_now))\n    \n    # The solution is the father's current age\n    return solutions[father_now]\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -a\n    ans = a + b - a*b\n    return ans\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose wants to ensure victory, she should aim to leave a multiple of 3 marbles after her turn,\n    # as the total number of marbles that can be picked in one round by both players is 3 (1 by Rose and 2 by Kylie, or 2 by Rose and 1 by Kylie).\n    # This ensures that Rose always has the last move.\n    # Starting with 14 marbles, Rose needs to subtract a number such that the remainder is divisible by 3.\n    for first_move in range(1, 3):\n        if (14 - first_move) % 3 == 0:\n            continue\n        else:\n            return first_move\n    return None\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # force constant in N/m\n    A = 0.08  # amplitude in m\n    x = 0.04  # displacement from equilibrium in m\n\n    # Total energy (E) of the oscillator in Joules (using the formula E = 0.5 * k * A^2)\n    E = 0.5 * k * A**2 \n\n    # Maximum speed (v_max) at equilibrium, obtained from total energy and mass (using the formula E = 0.5 * m * v_max^2)\n    v_max = sqrt((2 * E) / m)\n\n    # Speed (v) of the block when it's x meters from equilibrium\n    # Conservation of mechanical energy: Potential energy at x + Kinetic energy at x = Total energy\n    # 0.5 * k * x^2 + 0.5 * m * v^2 = E gives us v = sqrt((2/m) * (E - 0.5 * k * x^2))\n    v = sqrt((2/m) * (E - 0.5 * k * x**2))\n\n    # Returning the total energy and the speed\n    return E, v\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # Convert pounds to pence\n    coin_value = 5\n    num_coins = total_pence // coin_value\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols for Pip and Bud's per-minute running distances\n    pip_per_min, bud_per_min = symbols('pip_per_min bud_per_min')\n    \n    # Total distance run by both in 3 minutes\n    total_distance = 540\n\n    # Each minute Pip runs 20 meters more than Bud\n    equation1 = Eq(pip_per_min, bud_per_min + 20)\n    \n    # Combined distance run by Pip and Bud in 3 minutes is 540 meters\n    equation2 = Eq(3 * pip_per_min + 3 * bud_per_min, total_distance)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (pip_per_min, bud_per_min))\n\n    # Calculate the distance run by Pip in 3 minutes\n    pip_distance = 3 * solution[pip_per_min]\n\n    return pip_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use a and b to represent the original number of coins in box A and B, respectively\n    a, b, c = symbols('a b c')\n    \n    # From the problem, we know that box A contained 4 times as many coins as box B\n    equation1 = Eq(a, 4 * b)\n    \n    # 6% of the coins in box A are transferred to box C\n    equation2 = Eq(c - (a * 0.06), c - 1220)\n    \n    # 20% of the coins in box B are transferred to box C\n    equation3 = Eq(c - (b * 0.20), c - 1220)\n    \n    # Sum of coins in box C is 1220, which is 22% more than the original number\n    equation4 = Eq(c, 1220 / 1.22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c))\n    \n    # We are interested in the value of a, the number of coins in box A originally\n    return solutions[a]\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex(0x2A3 + 0x17B)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average_weight = 65\n    male_teacher_count = 3\n    male_average_weight = 75\n    female_average_weight = 60\n\n    # Calculate the total weight of the male teachers\n    total_male_weight = male_teacher_count * male_average_weight\n\n    # Let 'female_teacher_count' be the number of female teachers.\n    # We can set up the equation:\n    # (total_male_weight + female_teacher_count * female_average_weight) / \n    # (male_teacher_count + female_teacher_count) = total_average_weight\n    \n    # Rearranging the above equation to solve for female_teacher_count gives us:\n    # female_teacher_count = (total_male_weight - male_teacher_count * total_average_weight) /\n    #                        (total_average_weight - female_average_weight)\n    female_teacher_count = (total_male_weight - male_teacher_count * total_average_weight) / (total_average_weight - female_average_weight)\n\n    return int(female_teacher_count)\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2*x + 1), 75)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = 0.25 * 0.30 * 0.40 * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    total_time = 1 + 3 + 4 + 1\n    return total_time\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let the initial number of bottled drinks be x.\n    # Initially, 60% of x are coffee, which means 40% of x are tea.\n    # Let's introduce another variable k to represent the additional bottles of tea.\n    \n    # Finally, 40% of the total number of bottles (x + k) are coffee.\n    # Which means, the coffee still represents 0.6 * x but now this is equal to 40% of the total.\n\n    # Therefore, we can set up an equation:\n    # 0.6 * x = 0.4 * (x + k)\n    \n    # Solving for k in terms of x we get:\n    # k = (0.6 * x - 0.4 * x) / 0.4\n    # k = 0.2 * x / 0.4\n    # k = 0.5 * x\n    \n    # Initially, 40% of x are tea, which is 0.4 * x.\n    # After adding k, the amount of tea becomes 0.4 * x + k which is 0.4 * x + 0.5 * x.\n\n    # Now we calculate the percentage increase in bottles of tea:\n    # (0.4 * x + 0.5 * x) / (0.4 * x) = 1 + 0.5 / 0.4\n    # Percentage increase = (0.5 / 0.4) * 100%\n    percentage_increase = (0.5 / 0.4) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    red_flowers = 5\n    green_flowers = 2\n    white_flowers = 3\n    \n    red_price = 2\n    green_price = 5\n    white_price = 10\n    \n    total_revenue = (red_flowers * red_price) + (green_flowers * green_price) + (white_flowers * white_price)\n    total_flowers = red_flowers + green_flowers + white_flowers\n    \n    average_price_per_flower = total_revenue / total_flowers\n    \n    return average_price_per_flower\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_pence = 60\n    james_money_pounds = 1.10\n    james_money_pence = james_money_pounds * 100  # Convert pounds to pence\n\n    total_money_pence = lewis_money_pence + james_money_pence\n    total_money_pounds = total_money_pence / 100  # Convert back to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13 - x1 + 1):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    tricycles, cars = 0, 24  # Assume all are cars initially, zero tricycles\n    while cars >= 0:\n        total_wheels = cars * 4 + tricycles * 3\n        if total_wheels == 86:\n            return tricycles  # Found the correct number of tricycles\n        cars -= 1  # Hypothesize one less car\n        tricycles += 1  # And one more tricycle\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    # Calculation of the number of derangements (subfactorial) for 6\n    # This is a special case of permutations where no element appears in its original position,\n    # also known as the hat-check problem or derangement problem\n    # The formula is (!n) = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    def subfactorial(n):\n        return int(factorial(n) * sum((-1) ** i / factorial(i) for i in range(n + 1)))\n\n    return subfactorial(6)\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Let x be the number of lemonade bottles sold\n    # Let y be the number of 1000 Plus bottles sold\n    # 4x + 7y = 2012 (total income)\n    # x + y <= 350 (total number of bottles)\n    # We want to minimize y, therefore maximize x\n\n    max_x = 2012 // 4 # Maximum number of lemonade bottles sold if no 1000 Plus sold\n    for x in range(max_x, -1, -1): # Start from max possible x and go down to find min y\n        y = (2012 - 4*x) / 7\n        if y.is_integer() and x + y <= 350: # Check if y is an integer and total bottles constraint met\n            return int(y) # Return minimum possible y\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    blue_pens_initial, red_pens_initial, blue_pens_added = symbols('blue_pens_initial red_pens_initial blue_pens_added')\n\n    # Initial ratio of pens (number of blue pens : number of red pens)\n    equation1 = Eq(blue_pens_initial / red_pens_initial, 3 / 5)\n\n    # Total initial number of pens\n    equation2 = Eq(blue_pens_initial + red_pens_initial, 96)\n\n    # After adding 60 red pens and some blue pens, 40% are blue\n    equation3 = Eq((blue_pens_initial + blue_pens_added) / (96 + 60 + blue_pens_added), 0.4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue_pens_initial, red_pens_initial, blue_pens_added))\n\n    return solutions[blue_pens_added]\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    # Given values\n    mass = 2  # mass (kg)\n    final_velocity = 8  # final velocity (m/s)\n    time = 4  # time (s)\n\n    # Calculating acceleration using final_velocity = initial_velocity + acceleration * time\n    # Since the object is initially stationary, initial_velocity is 0 m/s\n    acceleration = final_velocity / time\n\n    # Calculating force using Newton's second law of motion: force = mass * acceleration\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # The problem asks for the largest number that cannot be expressed\n    # in the form of 3x + 7y, where x and y are non-negative integers.\n    # This is a classic problem of the Frobenius coin problem or the chicken McNugget theorem.\n\n    # Based on the theorem, the largest number that cannot be expressed\n    # as a combination of two coprime numbers a and b (which in this case are 3 and 7) is given by:\n    # (a - 1) * (b - 1) - 1\n    \n    return (3 - 1) * (7 - 1) - 1\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\nfrom math import prod\nfrom sympy import factorint\n\ndef solution():\n    # Create a list of numbers from 1 to 13\n    numbers = list(range(1, 14))\n    # List of primes in the given range since they only have two factors\n    primes = [2, 3, 5, 7, 11, 13]\n    \n    # Iterate through combinations of 9 numbers\n    for combo in combinations(numbers, 9):\n        if all(num in primes for num in combo):\n            continue  # Skip if any of the selected numbers is prime (only 2 factors)\n        \n        # Find which two numbers have a unique number of factors\n        unique_factors_count = []\n        for num in combo:\n            factors = factorint(num)\n            total_factors = prod([exponent + 1 for exponent in factors.values()])\n            unique_factors_count.append(total_factors)\n            \n        if unique_factors_count.count(unique_factors_count[-1]) == 1 and unique_factors_count.count(unique_factors_count[-2]) == 1:\n            # For Alice to know that her number is odd, all even numbers must be visible\n            # For May to know that her number is bigger by 1 than Mark, Mark's number must be visible\n            diff_by_2 = set(range(1, 14, 2)).difference(combo)\n            \n            # Assume Alice's number is larger odd and May's number is smaller odd by 2\n            alice_number = max(diff_by_2)\n            may_number = alice_number - 2\n            possible_mark_number = may_number - 1\n            \n            # Check if Mark's number is one less than May's\n            if possible_mark_number in combo:\n                # Calculate the product of the numbers not picked\n                not_picked = set(numbers).difference(combo)\n                return prod(not_picked)\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_friends = 11\n    journey_distance = 32\n\n    total_cost = cost_per_km * journey_distance\n    cost_per_person = total_cost / total_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers from base 10 to base 7 and then add them\n    num1_base_7 = int(str(45), 7)\n    num2_base_7 = int(str(66), 7)\n    sum_base_10 = num1_base_7 + num2_base_7\n    # Convert the sum back to base 7\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return int(ans)\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # Correct answers are 12 more than three times incorrect answers\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    # Total points (5 points for correct and -2 points for incorrect)\n    equation2 = Eq(5 * correct + (-2) * incorrect, 151)\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Total sum of the matches played by each two students\n    total_matches = 4 + 6 + 2 + 1 + 3 + 5\n\n    # Since each match involves two students, we should divide by 2\n    matches_played_by_F = (total_matches - 5) // 2\n\n    return matches_played_by_F\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Cici's age and Linda's age\n    cici, linda = symbols('cici linda')\n\n    # Equation 1: Linda's age when Cici was born\n    equation1 = Eq(linda - cici, 11)\n\n    # Equation 2: The sum of their ages 4 years later\n    equation2 = Eq((cici + 4) + (linda + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cici, linda))\n\n    # Calculate Linda's age 3 years later\n    linda_age_3_years_later = solutions[linda] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Initialize possible pair sums for consecutive numbers from 1 to 20\n    # The sum of two consecutive numbers from 1 to 20 will be in the range of 3 to 39 \n    # (since 1+2=3 and 19+20=39)\n    possible_sums = [3, 7, 11, 17, 21, 27, 31, 39]\n\n    # Check each possible sum pair to see which numbers can divide N\n    for possible_sum in possible_sums:\n        # Initialize a counter for the number of divisors of N\n        divisor_count = 0\n        \n        # Check the divisibility of N with each number from 1 to 20\n        for i in range(1, 21):\n            # Check if the number is part of the non-divisible consecutive pair\n            if possible_sum - i in range(1, 21):\n                continue\n            \n            # If not, increment the divisor count\n            divisor_count += 1\n\n        # If 18 numbers can divide N, we found the right pair sum\n        if divisor_count == 18:\n            return possible_sum\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    # Equation based on the ratio\n    equation1 = Eq(jamie_anne, (5/3) * natasha)\n\n    # Equation based on the difference of their stamps\n    equation2 = Eq(jamie_anne - natasha, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    # Calculate the total number of stamps\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (first_term + last_term) * num_terms // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    \n    return min_sum\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # distance from home to school and back\n    distance_one_way = 300\n    total_distance = distance_one_way * 2\n\n    # speed uphill and downhill\n    speed_uphill = 10\n    speed_downhill = 30\n\n    # time to travel uphill and downhill\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    # total time for the round trip\n    total_time = time_uphill + time_downhill\n\n    # average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n\n    return bags_needed\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways_for_each_person = 5  # Each person can choose from 5 entrances\n    number_of_people = 4      # There are 4 people\n\n    # Since each person can choose independently from the others, we multiply the number of choices\n    total_ways = ways_for_each_person ** number_of_people\n\n    return total_ways\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples = 226\n    pears = 352\n    oranges = 157\n\n    apples_distributed = apples - 10\n    pears_distributed = pears - 28\n    oranges_distributed = oranges - 13\n\n    # Calculate the greatest common divisor of the distributable fruits\n    gcd_apples_pears = gcd(apples_distributed, pears_distributed)\n    gcd_all = gcd(gcd_apples_pears, oranges_distributed)\n\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n    # There are two cases for Judy to stand: first place or last place\n    number_of_ways = 2\n    # The remaining five friends can stand in any order, which is 5! ways\n    ways_for_friends = factorial(5)\n    # Multiply both cases by the ways friends can stand\n    total_ways = number_of_ways * ways_for_friends\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n    for i in range(1, lcm + 1):\n        if lcm % i == 0 and i != 1 and i != 2:\n            if (number * i) // math.gcd(number, i) == lcm:\n                return i\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    current_number = 1\n\n    while digit_count < 200:\n        digit_count += len(str(current_number))\n        if digit_count < 200:\n            current_number += 1\n        else:\n            break\n\n    return int(str(current_number)[-(digit_count - 200) - 1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_produced = 500 * total_days\n    qualified_points = 5\n    unqualified_penalty = 18\n    total_points = 9931\n\n    # Let x be the number of qualified products\n    # Then total_produced - x will be the number of unqualified products\n    # x * qualified_points - (total_produced - x) * unqualified_penalty = total_points\n\n    x = (total_points + (total_produced * unqualified_penalty)) / (qualified_points + unqualified_penalty)\n    \n    return int(x)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    price = cost + 40\n    discount_price = price * 0.8  # twenty percent off\n    profit = discount_price - cost\n    \n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n    \n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, daughter = symbols('daniel daughter')\n    \n    # Two years ago, Daniel's age was 6 times his daughter's age\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    # Two years from now, Daniel's age will be 4 times his daughter's age\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Return Daniel's age this year\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of roosters and h be the number of hens initially.\n    r, h = symbols('r h')\n    \n    # The number of hens is 6 times that of roosters.\n    equation1 = Eq(h, 6 * r)\n    \n    # Later, the number of roosters and hens increased by 60 each.\n    # As a result, the number of hens is 4 times that of roosters.\n    equation2 = Eq(h + 60, 4 * (r + 60))\n    \n    # Solve the equations.\n    solutions = solve((equation1, equation2), (r, h))\n    \n    # The total number of chickens the farm kept before is hens + roosters.\n    total_chickens_before = solutions[h] + solutions[r]\n    \n    return total_chickens_before\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sequence = list(range(1, 9)) + list(range(7, 0, -1)) + list(range(1, 3))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    # mean of seven numbers\n    mean_seven = 12\n    # total sum of seven numbers\n    total_seven = mean_seven * 7\n    \n    # mean of eight numbers\n    mean_eight = 11\n    # total sum of eight numbers\n    total_eight = mean_eight * 8\n    \n    # eighth number is the difference between the total sum of eight and\n    # the total sum of seven numbers\n    eighth_number = total_eight - total_seven\n    \n    return eighth_number\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the original speeds of April and Baye as a and b respectively.\n    # The total distance between P and Q is 1800m and April meets Baye 800m from Q on her way back.\n    # This means Baye has walked 1800 - 800 = 1000m when April meets him.\n    # April has walked 1800m to Q and then 800m back towards P, so a total of 2600m.\n    # By the time April meets Baye, the ratio of distances covered by April and Baye is 2600 : 1000 or 13 : 5.\n    # Since they started at the same time and meet for the first time after covering these distances,\n    # The ratio of their speeds must also be 13 : 5, because speed = distance / time and the time is the same for both.\n    \n    # After meeting Baye, April continues to P with 4 times her original speed. Hence she covers the\n    # Remaining distance of 1000m at 4 * a.\n    # Since Baye continues at his original speed b, we can set up the following equation:\n    # (Distance April needs to cover) / (4*a) = (Distance Baye needs to cover at his original speed b) / b.\n    # Let's find the distance Baye needs to cover (x): \n    # 1000 / (4*a) = x / b. Since a/b is 13/5, then a = (13/5)*b, we have 1000 / (4*(13/5)*b) = x / b.\n    # Simplifying gives us x = (5/13)*1000/4 = 5000/52.\n    \n    # Calculating the answer:\n    x = 5000 / 52\n    ans = 1800 - x  # Baye's distance from Q when April reaches P again.\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    digit_sequence = \"538462\"\n    position = 2021\n    index = (position - 1) % len(digit_sequence)\n    ans = int(digit_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    # Since the order of addition doesn't matter, we can just add the numbers directly.\n    ans = 375 + 753 + 537 + 357 + 573 + 735\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # All 2-digit palindromic numbers (1-9)(1-9) are symmetric\n    count += 9\n    # All 3-digit palindromic numbers (1-9)(0-9)(1-9) where first and last digits are the same\n    count += 9 * 10\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    # Since the sequence is periodic every 4 numbers, the 100th number is equivalent\n    # to the (100 % 4)th number in the sequence, because the sequence starts at index 1\n    # we subtract 1 to get the corresponding index in the zero-indexed Python list\n    index = (100 % 4) - 1\n    # If the result of modulus is 0, it means the 100th number is the last number in the repeating pattern\n    if index == -1:\n        index = len(sequence) - 1\n    return sequence[index]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for i in range(161, 15*30):\n        if i % 15 == i // 15:\n            ans += i\n    return ans\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n    # Let's assume the total money Bud had is x\n    # She spent (1/3)x on book and (2/5)x on bag, which add up to 132 pounds.\n    # (1/3)x + (2/5)x = 132\n    # To solve for x, we find a common denominator, which is 15\n    # (5/15)x + (6/15)x = 132\n    # (11/15)x = 132\n    # x = (132 * 15) / 11\n    x = (total_cost * 15) / 11\n    return x\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the masses of Parcel A, B, and C.\n    A, B, C = symbols('A B C')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(A, 5 * B)       # The mass of Parcel A is 5 times the mass of Parcel B\n    equation2 = Eq(C, B - 75)      # The mass of Parcel C is 75g less than the mass of Parcel B\n    equation3 = Eq(A + B + C, 835) # The total mass of the three parcels is 835g\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_5 = 105 // 5\n    count_7 = 105 // 7\n    count_5_and_7 = 105 // (5*7)\n    \n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    \n    for i in range(1, 216):\n        digits += len(str(i))\n    \n    return digits\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell needs to make sure to get 5 green beads.\n    # In the worst case, he draws all the beads of other colors first.\n    # So he could draw all blue and white beads before getting to the green ones.\n    blue_beads = 5\n    white_beads = 6\n    # Adding 4 to the sum of blue and white beads because even with 4 green beads,\n    # Darrell is not guaranteed to have 5 green beads.\n    required_beads = blue_beads + white_beads + 4\n    return required_beads\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        num_with_1_at_start = int('1' + str(num))\n        num_with_1_at_end = int(str(num) + '1')\n        if num_with_1_at_start * 3 == num_with_1_at_end:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    # Page numbers from 1 to 9 use 1 digit each\n    pages_1_digit = 9\n\n    # Page numbers from 10 to 81 use 2 digits each\n    pages_2_digits = 81 - 9\n\n    # Calculate total digits used\n    total_digits_used = (pages_1_digit * 1) + (pages_2_digits * 2)\n    \n    return total_digits_used\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    floors_walked = 4 - 1  # John walks from the first floor to the fourth floor, which is 3 floors.\n    time_for_3_floors = 12  # Time taken to walk up 3 floors.\n    \n    total_floors_to_8th = 8 - 1  # If John needs to walk to the eighth floor, he will walk 7 floors.\n    time_for_7_floors = (time_for_3_floors / floors_walked) * total_floors_to_8th  # Calculate the time required for 7 floors.\n    \n    return time_for_7_floors\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for x1 in range(7):\n        for x2 in range(7):\n            for x3 in range(7):\n                if x1 + x2 + x3 == 6:\n                    count += 1\n    ans = count // 6  # since the baskets are identical, we divide the count by the number of baskets factorial\n    return ans\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    def custom_operation(a, b):\n        return 5 * a - 2 * b\n\n    ans = custom_operation(6, 2)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    # Average number of pizzas eaten per month\n    average_pizzas_per_month = 15\n    # Total number of months from March to July\n    total_months = 5\n\n    # Total amount of pizza\n    total_pizzas = average_pizzas_per_month * total_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # original ratio of birds to squirrels\n    ratio_birds = 8\n    ratio_squirrels = 5\n\n    # original total number\n    total_number = ratio_birds + ratio_squirrels  # This value represents the combined total, not the actual number\n\n    # squirrel increase by 20%\n    squirrels_after_increase = ratio_squirrels * 1.20\n\n    # since the total number remains the same, birds_after must be:\n    birds_after = total_number - squirrels_after_increase\n\n    # percentage of birds that flew away\n    birds_flew_away_percentage = ((ratio_birds - birds_after) / ratio_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    count = 0\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define a function for the custom operation based on the pattern seen.\n    def custom_operation(a, b):\n        return (a - 1) + (b - 2)\n\n    # Calculate 9 ◈ 20 using the custom operation.\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3   # Total volume of juice bought\n    remaining_juice = total_juice - 9  # Volume of juice left after drinking 9 liters\n\n    containers_needed = -(-remaining_juice // 5)  # Round up division result to get number of containers needed\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    next_term_position = 5  # As we already have 4 terms, the next is the 5th\n\n    next_term = first_term + (next_term_position - 1) * common_difference\n\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    ans = sum(range(1, 51))\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n    \n    return total_cards_sent\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    # Create a permutation of numbers 1 through 9 since no letter can be 0\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        # Ensure equations are satisfied\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            # Check if sum of A, R, T is greater than the current maximum\n            if A + R + T > max_sum:\n                max_sum = A + R + T\n    return max_sum\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    \n    for A in range(1, 10):  # Loop through possible values of A (1 to 9, because 9/A < 1)\n        if (5/9) < (9/A) < 1:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_on_left = 3\n    members_on_right = 5\n    tanya = 1\n    total_members = members_on_left + members_on_right + tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    total_students = 39\n    \n    # Let's assume b is the number of boys and g is the number of girls.\n    for b in range(total_students + 1):\n        g = total_students - b\n        \n        if b / 4 == g * 2 / 5:\n            ans = b - g\n            # We found the solution, so we can break the loop.\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    time1 = distance1 / speed1\n\n    distance2 = 400\n    speed2 = 5\n    time2 = distance2 / speed2\n\n    distance3 = 800 - (distance1 + distance2)\n    speed3 = 8\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # Total weight of the crates\n    van_capacity = 12      # Max load per van\n    vans_needed = total_weight / van_capacity  # Calculate the number of vans needed\n\n    # Since we can only have whole vans, we need to round up\n    from math import ceil\n    return ceil(vans_needed)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    largest_factor = max(primerange(1000, 10000))\n    \n    while 87878 % largest_factor != 0:\n        largest_factor -= 1\n        while not all(largest_factor % p != 0 for p in primerange(2, int(largest_factor**0.5)+1)):\n            largest_factor -= 1\n    \n    return largest_factor\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        if n < 0 or max_value == 0:\n            return 0\n        with_max = count_partitions(n - max_value, max_value)\n        without_max = count_partitions(n, max_value - 1)\n        return with_max + without_max\n\n    ans = count_partitions(5, 5) - 1  # exclude the number itself (5)\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    # Original situation\n    equation1 = Eq(daniel, patrick)\n    \n    # Daniel gives away 24 stickers\n    daniel_after = daniel - 24\n    \n    # Patrick buys 10 stickers\n    patrick_after = patrick + 10\n    \n    # Patrick has twice as many stickers as Daniel in the end\n    equation2 = Eq(patrick_after, 2 * daniel_after)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n\n    vertical_distance = whale_depth + plane_height\n\n    return vertical_distance\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # Since we need to find the smallest difference,\n    # we should have the highest digit in the lower number placed as left as possible,\n    # and in the higher number, it should be placed as right as possible.\n    \n    # Thus the smallest number should start with 1 and the largest number should end with 9.\n    # And conversely, the smallest number should end with 9 and the largest start with 1.\n    \n    # The smallest number would be 123456789 and the largest 987654321.\n    smallest_num = int(''.join(str(i) for i in range(1, 10)))\n    largest_num = int(''.join(str(i) for i in range(9, 0, -1)))\n    \n    # Calculate the difference\n    difference = largest_num - smallest_num\n    \n    return difference\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples = 2/3 * total_fruits\n    bananas = 1/9 * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n    total_fruits_solution = solve(equation, total_fruits)\n    lemons_solution = lemons.subs(total_fruits, total_fruits_solution[0])\n\n    return lemons_solution\n  \nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed_pupils = 21\n    total_girls = 16\n\n    # Not all the girls are right-handed implies at least one girl is left-handed.\n    # So the maximum possible number of right-handed girls is total_girls - 1\n\n    # The smallest number of girls who are right-handed will be the number of right-handed students minus \n    # the maximum possible number of right-handed boys.\n    # Since we don't have the direct number of boys, we can find it by subtracting total_girls from total_pupils.\n    total_boys = total_pupils - total_girls\n\n    # The maximum number of right-handed boys would be all of them, which is total_boys. So we subtract this number\n    # from the total number of right-handed pupils to get the minimum number of right-handed girls.\n    right_handed_girls_min = right_handed_pupils - total_boys\n\n    return right_handed_girls_min\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    workers_per_day = [i for i in range(1, 10)]\n    skirts_per_day = 6\n    total_skirts = sum([day * skirts_per_day for day in workers_per_day])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    time_for_one_litre = 2  # Time taken for 5 taps to fill 1 litre jug\n    volume_required = 0.5  # Volume required in litres for 500ml\n\n    # Time taken for one tap to fill 1 litre jug\n    time_for_one_tap_one_litre = time_for_one_litre * 5\n\n    # Since the volume required is half of that used to calculate, the time is also half\n    time_for_one_tap_half_litre = time_for_one_tap_one_litre * volume_required\n\n    return time_for_one_tap_half_litre\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n    equation1 = Eq(john - brother, 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = (3 / 5) * visitors\n    remaining = visitors - children\n    men = (1 / 2) * remaining\n    equation = Eq(children - men, 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000 # 2 litres converted to millilitres\n    volume_drank_ml = 350\n    volume_left_ml = total_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n\n    for perm in permutations(digits, 6):\n        num1 = perm[0]*100 + perm[1]*10 + perm[2]\n        num2 = perm[3]*100 + perm[4]*10 + perm[5]\n        max_sum = max(max_sum, num1 + num2)\n\n    return max_sum\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # The grass amount can be considered as daily grass growing rate * number of days\n    # Let's define the grass growing rate as G, then:\n    # 20 horses eat grass in 12 days -> 20H * 12 = G\n    # 60 sheep eat grass in 24 days -> 60S * 24 = G\n    # 1 horse eats as much as 4 sheep -> H = 4S\n\n    # From the first equation, G = 20H * 12\n    # From the second equation, G = 60S * 24\n    # From the third equation, H = 4S\n    # Therefore, we can deduce that 20 * 12 * H = 60 * 24 * S\n    # Simplifying that we get H = 6S\n    # We were given H = 4S, so we find that S (sheep's daily eating rate) is G / (60 * 24)\n\n    # Now we need to calculate the days (D) it takes for 12 horses and 88 sheep to eat all grass\n    # 12H + 88S = G / D\n    # Replace H with 4S (from the third equation) we get:\n    # 12 * 4S + 88S = G / D\n    # 48S + 88S = G / D\n    # 136S = G / D\n\n    # Also, we know from before that 60S = G / 24\n    # So, we can say 136S = (60S * 24) / D\n    # After simplification, we find D = (60S * 24) / 136S\n    # S cancels out and we are left with D = (60 * 24) / 136\n    # Perform the calculation:\n    D = (60 * 24) / 136\n\n    return D\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, total_water = symbols('A B C total_water')\n\n    # 1st scenario - with A and C, the pool is filled and A contributes 18 tons.\n    eq1 = Eq(A + C, total_water)\n    # Substitute A = 18 tons because the problem says A contributes 18 tons of water.\n    eq1 = eq1.subs(A, 18)\n\n    # 2nd scenario - with B and C, the pool is filled and B contributes 27 tons.\n    eq2 = Eq(B + C, total_water)\n    # Substitute B = 27 tons because the problem says B contributes 27 tons of water.\n    eq2 = eq2.subs(B, 27)\n    \n    # 3rd information given - B's flow rate is twice that of A, so B = 2 * A.\n    eq3 = Eq(B, 2 * A)\n    # Substitute B = 2 * A.\n    eq3 = eq3.subs(B, 2 * 18)\n\n    # Solve the system of equations to find total_water.\n    solved_eqs = solve((eq1, eq2, eq3), (A, B, C, total_water))\n    \n    # Get the total water value.\n    ans = solved_eqs[total_water]\n    \n    return ans\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    payment_per_match = 500\n    payment_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n\n    total_earnings = (payment_per_match * number_of_matches) + \\\n                     (payment_per_goal * average_goals_per_game * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    # The operation \"☀\" is defined as summing up odd numbers starting from the first operand\n    # and adding the next consecutive odd numbers as many times as the value of the second operand.\n    first_operand = 1\n    second_operand = 10\n    ans = sum(first_operand + 2 * i for i in range(second_operand))\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        # Avoid leading zero in either summand or in the result\n        if M == 0 or H == 0:\n            continue\n        MATH = M*1000 + A*100 + T*10 + H\n        HTAM = H*1000 + T*100 + A*10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the pattern\n    # The sequence seems to alternate between adding 7 and multiplying by 2 minus 7\n    # Starting with 1:\n    # 1. Add 7 => 1 + 7 = 8\n    # 2. Multiply by 2 and subtract 7 => 8 * 2 - 7 = 9\n    # 3. Add 7 => 9 + 7 = 16\n    # 4. Multiply by 2 and subtract 7 => 16 * 2 - 7 = 25\n    # 5. Add 7 => 25 + 7 = 32\n    # However, this does not quite match the sequence given\n    # It seems the multiply operation always results in an even number in the sequence\n    # So there must be a mistake in the pattern analysis - checking again:\n    # Correcting Step 2:\n    # 1. Add 7 => 1 + 7 = 8\n    # 2. Multiply previous odd number by 2 => 1 * 2 = 2 (not 8 * 2)\n    # Continuing this corrected pattern:\n    # 3. Add 7 => 2 + 7 = 9 (So step 3 actually resulted in 16 indicating a second mistake)\n    # 4. Multiply by 2 => 9 * 2 = 18 (But we expected 23)\n    # It appears the multiply by 2 pattern is not consistent as well, reanalyzing:\n    # The actual pattern:\n    # 1 = 1\n    # 1 + 7 = 8\n    # 16: The only even number, likely the result of a multiply by 2 from preceding odd number\n    # So we find the previous odd number before 16 which is 15 (subtract 1 from 16)\n    # Then we have 15 / 2 = 7.5, therefore the previous step was 7.5 multiply by 2.\n    # The correct pattern:\n    # +7, *2-1, +7, *2-1, +7, ...\n    \n    # Initialize the starting number\n    number = 1\n    \n    # Loop over sequence steps until we reach the last known number\n    while number < 53:\n        # Apply the +7 rule\n        number += 7\n        if number >= 53:\n            break\n        # Apply the *2-1 rule (the even number in the sequence, indicating the operation on the previous odd number)\n        number = (number + 1) // 2 * 2 - 1\n    \n    # After 53, the next number should follow the +7 rule\n    ans = number + 7\n    return ans\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n\n    cost_per_ball = total_cost / number_of_balls\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial as fact\n\n    # Mr. Spencer has 2 children and they have 3! ways to arrange among themselves\n    # because he wants to sit between them, thus he is fixed and we have two positions to arrange the children.\n    spencer_children_ways = fact(3) // fact(1) # divide by fact(1) as Mr. Spencer's position is fixed\n\n    # There are 3 seats left and 3 other people\n    # These 3 people can be arranged in these 3 seats in 3! ways.\n    other_people_ways = fact(3)\n\n    # Multiplied together, they give the total possible arrangements.\n    total_ways = spencer_children_ways * other_people_ways\n    return total_ways\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_remain = total_sweets - sweets_eaten\n    sweets_given_away = sweets_remain / 3\n    sweets_left = sweets_remain - sweets_given_away\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 notes (x) and $5 notes (y)\n    x, y = symbols('x y')\n\n    # Original equation: The total number of notes is 55\n    equation1 = Eq(x + y, 55)\n\n    # Cindy spends 1/3 of the $2 notes\n    spent_x = x / 3\n\n    # After spending, she receives 8 more $5 notes\n    new_y = y + 8\n\n    # The remaining number of $2 notes\n    remaining_x = x - spent_x\n\n    # The remaining total number of notes after spending and receiving\n    total_remaining_notes = remaining_x + new_y\n\n    # After all transactions, the number of $5 notes is 3/7 of the remaining notes\n    equation2 = Eq(new_y, (3/7) * total_remaining_notes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of money at first\n    total_money = solutions[x] * 2 + solutions[y] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    for correct in range(7):\n        wrong = 6 - correct\n        score = correct * 5 - wrong * 2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_of_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_of_52 = [i for i in range(1, 53) if 52 % i == 0]\n    common_factors = list(set(factors_of_24).intersection(factors_of_52))\n    common_factors.sort()\n    B = common_factors[-1]  # largest common factor\n    A = 24 // B\n    C = 52 // B\n    return A + C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time = distance / speed\n    return time\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18\n    original_number = (result_after_operations - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    term_index = 20\n    # The nth odd number is given by the formula 2n - 1.\n    odd_number = 2 * term_index - 1\n    return odd_number\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # Treat A, B, C as one group and E, F as another group\n    # There are 6 entities now: (A, B, C), D, (E, F), G, H\n    num_entities = 6\n    \n    # A, B, C can be arranged in 3! ways among themselves\n    ABC_arrangements = factorial(3)\n    \n    # E, F can be arranged in 2! ways among themselves\n    EF_arrangements = factorial(2)\n    \n    # 6 entities (including groups) can be arranged in 6! ways\n    entities_arrangements = factorial(num_entities)\n    \n    # Multiply the number of arrangements within the groups by the arrangements of the groups\n    total_arrangements = entities_arrangements * ABC_arrangements * EF_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let x be the number of scarfs produced each day initially\n    # Let y be the total number of scarfs planned to be produced\n\n    # The initial plan is to produce y scarfs in 6 days\n    # So y = 6 * x\n\n    # With 24 more scarfs produced each day, she finishes in 4 days\n    # So y = 4 * (x + 24)\n\n    # Set both expressions equal to each other since they are both equal to y\n    # 6 * x = 4 * (x + 24)\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(6 * x, 4 * (x + 24))\n    x_value = solve(equation, x)[0]\n\n    # Calculate y using the initial plan (6 * x)\n    y = 6 * x_value\n\n    return y\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # Ensure x2 is greater than x1 to avoid repeats\n            x3 = 15 - x1 - x2\n            if x3 > x2:  # Ensure x3 is greater than x2 to keep numbers distinct\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of sweets Mr. Lim has\n    # Let n be the number of students\n    # According to the problem:\n    # x + 26 = 6n (since he is short of 26 sweets when giving out 6 each)\n    # x + 5 = 5n (since he is short of 5 sweets when giving out 5 each)\n\n    # If we subtract the second equation from the first, we get:\n    # (x + 26) - (x + 5) = 6n - 5n\n    # Simplifying that we get:\n    # 26 - 5 = n\n\n    n = 26 - 5\n\n    # Now we can use the value of n to find x using the second equation:\n    # x + 5 = 5n\n    # x = 5n - 5\n\n    x = 5 * n - 5\n\n    return x\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Given ratios\n    original_ratio = Eq(boys/girls, 5/3)\n    new_ratio = Eq((boys - 15)/girls, 5/6)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n\n    total = solutions[boys] + solutions[girls]\n\n    return total\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15+1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_factor = 2 / 3  # Since the bike is sold at 'third off', the customer pays 2/3 of the original price\n    original_price = sale_price / discount_factor\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_current_age = ((3/5) * (shelby_current_age - 5)) + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # factor 675 to get its prime factors and their powers\n    factors = factorint(675)  # {3: 3, 5: 2}\n\n    # To make the product a perfect square, each prime factor's total power\n    # (existing power in 675's factorization + power in B's factorization)\n    # must be an even number. So, we must make the power of 3 even (from 3 to 4)\n    # by multiplying once with 3, and we don't need to multiply with 5\n    # because its power is already even.\n\n    # smallest B will be 3^1 = 3\n    B = 3 ** 1\n\n    return B\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price = 6.95  # price in pounds\n    single_can_price = 65  # price in pence\n    num_of_cans = 12\n\n    # Convert multipack price to pence\n    multipack_price_pence = multipack_price * 100\n\n    # Calculate total price for individual cans\n    total_individual_price = single_can_price * num_of_cans\n\n    # Calculate the difference in pence\n    savings = total_individual_price - multipack_price_pence\n\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    valid_numbers = 0\n\n    # Check for 4-digit numbers between 3267 and 5120\n    for x1 in range(3, 6):  # The first digit can be 3, 4, 5\n        for x2 in range(1, 7):\n            if x2 != x1:\n                for x3 in range(1, 7):\n                    if x3 not in (x1, x2):\n                        for x4 in range(1, 7):\n                            if x4 not in (x1, x2, x3):\n                                num = int(f\"{x1}{x2}{x3}{x4}\")\n                                if 3267 <= num <= 5120:\n                                    valid_numbers += 1\n\n    return valid_numbers\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # We are given that:\n    # Adam and Ben together weigh 102kg: A + B = 102\n    # Ben and Carl together weigh 97kg: B + C = 97\n    # Adam and Carl together weigh 93kg: A + C = 93\n\n    # Adding all the three equations we get:\n    # 2 * (A + B + C) = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n    # Calculate the total weight.\n    total_weight = (102 + 97 + 93) / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the apples and bananas\n    apple, banana = symbols('apple banana')\n\n    # Write down the equations according to the problem\n    equation1 = Eq(3 * apple + banana, 32)  # Three apples and a banana cost 32p\n    equation2 = Eq(6 * apple + banana, 53)  # Six apples and a banana cost 53p\n\n    # Solve the system of equations for the cost of apples and bananas\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a be the time Alan takes to paint the room on his own\n    alan_time = symbols('a')\n    bob_time = 6  # Bob takes 6 hours to paint the room on his own\n    combined_time = 4  # Alan and Bob together take 4 hours to paint the room\n\n    # Alan's work rate is 1/a and Bob's work rate is 1/6\n    # Together their combined work rate is 1/4\n    equation = Eq(1/alan_time + 1/bob_time, 1/combined_time)\n\n    # Solve the equation for the time Alan takes\n    solution = solve(equation, alan_time)\n\n    return solution[0]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n    \n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal_amount = 500\n    interest_rate = 0.08\n    years = 10\n    interest_factor = 1.08 ** years\n\n    final_amount = principal_amount * interest_factor\n\n    return final_amount\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24\n    num2 = 3000 + 968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    weeks = 26\n    total_food = weekly_food * weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    \n    # To ensure Peter wins, he must have more votes than the total votes divided by 2\n    votes_needed = (total_votes // 2) + 1  # To get the majority\n    additional_votes_for_peter = votes_needed - peter_votes\n\n    return additional_votes_for_peter\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the amount of money each had initially\n    x = symbols('x')\n\n    # After spending, Alex has (x - 58), Nicholas has (x - 13)\n    # Nicholas has 6 times the money left that Alex has:\n    equation = Eq((x - 13), 6 * (x - 58))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Answer is the sum of the initial amounts of money both had\n    return solution[0] * 2\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6*6) - (8*6)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n    day_code = (days_later % days_in_week) + 1\n    return f\"000{day_code}\"\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    return 12.35 + 8.65 + 9.8 - 2.8\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_two_thirds = 9\n    a = a_two_thirds ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6 = 6 * 10**(-3)\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length - interval) // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # declare variables\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    # equations based on the given information\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    # solve equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    pencils_plus_rulers = 52\n    pencils_minus_rulers = 10\n\n    rulers = (pencils_plus_rulers - pencils_minus_rulers) // 2\n    return rulers\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    dataset = [11, 13, 17, 12]\n    mean_value = 11\n    total_sum = mean_value * (len(dataset) + 1)  # Include x in the count\n    sum_dataset = sum(dataset)\n    x = total_sum - sum_dataset\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    seven_thousand = 7 * 1000  # The value of the first 7\n    seven = 7  # The value of the second 7\n    difference = seven_thousand - seven  # The difference in their values\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return float(solutions[blue])\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_boys = 200\n\n    total_ratio = boys_ratio + girls_ratio\n    girls = (girls_ratio * total_boys) / boys_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000  # The repeating decimal part of 1/3 is '3'\n    digit_sum = sum(int(digit) for digit in decimal_part)  # Summing the digits\n    return digit_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    amount = 29\n    ans = percentage * amount\n    return ans\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # You take all the marbles of the two colors that have the least amount of marbles, \n    # but this still does not guarantee 4 marbles of the same color.\n    # So, you take 3 more (1 of each color).\n    # Worst case scenario: you now have 3 red, 3 yellow, 3 blue, and 1 more marble of any color.\n    marbles_needed = (10 + 13 + 3)\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    ans = (55 + 13) // 4\n    return ans\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction_value = 2 / 5\n    percentage_value = 35 / 100\n    decimal_value = 0.604\n\n    ans = fraction_value + percentage_value + decimal_value\n    \n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    # Final concentration in container C (in grams)\n    final_concentration_C = 0.5 * (50 + 10) / 100\n    \n    # Since 10 grams were transferred from B to C, the concentration in B was the same\n    concentration_B = final_concentration_C\n    \n    # We assume x to be the original concentration in A in grams\n    # Hence, the concentration of the solution in A after adding the x grams of solution is (x + 30) / 40\n    # When 10 grams of this solution is added to B (40 grams of pure water),\n    # The resulting mixture in B will be 40 + 10 grams\n    # Hence, the concentration of B will be (10 * (x + 30) / 40) / 50\n\n    # Now we can set up the equation as follows:\n    # ((10 * ((x + 30) / 40)) / 50) * 100 = final_concentration_C\n    # Solve for x\n    x = (concentration_B * 50 * 40) / 10 - 30\n\n    return x\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n    # Find the divisors of 2016\n    divisors_2016 = divisors(2016)\n    # Find the divisors of 1377\n    divisors_1377 = divisors(1377)\n    \n    # Find the common divisors and sort them\n    common_divisors = sorted(set(divisors_2016).intersection(divisors_1377))\n    possible_ages = []\n    \n    # Find the possible ages of the cousins\n    for age1 in common_divisors:\n        for age2 in common_divisors:\n            age3 = 2016 // (age1 * age2)\n            # Check if age3 is a divisor and the ages give the correct product for the previous year\n            if (age1 != age2 and age1 * age2 * age3 == 2016 \n                and (age1 - 1) * (age2 - 1) * (age3 - 1) == 1377):\n                possible_ages.append(sorted([age1, age2, age3]))\n    \n    # Extract the unique set of possible ages\n    unique_ages = []\n    for ages in possible_ages:\n        if ages not in unique_ages:\n            unique_ages.append(ages)\n    \n    # Find the product of their ages 2 years ago\n    ans = 1\n    for age in unique_ages[0]:\n        ans *= (age - 2)\n    \n    return ans\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_apples_first_3_days = 33\n    average_last_4_days = 18\n    total_apples_last_4_days = average_last_4_days * 4\n    total_apples_whole_week = total_apples_first_3_days + total_apples_last_4_days\n    average_per_day_whole_week = total_apples_whole_week / 7\n    return average_per_day_whole_week\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(9 - (x + 3), 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    metal1_weight = 12  # mg\n    metal1_ni_percent = 40  # percent\n    metal2_weight = 13  # mg\n    metal2_ni_percent = 60  # percent\n\n    metal1_ni_weight = metal1_weight * (metal1_ni_percent / 100)\n    metal2_ni_weight = metal2_weight * (metal2_ni_percent / 100)\n\n    total_ni_weight = metal1_ni_weight + metal2_ni_weight\n    total_metal_weight = metal1_weight + metal2_weight\n\n    ni_concentration_percent = (total_ni_weight / total_metal_weight) * 100\n\n    return ni_concentration_percent\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    half_distance = (-3 + 8) / 2\n    return half_distance\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    # Total number of people is 5.\n    # If two people want to stand next to each other, treat them as a single unit.\n    # Now we have 4 units to arrange (the pair and the other 3 individuals).\n    units_to_arrange = 4\n\n    # Each unit can be arranged in 4! ways (because there are 4 units).\n    unit_arrangements = math.factorial(units_to_arrange)\n\n    # The pair can be arranged in 2! ways (the two people can swap places).\n    pair_arrangements = math.factorial(2)\n\n    # The total number of arrangements is the product of the unit arrangements and pair arrangements.\n    total_arrangements = unit_arrangements * pair_arrangements\n\n    return total_arrangements\n\nimport math\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    multiple_of_two = 2\n    last_number = 100\n    count = 0\n    \n    for number in range(multiple_of_two, last_number + 1, multiple_of_two):\n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays against all other players once.\n    # Therefore, each of the eight players will play seven games (because they can't play against themselves).\n    # The champion, having the maximum number of wins, will win against all the other 7 players.\n    return 7  # The champion wins all 7 games they play.\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    pens_before = 24\n    pens_after = 24 + 6\n    chickens_diff = 6\n\n    # Total chickens before and after are the same.\n    # chickens_before / pens_before - chickens_diff = chickens_after / pens_after\n    # chickens_before = pens_before * (chickens_after / pens_after + chickens_diff)\n\n    # Since chickens_before == chickens_after and pens_before * chickens_diff = pens_after * chickens_diff,\n    # we can simplify the equation: pens_before * chickens_diff = pens_after * chickens_diff\n    # chickens_before = pens_after * chickens_diff\n\n    chickens_total = pens_after * chickens_diff\n\n    return chickens_total\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    # Keep incrementing n until the sum from 1 to n typically exceeds the given wrong total\n    while (n * (n + 1) / 2) <= 3405:\n        n += 1\n    n -= 1  # Correct for the overshoot due to the loop\n    \n    # Calculate the correct sum\n    correct_sum = n * (n + 1) // 2\n    # Find the number that was added twice\n    double_added_number = 3405 - correct_sum\n    \n    return double_added_number\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Let's assume the first term of the arithmetic sequence is a\n    # and the common difference is d.\n    # The sum of the first n terms (S_n) of an arithmetic sequence can be calculated by the formula:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # We're given S_6 = 64 and S_12 = 156\n    # Let's form two equations based on the above:\n    # 6/2 * (2a + (6 - 1)d) = 64  => 1\n    # 12/2 * (2a + (12 - 1)d) = 156 => 2\n\n    # From equation (1): 3 * (2a + 5d) = 64\n    # Simplifying: 6a + 15d = 64       => Equation A\n    # From equation (2): 6 * (2a + 11d) = 156\n    # Simplifying: 12a + 66d = 156      => Equation B\n\n    # Now we need two equations in two variables\n    # Let's simplify Equations A and B by dividing:\n    # Equation A by 6: a + 2.5d = 10.6666...   => Equation A' \n    # Equation B by 12: a + 5.5d = 13          => Equation B'\n\n    # Now let's subtract Equation A' from Equation B' to find d:\n    # a + 5.5d - (a + 2.5d) = 13 - 10.6666...\n    # 3d = 2.3333...\n    # d = 2.3333... / 3\n    d = (13 - 10.66666666667) / 3\n\n    # Now that we have d, we can solve for a by plugging d back into Equation A':\n    # a + 2.5d = 10.6666...\n    a = 10.66666666667 - 2.5 * d\n\n    # Now to find the sum of the first 18 terms S_18, we use the formula:\n    # S_18 = 18/2 * (2a + (18 - 1)d)\n    sum_first_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n\n    return sum_first_18\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_history_to_math = 7 / 8\n\n    members_history_club = total_math_club * ratio_history_to_math\n\n    return int(members_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the numbers according to the planet Zog's representations\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n\n    # Subtract the numbers as per Zog's rules, which is equivalent to regular addition\n    result = num1 - num2\n\n    # Write the answer in reverse as per Zog's representation\n    ans = int(str(result)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_3_years_ago = ashley_age_now - 3\n    brothers_age_3_years_ago = ashley_age_3_years_ago - 2\n    brothers_age_now = brothers_age_3_years_ago + 3\n    return brothers_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n    train_length = 160  # meters\n\n    # total distance covered by the train while crossing the bridge\n    total_distance = train_speed * time_to_pass\n    # length of the bridge is total distance minus train length\n    bridge_length = total_distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_score_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_score_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n    \n    return int(more_marks)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Speed of jogging\n    speed_jogging = 9  # in km per hour\n    # Speed of walking\n    speed_walking = 7.5  # in km per hour\n    \n    # Time spent jogging from 6:30 to 7:00\n    time_jogging = 0.5  # in hours (30 minutes)\n    # Time spent walking from 7:00 to 8:00\n    time_walking = 1  # in hour (60 minutes)\n    \n    # Distance travelled while jogging\n    distance_jogging = speed_jogging * time_jogging\n    # Distance travelled while walking\n    distance_walking = speed_walking * time_walking\n    \n    # Total distance travelled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4, because it cannot be 0)\n    # There are 3 choices for the second digit (0, 3, or 4)\n    # There are 3 choices for the third digit (0, 3, or 4)\n    \n    num_first_digit_choices = 2\n    num_second_digit_choices = 3\n    num_third_digit_choices = 3\n    \n    # The total number of different three-digit numbers is the product of the choices\n    count = num_first_digit_choices * num_second_digit_choices * num_third_digit_choices\n    \n    return count\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    \n    total_games = Eq(wins + losses, 63)\n    win_loss_ratio = Eq(wins, 2 * losses)\n    \n    solutions = solve((total_games, win_loss_ratio), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    result = (55 - 44) * common_factor\n    return result\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, cows, goats = symbols('total_animals cows goats')\n\n    # 65% of the animals were cows and the rest were goats.\n    equation1 = Eq(cows, 0.65 * total_animals)\n    equation2 = Eq(goats, 0.35 * total_animals)\n\n    # When 240 more cows and goats were added to the farm, the percentage of cows increased by 20%\n    # So now cows are 85% of the total and goats are 15% of the total.\n    equation3 = Eq(cows + 240 * 0.85, 0.85 * (total_animals + 240))\n    equation4 = Eq(goats + 240 * 0.15, 0.15 * (total_animals + 240))\n\n    # The number of goats doubled.\n    equation5 = Eq(goats * 2, goats + 240 * 0.15)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (total_animals, cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is (sqrt(3)/4) * (side_length)^2\n    x_side = 3\n    y_side = 9\n\n    # Calculate areas of both triangles\n    x_area = (3**(0.5)/4) * (x_side**2)\n    y_area = (3**(0.5)/4) * (y_side**2)\n\n    # The number of times Triangle X fits into Triangle Y is the ratio of their areas\n    num_times = y_area / x_area\n\n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the three girls as a single entity: 1\n    # Number of ways to arrange the rest: 3 teachers and 1 \"girl group\": 4!\n    girls_group_arrangement = factorial(4)\n    \n    # Since boys cannot stand adjacent to each other, we treat each of the 4 units\n    # (3 teachers and 1 \"girl group\") as dividers where the boys can be placed.\n    # There are 5 possible positions the boys can be in (before and after\n    # each of the 4 units), so we need to choose 3 of these for the boys: C(5, 3).\n    # Then we permute the boys in the chosen spots: 3!\n    boys_arrangement = factorial(5) / factorial(5 - 3) * factorial(3)\n    \n    # The total number of ways they can line up is the product of \n    # the girls arrangement and the boys arrangement.\n    return int(girls_group_arrangement * boys_arrangement)\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5 * x * 12 + 3 * x * 5, 120)\n    x_value = solve(total_cost, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_choices = 2\n\n    ans = comb(num_students, num_choices)\n\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    large_product = 8 * 9 * 10\n    small_product = 1 * 2 * 3\n    difference = large_product - small_product\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # Including the option of not having soup\n    desserts = 3  # Including the option of not having dessert\n\n    # He will pick 1 appetiser and 1 main course for sure.\n    total_combinations = appetisers * main_courses * soups * desserts\n    \n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem\n    congruences = [(5, 8), (1, 9)]\n    \n    # Use the Chinese Remainder Theorem to find a solution\n    result = solve_congruence(*congruences)\n    \n    # Find the minimum number greater than 100\n    while result[0] < 100:\n        result = (result[0] + result[1], result[1])\n        \n    # Check if the resulting number is less than 200\n    if result[0] >= 100 and result[0] < 200:\n        ans = result[0]\n    else:\n        ans = None  # No solution found between 100 and 200\n\n    return ans\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    a1 = 6  # first term of the arithmetic sequence\n    d = 5   # common difference between the terms\n    an = 41 # last term of the arithmetic sequence\n\n    # calculate the number of terms in the sequence\n    n = ((an - a1) / d) + 1\n\n    # calculate the sum of the arithmetic sequence\n    sum_seq = (n / 2) * (a1 + an)\n\n    return int(sum_seq)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Using the given relationships, we can directly calculate the number of chickens weighing as much as one dog\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens, so 8 rabbits = 16 chickens\n    # Therefore, 1 dog = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Slices left after family ate and gave to friends\n    slices_left = 4\n    # Slices given to friends\n    slices_given = 2\n    # Total slices left before giving to friends\n    total_slices_before_giving = slices_left + slices_given\n    # Fraction of cake left after family ate\n    fraction_left = 1 - (3/5)\n    \n    # Original number of slices\n    original_slices = total_slices_before_giving / fraction_left\n    \n    return int(original_slices)\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from sympy import divisors, factorial\n\ndef solution():\n    target_product = 2**27\n    factors = divisors(target_product)  # Get divisors of the product\n    digit_combinations = []\n\n    # Filter out the divisors that are not single digits and append single digit divisors\n    for factor in factors:\n        if 1 <= factor <= 9:\n            digit_combinations.append(factor)\n\n    # Calculate the total number of digits we need to distribute\n    total_digits = 10\n\n    # The number of the ways to arrange the digits we found\n    # We use 2**3 for digit 8 and 2**2 for digit 4 and 2 for digit 2\n    count_8 = target_product // (2**3)\n    count_4 = (target_product // (2**2)) % 2\n    count_2 = target_product % 2\n\n    # Calculate permutations of the available digits, placing them in the 10 available positions\n    ways_to_divide = factorial(total_digits) // (\n        factorial(count_2) * factorial(count_4) * factorial(count_8)\n    )\n\n    return ways_to_divide\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    num = 2435643\n    place_value_1 = 3 * 10**2  # The place value of the '3' at the hundreds place\n    place_value_2 = 3 * 10**5  # The place value of the '3' at the hundred thousands place\n    \n    difference = place_value_2 - place_value_1\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n    min_pencils = (total_pencils + total_cases - 1) // total_cases\n    return min_pencils\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the time Mike takes to finish the job by himself\n    # let y be the time Danny takes to finish the job by himself\n    x, y = symbols('x y')\n\n    # Combined work rate of Mike and Danny\n    combined_rate = 1/10\n\n    # Mike's work rate plus Danny's work rate should be equal to their combined work rate\n    equation1 = Eq(1/x + 1/y, combined_rate)\n\n    # If Mike works for 8 hours, his part of the work is 8/x\n    # If Danny works for 13 hours, his part of the work is 13/y\n    # Together they finish the job, which can be represented by 1\n    equation2 = Eq(8/x + 13/y, 1)\n\n    # Solve the system of equations for y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(1, 66):\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    chess_per_side = (side_length // interval) + 1  # including the corner\n    total_chess = 4 * chess_per_side - 4  # subtract the overlapping corners\n    \n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the number of red squares, the maximum number of times a digit can appear is 4 times,\n    # because if it appears 5 times or more, all of its occurrences will be painted red.\n    # We have 10 digits (0 to 9), so we can fill 10*4 = 40 squares without any red squares.\n    # After this, for any new digit added, it will become red.\n    # Therefore, the smallest number of red squares would be 100 - 40 = 60,\n    # because the remaining 60 will necessarily contain at least one digit 5 or more times.\n    return 100 - (10 * 4)\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4  # Because the sequence is decreasing\n\n    # For an arithmetic sequence, a_n = a_1 + (n - 1) * d\n    # If the first negative term is a_n, then a_n < 0.\n    # From the equation above, we can deduce that:\n    # 50 + (n - 1) * (-4) < 0\n    # (n - 1) * (-4) < -50\n    # n - 1 > 50 / 4\n    # n > 12.5\n    # Since n must be an integer, and we want the first negative term, we round up.\n    \n    n = 13  # This is the term after which the sequence becomes negative.\n\n    return n\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_balls = symbols('blue_balls')\n\n    # Total balls = red balls + blue balls\n    total_balls = 4 + blue_balls\n\n    # Probability of taking first red ball: 4 / total_balls\n    # Probability of taking second red ball after first: 3 / (total_balls - 1)\n    probability = (4 / total_balls) * (3 / (total_balls - 1))\n\n    # Set up the equation based on the given probability 2/7\n    equation = Eq(probability, 2/7)\n\n    # Calculate the number of blue balls\n    number_of_blue_balls = solve(equation, blue_balls)\n\n    return number_of_blue_balls[0]\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    father_amount = 4/5\n\n    remaining_amount = initial_amount - spent_amount + father_amount\n\n    return round(remaining_amount, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for x in range(32, 100):\n        square = x * x\n        str_square = str(square)\n        \n        if len(str_square) == 4 and str_square[0] == str_square[1] and str_square[2] == str_square[3]:\n            ans = square\n            return ans\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    count_5 = 0\n    \n    # We want to find n such that 5's power count is min to have 28 zeros (since 10 is 5*2 & there are always more 2s)\n    while count_5 < 28:\n        temp = n\n        while temp % 5 == 0:\n            count_5 += 1\n            temp /= 5\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n    \n    # Calculate the distance covered when they are 130 km apart\n    distance_covered = initial_distance - remaining_distance\n    \n    # Calculate the total speed of both Tim and Bob (since they are moving towards each other)\n    total_speed = tim_speed + bob_speed\n    \n    # Calculate the time taken to cover the distance when they are still 130 km apart\n    time_taken = distance_covered / total_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    daily_climb = 3\n    nightly_slide = 1\n    net_progress_per_day = daily_climb - nightly_slide\n    total_distance = 11\n    current_distance = 0\n    days_passed = 0\n\n    while current_distance < total_distance:\n        days_passed += 1\n        current_distance += daily_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= nightly_slide\n    \n    return days_passed\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    known_numbers = [3, 4, 6, 10]\n    total_sum = mean_value * (len(known_numbers) + 1)\n    fifth_number = total_sum - sum(known_numbers)\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    return lcm(akon_cycle, ben_cycle, cris_cycle)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                consecutive = sorted([int(d) for d in perm])\n                if all(consecutive[i] + 1 == consecutive[i + 1] for i in range(3)):\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = '8354'\n    sum_recurring_sequence = sum(int(digit) for digit in recurring_sequence)\n    full_repetitions, remainder = divmod(84, len(recurring_sequence))\n\n    sum_of_full_repetitions = sum_recurring_sequence * full_repetitions\n    sum_of_remainder = sum(int(recurring_sequence[i]) for i in range(remainder))\n    \n    total_sum = sum_of_full_repetitions + sum_of_remainder\n\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie_km = 15\n    jenny_km = 10\n    jason_km = 8\n\n    average_km = (eddie_km + jenny_km + jason_km) / 3\n\n    return average_km\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    time_between_strikes = (43 - 6 * 3) / (6 - 1)\n    total_time_for_12_strikes = 12 * 3 + time_between_strikes * (12 - 1)\n    return int(total_time_for_12_strikes)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Let the number of students originally be x.\n    # We know that x + 5 is a perfect square (largest possible square array with 5 left out),\n    # and x + 18 is a perfect square (perfect square array with no one left out).\n    # Hence, we look for consecutive squares where the difference is 13 (18 - 5).\n    \n    # Let's check for m^2 and n^2 such that m^2 + 13 = n^2\n    \n    m = 1\n    while True:\n        # Check for two perfect squares differing by 13\n        m_squared = m ** 2\n        n_squared = m_squared + 13\n        \n        # Check if n_squared is a perfect square\n        n = int(n_squared ** 0.5)\n        if n * n == n_squared:\n            # Find the original number of students\n            x = m_squared - 5\n            return x\n        m += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n    \n    work_rate_initial = people_initial / time_initial\n    people_required = work_rate_initial * time_required\n    \n    return int(people_required)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # Using stars and bars theorem: (n+k-1) choose (k-1)\n    n = 20  # total number of items (pens)\n    k = 6   # number of kids\n    # Since each kid gets at least one pen, we distribute one pen to each kid\n    n = n - k  # adjusting n considering that each kid has already received one pen\n    # The solution is now equivalent to placing (k-1) separators between n items\n    ans = factorial(n + k - 1) // (factorial(k - 1) * factorial(n))\n    return ans\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    minutes_per_quiz = 30\n    num_quizzes = 4\n    total_minutes = minutes_per_quiz * num_quizzes\n    hours = total_minutes / 60\n\n    return hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_zero_numbers = 9 * 9 * 9\n    at_least_one_zero = total_three_digit_numbers - no_zero_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30  # speed of the ball in meters per second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    term_index = 7\n\n    nth_term = first_term + (term_index - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(102, 300, 5):  # Starts from the lowest 3-digit number with remainder 2 when divided by 5\n        if num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    speed_ratio = 1.5\n    # Let's say Jerry drives x miles. Then Kevin would have driven 1.5x miles.\n    # Together, they cover the total distance: x + 1.5x = total_distance\n    jerry_distance = total_distance / (1 + speed_ratio)\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    number_of_cuts = 8\n    number_of_pieces = number_of_cuts + 1\n    length_per_piece = total_length / number_of_pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Initialize variables for each place value\n    thousands_place = 0  # The smallest possible digit for the thousands place is 1 (since 0 would not make it a 4-digit number).\n    hundreds_place = 0  # To be determined\n    tens_place = 0  # To be determined\n    ones_place = 9  # The greatest odd number\n    \n    # Since the digits need to be different, start with the smallest\n    # number in the thousands place that is not 9 (as 9 is in the ones place).\n    for i in range(1, 10):\n        if i != ones_place:\n            thousands_place = i\n            break\n            \n    # Find the possible digits for the hundreds and tens place that add up to 13\n    # and are different from the chosen thousands place and ones place digits.\n    for i in range(10):\n        for j in range(10):\n            if i + j == 13 and i != j and i != thousands_place and j != thousands_place and i != ones_place and j != ones_place:\n                hundreds_place, tens_place = i, j\n                return int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 1  # 100%\n    height_after_bounces = initial_height\n    bounces = 0\n    while height_after_bounces >= 0.25:  # 25% of the initial height\n        height_after_bounces *= 0.75  # 75% of the previous height\n        bounces += 1\n    \n    return bounces - 1  # Subtract 1 because the loop goes one step too far\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    arithmetic_sequence = [5, 8, 11, 14, 17, 20]\n    ans = sum(arithmetic_sequence)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    age_difference = 40 - 10\n    uncle_age = 10 + age_difference\n    return uncle_age\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    total_pictures = 10\n    pictures_to_place = total_pictures - 2  # Two pictures are already placed at the extremes\n\n    # The space to distribute the remaining pictures is the wall width minus the width of two pictures.\n    space_for_pictures = wall_width - 2 * picture_width\n\n    # The distance between the centers of the pictures will be this space divided by the number\n    # of gaps between the remaining pictures. The number of gaps is one less than the number of pictures.\n    gap_between_pictures = space_for_pictures / (pictures_to_place - 1)\n\n    # The center of the third picture would be after two gaps from the leftmost picture\n    center_of_third_picture_from_left = picture_width + 2 * gap_between_pictures\n\n    # The center of the wall is half the wall width\n    center_of_wall = wall_width / 2\n\n    # The distance from the center of the wall to the center of the third picture is\n    distance_from_wall_center = center_of_third_picture_from_left - center_of_wall\n\n    return distance_from_wall_center\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    annual_interest_rate = 2.25 / 100  # converting percentage to decimal\n\n    principal = interest / annual_interest_rate\n    \n    return principal\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    # Ellie's purchase: 2 bananas + 3 apples = £1.50\n    eq1 = Eq(2 * banana + 3 * apple, 1.50)\n    # Beth's purchase: 3 bananas + 2 apples = £1.45\n    eq2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    # Annabella's purchase: 1 banana + 1 apple\n    annabella_cost = solutions[banana] + solutions[apple]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n    \n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # The given puzzle seems to suggest a simple addition problem where\n    # a digit is missing in the equation: 8 + ____ = 15\n    # We can find the missing number by subtracting 8 from 15.\n\n    total_sum = 15\n    known_number = 8\n    missing_number = total_sum - known_number\n\n    return missing_number\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    equation = Eq(original_money - 200 - 2 / 7 * (original_money - 200), original_money / 3)\n    \n    original_amount = solve(equation, original_money)\n    \n    return original_amount[0]\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_rate = 1.15763  # 5% interest compounded yearly for 3 years\n    second_rate = 1.1664  # 8% interest compounded yearly for 2 years\n    \n    final_amount = initial_investment * first_rate * second_rate\n    final_amount = round(final_amount, 1)  # round to the nearest tenth\n    \n    return final_amount\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the usual speed be 's' km/h and the usual time be 't' hours\n    s, t = symbols('s t', positive=True, real=True)\n    \n    # If the speed of the car is increased by 20%, it will reach its destination 1 hour earlier\n    equation1 = Eq(s * t, s * 1.2 * (t - 1))\n    \n    # Travel the first 200km at usual speed and then increase speed by 25%, reaching 12 minutes (0.2 hours) earlier\n    # Remaining distance is s*t - 200\n    # Remaining time at increased speed is t - 200/s - 0.2\n    equation2 = Eq(200/s + 1.25 * (t - 200/s - 0.2), t)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, t))\n    \n    # Calculate the distance between city P to city Q (s * t)\n    distance = solutions[s] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # There are 5 students to arrange (as Tom and Harry are considered as a single unit)\n    # plus Ronda who must stand at the furthest right.\n    arrangements_others = factorial(5)\n\n    # Tom and Harry can switch places, so we need to multiply by 2.\n    arrangements_tom_harry = 2\n\n    # Total arrangements\n    total_arrangements = arrangements_others * arrangements_tom_harry\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    # Current situation\n    num_tests_taken = 4\n    average_score = 89\n    desired_average = 95\n    \n    # Total score after 4 tests\n    total_score_current = num_tests_taken * average_score\n    \n    # To find out how many more tests with full score (100 marks) are needed \n    # to reach the desired average, we set up an equation:\n    # (total_score_current + 100 * num_additional_tests) / (num_tests_taken + num_additional_tests) = desired_average\n    # We solve this equation for num_additional_tests, treating it as an integer number of tests.\n    num_additional_tests = 0\n    while (total_score_current + 100 * num_additional_tests) / (num_tests_taken + num_additional_tests) < desired_average:\n        num_additional_tests += 1\n\n    return num_additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time for each section of the race\n    time_540 = 540 / 9\n    time_300 = 300 / 6\n    time_final = (1000 - 540 - 300) / 10\n    \n    # Sum of all times is the total time taken to finish the race\n    total_time = time_540 + time_final + time_300\n    return total_time\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    extra_performances = 2  # One extra from Lia and one extra from Liz\n\n    total_performances = class_performances + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # m/s\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age_now = 10\n    uncle_age_when_doris_reaches_uncle_age = 40\n\n    # The difference in age between Doris and her uncle is constant\n    age_difference = uncle_age_when_doris_reaches_uncle_age - doris_age_now\n\n    # Uncle's current age is his age when Doris reaches his current age, minus the difference in age\n    uncle_current_age = uncle_age_when_doris_reaches_uncle_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n    \n    # Original relationship\n    equation1 = Eq(sheep, (5/7)*cows)\n    # New relationship after changes\n    equation2 = Eq(cows - 7, (3/4)*(sheep + 21))\n\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_diff = (9 * 60 + 25) - (8 * 60 + 30)\n    return time_diff\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency is twice as B's\n    # A can complete the job in 6 days alone.\n    # Let's denote A's work per day as A_work\n    A_work = 1 / 6\n\n    # B's work per day is B_work, which is half of A's\n    B_work = A_work / 2\n\n    # Work done by A and B together per day\n    total_work_per_day = A_work + B_work\n\n    # Total days to complete the work when working together\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let g represent Geoff's current age and s represent his sister's current age.\n    # The sum of their current ages is 22: g + s = 22\n    # After n years, their ages will be g + n and s + n respectively.\n    # The sum of their ages after n years will be (g + n) + (s + n) = 30: g + s + 2n = 30\n    # Since we know that g + s = 22 from the current sum of their ages, we can substitute that into the above equation:\n    # 22 + 2n = 30\n    # Solving for n: 2n = 30 - 22 => 2n = 8 => n = 4\n\n    # It will take 4 years for the sum of their ages to be 30.\n    n = 4\n    return n\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # Ryna thinks the lowest possible price of the car is $125001\n    # However, if the price is rounded to the nearest $100, then the actual lowest possible price\n    # should be such that anything above $124950 would round up to $125000.\n    # The first number that would round down instead of up is $124949.99,\n    # but as we need the price to the nearest dollar, it is $124950.\n    \n    lowest_possible_price = 124950\n\n    # Let's check if Ryna is correct.\n    ryna_is_correct = lowest_possible_price == 125001\n    \n    # Return a tuple with whether Ryna is correct and the actual lowest possible price\n    return (ryna_is_correct, lowest_possible_price)\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50 # cost of a packet of Haribo in dollar\n    mamee_cost = haribo_cost - 0.30 # cost of a packet of Mamee in dollar\n    big_jelly_cost = 6 * mamee_cost # cost of a big packet of jelly in dollar\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies_total = symbols('candies_total')\n    \n    anna = 3/8 * candies_total\n    belle = 1/4 * candies_total\n    cathy_dawn = candies_total - anna - belle\n    \n    equation = Eq(anna + belle, cathy_dawn + 90)\n    \n    solutions = solve(equation, candies_total)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    # The proportion between 18/36 and □/32 should be the same since they are equal.\n    # So we calculate □ as follows: (18/36) * 32.\n    ans = (18/36) * 32\n    return ans\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fishballs = symbols('initial_fishballs')\n\n    morning_sales = 3/4\n    afternoon_sales = 1/3\n    additional_fishballs = 506\n\n    # Equation based on the problem statement\n    equation = Eq(initial_fishballs - (morning_sales * initial_fishballs) - ((1 - morning_sales) * initial_fishballs) * afternoon_sales + additional_fishballs, 2 * initial_fishballs)\n\n    # Solve for initial_fishballs\n    ans = solve(equation, initial_fishballs)\n\n    return ans[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let the number of vanilla cupcakes be x\n    x = Symbol('x')\n    \n    # Number of chocolate, vanilla, and blueberry cupcakes\n    chocolate = x + 72\n    vanilla = x\n    blueberry = x - 36\n    \n    # Cupcakes left after selling\n    chocolate_left = chocolate - chocolate / 6\n    vanilla_left = vanilla - (2 / 3) * vanilla\n    blueberry_left = blueberry - (7 / 9) * blueberry\n    \n    # Equation for the total cupcakes left\n    equation = chocolate_left + vanilla_left + blueberry_left - 427\n    \n    # Solve the equation\n    num_vanilla_cupcakes = solve(equation, x)\n    \n    # Number of chocolate cupcakes sold\n    chocolate_sold = chocolate / 6\n    \n    # Calculate the number of chocolate cupcakes sold\n    num_chocolate_sold = chocolate_sold.subs(x, num_vanilla_cupcakes[0])\n    \n    return int(num_chocolate_sold)\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    # Reverse Joel's action\n    before_joel = (remaining_plants + 2) * 2\n    # Reverse Valerie's action\n    before_valerie = (before_joel + 3) * 2\n    # Reverse Ethan's action\n    before_ethan = (before_valerie + 1) * 2\n    \n    return before_ethan\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) / 2\n\n    return int(books_to_give)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5 / 8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boy_to_girl_ratio = 2 / 7\n    girls = boys / boy_to_girl_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = marble_cake_price * 3\n    price_of_two_cheese_cakes = cheese_cake_price * 2\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle_value = (6*6 + 2 - 17) // 3\n    return circle_value\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    equations = [\n        (x%3 == 1),\n        (x%5 == 3),\n        (x%7 == 5)\n    ]\n    solutions = solve(equations)\n\n    for solution in solutions:\n        if 400 < solution < 500:\n            return solution\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    num = 36\n    factors = []\n\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n            \n    return len(factors)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    num_pigs = 8\n    green_apples = num_pigs  # one green apple per pig\n    red_apples = num_pigs / 2  # one red apple for every two pigs\n    total_apples = green_apples + red_apples\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * (1/4)\n    grown_seeds = total_seeds - died_seeds\n    return int(grown_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price_one_shirt_one_pant = solutions[shirt] + solutions[pants]\n\n    return total_price_one_shirt_one_pant\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    cycle = 2  # Days for one deposit and one spending\n\n    # Calculate completed cycles\n    completed_cycles = total_days // cycle\n    remaining_days = total_days % cycle\n\n    # Calculate the amount after completed cycles\n    amount_after_cycles = initial_amount + (deposit_amount - spend_amount) * completed_cycles\n\n    # Add remaining days transactions\n    for day in range(1, remaining_days + 1):\n        if day % 2 != 0:  # Odd day, deposit\n            amount_after_cycles += deposit_amount\n        else:  # Even day, spend\n            amount_after_cycles -= spend_amount\n\n    return amount_after_cycles\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create a list of congruences based on the problem\n    # The format is (remainder, modulus)\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5)\n    ]\n\n    # Use the Chinese Remainder Theorem to find the solution\n    pencils, _ = solve_congruence(*congruences)\n\n    return pencils\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_result = 54\n    # Apply the inverse operations in reverse order\n    original_number = (final_result * 4 - 178) / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of stickers Marry and Alexis have be 7x and 5x respectively\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # So they are left with 80% of their initial stickers\n    equation1 = Eq(marry, 7 * charlotte_initial * 0.8)\n    equation2 = Eq(alexis, 5 * charlotte_initial * 0.8)\n\n    # Charlotte's stickers increased by 80%\n    equation3 = Eq(charlotte_final, charlotte_initial * 1.8)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(marry, charlotte_final + 20)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n\n    # Alexis initially had 5x stickers\n    alexis_initial = solutions[alexis] / 0.8\n\n    return int(alexis_initial)\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance to the countryside from Nini's home\n    # Let s be the original speed\n\n    d, s = symbols('d s')\n\n    # Original time is 8 hours, so original distance is s * 8\n    original_distance = Eq(d, 8 * s)\n\n    # If Nini wants to arrive 1 hour earlier (7 hours), she needs to go 5 km/h faster (s + 5)\n    # New distance is (s + 5) * 7\n    new_distance = Eq(d, 7 * (s + 5))\n\n    # Solve the two equations for d and s\n    solutions = solve((original_distance, new_distance), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_arrangements = 4!  # Total ways to arrange 4 people\n    \n    # Cases where Claire and Tony sit across each other:\n    # Fix Claire's position. There are 2 ways to place Tony across her.\n    # The remaining two persons can be arranged in 2 ways.\n    # Hence, arrangements where Claire and Tony sit across: 2 * 2 = 4\n    arrangements_with_ct_opposite = 2 * 2\n    \n    # Subtract the arrangements where Claire and Tony sit across from the total\n    return total_arrangements - arrangements_with_ct_opposite\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2*pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    ans = 32 * 47\n    return ans\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    bottles = 1000\n    test_tubes = math.ceil(math.log(bottles, 2))\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    number_of_chairs_initially = 10\n    number_of_intervals_initially = number_of_chairs_initially - 1\n    interval_initially = total_distance / number_of_intervals_initially\n\n    number_of_chairs_after_removal = number_of_chairs_initially - 3\n    number_of_intervals_after_removal = number_of_chairs_after_removal - 1\n    interval_after_removal = interval_initially * number_of_intervals_initially / number_of_intervals_after_removal\n\n    return interval_after_removal\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    ways = 0\n    # Since each brother has at least two books, start from 2\n    for brother1 in range(2, 11):\n        for brother2 in range(2, 11):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    # Let x be the fourth angle.\n    # The third angle is then 5x.\n    # Sum of angles in a quadrilateral is 360 degrees.\n    # 90 + 90 + 5x + x = 360\n    # 6x = 360 - 180\n    # 6x = 180\n    # x = 180 / 6\n    x = 180 / 6\n    # Third angle which is the largest\n    largest_angle = 5 * x\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Define a function to calculate the ways to climb stairs, \n    # considering the avoidance of the fifth step and the \n    # limited possible steps Jimmy can take (1, 2 or 3 steps).\n    def ways_to_climb(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1  # Only 1 way to climb 1 step\n        elif n == 2:\n            return 2  # 2 ways: 1+1 or 2\n        elif n == 3:\n            return 4  # 4 ways: 1+1+1, 1+2, 2+1, 3\n        \n        # If the current step we are calculating is the fifth,\n        # we decrement the number of ways by the number of ways\n        # we can get to the fourth step as it is muddy and cannot\n        # be stepped on.\n        return (ways_to_climb(n - 1) + ways_to_climb(n - 2) + ways_to_climb(n - 3)) - (n == 5)\n    \n    # Use the ways_to_climb function to calculate the total ways Jimmy can climb 10 steps.\n    ans = ways_to_climb(10)\n    return ans\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 // 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')  # Start with an infinitely large number of boxes\n    for small_boxes in range(54 // 5 + 1):  # Iterate through all possible counts of small boxes\n        for medium_boxes in range(54 // 7 + 1):  # Iterate through all possible counts of medium boxes\n            for large_boxes in range(54 // 10 + 1):  # Iterate through all possible counts of large boxes\n                # Check if the combination of boxes equals 54 apples\n                if small_boxes * 5 + medium_boxes * 7 + large_boxes * 10 == 54:\n                    # Update the minimum number of boxes if a new minimum is found\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    \n    return min_boxes  # Return the smallest number of boxes\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days_needed = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_needed\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorize 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    # Find sets of factors of 7007 that are 2-digit numbers and multiples of 7\n    factors = set()\n    for factor in prime_factors:\n        complementary_factor = 7007 // factor\n        if 10 <= factor <= 99 and 10 <= complementary_factor <= 99 and factor % 7 == 0 and complementary_factor % 7 == 0:\n            factors.add(factor)\n            factors.add(complementary_factor)\n\n    # Calculate the sum of the two 2-digit factors\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_1_entrance = 25\n    check_in_rate_2_entrances = 2 * check_in_rate_1_entrance\n    minutes_1_entrance = 16\n\n    # Calculate the total number of visitors after 16 minutes\n    total_visitors = visitors_per_minute * minutes_1_entrance\n\n    # Calculate how long it will take for 2 entrances to check in all visitors\n    minutes_2_entrances = total_visitors / check_in_rate_2_entrances\n\n    return minutes_2_entrances\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    # Convert time from minutes to hours\n    time_in_hours = 15 / 60\n    \n    # Use the speed limit in miles per hour\n    speed_limit_mph = 65\n    \n    # Distance in miles\n    distance_miles = speed_limit_mph * time_in_hours\n    \n    # Conversion factor from miles to kilometers\n    miles_to_km = 1.60934\n    \n    # Distance in kilometers\n    distance_km = distance_miles * miles_to_km\n    \n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    # Let the original number of dragonflies be x\n    # Then the original number of frogs is x + 9\n    # After the magic show, the total amount of frogs and dragonflies is 11 + 10\n\n    # The total change in number of frogs and dragonflies is equal to the original number of frogs and dragonflies\n    # Change in frogs = final frogs - initial frogs = 11 - (x + 9)\n    # Change in dragonflies = final dragonflies - initial dragonflies = 10 - x\n    # The sum of the changes is zero since every frog turned into a dragonfly and vice versa\n    # Hence, change in frogs + change in dragonflies = 0\n    # (11 - (x + 9)) + (10 - x) = 0\n\n    # Simplifying the above equation\n    # 11 - x - 9 + 10 - x = 0\n    # 12 - 2x = 0\n    # 2x = 12\n    # x = 6\n\n    # Initial number of frogs is x + 9\n    initial_frogs = 6 + 9\n\n    return initial_frogs\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq((3/4) * muffins + (5/8) * cookies, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    max_three_digit_number = 999\n    ans = max_three_digit_number - (max_three_digit_number % 25)\n    return ans\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")  # Last digit is 0 to ensure it's even and not divisible by 5\n        if number % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assume Richard can take 'friends_count' number of friends, including his own expenses\n    # Let price for one person (includes metro both ways, a cup of coffee and entry fee to the game) be 'price_per_person'\n    # Total cost will be (friends_count + 1) * price_per_person, including Richard\n    # Richard has 40 dollars, so the inequality we want to satisfy is (friends_count + 1) * price_per_person <= 40\n\n    # To solve this question we need the actual price per person, assume it to be 'x'\n    # Since we don't have the actual prices, we can't compute the number of friends\n    # So, here we would return an 'Unavailable' value or a placeholder to indicate we need more information\n\n    return \"Unavailable: price_per_person is needed\"\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    series = range(40, 49)\n    ans = sum(series[1::2]) - sum(series[::2])\n    return ans\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver to reach the destination be t minutes.\n    # Since the ratio of the speeds of the driver and cyclist is 13:2,\n    # The time taken by the cyclist will be (13/2) * t.\n    # The cyclist takes 143 minutes more than the driver, so we have:\n    # (13/2) * t  - t = 143\n\n    # Solve for t:\n    t = symbols('t')\n    equation = Eq(t * (13/2 - 1), 143)\n    time_driver = solve(equation, t)[0]\n\n    return time_driver\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Calculate the sum of the first n natural numbers using the formula n(n+1)/2\n    n = 12\n    sum_natural_numbers = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    # using the identity 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    sum_cubes = sum_natural_numbers ** 2\n\n    # Subtract the cubes of 1 as the series starts from 2^3\n    ans = sum_cubes - 1**3\n\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    sausage_rolls_cost = 4 * 24  # Cost of 4 sausage rolls\n    hotdogs_cost = 5 * 81        # Cost of 5 hotdogs\n    drinks_cost = 7 * 20         # Cost of 7 drinks\n\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n    return total_cost\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    coins = symbols('coins')\n    equation = Eq(1/4 * coins + 2, 1/3 * coins)\n    num_coins = solve(equation, coins)\n    \n    return num_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    singing_shows = 5\n    comedy_shows = 3\n    total_slots = singing_shows + 1  # slots between and around singing shows\n    \n    # Places to insert comedies in the singing sequence (as they cannot be consecutive)\n    # We can place the 3 comedy shows in the 'total_slots' positions\n    comedy_positions = factorial(total_slots) // (factorial(comedy_shows) * factorial(total_slots - comedy_shows))\n    \n    # We can also arrange the singing and the comedy shows independently\n    arrangements = comedy_positions * factorial(singing_shows) * factorial(comedy_shows)\n    \n    return arrangements\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways = trains + cars + flights\n\n    return ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_values = sorted(values)\n    middle_index = len(sorted_values) // 2\n    middle_value = sorted_values[middle_index]\n\n    return middle_value\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # The sum of first 2100 digits after the decimal point\n    # The pattern repeats every 6 digits: 234561\n    pattern = [2, 3, 4, 5, 6, 1]\n    pattern_length = len(pattern)\n\n    # Calculate the full pattern repetitions and the remainder\n    full_repetitions = 2100 // pattern_length\n    remainder = 2100 % pattern_length\n\n    # Calculate the sum for the full pattern repetitions\n    sum_full_repetitions = sum(pattern) * full_repetitions\n\n    # Calculate the sum for the remaining digits\n    sum_remainder = sum(pattern[:remainder])\n\n    # Total sum\n    ans = sum_full_repetitions + sum_remainder\n\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5*x + 7) / 4, 8)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    original_number = (12 + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Assume each statement can be True (1) or False (0)\n    # Create a dictionary to store the possible truth value of each statement\n    statements_truth = {\"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0}\n\n    # Check assumption for each statement\n    for i in range(1, 6):\n        # Reset all statements to false\n        for key in statements_truth:\n            statements_truth[key] = 0\n        \n        # Assume one statement is true\n        statements_truth[str(i)] = 1\n\n        # Verify the assumption\n\n        # Statement 1: All of the statements below are correct\n        if statements_truth[\"1\"] == 1:\n            if statements_truth[\"2\"] == 1 or statements_truth[\"3\"] == 1 or statements_truth[\"4\"] == 1 or statements_truth[\"5\"] == 1:\n                continue\n\n        # Statement 2: None of the statement below is corect\n        if statements_truth[\"2\"] == 1:\n            if statements_truth[\"1\"] == 0 and statements_truth[\"3\"] == 0 and statements_truth[\"4\"] == 0 and statements_truth[\"5\"] == 0:\n                continue  # This cannot be the only true statement\n            else:\n                continue\n\n        # Statement 3: One of the statements above is correct\n        if statements_truth[\"3\"] == 1:\n            if statements_truth[\"1\"] == 1 or statements_truth[\"2\"] == 1:\n                continue\n            else:\n                continue\n\n        # Statement 4: All the statements above are correct\n        if statements_truth[\"4\"] == 1:\n            if statements_truth[\"1\"] == 1 and statements_truth[\"2\"] == 1 and statements_truth[\"3\"] == 1:\n                continue  # This scenario is impossible because it contradicts the assumed truth of only one statement\n            else:\n                continue\n\n        # Statement 5: None of the statement above is correct\n        if statements_truth[\"5\"] == 1:\n            if statements_truth[\"1\"] == 0 and statements_truth[\"2\"] == 0 and statements_truth[\"3\"] == 0 and statements_truth[\"4\"] == 0:\n                return int(i)  # This is the only consistent statement\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(6) // factorial(6 - (6 - 1))\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    min_four_digit_even = float('inf')\n\n    for perm in permutations(digits, 4):\n        if perm[3] in even_digits:\n            num = int(''.join(map(str, perm)))\n            if num < min_four_digit_even:\n                min_four_digit_even = num\n    \n    return min_four_digit_even\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_per_dollar = 4\n\n    num_quarters = total_dollars * quarters_per_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    \n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    total_cost_pence = (10 * 100) - (3.88 * 100)  # Convert pounds to pence and calculate total cost\n    chocolate_cost = 72  # Cost of chocolate in pence\n    balloon_cost = 20  # Cost of each balloon in pence\n\n    # Calculate how much was spent on balloons\n    spent_on_balloons = total_cost_pence - chocolate_cost\n\n    # Calculate the number of balloons\n    number_of_balloons = spent_on_balloons // balloon_cost\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_distance = 2000\n\n    portion_distance = (percentage / 100) * total_distance\n\n    return portion_distance\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity_per_kayak = 4\n    kayaks_needed = (students + capacity_per_kayak - 1) // capacity_per_kayak\n    return kayaks_needed\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let's denote the number of steps of the escalator as n.\n    # When Peter walks at 1 step per second, the escalator takes him up (n - 10) steps.\n    # When Peter walks at 2 steps per second, the escalator takes him up (n - 16) steps.\n    # Since the escalator is moving at a constant rate, we can express this as a ratio:\n    # Time taken at 1 step per second : Time taken at 2 steps per second = (n - 10) : (n - 16).\n\n    # We know the time taken in each scenario.\n    # Time taken for 1 step per second = 10 seconds (because he takes 10 steps).\n    # Time taken for 2 steps per second = 8 seconds (because he takes 16 steps with 2 steps per second).\n\n    # So, the ratio is: 10 : 8 = (n - 10) : (n - 16).\n    # This simplifies to 5 : 4 = (n - 10) : (n - 16).\n    # Now we solve the equation 5*(n - 16) = 4*(n - 10) to find n.\n\n    # Solving the equation:\n    n = symbols('n')\n    eq = Eq(5 * (n - 16), 4 * (n - 10))\n    solution = solve(eq, n)\n    return solution[0]\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500  # total length to pave in meters\n    total_days = 5      # number of days to complete the total length\n\n    meters_per_day = total_length / total_days  # meters paved per day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    subtraction_result = ((4 + 2) * 13) - (4 + (2 * 13))\n    return subtraction_result\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    cost_cupcakes_pizza = spent_fraction * total_money\n\n    # Let x be the cost of one cupcake\n    x = symbols('x')\n\n    # Cost of 3 slices of pizza equals cost of 2 cupcakes: 3p = 2x\n    # 5 cupcakes and 6 slices of pizza cost 5x + 6*(2x/3)\n    equation = Eq(5 * x + 6 * (2 * x / 3), cost_cupcakes_pizza)\n    cost_per_cupcake = solve(equation, x)[0]\n\n    money_left = total_money - cost_cupcakes_pizza\n\n    # Maximum number of cupcakes he can buy with the remaining money\n    max_cupcakes = money_left // cost_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        str_num = str(num)\n        if len(set(str_num)) == len(str_num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Given that the ages of the youngest three add up to 42 years,\n    # and they are consecutive, we can denote their ages as:\n    # y, y+1, y+2\n    # where `y` is the age of the youngest dwarf\n\n    # The sum of their ages is:\n    # y + (y+1) + (y+2) = 42\n\n    # Simplifying:\n    # 3y + 3 = 42\n    # 3y = 39\n    # y = 13, which is the age of the youngest dwarf\n\n    # If 13 is the age of the youngest, then the next two are 14, 15 respectively\n    # The oldest three dwarfs would then be (15+1), (15+2), (15+3)\n    # Their ages add up to:\n    # (15+1) + (15+2) + (15+3)\n\n    # Calculating the sum:\n    age_sum_oldest_three = (15+1) + (15+2) + (15+3)\n\n    return age_sum_oldest_three\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    digits = [2, 3, 5]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    for i in range(1, 6):\n        num = int('2' + '5' * i)\n        if sqrt(num) == floor(sqrt(num)):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    current_pieces = 16\n    pieces_cut = current_pieces - initial_pieces\n    pieces_cut_into_three = pieces_cut // 2  # Each piece cut into three creates 2 additional pieces\n\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Given data\n    workers_initial = 6\n    parts_initial = 120\n    minutes_initial = 4\n\n    workers_final = 3\n    minutes_final = 10\n\n    # Calculate the parts produced by 1 worker in 1 minute\n    parts_per_worker_per_minute = parts_initial / (workers_initial * minutes_initial)\n\n    # Calculate the total parts produced by 3 workers in 10 minutes\n    total_parts_final = workers_final * minutes_final * parts_per_worker_per_minute\n\n    return int(total_parts_final)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = 0.70 * total_pupils\n    non_swimming_boys_ratio = 0.40\n    swimming_girls = 200\n    \n    non_swimming_pupils = total_pupils - swimming_pupils\n    non_swimming_boys = non_swimming_pupils / (1 - non_swimming_boys_ratio)\n    boys = non_swimming_boys / non_swimming_boys_ratio\n    girls = total_pupils - boys\n    \n    return int(girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_ratio\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n    increase = new - original\n    percentage_increase = (increase / original) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factors of 2240\n    factors = factorint(2240)\n\n    # The prime factors need to be raised to an even power for the quotient to be a square\n    # Since it is 2240/n, we need to remove a power of 2 from the prime factors of 2240 \n    # For each prime factor, if it's an odd power, it must be the value of n\n    \n    n = 1\n    for prime in factors:\n        if factors[prime] % 2 != 0:  # If the power is odd\n            n *= prime  # Multiply n by the prime factor\n\n    return n\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n\n    # Equation 1: mass of 3 sacks of rice and 3 packets of oatmeal\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    # Equation 2: each sack of rice is twice as heavy as a packet of oatmeal\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n\n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n    \n    # Equation based on total mass of sugar\n    # 4kg * 30% + x * 10% = (4kg + x) * 26%\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n    \n    # Solve for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jar, chocolate = symbols('jar chocolate')\n\n    # Equation 1: jar + 5 * chocolate = 185g\n    equation1 = Eq(jar + 5 * chocolate, 185)\n    # Equation 2: jar + 17 * chocolate = 317g\n    equation2 = Eq(jar + 17 * chocolate, 317)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jar, chocolate))\n\n    # Calculate the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solutions[jar] + 10 * solutions[chocolate]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    n = 200\n    # Since the sum has to consist of equal parts,\n    # we need to consider the number of divisors of 200.\n    # However, we exclude 1 and the number itself because\n    # the sum must consist of at least two addends and at most (n-1) addends.\n    # To count the number of sums of equal parts, we find \n    # the number of divisors not counting the number itself and 1.\n    factors = [i for i in range(2, n//2+1) if n % i == 0]\n    return len(factors)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    total_length = 2 * (144 + 204)  # Total perimeter length\n    # Subtracting 4 from the count because we already have wheat at each corner\n    distance_between_wheat = total_length / (116 - 4)\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l represent the initial number of sweets Lana had\n    # Let m represent the initial number of sweets Mark had\n    l, m = symbols('l m')\n\n    # Equations based on the problem statement\n    equation1 = Eq(l + m, 674)\n    equation2 = Eq(l - l/3, m - 34)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (l, m))\n\n    # Calculate the difference in initial number of sweets\n    lana_initial = solutions[l]\n    mark_initial = solutions[m]\n    difference = lana_initial - mark_initial\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Define the total holiday duration as a variable\n    total_holiday = symbols('total_holiday')\n    \n    # According to the question, the holiday structure can be represented by the following equation:\n    # total_holiday = half_work + half_relax + 4_days_at_friend + 2_weeks_camp\n    # where:\n    # half_work = total_holiday / 2\n    # half_relax = half_work / 2 = total_holiday / 4\n    # 4_days_at_friend = 4\n    # 2_weeks_camp = 2 * 7 = 14\n    equation = Eq(total_holiday / 2 + total_holiday / 4 + 4 + 14, total_holiday)\n    \n    # Solve the equation for the total holiday duration\n    solution = solve(equation, total_holiday)\n    return solution[0]\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solution = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solution[watermelon]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # minutes\n    cats = 5\n    fish_to_catch = 5\n    \n    # Since the cats work simultaneously, the time to catch one fish\n    # does not change with the number of cats.\n    # Thus, the time it takes 5 cats to catch 5 fish is the same as \n    # the time it takes 1 cat to catch 1 fish, which is 10 minutes.\n    minutes_to_catch_five_fish = time_per_cat_per_fish\n\n    return minutes_to_catch_five_fish\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    multiplied_by = 9\n    divided_by = 4\n    added_number = 3\n    \n    initial_result = (result / multiplied_by) * divided_by - added_number\n    \n    return initial_result\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # The total perimeter of the rectangular field\n    perimeter = 2 * (144 + 204)\n    \n    # Since there are 116 wheat in total and every corner has a wheat,\n    # we have to subtract the 4 corners to get the number of intervals\n    intervals = 116 - 4\n    \n    # The distance between every 2 wheat is the total perimeter divided by the number of intervals\n    distance = perimeter / intervals\n    \n    return distance\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_after_morning\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_to_make = total_bracelets - bracelets_made\n\n    return bracelets_to_make\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n\n    # Compute how many people Ellie can interview in 4 weeks\n    ellie_people = ellie_rate * combined_weeks\n    \n    # Remaining number of people that Gloria has to interview\n    gloria_people = total_people - ellie_people\n    \n    # The weekly rate at which Gloria interviews people\n    gloria_rate = gloria_people / combined_weeks\n    \n    # The number of weeks it would take Gloria to finish all interviews by herself\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        F, A, C, E = perm\n        ABCDEF = int(f'2{A}0{C}{E}{F}')\n        EFABCD = int(f'{E}{F}2{A}0{C}')\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f'FACE')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3 / 8\n    number = 48\n\n    ans = fraction * number\n\n    return ans\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    rice_in_A = 0.40 * 15\n    rice_in_mix = 0.28 * total_weight\n    rice_in_B = rice_in_mix - rice_in_A\n    percent_rice_in_B = (rice_in_B / 60) * 100\n\n    return percent_rice_in_B\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    distance = 150\n    interval = 10\n\n    num_trees = (distance // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # in milliliters\n    total_minutes = 2 * 60  # convert 2 hours to minutes\n    total_milliliters = rate_per_minute * total_minutes\n    total_liters = total_milliliters / 1000  # convert milliliters to liters\n    return total_liters\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the four numbers\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n\n    # Define equations based on the given conditions\n    equation1 = Eq(((b + c + d) / 3) + a, 39)  # sum of smallest number and average of other three\n    equation2 = Eq(((a + b + c) / 3) + d, 51)  # sum of largest number and average of other three\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b, c, d))\n\n    # Filter out non-distinct solutions and find max d\n    max_d = 0\n    for sol in solutions:\n        if len(set(sol)) == 4:  # Ensure the numbers are distinct\n            max_d = max(max_d, sol[d])\n\n    return max_d\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n\n    total_received = ten_dollar_notes * 10 + five_dollar_notes * 5 + twenty_cent_coins * 0.20\n    money_spent = 100 - total_received\n\n    return money_spent\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    frying_time_per_plate = 3\n    total_time_available = 18\n    number_of_plates = total_time_available // frying_time_per_plate\n    return number_of_plates\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    total_sum = Eq(A + B + C, 200)\n    ratio_A_B = Eq(A, 4/3 * B)\n    diff_A_C = Eq(A, C + 20)\n\n    solutions = solve((total_sum, ratio_A_B, diff_A_C), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed in metres per minute\n    barbara_speed = 60\n    # Catherine's speed in metres per minute\n    catherine_speed = 45\n    # Catherine is behind by 60 metres\n    catherine_behind_distance = 60\n    \n    # Both started at the same time and Barbara reached the mall when Catherine had 60 meters to go\n    # That means Barbara traveled the distance to the mall while Catherine traveled the distance to the mall minus 60 meters\n    # Let x be the distance to the mall\n    # Barbara's distance = Catherine's distance + 60\n    # Barbara's time to reach = Catherine's time to reach + time taken for last 60 meters by Catherine\n    # Barbara's time = (x / barbara_speed)\n    # Catherine's time = ((x - 60) / catherine_speed)\n    # So, (x / barbara_speed) = ((x - 60) / catherine_speed), solve for x\n    \n    # Rearrange the equation\n    # x / 60 = (x - 60) / 45\n    # Multiply both sides by 60 * 45 (LCM of 45 and 60) to get rid of denominators\n    x = (60 * 45 * 60) / (60 - 45)\n    \n    return x\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nini, dad = symbols('nini dad')\n    \n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n    \n    solutions = solve((equation1, equation2), (nini, dad))\n    \n    return solutions[nini]\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    return dividend // divisor\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    pears_sold_first_day = total_pears * 2 // 5\n    remaining_pears = total_pears - pears_sold_first_day\n    pears_sold_second_day = remaining_pears * 7 // 9\n\n    return pears_sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_leads = boys * girls\n    return ways_to_pick_leads\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Let's start by assuming the minimum class size where each student gets at least 3 apples\n    min_class_size = 29 // 3  # Using floor division for the minimum\n    # However, because we want at least one student to get more than 2 apples,\n    # we distribute 3 apples to each student, and then give the remaining apples\n    # to a student, ensuring that at least one student gets at least 3 apples.\n    remaining_apples = 29 % 3\n    # If there are any remaining apples, we need to have an additional student.\n    if remaining_apples > 0:\n        min_class_size += 1\n    \n    return min_class_size\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if num != reversed_num and isprime(reversed_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    probability_at_each_bar = 1 / 3\n    probability_not_at_two_bars = probability_at_each_bar\n    return probability_not_at_two_bars\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot_age_now, cousin_age_now = symbols('eliot_age_now cousin_age_now')\n\n    equation1 = Eq(eliot_age_now, 2 * cousin_age_now)\n    equation2 = Eq(eliot_age_now + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot_age_now, cousin_age_now))\n\n    cousin_age_then = solutions[cousin_age_now] + 4\n\n    return cousin_age_then\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    # After 2/5 of the blue balls and 28 green balls were removed, there was an equal number of green and blue balls left\n    equation1 = Eq(green - 28, blue - (2/5) * blue)\n\n    # There were a total of 140 green and blue balls in a bag\n    equation2 = Eq(green + blue, 140)\n\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_second_catch = 16\n    total_fish_second_catch = 100\n    total_marked_fish_first_catch = 100\n\n    estimated_total_fish = (total_fish_second_catch * total_marked_fish_first_catch) / marked_fish_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let x be the distance Nancy walks\n    # Randy walks 3/2 times the distance Nancy walks (ratio of their speeds) plus 10 meters\n    # distance between Nancy and Randy when they meet is x + (3/2)x + 10\n    # set up the equation and solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + (3/2) * x + 10, 2 * x + 10)\n    \n    # Solve for x\n    distance_nancy = solve(equation, x)[0]\n    # Calculate the distance Randy walked\n    distance_randy = (3/2) * distance_nancy + 10\n    # The distance between them when they set off\n    total_distance = distance_nancy + distance_randy\n\n    return total_distance\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    num1 = 1 + 3/99\n    num2 = 3 + 3/33\n    num3 = 9 + 3/11\n\n    denom1 = 1 + 1/99\n    denom2 = 3 + 1/33\n    denom3 = 9 + 1/11\n\n    numerator = num1 + num2 + num3\n    denominator = denom1 + denom2 + denom3\n    \n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = [True] * 50  # Initially, all students are facing the teacher\n\n    # Students who reported multiples of 4 turn backwards\n    for i in range(3, 50, 4):\n        students[i] = not students[i]\n\n    # Students who reported multiples of 6 turn backwards\n    for i in range(5, 50, 6):\n        students[i] = not students[i]\n\n    # Count how many students are still facing the teacher\n    count = students.count(True)\n    return count\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    equation1 = Eq(ali, ((bronson + charlie) / 2) - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Represent the recurring decimal as a geometric series\n    recurring_part = 14 * (1/100 + 1/10000 + 1/1000000 + ...)\n    \n    # Calculate the sum of the geometric series (14/99)\n    sum_recurring_part = 14 / (1 - 1/100)\n    \n    # The value of the recurring decimal is 20 + the sum of the recurring series\n    recurring_decimal = 20 + sum_recurring_part / 100\n\n    # Multiply both sides of the equation x/9900 = recurring_decimal to find x\n    x = recurring_decimal * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 999999):\n        if int(str(2) + str(num)[:-1]) == num // 3 and str(num)[-1] == '2':\n            return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_both = passed_first - passed_second_failed_first\n    passed_only_first = passed_first - passed_both\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    least_solution, _ = solve_congruence(*congruences)\n    \n    ans = None\n    while least_solution < 1000:\n        if least_solution > 500:\n            ans = least_solution\n            break\n        least_solution += 5 * 8 * 9  # The product of moduli\n    \n    return ans\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            number = (10*a + b) * (10*b + a)\n            if str(number)[1] == '0' and str(number)[2] == '0':\n                return 10*a + b\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    # Initialize count of valid numbers\n    count = 0\n    \n    # List of even digits for the ones place\n    even_digits = [0, 2, 4, 6, 8]\n    \n    # Loop over all possible hundreds digits (1 through 9)\n    for i in range(1, 10):\n        # Loop over all possible tens digits (0 through 9)\n        for j in range(10):\n            # Since the sum must be 8 and all digits must be different,\n            # the ones digit is determined by subtracting the other two from 8.\n            k = 8 - i - j\n            \n            # Check if k is an even digit, k is not equal to i or j (all digits are different),\n            # and k is between 0 and 9.\n            if k in even_digits and k != i and k != j and 0 <= k <= 9:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit will appear in each position (hundreds, tens, ones) twice\n    # because there are 3! = 6 permutations and the total permutations are evenly distributed\n    sum_of_digits_each_position = 2 * (a + b + c)\n\n    # The place values contribute by a factor of 100 for hundreds, 10 for tens, and 1 for ones\n    sum_of_all_numbers = sum_of_digits_each_position * (100 + 10 + 1)\n\n    return sum_of_all_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Sold half of the apples and 35 oranges\n    equation1 = Eq(oranges - 35, apples / 2)\n    \n    # Total number of oranges and apples\n    equation2 = Eq(oranges + apples, 125)\n\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    return round(5/9, 2)\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    small_sack, large_sack = symbols('small_sack large_sack')\n\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(small_sack + large_sack, 77)\n\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return int(solutions[large_sack])\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    min_cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins_needed\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # Least 5-digit palindrome number\n    least_5_digit_palindrome = int(\"10001\")\n    \n    # Greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int(\"999999\")\n    \n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    # We will count the digits by ranges.\n    # 1-9: 9 single-digit numbers\n    # 10-58: 49 two-digit numbers\n    single_digit_numbers = 9\n    two_digit_numbers = 58 - 9\n\n    # we multiply the number of occurrences with the number of digits in each range\n    total_digits = single_digit_numbers * 1 + two_digit_numbers * 2\n\n    return total_digits\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 1201):\n        total_digits += len(str(i))\n    \n    right_index = total_digits - 2011\n    current_index = 0\n\n    for i in range(1, 1201):\n        current_number = str(i)\n        num_digits = len(current_number)\n        if current_index + num_digits > right_index:\n            return int(current_number[right_index - current_index])\n        current_index += num_digits\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_to_the_right = 6\n\n    total_books = position_from_left + books_to_the_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    sum_of_multiples = sum([x for x in range(5, 51, 5)])\n    return sum_of_multiples\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    # Let x be the total number of coins on the table\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # If one quarter of the coins are showing heads, then there are x/4 heads\n    # By flipping two more coins, the number of heads becomes x/4 + 2\n    # Then, one third of the coins are showing heads, which is x/3\n    # Based on the condition, we can setup the equation: x/4 + 2 = x/3\n    \n    equation = Eq(x/4 + 2, x/3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    cereal_bars = 43\n    people = 4\n    remainder = cereal_bars % people\n    return remainder\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    distance_planet1 = 30 * 5  # 30 km per minute for 5 minutes\n    distance_planet2 = 40 * 5  # 40 km per minute for 5 minutes\n    total_distance = distance_planet1 + distance_planet2\n    return total_distance\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    tens_place_options = 5  # Cannot be 0 for two-digit numbers\n    ones_place_options = 6  # Can be 0-5 for ones, even if used in tens\n\n    total_combinations = tens_place_options * ones_place_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20  # 20% discount\n\n    # If the price was reduced by 20%, Peter paid 80% of the original price\n    original_price = paid_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cars and m be the number of motorbikes\n    c, m = symbols('c m')\n\n    # Each car has 4 tyres, each motorbike has 2 tyres\n    # Total number of vehicles (cars + motorbikes) is 140\n    equation1 = Eq(c + m, 140)\n\n    # Total number of tyres is 490\n    # 4 tyres per car and 2 tyres per motorbike\n    equation2 = Eq(4*c + 2*m, 490)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, m))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    apple_ratio = 4\n    orange_ratio = 5\n    total_ratio = apple_ratio + orange_ratio\n    \n    apple_litres = (apple_ratio / total_ratio) * total_litres\n    \n    return apple_litres\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    height_to_climb = 11\n    day_climb = 3\n    night_slide = 1\n    current_height = 0\n    days = 0\n\n    while current_height < height_to_climb:\n        days += 1\n        current_height += day_climb\n        if current_height >= height_to_climb:\n            break\n        current_height -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box_avocados = 8\n\n    num_boxes = total_avocados // per_box_avocados\n\n    return num_boxes\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n')\n    # Setup the congruence equations based on the remainders and the unknown number n\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the system of congruences for a and n\n    solutions = solve((eq1, eq2, eq3), (a, n))\n\n    # There can be multiple solutions, we find the valid n by checking divisibility\n    for sol in solutions:\n        a_value, n_value = sol\n        if 190 % n_value == a_value and 137 % n_value == a_value + 4 and 101 % n_value == a_value + 6:\n            # We have found the correct values for a and n\n            # Now we find the remainder when 299 is divided by this number\n            remainder_when_299_divided = 299 % n_value\n            return remainder_when_299_divided\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    # Start from the smallest number that satisfy the first condition\n    number = 1  \n    while True:\n        # Check if the number also satisfies the second condition\n        if number % 13 == 1:\n            return number\n        # Increment by 2 because the number must always have a remainder of 1 when divided by 2\n        number += 2\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9 / 5) * (25 / 100) + (1 / 4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    number_of_classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * number_of_classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    largest_sum = 0\n    for x in range(2, 200):\n        if isprime(x):\n            y = (200 - x) / (x + 1)\n            if y.is_integer() and isprime(y) and x != y:\n                current_sum = x + int(y)\n                if current_sum > largest_sum:\n                    largest_sum = current_sum\n    return largest_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_numbers = factorial(6)\n    duplicate_twos = factorial(2)\n    duplicate_threes = factorial(2)\n    ans = total_numbers // (duplicate_twos * duplicate_threes)\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Given that Bud spends 2p which is one-quarter of her money,\n    # we can set up the equation as follows:\n    # Let x be the total amount of money Bud had initially.\n    # Then one-quarter of x is 2p.\n    # 1/4 * x = 2\n    # To find x, we multiply both sides by 4.\n    x = 2 * 4\n    \n    return x\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(doc + sleepy, dopey + sneezy)\n    equation7 = Eq(sleepy, 80)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    # Each team plays against all other teams once, so for each team there will be 7 games.\n    # Since every match involves 2 teams, we'll divide by 2 to avoid double counting.\n    rounds = (teams * (teams - 1)) // 2\n\n    return rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    result = (5 + 1/6 + 6 + 1/5) / (1/6 + 1/5)\n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7 / 9) * 27\n    return result\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    final_number = 26\n    added_number = 12\n\n    original_number = (final_number - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted(map(lambda x: int(''.join(x)), permutations(digits)))\n    return all_permutations[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Calculate the rate of construction per day\n    rate_per_day = 1000 / 5\n    \n    # Calculate the number of days needed to construct a 2600-meter highway\n    days_needed = 2600 / rate_per_day\n    \n    return days_needed\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_covered_in_5_hours = 250\n    time_taken_for_5_hours = 5\n    time_taken_for_3_hours = 3\n\n    speed_per_hour = distance_covered_in_5_hours / time_taken_for_5_hours\n    distance_covered_in_3_hours = speed_per_hour * time_taken_for_3_hours\n\n    return distance_covered_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    ans = 0\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = last_term - first_term + 1\n    \n    # If the count of numbers is even, the sum will have the same parity as the individual numbers.\n    if num_terms % 2 == 0:\n        if first_term % 2 == 0:\n            ans = \"even\"\n        else:\n            ans = \"odd\"\n    else:\n        # If the count of numbers is odd, the sum will have opposite parity to the individual numbers.\n        if first_term % 2 == 0:\n            ans = \"odd\"\n        else:\n            ans = \"even\"\n            \n    return ans\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    num_trees = 30\n    distance_apart = 5\n\n    # Since the trees are 5m apart and there are 30 trees, the length of the road is\n    # the distance for 29 intervals between trees plus the room for the first tree.\n    length_of_road = (num_trees - 1) * distance_apart\n\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    result = 54 * 7\n    return result\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_pages = 345\n    digits = 0\n    for i in range(1, total_pages + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n    buses_needed = total_people / max_capacity\n    return -(-total_people // max_capacity)  # We use ceiling division to round up\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # First 30 min, traveled x/2 miles (since 30 min is 1/2 hour)\n    distance_first = x / 2\n\n    # Second 30 min, traveled (x - 20)/2 miles\n    distance_second = (x - 20) / 2\n\n    # Last 30 min, traveled (x + 10)/2 miles\n    distance_last = (x + 10) / 2\n\n    # Sum of distances should be equal to 70 miles, the total distance\n    equation = Eq(distance_first + distance_second + distance_last, 70)\n\n    # Solve the equation to find x\n    solution = solve(equation, x)\n\n    # If there are multiple solutions, we will return the one that\n    # makes sense within the context of the problem (x has to be greater than 20)\n    for sol in solution:\n        if sol > 20:\n            return sol\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial as fact\n    \n    # Coach stands in the middle, hence fixed position (1 way)\n    coach_fixed = 1\n    \n    # The captain can be either to the left or right of the coach (2 ways)\n    captain_choice = 2\n    \n    # Remaining 5 people can be arranged in any order (5! ways)\n    other_players = fact(5)\n    \n    # Applying the multiplication principle\n    total_ways = coach_fixed * captain_choice * other_players\n    return total_ways\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    # Let total prize money be x\n    # Denise won 1/5 of x for singles and 1/15 of x for doubles\n    # Total money Denise won equals £360\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((1/5)*x + (1/15)*x, 360)\n    total_prize_money = solve(equation, x)\n    \n    return total_prize_money[0]\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    penguins = 1  # Starting with 1 penguin since at least 1 penguin gets fish\n    while True:\n        total_fish_3 = 3 * penguins + 25\n        if (total_fish_3 - 1) % 6 == 0:\n            return penguins\n        penguins += 1\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    return cube_root + square\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    current_number = 1\n    \n    for term in range(1, 31):\n        sum_of_terms += current_number\n        if term == (current_number * (current_number + 1)) // 2:\n            current_number += 1\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # We start trying square sizes from 1x1 to guarantee the smallest square has more boys.\n    n = 1\n    \n    # We'll keep checking larger squares until we find a solution.\n    while True:\n        # Boys occupy the outer layer and the next odd layers.\n        # Girls occupy the inner even layers.\n        # Therefore, on a square of side n, if n is even, (n/2)^2 boys and ((n-2)/2)^2 + 1 girls.\n        # If n is odd, ((n+1)/2)^2 boys and ((n-1)/2)^2 girls.\n        # We equate boys - girls = 20 and find n that satisfies this condition.\n        \n        if n % 2 == 0:\n            boys = (n // 2) ** 2\n            girls = ((n - 2) // 2) ** 2 + 1\n        else:\n            boys = ((n + 1) // 2) ** 2\n            girls = ((n - 1) // 2) ** 2\n            \n        # If we find a solution, we calculate the total and break the loop.\n        if boys - girls == 20:\n            total_students = boys + girls\n            return total_students\n        \n        # Otherwise, we move on to the next number.\n        n += 1\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = 0.25 * 20 + 1/5 * 30 + 2/3 * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    qiang, rory, sophia = symbols('qiang rory sophia')\n    \n    # Each person's sum of the other two hats\n    equation1 = Eq(qiang + rory, 22)\n    equation2 = Eq(qiang + sophia, 17)\n    equation3 = Eq(rory + sophia, 11)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n\n    # Find the largest number from the solutions\n    largest_number = max(solutions[qiang], solutions[rory], solutions[sophia])\n\n    return largest_number\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    votes_cindy = 47\n    remaining_votes = total_votes - (31 + 41 + votes_cindy)\n    votes_needed_for_majority = max(31, 41) + 1 - votes_cindy\n    \n    if votes_needed_for_majority < 0:\n        # Cindy already has the majority\n        return 0\n    else:\n        # Ensure Cindy surpasses the current highest vote count\n        return max(votes_needed_for_majority, remaining_votes)\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age in 2005\n    gina_age_2005 = 50\n    \n    # James's age in 1997\n    james_age_1997 = 20\n    \n    # Calculating the year when James was born\n    james_birth_year = 1997 - james_age_1997\n    \n    # Since Gina and James both have the same reference date (10th May),\n    # we calculate Gina's age when James was born\n    # by subtracting the years between Gina's reference age year (2005) \n    # and James's birth year\n    \n    gina_age_when_james_born = gina_age_2005 - (2005 - james_birth_year)\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Evaluate the first fraction\n    numerator_1 = 7 / -3.333333333333333  # The repeating decimal -3.3... is approximated\n    denominator_1 = (-0.027)**(1/3)  # The cube root of -0.027\n    fraction_1 = numerator_1 / denominator_1\n    \n    # Evaluate the second fraction\n    numerator_2 = 2**3 / 4**2\n    denominator_2 = 0.125 * (1.8 - (0.2 * 7))\n    fraction_2 = numerator_2 / denominator_2\n    \n    # Evaluate the third expression inside the brackets\n    fraction_3 = 0.1 / 0.142857142857  # The repeating decimal 0.142857 is approximated\n    expression_3 = fraction_3 + (2 * 0.3)\n    \n    # The final expression calculation\n    ans = fraction_1 + fraction_2 - expression_3\n    return ans\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the total sales\n    x = symbols('x')\n\n    # Equation for the salesperson's total salary for July\n    total_salary = 2500 + 0.02 * x + 0.05 * (x - 25000)\n\n    # Setting up the equation based on the condition that the salary is $3300\n    equation = total_salary - 3300\n\n    # Solve for x\n    sales = solve(equation, x)\n\n    # Since commission changes after $25000, we need to ensure sales > 25000\n    for sale in sales:\n        if sale > 25000:\n            return sale\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_for_four = 150 - 2\n    total_height_for_four = 4 * average_height_for_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n    \n    return average_height_for_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing the first test\n    p_first = 0.4\n\n    # Probability of passing the second test given the first was failed\n    p_second = (1 - p_first) * 0.5\n\n    # Probability of passing the third test given the first two were failed\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    p_pass_before_fourth = p_first + p_second + p_third\n\n    return p_pass_before_fourth\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    # ryan:audrey = 2:7 (Initial ratio)\n    equation1 = Eq(ryan/audrey, 2/7)\n\n    # ryan + 20 : audrey - 80 = 1:3 (Ratio after changes)\n    equation2 = Eq((ryan + 20)/(audrey - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    n = 30\n    first_term = 50\n    common_difference = -1\n    last_term = first_term + (n - 1) * common_difference\n    sum_of_terms = n * (first_term + last_term) / 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50\n    time_needed = total_pieces / average_rate\n    return time_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n    \n    zero_count = 0\n    while factorial % 10 == 0:\n        zero_count += 1\n        factorial //= 10\n    \n    return zero_count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age = symbols('age')  # Define the symbol for grandpa's age\n    \n    # Create an equation based on the description\n    equation = Eq((age / 4) + 32, age - 22)\n    \n    # Solve the equation\n    solution = solve(equation, age)\n    \n    return solution[0]  # Return grandpa's age\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digits_in_book = 0\n\n    for number_length in range(1, 5):  # Page numbers can have 1 to 4 digits\n        max_number = 10**number_length - 1  # Max number with current length\n        pages_in_length = max_number - (10**(number_length - 1) - 1)\n        digits_in_length = pages_in_length * number_length\n\n        if digits_in_book + digits_in_length >= digits:\n            remaining_digits = digits - digits_in_book\n            pages += remaining_digits // number_length\n            break\n        else:\n            digits_in_book += digits_in_length\n            pages += pages_in_length\n\n    return pages\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Suppose there are n layers, with boys on the outside.\n    # For each layer, the number of boys is (2n - 1)^2 - (2n - 3)^2\n    # And the number of girls is (2n - 3)^2 - (2n - 5)^2\n    # We continue this pattern until there are no more layers of girls.\n    # The total difference between boys and girls is 44.\n    # We need to find n such that the difference is exactly 44, then calculate the total number of students.\n    \n    # Starting assumptions\n    n = 1  # Start with 1 layer\n    boys_diff = 0\n    girls_diff = 0\n    \n    while True:\n        current_boys = (2 * n - 1) ** 2\n        current_girls = (2 * n - 3) ** 2 if n > 1 else 0  # No girls in the first layer\n        \n        # Accumulate the differences\n        boys_diff += (current_boys - current_girls)\n        girls_diff += (current_girls - (2 * n - 5) ** 2 if n > 2 else 0)\n\n        # Check if the difference is 44\n        if boys_diff - girls_diff == 44:\n            break\n\n        # Increase the number of layers and continue\n        n += 1\n    \n    # Once we have the number of layers, total students is the boys in the outermost layer squared\n    total_students = (2 * n - 1) ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total distance snail needs to climb\n    total_distance = 18\n    \n    # Distance climbed during the day\n    daily_climb = 7\n    \n    # Exception on the 6th day where the snail climbs only 3 meters\n    day_six_climb = 3\n    \n    # Total distance climbed after 5 days\n    distance_after_five_days = daily_climb * 5\n\n    # Distance remaining after 5 days\n    remaining_distance_day_six = total_distance - distance_after_five_days\n    \n    if remaining_distance_day_six <= day_six_climb:\n        # If the remaining distance is less than or equal to the distance the snail climbs on the 6th day,\n        # It means that the snail will climb out on the 6th day without sliding down at night.\n        nightly_slide = 0\n    else:\n        # If the remaining distance is more than the distance the snail can climb on the 6th day,\n        # we calculate the nightly slide by seeing how much is left after the snail climbs on the 6th day\n        # and slides back that night.\n        nightly_slide = (remaining_distance_day_six - day_six_climb) + daily_climb - remaining_distance_day_six\n    \n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_second_student = 0\n    for first in range(1, 48 - 3):\n        for second in range(first + 1, 48 - 2):\n            for third in range(second + 1, 48 - 1):\n                for fourth in range(third + 1, 48):\n                    if first + second + third + fourth == 48:\n                        if second > max_apples_second_student:\n                            max_apples_second_student = second\n    return max_apples_second_student\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 4):\n        ans += (i ** 2) - ((i + 1) ** 2) + ((i + 2) ** 2) - ((i + 3) ** 2)\n    return ans\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Initial time required\n    total_time = 0\n    # The time it takes for each person to cross the river\n    eddie, jack, rose, mary = 1, 2, 5, 10\n    # Sort the times in ascending order\n    persons = sorted([eddie, jack, rose, mary])\n    \n    # While there are more than 2 people on the starting side\n    while len(persons) > 2:\n        # Two fastest cross together, fastest returns\n        total_time += persons[1] + persons[0]\n        # Two slowest cross together, second fastest returns\n        total_time += persons[-1] + persons[1]\n        # Remove the two slowest who have crossed\n        persons = persons[:-2]\n    \n    # Final two people cross together\n    total_time += persons[1]\n    \n    return total_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let's denote the length of the original rectangle as L \n    # and the width of the original rectangle as W. \n    # The new length after increasing 12 cm is L + 12.\n    # The perimeter of the new rectangle is 38 cm.\n    # The perimeter of a rectangle is given by P = 2 * (Length + Width)\n    # The equation for the perimeter of the new rectangle is:\n    # 2 * (L + 12 + W) = 38\n    # Solve for L + W (the sum of length and width of the original rectangle),\n    # and then calculate the perimeter of the original rectangle as 2 * (L + W).\n    \n    # Given equation: 2 * (L + 12 + W) = 38\n    # Simplify the equation: L + 12 + W = 19\n    # Now, we need to express L + W (the sum of the original length and width): L + W = 19 - 12\n    \n    # Calculate the sum of the original length and width:\n    sum_original = 19 - 12\n    \n    # Calculate the perimeter of the original rectangle using the sum of its original length and width:\n    perimeter_original = 2 * sum_original\n    \n    return perimeter_original\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2 ** 19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 1 and number % 4 == 1:\n            return number\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    num_students = 4\n    ways = factorial(num_students)\n\n    return ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Number of ways if she eats chocolate on the first day\n    # Second day she can choose between peaches and strawberries (2 options)\n    # Third day she can choose the remaining one (1 option)\n    # Total ways: 2 (second day) * 1 (third day)\n    return 2 * 1\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # remaining money after buying the television\n    remaining_after_tv = 160 / (1 - 3/4)\n\n    # total salary\n    total_salary = remaining_after_tv / (1 - 5/9)\n\n    # cost of the television\n    cost_of_tv = total_salary * 5/9\n\n    return cost_of_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # There are 7 people to seat around 8 seats, \n    # we fix one person and arrange the rest since rotation doesn't count as different.\n    # So we need to arrange 6 people in a circular table, disregarding rotations.\n    ans = factorial(6)\n\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5 / 3)\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since the order of the numbers does not matter (1+7 and 7+1 is considered the same),\n    # we only need to count each pair once.\n    # We will iterate from 1 to (8-1) / 2 = 3.5, and round it down to the nearest whole number.\n    # This is because we want only positive numbers and distinct pairs.\n    # We can use integer division for that, which is equivalent to floor division in this case.\n    \n    total_ways = 8 // 2  # This will give us the number of ways.\n\n    return total_ways\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_in_two_reams = sheets_per_quire * quires_per_ream * reams\n    return sheets_in_two_reams\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # In 3 years, the age sum is 27\n    future_age_sum = Eq(john_age + 3 + emma_age + 3, 27)\n    # Emma's age is the difference between her and John's ages\n    age_difference = Eq(emma_age, john_age - emma_age)\n\n    solutions = solve((future_age_sum, age_difference), (john_age, emma_age))\n\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Given data\n    coffee_people = 7\n    cola_percentage = 30\n    water_angle = 36\n\n    # The angle for water in the pie chart corresponds to the percentage for water.\n    # Since a full circle is 360 degrees, we can calculate the water percentage.\n    water_percentage = (water_angle / 360) * 100\n\n    # Calculate the percentage for tea (since it's mentioned to be 1/4 of the total)\n    tea_percentage = 25  # 1/4 expressed as a percentage\n\n    # Now we can calculate the total percentage of the people who chose tea, coffee, and cola\n    total_known_percentage = tea_percentage + cola_percentage + water_percentage\n\n    # The total percentage of all choices should be 100% for all the people who took the survey.\n    # Therefore, the percentage of people who chose coffee can be found by subtracting the known percentages from 100%.\n    coffee_percentage = 100 - total_known_percentage\n\n    # Since we know the number of people who chose coffee and its corresponding percentage,\n    # we can calculate the total number of people who took the survey (the base).\n    total_people = coffee_people * (100 / coffee_percentage)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    dogs = 3 * children\n    # Each child has 2 legs and each dog has 4 legs\n    total_legs_eq = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve(total_legs_eq, children)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # If 2/5 of the class are absent, then 3/5 of the class are present.\n    # Let x be the total number of pupils in the class.\n    # Then (3/5) * x = 18 (number of pupils present).\n\n    # We can isolate x by dividing both sides by (3/5) (which is the same as multiplying by (5/3))\n    x = 18 * (5/3)\n\n    # Return the total number of pupils as an integer.\n    return int(x)\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    saturday, sunday = symbols('saturday sunday')\n    \n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n    \n    return solutions[saturday]\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_meters = 1.36\n    height_centimeters = height_meters * 100\n    return height_centimeters\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_payment = income * tax_rate\n    net_income = income - tax_payment\n\n    return net_income\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    # Calculate the number of trees along the length (excluding the corner tree since it will be counted in width)\n    length_trees = (50 // 2) \n    \n    # Calculate the number of trees along the width (excluding the corner tree since it will be counted in length)\n    width_trees = (30 // 2) \n    \n    # Four corners have one tree each, but we subtracted 2 to avoid counting the corner trees both in length and width\n    total_trees = (length_trees + width_trees) * 2 - 4 \n        \n    return total_trees\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n    \n    max_adults = total_charge // adult_price\n    count = 0\n    \n    for adults in range(2, max_adults + 1):\n        if (total_charge - adults * adult_price) % child_price == 0:\n            children = (total_charge - adults * adult_price) // child_price\n            count = children\n            break\n            \n    return count\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people_count = 3\n    sweets_per_person = total_sweets // people_count\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**6):  # Set a reasonable upper bound for the search\n        initial = str(i) + '9'\n        new_number = '9' + str(i)\n        if int(new_number) == 4 * int(initial):\n            return int(initial)\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n\n    # Jack's speed is 50 km/h\n    jack_speed = 50\n\n    # Jack left 3 hours later\n    jack_delay = 3\n\n    # After another 5 hours, the cars are 15 km away from each other\n    # This means they have been approaching each other for a total of 5 hours\n    approach_time = 5\n\n    # In this time, Tom has traveled for 8 hours (3 hours before Jack started + 5 hours)\n    tom_travel_time = jack_delay + approach_time\n\n    # Calculate the distance Tom has traveled\n    tom_distance = tom_travel_time * tom_speed\n\n    # Calculate the distance Jack has traveled\n    jack_distance = approach_time * jack_speed\n\n    # The total distance between A and B\n    total_distance = tom_distance + jack_distance + 15  # Plus the remaining 15 km\n\n    return total_distance\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    orange_squash_ml = 750\n    total_parts = 1 + 9\n    total_mixture_ml = (orange_squash_ml * total_parts) // 1\n    bottle_ml = 1000\n    full_bottles = total_mixture_ml // bottle_ml\n    return full_bottles\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n\n    ans = right_side / left_side\n    \n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # cost of the book and the bag together\n    total_cost = 132\n    \n    # Let's assume Li Yan had \"x\" dollars initially.\n    # She spent 1/3 of it on a book, so she spent (1/3)x dollars on the book.\n    # She now has 2/3 of the money left, which is (2/3)x dollars.\n    # Out of the remainder, she spent 1/2 of it on a bag, so she spent (1/2)(2/3)x = (1/3)x dollars on the bag.\n    # Together, the book and the bag therefore cost (1/3)x + (1/3)x = (2/3)x dollars, which we know is $132.\n    \n    # Following this correct logic we can set up an equation: (2/3)x = $132\n    # To find the value of \"x\", we divide by 2 and then multiply by 3.\n    x = (132 * 3) / 2\n    \n    # Checking Thomas's solution, which assumes the sum of 1/3 and 1/2 is 5/6 (which is incorrect)\n    # If we correct it, the sum of 1/3 from the original amount and 1/2 of the remainder (which is 1/3)\n    # leads to 1/3 + 1/6 = 1/2 (not 5/6).\n    \n    # Therefore, Thomas's calculation was incorrect.\n    return x\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    remainder = pow(base, exponent, divisor)\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # We are looking for the last 2 digits of each term, therefore we operate modulo 100\n    term1 = 6**2015 % 100  # The last 2 digits of 6^2015\n    term2 = (2015 * 6) % 100  # The last 2 digits of 2015 * 6\n    term3 = 2015**6 % 100  # The last 2 digits of 2015^6\n\n    # Sum up the last 2 digits of each term and then find the last 2 digits of the result\n    ans = (term1 + term2 + term3) % 100\n\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since 1 and the number itself are always factors, we have 1 and 8, which implies the number is a multiple of 8\n    # Factors are 1, 2, 4, 7, 8, so the missing three factors are 7 * 2, 7 * 4 and the number itself.\n    \n    factors = [1, 2, 4, 7, 8]\n\n    # Add the remaining factors\n    factors.append(7 * 2)  # 14\n    factors.append(7 * 4)  # 28\n\n    # Since there are 8 factors and we now have 7, the last factor is the number itself\n    # The largest factor which is the product of 7 (the largest of the first 5 factors) and the second largest factor\n    # Hence, the number itself is 7 * 8 = 56\n\n    factors.append(7 * 8)  # 56\n\n    # So the number with these factors is 56\n    ans = factors[-1] \n    return ans\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    result = tens + tenths + hundredths\n    return result\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 10 / 100\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    cows, goats = symbols('cows goats', integer=True)\n    \n    # Equation for the initial condition, where 65% of the animals are cows\n    eq_initial = Eq(cows, 0.65 * (cows + goats))\n    \n    # Equation for the final condition, where cows are 85% and goats have doubled after adding 240 animals\n    eq_final = Eq(cows + 240, 0.85 * (cows + goats + 240))\n    eq_goats_doubled = Eq(goats * 2, goats + 240)\n    \n    # Solve the system of equations\n    solution = solve((eq_initial, eq_final, eq_goats_doubled), (cows, goats))\n    \n    return solution[goats]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from fractions import Fraction\n\n    # Let x be the total number of cookies in the box\n    x = symbols('x')\n\n    # James sold 7/20 more cookies in the second month than the first month\n    cookies_sold_second_month = 1680 + (7/20) * x\n\n    # James kept 3/20 less cookies\n    cookies_kept_decrease = (3/20) * x\n\n    # Equation: First month cookies kept + Second month cookies kept decrease = Second month cookies kept\n    equation = Eq((x - 1680) + cookies_kept_decrease, x - cookies_sold_second_month)\n\n    # Solve the equation to find x\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n\n    total_children = jolene_position + amy_position - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Since B=2 and D=0 the equation becomes:\n    # 5 × A2C0EF = 6 × EF0A2C\n    # To find FACE, we need to determine A, C, E, F\n    \n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # F cannot be 0 as it is the first digit of a number\n                    if len(set([A, 2, C, 0, E, F])) == 6:  # All digits must be distinct\n                        num1 = int(f\"{A}20{E}{F}\")\n                        num2 = int(f\"{E}{F}0{A}2\")\n                        if 5 * num1 == 6 * num2:\n                            return int(f\"{F}{A}2{E}\")\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    jumps = 0\n    height = 0\n    \n    while height < 40:\n        jumps += 1\n        height += 5  # Monkey jumps up 5 metres\n        if height >= 40:\n            break\n        if jumps % 2 == 0:\n            height -= 3  # Monkey falls down 3 metres after every 2 jumps\n  \n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 9 (mod 11)\n    congruences = [(1, 5), (2, 6), (9, 11)]\n\n    # Solve the system of congruences to find the smallest number x\n    x, _ = solve_congruence(*congruences)\n    \n    return x\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n    # Each side will have (side_length/distance_apart) - 1 sunflowers between the corners\n    # because the corner sunflowers are also counted separately\n    sunflowers_per_side = (side_length // distance_apart) - 1\n    # A pentagon has 5 sides and 5 corners\n    corners = 5\n    # Total sunflowers = sunflowers on all sides + one on each corner\n    total_sunflowers = sunflowers_per_side * 5 + corners\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300\n    num_stamps = pounds_to_pence // stamp_cost_pence\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "网络故障，请重试"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variable in the problem\n    usual_time = symbols('usual_time')\n\n    # The distance does not change, so we have the equation 45*usual_time = 30*(usual_time + 2)\n    equation = Eq(45 * usual_time, 30 * (usual_time + 2))\n\n    # Solve for the usual_time\n    usual_time_solution = solve(equation, usual_time)\n\n    return usual_time_solution[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    \n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # The sequence follows a pattern which is a triangular number sequence\n    # Calculate the sum of numbers from 3 to 10 first, which is a partial sum of an arithmetic sequence\n    start = 3\n    end = 10\n    count = end - start + 1  # Inclusive of both start and end\n    sum_forward = (start + end) * count // 2\n    \n    # Calculate the sum of numbers from 4 to 6 (since 3 and 10 are not repeated)\n    start_reversed = 4\n    end_reversed = 6\n    count_reversed = end_reversed - start_reversed + 1  # Inclusive of both start and end\n    sum_reversed = (start_reversed + end_reversed) * count_reversed // 2\n    \n    # The total sum is the sum of the forward sequence plus the reversed sequence\n    total_sum = sum_forward + sum_reversed\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    # Dynamic programming approach to find the number of partitions of an integer\n    # Initialize the list with base case\n    partitions = [1] + [0]*5\n    \n    # Iterate over the range to build up the table of partitions\n    for num in range(1, 6):\n        for i in range(num, 6):\n            partitions[i] += partitions[i - num]\n    \n    # Subtracting 1 as we need to exclude the number itself being counted as a single partition\n    ans = partitions[5] - 1\n    \n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3  # calculate modulo 3 at each step to keep numbers small\n    return a\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2 / (14/3 + 38/59)\n    denominator = 2.501**3\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    equation1 = Eq(sweets - 6 * students, -26)\n    equation2 = Eq(sweets - 5 * students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the difference between the fruits of two neighboring trees is 1,\n    # they form an arithmetic sequence. For such a sequence, the sum of the trees' fruits\n    # is given by the formula: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms, in this case, n=8.\n    # Also note that since the difference is 1, the sequence consists of 4 even and 4 odd numbers.\n    # The sum of even number of odd or even numbers is always even.\n    # Therefore, it is impossible to get an odd sum (like 225) from such a sequence.\n    \n    return False\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n\n    equation1 = Eq(white, 6 * blue)\n    equation2 = Eq(white + blue, 63)\n\n    solutions = solve((equation1, equation2), (white, blue))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    leo, son = symbols('leo son')\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(leo + (leo - son), 70)\n    \n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "{\n  \"queId\": \"d36e8ceba9294ee8ac5049d4004c2a53\",\n  \"problem\": \"$$6$$个大于零的连续奇数的乘积是$$135135$$，则这$$6$$个数中最大的是多少？\",\n  \"trans_problem\": \"The product of $$6$$ consecutive odd numbers greater than zero is $$135135$$. What is the largest number among these $$6$$ numbers?\"\n}"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age_now = 8\n    dad_age_now = 50\n\n    years_later = symbols('years_later')\n\n    heidi_future_age = heidi_age_now + years_later\n    dad_future_age = dad_age_now + years_later\n\n    equation = Eq(dad_future_age, 4 * heidi_future_age)\n\n    ans = solve(equation, years_later)[0]\n\n    return ans\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    factor_5 = 0\n    \n    for i in range(1, n+1):\n        while i % 5 == 0:\n            factor_5 += 1\n            i //= 5\n    \n    return factor_5\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers is 120, so their sum is 3 * 120\n    sum_first_three = 3 * 120\n    \n    # Average of four numbers is 150, so their total sum is 4 * 150\n    total_sum = 4 * 150\n    \n    # The fourth number is the difference between the total sum and the sum of the first three\n    fourth_number = total_sum - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "{\n  \"queId\": \"dac69af19d5c479fbc39153f568d7e2c\",\n  \"problem\": \"若关于\\\\emph{z}的整系数方程$${{z}^{3}}+p{{z}^{2}}+qz+r=0$$的三个复数根在复平面内恰好成为一个等腰直角三角形的三个顶点，求这个等腰直角三角形的面积的最小值.\",\n  \"trans_problem\": \"If the three complex roots of the integer-coefficient equation $${{z}^{3}}+p{{z}^{2}}+qz+r=0$$ with respect to \\\\emph{z} form the vertices of an isosceles right triangle in the complex plane, find the minimum value of the area of this isosceles right triangle.\"\n}"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    # To find the lowest value of r such that 216r is a square number,\n    # we need to make the prime factorization of 216 and see what is required to make\n    # all the exponents in the factorization even (since a square number will have even exponents\n    # for all prime factors).\n    # Prime factorization of 216: 2^3 * 3^3. To make this a perfect square, we need one more 2\n    # and one more 3. (2^4 * 3^4 is a perfect square, because the exponents are even).\n    # So, we need to multiply 216 by 2 and by 3 to get r.\n\n    r = 2 * 3\n    return r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3/13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # Assign variables for the distance the snail climbs and slides back each day\n    climb_distance = 8\n    slide_distance = 3\n    net_distance = climb_distance - slide_distance\n\n    # Calculate the total distance travelled until the penultimate day\n    # because on the 9th day, the snail climbs out of the well without sliding back\n    days_to_climb = 9\n    total_distance_before_last_day = net_distance * (days_to_climb - 1)\n    \n    # Add the final climb to the total distance traveled\n    total_distance = total_distance_before_last_day + climb_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "{\"queId\": \"caccc74d3d244477927327f28d373519\", \"problem\": \"求不大于$$\\\\sqrt{2015+12+5}$$的质数共有多少个？  How many primes numbers are there which is not greater than $$\\\\sqrt{2015+12+5}$$? \", \"trans_problem\": \"How many prime numbers are there that are not greater than $$\\\\sqrt{2015+12+5}$$?\"}"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    remainder = 6\n    quotient = 15\n    # To find the smallest possible dividend, we need to find the smallest divisor that will work.\n    # Since the remainder is 6, the divisor must be greater than 6.\n    # We start with divisor being least possible, which is one more than remainder\n    divisor = remainder + 1\n\n    # The dividend is calculated by dividend = divisor * quotient + remainder.\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "{\n  \"queId\": \"cf35c01849be4321b4cfea2873b35beb\",\n  \"problem\": \"有多少个是$$8$$的倍数的三位数？  How many three-digit numbers, which are multiples of $$8$$ are there? \",\n  \"trans_problem\": \"How many three-digit numbers are multiples of $$8$$?\"\n}"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_positions = 6  # There are six friends in total.\n    teddy_cannot_be = 1  # Teddy cannot be at 1 position (furthest left).\n    \n    # Total ways if Teddy can be anywhere\n    total_ways = factorial(total_positions)\n    \n    # Ways where Teddy is in the furthest left position\n    ways_with_teddy_at_left = factorial(total_positions - 1)\n    \n    # Subtract the number of ways where Teddy is at the furthest left\n    ans = total_ways - ways_with_teddy_at_left\n    \n    return ans\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "{\"queId\": \"eba18a7bd9e74d419989a438056d15e8\", \"problem\": \"如图是一个加法算式，算式中``华杯''二字代表的两位数是多少？\", \"trans_problem\": \"As shown in the diagram, there is an addition equation where the two words '华杯' represent a two-digit number. What is the two-digit number represented by '华杯'?\"}"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "{\"queId\": \"ce2e3d8335a747689cabb06eff35f82a\", \"problem\": \"甲今年的年龄是乙的$$7$$倍，过若干年，甲的年龄是乙的$$6$$倍，再过若干年，甲的年龄分别是乙的$$5$$倍、$$4$$倍、$$3$$倍及$$2$$倍，问甲今年岁数的最小值~\\\\uline{~~~~~~~~~~}~． \", \"trans_problem\": \"Person A's current age is $$7$$ times that of person B's. After a number of years, person A's age will be $$6$$ times that of person B's. In subsequent years, person A's age will be $$5$$ times, $$4$$ times, $$3$$ times, and $$2$$ times that of person B's. What is the minimum current age of person A?\"}"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    amount_in_pence = 963\n    fraction = 4 / 9\n\n    result = amount_in_pence * fraction\n\n    return int(result)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since the numbers are consecutive, they form an arithmetic sequence with a common difference of 1\n    # Let the first term of the sequence be a. Then the 7 terms are a, a+1, a+2, a+3, a+4, a+5, a+6\n    # The sum of an arithmetic sequence can be calculated as n/2 * (first_term + last_term)\n    # We have 7 terms and their sum is 280, therefore:\n    # 7/2 * (a + (a + 6)) = 280\n    # Solve the equation for a:\n    total_numbers = 7\n    sum_of_numbers = 280\n    a = (sum_of_numbers / total_numbers) * 2 / 2 - (total_numbers - 1) / 2\n    # The largest number is the last term which is a + 6\n    largest_number = a + 6\n    return int(largest_number)\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "{\n    \"queId\": \"cf74b55ffee24592ad69682cd17001b1\", \n    \"problem\": \"设二次函数$$f\\\\left( x \\\\right)=a{{x}^{2}}+bx+c$$（$$a,b,c\\\\in \\\\text{R}$$，$$a\\\\ne 0$$）满足条件：  ①当$$x\\\\in \\\\text{R}$$时，$$f\\\\left( x-4 \\\\right)=f\\\\left( 2-x \\\\right)$$，且$$f\\\\left( x \\\\right)\\\\geqslant x$$；  ②当$$x\\\\in (0,2)$$时，$$f\\\\left( x \\\\right)\\\\leqslant {{\\\\left( \\\\frac{x+1}{2} \\\\right)}^{2}}$$；  ③$$f\\\\left( x \\\\right)$$在$$\\\\text{R}$$上的最小值为$$0$$．  求最大的$$m\\\\left( m\\\\textgreater1 \\\\right)$$，使得存在$$t\\\\in \\\\text{R}$$，只要$$x\\\\in [1,m]$$，就有$$f\\\\left( x+t \\\\right)\\\\leqslant x$$．\",\n    \"trans_problem\": \"Let the quadratic function $$f(x) = ax^2 + bx + c$$ ($$a, b, c \\\\in \\\\text{R}$$, $$a \\\\ne 0$$) satisfy the following conditions: ① For any $$x \\\\in \\\\text{R}$$, $$f(x - 4) = f(2 - x)$$ and $$f(x) \\\\geqslant x$$; ② For $$x \\\\in (0,2)$$, $$f(x) \\\\leqslant \\\\left( \\\\frac{x + 1}{2} \\\\right)^2$$; ③ The minimum value of $$f(x)$$ on $$\\\\text{R}$$ is $$0$$. Find the greatest value of $$m (m > 1)$$ such that there exists some $$t \\\\in \\\\text{R}$$, whenever $$x \\\\in [1, m]$$, it holds that $$f(x + t) \\\\leqslant x$$.\"\n}"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the bigger number, y is the smaller number\n\n    equation1 = Eq(x + y, 49)  # The sum of the two numbers is 49\n    equation2 = Eq(x - y, 9)   # The difference of the two numbers is 9\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):\n        for j in range(i, 1000):\n            if i != j and set(str(i)) & set(str(j)) and len(set(str(i))) < 3 and len(set(str(j))) < 3:\n                if i % 75 == 0 and j % 75 == 0:\n                    max_sum = max(max_sum, i + j)\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total_sum = sum((-1)**(i+1) * (20 - 2*i) for i in range(10))\n    return total_sum\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    for i in range(len(throws)):\n        if throws[i] == 6:\n            if i + 1 < len(throws):\n                position -= throws[i + 1]\n        else:\n            position += throws[i]\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # we assume a reasonable upper limit for number of gums\n        remaining_after_music = gums - 2  # ate 2 in Music lesson\n        if remaining_after_music % 3 == 0:  # check if remaining is divisible by 3\n            shared_with_friends = remaining_after_music // 3\n            remaining_after_break = remaining_after_music - shared_with_friends\n            if remaining_after_break % 4 == 0:  # check if remaining can be equally divided in next 4 lessons\n                return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    amount_to_give = (james - kate) / 2\n\n    return amount_to_give\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial as fact\n    \n    # The number of ways to arrange 5 storybooks is simply 5 factorial.\n    storybook_arrangements = fact(5)\n    \n    # Since at least one magazine has to be between every two storybooks,\n    # we arrange 4 magazines in the 4 'gaps' created by 5 storybooks.\n    # We are left with 1 magazine, which can be placed in 6 possible positions\n    # (before the first storybook, between the storybooks, or after the last storybook).\n    # Therefore, we have:\n    # - 6 positions for the 1 magazine\n    # - 5 factorial ways to arrange the storybooks\n    # - 4 factorial ways to arrange the remaining magazines\n    \n    # C(6,1) is for choosing 1 position out of 6 for the extra magazine.\n    magazine_arrangements = fact(5) * fact(4)\n    extra_magazine_positions = 6\n    \n    ans = storybook_arrangements * magazine_arrangements * extra_magazine_positions\n    \n    return ans\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "{\n  \"queId\": \"20dc1ffd509b4446a0c0ad303030574c\", \n  \"problem\": \"鸡比兔多$$10$$只，鸡的腿数比兔的腿数的三分之一多$$24$$条．若把一半鸡换成兔，那么兔的腿数比鸡的腿数多多少条？  There are $$10$$ more chickens than rabbits and the number of legs of chickens is $$24$$ more than the one-third of the number of legs of rabbits. If half of the chickens are changed to be rabbits, how much more is the number of legs of rabbits than the number of legs of chickens?\", \n  \"trans_problem\": \"There are $$10$$ more chickens than rabbits, and the number of chicken legs is $$24$$ more than one-third the number of rabbit legs. If half of the chickens are exchanged for rabbits, how many more legs will the rabbits have than the chickens?\"\n}"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # Divisibility rule for 99 is that the number must be divisible by both 9 and 11.\n    # For divisibility by 9, the sum of the digits must be divisible by 9.\n    # For divisibility by 11, the difference between the sum of alternate digits must be divisible by 11.\n    \n    # The sum of the given digits excluding A and B\n    fixed_sum = 4 + 2 + 2 + 8  # = 16\n\n    # Let's find A and B such that (16 + A + B) is divisible by 9\n    # and (4 - 2 + A - 2 + 8 - B) or (-B + A) is divisible by 11.\n    \n    for A in range(10):\n        for B in range(10):\n            if (fixed_sum + A + B) % 9 == 0 and (A - B) % 11 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # average times number of values\n    sum_remaining = 9 * 9  # new average times new number of values\n    removed_number = total_sum - sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # Convert speed to meters per second\n    time_seconds = 300  # Time in seconds\n\n    distance_meters = speed_mps * time_seconds  # Calculate distance\n\n    return int(distance_meters)\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the money each brother would receive if they shared with the sister\n    x = symbols('x')\n    \n    # The original sum of money shared among 4 siblings\n    total_sum_with_sister = 4 * x\n    \n    # If only the brothers shared the money, they would get x + 20 each\n    # So, the total sum with brothers only is 3 times (x + 20)\n    total_sum_with_brothers = 3 * (x + 20)\n    \n    # Equate the two total sums because it's the same original amount of money\n    equation = Eq(total_sum_with_sister, total_sum_with_brothers)\n    \n    # Solve the equation to find the value of x\n    solution_x = solve(equation, x)\n    \n    # The original sum is 4 times the amount each person gets when the sister is included\n    original_sum = 4 * solution_x[0]\n    \n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = (21 + 1) // 2  # Number of terms in the sequence\n    sum_n = (n * (n + 1)) // 2  # Sum of the first n natural numbers\n    \n    ans = sum_n ** 2  # Squaring the sum\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    red, green, blue = symbols('red green blue')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(red, 2 * green)                  # Red beads are twice the green beads\n    equation2 = Eq(blue + 112, red + 50)            # Blue beads are 50 less than red beads after giving away 112\n    equation3 = Eq(red + green + (blue + 112), 350) # Total count after giving away beads\n\n    # Solve the equations for the number of red, green, and blue beads left\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Since Lauren had the same number of each type of beads initially\n    # and we know how many blue beads she gave away, we add that back to the\n    # blue beads left to find the initial count\n    initial_blue_beads = solutions[blue] + 112\n\n    return initial_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Let the five numbers be a, b, c, d, e (where e is the largest number we want to find)\n    # If we take the sum of four numbers and divide it by 4, we get one of the given averages.\n    # Thus, (a + b + c + d) / 4 = 36 => a + b + c + d = 36 * 4\n    sum_abcd = 36 * 4\n    # Similarly, for the other averages with e being part of the total sum each time.\n    sum_abce = 38 * 4\n    sum_abde = 39 * 4\n    sum_acde = 45 * 4\n    sum_bcde = 49 * 4\n\n    # Since e is part of all the sums except the first one, if we add all the sums, e will be counted 4 times.\n    total_sum_with_extra_e = sum_abcd + sum_abce + sum_abde + sum_acde + sum_bcde\n    # We can find the total sum of a, b, c, d, e (without extra e's) by adding a, b, c, d and e once.\n    # Since we know the sum with the extra e's, we can subtract the sum_abcd (which doesn't have e) to find 4 * e.\n    total_sum_e = total_sum_with_extra_e - sum_abcd\n\n    # Now, we divide by 4 to get the actual largest number e.\n    e = total_sum_e // 4\n\n    return e\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    science_books = (art_books / art_books_fraction) * science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let k be the number of stickers Katelyn has\n    # Let j be the number of stickers Jared has\n    # According to the problem j = k + 60\n    # Also, the ratio j:k = 5:2\n    # We can set up the system of equations\n    # j = 5 * k / 2\n    # j = k + 60\n    # We can solve for k and then find j using the above equations\n    # 5 * k / 2 = k + 60\n    # Simplify and solve for k\n    k = 60 * 2 / (5 - 2)\n    # Once we have k, we can easily compute j\n    j = k + 60\n    # The total number of stickers they have together is k + j\n    total_stickers = k + j\n    return int(total_stickers)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest = 0.05\n    second_interest = 0.10\n    \n    amount_after_first_period = initial_investment * ((1 + first_interest) ** 3)\n    total_amount = amount_after_first_period * ((1 + second_interest) ** 2)\n    \n    return round(total_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    ans = sum(rounded_numbers)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Since we want to equally divide the sausages among 24 people,\n    # each person should get 16/24 of a sausage.\n    # We need to find the least common multiple of 16 and 24 to know\n    # the minimum number of sausages each should get.\n    # Then we can calculate the minimum number of cuts based on the LCM.\n    \n    from math import gcd\n\n    # Function to find the least common multiple\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    # Calculate the least common multiple of the number of sausages and people\n    least_common_multiple = lcm(16, 24)\n    \n    # The number of parts each sausage must be cut into is the LCM divided by the number of sausages\n    parts_per_sausage = least_common_multiple // 16\n    \n    # Since we're cutting each sausage into parts_per_sausage pieces, we'll need one less cut than the number of pieces\n    cuts_per_sausage = parts_per_sausage - 1\n    \n    # In total, we need the number of cuts per sausage times the number of sausages\n    total_cuts = cuts_per_sausage * 16\n    \n    return total_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    # Volumes of textbooks\n    chinese = 42\n    math = 63\n    nature = 28\n    \n    # Find the greatest common divisor\n    gcd_value = gcd(chinese, gcd(math, nature))\n    \n    return gcd_value\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    s = symbols('s')\n    \n    # Qiqi's time to the school\n    time_qiqi = s / 60\n\n    # Weiling's time to the school, which is Qiqi's time minus 6 minutes (2 minutes late start, 4 minutes early arrival)\n    # Weiling's speed is 72 m/min\n    time_weiling = s / 72\n\n    # Set up the equation based on the difference in their travel times\n    equation = Eq(time_qiqi - 6, time_weiling)\n\n    # Solve for the distance s\n    distance = solve(equation, s)\n\n    return distance[0]\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Rate of work done by 4 construction companies is 900 m / 5 days\n    rate_4_companies = 900 / 5\n    \n    # One construction company would work at a quarter of this rate\n    rate_1_company = rate_4_companies / 4\n    \n    # Time taken by 1 construction company to build a 2700 m expressway\n    days_1_company = 2700 / rate_1_company\n    \n    return days_1_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    # St. Petersburg (Russia) is GMT+3\n    st_petersburg_offset = 3\n    # Manchester (UK) is GMT+0\n    manchester_offset = 0\n    # Richard meets the plane at 12 noon St. Petersburg time\n    meet_time_st_petersburg = 12\n    # Flight duration is not given but assumed to be 4 hours  \n    flight_duration = 4\n    \n    # Convert St. Petersburg meeting time to GMT\n    meet_time_gmt = meet_time_st_petersburg - st_petersburg_offset\n\n    # Calculate the departure time from Manchester in GMT\n    departure_time_gmt = meet_time_gmt - flight_duration\n\n    # Flight cannot take negative time, we adjust for flights that depart the day before\n    if departure_time_gmt < 0:\n        departure_time_gmt += 24\n\n    # Return the departure time from Manchester\n    return departure_time_gmt\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    return 5 * 2.2\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let star_rate be the rate at which Star works per hour\n    # Let nini_rate be the rate at which Nini works per hour\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # If Star types for 5 hours then Nini for 20 hours they finish the job -> 5*star_rate + 20*nini_rate = 1\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n\n    # If Star types for 20 hours then Nini for 8 hours they also finish the job -> 20*star_rate + 8*nini_rate = 1\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    # Solve the system of equations for star_rate and nini_rate\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # nini_rate represents the part of work Nini does in one hour, so 1/nini_rate hours will be needed for Nini to finish the job alone\n    time_for_nini_to_finish = 1 / solutions[nini_rate]\n\n    return time_for_nini_to_finish\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_even = sum(range(2, 33, 2))\n    sum_odd = sum(range(30, 3, -2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n    \n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    people_between = 10\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n\n    total_people = ben_position_from_front + people_between + frank_position_from_back\n    return total_people - 1  # Minus 1 because we double counted Ben's position when adding from front and back\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n\n    # Equation: (2/5) * total_marbles + (1/3) * total_marbles + 96 = total_marbles\n    equation = Eq((2/5) * total_marbles + (1/3) * total_marbles + 96, total_marbles)\n\n    solutions = solve((equation), (total_marbles))\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663 ** 2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_of_numbers = sum(int('1'*i) for i in range(1, 2016))\n    ans = sum_of_numbers % 10000\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for digits in product(range(10), repeat=3):\n        if digits[0] != 0 and sum(digits) == 8 and digits[2] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_age = int(2019 ** 0.5)  # Since product of ages is less than 2019\n    for john_age in range(1, max_age):\n        mary_age = john_age - 1\n        if john_age * mary_age >= 2019:\n            continue\n        for child1_age in range(1, int(2019 ** (1/3))):\n            child2_age = child1_age + 2\n            child3_age = child1_age + 4\n            if child1_age * child2_age * child3_age >= 2019:\n                continue\n            if (john_age + 1) * (mary_age + 1) > 2020 and (child1_age + 1) * (child2_age + 1) * (child3_age + 1) > 2020:\n                return john_age + mary_age + child1_age + child2_age + child3_age\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11  # The difference between the second and the first term\n\n    # The nth term of an arithmetic sequence is given by: a_n = a_1 + (n - 1) * d\n    nth_term = 7\n    seventh_term = first_term + (nth_term - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # let's denote the original sum of money as x\n    # According to the problem, Mrs Chen spent 36 on plates\n    # Then she spent 3/4 of the remaining money on cups\n    # After that, she had 1/6 of the original sum of money left\n    # Hence, we have:\n    # x - 36 = money left after buying plates\n    # 3/4 * (x - 36) = money spent on cups\n    # x - 36 - 3/4 * (x - 36) = 1/6 * x\n    # Solve for x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - 36 - 3/4 * (x - 36), 1/6 * x)\n    original_money = solve(equation, x)\n\n    return original_money[0]\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # to be sure to get 2 marbles of the same color, \n    # one must consider the worst case scenario which would be\n    # picking a blue, then a yellow, and then another marble of any color \n    # which then guarantees getting at least 2 marbles of the same color.\n    \n    # The first pick could be blue or yellow (1 marble)\n    # The second pick could be the color not picked first (2 marbles of different color)\n    # The third pick must now be either color, guaranteeting at least a pair (3 marbles)\n    \n    return 3\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations('123456789'):\n        num_str = ''.join(p)\n        A = sum(int(num_str[i:i+3]) for i in range(7))\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert distance covered in 2 minutes and 30 seconds to miles per hour\n    # First convert time taken to cover 1 mile to hours\n    time_in_hours = (2 + 30 / 60) / 60\n    # Number of miles covered in 1 hour\n    miles_in_1_hour = 1 / time_in_hours\n    return miles_in_1_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    n = 0\n    while count < 2012:\n        n += 1\n        if str(n)[0] == \"8\":\n            count += 1\n    return n\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula: n/2 * (first_term + last_term)\n    # Here n is the number of terms, which is 5 (students)\n    # Let's assign the middle term in the sequence to be x (since they are consecutive, this term would be the third one)\n    # The sequence would then look like this: x-2, x-1, x, x+1, x+2\n    # Sum of these terms is 5x (since -2 -1 +1 +2 cancel each other out)\n    # The total sum of all balls is 160. \n    # So we can write the following equation: 5x = 160\n    \n    total_balls = 160\n    num_students = 5  # Number of terms in the sequence\n    \n    # Calculate the middle term\n    middle_ball_count = total_balls // num_students\n    \n    # Calculate the number of balls for the student with the most balls (last term in the sequence)\n    most_balls = middle_ball_count + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each part separately\n    \n    # For 13^242, we only care about the pattern of unit digits for powers of 13:\n    # 13^1 -> 3, 13^2 -> 9, 13^3 -> 7, 13^4 -> 1, and then the pattern repeats every 4.\n    # Thus, we take 242 % 4 to find where we are in the cycle. 242 % 4 is 2.\n    # Hence, the unit digit for 13^242 is the same as for 13^2, which is 9.\n    \n    unit_digit_13 = (13 ** (242 % 4)) % 10\n    \n    # For 17^379, we only care about the pattern of unit digits for powers of 17:\n    # 17^1 -> 7, 17^2 -> 9, 17^3 -> 3, 17^4 -> 1, and then the pattern repeats every 4.\n    # Thus, we take 379 % 4 to find where we are in the cycle. 379 % 4 is 3.\n    # Hence, the unit digit for 17^379 is the same as for 17^3, which is 3.\n    \n    unit_digit_17 = (17 ** (379 % 4)) % 10\n    \n    # For 4^2012, the unit digits alternate between 4 and 6 every other power of 4.\n    # Since 2012 is even, the unit digit is 6.\n    # The unit digit is always 6 for even powers of 4.\n    \n    unit_digit_4 = (4 ** (2012 % 2)) % 10\n    \n    # Now combine the unit digits calculated above according to the original expression.\n    ans = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n    return ans\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    total_sum = 0\n    for n in range(1, 11):\n        total_sum += (2*n)**2\n    return total_sum\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n\n    tax = 7000\n    tax_rate1 = 0.15\n    tax_rate2 = 0.20\n    bracket = 20000\n\n    equation = Eq(tax, (min(income, bracket) * tax_rate1) + ((income - bracket) * tax_rate2 if income > bracket else 0))\n\n    solutions = solve((equation), (income))\n\n    # There can be two solutions, one of them will be negative which is not possible for income, so we take the positive one\n    ans = max(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations_with_replacement\n    \n    # Since there need to be at least 2 envelopes in A, 4 in B, and 3 in C, we must place 9 envelopes\n    # first into A, B, and C, leaving us with 15 - 9 = 6 envelopes to distribute among all boxes,\n    # including box D\n    # We first distribute these remaining 6 envelopes among the 4 boxes, then subtract 1 from the count\n    # for A, subtract 3 from the count for B, and subtract 2 from the count for C to maintain the\n    # minimum requirement for each box. The count for D remains as is.\n    \n    # Generate all combinations with replacement for distributing 6 envelopes into 4 boxes\n    distribution = combinations_with_replacement(range(4), 6)\n    count = 0\n\n    for d in distribution:\n        # Count how many envelopes go into each box\n        envelopes_in_boxes = [0, 0, 0, 0]\n        for mailbox in d:\n            envelopes_in_boxes[mailbox] += 1\n        \n        # Adjust the count with the minimum requirement\n        if envelopes_in_boxes[0] >= 1 and envelopes_in_boxes[1] >= 3 and envelopes_in_boxes[2] >= 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1 / 10)\n    return result\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n    \n    length1 = 28\n    length2 = 14\n    length3 = 56\n    \n    gcd12 = gcd(length1, length2)\n    max_length = gcd(gcd12, length3)\n    \n    return max_length\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    \n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if (chickens * 2 + rabbits * 4) == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of packs both stores had at first\n    x = symbols('x')\n    \n    # After Store A sold 290 packs, Store B had 3 times as many as Store A\n    # So we set up the equation: (x - 290) * 3 = x\n    equation = Eq((x - 290) * 3, x)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n    \n    # Return the total number of packs both stores had at first\n    return sol[0]\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    boys_home_lunch = 3\n    students_home_lunch = 5\n\n    girls = total_students - boys\n    girls_packed_lunch = total_students - (boys_packed_lunch + girls_school_lunch + students_home_lunch)\n    \n    return girls_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n    \n    dark_chocolates = 20\n    milk_chocolates = 20\n    strawberry_chocolates = 20\n    \n    total_cost = (dark_chocolate_price * dark_chocolates) + (milk_chocolate_price * milk_chocolates) + (strawberry_chocolate_price * strawberry_chocolates)\n    total_chocolates = dark_chocolates + milk_chocolates + strawberry_chocolates\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal = str(format(1 / 13, '.3000f'))[2:]  # Convert 1/13 to a string and remove the '0.' prefix\n    period = decimal[1:7]  # 1/13 has a recurring cycle every 6 digits after the decimal point\n\n    # The 2022th decimal place is equivalent to 2022 modulo 6 in the repeating period\n    position_in_period = (2022 - 1) % 6  # -1 because position is 0-indexed\n\n    # Find the digit at the position in the repeating period\n    digit = period[position_in_period]\n\n    return int(digit)\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_sets = 3600\n    sets_made_first_5_days = 720\n    days_for_first_sets = 5\n\n    rate_per_day = sets_made_first_5_days / days_for_first_sets\n    total_days = total_sets / rate_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    # Given speed of the train in meters per second\n    speed = 53  # m/s\n\n    # Time taken to pass the tree is given in seconds\n    time = 19  # seconds\n\n    # Distance formula: distance = speed * time\n    # The length of the train is the distance it covers in the given time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - (1/i))\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    friends = 6\n    \n    fruits_per_friend = (total_pear + total_strawberry + total_chocolate) // friends\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    books_to_pay_for = 5 - (5 // 4)  # For every 4 books (buy 3 get 1 free), he pays for 3\n    total_cost = books_to_pay_for * book_price\n    return total_cost\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days it takes for the wife to finish the barrel on her own\n    # The man's drinking rate is 1/15 barrel per day\n    # The wife's drinking rate is 1/x barrel per day\n    # Together, their drinking rate is 1/12 barrel per day\n    # Therefore, the equation is: 1/15 + 1/x = 1/12\n    # We solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/15 + 1/x, 1/12)\n\n    days_for_wife = solve(equation, x)\n    \n    return days_for_wife[0]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n    sam_thinking_number = solve(equation, sam_number)\n\n    return sam_thinking_number[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    avg_total = 35\n    avg_boys = 20\n    avg_girls = 60\n\n    total_pencils = 40 * avg_total\n\n    equation = Eq(boys * avg_boys + girls * avg_girls, total_pencils)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n    distance = mount_fuji_tip - turpan_depression_base\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of people as T,\n    # number of women as W, number of men as M, and number of children as C.\n    T, W, M, C = symbols('T W M C')\n\n    # Equations based on the problem statement:\n    # Equation representing that 2/5 of the people were women\n    equation1 = Eq(W, 2 * T / 5)\n    # Equation representing that there were thrice as many men as children\n    equation2 = Eq(M, 3 * C)\n    # Equation representing that there were 190 more women than children\n    equation3 = Eq(W, C + 190)\n    # Equation representing T = W + M + C (the total number of people)\n    equation4 = Eq(T, W + M + C)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (T, W, M, C))\n\n    return solutions[T]\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    # The pattern within the series is that each term is the previous term plus 10 times the number of terms so far\n    # However, we're interested only in the last two digits which is essentially finding the sum modulo 100\n    total = 0\n    current = 1\n    for i in range(1, 51):\n        total += current\n        current = (current * 10 + 1) % 100  # Only retain the last two digits\n        total %= 100  # Only retain the last two digits\n        \n    ans = total\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # Total number of envelopes\n    total_envelopes = 15\n    # Conditions for the number of envelopes in each box\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    \n    # Envelopes left after satisfying minimum conditions\n    remaining = total_envelopes - (min_A + min_B + min_C)\n\n    # We distribute the remaining envelopes to 4 boxes (including box D)\n    # Using the stars and bars method (n+k-1 choose k-1)\n    # Where n = remaining envelopes, k = 4 boxes\n    # The number of non-negative integral solutions is C(remaining + boxes - 1, boxes - 1)\n    boxes = 4\n    ways = len(list(combinations_with_replacement(range(boxes), remaining)))\n\n    return ways\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # Leo forgets the decimal point, so he divides by 211 instead of 2.11\n    # If 'x' is the dividend, the incorrect division would be x / 211\n    # The correct division is x / 2.11\n    # According to the problem, the difference between the two results is 98.01\n    # Therefore, x / 211 - x / 2.11 = 98.01\n    # Multiplying both sides by 211 * 2.11 to clear the denominators gives\n    # 2.11 * x - 211 * x = 98.01 * 211 * 2.11\n    # Combining like terms gives\n    # x * (2.11 - 211) = 98.01 * 211 * 2.11\n    # Solving for x gives\n    # x = (98.01 * 211 * 2.11) / (2.11 - 211)\n    \n    x = (98.01 * 211 * 2.11) / (2.11 - 211)\n    \n    # The true result is the correct division of the dividend by 2.11\n    true_result = x / 2.11\n    \n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n\n    equation1 = Eq(john - 30, 4 * (choon_mui - 150))\n    equation2 = Eq(john, choon_mui)\n\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    return solutions[john] - 30\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the price of one apple is 'a' and one banana is 'b'.\n    a, b = symbols('a b')\n\n    # Equation based on the first scenario:\n    # 6 apples and 7 bananas\n    equation1 = Eq(6*a + 7*b, 0)\n\n    # Equation based on the second scenario:\n    # 8 apples and 4 bananas\n    equation2 = Eq(8*a + 4*b, 0)\n\n    # Solve the system of equations for the price of one apple and one banana.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate how many bananas he can afford if he spent all his money on bananas.\n    # Since 6 apples + 7 bananas = 0, all money goes into bananas => 7 bananas = 0\n    bananas = symbols('bananas')\n    equation3 = Eq(7*b, 0)\n\n    # Plug the solution for b into the new equation to find out how many bananas he can get.\n    bananas_count = solve(equation3.subs(b, solutions[b]), bananas)\n\n    return bananas_count[0]\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote female visitors on the first day as f and male visitors as m\n    f, m = symbols('f m')\n\n    # The number of male visitors was 450 more than the number of female visitors on the first day\n    eq1 = Eq(m, f + 450)\n\n    # On the second day, female visitors increased by 15% and male visitors decreased by 18%\n    # the total number of visitors for the second day was 1354\n    eq2 = Eq(1.15 * f + 0.82 * m, 1354)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (f, m))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining = 15\n    remaining *= 2\n    remaining += 4\n    original_remaining = remaining\n    original_remaining *= 2\n    original_remaining -= 5\n    return original_remaining\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65  # miles per hour\n    time_hours = 15 / 60  # 15 minutes converted to hours\n    \n    # Convert speed to kilometers per hour (1 mile = 1.60934 km)\n    speed_kmph = speed_mph * 1.60934\n    \n    # Calculate distance travelled in kilometers\n    distance_km = speed_kmph * time_hours\n    \n    return distance_km\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10 / 100\n\n    increased_amount = initial_amount * (1 + percentage_increase)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n\n    # Convert meters to centimeters\n    model_length_cm = model_length_m * 100\n\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from itertools import permutations\n\n    initial_line = ('A', 'B', 'C', 'D')\n    count = 0\n\n    for new_order in permutations(initial_line):\n        if all(new_order[i] != initial_line[i] for i in range(len(initial_line))):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    \n    balloons_per_pupil = total_balloons // pupils\n    \n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n    distance_covered = 0\n\n    while True:\n        days += 1\n        distance_covered += distance_per_day\n\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    interest_rate = 0.10\n    years = 2\n    \n    amount = principal * ((1 + interest_rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate John's hourly wage\n    hourly_wage = 78 / 6.5\n\n    # Calculate how much John would earn in a week working 8 hours each day for 7 days\n    weekly_earnings = hourly_wage * 8 * 7\n\n    # Check if the weekly earnings would be enough to pay off the $700 debt\n    can_pay_off_debt = weekly_earnings >= 700\n\n    # The reason why he could not pay off his debt is because his weekly earnings \n    # are less than the debt, return the difference if it's the case.\n    if not can_pay_off_debt:\n        shortfall = 700 - weekly_earnings\n    \n    return shortfall\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if int(f\"{A}{A}{A}\") == 3 * int(f\"{A}{A}\"):\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks = 14 days\n    yahya_period = 10  # every 10 days\n    \n    days_until_next_cut = lcm(arjun_period, yahya_period)\n    \n    return days_until_next_cut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    first_distance = 280\n    middle_distance = 400\n    sprint_distance = 800 - first_distance - middle_distance\n\n    first_speed = 7\n    middle_speed = 5\n    sprint_speed = 8\n\n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    sprint_time = sprint_distance / sprint_speed\n\n    total_time = first_time + middle_time + sprint_time\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    # Since the number must be divisible by 5, the last digit must be 0 or 5.\n    for last_digit in [0, 5]:\n        # The sum of the digits must be divisible by 3 for the number to be divisible by 3.\n        for middle_digit in range(10):\n            if (2 + middle_digit + 9 + last_digit) % 3 == 0:\n                sum_of_numbers += int(f'2{middle_digit}9{last_digit}')\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Since no trees are planted at the ends, we need to reduce the length by 7 meters from both ends first\n    available_length = highway_length - (2 * tree_spacing)\n    # Calculate the number of trees that can be planted\n    num_trees = (available_length // tree_spacing) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_end = 34\n    stamps_sent = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    stamps_begin = stamps_end + stamps_sent - stamps_bought + stamps_given\n\n    return stamps_begin\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    loss_to_supermarket = fake_note\n    total_loss = cost_of_shoes + loss_to_supermarket\n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Since A, B, and C always have to be next to each other, consider them as a single entity X.\n    # The total entities to arrange now would be X, D, E, F, G, H, I, J which is 8 entities.\n    num_entities = 8\n\n    # Calculate the arrangements for these 8 entities.\n    arrangements_entities = factorial(num_entities)\n\n    # There are 3! ways to arrange A, B, and C within the single entity X itself.\n    arrangements_abc = factorial(3)\n\n    # Total arrangements are the product of the two.\n    total_arrangements = arrangements_entities * arrangements_abc\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    team_size = 4\n\n    ways_to_pick = comb(total_students, team_size)\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n\n    total_marbles = james + linda + ben\n\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum_first_part = sum(range(1, 5))\n    sum_second_part = sum([2020, 2019, 2018])\n    ans = (sum_first_part * 1) - (sum_second_part * 0)\n    return ans\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # The strategy is to remove 46 '0's to get the smallest number is by removing all zeros.\n    # After removal, the smallest digit should come first, i.e., '1'.\n    # So we start by constructing the string of numbers from 1 to 30.\n    number_str = ''.join(map(str, range(1, 31)))\n\n    # Count the number of '0's in the number.\n    count_zeros = number_str.count('0')\n\n    # If there are at least 46 zeros we remove 46 zeros, else it's not possible\n    if count_zeros >= 46:\n        # Remove '46' zeros.\n        smallest_number = number_str.replace('0', '', 46)\n    else:\n        # Since we don't have 46 zeros, the task is impossible\n        return 'impossible'\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    total_length = (20 * 3) - (2 * 3)\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Star jogs from 6:30am to 7:30am, which is 1 hour\n    jogging_time = 1  # hours\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time  # miles\n\n    # Star walks from 7:30am to 9:30am, which is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time  # miles\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    used_to_new_ratio = 7\n    new_cups = 0\n\n    while total_used_cups >= used_to_new_ratio:\n        new_cups_made = total_used_cups // used_to_new_ratio\n        new_cups += new_cups_made\n        total_used_cups = new_cups_made + total_used_cups % used_to_new_ratio\n\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    ans = 2000 - 222\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to centimeters\n    space_between_cauliflowers_cm = 15  # space between the cauliflowers\n    first_cauliflower_offset_cm = 20  # space from the start to the first cauliflower\n    cauliflower_width_cm = 45  # width of one cauliflower\n\n    # Calculate the total space taken by one cauliflower including the gap after it\n    total_space_per_cauliflower_cm = cauliflower_width_cm + space_between_cauliflowers_cm\n\n    # Calculate the available space for cauliflowers after considering the first offset\n    available_space_for_cauliflowers_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # Calculate the number of cauliflowers that can be planted\n    num_cauliflowers = available_space_for_cauliflowers_cm // total_space_per_cauliflower_cm\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n    \n    students_A = 8\n    students_B = 12\n    students_C = 20\n\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    badminton, bowling = symbols('badminton bowling')\n    \n    equation1 = Eq(badminton, 3 * bowling)\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n    \n    members_end = solutions[badminton] - 36  # or solutions[bowling] - 4\n\n    return members_end\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # 1.5 kilometers in meters\n\n    time = distance / speed_of_sound\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    num = 72\n    prime_factors = {2: 0, 3: 0}\n\n    for prime in prime_factors.keys():\n        while num % prime == 0:\n            prime_factors[prime] += 1\n            num //= prime\n\n    num_factors = 1\n    for exponents in prime_factors.values():\n        num_factors *= (exponents + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    pages_first_3_days = 14 * 3\n    pages_next_2_days = 9 * 2\n    pages_sixth_day = 12\n    total_days = 6\n\n    total_pages = pages_first_3_days + pages_next_2_days + pages_sixth_day\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n\n    difference = number1 - number2\n\n    return difference\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    equation1 = Eq(wendy, 2 * vivien)  # Wendy is twice as old as Vivien\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)  # Vivien was 1/4 as old as Wendy 10 years ago\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total = sum(1 / i for i in range(10, 20))\n    return int(total)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Total value of the numbers\n    total_value = 504\n    # Average value of the numbers\n    average_value = 126\n    # Number of cards\n    num_cards = total_value // average_value\n    # Difference between the greatest and smallest number\n    difference = 6\n    \n    # The numbers are in arithmetic progression since they are consecutive odd numbers\n    # Let's denote the smallest number as 's'\n    # Then the next numbers will be s+2, s+4 and so on\n    # The largest number will be s + (num_cards - 1) * 2\n    \n    # We know that the average value of the numbers is the middle term in the arithmetic progression\n    # For even number of terms the average of two middle numbers is the average value. \n    # Hence we can say the average value is also the middle value,\n    # that means average value = (smallest number + largest number) / 2\n    # And thus average_value * 2 = smallest number + (smallest number + (num_cards - 1) * 2)\n    # Let's solve this equation for 's'\n\n    # s + s + (num_cards - 1) * 2 = average_value * 2\n    # 2s = average_value * 2 - (num_cards - 1) * 2\n    # s = (average_value * 2 - (num_cards - 1) * 2) / 2\n    smallest_number = ((average_value * 2) - (num_cards - 1) * 2) // 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of 10s that can be factored out of it.\n    # Since 10 can be factored into 2 and 5, we need to count the number of pairs of 2s and 5s in the prime\n    # factorization of the product. The number of zeros will be the minimum of the count of 2s and 5s.\n    \n    # However, there will always be more 2s than 5s in such a product (every even number provides a factor of 2),\n    # so we only need to count the number of 5s to find the number of zeros at the end of the product.\n    \n    # Initialize the count of 5s\n    count_fives = 0\n    \n    for i in range(301, 1000):\n        # Check if the number is a multiple of 5\n        while i % 5 == 0:\n            count_fives += 1\n            i /= 5 \n            \n    return count_fives\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n    \n    # Equation for the total number of pupils\n    total_pupils_eq = Eq(boys + girls, 1690)\n    \n    # Equation for the number of boys being 90 more than the number of girls\n    boys_to_girls_eq = Eq(boys, girls + 90)\n    \n    # Solve for the number of boys and girls\n    b_g_solution = solve((total_pupils_eq, boys_to_girls_eq), (boys, girls))\n    \n    # Unpack solution for boys and girls\n    total_boys = b_g_solution[boys]\n    total_girls = b_g_solution[girls]\n    \n    # Ratios for girls who can swim (g_swim) and those who cannot (g_noswim)\n    g_swim, g_noswim = 31, 49\n    \n    # Total number of girls is split into the ratio of those who can and cannot swim\n    total_g_swim = (g_swim / (g_swim + g_noswim)) * total_girls\n    total_g_noswim = total_girls - total_g_swim\n    \n    # Boys who can swim (b_swim) is 120 less than those who cannot (b_noswim)\n    # boys = b_swim + b_noswim\n    # b_noswim = b_swim + 120\n    # Solve for b_swim and b_noswim\n    b_swim = symbols('b_swim')\n    b_noswim_eq = Eq(2*b_swim + 120, total_boys)\n    b_swim_solution = solve(b_noswim_eq, (b_swim))\n    total_b_swim = b_swim_solution[0]\n    total_b_noswim = total_b_swim + 120\n    \n    # Total number of pupils who cannot swim is the sum of girls and boys who cannot swim\n    total_pupils_cannot_swim = total_g_noswim + total_b_noswim\n    return int(total_pupils_cannot_swim)\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 1.1\n\n    # We need to find the initial amount by reverse calculating the increases\n    initial_amount = final_amount / (annual_increase ** 2)  # Since the money increased over two years (2018-2020)\n\n    return initial_amount\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330    # m/min\n    turtle_speed = 30     # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215   # minutes\n    start_delay = 10      # minutes\n\n    # Distance covered by rabbit in 10 mins before sleep\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n\n    # Time taken by the turtle to finish the race\n    turtle_time_to_finish = race_distance / turtle_speed\n\n    # Total time rabbit ran including the time before he slept\n    rabbit_run_time_total = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n\n    # Total time including the rabbit's sleep time\n    rabbit_total_time = rabbit_run_time_total + rabbit_sleep_time + start_delay\n\n    # Check who reaches the finish line first\n    if rabbit_total_time < turtle_time_to_finish:\n        winner = \"rabbit\"\n        # Distance the turtle has covered when the rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n    elif turtle_time_to_finish < rabbit_total_time:\n        winner = \"turtle\"\n        # Distance the rabbit has covered when the turtle finishes\n        rabbit_running_time_when_turtle_finishes = turtle_time_to_finish - rabbit_sleep_time - start_delay\n        rabbit_distance_when_turtle_finishes = (rabbit_speed * rabbit_running_time_when_turtle_finishes) + rabbit_distance_before_sleep\n        if rabbit_running_time_when_turtle_finishes > 0:\n            distance_between = race_distance - rabbit_distance_when_turtle_finishes\n        else:\n            distance_between = race_distance\n    else:\n        winner = \"tie\"\n        distance_between = 0\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Given values\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n    \n    # The common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    # Calculate the sum using the formula for the sum of an arithmetic sequence\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    ans = count_factors(789, 5)\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term + 1)\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Average score of team A is 76 for 20 students\n    total_score_team_A = 76 * 20\n    # Average score of both teams combined is 70\n    # Let the number of students in team B be x\n    # Total average score for teams A and B combined is (total_score_team_A + 67 * x) / (20 + x)\n    # We set up the equation (total_score_team_A + 67 * x) / (20 + x) = 70 and solve for x\n\n    # calculate total score of team A and B combined, based on the average score for all students\n    total_score_combined = 70 * (20 + 'x')  # 'x' will be replaced with the variable x\n\n    # set up the equation and solve it\n    x = (total_score_combined - total_score_team_A) / (70 - 67)\n\n    return int(x)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_people = 7\n    people_who_dont_want_to_stand_next_to_each_other = 3\n\n    # Total arrangements of all people without restriction\n    total_arrangements = factorial(total_people)\n\n    # Arrangements of 3 people who do not want to stand next to each other\n    arrangements_of_3 = factorial(people_who_dont_want_to_stand_next_to_each_other)\n    \n    # Arrangements of the remaining 4 people\n    arrangements_of_4 = factorial(total_people - people_who_dont_want_to_stand_next_to_each_other)\n\n    # Treat the 3 people who don't want to stand next to each other as a single unit.\n    # Now we have 5 units to arrange (4 individuals + 1 unit of 3 people).\n    arrangements_of_5_units = factorial(total_people - people_who_dont_want_to_stand_next_to_each_other + 1)\n\n    # The number of ways the block of 3 can arrange amongst themselves is factorial(3).\n    # Total arrangements considering the 3 people as one unit.\n    arrangements_with_block = arrangements_of_5_units * arrangements_of_3\n\n    # The total valid arrangements would be the total arrangements minus those that include the 3 people together.\n    valid_arrangements = total_arrangements - arrangements_with_block\n    return valid_arrangements\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    num_participants = 100\n    minimum_in_largest_group = 4\n    \n    # Apply the Pigeonhole Principle\n    max_schools = num_participants // minimum_in_largest_group\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    # Check every hour and minute\n    for hour in range(24):\n        for minute in range(60):\n            # Convert to string to check for digit '4'\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perm = permutations(digits, 6)\n    min_product = float('inf')\n    for p in perm:\n        num1 = p[0] * 100 + p[1] * 10 + p[2]\n        num2 = p[3] * 100 + p[4] * 10 + p[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef max_min_product_difference(fixed_sum):\n    # Generate all possible permutations\n    perms = permutations(range(1, 10), 7)\n    max_product = 0\n    min_product = float('inf')\n\n    for perm in perms:\n        ABCD = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]\n        EFG = perm[4]*100 + perm[5]*10 + perm[6]\n\n        if ABCD + EFG == fixed_sum:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n\n    # Return the difference of max and min products\n    return max_product - min_product\n\ndef solution():\n    return max_min_product_difference(1993)\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_steps_per_roll = 6\n    final_position = 25\n\n    num_rolls = (final_position - 1) // max_steps_per_roll + 1\n\n    return num_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    total_sum = (num_terms * (first_term + last_term)) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(15):\n        if i < 10:\n            tens = 15 - i\n            if tens < 10:\n                return tens * 10 + i\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    advance_per_hour = 40\n    slip_per_rest = 10\n    effective_distance_per_hour = advance_per_hour - slip_per_rest\n    hours_taken = 0\n    distance_covered = 0\n    \n    while True:\n        hours_taken += 1\n        distance_covered += advance_per_hour\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slip_per_rest\n        \n    return hours_taken\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(29, -1, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total_sum = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_cabbage_cost = cabbage_price * cabbages_bought\n\n    lettuce_price = total_cabbage_cost / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_on_shoes = 97\n    saved_money = total_money - spent_on_shoes\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    initial_distance = 30\n    initial_plants = 11\n    remaining_plants = 3\n\n    initial_intervals = initial_plants - 1\n    new_intervals = remaining_plants - 1\n\n    new_spacing = initial_distance / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes\n    end_time = (14 * 60) + 5     # Convert end time to minutes\n    duration_in_minutes = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Cost in pence per minute\n    total_cost = duration_in_minutes * cost_per_minute  # Calculate the total cost\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    sum_of_factors = sum(divisors(20))\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_typed = 6000\n    time_spent = 20\n\n    # Calculate the rate for one typist\n    rate_per_typist = words_typed / (total_typists * time_spent)\n  \n    # Number of typists available after 2 fell sick\n    available_typists = total_typists - 2\n\n    # Number of words they are tasked to type now\n    words_to_type = 9000\n\n    # Calculate the time needed with the available typists\n    time_needed = words_to_type / (rate_per_typist * available_typists)\n\n    return time_needed\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 320 * 0.40\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # There are only two digits that can be used: 2 and 3. For a three-digit number,\n    # we have three places to fill with either 2 or 3, but each digit must appear at least once.\n\n    # Total combinations for three digits with no restrictions would be 2^3 = 8\n    # These combinations are (222, 223, 232, 233, 322, 323, 332, 333)\n\n    # However, we need to subtract the cases where a digit does not appear at least once.\n    # We have two such cases: (222, 333)\n    \n    count = 2**3 - 2\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    count_sundays = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Sunday\n            count_sundays += 1\n        start_date += timedelta(days=1)\n\n    return count_sundays\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_pay = pen_price + ruler_price\n    return total_pay\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the cost of apple tart and 's' be the cost of strawberry tart.\n    # Let 'x' be the number of strawberry tarts.\n    a, s, x = symbols('a s x')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(s, a + 0.40)                # s = a + 0.40 (since strawberry tart cost $0.40 more than an apple tart)\n    equation2 = Eq(2 * x * a, x * s)           # 2xa = xs (equal amount of money spent on each type)\n    equation3 = Eq(2 * x * a + x * s, 40)      # 2xa + xs = 40 (total amount spent)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, s, x))\n\n    # Calculate number of tarts she bought altogether\n    strawberry_tarts = solutions[x]\n    apple_tarts = 2 * strawberry_tarts\n\n    return apple_tarts + strawberry_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n    \n    # Convert times to seconds\n    first_light_cycle = 30  # half a minute = 30 seconds\n    second_light_cycle = 45  # 0.75 minutes = 45 seconds\n    combined_cycle = 9 * 60  # 9 minutes = 540 seconds\n    \n    # Calculate least common multiple of first two lights\n    two_lights_lcm = lcm(first_light_cycle, second_light_cycle)\n    \n    # Find the smallest cycle time for the third light\n    third_light_cycle = combined_cycle // two_lights_lcm * two_lights_lcm\n    \n    # Ensure the third light cycle is at least 30 seconds\n    while third_light_cycle < 30:\n        third_light_cycle += two_lights_lcm\n    \n    return third_light_cycle\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    return factorial(5)\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    combined_positions = henry_position_from_left + tony_position_from_right\n    children_between_henry_and_tony = combined_positions - total_children - 1\n    \n    return abs(children_between_henry_and_tony)\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_per_m = 1000\n    meters = 2\n    mm = meters * mm_per_m\n    return mm\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    not_multiple_of_ten = total_numbers - (total_numbers // 10)\n    percentage = (not_multiple_of_ten / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_amount = 4\n    amount_paid = initial_amount * 0.30\n    amount_owed = initial_amount - amount_paid\n    return amount_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Each cat has 4 legs\n    cat_legs = 2 * 4\n    # Each dog has 4 legs\n    dog_legs = 2 * 4\n    # Each rabbit has 4 legs\n    rabbit_legs = 1 * 4\n    # Each bird has 2 legs\n    bird_legs = 2\n    \n    # Legs of cats, dogs, and the rabbit\n    known_legs = cat_legs + dog_legs + rabbit_legs\n    \n    # Total number of legs\n    total_legs = 28\n    \n    # Remaining legs are for the birds\n    remaining_legs = total_legs - known_legs\n    \n    # Number of birds\n    num_birds = remaining_legs / bird_legs\n    \n    return int(num_birds)\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # let the total number of pieces be x\n    total_pieces = symbols('x')\n    \n    # On the first day, Tim fits 20% of the pieces\n    first_day_pieces = 0.20 * total_pieces\n    \n    # On the second day, he fits another 60 pieces\n    second_day_pieces = 60\n    \n    # The number of fitted pieces becomes 2/7 of the total, as it's 2 out of (2+5) parts\n    fitted_pieces = 2*(total_pieces - first_day_pieces - second_day_pieces)/7\n    \n    # Equation based on the scenario mentioned in the problem\n    equation = Eq(first_day_pieces + second_day_pieces + fitted_pieces, 2*total_pieces/7)\n\n    # Solve the equation for the total number of pieces\n    solution = solve(equation, total_pieces)\n    \n    # As number of pieces must be integer, get the first and only result\n    return solution[0]\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time taken in hours\n\n    # Combined speed of Jack and Rose\n    combined_speed = jack_speed + rose_speed\n\n    # Total distance covered by both\n    total_distance = combined_speed * time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melvin, nelson, oliver = symbols('melvin nelson oliver')\n\n    original_melvin = 40\n    melvin += original_melvin * 5/8  # Melvin gains from Nelson\n    nelson -= original_melvin * 5/8  # Nelson loses to Melvin\n\n    melvin -= original_melvin / 4  # Melvin loses to Oliver\n    nelson -= original_melvin / 4  # Nelson loses to Oliver\n    oliver += original_melvin / 2  # Oliver gains from Melvin and Nelson\n\n    melvin += original_melvin / 8  # Melvin gains from Nelson\n    nelson -= original_melvin / 8  # Nelson loses to Melvin\n\n    # After the final round, Melvin, Nelson, and Oliver all have the same number of cards\n    equation = Eq(melvin, nelson)\n    \n    # Solve the equation\n    solution = solve((equation, Eq(melvin, oliver)), (melvin, nelson, oliver))\n    \n    # Total number of cards initially (original_melvin + nelson + oliver)\n    total_cards_initially = original_melvin + solution[nelson] + solution[oliver]\n    \n    return total_cards_initially\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from itertools import combinations\nfrom math import prod\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    # Generate all possible combinations of 2 cards for Candy\n    candy_combinations = list(combinations(numbers, 2))\n    # Generate all possible combinations of 3 cards for Candice\n    candice_combinations = list(combinations(numbers, 3))\n    \n    # Create a set for products of each combination chosen by Candy\n    candy_products = {prod(combo) for combo in candy_combinations}\n    # Create a set for products of each combination chosen by Candice\n    candice_products = {prod(combo) for combo in candice_combinations}\n    \n    # Find the common product\n    common_product = candy_products.intersection(candice_products)\n    common_product = common_product.pop()\n    \n    # Find the unused card number by eliminating the numbers used in combinations that yield the common product\n    used_numbers = set()\n    for combo in candy_combinations:\n        if prod(combo) == common_product:\n            used_numbers.update(combo)\n    for combo in candice_combinations:\n        if prod(combo) == common_product:\n            used_numbers.update(combo)\n    \n    # Find the number that hasn't been used\n    unused_number = (set(numbers) - used_numbers).pop()\n    \n    return unused_number\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # iterate through odd numbers up to 24\n        if 24 % i == 0:  # if i is a factor of 24\n            n += i  # add it to the sum\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let's denote Polly's age when the total of her children's ages equals her age as 'x'.\n    # At that point, the ages of her children would be:\n    # - First child: x - 20\n    # - Second child: x - 22\n    # - Third child: x - 24\n    \n    # Now, we can set up the equation where Polly's age is the sum of her children's ages:\n    # x = (x - 20) + (x - 22) + (x - 24)\n    \n    # Solving for 'x' gives us:\n    # x = 3x - 66\n    # 2x = 66\n    # x = 33\n    \n    # Polly will be 33 years old when her age is equal to the sum of her children's ages.\n    \n    return 33\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    series_sum = (num_terms * (first_term + last_term)) // 2\n\n    return series_sum\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = 2 * 5\n    part2 = 1 * 5\n    part3 = (2 + 1) * 5\n\n    ans = part1 + part2 + part3\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple_of_weight = 5\n    \n    weight_of_suitcase = total_weight_with_presents / multiple_of_weight\n    \n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age was 10,\n    # which means the current combined age is 10 + 2 * 4\n    current_combined_age = 10 + 2 * 4\n    \n    # In two years, the combined age will be the current combined age plus 2 * 2\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # x and y are the two numbers such that x > y\n    # x - y = 39 (difference between the numbers)\n    # x + y = 59 (sum of the numbers)\n    # From the above two equations, we can solve for x and y\n    x = (39 + 59) / 2\n    y = 59 - x\n    return y\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = richard_age * 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(10*14 + m, 8*(10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, solve\n\n    A, B, C = symbols('A B C')\n    equations = [\n        A * B - 30,\n        B * C - 35,\n        C * A - 42\n    ]\n    \n    solutions = solve(equations, (A, B, C))\n    for sol in solutions:\n        if all(map(lambda x: x.is_real and x > 0, sol)):\n            return sum(sol)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        if mother_age == 3 * (justin_age + years):\n            return years\n        years += 1\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    result = 10\n    for i in range(9, 0, -1):\n        result *= i\n    return result\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # If Cora gives Qingle 8 sweets\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve(equation1, (cora, qingle))\n\n    # Difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    x_origin, y_origin = 0, 0  # Origin point (0,0)\n    x_point, y_point = 4, 8  # Point through which the line passes (4,8)\n\n    # Since the graph passes through the origin, b = 0\n    b = 0\n\n    # Calculate the slope m based on the point (4,8) and the origin (0,0)\n    m = (y_point - y_origin) / (x_point - x_origin)\n\n    # Construct the linear equation y = mx + b\n    equation = f\"y = {m}x + {b}\"\n\n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume Eric has 'e' shells and Jane has 'j' shells\n    e, j = symbols('e j')\n\n    # Initial condition: Jane has 5 shells for every 7 that Eric has\n    initial_condition = Eq(j, (5/7) * e)\n\n    # After giving away shells: Jane has 11 shells for every 13 that Eric has left\n    after_shells_transfer = Eq((j + 6), (11/13) * (e - 6))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_shells_transfer), (e, j))\n\n    # Total shells are the sum of Eric's and Jane's shells\n    total_shells = solutions[e] + solutions[j]\n\n    return total_shells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n\n    while warren_addition > 0:\n        current_number += warren_addition\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtraction\n        warren_addition -= 1\n        naida_subtraction += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    # First faucet fills at a rate of 1/20 per hour.\n    first_faucet_rate = 1/20\n    \n    # Other three faucets fill 3 times faster.\n    other_faucet_rate = 3 * first_faucet_rate\n    \n    # Find the combined rate of all faucets.\n    # Since there are three other faucets with the same rate, we multiply it by 3.\n    combined_rate = first_faucet_rate + (3 * other_faucet_rate)\n    \n    # Calculate the total time to fill the pool with all faucets opened = 1 / combined_rate.\n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    # Calculate the product of the given numbers\n    product = 48 * 925 * 38 * 435\n    \n    # Initialize a counter for the number of zeros\n    zero_count = 0\n    \n    # Check how many times the product is divisible by 10\n    while product % 10 == 0:\n        zero_count += 1\n        product //= 10  # Divide the product by 10\n\n    return zero_count\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['5', '3', '9', '4', '8']\n    even_numbers = []\n\n    for perm in permutations(digits):\n        if perm[-1] in ['0', '2', '4', '6', '8']:  # Must end in an even digit\n            even_numbers.append(int(''.join(perm)))\n\n    ans = min(even_numbers)\n\n    return ans\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils // 4\n\n    neither = total_pupils - ((piano_pupils - piano_and_violin) + violin_pupils)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal_amount = 20000\n    interest_rate = 0.05\n    time_in_years = 11\n\n    total_amount = principal_amount * (1 + interest_rate * time_in_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    # As defined in most modern calendars, there are 7 days in a week.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "from sympy import symbols, integrate, sqrt\n\ndef solution():\n    x = symbols('x')\n    # Define the limits of the isosceles right triangle\n    upper_limit = 2\n    lower_limit = 0\n    \n    # Integration of the top half of the circle with radius 1 (semicircle)\n    # The semicircle's equation is y = sqrt(1-x^2), only considering y >= 0\n    # The integral computes the area under this semicircle from 0 to 1 (where x is in the radius)\n    circle_half_area = integrate(sqrt(1 - x**2), (x, lower_limit, 1))\n    \n    # The total area of the triangle, 1/2 * base * height with base = 2 and height = 2\n    triangle_area = (upper_limit ** 2) / 2\n    \n    # Probability is the favorable area (circle_half_area) over the total area (triangle_area)\n    probability = circle_half_area / triangle_area\n    \n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # The first digit A cannot be 0 and has to be less than or equal to 2\n        for D in range(1, 10):  # The last digit D cannot be 0\n            if 4 * D == A:  # The first digit is 1/4 of its last digit\n                B = A - 1  # The second digit is 1 less than its first digit\n                C = D - 1  # Because when you multiply ABCD by 4, C should be 1 less than D\n                if len(set([A, B, C, D])) == 4:  # None of the digits are the same\n                    original_number = int(f\"{A}{B}{C}{D}\")\n                    reversed_number = int(f\"{D}{C}{B}{A}\")\n                    if original_number * 4 == reversed_number:\n                        return original_number\n    return None\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    # Total number of students who got an A in Maths\n    math_A = 10\n    # Total number of students who got an A in English\n    english_A = 15\n    # Number of students who got an A in both Maths and English\n    both_A = 2\n\n    # Using Inclusion-Exclusion Principle\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    get_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    walking_to_bus_stop = catch_bus - leave_school\n    walking_home = get_home - (catch_bus + bus_trip_duration)\n\n    total_walking_time = walking_to_bus_stop + walking_home\n\n    return total_walking_time.seconds // 60  # Convert to minutes\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    # Let's denote the initial number as x.\n    # According to the problem, he divides it by 3 and then adds 10 to get 25.\n\n    # Let's set up the equation:\n    # (x/3) + 10 = 25\n    # Now we need to solve for x by performing inverse operations.\n\n    # First, subtract 10 from both sides to isolate (x/3):\n    # (x/3) = 25 - 10\n    # (x/3) = 15\n\n    # Then, multiply both sides by 3 to solve for x:\n    # x = 15 * 3\n\n    x = 15 * 3\n    return x\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6] # Existing numbers\n    mean_value = 5                # Given mean\n    total_numbers = len(numbers) + 1   # Total count including 'a'\n\n    # Total sum of numbers is mean_value * total_numbers\n    total_sum = mean_value * total_numbers\n\n    # Sum of current numbers\n    current_sum = sum(numbers)\n\n    # Value of 'a' is the difference between total_sum and current_sum\n    a = total_sum - current_sum\n\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030 * 452\n    right_side_constant = 30000 + 452\n\n    missing_number = (left_side - right_side_constant) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    length_per_piece_cm = total_length_cm / 2\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Pigeonhole Principle dictates that if Lina picks one more sock than the number\n    # of colors available, she is guaranteed to have at least one pair of the same color.\n\n    # Number of socks of each color\n    socks_per_color = 5\n    # Number of colors\n    num_colors = 3\n    \n    # Applying the Pigeonhole Principle\n    min_socks_to_get_a_pair = (socks_per_color - 1) * num_colors + 1\n\n    return min_socks_to_get_a_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7\n    total_rows = 1 + 1 + 8\n    total_pupils = pupils_per_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(((number + 3) / 4) * 9, 81)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    \n    return numerator / denominator\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Distance covered in 30 minutes (from 8:00 am to 8:30 am)\n    distance_covered = 6300 - 1800  # in meters\n    time_spent = timedelta(minutes=30)  # 30 minutes\n    \n    # Find the speed (distance per minute)\n    speed = distance_covered / time_spent.total_seconds() * 60  # in meters per minute\n\n    # Remaining distance to cover at 8:30 am\n    remaining_distance = 1800  # in meters\n\n    # Calculate the time needed to cover the remaining distance\n    time_needed = remaining_distance / speed  # in minutes\n\n    # Initial time at 8:00 am\n    start_time = datetime.strptime(\"8:00\", \"%H:%M\")\n\n    # Calculate the time when Peter reaches his friend's house\n    arrival_time = start_time + timedelta(minutes=time_needed)\n\n    # Format the arrival time to return only the time\n    ans = arrival_time.strftime(\"%H:%M\")\n\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the unknown percentage\n    x = symbols('x')\n    \n    # Mr. Smith's mix\n    total_volume_smith = 300 + 600\n    total_sugar_smith = 300 * 0.5 + 600 * 0.2\n    \n    # Mrs. Smith's mix\n    total_volume_mrs_smith = 700 + 300\n    total_sugar_mrs_smith = 700 * 0.1 + 300 * (x / 100)\n    \n    # The sugar percentage is the same for both mixtures\n    sugar_percentage_smith = total_sugar_smith / total_volume_smith\n    sugar_percentage_mrs_smith = total_sugar_mrs_smith / total_volume_mrs_smith\n    \n    # Set up the equation and solve it\n    equation = Eq(sugar_percentage_smith, sugar_percentage_mrs_smith)\n    solution_x = solve(equation, x)\n    \n    # Round the result to the nearest two decimal points\n    x_value = round(solution_x[0], 2)\n    \n    return x_value\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = (3/4) * total_candy\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = (1/3) * remaining_candy\n    final_candy = remaining_candy - given_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_future = 10\n    kenny_age_diff = 2\n\n    # Let's denote kenny's younger brother's age when May is 10 as 'b'\n    b = symbols('b')\n    # Kenny's age will be his brother's age + the difference (2 years)\n    k = b + kenny_age_diff\n    # When May is 10, the sum of kenny and his brother's ages is 3 times May's age (30)\n    equation = Eq(k + b, 3 * may_age_future)\n    \n    # Solving for b\n    b_age_future = solve(equation, b)[0]\n    # Kenny's age when May is 10\n    kenny_age_future = b_age_future + kenny_age_diff\n    \n    # May is currently 7 so difference in ages would remain the same\n    age_difference = kenny_age_future - 7\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variable\n    money = symbols('money')\n\n    # Given data\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n    \n    # She spent half of her money to buy donuts and the rest on muffins\n    # Setting up equations based on the problem statement\n    # d - Amount spent on donuts, m - Amount spent on muffins, hence d = m\n    # She bought 54 more donuts than muffins\n    d = money / 2\n    m = money / 2\n    \n    equation = (d / price_per_donut) - (m / price_per_muffin) - 54\n\n    # Solve the equation\n    solutions = solve(equation, money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # in pounds\n    selling_price_per_bag = 0.65  # 65p in pounds\n    weight_per_bag = 250  # in grams\n    total_weight = 5000  # 5 kg in grams\n\n    number_of_bags = total_weight / weight_per_bag\n    total_selling_price = selling_price_per_bag * number_of_bags\n    profit = total_selling_price - cost_price\n    percentage_profit = (profit / cost_price) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    # Since every child needs to get at least one apple, we give out 5 apples,\n    # one to each child. This leaves us with 14 - 5 apples to distribute.\n    remaining_apples = total_apples - children\n    # The most apples one child can get is if the remaining apples are all given\n    # to one child. So, we add back the apple that child initially received.\n    max_apples = remaining_apples + 1\n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # There are 5 intervals between 4th and 9th teeth\n    intervals = 9 - 4\n    \n    # Each interval length in mm\n    interval_length = 30 / intervals\n    \n    # Total intervals for 100 teeth is 99 (between each pair of adjacent teeth)\n    total_intervals = 100 - 1\n    \n    # Total length in mm is number of intervals times the length of each interval\n    total_length_mm = interval_length * total_intervals\n    \n    # Convert mm to cm by dividing by 10\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 80 - 40\n    \n    # Calculate the year when mum was 25\n    year_when_mum_was_25 = 1996 - (40 - 25)\n    \n    # Calculate the age of grandmother when mum was 25\n    grandmother_age_when_mum_was_25 = 80 - (2008 - year_when_mum_was_25)\n\n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    number1 = 46563\n    number2 = 9785\n    number3 = 859\n\n    sum_of_numbers = number1 + number2 + number3\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n    \n    # Total arrangements without restrictions\n    total = factorial(5)\n    \n    # Arrangements where the two people are next to each other\n    # Treat them as a single unit, so we have 4 units to arrange\n    together = factorial(4)  \n    \n    # The two people can switch places within this unit\n    switch_places = factorial(2)       \n    \n    # Subtract the arrangements where they are together from the total\n    ans = total - (together * switch_places)  \n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # The problem can be thought of as finding the number of ways\n    # to place 2 partitions between the 5 identical items to create 3 distinct groups,\n    # where each group has at least one item.\n    # This is similar to the \"stars and bars\" combinatorial problem.\n\n    n = 5  # total number of identical items (ice-cream cones)\n    k = 3  # number of friends (groups)\n    \n    # Since each friend must get at least one ice-cream cone, we give one to each friend.\n    n = n - (k - 1)  # adjusting items after giving one to each friend\n    \n    # Now we find the number of ways to distribute the remaining items.\n    # The formula for combinations is C(n+k-1, k-1), but since we've adjusted\n    # the number of items as 'n' because each friend got one already, the formula changes to:\n    ways = math.comb(n + k - 1 - 1, k - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = total_vegetables * 2 / 3\n    remaining_vegetables = total_vegetables - monday_sales\n    tuesday_sales = remaining_vegetables * 2 / 5\n    total_sales = monday_sales + tuesday_sales\n    return total_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case, we will pick 15 balls of each color,\n    # and not have 16 balls of any color. That makes 15 * 5 = 75 balls.\n    worst_case_same_color = 15 * 5\n    \n    # Now we need to ensure we get 13 balls of another color.\n    # In the worst case, we will get 12 balls from each color, which makes 12 * 4 = 48\n    # (since one color already has 15 balls).\n    worst_case_secondary_color = 12 * 4\n    \n    # To ensure we get 13 balls of the second color, we need to pick at least one more ball\n    # after the worst case scenario.\n    balls_for_secondary_color = 1\n\n    # The total number of balls to pick is the sum of the worst cases plus the one extra ball.\n    total_balls = worst_case_same_color + worst_case_secondary_color + balls_for_secondary_color\n    \n    return total_balls\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positives = sum(range(5, 856, 10))\n    sum_negatives = sum(range(-10, -851, -10))\n    ans = sum_positives + sum_negatives\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_claire = total_biscuits * 1 / 4\n    left_for_freddie = total_biscuits - given_to_claire\n\n    return int(left_for_freddie)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one table and one chair\n    table, chair = symbols('table chair')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    final_amount = principal * (1 + rate * time)\n\n    return final_amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    percentage = 40 / 100  # Converted percentage to decimal\n    number = 75\n    ans = percentage * number  # Calculated 40% of 75\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    return 3 + 6 + 8\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Let x be the distance Lucas walks\n    # The total distance covered by both when they are 4 miles apart is 20 - 4 = 16\n    # Lucas's speed to mother's speed = 3:5 = x / (16 - x)\n    # Cross multiply to find the relationship\n    # 5x = 3(16 - x)\n    # 5x = 48 - 3x\n    # 8x = 48\n    # x = 48 / 8\n    x = 48 / 8\n\n    return x\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    # Sum of the arithmetic sequence formula is n/2 * (2a + (n - 1)d)\n    sum_of_sequence = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    unit_rate = pizzas_initial / people_initial\n    pizzas_final = unit_rate * people_final\n    \n    return int(pizzas_final) if pizzas_final.is_integer() else round(pizzas_final)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n    \n    while teams > 1:\n        teams /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5 / 35\n    return ans\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n    \n    equation1 = Eq(2 * big_class + 2 * small_class, 48)  # Total apples\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)  # Total oranges\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "from math import sqrt, floor\n\ndef solution():\n    count = 0\n    for i in range(1, 2017):\n        if sqrt(i * 72).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')  # The number of years in the future we are looking for\n    danny_current = 8  # Let's name Danny's current age as 8x\n    efron_current = 3  # And Efron's as 3x, according to the ratio given\n\n    # We know from the problem that Danny is 30 years older\n    age_difference = danny_current - efron_current\n\n    # Expression for Danny's age in the future\n    danny_future = danny_current + years\n    # Expression for Efron's age in the future\n    efron_future = efron_current + years\n\n    # The future ratio is 5:3\n    future_ratio = Eq(danny_future / efron_future, 5 / 3)\n\n    # Given that Danny is 30 years older, which translates to this in terms of our 'x' multiplier\n    actual_age_difference = Eq(age_difference * efron_current, 30)\n\n    # Now solve for 'years' and the multiplier 'x' (Efron's current age)\n    solutions = solve((future_ratio, actual_age_difference), (years, efron_current))\n\n    # Extract the number of years from the solutions\n    return solutions[years]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congs = [(0, 5), (-1, 7), (-1, 8)]\n    lcm, remainder = solve_congruence(*congs)\n    return remainder\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n\n    desired_cookies = 150\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Ways to choose a pencil and a ruler, a pencil and a pen, or a ruler and a pen\n    ways = (pencils * rulers) + (pencils * pens) + (rulers * pens)\n\n    return ways\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    group_stage_games = 0\n    for group_teams in range(4):\n        group_stage_games += group_teams  # Number of games in one group\n    group_stage_games *= 8  # Number of groups\n    \n    knockout_games = 15  # Number of games in the knockout round: 16 teams, 1 game eliminates 1 team => 15 games\n\n    total_games = group_stage_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    # Loop through possible values for the second and third digits\n    for second_digit in range(1, 5):  # Given the constraints, the second digit cannot be 5 or greater\n        first_digit = 1 + 2 * second_digit  # The first digit is one more than twice the second digit\n        for third_digit in range(10):  # The third digit can be from 0 to 9\n            if 10 <= first_digit + second_digit + third_digit < 14:  # Check the sum condition\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    # This is a simple linear equation: -6/6 = 6\n    ans = (-6 / 6) == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for apple and banana prices\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(3 * apple + 2 * banana, 1.25)\n    eq2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the prices of apples and bananas\n    prices = solve((eq1, eq2), (apple, banana))\n\n    # Calculate the cost for 5 bananas\n    cost_5_bananas = 5 * prices[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    total_matches = Eq(n*(n-1)/2, 15)\n    solution = solve(total_matches, n)\n    \n    # We want the positive solution since the number of teams can't be negative\n    ans = [s for s in solution if s.is_real and s > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    i = 1\n    factors = 0\n    while i * i <= n:\n        if n % i == 0:\n            factors += 1 if i * i == n else 2\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    return 210 / 0.7\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    combinations = pencils * rulers * pens\n\n    return combinations\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of triangles, and q be the number of quadrilaterals\n    t, q = symbols('t q')\n    \n    # Number of pentagons is given as 2, each with 5 sides\n    pentagons_sides = 2 * 5\n    \n    # The relationship between triangles and quadrilaterals: q = t + 82\n    # Total number of sides for triangles (t triangles * 3 sides each)\n    # Plus total number of sides for quadrilaterals (q quadrilaterals * 4 sides each)\n    # Plus total number of sides for pentagons (2 pentagons * 5 sides each)\n    # Equals 394 sides in total\n    equation = Eq(3*t + 4*q + pentagons_sides, 394)\n    \n    # Substitute the relationship between t and q into the equation\n    q_equation = equation.subs(q, t + 82)\n\n    # Now solve for t\n    solutions = solve(q_equation, t)\n    \n    # The number of triangles\n    number_of_triangles = solutions[0]\n    \n    # The number of quadrilaterals as it is t + 82\n    number_of_quadrilaterals = number_of_triangles + 82\n    \n    return number_of_quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    nums = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    \n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of sweets Rachel has and a represent the number Alice has.\n    r, a = symbols('r a')\n\n    # Create the equation based on the conditions given\n    # If Rachel gives Alice 10 pieces, they will have the same number: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces, Rachel has 3 times as many as Alice: (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of sweets they originally had: r + a\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    total_posts = 4\n\n    total_distance = (total_posts - 1) * distance_between_posts\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"6{i}{j}\")\n            if number % 3 == 0 and number % 5 == 0 and number % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    return 63 - (55 - 27)\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Convert arrival times to hours relative to a reference (e.g., 6 am)\n    time_at_10kmph = 10 - 6  # 4 hours after 6 am\n    time_at_15kmph = 8 - 6   # 2 hours after 6 am\n    time_at_desired_speed = 9 - 6  # 3 hours after 6 am\n\n    # Calculate the distance based on the speed and time at 10 km/h\n    distance = 10 * time_at_10kmph  # Speed * Time\n\n    # Calculate the speed required to cover the same distance in 3 hours (to arrive at 9 am)\n    desired_speed = distance / time_at_desired_speed\n\n    return desired_speed\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    # apples = 5 + 6*pears\n    equation1 = Eq(apples, 5 + 6 * pears) \n    # peaches = 3*pears - 2\n    equation2 = Eq(peaches, 3 * pears - 2) \n    # apples + peaches + pears = 73\n    equation3 = Eq(apples + peaches + pears, 73) \n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let 'g' represent the number of all-girl teams\n    # According to (iⅲ), the number of all-boy teams is twice the number of all-girl teams: 2g\n    # So, the total number of teams is:\n    # 15 teams with only 1 boy + 27 teams with two or more boys + all-girl teams + all-boy teams\n    # Total teams = 15 + 27 + g + 2g = 42 + 3g\n    #\n    # Each team consists of 3 members, and there are 150 students in total:\n    # (42 + 3g) * 3 = 150\n    # 126 + 9g = 150\n    # 9g = 24\n    # g = 24 / 9\n    # g = 8/3, which is not a whole number and thus not possible.\n    # So there must have been a mistake in the initial setup. Teams with two or more boys include all-boy teams\n    # 27 teams with two or more boys include all-boy teams and teams with exactly 2 boys:\n    # 27 = all-boy teams + teams with exactly 2 boys\n    # Since we know that all-boy teams = 2 * all-girl teams, we have:\n    # 27 = 2g + (teams with exactly 2 boys)\n    # Therefore, the total teams can be written as:\n    # Total teams = 15 teams with only 1 boy + teams with exactly 2 boys + all-girl teams + all-boy teams\n    # Total teams = 15 + 27 - 2g + g + 2g\n    # Total teams = 42 + g\n    # Then we can continue with the initial equation:\n    # (42 + g) * 3 = 150\n    # 126 + 3g = 150\n    # 3g = 24\n    # g = 8 (Number of all-girl teams)\n    # So the number of all-boy teams is twice the number of all-girl teams:\n    # all-boy teams = 2 * 8 = 16\n    #\n    # We have 150 students in total, and now we can calculate the number of girls:\n    # Total teams = 15 teams with only 1 boy + teams with exactly 2 boys (27 - all-boy teams) + all-girl teams\n    # Total teams = 15 + 27 - 16 + 8 = 34\n    # Since each team has 3 members:\n    # Total students = Total teams * 3\n    #               = 34 * 3\n    #               = 102\n    # The number of girls is the total number of students minus the number of boys:\n    # Number of girls = Total students - Number of all-boy team members\n    #                 = 150 - (all-boy teams * 3)\n    #                 = 150 - (16 * 3)\n    #                 = 150 - 48\n    #                 = 102\n    return 102\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    product_str = str(product)\n    ans = sum(int(digit) for digit in product_str)\n    return ans\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert numbers from base 7 to decimal\n    num1 = int(str(61), 7)\n    num2 = int(str(34), 7)\n    \n    # Perform subtraction in decimal\n    subtracted = num1 - num2\n    \n    # Convert the result back to base 7\n    ans = ''\n    while subtracted > 0:\n        ans = str(subtracted % 7) + ans\n        subtracted //= 7\n\n    if ans == '':  # In case the result is 0\n        ans = '0'\n    \n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # There are two colors: blue and green.\n    max_blue_gloves = 1 + 3  # left-hand blue + right-hand blue\n    max_green_gloves = 2 + 4  # left-hand green + right-hand green\n    \n    # Dilly needs to pick at least one more than the number of gloves of a single color \n    # to ensure that she has a pair (which could be two lefts or two rights)\n    ans = max(max_blue_gloves, max_green_gloves) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies_initial = 5 * 12\n    total_students_now = 5 + 1\n    candies_per_student_after = total_candies_initial // total_students_now\n\n    return candies_per_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    for i in range(1, 4*5*7):\n        if i % 4 == 3 and i % 5 == 4 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_multiplier = (1 - depreciation_rate) ** years\n\n    value_after_years = initial_value * depreciation_multiplier\n\n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Let n be the size of the total square and m be the size of the inner square with one sex less than the other.\n    # Total students in complete square n x n; total students in square m x m.\n    # The difference in students, which is 52, comes from the outer layer of the difference, which is a frame of width 1 surrounding the square m x m.\n    # The frame consists of 4 sides, each of length m and 4 corners. \n    # But since each corner is counted twice, we need to subtract 4 to have a correct count of students in the frame.\n    # Hence, the total number of students on the outer frame is 4m + 4 - 4 = 4m.\n    # The number of boys is thus m^2 + 4m and the number of girls is m^2; the difference is 52.\n    # So, we need to find an m such that 4m = 52, which implies m = 52 / 4.\n    m = 52 // 4\n    # Now we find the total number of students by calculating the area of the complete square (n x n) which is (m + 2) x (m + 2)\n    total_students = (m + 2) ** 2\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of pins Eugene and Yuna originally had.\n    eugene, yuna = symbols('eugene yuna')\n    \n    # Equation 1: Eugene had 3 times as many pins as Yuna originally.\n    equation1 = Eq(eugene, 3 * yuna)\n    \n    # Equation 2: After Yuna bought 76 pins, she had 7/9 as many pins as Eugene.\n    # yuna + 76 = (7/9) * eugene\n    equation2 = Eq(yuna + 76, (7/9) * eugene)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (eugene, yuna))\n    \n    # Extract the solution for the number of pins Eugene had.\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_ways = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of its digits must also be divisible by 9.\n    # Initially we have the sum of digits as 1 + 2 + 3 + 4 + 5 = 15.\n    # We want to find a value for A such that (15 + A) is divisible by 9.\n    for A in range(10):  # Since A is a single digit, it can range from 0 to 9\n        if (15 + A) % 9 == 0:\n            target_number = 123450 + A\n            break\n    \n    # To find the remainder when the target number is divided by 4,\n    # we only need to look at the last two digits of the number.\n    last_two_digits = target_number % 100\n    \n    # Calculate the remainder when last two digits are divided by 4\n    remainder = last_two_digits % 4\n    \n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n\n    number = hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount\n    \n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure victory, Kelly needs to leave a multiple of 3 matches after her first turn,\n    # forcing Dan into a losing strategy where every move he makes will always allow Kelly\n    # to leave a multiple of 3 for Dan's turn.\n    # If Kelly removes 1 match, there will be 10 matches left, which is not a multiple of 3.\n    # If Kelly removes 2 matches, there will be 9 matches left, which is a multiple of 3.\n\n    # Therefore, Kelly should take away 1 match in the first turn.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4/7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    total_flowers_solution = solve(equation, total_flowers)\n\n    return total_flowers_solution[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    numerator = 5 + 1/7 + 3 + 3/11 + 1 + 13/23\n    denominator = 3 + 3/7 + 2 + 2/11 + 1 + 1/23\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(2*n+1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    motorcycles = 0\n\n    while True:\n        cars_wheels = (total_vehicles - motorcycles) * 4\n        motorcycles_wheels = motorcycles * 2\n        if cars_wheels + motorcycles_wheels == total_wheels:\n            return total_vehicles - motorcycles\n        motorcycles += 1\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_initial = 20\n    # Let Nicole's initial number of stickers be represented by the variable nicole_initial\n    nicole_initial = jason_initial + 18 + 5  # Jason now has 5 fewer after getting 18 from Nicole\n\n    # At the end, Jason has 20 (initial) + 18 (received) stickers\n    jason_final = jason_initial + 18\n\n    # Hence, Nicole must have had 5 more than Jason at the end\n    nicole_final = jason_final + 5\n\n    # Nicole's initial amount is then the final amount minus what she gave to Jason\n    nicole_initial = nicole_final + 18\n\n    return nicole_initial\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Increase in length by 10% is the same as multiplying by 1.10\n    length_multiplier = 1.10\n\n    # Reduction in breadth is to 4/5 of the original breadth\n    breadth_multiplier = 4 / 5\n\n    # The new height is 11/10 of the original height\n    height_multiplier = 11 / 10\n\n    # To get the new volume as a percentage of the original volume\n    # we multiply the multipliers together and then multiply by 100\n    new_volume_percentage = (length_multiplier * breadth_multiplier * height_multiplier) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_grams in range(0, 77 // 2 + 1):\n        if (77 - 2 * two_grams) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n\n    total_distance_m = total_distance_km * 1000\n    distance_between_marshals_m = total_distance_m / (num_marshals - 1)\n\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_first_part = 180  # meters per minute\n    time_first_part = 6     # minutes\n\n    speed_second_part = 120  # meters per minute\n    time_second_part = 8     # minutes\n\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n\n    total_distance = distance_first_part + distance_second_part\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5)\n    red_tiles = sum(4 * i for i in range(0, side_length // 2, 2))\n    green_tiles = sum(4 * i for i in range(1, side_length // 2, 2))\n    red_tiles += (side_length // 2) ** 2 if side_length % 2 == 1 else 0\n    more_tiles = abs(red_tiles - green_tiles)\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    \n    return more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n    # Interest for first year\n    first_year_interest = principal * interest_rate\n    # Total amount after first year\n    total_after_first_year = principal + first_year_interest\n    # Interest for second year\n    second_year_interest = total_after_first_year * interest_rate\n    # Total interest earned after second year\n    total_interest = first_year_interest + second_year_interest\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time_available = 80  # total time in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + 4/7\n    decimal_value = round(mixed_number, 1)\n    return decimal_value\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    repeating_sequence = \"428571\"  # the periodic part of the decimal\n    index = (69 - 1) % len(repeating_sequence)  # Adjusting index for 0-based and finding the position in the repeating sequence\n    ans = int(repeating_sequence[index])  # Getting the digit at the specific position\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each child's age\n    y_son, o_son, y_daughter, o_daughter = symbols('y_son o_son y_daughter o_daughter')\n\n    # Set up the equations based on the given problem\n    equation1 = Eq(y_son + o_son + y_daughter + o_daughter, 55)\n    equation2 = Eq(y_son - o_son, 3)\n    equation3 = Eq(y_daughter - o_daughter, 2)\n    equation4 = Eq(y_son, 2 * o_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (y_son, o_son, y_daughter, o_daughter))\n\n    youngest_age = min(solutions.values())\n\n    return youngest_age\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Then Vastco sold 1.68x in 2014\n    \n    # Vastco's sales increased by 32% in 2015, so Vastco sold 1.32 * 1.68x = 2.2176x in 2015\n    # Vastco sold 44% more than Megacorp in 2015, so 2.2176x = 1.44y, where y is Megacorp's sales in 2015\n    \n    # Now we need to find the ratio of y to x, which represents Megacorp's percentage increase from 2014 to 2015\n    # y = 2.2176x / 1.44\n    ratio_y_to_x = 2.2176 / 1.44\n    \n    # The percentage increase is (y - x) / x * 100%\n    percentage_increase = (ratio_y_to_x - 1) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_profit = 0.5  # planned profit is 50%\n    first_day_sold = 0.7   # 70% goods sold on first day\n    total_profit = 0.82    # total profit obtained was 82% of planned profit\n\n    # Let 'discount' be the discount rate on the second day (as a fraction)\n    discount = symbols('discount')\n\n    # Equation representing first day's profit\n    first_day_profit = first_day_sold * original_profit\n\n    # Remaining goods after first day\n    remaining_goods = 1 - first_day_sold\n\n    # Equation for second day's profit; total profit is the sum of both days\n    total_profit_equation = Eq(first_day_profit + remaining_goods * (1 - discount), total_profit * (1 + original_profit))\n\n    # Solve for discount rate\n    discount_rate = solve(total_profit_equation, discount)\n\n    return discount_rate[0]\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n\n    if empty_bottles == 3:  # Borrow 1 empty bottle to get 1 new one\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # There are 9 one-digit numbers (1-9), each requiring 1 digit, total 9*1=9 digits\n    one_digit = 9 * 1\n\n    # There are 90 two-digit numbers (10-99), each requiring 2 digits, total 90*2=180 digits\n    two_digits = (99 - 10 + 1) * 2\n\n    # There are 14 three-digit numbers (100-113), each requiring 3 digits, total 14*3=42 digits\n    three_digits = (113 - 100 + 1) * 3\n\n    # Sum of all digits used\n    total_digits = one_digit + two_digits + three_digits\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let's assume the total number of pearls is x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x/2 + x/4 + x/6 + 3, x)\n\n    # Now we solve for x\n    total_pearls = solve(equation, x)\n\n    return total_pearls[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n\n    # Calculation based on the law of multiplication\n    # (workers * days) = constant work\n    # Solving for days for 1 worker\n    days_for_1_worker = workers * days_for_3_workers\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)  # black rabbits are 14 more than white rabbits\n    equation2 = Eq(grey, white - 2)    # grey rabbits are 2 less than white rabbits\n    equation3 = Eq(black + white + grey, 84)  # total number of rabbits is 84\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of erasers John and his brother have\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n    \n    # Equation representing the total erasers they have\n    total_erasers_eq = Eq(john_erasers + brother_erasers, 246)\n    # Equation representing the difference in the number of erasers\n    difference_eq = Eq(john_erasers, brother_erasers + 32)\n    \n    # Solve the system of equations\n    solutions = solve((total_erasers_eq, difference_eq), (john_erasers, brother_erasers))\n    \n    # Return the number of erasers John's brother has\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    final_amount = 92\n\n    # Let x be the number of glasses broken\n    # He gets $1 for each glass delivered safely, and there are total_glasses - x delivered safely.\n    # He loses $1 for each glass broken which is x.\n    # So the equation will be (total_glasses - x) - x = final_amount\n    # Simplifying this we get total_glasses - 2x = final_amount => 2x = total_glasses - final_amount\n    # Now we solve for x\n    x = (total_glasses - final_amount) // 2\n\n    return x\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # Round-robin tournaments imply that each team plays every other team once\n    # If there are n teams, then the number of matches is given by n*(n-1)/2\n    # We can find n by solving n*(n-1)/2 = 45\n    \n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n', integer=True)\n    equation = Eq(n*(n-1)/2, 45)\n    \n    number_of_teams = solve(equation, n)\n    \n    # Since n will have one positive and one negative solution, only the positive makes sense\n    ans = [team for team in number_of_teams if team.is_positive]\n    \n    return ans[0]  # return the positive number of teams\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\n\ndef solution():\n    # Calculate number of ways to choose entrances for Len, Joe, Angle, and Jack\n    # when at least one person must use each entrance.\n    # This can be done by subtracting the ways in which one or more entrances\n    # are not used from the total possible ways.\n    \n    total_ways = 3**4\n    \n    # Subtract the ways in which only 2 entrances are used (ignoring the 3rd entrance).\n    # There are 3 ways to choose which two entrances are used,\n    # and for each combination of entrances, there are 2**4 ways the 4 people can enter.\n    two_entrances_used = 3 * (2**4)\n    \n    # Add back the cases we subtracted twice: when all 4 people use the same entrance.\n    # There are 3 ways to choose the single entrance used.\n    all_same_entrance = 3\n    \n    # Use the inclusion-exclusion principle:\n    ways = total_ways - two_entrances_used + all_same_entrance\n    \n    return ways\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mayank_number = symbols('mayank_number')\n    equation = Eq(2 * mayank_number + 4, 40)\n    solution = solve(equation, mayank_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost\n    return change / 100  # Converting from pence to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the three consecutive odd integers\n    # Since they are consecutive and odd, they must be in the form x, x+2, x+4\n    x = symbols('x')\n\n    # Equation representing the sum of three consecutive odd integers\n    equation = Eq(x + (x + 2) + (x + 4), 57)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    return x_value\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if num * 3 == 2:\n            return num\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of people in the class (p), the original number of boats (b)\n    p, b = symbols('p b')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq((b - 1) * 9, p)   # If the number of boats reduces by 1, each carries 9 people\n    equation2 = Eq((b + 1) * 6, p)   # If the number of boats increases by 1, each carries 6 people\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, b))\n\n    # Since we want the number of people, return the solution for p\n    return solutions[p]\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for number in range(6, 15):\n        if (number % 4 == 0) and (36 % number == 0):\n            return number\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n\n    for perm in permutations(digits, 4):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        min_sum = min(min_sum, num1 + num2)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60\n    total_marks_now = total_marks_before + 70\n    new_average = total_marks_now / 5\n    \n    return new_average\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cookies John and Peter have originally\n    john_initial, peter_initial = symbols('john_initial peter_initial')\n\n    # Equation 1: John had 180 more cookies than Peter initially\n    equation1 = Eq(john_initial, peter_initial + 180)\n\n    # Equation 2: After selling, John had 1/2 as many as Peter had left\n    john_sold = john_initial * (4/5)\n    peter_left = peter_initial - (peter_initial * (3/10))\n    equation2 = Eq(john_sold, peter_left / 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john_initial, peter_initial))\n\n    return solutions[john_initial]\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # 3-digit numbers range from 100 to 999\n        str_num = str(i)  # Convert the number to a string to access individual digits\n        # Sum of first two digits\n        sum_of_first_two = int(str_num[0]) + int(str_num[1])\n        # Check if third digit is sum of first two\n        if sum_of_first_two == int(str_num[2]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price = 4\n    discount_a = 0.1  # 10% discount\n    discount_b = 1    # 1 dollar off\n\n    # calculate the price with discount A\n    price_a = full_price * (1 - discount_a) * 6\n\n    # calculate the price with discount B\n    price_b = (full_price - discount_b) * 6\n\n    # return the smaller amount as the answer\n    ans = min(price_a, price_b)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in Class A and B, and the total peaches\n    students_a, students_b, peaches = symbols('students_a students_b peaches')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(peaches, 5 * students_a + 10)  # If all peaches given to Class A\n    equation2 = Eq(peaches, 8 * students_b - 2)   # If all peaches given to Class B\n    equation3 = Eq(students_a, students_b + 3)    # Class A has 3 more students than Class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (students_a, students_b, peaches))\n\n    # Return the total number of peaches\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number_to_round = 3172\n    rounded_number = round(number_to_round / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n    \n    horse_apples_kg = 20\n    pig_apples_kg = 15\n    rabbit_apples_kg = 5\n    \n    total_animals = total_horses + total_pigs + total_rabbits\n    \n    total_apples_kg = (total_horses * horse_apples_kg) + (total_pigs * pig_apples_kg) + (total_rabbits * rabbit_apples_kg)\n    \n    average_apples_per_animal = total_apples_kg / total_animals\n    \n    return average_apples_per_animal\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson_left, jayden_left = symbols('benson_left jayden_left')\n    \n    # Benson spent $74\n    benson_spent = 74\n    \n    # Jayden spent $120\n    jayden_spent = 120\n    \n    # Combined total initially $590\n    total_money = 590\n\n    # Equations based on problem statement\n    equation1 = Eq(benson_spent + benson_left, total_money - jayden_spent - jayden_left)\n    equation2 = Eq(benson_left, 3 * jayden_left)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    s = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = s % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3/4\n    water_in_drink = total_drink * fraction_water\n    return water_in_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbol for the unknown number\n    num = symbols('num', integer=True)\n\n    # Formulate the equation based on the puzzle\n    equation = Eq(num * num + num, 380)\n\n    # Solve the equation for the whole number\n    solutions = solve(equation, num)\n\n    # Find the solution that is a whole number (integer)\n    ans = [s for s in solutions if s.is_integer][0]\n\n    return ans\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Normalize both Betty's and Kevin's walking times to Kevin's start time\n    # Let t be the time (in minutes) that Betty leaves before Kevin\n    # In 6 minutes Betty arrives at the grocery store\n    # In 9 minutes (6 + 3), Betty is 900 m away from the cinema\n    # Therefore, Betty's speed is 900 m / 9 min = 100 m/min\n    # Kevin's speed is 150 m / 6 min = 25 m/min\n    \n    # Betty's distance from the store after 6 minutes (when Kevin starts) is betty_speed * t\n    # Kevin's distance from the store after walking 3 more minutes is kevin_speed * 3\n    # Since Betty's distance from the store after 6 minutes is the same as Kevin's after 3 more minutes:\n    # 100 * t = 25 * 3\n    # Solve for t:\n    t = (25 * 3) / 100\n    \n    return t\n\nans = solution()"
    ]
}