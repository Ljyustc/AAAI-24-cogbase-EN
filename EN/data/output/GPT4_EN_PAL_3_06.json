{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    ans = (n*(n+1)*(2*n+1)//6) - ((first_term-1)*first_term*(2*(first_term-1)+1)//6)\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert start time to minutes\n    end_time = 10 * 60   # Convert end time to minutes\n\n    class_duration = end_time - start_time  # Calculate the duration in minutes\n\n    return class_duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    money_left = 90\n    # Jia Jia spent 40% of the remainder on a skirt, so she is left with 60% of that remainder.\n    # Let's find the remainder before buying the skirt.\n    remainder_before_skirt = money_left / 0.6\n    # Jia Jia spent 20% of her initial money on a bag, so the remainder after buying the bag is 80% of the initial money.\n    initial_money = remainder_before_skirt / 0.8\n    return initial_money\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # We need to find an integer n such that\n    # n^2 + 5 = current number of students\n    # (n + 1)^2 = n^2 + 5 + 26\n    # Expanding the square gives: n^2 + 2n + 1 = n^2 + 31\n    # Which simplifies to: 2n = 30\n    # Thus, n = 15 is the size of a side of the initial square.\n    # The number of students is n^2 + 5 = 15^2 + 5\n    students = 15**2 + 5\n    return students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have 37 - x apples\n    # After receiving x apples, John will have 15 + x apples\n    # Amy wants to have 4 more apples than John, so we set up the equation:\n    # (37 - x) = (15 + x) + 4\n    # Solve for x:\n    x = (37 - 15 - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    n = 9  # total number of potted plants\n    r = 4  # number of potted plants to arrange\n    ans = permutations(n, r)\n    \n    return ans\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + (3 * jane_saved)\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # combinations with blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # combinations with dress with shoes\n    dress_shoes_combinations = dresses * shoes\n\n    # combinations with dress with heels\n    dress_heels_combinations = dresses * heels\n\n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # Winning positions are those where the number of oranges is not divisible by 4.\n    # To force George into a losing position after Fred's first move,\n    # Fred needs to leave a multiple of 4 oranges on the table.\n    # When there are 15 oranges, Fred can remove either 1, 2, or 3 oranges.\n    # If Fred removes 3 oranges, 12 (which is a multiple of 4) oranges will be left.\n    # Therefore, Fred should remove 3 oranges to ensure he can win.\n    fred_first_move = 3\n    return fred_first_move\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n    \n    tom_age_solution = solve(equation, tom_age)\n    \n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Selling price of each terraced house\n    selling_price = 99000\n    \n    # Let x be the cost price of the first house\n    # 10% profit means selling price is 110% of cost price\n    # selling_price = 110% of x => selling_price = 1.1 * x\n    # x = selling_price / 1.1\n    cost_price_first_house = selling_price / 1.1\n    \n    # Let y be the cost price of the second house\n    # 10% loss means selling price is 90% of cost price\n    # selling_price = 90% of y => selling_price = 0.9 * y\n    # y = selling_price / 0.9\n    cost_price_second_house = selling_price / 0.9\n    \n    # Overall cost price is the sum of the cost prices of both houses\n    overall_cost_price = cost_price_first_house + cost_price_second_house\n    \n    # Overall selling price is the sum of the selling prices of both houses\n    overall_selling_price = 2 * selling_price\n    \n    # Calculate profit or loss\n    # Profit or loss = overall selling price - overall cost price\n    profit_or_loss = overall_selling_price - overall_cost_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    result = 66666 * 66666\n    return result\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    ans = \"3/20\" if fraction > decimal else \"0.16\"\n    return ans\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    total_cupcakes = 90\n    cupcakes_per_egg = 15 / 3\n    eggs_used = total_cupcakes / cupcakes_per_egg\n\n    return int(eggs_used)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    for B_position in range(5):\n        for C_position in range(5):\n            if B_position != C_position:  # B and C cannot be in the same position\n                A_position = (B_position + C_position) // 2  # A is in the middle of B and C\n                if B_position < C_position and A_position * 2 == B_position + C_position:\n                    # Remaining positions for D and E after placing A, B, and C\n                    positions = [i for i in range(5) if i not in [A_position, B_position, C_position]]\n                    # Two possible ways to arrange D and E in the remaining spots\n                    count += 2\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for number_of_notes in range(1, 280):  # number_of_notes is the number of each denomination\n        total_value = 5 * number_of_notes + 10 * number_of_notes + 20 * number_of_notes\n        if total_value == 280:\n            return number_of_notes * 3  # since we have 3 denominations in the wallet\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Calculate the distance for jogging from 6:30 am to 8:30 am\n    jogging_time_hours = 2\n    jogging_speed_kmph = 8\n    jogging_distance_km = jogging_time_hours * jogging_speed_kmph\n    \n    # Calculate the distance for walking from 8:30 am to 9:30 am\n    walking_time_hours = 1\n    walking_speed_kmph = jogging_speed_kmph / 2\n    walking_distance_km = walking_time_hours * walking_speed_kmph\n    \n    # Total distance travelled during the exercise\n    total_distance_km = jogging_distance_km + walking_distance_km\n    return total_distance_km\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2 = pow(2, 100, 10)\n    last_digit_7 = pow(7, 100, 10)\n    last_digit_9 = pow(9, 100, 10)\n\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    return last_digit\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def diamond_operation(M, N):\n    return M * N + N + 1\n\ndef square_operation(M, N):\n    return 8 * M - N * N\n\ndef solution():\n    result_diamond = diamond_operation(7, 6)\n    result_square = square_operation(result_diamond, 9)\n    return result_square\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    for largest in range(16//4, 16):\n        for s1 in range(1, largest):\n            for s2 in range(s1, largest):\n                for s3 in range(s2, largest):\n                    if s1 != s2 and s2 != s3 and s1 != s3:\n                        if s1 + s2 + s3 + largest == 16:\n                            return largest\n    return None\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while not (isprime(p) and isprime(p + 107)):\n        p += 1\n\n    return p\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    minibus_capacity = 6\n\n    minibusses_needed = -(-students // minibus_capacity)  # Ceiling Division\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the sum of the given fractions\n    fractions_sum = (1 + Fraction(1,2) + Fraction(1,3) + Fraction(1,4) + Fraction(1,5))\n    \n    # Convert the result to have a denominator of 60\n    fractions_sum = fractions_sum * Fraction(60, 1)\n    \n    return fractions_sum.numerator\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    correct_avg_height = 163\n    incorrect_avg_height = 159\n    incorrect_height = 126\n    actual_height = 162\n\n    # The difference between incorrect and actual height recorded\n    error_difference = actual_height - incorrect_height\n\n    # The difference between the incorrect and correct average heights\n    avg_height_difference = correct_avg_height - incorrect_avg_height\n\n    # The number of girls can be found by dividing the total error by the difference per girl\n    num_girls = error_difference / avg_height_difference\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum([(i**2 + (i + 1)**2) / (i * (i + 1)) for i in range(1, 2008)])\n    return round(ans)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = 24 / 100 * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    multiplication = 123 * 321\n    division = multiplication // 123\n    return division\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operator(a, b):\n        return a * b - 2 * a + 4\n\n    ans = custom_operator(200, 199)\n    for i in range(188, 0, -1):\n        ans = custom_operator(ans, i)\n        \n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # Calculate number of terms in the series since it's odd numbers only\n    sum_of_series = (n * (n + 1) // 2) ** 2  # Apply the formula for the sum of cubes of first n natural numbers\n    return sum_of_series\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    # Initialize the result\n    result = 1\n    # Loop through the numbers 2 to 9 to calculate the product of fractions\n    for i in range(2, 10):\n        result *= (i + 1) / i\n    # Return the result\n    return result\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    \n    num_containers = (apples + container_capacity - 1) // container_capacity\n    \n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # Number of terms considering only odd numbers 1, 3, 5, ..., 19\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)  # Formula for the sum of squares of the first n natural numbers\n    return int(ans)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Danny takes 12 minutes from the first to the fourth floor.\n    # Assuming each floor-to-floor interval takes the same amount of time,\n    # The time taken to go up each interval from floor to floor is 12 minutes divided by 3 intervals (from 1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    time_per_interval = 12 / 3\n\n    # Since going from the first to the second floor is one interval,\n    # It requires 1 interval worth of time.\n    time_first_to_second = time_per_interval\n\n    return time_first_to_second\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t = number of $10 notes, s = number of $2 notes\n    t, s = symbols('t s')\n    \n    # He had a total of 40 notes\n    equation1 = Eq(t + s, 40)\n    \n    # After spending 40% of $10 notes and 25% of $2 notes\n    equation2 = Eq(t - 0.40 * t, (4/5) * (s - 0.25 * s))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, s))\n    \n    # Calculate the cost of the gift\n    cost = 0.40 * solutions[t] * 10 + 0.25 * solutions[s] * 2\n    \n    return cost\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, int(50**(1/3)) + 1):\n        cube = cube_root**3\n        possible_square = cube - 2\n        if int(possible_square**0.5 + 0.5) ** 2 == possible_square:\n            return possible_square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    total_oranges = 13\n    total_kids = 3\n    min_oranges_per_kid = 2\n    \n    given_oranges = min_oranges_per_kid * total_kids\n    remaining_oranges = total_oranges - given_oranges\n    \n    # Since each kid receives at least 2 oranges, consider the remaining oranges to be distributed.\n    # Using \"stars and bars\" theorem (Combination with repetition):\n    # We have remaining_oranges to distribute and total_kids - 1 bars to place.\n    # The formula then becomes: comb(remaining oranges + total kids - 1, remaining oranges)\n    \n    ans = comb(remaining_oranges + total_kids - 1, remaining_oranges)\n    return ans\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    initial_number = 9876543\n    ans = initial_number + 10000\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two unknown original numbers\n    x, y = symbols('x y')\n\n    # The original equation based on the sum of two numbers\n    eq1 = Eq(x + y, 11.63)\n\n    # The faulty equation where the decimal in one number is shifted\n    eq2 = Eq(x + 0.1 * y, 5.87)\n\n    # Solve for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculate 100 times the difference between the two original numbers\n    difference = 100 * abs(solutions[x] - solutions[y])\n\n    return difference\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "from math import gcd\n\ndef solution():\n    lengths = [56, 42, 84]\n    \n    # Calculate the greatest common divisor (GCD) of the lengths\n    greatest_length = gcd(lengths[0], gcd(lengths[1], lengths[2]))\n    \n    return greatest_length\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n - 1\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bill, son, father = symbols('bill son father')\n    \n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n    \n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # A four-digit number cannot start with 0.\n            continue\n        paso = 1000 * p + 100 * a + 10 * s + o\n        soap = 1000 * s + 100 * o + 10 * a + p\n        if paso == 2 * soap:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let m = man's daily drinking rate (barrels per day)\n    # Let w = wife's daily drinking rate (barrels per day)\n    # Given: m * 15 = 1 (the man can finish the barrel in 15 days)\n    # Given: (m + w) * 12 = 1 (the man and his wife can finish the barrel in 12 days)\n    # We want to find the number of days (d) for the wife to finish the barrel on her own,\n    # Therefore, w * d = 1.\n\n    # From the first equation, we get: m = 1/15\n    man_rate = 1 / 15\n\n    # From the second equation, we can solve for w:\n    # (1/15 + w) * 12 = 1\n    # w = (1/12) - (1/15)\n    wife_rate = (1/12) - (1/15)\n\n    # Now, we find d such that w * d = 1\n    # d = 1 / w\n    days_wife = 1 / wife_rate\n\n    return days_wife\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # Calculate the number of ways for each valid combination of balls left in the bag\n    for white_left in range(3, 9):\n        for red_left in range(2, 4):\n            for black_left in range(0, 4):\n                # Calculate the number of balls picked for each color\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n                # Check if the total number of balls picked is 10\n                if white_picked + red_picked + black_picked == 10:\n                    # Calculate the number of ways to pick the balls of each color\n                    ways = comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n                    # Add to the total number of ways\n                    total_ways += ways\n    return total_ways\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Arithmetic sequence: a_n = a_1 + (n - 1)d\n    a_1 = 3  # First day's questions\n    d = 3  # Common difference (3 more questions each day)\n\n    # Calculate the number of questions for each day and sum them up\n    total_questions = sum(a_1 + d * (i - 1) for i in range(1, 8))\n\n    return total_questions\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7 / 8) * 32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # We are given that this is an arithmetic sequence with equal differences\n    # And we have the number of beans for the 3rd, 4th, and 5th hour.\n    # We need to find the number of beans for the 1st hour.\n    \n    # We know the differences between consecutive terms are constant.\n    # The difference between 28 beans (4th hour) and 20 beans (3rd hour) is 8.\n    # Since the increments are the same, the difference between 20 beans and the beans peeled in the 2nd hour is also 8.\n    \n    # Calculate the number of beans in the 2nd hour by subtracting the common difference from the 3rd hour.\n    second_hour_beans = 20 - 8\n    \n    # Calculate the number of beans in the 1st hour by subtracting the common difference from the 2nd hour.\n    first_hour_beans = second_hour_beans - 8\n    \n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be from 1 to 9 (as it's a three-digit number)\n        for j in range(10):  # Second digit can be from 0 to 9\n            for k in range(10):  # Third digit can be from 0 to 9\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return (2 ** 10) % 3\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5    # Insect length in centimeters\n    snake_length_m = 1      # Snake length in meters\n    \n    # Convert snake length from meters to centimeters\n    snake_length_cm = snake_length_m * 100\n    \n    # Calculate how many times smaller the insect is than the snake\n    times_smaller = snake_length_cm / insect_length_cm\n    \n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    increment = 2\n    while True:\n        next_term = term + increment\n        if next_term > 99:\n            break\n        term = next_term\n        increment += 2\n    return term\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # Calculate the sum of the first three numbers\n    sum_first_three = 120 * 3\n    \n    # Calculate the sum of all four numbers using the new mean\n    sum_all_four = 150 * 4\n    \n    # The fourth number is the difference between the sum of all four and the sum of the first three\n    fourth_number = sum_all_four - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n    # The sum of all the fractions and the 3 remaining pearls should equal the original number of pearls x\n    # Therefore, we can write the equation: x/2 + x/4 + x/6 + 3 = x\n    \n    # Finding the least common multiple of the denominators 2, 4, and 6, which is 12\n    # Multiplying through by 12 to clear the fractions:\n    # 6x + 3x + 2x + 36 = 12x\n    \n    # Bringing all terms to one side of the equation:\n    # 6x + 3x + 2x - 12x = -36\n    # 11x - 12x = -36\n    # -x = -36\n    # x = 36\n    \n    # The original number of pearls was 36\n    \n    return 36\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    mass_left = initial_mass - mass_given_away\n    return round(mass_left, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We are looking for three consecutive even numbers, let's use x as the first number.\n    # The second number will be x + 2, and must be divisible by 8, hence x ≡ -2 (mod 8)\n    # The third number will be x + 4, and it must be divisible by 9, hence x ≡ -4 (mod 9)\n    # The first number x is divisible by 7, hence x ≡ 0 (mod 7)\n    # Using the Chinese Remainder Theorem to solve the system of congruences:\n    congruences = [(0, 7), (-2, 8), (-4, 9)]\n    x, _ = solve_congruence(*congruences)\n\n    # Calculate the sum of the three consecutive even numbers\n    total_sum = x + (x + 2) + (x + 4)\n    return total_sum\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n    \n    empty_basket_weight = half_full_weight - mangoes_half_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip was the 6th in a queue from the front\n    pip_position = 6\n\n    # Bud was the 6th from the end of the queue\n    bud_position_from_end = 6\n\n    # Counting from Pip to Bud there were 5 children\n    children_between = 5\n\n    # Calculate the total number of children in the queue\n    # Total = (Pip's position - 1) + (Children between) + (Bud's position - 1) + 1\n    # We subtract 1 from Pip and Bud's position to not double count them, and add 1 to include Bud in the total count\n    total_children = (pip_position - 1) + children_between + (bud_position_from_end) \n\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n    \n    # Fourth term in an arithmetic sequence can be expressed as:\n    # fourth_term = first_term + 3 * d (where d is the common difference)\n    common_difference = (fourth_term - first_term) // 3\n    \n    # Sum of an arithmetic series: total = n/2 * (2*a + (n-1)*d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    # The average age of a family of six is 29.\n    # Therefore, the total age of the family is 29 * 6\n    total_age_family = 29 * 6\n    \n    # The total age of the children is 64.\n    # The rest of the age is for the parents\n    total_age_parents = total_age_family - 64\n    \n    # There are two parents\n    average_age_parents_now = total_age_parents / 2\n    \n    # The average age of the parents 3 years ago is 3 years less than their current average age\n    average_age_parents_3_years_ago = average_age_parents_now - 3\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    target_paintings = 56\n\n    paintings_per_day = total_paintings_done / days_taken\n    remaining_paintings = target_paintings - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    sum_of_threes = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = sum_of_threes // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves_inserted = total_papers // interval\n    return leaves_inserted\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    shortest_time = float('inf')  # Initialize with infinite time\n    \n    # Generate all possible pairs that could go together first\n    for first_pair in combinations(times, 2):\n        for second_pair in combinations(times, 2):\n            # Avoid repeating the same pair in one round\n            if len(set(first_pair + second_pair)) < 4:\n                continue\n                \n            # Calculate total time for this round\n            # Fastest person rows back after the first cross\n            time_taken = max(first_pair) + min(first_pair) + max(second_pair)\n            \n            # The remaining person who hasn't crossed with the fastest back\n            other_side_times = [t for t in times if t not in first_pair]\n            other_side_times.remove(min(first_pair))\n            \n            # Fastest person rows back again\n            time_taken += min(first_pair)\n            \n            # Last two people cross the river\n            time_taken += max(other_side_times)\n            \n            shortest_time = min(shortest_time, time_taken)\n            \n    return shortest_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    common_difference = (term_12 - term_5) / (12 - 5)\n\n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # arithmetic progression:\n    # first term a1 = 2\n    # common difference d = 3\n    a1 = 2\n    d = 3\n\n    # calculate the last term of the original sequence\n    a_last = 242\n    \n    # calculate how many terms were originally in the sequence\n    n = ((a_last - a1) / d) + 1  # n = (an - a1)/d + 1\n\n    # calculate the sum of the first three terms\n    first_three_sum = a1 + (a1 + d) + (a1 + 2*d)\n\n    # calculate the new first term after erasing the first three terms and adding their sum at the end\n    new_a1 = a1 + 3*d\n\n    # each triple removal and addition is effectively a removal of two terms from the original sequence\n    # so the number of removals until 3 numbers are left is (n - 3)/2\n    removals = (n - 3) / 2\n\n    # calculate the second number of the remaining three\n    second_num = new_a1 + int(removals - 1)*d  # the second number will be the new_a1 moved removals - 1 times by d\n\n    return second_num\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud, bob = symbols('pip bud bob')\n    \n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n    \n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    original_time = 30  # in minutes\n    reduced_speed_time = original_time + 5  # time with reduced speed in minutes\n    reduced_distance = 2400  # distance covered with reduced speed in meters\n    speed_reduction = 0.20  # speed reduction in percentage\n\n    # Let's denote the original speed as S (meters per minute).\n    # Then the new speed after reduction is 0.80S.\n    # Distance covered at original speed = S * original_time\n    # Distance covered at reduced speed = 0.80S * (reduced_speed_time - original_time)\n\n    # The total distance is the sum of the distances covered at original and reduced speeds.\n    # total_distance = S * original_time + 0.80S * (reduced_speed_time - original_time)\n    # But we know that the reduced speed distance is 2400 meters, so:\n    # 2400 = 0.80S * (reduced_speed_time - original_time)\n    # 2400 = 0.80S * 5\n    # Now solve for S:\n    S = 2400 / (0.80 * 5)\n\n    # Substitute S back into the total distance equation:\n    total_distance = S * original_time + 2400\n\n    return total_distance\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    ans = jacob + sisters + brothers\n    return ans\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    days_for_5_people = 15\n    target_days = 7\n    work_per_person = 1 / 5\n\n    total_work = days_for_5_people * work_per_person\n    people_needed = total_work / target_days\n    \n    additional_people = people_needed - 5\n\n    return int(additional_people) if additional_people == int(additional_people) else int(additional_people) + 1\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    total_students = 1050\n    A_transferring = 20\n    A_remaining_difference = 10\n\n    equation1 = Eq(A - A_transferring, B + A_transferring + A_remaining_difference)\n    equation2 = Eq(A + B, total_students)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # Initial temperature at 5:00 am\n    rate = 2  # Temperature rise per hour\n    hours_passed = 5.5  # Time from 5:00 am to 10:30 am is 5.5 hours\n    increased_temp = hours_passed * rate  # Total temperature increase\n    current_temp = initial_temp + increased_temp  # Temperature at 10:30 am\n    return current_temp\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation: x/2 - 1 + (x/4 - 2) * 2 + ((x/4 - 2) / 3 + 3) * 3 = x - 49\n    equation = Eq(x/2 - 1 + (x/4 - 2) * 2 + ((x/4 - 2) / 3 + 3) * 3, x - 49)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # To not get a green pencil in the worst case, Darrell could draw all the blue and white pencils.\n    # Blue pencils = 3, White pencils = 3\n    worst_case_non_green_pencils = 3 + 3\n    \n    # To ensure getting at least 1 green pencil,\n    # Darrell must draw one more pencil after the worst case scenario.\n    required_pencils = worst_case_non_green_pencils + 1\n    \n    return required_pencils\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n\n    # Filter out the divisors for which 2240/divisor is a square\n    possible_n_values = [d for d in divs if is_square(2240 // d)]\n\n    # If multiple values are possible, return the greatest one\n    # because we are looking for the value of n (the largest divisor\n    # such that 2240/n is still a square number)\n    ans = max(possible_n_values)\n\n    return ans\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    # Let x be the number of books on the top shelf\n    # Then an arithmetic sequence is formed as follows:\n    # x, x+3, x+6, ..., x+3*6 (since there are 7 shelves and each shelf has 3 fewer books)\n    # The sum of an arithmetic sequence can be calculated by the formula:\n    # sum = (number of terms) * (first term + last term) / 2\n    # Here the sum of the books is given to be 280, and the number of terms is 7 (number of shelves).\n    \n    total_shelves = 7\n    total_books = 280\n    common_difference = 3\n\n    # last_term = first_term + (total_shelves - 1) * common_difference\n    # 2 * first_term = (2 * total_books / total_shelves) - ((total_shelves - 1) * common_difference)\n    top_shelf_books = (2 * total_books / total_shelves) - ((total_shelves - 1) * common_difference)\n\n    return int(top_shelf_books // 2)\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    return reduce(lcm, [3, 5, 9, 3 * 7])\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    # if every kid eats 18 candies, then 12 more candies are needed.\n    equation1 = Eq(kids * 18, candies - 12)\n    \n    # if every kid eats 15 candies, the candies are just enough for 2 more kids.\n    equation2 = Eq((kids + 2) * 15, candies)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for page_number in range(1, 311):\n        total_sum += sum(map(int, str(page_number)))\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return round(cost_for_11_items, 2)\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n\n    expression = 16.7 - ((-4.56)**2 - (8.1)**3) / (7.2**3) / (-math.sqrt(6 + 3/4) + 30.15)**(1/3)\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let x be the number of years later\n    # After x years, Oliver will be 20 + x years old,\n    # and Lin will be 26 + x years old.\n    # The sum of their ages will be (20 + x) + (26 + x),\n    # which needs to equal 48.\n\n    # Set up the equation: 20 + x + 26 + x = 48\n    # Simplify the equation: 46 + 2 * x = 48\n    # Solve for x: 2 * x = 48 - 46\n    # x = (48 - 46) / 2\n\n    x = (48 - 46) // 2\n\n    return x\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # speed ratio of Jayden to Carter\n    ratio_jayden = 7\n    ratio_carter = 4\n    total_ratio = ratio_jayden + ratio_carter\n\n    # total distance\n    distance = 440\n\n    # since they meet after Jayden arrives at A, we can divide the route into 3 parts:\n    # Jayden's first part, Carter's part, and Jayden's second part\n    # let's denote the first meeting point distance from A as x\n    # then Jayden walks x and Carter walks (distance - x), and the ratio is 7:4\n    # so 7/4 = x / (distance - x)\n    # solve for x\n    x = (ratio_jayden * distance) / total_ratio\n\n    # but Jayden walks x distance twice (to A and back), so we need to multiply it by 2 to find the second meeting point distance from A\n    second_meeting_distance = 2 * x\n    return second_meeting_distance\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_age, mrs_age = symbols('mr_age mrs_age')\n    \n    # Equation for the ratio 7 years ago\n    equation1 = Eq(6 * (mrs_age - 7), 5 * (mr_age - 7))\n    # Equation for the sum of their current ages\n    equation2 = Eq(mr_age + mrs_age, 69)\n    \n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n    \n    return solutions[mr_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of stickers Sam had originally be 7x, and Peter had 5x\n    sam, peter, john = symbols('sam peter john')\n    \n    # Sam and Peter each gave 20% of their stickers to John\n    sam_gives = 0.20 * (7 * sam)\n    peter_gives = 0.20 * (5 * sam)\n    \n    # John's stickers increased by 80%\n    john_final = john + sam_gives + peter_gives\n    john_initial = john_final / 1.8\n    \n    # Sam had 20 stickers more than John in the end\n    sam_final = (7 * sam) - sam_gives\n    equation = Eq(sam_final, john_final + 20)\n    \n    # Solve for sam (which is the multiplier for both Sam's and Peter's stickers)\n    solutions = solve((equation, Eq(john, john_initial)), (sam, john))\n    \n    # Calculate the amount of stickers Peter had at first, which is 5 times 'sam'\n    peter_stickers = 5 * solutions[sam]\n    \n    return peter_stickers\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_five = 87\n    new_mean = 88\n    num_students = 6\n\n    total_score_for_five = mean_of_five * (num_students - 1)\n    total_score_for_six = new_mean * num_students\n\n    jim_score = total_score_for_six - total_score_for_five\n\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    result = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return result\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    total_length = one_fifth_length * 5\n    one_third_length = total_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = original_price * 0.10\n    price_after_first_discount = original_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats purchased at first\n    x = symbols('x')\n\n    # Equation representing the total cost price of x bats\n    cost_price = 135 * x\n\n    # Equation representing the total selling price when 3 bats are left\n    selling_price = 185 * (x - 3)\n\n    # Equation representing the profit made when 3 bats are left\n    profit = selling_price - cost_price\n\n    # Set up the equation according to the problem statement\n    equation = Eq(profit, 2945)\n\n    # Solving for x\n    solutions = solve(equation, x)\n\n    # Return the number of baseball bats purchased at first\n    return solutions[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity_per_minibus = 6\n    \n    minibusses_needed = (total_boys + capacity_per_minibus - 1) // capacity_per_minibus\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Calculate the number of triangles in a diamond\n    num_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair, table = symbols('chair table')\n\n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the time taken by the hot tap alone to fill the bath.\n    x = symbols('x')\n\n    # 1/x is the part of the bath filled by the hot tap in one minute.\n    # 1/(x/2) is the part of the bath filled by the cold tap in one minute.\n    # The equation for both taps filling the bath in 10 minutes is: 10 * (1/x + 2/x) = 1\n    equation = Eq(10 * (1/x + 2/x), 1)\n\n    # Solve for x, the time taken by the hot tap alone to fill the bath.\n    hot_tap_time = solve(equation, x)[0]\n\n    # Find the time taken by the cold tap alone to fill the bath,\n    # which is half the time taken by the hot tap.\n    cold_tap_time = hot_tap_time / 2\n\n    return cold_tap_time\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_mean = (total_sum - 4 * (1111 - 240)) / 6\n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_amount_pence = 60\n    bud_amount_pounds = 1.10\n    bud_amount_pence = bud_amount_pounds * 100\n\n    total_amount_pence = pip_amount_pence + bud_amount_pence\n    total_amount_pounds = total_amount_pence / 100\n\n    return total_amount_pounds\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1,10):\n        for I in range(0,10):\n            for S in range(0,10):\n                if I != P and I != S and P != S:\n                    total = I + I + I + I + (S + S + S + S)*10\n                    PI = P*10 + I\n                    if PI == total:\n                        return PI\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    speed1 = 7  # meters per second\n    distance1 = 280  # meters\n    time1 = distance1 / speed1  # time spent on the first stretch\n\n    speed2 = 5  # meters per second\n    distance2 = 400  # meters\n    time2 = distance2 / speed2  # time spent on the middle stretch\n\n    speed3 = 8  # meters per second\n    distance3 = 800 - distance1 - distance2  # meters remaining for the sprint stage\n    time3 = distance3 / speed3  # time spent on the sprint stage\n\n    total_time = time1 + time2 + time3  # total time of the race in seconds\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n\n    final_value = initial_value * (depreciation_rate ** years)\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Don's speed is 60 m/min and they meet 360 m from the house.\n    # Hence Don walked for 360 m / 60 m/min = 6 minutes.\n    don_time = 360 / 60\n\n    # In 6 minutes, Danny meets him which means Danny covered (780 - 360) m in 6 minutes.\n    # Calculate Danny's speed.\n    danny_speed = (780 - 360) / don_time\n\n    return danny_speed\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    # Single-digit page numbers: 1-9 use 9 digits in total\n    # Double-digit page numbers: 10-99 use 90 * 2 = 180 digits in total\n    # Triple-digit page numbers: 100-999 would use 900 * 3 = 2700 digits in total\n\n    # Since we only have 792 digits, it means we have fully used the single and double-digit page numbers\n    # and we need to find out how many triple-digit page numbers we've used\n\n    # Subtract the single and double-digit pages' digits from the total digit count\n    remaining_digits = 792 - (9 + 180)\n\n    # Calculate the number of triple-digit pages using the remaining digits\n    # Each page number here uses 3 digits\n    triple_digit_pages = remaining_digits // 3\n\n    # Total number of pages is the sum of all single, double, and calculated triple-digit pages\n    total_pages = 9 + 90 + triple_digit_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_living_over_20 = 0.6\n    prob_living_over_25_given_living_over_20 = 0.3\n\n    # Since we want the probability of it living over 25 given it is already over 20,\n    # we use conditional probability: P(A|B) = P(A and B) / P(B)\n    # Here we consider P(A and B) as prob_living_over_25_given_living_over_20\n    # and P(B) as prob_living_over_20.\n\n    prob_living_over_25 = prob_living_over_25_given_living_over_20 / prob_living_over_20\n\n    return prob_living_over_25\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_g = (1 * 1000 + 500) + (1 * 1000 + 200) + 900\n    weight_per_tin = total_weight_g / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # There are 2 possibilities for A or B to be on the far right\n    # and 2 possibilities for A or B to be on the far left.\n    possibilities_for_A_or_B = 2 * 2\n    \n    # After A and B take their positions, C and D have no restrictions.\n    # Therefore, there are 2! ways to arrange C and D.\n    possibilities_for_C_and_D = 2\n    \n    # The total number of different ways they can line up is the product\n    # of the possibilities for A and B, and the possibilities for C and D.\n    total_possibilities = possibilities_for_A_or_B * possibilities_for_C_and_D\n    \n    return total_possibilities\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Each marble colour can be taken at most 3 times without having 4 of the same color\n    # So after picking 3 marbles of each colour (3*3 colours in total), the next marble must be the 4th of one colour\n    return 3 * 3 + 1\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:  # Ensure the two digits are different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = min(d for d in digits if d % 2 == 0)\n\n    remaining_digits = sorted([d for d in digits if d != smallest_even])\n\n    smallest_4_digit_even_number = int(f\"{remaining_digits[0]}{remaining_digits[1]}{remaining_digits[2]}{smallest_even}\")\n    return smallest_4_digit_even_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for number in range(99, 9, -1): # Start from the largest 2-digit number, 99, down to the smallest, 10.\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work_done_by_3_workers = workers * days_for_3_workers\n    \n    days_for_1_worker = work_done_by_3_workers / 1  # Since work is constant, divide by 1 worker\n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Given equations\n    # A = 10x + y\n    # B = 200 + 10x + y\n    \n    # Relationship between B and A: B = 6A + 25\n    # Therefore, 200 + 10x + y = 6 * (10x + y) + 25\n    \n    # Simplifying the equation gives us:\n    # 200 + 10x + y = 60x + 6y + 25\n    # 200 + 10x + y - 60x - 6y = 25\n    # -50x - 5y + 200 = 25\n    # -50x - 5y = -175\n    # 10x + y = 35, after dividing the entire equation by -5\n    \n    # So the value of A is 35, not 45. John is wrong.\n    return 35\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    expressions = [\n        \"(285+15) / 5 - 2\",\n        \"285 + (15 / 5) - 2\",\n        \"285 + 15 / (5 - 2)\",\n        \"(285+15) / (5-2)\",\n        \"(285+15 / 5) - 2\",\n        \"285 + 15 / 5 - 2\",  # Original expression, no brackets\n        \"285 + (15 / (5 - 2))\"\n    ]\n\n    results = {eval(expr) for expr in expressions}\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n\n    pupils_per_row = total_pupils // num_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    a, b = symbols('a b')\n\n    # Define the two equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # A locker will be unlocked (in its initial state) if it is toggled an even number of times.\n    # It will be toggled once for every divisor it has.\n    # Therefore, a locker will be in its initial state if it has an even number of divisors.\n    # Only perfect squares have an odd number of divisors, so they will be the ones toggled to a locked state.\n    # We need to find the number of perfect squares between 1 and 100 (inclusive).\n\n    # Calculate the square root of the last locker number\n    sq_root = int(100**0.5)\n    # The number of perfect squares less than or equal to 100 is the number of integers from 1 up to the square root.\n    # This is because perfect squares are of the form n^2, where n is an integer\n    num_perfect_squares = sq_root\n\n    # Subtract the number of lockers with perfect square numbers (locked), from total lockers (100) to get unlocked lockers.\n    unlocked_lockers = 100 - num_perfect_squares\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    # Generate all permutations of 7 elements (students)\n    for p in permutations('ABCDEFG'):\n        # Convert tuple into a string for easier manipulation\n        p_str = ''.join(p)\n        # Check conditions: A between B and C, D not next to E, F next to G\n        if 'F' not in p_str[-1] and ('F' not in p_str[0] or 'G' not in p_str[0]):  # F and G can't be at both ends\n            if ('F' in p_str and p_str.index('F') + 1 < len(p_str) and p_str[p_str.index('F') + 1] == 'G') or \\\n               ('G' in p_str and p_str.index('G') + 1 < len(p_str) and p_str[p_str.index('G') + 1] == 'F'):\n                if 'D' not in p_str[-1] and ('D' not in p_str[0] or 'E' not in p_str[0]):  # D and E can't be at both ends\n                    if 'DE' not in p_str and 'ED' not in p_str:\n                        if 'B' in p_str and 'C' in p_str and \\\n                        ((p_str.index('B') < p_str.index('A') < p_str.index('C')) or\n                         (p_str.index('C') < p_str.index('A') < p_str.index('B'))):\n                            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n    \n    nicolas_target_level = 16\n    ratio = yiding_current_level / nicolas_current_level\n\n    yiding_target_level = nicolas_target_level * ratio\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_per_cake = symbols('price_per_cake')\n    lucy_money = symbols('lucy_money')\n\n    equation1 = Eq(price_per_cake * 10 - lucy_money, 11)\n    equation2 = Eq(price_per_cake * 13 - lucy_money, 26)\n\n    solutions = solve((equation1, equation2), (price_per_cake, lucy_money))\n\n    return solutions[price_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    num_children = 4 + 6\n    average_mass = total_mass / num_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = quotient * divisor + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    total_score = total_matches * 40\n    known_scores = [37, 53, 29, 41]\n    known_scores_sum = sum(known_scores)\n    x = total_score - known_scores_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    counts = {'C': 1, 'H': 1, 'E': 3, 'S': 1}\n\n    ways = factorial(total_letters)\n    for count in counts.values():\n        ways //= factorial(count)\n\n    return ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total numbers from 100 to 999\n    \n    # Cases where there are no sevens at all\n    no_sevens = 8 * 9 * 9  # Options for each digit place without the digit 7\n    \n    # Total combinations minus the combinations with no sevens gives us at least one seven\n    at_least_one_seven = total_three_digit_numbers - no_sevens\n    \n    # Cases with exactly one seven\n    one_seven_first = 1 * 9 * 9   # Seven is the first digit, the others can't be seven\n    one_seven_middle = 8 * 1 * 9  # Seven is the middle digit, the others can't be seven\n    one_seven_last = 8 * 9 * 1    # Seven is the last digit, the others can't be seven\n\n    exactly_one_seven = one_seven_first + one_seven_middle + one_seven_last\n\n    # At least two sevens would be at least one seven minus exactly one seven\n    at_least_two_sevens = at_least_one_seven - exactly_one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the original number of cows and g represent the original number of goats\n    c, g = symbols('c g')\n\n    # 65% of the original animals were cows, so the rest (35%) were goats\n    eq1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats were added, the percentage of cows increased by 20%\n    eq2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # The number of goats doubled\n    eq3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(10000, 25000):  # start range from 10000 because when multiplying by 4 it should be a six-digit number\n        original = num * 10 + 9  # append 9 as the unit digit to make it a six-digit number\n        new_number = 900000 + num  # place 9 at the beginning\n        if new_number == 4 * original:\n            return original\n    return None\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, jonathan = symbols('abigail jonathan')\n    \n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    age_solution = solve((equation1, equation2), (abigail, jonathan))\n    \n    return age_solution[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    total_work = 1\n    alice_work_per_day = 1/40\n    bob_work_per_day = 1/60\n    combined_work_per_day = alice_work_per_day + bob_work_per_day\n\n    days_off = 0\n    while True:\n        actual_work_done = days_off * bob_work_per_day + (27 - days_off) * combined_work_per_day\n        if actual_work_done >= total_work:\n            break\n        days_off += 1\n    \n    return days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n\n    return custom_operation(4, 3) - custom_operation(3, 4)\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible permutations for digits 0 to 9.\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Ensure that A and C are not zero as they are the first digits in ABA and CDC.\n        if A == 0 or C == 0:\n            continue\n        ABA = A * 101 + B * 10\n        CDC = C * 101 + D * 10\n        if ABA + CDC == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip - bud, 2)\n    equation2 = Eq(pip + bud, 10)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the price of one apple (a) and one banana (b)\n    a, b = symbols('a b')\n\n    # Create equations based on the given problem\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n\n    # Solve the equations for the price of one apple and one banana\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_given, total_pages = symbols('days_given total_pages')\n\n    equation1 = Eq(total_pages, 30 * (days_given + 2))\n    equation2 = Eq(total_pages, 39 * (days_given - 4))\n\n    solutions = solve((equation1, equation2), (days_given, total_pages))\n\n    return solutions[days_given], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = \"202002020200202\"  # one complete cycle of the pattern\n    cycle_length = len(sequence)\n    count_2_cycle = sequence.count('2')\n    \n    full_cycles = 535 // cycle_length\n    remaining_digits = 535 % cycle_length\n    \n    count_2_full_cycles = full_cycles * count_2_cycle\n    count_2_in_remaining = sequence[:remaining_digits].count('2')\n    \n    total_count_2 = count_2_full_cycles + count_2_in_remaining\n    \n    return total_count_2\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def custom_operation(a, b):\n        return a ** 2 + a * b\n\n    ans = custom_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of fifty-cent coins Owen originally had\n    # Let y be the number of one-dollar coins Owen originally had\n    x, y = symbols('x y')\n\n    # From the problem, two-sevenths of his coins were fifty-cent coins,\n    # so we have the equation: x = 2/7 * (x + y)\n    equation1 = Eq(x, 2/7 * (x + y))\n\n    # Owen's mother gave him 10 one-dollar coins and 5 dollars' worth of fifty-cent coins,\n    # which is 10 fifty-cent coins: new counts are x + 10 for fifty-cent coins and y + 10 for one-dollar coins\n    # In the end, he had twice as many one-dollar coins as fifty cent coins:\n    # 2 * (x + 10) = y + 10\n    equation2 = Eq(2 * (x + 10), y + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total number of coins Owen had originally: x + y\n    total_coins = solutions[x] + solutions[y]\n\n    return total_coins\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n\n    women = total_passengers - men - children\n\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    total_tickets = 19\n    total_amount = 75\n    adult_ticket_price = 5\n    child_ticket_price = 3\n\n    for adult_tickets in range(total_tickets + 1):\n        child_tickets = total_tickets - adult_tickets\n        if adult_tickets * adult_ticket_price + child_tickets * child_ticket_price == total_amount:\n            return adult_tickets\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    eq1 = Eq(dress, 3 * belt)\n    eq2 = Eq(shirt, 2 * dress)\n    eq3 = Eq(shirt - belt, 155)\n    \n    solutions = solve((eq1, eq2, eq3), (belt, dress, shirt))\n    \n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Write the equations based on the problem statement\n    equation1 = Eq(anna + betsy + charlene, 168)  # Total marbles\n    equation2 = Eq(anna - (betsy + 15 - 8), 0)    # After Betsy gives Anna 8 marbles\n    equation3 = Eq(anna*7, 2*(charlene - 15))     # Ratio of Anna to Charlene after Charlene gives out 15\n    equation4 = Eq(betsy*7, 5*(charlene - 15))    # Ratio of Betsy to Charlene after Charlene gives out 15\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # Betsy's marble count at first is Betsy's final count plus the 8 she gave to Anna and minus the 15 she received from Charlene\n    betsy_initial = solutions[betsy] + 15 - 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_per_day = 7\n    andy_total_saved = 378\n\n    brenda_saved_per_day = 6\n    days_andy_saved = andy_total_saved / andy_saved_per_day\n\n    brenda_total_saved = days_andy_saved * brenda_saved_per_day\n    \n    return brenda_total_saved\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_penalty = -2\n    total_score = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_penalty\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    n = 8  # Total number of contestants\n    r = 3  # Number of prizes to be awarded\n\n    ans = factorial(n) // factorial(n - r)\n    return ans\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length_ratio = 1\n    original_breadth_ratio = 1\n    original_height_ratio = 1\n\n    new_length_ratio = 1.1  # increased length by 10%\n    new_breadth_ratio = 4/5  # reduced breadth to 4/5\n    new_height_ratio = 11/10  # ratio of the new height to the original is 11:10\n\n    original_volume_ratio = original_length_ratio * original_breadth_ratio * original_height_ratio\n    new_volume_ratio = new_length_ratio * new_breadth_ratio * new_height_ratio\n\n    volume_percentage = (new_volume_ratio / original_volume_ratio) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sequence = [30, 40, 50] * 3\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    extra_mushrooms = 26\n\n    # Let's call x the number of mushrooms gathered in the second hour\n    # This means that during the first hour, (total_mushrooms - x) mushrooms were gathered\n    # According to the information given, adding 26 more mushrooms to the first hour will\n    # make the number of mushrooms equal to the second hour. So we have:\n    # (total_mushrooms - x) + 26 = x\n    # By solving this equation we find the number of mushrooms gathered in the second hour\n\n    x = (total_mushrooms + extra_mushrooms) // 2\n\n    return x\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Start with the smallest number of questions one person can solve, which is 1.\n    # As each person needs to solve different numbers of questions, we can start from 1 and go up.\n    # To maximize the number of questions Noa can solve, other classmates should solve the least possible questions.\n    # Hence, we assign 1, 2, 3, 4 questions to the other four classmates respectively.\n    # The remaining questions can be solved by Noa.\n\n    questions_for_others = 1 + 2 + 3 + 4\n    noa_questions = 40 - questions_for_others\n\n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Current age ratio Scan:Ted = 1:4\n    equation1 = Eq(scan * 4, ted)\n    \n    # Ratio 4 years from now Scan:Ted = 1:3\n    equation2 = Eq((scan + 4) * 3, ted + 4)\n    \n    # Solve the equations to find Scan's and Ted's ages\n    ages = solve((equation1, equation2), (scan, ted))\n    \n    # Calculate how many years ago the ratio was Scan:Ted = 1:9\n    # If x years ago the ratio was 1:9, then Scan-x : Ted-x = 1:9\n    years_ago = symbols('years_ago')\n    equation3 = Eq((scan - years_ago) * 9, ted - years_ago)\n    \n    # Solve equation with the obtained ages\n    years_ago_solution = solve(equation3.subs(ages), years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the distance covered by jogging\n    jogging_time = 1  # hours from 6:30 AM to 7:30 AM\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the distance covered by walking\n    walking_time = 2  # hours from 7:30 AM to 9:30 AM\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Calculate total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    meters = 9\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n\n    # total bikes\n    equation1 = Eq(foldable + non_foldable, 476)\n\n    # bikes sold and left\n    equation2 = Eq(non_foldable - (208 - (5/9 * non_foldable)), 4/7 * foldable)\n\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n\n    foldable_sold = solutions[foldable] - (4/7 * solutions[foldable])\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n\n    return mollies - guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # scale of 2 cm for every 3 meters\n    real_height_m = 12  # real height of the tree in meters\n    real_height_cm = real_height_m * 100  # convert height to cm\n\n    model_height_cm = (real_height_cm * scale_ratio)  # calculate model height in cm\n\n    return model_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If each of 20 students gets at most 2 pieces of candy,\n    # then the maximum number of candies distributed without anyone\n    # getting at least 3 pieces of candy is 20*2 = 40 pieces.\n    # To ensure that at least one student gets at least 3 pieces,\n    # we need to add 1 more piece of candy to the maximum calculated.\n    # Hence, the minimum number of pieces Valeria should prepare is 40 + 1.\n    min_candies = (20 * 2) + 1\n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_correct = 8\n    score_wrong = -4\n    total_score = 100\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * score_correct + wrong * score_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining = 6000\n    used_fraction = 5/8\n    original_amount = remaining / (1 - used_fraction)\n    return original_amount\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure Yohan gets a pair of white socks at worst case scenario, \n    # he could take out all red and black socks first.\n    max_red_socks = 10  # Maximum red socks\n    max_black_socks = 10  # Maximum black socks\n    \n    # Thus, after taking all red and black socks, \n    # the next two socks he takes must be white, ensuring a pair of white socks.\n    socks_to_get_white_pair = max_red_socks + max_black_socks + 2\n    \n    return socks_to_get_white_pair\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60 / 100\n    number = 765\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # The number of intervals between lamp posts is total_flowers / flowers_between_lamps\n    number_of_intervals = total_flowers / flowers_between_lamps\n\n    # As there would be one more lamp post than there are intervals, add 1 to get the number of lamp posts\n    number_of_lamp_posts = number_of_intervals + 1\n\n    # The distance between every 2 lamp posts is the length of the road divided by the number of intervals\n    distance_between_lamps = 50 / number_of_intervals\n    \n    return distance_between_lamps\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    # The sequence is an arithmetic sequence with a common difference of 2.\n    # First term (a) = 1, and the last term (l) = 19\n    a = 1\n    l = 19\n    # The formula for the sum of an arithmetic sequence is:\n    # sum = n/2 * (a + l) where n is the number of terms\n    n = (l - a) / 2 + 1  # Calculating the number of terms\n    sum_sequence = n / 2 * (a + l)\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # Total number of books is 6 books on the left of the favorite book \n    # plus the favorite book itself\n    # plus 13 books on the right (not 14, because the 14th is the favorite book itself)\n    ans = 6 + 1 + 13\n    return ans\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    temperature_decrease = 17\n    final_temp = initial_temp - temperature_decrease\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Since trees are planted at both ends of the road, we start counting from zero\n    ans = (road_length // distance_between_trees) + 1 \n\n    return ans\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_to_give = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since each child gets at least one apple and no two children can get the same number,\n    # we distribute one apple to each child first and then distribute the remaining apples.\n    total_apples = 19\n    num_children = 5\n\n    # First, give each child one apple\n    apples_distributed = num_children\n    # Remaining apples to distribute\n    apples_remaining = total_apples - apples_distributed\n\n    # Start with the maximum number for the last child and go downwards\n    # The maximum number a child can get is if the other four children get 1, 2, 3, and 4 apples\n    # 1 + 2 + 3 + 4 = 10, and we already distributed 5 apples, one to each child\n    # Hence, 19 - 10 - 5 = 4 apples which can be further distributed\n    \n    # 1, 2, 3, 4 have already been given, so we start with 5 for the next child\n    next_apple_count = 5\n    while apples_remaining >= next_apple_count:\n        apples_remaining -= next_apple_count\n        next_apple_count += 1\n\n    # The last child gets the number of apples that were remaining plus the initial apple\n    max_apples_for_last_child = next_apple_count\n\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12  # side length of the square lawn\n    border_distance = 1.5  # distance from the edge of the garden\n    bush_distance = 3  # distance between bushes\n\n    # Adjusted length for the bush plant area\n    adjusted_length = side_length - 2 * border_distance\n\n    # Number of bushes on one side\n    bushes_per_side = adjusted_length // bush_distance\n\n    # Total number of bushes for the entire garden (4 sides)\n    total_bushes = 4 * bushes_per_side\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    q_days = 8\n    q_hours_per_day = 10\n\n    # Calculate the work done by P and Q in one hour\n    p_work_per_hour = 1 / (p_days * p_hours_per_day)\n    q_work_per_hour = 1 / (q_days * q_hours_per_day)\n\n    # Calculate the combined work per hour if they work together\n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n\n    # Working 8 hours a day, calculate how many days they can complete the job together\n    hours_to_complete_job = 1 / combined_work_per_hour\n    days_to_complete_job = hours_to_complete_job / 8\n\n    return days_to_complete_job\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # speed of the fast van in km/hr\n    speed_slow_van = 78   # speed of the slow van in km/hr\n    time = 8              # time in hours\n\n    # The total distance apart is the sum of distances both vans travel in 8 hours\n    distance_apart = (speed_fast_van + speed_slow_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_percentage = 1 - 0.60  # 100% - 60% which is the work left\n    total_masks = 360 / remaining_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n    \n    # Find all divisors of 78\n    all_divisors = divisors(78)\n    \n    # Filter out the odd divisors as we only need the even number of bags\n    even_divisors = [d for d in all_divisors if d % 2 == 0]\n    \n    # The number of ways to divide the apples is equal to the number of even divisors\n    return len(even_divisors)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # 9 rabbits = 3 goats\n    # 2 goats = 4 cows\n    # We want to find how many rabbits (r) can be exchanged for 2 cows (c).\n\n    # First, find the exchange rate between rabbits and goats\n    rabbits_per_goat = 9 / 3\n\n    # Then, find the exchange rate between goats and cows\n    goats_per_cow = 2 / 4\n\n    # Now find the exchange rate between rabbits and cows by multiplying\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n\n    # Finally, calculate how many rabbits can be exchanged for 2 cows\n    ans = rabbits_per_cow * 2\n    return ans\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    skipped_questions = 3\n    answered_questions = total_questions - skipped_questions\n    total_score = 168\n\n    correct_marks = 4\n    wrong_marks = 1\n\n    # Let x be the number of correct answers and y be the number of wrong answers\n    # Then, we have two equations based on the given information:\n    # 1. x + y = answered_questions (since she answered all other questions)\n    # 2. correct_marks * x - wrong_marks * y = total_score\n    \n    # Since each correct question is worth 4 marks, and she lost 1 mark for every wrong question,\n    # we can combine the equations into:\n    # 4 * x - 1 * (answered_questions - x) = total_score\n    # which simplifies to:\n    # 5 * x - answered_questions = total_score\n\n    x = (total_score + answered_questions) / (correct_marks + 1)\n\n    return int(x)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Assuming the original number of pencils is 4x and pens is 5x\n    # When a pen is taken out and a pencil is placed, pencils become 4x + 1 and pens become 5x - 1\n    # The new ratio is 7:8, so (4x + 1) / (5x - 1) = 7/8\n    # Solve for x to find the total number of pencils and pens (4x + 5x)\n\n    for x in range(1, 1000): # 1000 is just an arbitrary limit for the range\n        if (4*x + 1)/(5*x - 1) == 7/8:\n            total = 4*x + 5*x\n            return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n\n    # Formula for sum of arithmetic series: n/2 * (2*a + (n-1)*d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    ans = custom_operation(result, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Planned profit was 60%\n    planned_profit = 0.6\n\n    # Actual overall profit was 80% of the planned profit\n    actual_overall_profit = 0.8 * planned_profit\n\n    # 70% of the books were sold at a 60% profit\n    first_day_profit = 0.7 * 0.6\n\n    # Remaining books percentage\n    remaining_books = 0.3\n\n    # We need to find the profit rate for the remaining books that will make the\n    # overall profit equal to actual_overall_profit\n\n    # Let x be the discount rate for the remaining books.\n    # Then the profit rate would be -x (negative because it's a discount).\n    # We can write the equation:\n    # (Profit from first day) + (Profit from second day) = actual_overall_profit\n    # first_day_profit + remaining_books * (-x) = actual_overall_profit\n\n    # Solve for x:\n    discount_rate_second_day = (first_day_profit - actual_overall_profit) / remaining_books\n\n    # Since it's a discount, we multiply by -1 to get a positive discount rate percentage\n    return discount_rate_second_day * -100\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls = 72\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls * 100) / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    remaining_strawberries = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Page numbers usually come in pairs (front and back), so we need to account for that.\n    # The last page number before the missing pages is 14, so the next page (front and back) would be 15/16.\n    # The first page number after the missing pages is 35, which means the last missing page (front and back) would be 33/34.\n    # We calculate the total number of missing page numbers (considering front and back).\n    # Since 15/16 is the first missing page number pair, we subtract 14 (last seen page number) from 35 (first page after missing)\n    # and divide by 2 to get the number of missing sheets.\n    \n    first_missing_page = 14 + 1  # Next page after the last seen\n    last_missing_page = 35 - 1   # Page before the first one after the missing\n    \n    # Each sheet has two page numbers\n    missing_sheets = (last_missing_page - first_missing_page + 1) // 2\n    \n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a tuna puff and a curry puff\n    tuna_puff, curry_puff = symbols('tuna_puff curry_puff')\n    \n    # Equation 1: The cost relationship between tuna puff and curry puff\n    eq1 = Eq(curry_puff, tuna_puff - 0.20)\n    \n    # Equation 2: The total cost of 12 tuna puffs and 19 curry puffs\n    eq2 = Eq(12 * tuna_puff + 19 * curry_puff, 39.60)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (tuna_puff, curry_puff))\n    \n    # Return the cost of each tuna puff\n    return solutions[tuna_puff]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    \n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                if (10 * tens + ones) % 2 != 0:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    for boys in range(39):\n        girls = 38 - boys\n        if (boys * 2 + girls * 4) == 126:\n            return boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = (end - start) + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_meters_per_minute = 36\n    time_minutes = 200 / 60\n\n    distance = speed_meters_per_minute * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, initial_goats = symbols('total_animals initial_goats')\n    initial_cows = 0.65 * total_animals\n    new_cows = initial_cows + 240\n    final_goats = 2 * initial_goats\n\n    # Initial number of goats is the rest of the animals\n    equation1 = Eq(initial_goats, total_animals - initial_cows)\n\n    # New total is the initial total plus 240 animals\n    total_animals_new = total_animals + 240\n\n    # After the animals were added, the percentage of cows increased to 65% + 20%\n    percentage_new = 0.65 + 0.20\n    equation2 = Eq(new_cows, percentage_new * total_animals_new)\n\n    # The final number of goats (double the initial) plus new number of cows equals the new total.\n    equation3 = Eq(final_goats + new_cows, total_animals_new)\n\n    # Solving the system of equations to find the initial number of goats\n    solutions = solve((equation1, equation2, equation3), (total_animals, initial_goats))\n\n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 20, 2):\n        product *= (1 + 2/i)\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85  # Total length of string needed in cm\n    roll_length_cm = 20 * 100    # Length of one roll in cm (1m = 100cm)\n    rolls_needed = string_needed_cm / roll_length_cm  # Number of rolls needed\n    return -(-rolls_needed // 1)  # Round up to the nearest whole number\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    spending_on_food = 5 * remainder / 6\n    savings = remainder - spending_on_food\n\n    equation = Eq(spending_on_food, donation + 78)\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = (2**2017) % 10\n    last_digit_3 = (3**2017) % 10\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    return last_digit\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let John's current age be j and Emma's current age be e\n    j, e = symbols('j e')\n    \n    # Given: In 3 years, the sum of their ages will be 27\n    future_sum_age = Eq((j + 3) + (e + 3), 27)\n    \n    # Given: John is 7 years older than Emma\n    age_difference = Eq(j, e + 7)\n    \n    # Solve the system of equations\n    solutions = solve((future_sum_age, age_difference), (j, e))\n    \n    return solutions[e]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    term_7 = 57\n    term_15 = 89\n    positions_difference = 15 - 7\n\n    common_difference = (term_15 - term_7) / positions_difference\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (4, 5),\n        (6, 7)\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    while ans < 400:\n        return ans\n        ans += 2*3*5*7\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    # Define the variables for the two different speeds\n    speed_first_part = 150  # in m/min\n    speed_second_part = 200  # in m/min (150m + 50m increase)\n    \n    # Define the time walked at the first speed\n    time_first_part = 10  # in minutes\n    \n    # Calculate the distance walked at the first speed\n    distance_first_part = speed_first_part * time_first_part\n    \n    # The remaining distance to be walked at the second speed\n    remaining_distance = 3700 - distance_first_part\n    \n    # Calculate the time walked at the second speed\n    time_second_part = remaining_distance / speed_second_part\n    \n    # The total time spent walking is the sum of both parts\n    total_time = time_first_part + time_second_part\n    \n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60\n    target_sweets_left = 150\n    weeks = (sweets_left - target_sweets_left) // abs(sweets_per_week)\n\n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices\n    apple, orange = symbols('apple orange')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(2 * apple + 1 * orange, 40)\n    equation2 = Eq(1 * apple + 2 * orange, 35)\n\n    # Solve the equations to find the price of one apple and one orange\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Calculate the cost of one apple and one orange for Carrie\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    choices_per_digit = 3\n    num_digits = 3\n\n    total_combinations = choices_per_digit ** num_digits\n\n    return total_combinations\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    ball_price = 1.5\n\n    money_spent_on_rackets = 2 * racket_price\n    remaining_money = total_money - money_spent_on_rackets\n\n    number_of_balls = remaining_money // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = sport_class_students + reading_class_students - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # A seven-digit number is divisible by 9 if the sum of its digits is divisible by 9.\n    # The given number is 47A1B9C, we need to find A, B, C such that the number is divisible by 9\n    # We know that digits 4, 7, 1, 9 are already used, so we have {0, 2, 3, 5, 6, 8} left\n    # sum of digits 4 + 7 + 1 + 9 = 21\n    # sum of all digits from 0 to 9 = 45\n    # We need to find A, B, C from {0, 2, 3, 5, 6, 8} such that their sum + 21 gives us a number divisible by 9\n    # The sum of the remaining digits: 45 (total sum) - 21 (sum of used digits) = 24\n    # To make the sum of all digits divisible by 9, we need the sum of A, B, C to be 45 - 24 = 21\n    # We now search for combinations without repetition of 3 elements from the set {0, 2, 3, 5, 6, 8} that sum to 21\n\n    ans_ABC = None\n    ans_number = None\n    numbers_set = {0, 2, 3, 5, 6, 8}\n\n    from itertools import permutations\n\n    for combo in permutations(numbers_set, 3):\n        if sum(combo) == 21:\n            A, B, C = combo\n            ans_ABC = A + B + C\n            ans_number = f\"47{A}1{B}9{C}\"\n            break\n    \n    return ans_ABC, ans_number\n\nans_ABC, ans_number = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # You could draw all 4 balls of the same color in the worst case,\n    # then another 4 balls of the same color.\n    # So it is after the next draw that you are guaranteed to have 3 balls of different colors.\n    # This is because there are only 3 colors, so the pigeonhole principle guarantees\n    # that the next ball must be of the remaining color.\n    return 4 + 4 + 1  # 4 of one color, 4 of another, and 1 of the last\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    chocolates_heinz = 87\n    chocolates_jed = 137\n    heinz_rate = 4\n    jed_rate = -6\n\n    # Find the week when they have the same number of chocolates\n    weeks = 0\n    while chocolates_heinz != chocolates_jed:\n        chocolates_heinz += heinz_rate\n        chocolates_jed += jed_rate\n        weeks += 1\n        \n    return weeks\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Total points on the circle\n    total_points = 12\n\n    # No. of ways to choose the vertex opposite the right angle\n    ways_to_choose_opposite_vertex = total_points\n\n    # Since the triangle is right-angled and all points are equally spaced,\n    # the two points that form the right angle must be adjacent.\n    # For each choice of a vertex opposite the right angle,\n    # there are two sets of adjacent vertices that can form a right angle.\n    ways_to_form_right_angle = 2\n\n    # Total number of right-angled triangles\n    total_right_angled_triangles = ways_to_choose_opposite_vertex * ways_to_form_right_angle\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbols for the unknowns\n    apple_box, orange_box = symbols('apple_box orange_box')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple_box + 5 * orange_box, 270)\n    equation2 = Eq(3 * apple_box + 7 * orange_box, 342)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple_box, orange_box))\n\n    return solutions\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    # Expand the equation\n    expanded = 5 * (6 * c - 1)\n\n    # Move the -35 to the other side of the equation\n    equation = expanded + 35\n\n    # We then solve for c\n    ans = equation.subs(c, equation.as_coefficients_dict()[c])\n    \n    return ans\n\n# Define the variable c\nfrom sympy import symbols\nc = symbols('c')\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger is the 11th animal in line and also in the exact middle.\n    # This means there are 10 animals ahead and 10 animals behind.\n    total_animals = (10 * 2) + 1  # +1 for the tiger itself\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let r be the mass of a badminton racket \n    # let s be the mass of a shuttlecock\n    r, s = symbols('r s')\n    \n    # Equation 1: r + 5s = 205\n    equation1 = Eq(r + 5 * s, 205)\n    \n    # Equation 2: 2r + 15s = 515\n    equation2 = Eq(2 * r + 15 * s, 515)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, s))\n    \n    return solutions[r]\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # hundreds place (1-9, must be non-zero)\n        for j in range(10):  # tens place (0-9)\n            for k in range(10):  # ones place (0-9)\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # The 24 roses are divided into 3 vases, so each vase has 24/3 = 8 roses.\n    roses_per_vase_first = 24 // 3\n    \n    # Let the number of roses her mother brings be x.\n    # Nancy divides them into another four vases, making the total number of vases 3 + 4 = 7.\n    # Each of the seven vases now has the same amount of roses (8 per vase).\n    total_vases = 7\n    total_roses_per_vase = roses_per_vase_first\n    \n    # The total roses now will be the number of vases times roses per vase.\n    total_roses = total_vases * total_roses_per_vase\n    \n    return total_roses\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    mamee_cost = 50 - 30\n    jelly_cost = 6 * mamee_cost\n    return jelly_cost / 100\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    return num2words(num)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    return int(number)\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    number1 = -18\n    number2 = -2\n    mid_number = (number1 + number2) / 2\n    return mid_number\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n\n    # Will hates to eat mint flavour, so we do not count the mint flavoured candy.\n    max_candies_will_can_eat = lemon_flavour + cherry_flavour\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if (A != B and B != C and C != D and A != C and A != D and B != D):\n                        AB = A * 10 + B\n                        BC = B * 10 + C\n                        CD = C * 10 + D\n                        ABC = A * 100 + B * 10 + C\n                        BCD = B * 100 + C * 10 + D\n                        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                            return A * 1000 + B * 100 + C * 10 + D\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if all(num % div == rem for div, rem in zip(range(2, 6), range(1, 5))):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In single elimination, number of games is one less than the number of players\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given height of the television screen\n    height = 21\n    # Given ratio of height to width\n    ratio_height = 3\n    ratio_width = 4\n\n    # Calculating width based on the given ratio\n    width = (height / ratio_height) * ratio_width\n\n    # Calculating perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return 20+19+18+17+16-15-14-13-12-11\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for the sons' and daughters' ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Given conditions in the problem\n    equations = [\n        Eq(older_son - younger_son, 3),  # two sons were born three years apart\n        Eq(older_daughter - younger_daughter, 2),  # two daughters were born two years apart\n        Eq(younger_son, 2 * older_daughter),  # younger son is twice the age of the older daughter\n        Eq(older_son + younger_son + older_daughter + younger_daughter, 55)  # sum of the children's ages is 55\n    ]\n\n    # Solve the system of equations\n    solutions = solve(equations, (older_son, younger_son, older_daughter, younger_daughter), dict=True)\n\n    # Get the age of the youngest child\n    youngest_child_age = min(solutions[0].values())  # Since solutions are returned as a list of dictionaries\n    \n    return youngest_child_age\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_part = '428571'  # Pattern of recurring decimal for 3/7\n    repeats = 58 // len(decimal_part)  # Number of full repeats of the pattern\n    remainder = 58 % len(decimal_part)  # Number of digits from the last incomplete repeat\n\n    sum_full_repeats = sum(int(digit) for digit in decimal_part) * repeats\n    sum_remainder = sum(int(decimal_part[i]) for i in range(remainder))\n\n    ans = sum_full_repeats + sum_remainder\n\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    same_biographies = 3\n    same_science_fictions = 4\n    same_magazines = 2\n    same_practice_books = 2\n\n    # Calculate the total permutations considering all the books are different\n    total_permutations = factorial(total_books)\n\n    # Divide by permutations of each type of book, since they are not distinguishable\n    permutations_biographies = factorial(same_biographies)\n    permutations_science_fictions = factorial(same_science_fictions)\n    permutations_magazines = factorial(same_magazines)\n    permutations_practice_books = factorial(same_practice_books)\n\n    # Calculate final answer considering indistinguishable items\n    ans = total_permutations // (permutations_biographies * permutations_science_fictions * permutations_magazines * permutations_practice_books)\n\n    return ans\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x is the amount exchanged from A to B (in grams)\n    x = symbols('x')\n    \n    # The amount of sugar in A after exchange is 0.11 * (50 - x) + 0.47 * x\n    # The amount of sugar in B after exchange is 0.47 * (50 - x) + 0.11 * x\n    # The concentrations are the same, so the amounts of sugar per total solution are equal:\n    equation = Eq(0.11 * (50 - x) + 0.47 * x, 0.47 * (50 - x) + 0.11 * x)\n    \n    # Solve for x\n    sol = solve(equation, x)\n    \n    # The amount that can be exchanged while keeping the concentration the same\n    return sol[0]\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percent = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percent\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string = toms_string + 25\n    difference = nicks_string - toms_string\n    return difference\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '3', '6']\n    all_perms = set(permutations(cards, 3))  # Get all unique permutations\n    return len(all_perms)\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_of_plot_m = 20  # length of the vegetable plot in meters\n    distance_apart_m = 0.4  # distance between cauliflower plants in meters\n    first_plant_distance_m = 0.2  # distance of the first cauliflower from the end in meters\n\n    usable_length_m = length_of_plot_m - first_plant_distance_m * 2  # subtract the distance from both ends\n    num_cauliflowers = int(usable_length_m / distance_apart_m) + 1  # +1 for the first cauliflower\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    primes_list = []\n\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            prime_count += 1\n            primes_list.append(num)\n    \n    return prime_count, primes_list\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the wallet and watch\n    wallet, watch = symbols('wallet watch')\n    \n    # Create equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n    \n    # Return the cost of a wallet\n    return solutions[wallet]\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            for x3 in range(x2 + 1, 15):\n                x4 = 15 - (x1 + x2 + x3)\n                if x4 > x3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30 / 100\n    base_value = 250\n    ans = percentage * base_value\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Convert cm to metres and add\n    subtract_metres = 2 + 7 / 100  # Convert cm to metres and subtract\n    result = total_metres - subtract_metres\n    return result\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 2 pears = 94p\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each type of rabbits\n    black, white, grey = symbols('black white grey')\n    \n    # Form the system of equations according to the problem\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    # Return the number of white rabbits\n    return solutions[white]\n\n# Call the solution function and store the answer in the variable 'ans'\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This sequence is a geometric progression where each term is 2^(n-1)\n    # where n is the position of the term in the sequence.\n    # The 20th number in the sequence would therefore be 2^(20-1) = 2^19\n    # The 17th number in the sequence would be 2^(17-1) = 2^16\n    # Dividing the 20th number by the 17th number gives us 2^19 / 2^16\n\n    # Dividing these two numbers uses the property of exponents that a^m / a^n = a^(m-n)\n    ans = 2**(19-16)\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # For two positive integers a and b where a + b = 35\n    # To maximize the product a * b, a and b should be as close as possible\n    # Therefore, we divide the sum by two to get the two closest numbers\n    # Since we need integers, one will be the floor and the other will be the ceiling \n    # of the half of the sum\n\n    half_sum = 35 // 2  # This will give us the floor of the half\n    a = half_sum\n    b = 35 - a\n\n    # The product of the two numbers\n    max_product = a * b\n\n    return max_product\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    average_initial = 60\n    people_initial = 3\n    total_books_initial = average_initial * people_initial\n\n    average_final = average_initial + 10\n    people_final = people_initial + 1\n    total_books_final = average_final * people_final\n\n    dennis_books = total_books_final - total_books_initial\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_height = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    day_counter = 0\n\n    current_height = 0\n    while current_height < total_height:\n        day_counter += 1\n        current_height += climb_per_day\n        if current_height >= total_height:\n            break\n        current_height -= slide_per_night\n\n    return day_counter\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n    \n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    squares = [i**2 for i in range(1, 10)]\n    two_digit_squares = [square for square in squares if 10 <= square < 100]\n    largest_two_digit_square = two_digit_squares[-1]\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    # As the flags are equally spaced, the distance between the 1st and the 4th flag\n    # is thrice the distance between each flag.\n    distance_between_flags = distance_1_to_4 / 3\n    \n    # The distance between the 1st and the 9th flag is eight times the distance\n    # between each flag, as there are eight intervals between nine flags.\n    distance_1_to_9 = distance_between_flags * 8\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    ans = ones + tenths / 10 + hundredths / 100\n\n    return ans\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_model_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_model_height = (johns_model_height / ratio_john) * ratio_mike\n\n    return mikes_model_height\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    ship_speed_in_still_water = 22\n    current_speed = 3\n    downstream_speed = ship_speed_in_still_water + current_speed\n    distance = 200\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    nums = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of peaches Eddie got (P),\n    # the number of students in Class A (A), and Class B (B)\n    P, A, B = symbols('P A B')\n    \n    # First situation, if all peaches are given to Class A:\n    # Each student in Class A can get 5 peaches and there will be 10 peaches left.\n    eq1 = Eq(P, 5*A + 10)\n    \n    # Second situation, if all peaches are given to Class B:\n    # Each student in Class B can get 8 peaches, but we will need 2 more peaches.\n    eq2 = Eq(P, 8*B - 2)\n    \n    # Class A has 3 more students than Class B.\n    eq3 = Eq(A, B + 3)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (P, A, B))\n    \n    # Return the number of peaches Eddie got\n    return solutions[P]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_pen = pen_cost / pencil_cost\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_points = 6\n    incorrect_points = -2\n    total_questions = 10\n\n    # Let's assume all questions are answered correctly first\n    # and calculate the excess points we have\n    excess_points = total_questions * correct_points - total_points\n\n    # Each incorrect answer reduces the total score by the sum of losing wrong points and not gaining correct points.\n    # Therefore, each incorrect answer changes the score by 6 (correct) + 2 (incorrect) = 8 points\n    # Now we will find out how many times we need to subtract 8 from the excess points\n    # to find out the number of incorrect answers\n    incorrect_answers = excess_points // (correct_points - incorrect_points)\n\n    # Since total_questions is the sum of correct and incorrect answers\n    # the correct_answers is total_questions minus incorrect_answers\n    correct_answers = total_questions - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # Monday to Saturday\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    h = 1\n    while True:\n        if (28512 / h) ** (1/3) % 1 == 0: \n            return h\n        h += 1\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Since the combination of colors that Bart wants should be different, the worst case is\n    # when he picks the chips of the color which has the maximum number of chips.\n    # To ensure he gets two different colors, he can pick all of one color plus one more.\n    \n    max_color_chips = max(3, 4, 5) # Maximum number of chips of same color\n    # To ensure getting 2 chips of different colors, Bart must take out all chips of one color plus one more.\n    chips_needed = max_color_chips + 1\n    \n    return chips_needed\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # This problem is known as the derangement problem or subfactorial\n    # We need to calculate the subfactorial of 7, denoted as !7 or D7\n    # There are known formulas to calculate the derangement, one of them is:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # where n! is the factorial of n\n    \n    # Calculate factorial of 7\n    fact_7 = 1\n    for i in range(1, 8):\n        fact_7 *= i\n    \n    # Calculate subfactorial of 7 using the series expansion\n    subfact_7 = fact_7\n    sign = -1\n    for i in range(1, 8):\n        subfact_7 += sign * fact_7 // (fact(i))\n        sign *= -1\n    \n    return subfact_7\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Total number of dancing performances\n    d = 7\n    # Total number of playing a sketch performances\n    p = 3\n    # We need to insert at least one dancing performance between every two playing a sketch.\n    # This means we treat every group of one playing a sketch performance and one dancing performance as a single unit.\n    # So we would have p - 1 groups and d - (p - 1) dancing performances left.\n    # The remaining d - (p - 1) dancing performances can be arranged in d - (p - 1) + 1 places.\n    \n    # Calculate the ways to arrange the p - 1 groups and the remaining dancing performances\n    groups = p - 1\n    remaining_dancing = d - groups\n    \n    # The remaining dancing performances can be placed in remaining_dancing + 1 places\n    places = remaining_dancing + 1\n    \n    # The number of ways to arrange the remaining dancing performances within the places\n    dancing_ways = factorial(places)\n    \n    # The number of ways to arrange the p - 1 groups with the remaining dancing performances\n    group_ways = factorial(groups + 1)\n    \n    return dancing_ways * group_ways\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    # Each father shakes hands with fathers, mothers, and children from other families\n    handshakes_father = 9 * (3 * (total_families - 1))\n    # Each mother shakes hands with fathers and children from other families\n    handshakes_mother = 9 * (2 * (total_families - 1))\n    # Each child shakes hands with fathers and mothers from other families\n    handshakes_child = 9 * (2 * (total_families - 1))\n\n    # Total handshakes are the sum of all handshakes\n    total_handshakes = handshakes_father + handshakes_mother + handshakes_child\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n    ans = (a**2) - (a*b)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = (mark_position + children_between + helen_position_from_end)\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # Each of the three digits can be one of these 5 odd digits\n    # Using the multiplication principle:\n    count = 5 * 5 * 5  # 5 possibilities for each of the 3 digits\n\n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = '85274'\n    position = (79 - 1) % len(recurring_sequence)  # Find the position in the recurring sequence\n    ans = int(recurring_sequence[position])\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for num in range(999, 99, -1):\n        if (num + 2009) % (17 * 19) == 0:\n            return num\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))  # Sum of the sequence from 1 to 62 (inclusive)\n    actual_sum = 1939  # The sum provided by Tim\n    missing_number = expected_sum - actual_sum  # The page number missing from Tim's sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 999):\n        if i + (i + 1) == 777:\n            next_ticket_number = i + 2\n            break\n    return next_ticket_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill_amount = 82\n    free_hours = 40\n    total_hours = free_hours\n\n    # Calculate hours in the first segment (40-50 hours)\n    if bill_amount > 0:\n        first_segment_cost = 5\n        first_segment_hours = min((bill_amount / first_segment_cost), 10)\n        total_hours += first_segment_hours\n        bill_amount -= first_segment_hours * first_segment_cost\n\n    # Calculate hours in the second segment (50-60 hours)\n    if bill_amount > 0:\n        second_segment_cost = 8\n        second_segment_hours = min((bill_amount / second_segment_cost), 10)\n        total_hours += second_segment_hours\n        bill_amount -= second_segment_hours * second_segment_cost\n\n    # Calculate hours in the third segment (above 60 hours)\n    if bill_amount > 0:\n        third_segment_cost = 15\n        third_segment_hours = bill_amount / third_segment_cost\n        total_hours += third_segment_hours\n        bill_amount -= third_segment_hours * third_segment_cost\n\n    return total_hours\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps_remaining, step_to_avoid):\n        if steps_remaining < 0 or (steps_remaining == step_to_avoid):\n            return 0\n        elif steps_remaining == 0:\n            return 1\n        return (count_ways(steps_remaining - 1, step_to_avoid) +\n                count_ways(steps_remaining - 2, step_to_avoid) +\n                count_ways(steps_remaining - 3, step_to_avoid))\n\n    muddy_step = 5\n    total_steps = 10\n    ans = count_ways(total_steps, muddy_step)\n    return ans\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # The worst case scenario is when Jane keeps drawing the same color until she gets all of that color\n    # plus one of each of the remaining colors to ensure she has 4 different ones.\n    \n    # So she must draw all red marbles, all but one green type, all but one blue type,\n    # and then one orange type to be certain to get 4 different colors.\n    \n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # Minus one for each of the most abundant colors\n    # because she could pick all of the others without getting a complete set of different colors\n    # and then adds 1 to get the first of the fourth color, which will ensure that she now has all 4 colors\n    marbles_needed = (red + green - 1 + blue - 1 + 1)\n\n    return marbles_needed\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_week = 7\n\n    total_weekly_earnings = average_daily_earnings * days_in_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # The smallest four odd numbers are: 1, 3, 5, and 7.\n    # Their sum is 16. To maximize the fifth number, we subtract this sum from the total.\n    total_sum = 85\n    sum_of_smallest_four = 1 + 3 + 5 + 7\n    largest_number = total_sum - sum_of_smallest_four\n\n    return largest_number\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # First $30,000 at T%, remaining at (T + 3)%\n    tax_equation = Eq(income * (T + 1) / 100, 30000 * T / 100 + (income - 30000) * (T + 3) / 100)\n\n    # Solve for income with respect to T\n    solutions = solve((tax_equation), (income))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n    downstream_speed = speed_in_still_water + speed_of_current\n    distance = 500\n    time_taken = distance / downstream_speed\n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    twenty_cents, fifty_cents = symbols('twenty_cents fifty_cents')\n\n    # Equation representing the total number of coins\n    equation1 = Eq(twenty_cents + fifty_cents, 21)\n\n    # Equation representing the total value of coins\n    equation2 = Eq(20 * twenty_cents + 50 * fifty_cents, 630)  # 6.30 dollars = 630 cents\n\n    solutions = solve((equation1, equation2), (twenty_cents, fifty_cents))\n\n    return solutions[fifty_cents]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    coins_left = total_coins % children\n    return coins_left\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    \n    def is_perfect_square(num):\n        root = math.isqrt(num)\n        return num == root * root\n    \n    count = 0\n    num = 2\n    while len(str(num)) <= 5:\n        if is_perfect_square(num):\n            count += 1\n        num = num * 10 + 5  # Get the next number in the sequence\n    return count\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Alan as 'a' and the speed of Phillip as 'p'.\n    a, p = symbols('a p')\n\n    # The time it takes for Alan to arrive at B is 12 + 3 minutes.\n    alan_time = 15\n    phillip_time = 12\n\n    # Phillip walks 15 meters more than Alan does per minute.\n    equation1 = Eq(p, a + 15)\n\n    # The distance covered by each person is the product of their speed and time.\n    # Since both cover the same distance between A and B, we set their distances equal to each other.\n    equation2 = Eq(a * alan_time, p * phillip_time)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, p))\n\n    # Find the distance between A and B by using the speed of either Alan or Phillip and their corresponding time.\n    distance = solutions[p] * phillip_time\n\n    return distance\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    spent_by_alice = 36\n    difference_after_spending = 25.40\n    tom_money = 68.10\n\n    alice_money_after = tom_money - difference_after_spending\n    alice_money_before = alice_money_after + spent_by_alice\n\n    return alice_money_before\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_five_numbers = 28\n    mean_twelve_numbers = 11\n\n    total_five_numbers = mean_five_numbers * 5\n    total_twelve_numbers = mean_twelve_numbers * 12\n\n    total_numbers = total_five_numbers + total_twelve_numbers\n    count_numbers = 5 + 12\n\n    mean_all_numbers = total_numbers / count_numbers\n\n    return mean_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    # Number of intervals between benches is one less than the number of benches\n    num_intervals = 9 - 1\n\n    # Total length of all intervals in meters\n    total_interval_length = num_intervals * 7\n\n    # The remaining length is occupied by the 9 benches\n    # Total road length minus the total interval length gives us the total length occupied by the benches\n    total_bench_length = 74 - total_interval_length\n\n    # The length of one bench\n    bench_length = total_bench_length / 9\n\n    return bench_length\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda num: abs(num - 1))\n\n    return closest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # If we take all 6 gold coins, to ensure we have 2 different colored coins,\n    # we then need to take at least 1 silver coin.\n    return 6 + 1\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies Miss Jenny has.\n    # Let a be the number of students in class A.\n    # Let b be the number of students in class B.\n    x, a, b = symbols('x a b')\n\n    # According to the problem:\n    # If each student in class A gets 4 candies, 20 more candies are needed:\n    equation1 = Eq(a * 4, x - 20)\n\n    # If each student in class B can get 6 candies, there will be 16 candies left:\n    equation2 = Eq(b * 6, x + 16)\n\n    # It is known that the number of students in class A is twice of class B:\n    equation3 = Eq(a, 2 * b)\n\n    # Solve the system of equations for x, a, and b.\n    solutions = solve((equation1, equation2, equation3), (x, a, b))\n\n    # Return the total number of candies Miss Jenny has.\n    return solutions[x]\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_per_interval = 20 / (5 - 1)  # distance from 1st to 5th tree is among 4 intervals\n    total_distance = distance_per_interval * (14 - 8)  # distance from 8th to 14th tree is among 6 intervals\n    return total_distance\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_meters_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n    \n    distance_meters = speed_meters_per_minute * time_minutes\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return (38 * 32) + (37 * 33) + (36 * 34)\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    arms_cut = 21\n    arms_regrow = 5\n    original_arms = arms_cut - (arms_cut // (arms_regrow + 1))\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    remaining_sum = 2021 - 246  # sum without the 3rd greatest number\n    \n    # The 2 numbers greater than the 3rd need to be at least one more than 246\n    remaining_sum -= (246 + 1) * 2  # subtract the sum of the 1st and 2nd greatest numbers\n    \n    # The remaining 6 numbers need to be at least 1, 2, 3, 4, 5, and 6\n    # Subtract the minimum sum of the remaining numbers\n    remaining_sum -= sum(range(1, 7))\n    \n    # The fourth greatest number is the rest plus 6 (it has to be at least 1 greater than the smallest number in the remaining six which is 6)\n    min_fourth_number = remaining_sum + 6\n    \n    return min_fourth_number\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    ans = 0\n    for i in range(1, 25):\n        is_selected = True\n        for j in range(1, i):\n            if (i % j == 0 or j % i == 0) and j in selected_numbers:\n                is_selected = False\n                break\n        if is_selected:\n            selected_numbers.append(i)\n            ans += 1\n    return ans\n\nselected_numbers = []\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Grey's age as g and his father's age as f\n    g, f = symbols('g f')\n    \n    # When Grey was born, his father was 30 years old, so f = g + 30\n    equation1 = Eq(f, g + 30)\n    \n    # Currently, Grey's father is three times older than Grey, so f = 3 * g\n    equation2 = Eq(f, 3 * g)\n    \n    # Solve the two equations to find Grey's age and his father's age\n    solutions = solve((equation1, equation2), (g, f))\n    \n    # We are interested in Grey's father's age which is represented by 'f'\n    return solutions[f]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Suppose Bud has '1' part, then Pip has '5' parts\n    parts = {'Bud': 1, 'Pip': 5}\n    \n    # Names and values for plotting\n    names = list(parts.keys())\n    values = list(parts.values())\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(names, values, color=['blue', 'red'])\n    \n    plt.xlabel('Persons')\n    plt.ylabel('Number of Parts')\n    plt.title('Parts Graph')\n\n    # Annotation for parts\n    for i, v in enumerate(values):\n        ax.text(i, v + 0.1, str(v), color='black', ha='center')\n\n    # Save the plot as an image file\n    plt.savefig('parts_graph.png')\n    plt.close(fig)\n\n    # Return the file path of the saved image\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator_sum = 2998 + 2999 + 3000\n    denominator_sum = 2997 + 2998 + 2999 + 3000 + 3001\n    return 10 * (numerator_sum / denominator_sum)\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    # Apply the Pigeonhole Principle method\n    # Books are pigeons, layers are pigeonholes\n    total_books = 35\n    total_layers = 4\n\n    # This will always round down to the nearest integer\n    least_books_on_most_layer = -(-total_books // total_layers)\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Using the formula for the number of terms in an arithmetic sequence: n = (l - a)/d + 1\n    num_rows = (last_term - first_term) // difference + 1\n\n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (a + l)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # In a division equation: dividend = divisor * quotient + remainder\n    # To find the minimum dividend, we need the smallest divisor that still gives remainder 3 when divided by it.\n    # Since the remainder is 3, the smallest divisor that will work is one more than the remainder.\n    divisor = remainder + 1\n\n    # Now calculate the minimum dividend\n    min_dividend = divisor * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # There are 2 choices for the hundredth place (1 or 2)\n    # There are 3 choices for the tenth place since we can now use 0, and the hundredth place is already chosen\n    # There are 2 choices for the one's place since two numbers have been used already\n    count = 2 * 3 * 2\n\n    return count\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    result = solve_congruence(*congruences)\n    number = result[0]\n    while number < 100:\n        number += result[1]\n    return number\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    hazel_current = symbols('hazel_current')\n    jessica_current = hazel_current - 3\n    hazel_future = hazel_current + 4\n    jessica_future = jessica_current + 1\n\n    total_age_next_year = hazel_future + jessica_future\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    section1 = 30  # in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10  # convert mm to cm\n    \n    total_width = section1 + section2 + section3\n    \n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    uncle_age = uncle_future_age - (melanie_age - melanie_age)\n    \n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of animals in the farm\n    # Let y be the initial number of cows in the farm\n    x, y = symbols('x y')\n\n    # Initial state: 65% of the animals were cows\n    equation1 = Eq(y, 0.65 * x)\n\n    # 240 more animals were added to the farm\n    new_total = x + 240\n\n    # The number of goats doubled\n    new_goats = 2 * (x - y)\n\n    # The percentage of cows increased by 20%\n    # So, new percentage of cows is 65% + 20% = 85%\n    # Thus, the new number of cows is 85% of the new total number of animals\n    new_cows = 0.85 * new_total\n\n    # Since the new number of cows and goats sum up to the new total, we can set up an equation\n    equation2 = Eq(new_cows + new_goats, new_total)\n\n    # Solving the two equations simultaneously\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The initial number of goats is the total number of animals minus the number of cows\n    initial_goats = solutions[x] - solutions[y]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if (i % 4 == 0) == (i % 6 == 0):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all its variables.\n    # The degree of -x^3y^(2n) is the sum of the exponents of x and y which is 3 + 2n.\n    # According to the question, the degree of the monomial is 5.\n    # Therefore, 3 + 2n = 5 => 2n = 5 - 3 => 2n = 2\n    n = 2 / 2  # solving for n\n    return int(n)\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number_1 = 2 + Fraction(3, 8)\n    mixed_number_2 = 6 + Fraction(9, 12)\n    mixed_number_3 = 1 + Fraction(14, 16)\n    \n    total_sum = mixed_number_1 + mixed_number_2 + mixed_number_3\n    ans = total_sum.numerator // total_sum.denominator + \\\n          Fraction(total_sum.numerator % total_sum.denominator, total_sum.denominator)\n    \n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sisters_age_in_3_years = amy_age_5_years_ago\n    sisters_age_now = sisters_age_in_3_years - 3\n\n    return sisters_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # The maximum number of cards we can draw without getting the same number or letter is 13\n    # (since there are 13 different numbers/letters in each suit).\n    # But once we draw the 14th card, we must have at least two of the same number or letter\n    # because there are only 13 possible numbers/letters.\n\n    max_unique_cards = 13\n    # To ensure two cards of the same number or letter, we add 1 to the max unique cards.\n    return max_unique_cards + 1\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for num in range(100, 1000, 2):  # The number is even, so skip odd numbers.\n        if sum(map(int, str(num))) == 21:  # Check if the sum of digits is 21.\n            return num  # Return the first (smallest) such number found.\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    whole = (part * 5) / 3\n    return whole\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5)//3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    equation1 = Eq(cacti, sunflowers + 6)\n    equation2 = Eq(2*cacti + 7*sunflowers, 156)\n    \n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n    \n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the cost of a book in pence\n    book_cost = symbols('book_cost')\n    \n    # Sarah's total cost in pence\n    sarah_total_cost = 8 * book_cost + 3 * 40\n    \n    # Rebecca's total cost in pence\n    rebecca_total_cost = 3 * book_cost + 8 * 40\n    \n    # Sarah paid 1 pound more than Rebecca, which is 100 pence\n    equation = Eq(sarah_total_cost, rebecca_total_cost + 100)\n    \n    # Solve for the cost of a book\n    solution = solve(equation, book_cost)\n    \n    # Return the cost of a book in pounds\n    return solution[0] / 100\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_square_sum = sum([x**2 for x in range(2, 21, 2)])\n    odd_square_sum = sum([x**2 for x in range(1, 20, 2)])\n    return even_square_sum - odd_square_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    num_jugs = 6\n    water_poured = jug_capacity * num_jugs\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_initial, manutd_initial = symbols('liverpool_initial manutd_initial')\n\n    equation1 = Eq(liverpool_initial - manutd_initial, 1000)\n    equation2 = Eq(manutd_initial + 4836, 3 * (liverpool_initial + 472))\n\n    solutions = solve((equation1, equation2), (liverpool_initial, manutd_initial))\n\n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the cost of one book in pence\n    b = symbols('b')\n\n    # Sarah's total cost is 8 books + 3 pencils.\n    # Sarah = 8b + 3(40)\n    sarah_total = 8 * b + 3 * 40\n\n    # Rebecca's total cost is 3 books + 8 pencils.\n    # Rebecca = 3b + 8(40)\n    rebecca_total = 3 * b + 8 * 40\n\n    # Sarah paid £1 more than Rebecca.\n    # In pence, that's 100 pence more.\n    # So, Sarah - Rebecca = 100\n    equation = Eq(sarah_total - rebecca_total, 100)\n\n    # Solve the equation for b (cost of one book)\n    book_price = solve(equation, b)\n\n    return book_price[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    num_ways = comb(total_players, players_needed)\n    return num_ways\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    # Let the number of students in Class B be x.\n    # Then the number of students in Class A is x + 3.\n    # Total peaches = 5 * (x + 3) + 10 \n    # Total peaches = 8 * x - 2\n    # We equate the two expressions to find the value of x.\n    \n    x = symbols('x')\n    eq = Eq(5 * (x + 3) + 10, 8 * x - 2)\n    number_of_students_B = solve(eq, x)[0]\n    \n    # Now calculate the total number of peaches using the number of students in Class B.\n    total_peaches = 8 * number_of_students_B - 2\n    return total_peaches\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # Andy gave $2 to Mike and had $3 left\n    original_after_nini = remaining_after_mike * 2  # She gave half of the remaining to Nini\n    original_after_bob = original_after_nini * 2  # She gave half of the remaining to Bob\n    original_amount = original_after_bob * 2  # She gave half of the money to her mother\n\n    return original_amount\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of T-shirts be 8x and caps be 5x\n    x = symbols('x')\n\n    # Money collected from selling T-shirts and caps\n    tshirt_revenue = (8 * x / 4) * 3\n    cap_revenue = (5 * x / 5) * 5\n\n    # Total revenue is $132\n    total_revenue = Eq(tshirt_revenue + cap_revenue, 132)\n\n    # Solve for x\n    solutions = solve(total_revenue, x)\n\n    # The number of T-shirts Siti had at first is 8 * x\n    tshirts_initial = 8 * solutions[0]\n\n    return tshirts_initial\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # On 31/12/98, it's the day before the 11th birthday, so the current age is 10.\n    current_age = 10\n    # From the end of 1998 to the end of 2001 is 3 years.\n    years_passed = 3\n    # Age on 31/12/01 would be current age plus the years passed.\n    age_on_31_12_01 = current_age + years_passed\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    current_position = 0\n\n    # While we haven't reached the 2023th digit,\n    # keep increasing the current_number and track the position.\n    while current_position < 2023:\n        current_number_str = str(current_number)\n        current_position += len(current_number_str)\n        # If the 2023th digit is within the current number,\n        # we break out of the loop to process where it lands.\n        if current_position >= 2023:\n            break\n        current_number += 1\n\n    # The index within the current number's string representation.\n    index_within_current_number = 2023 - (current_position - len(current_number_str))\n    \n    # Convert the number into a string and get the specific digit.\n    ans = int(current_number_str[index_within_current_number - 1])\n    \n    return ans\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    nums = permutations('4625')\n    smallest_odd = float('inf')\n    for num_tuple in nums:\n        num = int(''.join(num_tuple))\n        if num % 2 != 0 and num < smallest_odd:\n            smallest_odd = num\n    return smallest_odd\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return round(9.95 - 2.6 - 3.42, 2)\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    max_per_boat = 6\n    \n    trips = total_students // max_per_boat\n    if total_students % max_per_boat != 0:\n        trips += 1\n    \n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    target_term = 36\n\n    # Using formula of arithmetic sequence: nth_term = a + (n - 1) * d\n    # Rearranging to find n: n = (nth_term - a) / d + 1\n    nth_position = (target_term - first_term) / common_difference + 1\n\n    return int(nth_position)\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let x be the number of game cards Eric has.\n    # Then Joe has 7x game cards.\n    # Joe gives y cards to Eric, thus Joe will have (7x - y) cards\n    # and Eric will have (x + y) cards.\n    # After giving y cards, both will have 168 cards.\n\n    # Setting up the equations:\n    # 7x - y = 168 => y = 7x - 168\n    # x + y = 168\n    \n    # Substitute y in the second equation\n    # x + (7x - 168) = 168\n    # 8x - 168 = 168\n    # 8x = 168 + 168\n    # 8x = 336\n    # x = 336 / 8\n    # x = 42 (This is the number of game cards Eric has)\n\n    # Number of game cards Joe has:\n    # 7 * 42 = 294\n    # Number of game cards Joe needs to give Eric:\n    # 294 - 168 = 126\n    \n    return 126\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    # Single-digit prime numbers are 2, 3, 5, 7\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            # Construct the number\n            N = tens_digit * 10 + ones_digit\n            # Check if it's a two-digit prime\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    kids_run_away = 5\n    library_catch = 9\n\n    final_catch = (initial_catch - kids_run_away) + library_catch\n\n    return final_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # time taken to paint one picture in minutes\n    total_time_available = 80  # total time available in minutes (1 hour and 20 minutes)\n\n    number_of_pictures = total_time_available // time_for_one_picture  # Number of pictures that can be painted\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # The difference in positions between person 6 and person 19\n    position_diff = 19 - 6\n    \n    # Since they are directly opposite, the difference must be half the number\n    # of people in the game\n    num_people = position_diff * 2\n    \n    return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # There are limited ways to split 10 into two groups with different numbers.\n    # One group must have 1 to 5 apples (since the other group will then have 9 to 5, respectively).\n    # We cannot give one group 5 apples because the other would also have 5, which violates the condition.\n    count = 0\n    for x in range(1, 6): # We split the apples into two groups where the first group gets 'x' apples.\n        if x != 10 - x: # Ensure that the two groups do not have the same number of apples.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    num_students = 5\n    # The number of ways to arrange n students is given by n factorial (n!).\n    ans = factorial(num_students)\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    # Total number of pears\n    total_pears = 38\n    \n    # Determine range for Anne's pears to ensure she has more than Charlie\n    for anne_pears in range(total_pears//2+1, total_pears):\n        # Calculate Charlie's pears\n        charlie_pears = total_pears - anne_pears\n        \n        # Check if Anne giving Charlie 6 pears makes them equal\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    \n    more_swims = amy_swims - joanne_swims\n    \n    return more_swims\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n\n    count_zeros = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count_zeros += 1\n\n    return count_zeros\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for each digit\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Define the equation as given in the problem statement\n    equation = Eq(a*1000 + b*100 + c*10 + d + a*100 + b*10 + c + a*10 + b + a, 1370)\n\n    # Solve the equation\n    solutions = solve(equation)\n\n    # Retrieve the solution for abcd\n    abcd = int(solutions[a]*1000 + solutions[b]*100 + solutions[c]*10 + solutions[d])\n\n    return abcd\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Equation before Joseph received stamps:\n    # isaac = 5 * joseph\n\n    # Equation after Joseph received stamps:\n    # joseph + 154 = 9/10 * isaac\n\n    equations = (Eq(isaac, 5 * joseph), Eq(joseph + 154, 9/10 * isaac))\n    ans = solve(equations, (isaac, joseph))\n\n    return ans[isaac]\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # convert base 8 number to base 10\n    N_base8 = '12345654321'\n    N_base10 = int(N_base8, 8)\n\n    # find the remainders\n    remainder_by_7 = N_base10 % 7\n    remainder_by_9 = N_base10 % 9\n\n    # sum of the remainders\n    sum_of_remainders = remainder_by_7 + remainder_by_9\n\n    return sum_of_remainders\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2 + 0 + 1 + 8 + A) % 9 == 0:\n            num = int(f\"2018{A}\")\n            return num % 8\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Ryan has 5 in front of him\n    ryan_front = 5\n    # Elvis has 7 behind him\n    elvis_behind = 7\n    # There is 1 between Ryan and Elvis\n    between_ryan_elvis = 1\n    # Ryan is in front of Elvis, so he is not counted in Elvis' 7 behind\n    total_squirrels = ryan_front + between_ryan_elvis + elvis_behind + 2  # +2 for Ryan and Elvis themselves\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a classic example of a derangement problem, also known as the \"hat-check problem\".\n    # The number of derangements (permutations where no element appears in its original position)\n    # of n elements is denoted by !n, the subfactorial of n.\n    \n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done = workers * days\n    days_for_one_worker = work_done / 1\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal_amount = 3600\n    interest_rate = 0.02\n    interest = principal_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 0.25 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters\n    # According to the problem, when Linda and Ted meet, Linda has run 1200m\n    # Hence, Ted has run x - 1200 meters\n    # Given the speed ratio of Linda to Ted is 3:4, we can write the following:\n    # Linda's distance / Ted's distance = Linda's speed / Ted's speed\n    # 1200 / (x - 1200) = 3 / 4\n    \n    # Cross multiply to solve for x\n    x = 1200 * 4 / 3 + 1200\n    \n    return x\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of students in school P be x and in school Q be y\n    x, y = symbols('x y')\n\n    # Original ratio equation: x/y = 2/3\n    equation1 = Eq(x/y, 2/3)\n\n    # After admitting 240 students to each school, the ratio becomes 3/4\n    equation2 = Eq((x + 240)/(y + 240), 3/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We need the number of pupils in School P originally, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30 / 100\n    amount = 45\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    # Initialize the sum to zero\n    sum_of_odds = 0\n\n    # Loop through the range of numbers from 0 to 20\n    for number in range(1, 20, 2):  # This will iterate through all odd numbers\n        sum_of_odds += number  # Add each odd number to the sum\n\n    return sum_of_odds\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Jack's current age\n    jack_age = symbols('jack_age')\n\n    # Create an equation based on the problem statement\n    equation = Eq(jack_age - 5, (jack_age + 8) / 2)\n\n    # Solve the equation for Jack's age\n    solution = solve(equation, jack_age)\n\n    # Return Jack's current age\n    return solution[0]\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    \n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n    \n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n    \n    return solutions[ron]\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candy = 5 * 12\n    new_total_students = 6\n    new_candy_per_student = total_candy // new_total_students\n    return new_candy_per_student\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    consonants = \"\".join(filter(lambda x: x not in vowels, word))\n    \n    total_permutations = factorial(len(word))\n    vowel_permutations = factorial(len(vowels)) * factorial(len(word) - len(vowels) + 1)\n\n    excluded_permutations = vowel_permutations\n    for p in permutations(vowels):\n        if ''.join(p) in word:\n            excluded_permutations -= factorial(len(word) - len(vowels))\n    \n    count = total_permutations - excluded_permutations\n    return count\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP are angle bisectors, by angle bisector theorem:\n    # m∠BAC = 50 degrees (given)\n    # m∠ABC and m∠ACB can be represented as 2x and 2y respectively, where x+y = 180-50\n    # m∠ABP = x (half of m∠ABC) and m∠ACP = y (half of m∠ACB)\n    \n    # Since m∠BPC is an exterior angle for ΔABP and ΔACP:\n    # m∠BPC = m∠ABP + m∠ACP\n    # m∠BPC = x + y\n\n    # m∠BPC = 180 - 50 (because in a triangle, the sum of interior angles is 180 degrees)\n    m_angle_BPC = 180 - 50\n    \n    # Return the measure in degrees\n    return m_angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Sharon initially buys 11 sweets\n    sweets = 11\n    # She now has 11 wrappers\n    wrappers = 11\n\n    # As long as Sharon has 3 or more wrappers, she can exchange them for more sweets\n    while wrappers >= 3:\n        # The number of new sweets is the number of wrappers divided by 3\n        new_sweets = wrappers // 3\n        # Increase the total sweets by the number of new sweets obtained\n        sweets += new_sweets\n        # Update the number of wrappers: New wrappers + leftover wrappers from the previous exchange\n        wrappers = new_sweets + wrappers % 3\n\n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each bird type\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Write equations based on the given information\n    eq1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    eq2 = Eq(three_tailed, 2 + six_tailed / 2)\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 16 * eight_tailed, 4 * (five_tailed + three_tailed + six_tailed + two * eight_tailed) - 2)\n    eq4 = Eq(five_tailed + three_tailed + six_tailed + two * eight_tailed - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 16 * eight_tailed), 241)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percentage_spent_on_bag = 70\n    remainder_after_bag = 100 - percentage_spent_on_bag\n    percentage_spent_on_purse = (3/8) * remainder_after_bag\n    \n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Convert kg to g since sweets are sold in bags of 250g\n    total_weight = 5000  # 5kg in grams\n    bag_weight = 250  # weight of sweets in each bag\n\n    # Calculate the number of bags Renee can make from 5kg of sweets\n    num_bags = total_weight / bag_weight\n\n    # Calculate the total sales\n    price_per_bag = 0.65  # 65p converted to pounds\n    total_sales = num_bags * price_per_bag\n\n    # Initial cost of sweets\n    cost_price = 10\n\n    # Calculate profit\n    profit = total_sales - cost_price\n\n    # Calculate percentage profit\n    percentage_profit = (profit / cost_price) * 100\n\n    return round(percentage_profit, 2)\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # There are two ways to travel from Ayton to Deeton:\n    # Directly from Ayton to Deeton, or via Beeton and Ceeton.\n    # Let's calculate the number of ways for both scenarios.\n\n    # Directly from Ayton to Deeton\n    direct_ways = 3\n\n    # Via Beeton and Ceeton\n    # Ayton to Beeton (4 ways), Beeton to Ceeton (5 ways), Ceeton to Deeton (6 ways)\n    indirect_ways = 4 * 5 * 6\n\n    # Total different ways from Ayton to Deeton is the sum of both scenarios\n    total_different_ways = direct_ways + indirect_ways\n\n    return total_different_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    return (20 * 3) / 15\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    term_difference = fifteenth_term - tenth_term\n\n    common_difference = term_difference / position_difference\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n\n    # A number is underlined exactly twice if it is a multiple of the LCM of any two\n    # of the numbers 2, 3, 4 and not a multiple of all three.\n    # The LCMs are: LCM(2, 3) = 6, LCM(2, 4) = 4, LCM(3, 4) = 12.\n    # Note: We don't need to consider LCM(2, 4) since it's a multiple of 4 and every multiple of 4 is a multiple of 2.\n    # A multiple of all three would be a multiple of LCM(2, 3, 4) = 12.\n    \n    # Count multiples of 6 (2 and 3 but not 4)\n    count += 2016 // 6 - 2016 // 12\n    \n    # Count multiples of 4 (2 and 4 but not 3)\n    count += 2016 // 4 - 2016 // 12\n    \n    # Subtract those that are multiples of 12 (since they are counted in both cases)\n    count -= 2016 // 12\n    \n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount Joe had at first as 'joe_initial'.\n    joe_initial = symbols('joe_initial')\n\n    # Sally's initial amount is given to be $3.75.\n    sally_initial = 3.75\n    \n    # Sally and Joe both spend $2.50 on an ice cream cone.\n    sally_spent = joe_spent = 2.50\n    \n    # After spending, the total amount they have left is $5.\n    total_left = 5\n    \n    # Create an equation representing the situation:\n    # (Sally's initial amount - amount spent on ice cream) + (Joe's initial amount - amount spent on ice cream) = total amount left\n    equation = Eq((sally_initial - sally_spent) + (joe_initial - joe_spent), total_left)\n\n    # Solve the equation to find the initial amount Joe had.\n    solutions = solve(equation, joe_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_average = 135\n    last_5_days_average = 151\n\n    total_trees_first_3_days = first_3_days_average * 3\n    total_trees_last_5_days = last_5_days_average * 5\n\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    total_days = 8\n\n    average_trees_per_day = total_trees / total_days\n\n    return average_trees_per_day\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n    solved = solve(equation, magic_number)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit even numbers\n    for num in range(100, 1000, 2):  # Increment by 2 to ensure the number is even\n        # Split the number into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Checking if the sum of the digits adds up to 7\n        if sum(digits) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for the magic number\n    first_number = 202 + x\n    second_number = 22 + x\n\n    # Equation where first number is 6 times the second number\n    equation = Eq(first_number, 6 * second_number)\n\n    # Solve the equation\n    magic_number = solve(equation, x)\n\n    return magic_number[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    students_diff = 32\n    total_students = 0\n    layer = 0\n\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = layer * 2 * (layer * 2 + 2)\n        diff = boys - girls\n        if diff == students_diff:\n            total_students = boys + girls\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    veggies = 12\n    sandwiches = 6\n    \n    # Choosing 2 out of 4 options: salads & soups, salads & veggies, salads & sandwiches,\n    # soups & veggies, soups & sandwiches, and veggies & sandwiches\n    # Each choice is calculated by multiplying the number of items in both categories\n    comb_salads_soups = comb(salads, 1) * comb(soups, 1)\n    comb_salads_veggies = comb(salads, 1) * comb(veggies, 1)\n    comb_salads_sandwiches = comb(salads, 1) * comb(sandwiches, 1)\n    comb_soups_veggies = comb(soups, 1) * comb(veggies, 1)\n    comb_soups_sandwiches = comb(soups, 1) * comb(sandwiches, 1)\n    comb_veggies_sandwiches = comb(veggies, 1) * comb(sandwiches, 1)\n    \n    # Summing up all the possible combinations\n    ans = (comb_salads_soups + comb_salads_veggies + comb_salads_sandwiches +\n           comb_soups_veggies + comb_soups_sandwiches + comb_veggies_sandwiches)\n    \n    return ans\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n    \n    n = 1\n    \n    while True:\n        # Check if all the numbers in sequence are prime\n        if all(isprime(n + i) for i in (0, 2, 4, 106, 308)):\n            return n\n        n += 2\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    strawberries, mangoes = symbols('strawberries mangoes')\n    \n    # equation1: mangoes = strawberries + 448 \n    equation1 = Eq(mangoes, strawberries + 448)\n    \n    # equation2: strawberries = 2 * (mangoes - 900)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n    \n    total_items_solution = solve(equation, total_items)[0]\n    lemons_solution = total_items_solution - ((2/3) * total_items_solution) - ((1/9) * total_items_solution)\n    \n    return lemons_solution\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount Max originally had, and y be the amount Anthony originally had\n    x, y = symbols('x y')\n\n    # If Max bought the chocolates, the ratio of the remaining amount of Max to Anthony is 2:5\n    equation1 = Eq((x - 12) / y, 2 / 5)\n\n    # If Anthony bought the chocolates, then the ratio of the remaining amount of Max to Anthony becomes 8:13\n    equation2 = Eq(x / (y - 12), 8 / 13)\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    max_original_amount = solutions[x]\n\n    return max_original_amount\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the original number of red stickers, b be the original number of blue stickers.\n    r, b = symbols('r b')\n    \n    # Since she had an equal number of red and blue stickers, we have r = b\n    eq1 = Eq(r, b)\n    \n    # She gave away 2/3 of her red stickers, so she's left with 1/3 r.\n    # She was left with 1/4 of her total stickers in the end.\n    # Total stickers in the end are 1/3 r + remaining blue stickers (b - x)\n    # And this total amount is equal to 1/4 of all stickers she had (1/4 * 2r)\n    eq2 = Eq(1/3 * r + (b - symbols('x')), 1/4 * (2 * r))\n    \n    # We need to solve the system of equations consisting of `eq1` and `eq2`\n    # to find the fraction of blue stickers (x) Liz gave away.\n    solution = solve((eq1, eq2), (r, symbols('x')))\n\n    # The fraction of blue stickers given away is `x / b`\n    fraction_blue_given_away = solution[symbols('x')] / b\n    \n    return fraction_blue_given_away\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # To divide 20 pens to 6 kids, with each getting at least one pen,\n    # we use the formula for combinations with repetitions, also known as\n    # stars and bars -- (n+k-1)C(k-1) where n is the number of pens and k is the number of kids\n    n = 20 - 6  # since each kid gets at least one pen, we distribute the remaining\n    k = 6 - 1  # we choose 5 partition points in the 14 pens\n    \n    # Compute the binomial coefficient (n+k)! / (n! * k!)\n    ways = factorial(n + k) // (factorial(n) * factorial(k))\n\n    return ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # The unit digit of a number raised to a power follows a pattern depending on the unit digit itself.\n    # In the case of \"4\" the pattern for unit digits repeats every 2 powers: 4, 6, 4, 6, ...\n    # We need to find the unit digit of 4 raised to the power of 2022.\n    base_unit_digit = 4\n    power = 2022\n    \n    # Since the pattern repeats every two, we check if the power is even or odd.\n    # Since 2022 is even, the unit digit will be same as 4^2.\n    if power % 2 == 0:\n        unit_digit = (base_unit_digit ** 2) % 10\n    else:\n        unit_digit = base_unit_digit % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Start with the smallest number of marbles in the first pile\n    # and increase until the condition is met.\n    for x4 in range(1, 16):\n        for x3 in range(1, x4):\n            for x2 in range(1, x3):\n                for x1 in range(1, x2):\n                    if x1 + x2 + x3 + x4 == 16:\n                        return x4  # Return the number of marbles in the biggest pile\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Conversion to a common unit (millimetres)\n    lengths_mm = [10, 100 * 10, 10 * 1000, 2 * 1000 * 1000, 2800 * 10, 2500 * 1000, 100, 100 * 1000]\n\n    # Find the smallest length\n    smallest_length = min(lengths_mm)\n\n    return smallest_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n    \n    # Calculate number of terms in the sequence\n    num_terms = ((last_term - first_term) / difference) + 1\n    \n    # Calculate the sum of an arithmetic series \n    total_pages = (num_terms / 2) * (first_term + last_term)\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    difference = smallest_6_digit - largest_5_digit\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    not_allowed = [0, 2, 4, 6]  # even digits not allowed at the unit's place\n    count = 0\n    for hundreds in range(1, 7):\n        for tens in range(1, 7):\n            for units in range(1, 7):\n                if units not in not_allowed:  # Units place must be odd\n                    if hundreds != tens and hundreds != units and tens != units:  # No digit repeats\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    arithmetic_series = [3, 7, 11, 15, 19]\n    ans = sum(arithmetic_series)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def is_palindromic(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindromic(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    eq1 = Eq(A, 2/3 * B)\n    eq2 = Eq(B, 4/5 * C)\n    eq3 = Eq(A, C - 21)\n    \n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):  # The range is from 2018 to 2108 inclusive\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for page in range(1, 201):  # Numbering starts at 1 and includes page 200\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    total_children = 11 + 5\n    total_height = 122.5 * total_children  # Total height of all children\n    girls_count = 11\n    boys_count = 5\n\n    # Let's assume the average height of the boys is x.\n    # Then the average height of the girls will be x + 3.2.\n    # We can create an equation representing the total height:\n    # (average height of boys * number of boys) + (average height of girls * number of girls) = total height\n    # Simplifying, we get:\n    # (x * 5) + ((x + 3.2) * 11) = total_height\n\n    # Now we solve for x to find the average height of the boys, then we can find the average height of the girls.\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((x * boys_count) + ((x + 3.2) * girls_count), total_height)\n    average_boys_height = solve(equation, x)[0]\n    average_girls_height = average_boys_height + 3.2\n\n    return average_girls_height\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Base case: 1 triangle divides the plane into 2 parts (inside the triangle and outside).\n    parts = 2\n    # Adding a triangle can intersect the existing triangles creating additional parts.\n    # Using the inductive step, each new triangle can intersect the other triangles' sides and add new parts:\n    for i in range(2, 6):\n        parts += i\n    return parts\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 70\n    average_score = 66\n    girls_average = 70\n    boys_average = 63\n\n    girls = symbols('girls')\n\n    boys = total_students - girls\n\n    total_girls_score = girls * girls_average\n    total_boys_score = boys * boys_average\n\n    equation = Eq(total_girls_score + total_boys_score, total_students * average_score)\n\n    number_of_girls = solve(equation, girls)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Let the middle number of the 9 consecutive odd numbers be x\n    # Since there are 9 numbers, and they are consecutive odd numbers,\n    # The numbers are: x-8, x-6, x-4, x-2, x, x+2, x+4, x+6, x+8\n    # Their sum is 9x which is equal to 1503\n    # Thus x = 1503 / 9\n    x = 1503 // 9\n    \n    # The smallest number is 4 numbers before x, which is x-8\n    smallest_number = x - 8\n    \n    return smallest_number\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # given terms and their positions\n    term_32 = 157\n    term_108 = 537\n    pos_32 = 32\n    pos_108 = 108\n    \n    # calculate the common difference\n    common_difference = (term_108 - term_32) / (pos_108 - pos_32)\n    \n    # calculate the first term\n    first_term = term_32 - (pos_32 - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils\n    # Let y be the initial number of bookmarks Mr. Wong has\n    x, y = symbols('x y')\n\n    # If he gives each of his pupils 4 bookmarks, he will have 8 bookmarks left\n    equation1 = Eq(4 * x + 8, y)\n\n    # If he gives each of his pupils 6 bookmarks, he will be short of 10 bookmarks\n    equation2 = Eq(6 * x - 10, y)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of bookmarks Mr. Wong had\n    return solutions[y]\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Working the problem backwards:\n    # 1. Kate had 42 candies left after eating 1/4 of what she got from Jane\n    # This means the total candies Jane gave to Kate is 42 / (1 - 1/4) = 42 / (3/4) = 42 * (4/3)\n    candies_kate_received = 42 * (4 / 3)\n\n    # 2. Jane ate 1/3 of the candies plus 4 before giving to Kate\n    # This means the total candies Jane got from Donna is (candies_kate_received + 4) / (1 - 1/3) = (candies_kate_received + 4) * (3/2)\n    candies_jane_received = (candies_kate_received + 4) * (3 / 2)\n\n    # 3. Donna kept half of her candies plus 3 and gave the rest to Jane\n    # This means the total candies Donna had at first is 2 * (candies_jane_received - 3)\n    total_candies_donna_had = 2 * (candies_jane_received - 3)\n\n    return total_candies_donna_had\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n    \n    # Assume all animals are cows initially, calculate the total legs\n    total_cow_legs = total_animals * legs_per_cow\n    \n    # The excess legs when assuming all are cows are the legs belonging to ducks,\n    # because ducks have 2 legs less than cows\n    excess_legs = total_cow_legs - total_legs\n    \n    # Since each duck contributes to 2 excess legs (4 cow legs - 2 duck legs),\n    # the number of ducks is the number of excess legs divided by 2\n    num_ducks = excess_legs // legs_per_duck\n    \n    return num_ducks\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 other individuals who can receive the first pass from A.\n    first_pass_options = 3\n    \n    # After the first pass, the person who received the ball now has 2 options to pass to (excluding A and themselves).\n    second_pass_options = 2\n    \n    # After the second pass, the person who received the ball now has only 1 option to pass back to A.\n    third_pass_options = 1\n\n    # The total number of different methods is the product of the options at each pass.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return total_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books = 30\n    books_transferred = 4\n\n    anthea_books = jason_books - books_transferred\n\n    # After giving 4 books, they have the same number\n    # Let x be the number they both have after the exchange\n    # Then Jason has x books after giving away, and Anthea has x books after receiving\n    # So we can write the following equation:\n    # jason_books - 4 = anthea_books + 4\n    # 30 - 4 = anthea_books + 4\n    # 26 = anthea_books + 4\n    # anthea_books = 22 (Before receiving the books)\n\n    # Difference between number of Jason's and Anthea's books at first\n    difference = jason_books - anthea_books\n\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        qp = 10 * q + p\n        pq = 10 * p + q\n        if pq == 2 * qp:\n            return qp\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n\n    position = lcm(4, 10)\n\n    return position\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    return 0.98 + 1.98 + 2.98 + 3.98\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2\n    time_minutes = 12\n    time_seconds = time_minutes * 60  # Convert minutes to seconds\n\n    distance = speed_m_per_s * time_seconds\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    term_1 = 2020 // common_factor_1\n    term_2 = 68 * common_factor_1\n    \n    term_3 = 505 // common_factor_2\n    term_4 = 128 * common_factor_2\n\n    return (term_1 * term_2) + (term_3 * term_4)\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's sugar amount\n    xavier_sugar = 100 * 0.25\n    # Yelena's sugar amount\n    yelena_sugar = 500 * 0.55\n    # Carol's sugar amount\n    carol_sugar = 400 * 0.35\n    \n    # Total sugar amount\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    # Total solution amount\n    total_solution = 100 + 500 + 400\n    \n    # Calculate concentration as a percentage\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    A_time = symbols('A_time')\n    B_time = A_time + 12\n    A_efficiency = 1 / A_time\n    B_efficiency = 1 / B_time\n    combined_efficiency = A_efficiency + B_efficiency\n    time_together = 1 / combined_efficiency\n\n    equation = Eq(A_time / 2, B_time / 1)\n    A_time_value = solve(equation, A_time)[0]\n    B_time_value = A_time_value + 12\n\n    ans = 1 / ((1 / A_time_value) + (1 / B_time_value))\n    return ans\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    note = 10\n    newspaper_cost = 2.20\n    change = 4.83\n\n    tissues_cost = note - (newspaper_cost + change)\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls - 42, boys * (2/5) - 12)\n    equation2 = Eq(boys, girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_students = solutions[boys] * 2\n\n    return total_students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # converting minutes to hours for both cases\n    minutes_late = 12 / 60\n    minutes_early = 4 / 60\n    \n    # let's denote the distance from home to office as d\n    # time taken at 3 km/h speed = d / 3\n    # actual time to cover the distance (not late) = d / 3 - 12/60\n    # time taken at 5 km/h speed = d / 5\n    # actual time to cover the distance (not early) = d / 5 + 4/60\n    \n    # since both times are equal:\n    # d / 3 - 12/60 = d / 5 + 4/60\n    # solving for d:\n    d = (minutes_late + minutes_early) / (1/3 - 1/5)\n    \n    # multiplying to clear the denominators\n    d *= (3 * 5)\n    \n    # Return the calculated distance\n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['1', '2', '3']\n    perm = permutations(digits)\n\n    count = sum(1 for _ in perm)\n\n    return count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Rachel's pieces of candy as r and Alice's as a\n    r, a = symbols('r a')\n\n    # Creating equations based on the problem statement\n    eq1 = Eq(r - 10, a + 10) # If Rachel gives Alice 10 candies, they will have the same amount\n    eq2 = Eq(r + 10, 3 * (a - 10) + 4) # If Alice gives Rachel 10 candies, Rachel would have 4 more than 3 times Alice's\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (r, a))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the initial ratio: 3/2 = boys/girls\n    initial_ratio = Eq(boys/girls, 3/2)\n\n    # Equation based on the new ratio after 12 boys and 12 girls joined: (boys+12)/(girls+12) = 19/14\n    new_ratio = Eq((boys + 12) / (girls + 12), 19/14)\n\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    total_children_afternoon = solutions[boys] + solutions[girls] + 12 + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase = today_temp - last_night_temp\n    return increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks in a row\n    ways_for_different_socks = factorial(4)\n\n    # For two different colored pairs of socks in a row\n    # There are two pairs, two ways to arrange within each pair, and 2! ways to arrange the pairs themselves\n    ways_within_pairs = 2 * 2\n    ways_for_pairs = factorial(2)\n    ways_for_same_color_pairs = ways_within_pairs * ways_for_pairs\n\n    return ways_for_different_socks, ways_for_same_color_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    size = int(total_tiles**0.5)\n    red_count = 0\n    green_count = 0\n\n    for i in range(size):\n        for j in range(size):\n            if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1):\n                red_count += 1\n            else:\n                green_count += 1\n\n    dominant_color = 'red' if red_count > green_count else 'green'\n    dominant_count = red_count if red_count > green_count else green_count\n    difference = abs(red_count - green_count)\n\n    return dominant_color, difference\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    # Length of the first iron bar\n    iron_bar1 = 23\n    # Length of the second iron bar\n    iron_bar2 = 37\n    # Length of the welded part\n    welded_part = 3\n\n    # Total length of the full piece after welding both iron bars\n    full_length = iron_bar1 + iron_bar2 - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for correct_william in range(11):\n        points_william = 6 * correct_william - 2 * (10 - correct_william)\n        points_justin = points_william + 24\n        if points_william + points_justin == 96:\n            return correct_william\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    g_earth = 9.81  # acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon\n\n    period_earth = 1  # period of the pendulum on Earth in seconds\n\n    # The period of a simple pendulum T is given by T = 2*pi*sqrt(L/g),\n    # where L is the length of the pendulum and g is the acceleration due to gravity.\n    # On Earth: T_earth = 2*pi*sqrt(L/g_earth)\n    # On the Moon: T_moon = 2*pi*sqrt(L/g_moon)\n    # Taking the ratio of the periods on the Moon and Earth gives us:\n    # T_moon / T_earth = sqrt(g_earth / g_moon)\n    \n    ratio = (g_earth / g_moon) ** 0.5\n    period_moon = period_earth * ratio\n\n    return period_moon\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since we don't have enough information about what A could possibly refer to in this question,\n    # there's no way to provide a solution. The question as posed is unclear and appears incomplete. \n    # If A refers to a value in some number puzzle, we would need the details of that puzzle to solve it.\n    pass\n\n# Due to the lack of information provided in the question,\n# the function cannot return a meaningful result.\nans = None"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A can do 1/15 of the work in a day\n    # B can do 1/10 of the work in a day\n\n    # Together they do (1/15 + 1/10) of the work in a day\n    work_per_day_together = 1/15 + 1/10\n\n    # They work together for 3 days\n    work_done_together = 3 * work_per_day_together\n\n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_together\n\n    # B can do 1/10 of the work in a day, so to finish the remaining work\n    days_for_B_to_finish = remaining_work / (1/10)\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Assume the number of people along one side of the square is n\n    # Since the people form a square array, there are n^2 people in total\n    # Given there are 100 people, n^2 = 100, solving for n gives us n = 10\n    n = 100 ** 0.5\n    \n    # The number of people in the outermost layer would be the number of people along one side\n    # times four, minus the four corners which are counted twice, hence 4*n - 4\n    outermost_layer = 4 * n - 4\n    return int(outermost_layer)\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # -4, since the sequence is decreasing\n\n    # The nth term of an arithmetic sequence can be found by:\n    # a_n = a_1 + (n - 1) * d\n    # We want to find the smallest n such that a_n is negative, so:\n    # 0 > 50 + (n - 1) * (-4)\n    # Solving for n gives us:\n    # n < 50 / 4 + 1\n    # Since n has to be an integer, we can simply divide and take the ceiling value to find the first negative\n    n = -(first_term // common_difference) + 1\n\n    return n\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n\n    # Define the equation based on the problem statement\n    equation = Eq(initial_amount - 3/7 * initial_amount - 1/8 * (initial_amount - 3/7 * initial_amount), 280)\n\n    # Solve the equation\n    solved_value = solve(equation, initial_amount)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cups = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    return max(temperatures) - min(temperatures)\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    \n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 34)\n    \n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    min_apples_per_student = 3\n    total_apples = 80\n\n    # Since at least one student gets at least 3 apples, we find the maximum number of students\n    # that could each get 2 apples before one has to be given at least 3.\n    max_students_with_2_apples = total_apples // 2\n\n    # Now, we must find the correct class size by considering that at least one student will get 3 apples\n    # This means we should add 1 to the maximum number assuming each student could receive only 2 apples.\n    class_size = max_students_with_2_apples + 1\n\n    return class_size\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Pile A has 88 cards, Pile B has 52.\n    # The winning strategy for Tom, who starts first, is to always take cards in such a way\n    # that the number of cards in both piles remains a multiple of the gcd of their sizes.\n    # Initially, gcd(88, 52) = 4. So Tom's first move should make the sizes of the piles\n    # still be multiples of 4.\n    # Tom can take (88 % 4 = 0) cards from Pile A or (52 % 4 = 0) cards from Pile B.\n    # Since the piles are already multiples of 4, Tom should take all 52 cards from Pile B.\n    # This will leave Pile A with 88 cards, a multiple of 4, and the piles will stay in this\n    # kind of state with Jane unable to break it.\n    \n    # After Tom takes all the cards from Pile B, Jane will be forced to take cards from Pile A,\n    # and no matter how many she takes, Tom can always return the piles to a multiple of 4 \n    # by taking the remainder of the number of cards Jane took divided by 4 from Pile A.\n    # Ultimately, Jane will be forced to take a non-multiple of 4 cards from Pile A, \n    # leaving Tom to take the last card.\n    \n    # Thus, Tom's winning strategy is to take all the cards from Pile B in his first move.\n    cards_to_take_from_B = 52\n\n    return cards_to_take_from_B\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost_10_cheesecakes_logcakes = 10*solutions[cheesecake] + 10*solutions[logcake]\n\n    return cost_10_cheesecakes_logcakes\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Because factorial of any number greater than or equal to 10 will always end with a 0\n    # and 2014 is greater than 10, the last digit of 2014! will be 0\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    return sum(i * (2*i-1) for i in range(1, 11))\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # cost of one pencil\n    pencil_cost = 5\n    # cost of one pen\n    pen_cost = 15\n    \n    # number of pencils Owen should give for one pen\n    pencils_for_pen = pen_cost // pencil_cost\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([(i if i % 2 != 0 else -i) for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    # The volume of the solid prism without the hole is given by\n    # V = side_length * side_length * height\n    # The volume of the hole is given by\n    # V_hole = 1 * 1 * height\n    # Since the hole is cut through the prism vertically,\n    # the Volume of the prism with the hole is\n    # V_with_hole = V - V_hole\n    # Thus, (side_length * side_length * height) - (1 * 1 * height) = V_with_hole\n    # where V_with_hole is 480 cm³ and side length is 5 cm\n    # Therefore, height = V_with_hole / (side_length * side_length - 1)\n    \n    side_length = 5\n    volume_with_hole = 480\n    height = volume_with_hole / (side_length * side_length - 1)\n    return height\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(1, 14):\n            z = 13 - x - y\n            if z > 0 and z != x and z != y and x != y:\n                count += 1\n    return count // 6  # This accounts for the fact that we are counting each permutation\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n    total_marbles_given_to_sisters = marbles_given_to_each_sister * 2\n    initial_marbles = marbles_given_to_brother + total_marbles_given_to_sisters + marbles_left_with_henry\n\n    return initial_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of yellow and green beads before the purchase.\n    yellow, green = symbols('yellow green')\n\n    # The original ratio of yellow to green beads is 3:2.\n    original_ratio = Eq(yellow/green, 3/2)\n\n    # After buying more beads, the ratio of green to yellow beads is 3:2.\n    new_ratio = Eq((green + 20)/(yellow + 5), 3/2)\n\n    # Solve the two equations to find the number of yellow and green beads.\n    solutions = solve((original_ratio, new_ratio), (yellow, green))\n\n    # Return the total number of beads before the purchase.\n    yellow_beads = solutions[yellow]\n    green_beads = solutions[green]\n\n    total_beads = yellow_beads + green_beads\n\n    return total_beads\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Two-digit palindromes\n    for x in range(1, 10):\n        count += 1  # 11, 22, ..., 99 (x + x)\n    # Three-digit palindromes\n    for x in range(1, 10):\n        for y in range(0, 10):\n            count += 1  # 101, 111, ..., 191, 202, 212, ..., 292, ..., 909, 919, ..., 999 (x + y + x)\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    total_sum = 0\n    # Since each term is a^2 - (a-1)^2, we can calculate it directly\n    for a in range(1, 21):\n        total_sum += a**2 - (a-1)**2\n    return total_sum\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Speed of Amy\n    speed_amy = 60\n    # Speed of Christen\n    speed_christen = 40\n\n    # They meet after 4 hours\n    time_meet = 4\n\n    # Calculate the distance each travelled\n    distance_amy = speed_amy * time_meet\n    distance_christen = speed_christen * time_meet\n\n    # Total distance between them\n    total_distance = distance_amy + distance_christen\n\n    # Calculate time for Christen to reach Amy's starting point\n    time_for_christen = total_distance / speed_christen\n\n    return time_for_christen\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * 4 - wrong_answers\n        if score == 110:\n            return correct_answers\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n\n    # Generate all permutations of the digits, and filter out the ones that are four digits long \n    # and end in an even digit: 0, 6, or 8\n    valid_permutations = [\n        p for p in permutations(digits, 4)\n        if p[0] != '0' and p[-1] in even_digits\n    ]\n    \n    return len(valid_permutations)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if len({hundreds, tens, ones}) == 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n    \n    # Let the number of lemon cakes be 4x and chocolate cakes be 5x\n    # 4x + 5x + vanilla_cakes + banana_cakes = total_cakes\n    # 9x = total_cakes - vanilla_cakes - banana_cakes\n    x = (total_cakes - vanilla_cakes - banana_cakes) / 9\n    lemon_cakes = 4 * x\n    \n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of books each of them initially have.\n    lily, judy, x = symbols('lily judy x')\n\n    # Equation: lily - x = judy + x (After Lily gives x books to Judy, both have the same number)\n    equation1 = Eq(lily - x, judy + x)\n\n    # Equation: lily = judy + 2x (The difference is essentially twice the number of books transferred)\n    equation2 = Eq(lily, judy + 2*x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lily, judy, x))\n\n    # The difference in the number of books they originally had is the value of 2x\n    return solutions[2*x]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Initial pass from Lily to either Cici or April, so there are 2 choices\n    first_pass_choices = 2\n\n    # For the second pass, the receiver can only pass to the one person not involved in the first pass\n    # This means there is only 1 choice for the second pass\n    second_pass_choices = 1\n\n    # Total number of different passing ways is the product of choices for each pass\n    total_different_ways = first_pass_choices * second_pass_choices\n\n    return total_different_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    # Average score on first four assignments\n    avg_first_four_assignments = 89\n    # Total points on first four assignments\n    total_first_four_assignments = avg_first_four_assignments * 4\n    # Score on the fifth assignment\n    score_fifth_assignment = 94\n    # Total points including the fifth assignment\n    total_five_assignments = total_first_four_assignments + score_fifth_assignment\n    # Average score on five assignments\n    avg_five_assignments = total_five_assignments / 5\n\n    return avg_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total = 400\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), \n                      (chloe, david, emily))\n\n    return solutions[chloe]\n\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobbles_arms = 5\n    wibbles_count = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * wibbles_count\n    remaining_arms = total_arms - total_wibble_arms\n    wobbles_count = remaining_arms // wobbles_arms\n\n    return wobbles_count\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    for a in range(2, 180):\n        if is_prime(a):\n            for b in range(2, 180):\n                if is_prime(b):\n                    if 7 * a + 9 * b == 179:\n                        return a + b\n    return None\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    amount = 420\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction_of_time = 1/4 * 1/6 * 1/8\n    seconds_in_minute = 60\n\n    total_seconds = minutes * fraction_of_time * seconds_in_minute\n\n    return total_seconds\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def hash_op(a, b):\n        return a + b - (a * b) / 910\n\n    # Initialize result with the right-most value in the sequence\n    result = 1\n\n    # Iterate from 2 to 2016 and perform the hash operation\n    for x in range(2, 2017):\n        result = hash_op(x, result)\n\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Maverick's speed relative to Kelvin's\n    relative_speed = 15 - 10  # in km/h\n\n    # Kelvin's lead distance\n    lead_distance = 10  # in km\n\n    # Time for Maverick to catch up to Kelvin according to Maverick\n    maverick_time_minutes = 24\n    maverick_time_hours = maverick_time_minutes / 60  # converted to hours\n\n    # Distance covered by Maverick in that time\n    maverick_distance = 15 * maverick_time_hours  # speed * time\n\n    # Distance covered by Kelvin in that time\n    kelvin_distance = 10 * maverick_time_hours  # speed * time\n\n    # Maverick actually catches up when the distances they travel negate the lead\n    # Check if the relative distance Maverick covered matches the lead_distance\n    if maverick_distance - kelvin_distance == lead_distance:\n        return \"Maverick is correct, he took 24 minutes.\"\n    else:\n        # If not, calculate the actual time it took for Maverick to catch up\n        catch_up_time_hours = lead_distance / relative_speed\n        catch_up_time_minutes = catch_up_time_hours * 60  # convert back to minutes\n        return catch_up_time_minutes\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3  # number of boys\n    girls = 4  # number of girls\n    \n    # Pip's mistake was he should have multiplied the numbers instead of adding them\n    ways = boys * girls  # correct way to calculate the number of ways\n    \n    return ways\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since each child must get at least one eraser, we give one to each child first.\n    # This leaves us with 6 - 3 = 3 erasers to distribute freely among the 3 children.\n    # This is a stars and bars problem: we are distributing 3 indistinguishable items into 3 different bins.\n    # The number of ways to do this is given by the formula:\n    # (n+k-1) choose (k-1), where n is the number of items and k is the number of bins.\n    n = 3  # The remaining erasers to distribute.\n    k = 3  # The number of kids.\n    \n    # We will use the combinations function from the math library to calculate this.\n    from math import comb\n    count = comb(n+k-1, k-1)\n    \n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_marks = 23\n    marks_correct = 5\n    marks_wrong = -2\n    \n    # Let's create a hypothesis that all answers were correct initially\n    max_correct = total_marks // marks_correct\n    \n    for correct_answers in range(max_correct + 1):\n        wrong_answers = 6 - correct_answers\n        if correct_answers * marks_correct + wrong_answers * marks_wrong == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_length = (41 - 1) * 4  # since trees are planted at both ends\n    num_pine_trees = (total_length // 5) + 1  # also count the tree at the end\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the two men\n    x, y = symbols('x y', positive=True, real=True) # x is the age of the older man, y is the age of the younger man\n    \n    # Equations based on the problem statement\n    # When the older man was the age of the younger man (x - y years ago), the younger man was 4.\n    equation1 = Eq(x - y, 4)\n    \n    # When the younger man is the age of the older man (y - x years in the future), the older man will be 61.\n    equation2 = Eq(x + (y - x), 61)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    hours1 = 9\n    people1 = 10\n    hours2 = 3\n\n    people2 = (people1 * hours1) / hours2\n\n    return int(people2)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    fraction_spent_on_bag = 2 / 5\n    remaining_after_book_fraction = 1 - (1 / 3)\n    \n    initial_after_book = bag_cost / fraction_spent_on_bag\n    initial_money = initial_after_book / remaining_after_book_fraction\n\n    return initial_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    ans = week1 + week2 + week3\n    return ans\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining = 48\n    second_day_sold = remaining / (1 - 0.6)\n\n    total = second_day_sold / (1 - 1/3)\n\n    return int(total)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    last_term = n\n\n    sum_squares = (1/6) * last_term * (last_term + 1) * (2*last_term + 1) - \\\n                  (1/6) * (first_term - 1) * ((first_term - 1) + 1) * (2*(first_term - 1) + 1)\n\n    return int(sum_squares)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for i in range(1, 13):\n        for j in range(i + 1, 13):\n            for k in range(j + 1, 13):\n                if i + j + k == 13 and i <= 8 and j <= 8 and k <= 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Desks behind Judy\n    desks_behind_judy = 7\n\n    # Jessica sits in front of Judy, so there's 1 desk (Jessica's) between the desks in front of Jessica and behind Judy\n    # Therefore, the total desks are the sum of desks in front of Jessica, desks behind Judy, and both Jessica's and Judy's desks\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 2  # +2 for Jessica's and Judy's desks\n    \n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the boys as b and girls as g\n    b, g = symbols('b g')\n\n    # We know initially we have b boys and g girls and a total of b + g = 152 students\n    total_students_eq = Eq(b + g, 152)\n\n    # We remove 1/11 of boys and 5 girls, then number of boys and girls will become the same:\n    # b - (1/11 * b) = g - 5 -> b - b/11 = g - 5\n    boys_girls_equal_eq = Eq(b - b/11, g - 5)\n\n    # Solve the system of equations to find the values of b and g\n    solutions = solve((total_students_eq, boys_girls_equal_eq), (b, g))\n    \n    # The original number of boys is b\n    return solutions[b]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(75 / 100 * x - 5, 2.5)\n\n    return solve(equation, x)[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    difference = 11\n\n    n = 0  # n is term number\n    current_value = initial_amount\n    \n    while current_value >= 0:\n        n += 1\n        current_value = initial_amount - difference * n\n\n    return current_value + difference  # current_value is the first negative amount, we add difference to get the last non-negative value\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    number = 0.11\n    halfway = 0.126\n    difference = halfway - number\n    other_number = halfway + difference\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    chocolates_to_toffees_ratio = 12 / 7\n    toffees = chocolates / chocolates_to_toffees_ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factors(num)):\n            return num\n\ndef factors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mango_cost_per_case = 56\n    number_of_mangoes = 24\n    number_of_lychees = 19\n\n    total_mango_cost = number_of_mangoes * mango_cost_per_case\n    total_lychee_cost = total_cost - total_mango_cost\n    lychee_cost_per_case = total_lychee_cost / number_of_lychees\n\n    return lychee_cost_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    # Since the multiplication result must fill the entire underline, A * B must be a three-digit number\n    # Additionally, C must be a 1-digit number, and B * C must be a two-digit number.\n    # We will try all possibilities for A (100 to 999) and C (1 to 9) and check if these numbers meet the criteria.\n    \n    for A in range(100, 1000):\n        for C in range(1, 10):\n            AC = A * C\n            if 1000 <= AC <= 9999:  # AC must be a four-digit number.\n                # B extracted from the last two-digit of AC\n                B = AC % 100\n                if B > 9:  # We ensure that B is a two-digit number.\n                    # Recalculate AC and B to ensure correctness\n                    AC_recalculated = A * B\n                    C_recalculated = AC // 100  # Extract the first two digits for C\n                    # Verify if the multiplication holds\n                    if AC_recalculated == AC and C_recalculated == C:\n                        return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    teams = 6\n    games = comb(teams, 2)  # Combination of 6 teams taken 2 at a time\n    return games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    initial_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set(permutations(cards, 3))\n    count = sum(1 for number in unique_numbers if number[0] != '0')\n    return count\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Given puzzle has the structure:\n    #  P Q R\n    # x   S\n    # -----\n    # T U V\n    # W X\n    # -----\n    # Y Z J\n    # Each variable presents a digit from 0 to 9\n    \n    # P, S, Y can't be 0\n    for P in range(1, 10):\n        for Q in range(0, 10):\n            for R in range(0, 10):\n                for S in range(1, 10):\n                    T = P * S\n                    # T must be a two digit number\n                    if T > 99 or T < 10:\n                        continue\n                    # R * S must equal a number V end with R\n                    V = R * S\n                    if V % 10 != R or V > 99 or V < 10:\n                        continue\n                    # Q * S + carry from R*S must be a two digit number U with the second digit Q\n                    carry_RS = V // 10\n                    U = Q * S + carry_RS\n                    if U % 10 != Q or U > 99 or U < 10:\n                        continue\n                    carry_U = U // 10\n                    \n                    # First digit of T + carry from U must give W which is a digit\n                    W = T // 10 + carry_U\n                    if W > 9:\n                        continue\n                    # We have found a solution once all constraints are met\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who bought the £10 shirt\n    # Let y be the number of children who bought the £15 shirt with their name on the back\n    # We then have two equations:\n    # x + y = 50 (total number of children)\n    # 10x + 15y = 555 (total amount paid)\n\n    # Using the sympy library to solve the system of equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The solution for y gives us the number of children who paid to have their name on the shirt\n    return solutions[y]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Time spent jogging from 7:30 AM to 8:30 AM is 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 5  # in miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Time spent walking from 8:30 AM to 10:30 AM is 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 3  # in miles per hour\n\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    for i in range(100):\n        if i + (i + 1) + (i + 2) + (i + 3) + (i + 4) == 100:\n            return i\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    q = 1\n    # Find the cube of each integer up to 44000, check if any divides 44000\n    for i in range(1, int(44000**(1/3)) + 1):\n        if 44000 % (i**3) == 0:\n            q = i**3\n            break\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    balls_left_over = 2\n\n    bags_used = (total_balls - balls_left_over) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # You must draw 1 card from each different pattern of the same number first.\n    # Since there are 4 patterns, you can draw up to 4 cards of different patterns (4 x 1 for each number).\n    # To guarantee at least 3 cards have the same number, you need to draw 1 more card.\n    # This will ensure that at least one number is repeated 3 times regardless of the patterns.\n    \n    cards_to_guarantee_three = (4 * 1) + 1\n    return cards_to_guarantee_three\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n    intervals = number_of_trees - 1\n    \n    distance_between_trees = total_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    given_to_sister = 38\n\n    # Calculate how many notebooks Andy's sister has at first\n    # If Andy gives 38 notebooks, they will have the same amount\n    # So, sister’s notebooks + 38 = Andy's notebooks - 38\n    sisters_notebooks = andy_notebooks - 2 * given_to_sister\n\n    return sisters_notebooks\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards for each suit\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n\n    # Combine all possible cards\n    all_cards = {\n        'spades': spades,\n        'hearts': hearts,\n        'diamonds': diamonds,\n        'clubs': clubs\n    }\n\n    # Eddie doesn't know the card, so the suit must have multiple possibilities\n    # Avril doesn't know the card initially, so the number must appear in at least two different suits\n    possible_cards = {suit: numbers for suit, numbers in all_cards.items() if len(numbers) > 1}\n    possible_numbers = {number for numbers in possible_cards.values() for number in numbers if \n                        sum(number in numbers for numbers in all_cards.values()) > 1}\n\n    # Avril now knows the card after Eddie speaks\n    # So we can discard any number that appears in more than one suit\n    numbers_after_eddie = {number for number in possible_numbers if \n                           sum(number in numbers for numbers in possible_cards.values()) == 1}\n\n    # Eddie now knows the card after Avril speaks\n    # So for the remaining numbers, there must be exactly one suit which has this number\n    suits_after_avril = {suit for suit, numbers in possible_cards.items() if \n                         numbers.intersection(numbers_after_eddie)}\n\n    # There should be one suit and one number intersecting\n    final_suit = next(iter(suits_after_avril))\n    final_number = next(iter(numbers_after_eddie.intersection(all_cards[final_suit])))\n\n    return final_suit + final_number\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3 / 4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_gaps = 9 + 1  # Trees create one more gap than their number\n    \n    distance_between_each_tree = total_distance / number_of_gaps\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    original_number = 200\n    original_number_str = str(original_number)\n    \n    for i in range(len(original_number_str)):\n        for digit in range(10):\n            if original_number_str[i] == str(digit):\n                continue\n            \n            new_number_list = list(original_number_str)\n            new_number_list[i] = str(digit)\n            \n            new_number = int(\"\".join(new_number_list))\n            \n            if new_number < 2:\n                continue\n            \n            if isprime(new_number):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let's denote the smaller number as x\n    # If one number is twice the other, the larger number is 2x\n    # According to the problem, their sum is 72, so we can write it as an equation: x + 2x = 72\n\n    x = symbols('x')\n    equation = Eq(x + 2 * x, 72)\n    \n    # Let's solve the equation for x to find the smaller number\n    smaller_number = solve(equation, x)\n\n    return smaller_number[0]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    numbers = [3, 4, 6, 10]\n    total_sum = mean_value * (len(numbers) + 1)\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    total_people = people_in_front_of_emily + danny_position_from_back + 1 # +1 for Emily herself\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    time_for_one_cut = 12 / (4 - 1) # Since 4 sections needs 3 cuts\n    total_cuts_needed = 5 * (4 - 1) # 5 times cutting into 4 sections each needs 5*3 cuts\n    total_time_needed = time_for_one_cut * total_cuts_needed\n    return total_time_needed\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days and p the total number of pages\n    d, p = symbols('d p')\n\n    # Setting up the equations based on the problem statement\n    # Vanessa will finish reading in d + 2 days at a rate of 30 pages per day\n    eq1 = Eq(30 * (d + 2), p)\n    # Vanessa will finish reading in d - 4 days at a rate of 39 pages per day\n    eq2 = Eq(39 * (d - 4), p)\n\n    # Solving the simultaneous equations\n    solutions = solve((eq1, eq2), (d, p))\n\n    # Extracting the solution\n    days_to_finish = solutions[d]\n    total_pages = solutions[p]\n\n    return days_to_finish, total_pages\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count_5 = 0\n    page = 1\n    while count_5 < 30:\n        if '5' in str(page):\n            count_5 += str(page).count('5')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 13 - 2 * (2 * x - 3) - (5 - (x - 2))\n\n    # Find the solution to the equation\n    age = solve(equation, x)\n\n    # Celeste's error is in the step where she combines like terms\n    # Correct step: 7 - 4x = 3 - x -> 7 - 3 = 4x - x -> 4 = 3x -> x = 4 / 3\n    # The error is when she simplifies 7 - 4x = 3 - x to 7 - 3 = 4x - x,\n    # but it should be 7 - 3 = 3x\n    \n    # Return the correct age\n    return age[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the cost of an apple (a) and an orange (o)\n    a, o = symbols('a o')\n\n    # Equations based on the purchase scenarios given\n    # Kate buys 1 apple (a) and 2 oranges (o) - cost is 48p\n    # Jade buys 1 apple (a) and 1 orange (o) - cost is 31p\n    eq1 = Eq(a + 2*o, 48)\n    eq2 = Eq(a + o, 31)\n\n    # Solve the system of equations for a and o\n    solutions = solve((eq1, eq2), (a, o))\n\n    # Return the cost of one orange\n    return solutions[o]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n\n    # Equation for week 1 (4 balls bought, remaining amount is 27p which is £0.27)\n    equation1 = Eq(4 * price_per_ball + 0.27, pocket_money)\n    # Equation for week 2 (2 balls bought, remaining amount is £1.51)\n    equation2 = Eq(2 * price_per_ball + 1.51, pocket_money)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3 / 8)\n    remaining = total_badges - given_away\n    return remaining\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n\n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n\n    total_steps = steps_per_staircase * number_of_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    \n    return louis_position\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_cheese = 104\n    thomas_ratio = 5\n    gerald_ratio = 3\n    unit = total_cheese / (thomas_ratio + gerald_ratio)\n    thomas_cheese = unit * thomas_ratio\n    gerald_cheese = unit * gerald_ratio\n    ans = thomas_cheese - gerald_cheese\n    return int(ans)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, perform the addition and convert back to base 8\n    sum_base10 = int('25', 8) + int('37', 8)\n    sum_base8 = oct(sum_base10)[2:]  # [2:] to remove the '0o' prefix added to the octal representation by oct()\n    \n    return sum_base8\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of girls be g and the number of boys be b.\n    # Given that there were 2/7 as many boys as girls, we can write:\n    # b = 2/7 * g\n\n    # Let the number of children be c (which includes both boys and girls) and the number of adults be a.\n    # Given that there were 2/3 as many adults as children, we can write:\n    # a = 2/3 * c\n    # Now we know that c = g + b\n\n    # There were 1228 more adults than boys, so:\n    # a = b + 1228\n\n    # Given the equations, we can solve for g and b:\n    # a = 2/3 * (g + b)\n    # b + 1228 = 2/3 * (g + b)\n    # 3 * (b + 1228) = 2 * (g + b)\n    # 3b + 3*1228 = 2g + 2b\n    # g = 3b + 3*1228 - 2b\n    # g = b + 3*1228\n\n    # Since b = 2/7 * g, we substitute g in terms of b into the equation:\n    # g = (2/7 * g) + 3*1228\n    # g - (2/7 * g) = 3*1228\n    # (5/7 * g) = 3*1228\n    # g = (3*1228) / (5/7)\n    # g = (3*1228*7) / 5\n\n    g = (3 * 1228 * 7) // 5\n    b = (2 * g) // 7\n    c = g + b\n    a = (2 * c) // 3\n    total_people = a + c\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    selling_price_per_racket = 175\n    purchase_price_per_racket = 150\n    profit = 525\n    remaining_rackets = 8\n\n    # Total proceeds = Total cost price + Profit\n    # Let the number of rackets purchased be 'n'\n    # Total proceeds = selling price per racket * (n - remaining rackets)\n    # Total cost price = purchase price per racket * n\n    # (n - remaining_rackets) * selling_price_per_racket = purchase_price_per_racket * n + profit\n\n    # Rearrange the equation to solve for n\n    n = (profit + remaining_rackets * selling_price_per_racket) / (selling_price_per_racket - purchase_price_per_racket)\n\n    return int(n)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    chloe_spent_per_day = 20\n    gordon_spent_per_day = 25\n    chloe_left = 157\n    gordon_left = 82\n\n    difference_in_spending = gordon_spent_per_day - chloe_spent_per_day\n    difference_left = chloe_left - gordon_left\n\n    days_passed = difference_left / difference_in_spending\n    gordon_initial = gordon_left + days_passed * gordon_spent_per_day\n\n    return gordon_initial\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # B gives A 24 points: B - 24 == A + 24 - 2\n    equation1 = Eq(B - 24, A - 2)\n\n    # A gives B 25 points: A - 25 == 5 * (B + 25)\n    equation2 = Eq(A - 25, 5 * (B + 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    # The number of regions R for n circles can be given by the formula\n    # R = n^2 - n + 2\n    n = 10\n    ans = (n * n) - n + 2\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    purchase_price = 15\n    bad_melons_fraction = 1/5\n    selling_price_per_melon = 1.5\n\n    good_melons = total_melons * (1 - bad_melons_fraction)\n    total_sales = good_melons * selling_price_per_melon\n\n    profit = total_sales - purchase_price\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    oranges_left = 17\n    apples_left = 5\n    neighbors_range = range(1, min(100, 150))  # It's impossible for the number of neighbors to be more than the smallest number of fruits.\n\n    # Find the number of neighbors by looking at the common factors of (oranges - oranges_left) and (apples - apples_left).\n    for neighbors in neighbors_range:\n        if (150 - oranges_left) % neighbors == 0 and (100 - apples_left) % neighbors == 0:\n            return neighbors  # Break as soon as the smallest number of neighbors satisfying the condition is found.\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the total value of jewels in P be x, and in Q be y, each box has 3 jewels.\n    # According to the problem, transferring one jewel worth £5000 from P to Q increases\n    # the average value of the jewels in each box by £1000.\n\n    # Before transferring:\n    # Average value of jewels in P = x / 3\n    # Average value of jewels in Q = y / 3\n\n    # After transferring:\n    # Value of jewels in P = x - 5000\n    # Value of jewels in Q = y + 5000\n    # New average value of jewels in P = (x - 5000) / 3\n    # New average value of jewels in Q = (y + 5000) / 3\n\n    # The averages increase by £1000 for both\n    # So the equations are:\n    # (x - 5000) / 3 = (x / 3) + 1000 and (y + 5000) / 3 = (y / 3) + 1000\n\n    # Solving for x and y:\n    # x - 5000 = x + 3000\n    # y + 5000 = y + 3000\n\n    # Simplifying:\n    # -5000 = 3000, which is not possible\n    # The correct approach is to set the increase in average value to the total increase in value,\n    # We want the total value of the jewels in both boxes to increase by an amount that would cause\n    # the average value of the jewels in each box to increase by £1000.\n\n    # Let n be the total value of the jewels in boxes P and Q.\n    # Therefore, n / 6 is the initial average value of the jewels in each box.\n    # After the transfer, the average value becomes (n / 6) + 1000.\n    # The total value in box P would be n/2 - 5000, and in box Q would be n/2 + 5000\n    # since one jewel worth £5000 is transferred from P to Q.\n\n    # Since the new average value in P is (n/2 - 5000)/3 = (n / 6) + 1000\n    # and similarly for Q, (n/2 + 5000)/3 = (n / 6) + 1000, we see that n does not change.\n\n    # Hence, we can solve for n by using the increase in average value:\n    # (n / 6) + 1000 = (n + 6000) / 6\n    # n + 6000 = n + 6000\n    # Which is always true; therefore, n is not dependent on the increase in average value.\n    # We just have to account for the jewel worth £5000 that has been moved, and we know that\n    # before moving, the average value already included that jewel.\n\n    # Thus, the total value of all 6 jewels including the £5000 jewel that was moved is:\n    # Let T be the total value of all 6 jewels\n    # We have two equations now,\n    # 1) The initial total value to get an average of (T/6)+1000\n    #    [(T-5000)/3] = (T/6)+1000\n    # 2) The same should be true for Q,\n    #    [(T+5000)/3] = (T/6)+1000\n\n    # Solving the above equation:\n    # (T-5000)/3 = (T/6)+1000\n    # 2T - 10000 = T + 6000\n    # T = 16000\n\n    # So the total value of all 6 jewels T is £16000.\n    return 16000\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # line is 10 cm\n    cross_interval = 1  # cross every 1 cm\n    \n    # number of crosses is one more than the line length since there is a cross at each end and every 1 cm\n    num_crosses = line_length // cross_interval + 1\n    \n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let sandra's original amount of marbles be s and jessica's be j\n    s, j = symbols('s j')\n    \n    # Sandra gave Jessica 13 marbles, so Sandra has s - 13 and Jessica has j + 13\n    # After giving away marbles, Sandra has 6 fewer than Jessica\n    equation = Eq(s - 13, j + 13 - 6)\n\n    # Sandra had more marbles than Jessica originally\n    inequality = s > j\n\n    # find the solutions that satisfy the equation and inequality\n    solutions = solve((equation, inequality), (s, j))\n\n    # calculate the difference in the original amount\n    original_difference = solutions[s] - solutions[j]\n\n    return original_difference\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_posts = 60 // (6 - 1)\n    distance_between_first_and_ninth = distance_between_posts * (9 - 1)\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    num_matches = num_teams * (num_teams - 1) // 2\n\n    return num_matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # Pattern sequence: red, red, green, yellow, yellow, green...\n    # Pattern length before it repeats: 6 (2 reds, 1 green, 2 yellows, 1 green)\n    # Total balloons: 75\n    # Because the pattern is periodic and has 6 elements, \n    # we divide the number of balloons by the length of the pattern to find full cycles.\n    cycles = 75 // 6\n\n    # Each full cycle contains 2 green balloons (red, red, green, yellow, yellow, green)\n    green_balloons_in_full_cycles = cycles * 2\n\n    # Calculate the remaining balloons that don't form a full cycle\n    remaining_balloons = 75 % 6\n\n    # Determine how many additional green balloons are there in the remaining part of the cycle\n    # Pattern order is important: red (1), red (2), green (3), yellow (4), yellow (5), green (6)\n    additional_green_balloons = 0\n    if remaining_balloons >= 3:\n        additional_green_balloons += 1\n    if remaining_balloons == 6:\n        additional_green_balloons += 1\n\n    # Sum the green balloons in full cycles with the additional ones\n    total_green_balloons = green_balloons_in_full_cycles + additional_green_balloons\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remainder = total_strawberries % 8\n    return remainder\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    digit_1_count = 0\n    digit_2_count = 0\n    N = 1\n\n    while True:\n        current_number = str(N)\n        digit_1_count += current_number.count('1')\n        digit_2_count += current_number.count('2')\n\n        if digit_1_count == 15 and digit_2_count == 14:\n            break\n        \n        N += 1\n\n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    each_friend = 26\n    friends = 7\n    kate_left = 22\n    total_at_school = (each_friend * friends) + kate_left\n    total_candy = total_at_school * 3  # Because she ate 1/3, so 2/3 is what she brought to school\n    \n    return total_candy\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor_when_bob_at_5th = 9\n    andy_top_floor = 25\n\n    # Assuming Bob's speed remains constant and comparing it with Andy's.\n    bob_floor_when_andy_at_top = (andy_top_floor * 5) / andy_floor_when_bob_at_5th \n\n    return int(bob_floor_when_andy_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    return 8 * (3/2)\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of words typed per minute,\n    # and y be the total number of words to type.\n    x, y = symbols('x y')\n    \n    # Original speed, finish the work in 3 minutes: y = 3x\n    eq1 = Eq(y, 3*x)\n    \n    # Increased speed, finish the work 1 minute earlier: y = (3-1)(x+30) = 2(x+30)\n    eq2 = Eq(y, 2*(x+30))\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, y))\n\n    return solution[y]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initial state of lights, 0 for off, 1 for on\n    \n    # Ms. Lily presses switches of every other light starting from 1\n    for i in range(1, 11, 2):\n        lights[i - 1] = 1  # Update the state to on\n    \n    # Sam presses each even-numbered switch 7 times\n    for i in range(2, 11, 2):\n        lights[i - 1] = lights[i - 1] ^ (7 % 2)  # XOR with 1 for odd number of presses\n\n    # Count lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in Pail B\n    A, B = symbols('A B')\n\n    # According to the problem we have two equations\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Now we solve these equations simultaneously\n    solutions = solve((equation1, equation2), (A, B))\n\n    # The total amount is sum of A and B\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_height = 8\n    day_climb = 3\n    night_slip = 2\n    net_day_climb = day_climb - night_slip\n    days = 0\n    progress = 0\n    \n    while progress < total_height:\n        days += 1\n        progress += day_climb\n        if progress >= total_height:\n            break\n        progress -= night_slip\n    \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of the table and the chair\n    table, chair = symbols('table chair')\n\n    # Equation 1: A table cost two times as much as a chair\n    equation1 = Eq(table, 2 * chair)\n\n    # Equation 2: Two tables and three chairs cost $280\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    # Return the cost of each table\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 0.06  # 6%\n    desired_sugar_percentage = 0.1  # 10%\n\n    # Initial amount of sugar in ml\n    initial_sugar_content = initial_volume * initial_sugar_percentage\n\n    # Let x be the amount of sugar to be added in ml to reach 10% sugar concentration.\n    # After adding x ml of sugar, the total volume will be (initial_volume + x) ml.\n    # The new sugar content will be (initial_sugar_content + x) ml.\n    # The equation for the new sugar percentage will be:\n    # (initial_sugar_content + x) / (initial_volume + x) = desired_sugar_percentage\n\n    # Solving for x using simple algebra:\n    x = (desired_sugar_percentage * initial_volume - initial_sugar_content) / (1 - desired_sugar_percentage)\n\n    return x\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstress_count = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstress_count * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n    \n    parts_per_hour = parts_already_made / hours_spent\n    remaining_parts = total_parts_needed - parts_already_made\n    hours_needed = remaining_parts / parts_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Draw all balls of one colour +1, and all balls of another colour +1 ensures the third draw is a different colour.\n    # Since we have 5 of each colour, we take 5 (all of one colour) + 5 (all of another colour) + 1 (to guarantee the third colour).\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # There are 5 different colors and students take out 2 balls\n    # Calculate the combination of taking 2 balls out of 5 colors\n    # Which is the same as choosing 2 from 5 with repetition allowed\n    combinations_of_balls = comb(5 + 2 - 1, 2)\n\n    # By the pigeonhole principle, to guarantee that 2 students always\n    # take out the same kind of balls, we need one more than the number of combinations\n    min_students = combinations_of_balls + 1\n\n    return min_students\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Let's categorize the number by remainders when divided by 4\n    # There are only 3 categories: Remainder 0 (divisible by 4), Remainder 1, and Remainder 2.\n    # Category R0: Count numbers between 10 and 41 (inclusive) that are divisible by 4\n    # 12, 16, 20, ..., 40 are those numbers which are 41//4 - 10//4 + 1 (including 10 if it's divisible)\n    # Category R1: Count numbers between 10 and 41 (inclusive) that give a remainder of 1 when divided by 4\n    # Category R2: Same as R1, but remainder of 2, which are just the even numbers not divisible by 4\n    # Notice that if we have one number from R0, we only need one more number to guarantee a product divisible by 4\n    # Getting at least one pair (R1, R1) or (R2, R2) together with other remaining numbers guarantees a product divisible by 4\n    \n    R0 = (41 // 4) - (10 // 4) + (1 if 10 % 4 == 0 else 0)\n    R1 = (41 // 4) - (10 // 4) + (1 if 11 % 4 == 0 else 0)\n    R2 = (41 // 2) - (10 // 2) + (1 if 10 % 2 == 0 else 0) - R0\n    \n    # If we draw R1+R2+1 numbers, we are either guaranteed to have:\n    # At least 2 numbers in R1 or R2, or at least one number in R0\n    # So, we can definitely say the product of the two numbers is divisible by 4\n    \n    return R1 + R2 + 1\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    melissa_cards = (total_cards * 2) / 3\n    hisham_cards = total_cards / 3\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    \n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # converting 2m 20cm to cm\n    length_per_piece = total_length_cm / 2\n    return length_per_piece\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    # Perform the calculation directly in Python\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum = 0\n    for i in range(46, 51):\n        difference = 50 - i\n        sum += (50 + difference) * (50 - difference)\n    return sum\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt, floor\n\n    # Find the smallest two-digit prime number\n    prime_list = list(primerange(10, 100))\n    smallest_two_digit_prime = prime_list[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = floor(sqrt(99))**2\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age when his father's age was the reverse of his\n    brian_age_at_14 = 14\n\n    # Father's age when Brian was 14\n    father_age_at_14 = 41\n\n    # Age difference between Brian and his father\n    age_difference = father_age_at_14 - brian_age_at_14\n\n    # To find the next time Brian's age is the reverse of his father's age,\n    # we loop through the future ages of Brian, checking when the age of his father \n    # is the reverse of Brian's age, considering their age difference\n    for year in range(1, 100):\n        # Current ages\n        brian_current_age = brian_age_at_14 + year\n        father_current_age = father_age_at_14 + year\n\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_current_age) == str(father_current_age)[::-1]:\n            return brian_current_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    coffee_cost_euros = 4.8\n    coffee_cost_dollars = coffee_cost_euros * euro_to_dollar_rate\n    return coffee_cost_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = None\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b/c + (d/e)*f - (g + h/j)\n        if N == int(N):\n            if max_value is None or N > max_value:\n                max_value = N\n    return int(max_value)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books = 3900\n    new_books = 510\n\n    # Calculate the initial number of books for each language\n    ratio_sum = 4 + 3 + 6\n    chinese_books = (4 / ratio_sum) * total_books\n    malay_books = (3 / ratio_sum) * total_books\n    english_books = (6 / ratio_sum) * total_books\n\n    # Calculate the increased number of books for each language\n    chinese_books_new = chinese_books * 1.20\n    malay_books_new = malay_books * 1.10\n\n    # Calculate the new total for Chinese and Malay books\n    total_new_cm = chinese_books_new + malay_books_new\n\n    # Calculate the increase in the number of English books\n    total_new_books = total_books + new_books\n    english_books_new = total_new_books - total_new_cm\n\n    # Calculate the percentage increase in the number of English books\n    percentage_increase_english = ((english_books_new - english_books) / english_books) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import gcd, lcm\n    num_cakes = lcm(12, 56)\n    return num_cakes\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors = 12\n    seniors = 8\n    average_juniors = 10\n    total_participants = juniors + seniors\n    overall_average = 14\n\n    total_score_juniors = juniors * average_juniors\n    total_score_all = total_participants * overall_average\n\n    total_score_seniors = total_score_all - total_score_juniors\n    average_seniors = total_score_seniors / seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # combined age 4 years ago\n    combined_age_4_years_ago = 10\n\n    # combined age now, since 4 years have passed\n    combined_age_now = combined_age_4_years_ago + 4 * 2\n    \n    # combined age in 2 years\n    combined_age_in_2_years = combined_age_now + 2 * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    not_attempted = 1\n    rex_score = 66\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - not_attempted - correct\n        score = (correct * points_correct) + (incorrect * points_incorrect)\n        if score == rex_score:\n            return correct\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answers = total_questions * 0.60\n    wrong_answers = total_questions - correct_answers\n    \n    # Let x be the number of correctly answered questions.\n    # Then the number of wrong answers would be correct_answers - x,\n    # and unanswered questions would be wrong_answers.\n    \n    # The total score is calculated as follows:\n    # 5 * x (correct) - 2 * (correct_answers - x) (wrong) + 1 * wrong_answers (unanswered)\n    # The equation will be: 5x - 2(correct_answers - x) + wrong_answers = 264\n    # Simplifying the equation gives:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(5*x - 2*(correct_answers - x) + wrong_answers, 264)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # According to the Pigeonhole principle, to ensure at least one container has 2 apples,\n    # we distribute one apple to each container and then add one more apple to any container.\n    min_apples = containers + 1\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**(-2022)  # Move the decimal 2018 places to the left and 4 more for the digits \"1058\"\n    denominator = 92 * 10**(-2023)  # Move the decimal 2019 places to the left and 2 more for the digits \"92\"\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n    \n    butter_needed = (butter_used * desired_cookies) / cookies_made\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Initial amount relationship\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Amount after receiving $72 each\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    # Dedra's initial amount\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initialize variables\n    current_number = 1\n    digits = ''\n\n    # Generate the digits until the length reaches 1000\n    while len(digits) < 1000:\n        digits += str(current_number)\n        current_number += 1\n\n    # Get the 1000th digit which is the unit digit of N\n    unit_digit = digits[999]\n\n    return int(unit_digit)\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # Define the variable for the box\n    square = symbols('square')\n    \n    # Define the equation\n    equation = Eq(3 * square - 2, 19)\n    \n    # Solve the equation\n    solution = solve(equation, square)\n    \n    # Extract the solution\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the Inclusion-Exclusion Principle\n    total = A + C + E - AC - AE - CE + ACE\n\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    total_pupils = 18\n    pupils_to_seat = 3\n    \n    # Calculate the number of ways to seat 3 pupils out of 18 in a row (permutation)\n    ans = factorial(total_pupils) // factorial(total_pupils - pupils_to_seat)\n\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months = debt / monthly_salary\n    return months\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variables\n    jack = 4\n    jason = symbols('jason')\n    bruce = jason\n    willie = jason\n\n    # Jason is older than Jack so jason > jack\n\n    # Defining the equation based on the given information\n    total_age = Eq(jack + jason + bruce + willie, 19)\n\n    # Solving the equation for Jason's age\n    solutions = solve((total_age), (jason))\n\n    # Since Jason is older than Jack, we take the solution that is greater than 4\n    jason_age = [age for age in solutions if age > 4]\n\n    return jason_age[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let x represent the number of friends Andy has\n    # Let e represent the total number of erasers Andy has\n\n    # If each friend received 5 erasers, he would have 3 erasers left:\n    # e = 5x + 3\n\n    # If each of them received 6 erasers, he would be short of 2 erasers:\n    # e = 6x - 2\n\n    # Since both expressions are equal to e, we can equate them:\n    # 5x + 3 = 6x - 2\n    # By rearranging the equation, we get:\n    # x = 5\n\n    # By substituting x back into any of the two equations, we solve for e:\n    # e = 5x + 3\n    # e = 5*5 + 3\n    e = 5*5 + 3\n\n    return e\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n    \n    # The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n    \n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n    \n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the age of the youngest child\n    youngest = symbols('youngest')\n\n    # Since the children are born at regular intervals, the difference in age\n    # between each child is 15 months. Therefore, the oldest would be 15*8 months\n    # older than the youngest (since there are 9 children, and the difference\n    # between the first and the last is 8 intervals).\n    oldest = youngest + 15 * 8\n\n    # The oldest is now six times as old as the youngest.\n    # This gives us the equation: oldest = 6 * youngest\n    equation = Eq(oldest, 6 * youngest)\n\n    # Solve the equation for the unknown 'youngest'\n    solution = solve(equation, youngest)\n\n    return solution[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Inserting brackets will follow the order of operations BODMAS (Brackets, Orders, Division and Multiplication, Addition and Subtraction).\n    # To minimize the expression, we want to minimize the multiplication and maximize the subtraction.\n    # We can group the \"+15-6\" part to utilize the subtraction first before any addition, and then do the multiplication last.\n    # Here's one of the possible ways to insert brackets to get the smallest result: (15+5)*(5+(15-6)+7) => (20)*(21)\n    # This will first add 15+5 and then multiply by the sum of the other numbers in brackets.\n\n    result = (15+5)*(5+(15-6)+7)\n    return result\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum((i**2 + (i+1)**2) / (i * (i+1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        orig_num = str(i)\n        new_num = orig_num[3] + orig_num[1:4]\n        if int(new_num) - i == 5877:\n            return i\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let 'j' be the number of sweets Jiaxiang originally has.\n    # Then, Cayden has 'j + 5' sweets.\n    # After Cayden gives Jiaxiang 10 sweets, Cayden has 'j + 5 - 10 = j - 5' sweets.\n    # Jiaxiang now has 'j + 10' sweets.\n    # The difference in number of sweets they have now is 'j + 10' - (j - 5) = 15.\n\n    # No need for calculations, the answer is given by the relation described above.\n    return 15\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    # Find the first multiple of 11 greater than or equal to 50\n    first_multiple = 55  # (50 // 11) * 11 if 50 is not a multiple of 11\n    # Find the last multiple of 11 less than or equal to 150\n    last_multiple = (150 // 11) * 11\n    # Calculate the difference between the first and last multiples\n    difference = last_multiple - first_multiple\n    # Calculate the number of multiples by dividing the difference by 11\n    # And add 1 because we are including both the first and last multiples\n    num_multiples = (difference // 11) + 1\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    part1 = 75 * 0.29\n    part2 = (75 * 74) / 100\n    part3 = 0.3 / (2 / 15)\n    \n    ans = part1 + part2 - part3\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Let x be the score Mary obtained.\n    # The sum of the scores of the other 5 pupils is 5 * 72.\n    sum_of_other_pupils = 5 * 72\n\n    # The new average after including Mary's score is 75 for 6 pupils.\n    new_average = 75\n    total_pupils = 6\n\n    # The total sum of scores including Mary is 6 * 75.\n    total_sum_with_mary = total_pupils * new_average\n\n    # Mary's score is the difference between the total sum with her and without her.\n    marys_score = total_sum_with_mary - sum_of_other_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # The length of the train in meters\n    bridge_length = 220  # The length of the bridge in meters\n    train_speed = 60  # The speed of the train in meters/second\n\n    # The total distance that the train needs to cover to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is total distance divided by the speed of the train\n    time_taken = total_distance / train_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    greatest_number = 0\n    for i in range(100, 1000):\n        if i % 9 == 0 and i % 2 != 0:\n            tens_digit = (i // 10) % 10\n            if tens_digit % 4 == 0:\n                greatest_number = max(greatest_number, i)\n    return greatest_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each student must get at least one doughnut, let's first give one doughnut to each student.\n    remaining_doughnuts = 11 - 4\n    \n    # Now we need to distribute remaining 7 doughnuts among 4 students, which is a problem of combinations with repetition.\n    # Using the formula for combinations with repetition (also known as stars and bars):\n    # Number of ways to distribute n identical items to r distinct groups is C(n+r-1, r-1)\n    \n    ways = comb(remaining_doughnuts + 4 - 1, 4 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n    return correct_time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # If she draws 3 red, 7 green, 6 blue marbles, she still doesn't have\n    # 4 different colored marbles. So she must draw one more marble.\n    # In the worst case, that next marble can be an orange one.\n    # Therefore, she must draw 3 (red) + 7 (green) + 6 (blue) + 1 (at least one orange) = 17 marbles.\n    ans = 3 + 7 + 6 + 1\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # The maximum value that Angela can get back in change is the value of the five-pound note\n    # minus the smallest coin she could have received, which is 5 pence, since all coins are multiples of 5 pence.\n    max_change = 500 - 5\n\n    # We have to find the value of the combination of 5 different coins whose\n    # values are multiples of 5 and sum up to a value of at most max_change.\n    # The valid coins in UK currency that are multiples of 5 pence are:\n    # 5p, 10p, 20p, 50p, 100p (1 pound), and 200p (2 pounds).\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Iterate through all possible combinations of 5 different coins\n    for i in range(len(coins)):\n        for j in range(i+1, len(coins)):\n            for k in range(j+1, len(coins)):\n                for l in range(k+1, len(coins)):\n                    for m in range(l+1, len(coins)):\n                        # Calculate the total change for this combination\n                        total_change = coins[i] + coins[j] + coins[k] + coins[l] + coins[m]\n                        # If the total change is less than or equal to the max_change,\n                        # we can calculate how much Angela spent\n                        if total_change <= max_change:\n                            # The amount spent is the value of the note minus the change received\n                            amount_spent = 500 - total_change\n                            return amount_spent\n    return None\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4  # Midday temperature in degrees Celsius\n    drop = 11  # Temperature drop by midnight in degrees Celsius\n    midnight_temp = midday_temp - drop  # Temperature at midnight in degrees Celsius\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.80\n    spent_percentage_2 = 0.75\n\n    for ten_notes in range(total_notes + 1):\n        two_notes = total_notes - ten_notes\n        spent_10_notes = ten_notes * spent_percentage_10\n        spent_2_notes = two_notes * spent_percentage_2\n        remaining_10_notes = ten_notes - spent_10_notes\n        remaining_2_notes = two_notes - spent_2_notes\n        if remaining_10_notes == 3 * remaining_2_notes:\n            cost_of_fan = spent_10_notes * 10 + spent_2_notes * 2\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    # 5 hives produce 50 kg of honey\n    # 1 hive produces 10 kg of honey\n    honey_per_hive = 50 / 5\n\n    # Desired amount of honey is 90 kg\n    # Calculate how many hives are needed to produce 90 kg\n    required_hives = 90 / honey_per_hive\n\n    # Calculate how many more hives are needed in addition to the existing 5 hives\n    additional_hives = required_hives - 5\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of erasers Ali and Kumar originally have\n    ali, kumar = symbols('ali kumar')\n    \n    # Equation based on the initial ratio\n    equation1 = Eq(ali / kumar, 7 / 5)\n    \n    # Equation after Ali gives Kumar 10 erasers\n    equation2 = Eq((ali - 10) / (kumar + 10), 1 / 5)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n    \n    # Calculating the total number of erasers\n    total_erasers = solutions[ali] + solutions[kumar]\n    \n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4  # problems solved by the 1st student\n    difference = 3  # common difference between the number of problems solved by consecutive students\n\n    n = 23  # the nth student\n    nth_term = first_term + (n - 1) * difference  # nth_term of an arithmetic sequence formula\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    # Final horizontal distance east-west\n    horizontal = 15 - 9  # 6 km to the east\n    # Final vertical distance north\n    vertical = 3 + 5  # 8 km to the north\n    # Use Pythagorean theorem to find the shortest distance\n    shortest_distance = (horizontal**2 + vertical**2)**0.5\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    # Extract the cost of one banana from the solutions\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = 8 * 60 + 20\n    activity_time = 45\n    break_time = 20\n    time_per_activity_with_break = activity_time + break_time\n\n    number_of_activities = (total_time_minutes + break_time) // time_per_activity_with_break\n\n    return number_of_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote the weights of Adam, Ben, and Carl as A, B, and C respectively.\n\n    # From the problem statement, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n\n    # We need to find A + B + C, which is the sum of the weights of Adam, Ben and Carl.\n\n    # Let's sum all the pairs:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 92\n\n    # This sum counts each person's weight twice, so dividing by 2 will give us the total actual weight\n    total_weight_twice = 102 + 97 + 92\n    actual_total_weight = total_weight_twice / 2\n\n    return actual_total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] in ['5', '8'] and perm != ('5', '0', '3', '8'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of days B takes to finish the work\n    b = symbols('b')\n    \n    # Since A's efficiency is twice that of B, A takes b/2 days to finish the work\n    # A finishes the job in 5 days less than B\n    # So, we have the equation: b/2 = b - 5\n    equation = Eq(b / 2, b - 5)\n    \n    # Solve for b\n    days_for_b = solve(equation, b)\n    \n    return days_for_b[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    alternate_sum = sum(digits[::2]) - sum(digits[1::2])\n    is_divisible = alternate_sum % 11 == 0\n    remainder = alternate_sum % 11\n    \n    correct_answer = 0 if is_divisible else remainder\n    return correct_answer\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    \n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_cm = 78     # final length in centimeters\n    final_length_m = final_length_cm / 100  # convert final length to meters\n\n    length_melted_m = initial_length_m - final_length_m  # length melted in meters\n\n    # convert melted length to centimeters\n    length_melted_cm = length_melted_m * 100  \n\n    return length_melted_cm\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    return 650 * 0.40\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    ways = [0] * 10\n    ways[0] = 1  # 0 steps, 1 way to stand still\n    ways[1] = 1  # 1 step, 1 way to climb\n\n    for i in range(2, 10):\n        ways[i] = ways[i - 1] \n        if i - 4 >= 0:\n            ways[i] += ways[i - 4]\n\n    return ways[9]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_min = 17\n    total_minutes = 36\n    planes_in_36_min = (planes_in_12_min / 12) * total_minutes\n    return planes_in_36_min\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n\n    # At the first stop, two-fifths get off and 7 get on\n    first_stop_off = (2/5) * initial_passengers\n    passengers_after_first_stop = initial_passengers - first_stop_off + 7\n\n    # At the next stop, a quarter get off and 13 get on\n    second_stop_off = (1/4) * passengers_after_first_stop\n    passengers_after_second_stop = passengers_after_first_stop - second_stop_off + 13\n\n    return int(passengers_after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the sum of integers from 1 to 20 (because 1 to 20 when halved corresponds to 0.5 to 10)\n    n = 20\n    sum_of_integers = (n * (n + 1)) // 2\n    # Calculate the square of the sum of these integers to find the cube sum\n    sum_of_cubes = (sum_of_integers ** 2) // 4  # divide by 4 to account for the halved values when cubed\n    return sum_of_cubes\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    rounding_error = 5 / 2  # since it is rounded to the nearest £5, the error is half of that\n    actual_minimum_price = estimated_price - rounding_error\n    return actual_minimum_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    sum_ages_now = 22\n    sum_ages_future = 40\n    years_difference = sum_ages_future - sum_ages_now\n    return years_difference\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n\n    # Since there are 5 toys counting from the rabbit to the elephant and the elephant is on the right side of the rabbit,\n    # we can calculate the rabbit's position from the left\n    rabbit_position_from_left = elephant_position_from_left - 5\n\n    # Now we calculate the rabbit's position from the right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy completes the book in 6 days\n    nancy_rate = 1 / 6\n    # Together they complete the book in 4 days\n    combined_rate = 1 / 4\n    # Tim's rate of completing the book\n    tim_rate = combined_rate - nancy_rate\n    # Time taken for Tim to complete the book\n    tim_time = 1 / tim_rate\n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 3 + 1  # Ewan plus his 3 sisters\n    biscuits_per_person = total_biscuits / people_count\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass to grams\n    total_mass = 172000  # 172 kg in grams\n\n    # Packets mass in grams\n    p_mass = 300\n    q_mass = 400\n    r_mass = 500\n\n    # Ratio of packets\n    p_ratio = 7\n    q_ratio = 3\n    r_ratio = 2\n\n    # Calculate the total parts in the ratio\n    total_parts = p_ratio + q_ratio + r_ratio\n\n    # Calculate the mass per part\n    mass_per_part = total_mass / total_parts\n\n    # Calculate the number of packets for each ingredient\n    num_packets_p = mass_per_part / p_mass * p_ratio\n    num_packets_q = mass_per_part / q_mass * q_ratio\n    num_packets_r = mass_per_part / r_mass * r_ratio\n\n    # Calculate the total number of packets\n    total_packets = num_packets_p + num_packets_q + num_packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # Including 'a'\n    sum_numbers = mean_value * total_numbers\n    sum_given_numbers = sum(numbers)\n    a = sum_numbers - sum_given_numbers\n    \n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    # convert all times to seconds for common comparison\n    light1_interval = 60  # 1 minute in seconds\n    light2_interval = 90  # 1.5 minutes in seconds\n    light3_min_interval = 30  # 30 seconds as the minimum interval for third traffic light\n\n    # find the least common multiple of the first two lights intervals\n    lcm_first_two = lcm(light1_interval, light2_interval)\n\n    # third light should change at a multiple of its minimum interval and divide the LCM evenly.\n    # we start from the minimum and increment by this minimum until we find one that is a factor of the LCM\n    \n\n    shortest_possible_time = lcm_first_two  # initialize with LCM as the maximum possible time\n    for interval in range(light3_min_interval, lcm_first_two + 1, light3_min_interval):\n        if lcm_first_two % interval == 0:\n            shortest_possible_time = interval\n            break\n\n    # convert seconds back to minutes, but as the question is about seconds we will leave it as seconds.\n    ans = shortest_possible_time\n    return ans\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, centimeters\n    pink_ribbon_cm = 2.5 * 100  # convert meters to centimeters\n    blue_ribbon_cm = 220\n    orange_ribbon_cm = 30.5\n    \n    # Compare the lengths\n    longest_ribbon_length = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n    \n    # Identify which ribbon is the longest\n    if longest_ribbon_length == pink_ribbon_cm:\n        return \"pink\"\n    elif longest_ribbon_length == blue_ribbon_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    bake_time = 15\n    wash_time = 5\n    eat_time = 15\n\n    total_time = prep_time + bake_time + wash_time + eat_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_percentage = 50\n\n    original_price = sale_price / (1 - discount_percentage / 100.0)\n\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    average_people_per_car = total_people / total_cars\n    return average_people_per_car\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # km/h\n    rachel_time = 1.5  # hours\n    \n    # Rachel has traveled for 1.5 hours when Eleanor reaches City G\n    # Distance Rachel has covered in 1.5 hours:\n    rachel_distance = rachel_speed * rachel_time\n    \n    # When Eleanor reaches City G, Rachel is 39 km away from City F\n    # Distance to City F from Eleanor's starting point when Eleanor reaches City G:\n    distance_to_F_from_G = rachel_distance + 39\n    \n    # Eleanor's speed (E) (since she took 4 hours to travel from F to G)\n    eleanor_travel_time = 4  # hours\n    eleanor_speed = distance_to_F_from_G / eleanor_travel_time  # km/h\n    \n    # The total distance between City F and City G (Eleanor's speed * Eleanor's travel time)\n    total_distance = eleanor_speed * eleanor_travel_time\n\n    return total_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    res = 4 * (1 + 11 + 111 + 1111)\n    return res\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percentage_of_boys = (boys / total_students) * 100\n    return percentage_of_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1  # Since the 8th shelf from the front is also the 3rd from the back (10 - 8 + 1)\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_points_needed = 90 * 5\n    max_score = 100\n    \n    # Start from the maximum possible score for the top student\n    # and reduce until we find a valid combination\n    for top_student_score in range(max_score, 0, -1):\n        for second_student_score in range(top_student_score-1, 0, -1):\n            for third_student_score in range(second_student_score-1, 0, -1):\n                for fourth_student_score in range(third_student_score-1, 0, -1):\n                    for fifth_student_score in range(fourth_student_score-1, 0, -1):\n                        if (top_student_score + second_student_score + third_student_score + \\\n                            fourth_student_score + fifth_student_score == total_points_needed):\n                            # Once we find a valid combination, return the lowest score\n                            return fifth_student_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the lengths of Rope A, B and C in cm.\n    a, b, c = symbols('a b c')\n    \n    # Set up equations based on the problem statement\n    eq1 = Eq(a, 3 * b)         # Ribbon A is 3 times as long as Rope B.\n    eq2 = Eq(c, b + 56)        # Rope C is 56 cm longer than Rope B.\n    eq3 = Eq(a, c + 130)       # Rope A is 130 cm (1 m 30 cm) longer than Rope C.\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2, eq3), (a, b, c))\n    \n    # Calculate the total length\n    total_length = solution[a] + solution[b] + solution[c]\n    \n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    ans = (2 * max(numbers)) - (3 * min(numbers))\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from math import factorial\n\n    # Calculate total ways to choose 3 letters out of 5\n    total_ways = factorial(5) / (factorial(3) * factorial(5 - 3))\n\n    # Calculate ways to choose 1 letter out of the remaining 3 (C, D, E), since A and B are already chosen\n    ways_to_choose_1_out_of_3 = 3\n\n    # Calculate probability\n    probability = ways_to_choose_1_out_of_3 / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    male_students = 0.16 * male_members\n    female_students = 0.10 * female_members\n    total_students = male_students + female_students\n    total_members = male_members + female_members\n    student_percentage = (total_students / total_members) * 100\n\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    # Calculate the total amount of fruit juice in each punch bowl before mixing\n    fruit_juice_first = 200 * 0.35\n    fruit_juice_second = 300 * 0.50\n\n    # Calculate the total volume of the mixture\n    total_volume_mixture = 200 + 300\n\n    # Calculate the total amount of fruit juice in the mixture\n    total_fruit_juice_mixture = fruit_juice_first + fruit_juice_second\n\n    # Calculate the percentage concentration of the mixture\n    concentration_mixture = (total_fruit_juice_mixture / total_volume_mixture) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Since the ratios are equivalent, we can set up the proportion x/48 = 3/4\n    # Then solve for x.\n    x = (3 * 48) / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples\n    # and John will have (john + x) apples\n    # We want (amy - x) to be 4 more than (john + x), so:\n    # (amy - x) = (john + x) + 4\n    # 37 - x = 15 + x + 4\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    # This is an arithmetic sequence with a first term (a1) of 1, common difference (d) of 2, and last term (an) of 159.\n    a1 = 1\n    an = 159\n    d = 2\n\n    # n is the number of terms, calculated from the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n - 1) * d\n    # Rearranging the formula to solve for n:\n    n = ((an - a1) // d) + 1\n\n    # The sum (S) of n terms in an arithmetic sequence can be found using the formula:\n    # S = n/2 * (a1 + an)\n    S = n * (a1 + an) // 2\n\n    return S\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more_than_vegetable = Fraction(chicken_more_than_vegetable, chicken_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    fruit_more_than_vegetable = fruit_pies - vegetable_pies\n    fraction_vegetable_less_than_fruit = Fraction(vegetable_pies, fruit_more_than_vegetable)\n\n    ans = (fraction_chicken_more_than_vegetable, fraction_vegetable_less_than_fruit)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n\n    markers_per_bag = 5\n    number_of_bags = markers_left // markers_per_bag\n\n    return number_of_bags\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let x be the total number of papers\n    # Let y be the original number of papers she plans to mark per hour\n    # After working for one hour, x-y papers are left\n\n    # As per the information given\n    # x / y = 5 (original plan: 5 hours at y papers per hour)\n    # (x - y) / (y + 6) = 4 (new rate: 6 more papers per hour for the remaining 4 hours)\n    # (x - y) / (y + 10) = 3 (even faster rate: 10 more papers per hour for the remaining 3 hours)\n\n    # From these three equations, we have:\n    # x = 5y\n    # x - y = 4(y + 6)\n    # x - y = 3(y + 10)\n\n    # Now we only need to solve these equations\n\n    # 5y = 4(y + 6)\n    # 5y = 3(y + 10)\n\n    # Let's solve for y first using equations 2 and 3\n    # 4y + 24 = 3y + 30\n    # y = 30 - 24 = 6\n\n    # Substitute y back into the first equation to solve for x\n    # x = 5y = 5 * 6 = 30\n\n    # So, the teacher has to mark a total of 30 papers\n    return 30\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as 'ab' is a 2-digit number\n        for b in range(10):  # 'b' can be 0\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    meal_cost = 55\n    tip_percent = 0.20\n    sales_tax_percent = 0.10\n    \n    tip = meal_cost * tip_percent\n    sales_tax = meal_cost * sales_tax_percent\n    total_cost = meal_cost + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    total_sum = greatest_1_digit_even + smallest_2_digit_odd\n    return total_sum\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_made = 3/4\n    total_designs = designs_made / fraction_made\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers\n    for i in range(100, 1000):\n        # Split the number into its individual digits\n        digits = [int(d) for d in str(i)]\n        # Check if the sum of the digits equals 4\n        if sum(digits) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v1 be the final velocity at 2000 m altitude\n    # Let v0 be the initial velocity (0 m/s since the skydiver starts at rest)\n    # Let h1 be the final altitude (2000 m)\n    # Let h0 be the initial altitude (3000 m)\n    # Let g be the acceleration due to gravity (9.8 m/s^2)\n    v1, v0, h1, h0, g = symbols('v1 v0 h1 h0 g')\n    \n    # Use the kinematic equation without air resistance: v1^2 = v0^2 + 2*g*(h1 - h0)\n    # v0 is 0 because the skydiver jumps from rest.\n    kinematic_eq = Eq(v1**2, v0**2 + 2*g*(h1 - h0))\n\n    # Substitute values for v0, h1, h0 and g into the equation\n    substituted_eq = kinematic_eq.subs({v0: 0, h1: 2000, h0: 3000, g: 9.8})\n\n    # Solve for the final velocity v1\n    solutions = solve(substituted_eq, v1)\n\n    # Return the positive root because velocity can't be negative in this context\n    return max(solutions)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since there are 13 numbers and we need a set of 4 consecutive numbers\n    # The worst case scenario would be having 3 consecutive numbers from each set of 4 possible consecutive numbers\n    # There are 10 sets of 4 possible consecutive numbers (1-4, 2-5, ..., 10-13)\n    # Ensuring we have 3 from each set before getting the 4th of any set would require 3 cards per set\n    # Finally, we'll need 1 more card to guarantee the 4th consecutive card in any set\n    ans = (10 * 3) + 1\n    return ans\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the money Caleb had initially as 'm'.\n    # Let's denote the cost of each wristband as 'w'.\n    # Therefore, cost of each cap will be '3w'.\n    m, w = symbols('m w')\n    \n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    # => 2/5 * m = 4 * (3w) + 6 * w\n    eq1 = Eq((2/5) * m, 4 * (3 * w) + 6 * w)\n    \n    # Caleb has 3/5 * m money left after the first spending\n    # He then spends 1/3 of the remaining money on more caps\n    # => 1/3 * (3/5 * m) = k * (3w), where k is the number of additional caps\n    k = symbols('k')\n    eq2 = Eq((1/3) * (3/5) * m, k * (3 * w))\n    \n    # Solve the system of equations to find the value of 'k' and 'w'\n    solution = solve((eq1, eq2), (m, w, k))\n    \n    # Caleb bought 4 caps initially and 'k' more caps later.\n    total_caps = 4 + solution[k]  # Total number of caps\n    \n    return total_caps\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Since A=3, C=1, G=7 and A is the first digit, we know:\n    # The number is divisible by 1 (which is always true).\n    # The number formed by AB is divisible by 2, so B must be even.\n    # The number formed by ABC is divisible by 3, and since 3 + 1 is already 4, \n    # B must be 5 or 8 to make the sum of the digits divisible by 3.\n    # The whole number is divisible by 10, so J must be 0.\n    \n    # Filter out the defined numbers and prepare the remaining list for permutation.\n    remaining_numbers = [0, 2, 4, 5, 6, 8, 9]\n    \n    # find the correct B because B must be even and {A, B, C} divisible by 3\n    candidate_B = [b for b in remaining_numbers if b % 2 == 0 and (3 + b + 1) % 3 == 0]\n    \n    # Remaining numbers without the correct B\n    remaining_numbers = [x for x in remaining_numbers if x not in candidate_B]\n    \n    # Convert the remaining numbers into a string, since we will be matching to string indices.\n    remaining_numbers_str = ''.join(map(str, remaining_numbers))\n    \n    # Find all permutations of the remaining numbers.\n    for p in permutations(remaining_numbers_str):\n        B, D, E, F, H, I, J = int(candidate_B[0]), int(p[0]), int(p[1]), int(p[2]), int(p[3]), int(p[4]), int(p[5])\n        # Now we stitch together the number based on divisibility conditions\n        if (300 + 10 * B + C) % 3 == 0 and (4000 + 100 * D) % 4 == 0 and (50000 + 1000 * E) % 5 == 0 \\\n           and (600000 + 10000 * F) % 6 == 0 and (7000000 + 100000 * G) % 7 == 0 and (80000000 + 1000000 * H) % 8 == 0 \\\n           and (900000000 + 10000000 * I) % 9 == 0 and (J == 0):\n            # If all conditions are met, return the digits\n            ans = {'A': 3, 'B': B, 'C': 1, 'D': D, 'E': E, 'F': F, 'G': 7, 'H': H, 'I': I, 'J': J}\n            return ans\n\n# Get the answer\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    ashley_age_3_years_ago = ashley_age - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    num_pages = 89\n    count = 0\n    last_page = 0\n\n    for i in range(1, num_pages + 1):\n        if count % 3 == 2:\n            count += 1\n        last_page += 1\n        count += 1\n\n    return last_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    # Define the number of adult and child tickets sold as variables\n    for adult_tickets in range(20):\n        child_tickets = 19 - adult_tickets\n        \n        # Calculate the total amount from adult and child tickets\n        total_amount = (adult_tickets * 5) + (child_tickets * 3)\n        \n        # Check if it matches the desired amount\n        if total_amount == 75:\n            return adult_tickets\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Find the number of multiples of 3 from 1 to 600\n    num_multiples_of_3 = 600 // 3\n    # Find the number of multiples of 5 from 1 to 600\n    num_multiples_of_5 = 600 // 5\n    # Find the number of multiples of 15 (which are the common multiples of both 3 and 5) from 1 to 600\n    num_multiples_of_15 = 600 // 15\n\n    # Apply the inclusion-exclusion principle\n    ans = num_multiples_of_3 + num_multiples_of_5 - num_multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    age_difference = 60 - 20\n    grandmas_current_age = 10 + age_difference\n    return grandmas_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in class B as 'b'\n    # Since class A has twice as many students, let's represent class A students as '2b'\n    # Let x be the total number of candies Miss Jenny has\n\n    b, x = symbols('b x')\n\n    # If each student in class A gets 4 candies and 20 more are needed\n    equation1 = Eq(4 * 2 * b + 20, x)\n\n    # If each student in class B can get 6 candies and there are 16 candies left\n    equation2 = Eq(6 * b, x - 16)\n\n    # Solving these two equations simultaneously will give us the values of b and x\n    solutions = solve((equation1, equation2), (b, x))\n\n    # We only need the total number of candies, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    return 4\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # sheila takes out all blue, orange, and one yellow without getting 4 of the same color\n    # 5 (blue) + 4 (orange) + 1 (yellow) = 10\n    # sheila must take out one more to guarantee 4 balls of the same color\n    ans = 10 + 1\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # ducks and geese have 2 legs each, lambs have 4 legs\n    total_legs_ducks = 4 * 2\n    total_legs_geese = 2 * 2\n    total_legs_animals = 36\n    \n    # subtract the legs of ducks and geese from the total\n    total_legs_lambs = total_legs_animals - total_legs_ducks - total_legs_geese\n    \n    # since each lamb has 4 legs, divide the total legs by 4 to find the number of lambs\n    number_of_lambs = total_legs_lambs / 4\n\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(sorted([str(digit) for digit in digits], reverse=True)))\n    smallest_num = int(''.join(sorted([str(digit) for digit in digits])))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # First layer has 1^2 = 1 box\n    layer1 = 1**2\n    # Second layer has 2^2 = 4 boxes\n    layer2 = 2**2\n    # Third layer has 3^2 = 9 boxes\n    layer3 = 3**2\n\n    # Total number of boxes is the sum of the three layers\n    total_boxes = layer1 + layer2 + layer3\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    change = 5 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 - good_copies_needed_A\n    \n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n    \n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    value = (1.2 + 1.23 + 1)\n    ans = value * (value) - value * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    son_time = symbols('son_time')\n\n    # If farmer works alone, it takes him 24 hours.\n    # If son helps for 6 hours, together they finish in 16 hours.\n    # Set up the equation based on work done: (1/farmer_time + 1/son_time) * time_worked_together = 1 job done\n    farmer_time = 24\n    time_worked_together = 16\n    son_hours_worked = 6\n\n    # The farmer's work rate is 1/farmer_time\n    # The son's work rate is 1/son_time\n    # (1/farmer_time * time_worked_together) + (1/son_time * son_hours_worked) = 1 job done\n    equation = Eq((1 / farmer_time * time_worked_together) + (1 / son_time * son_hours_worked), 1)\n\n    solutions = solve(equation, son_time)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    january_days = 31\n\n    total_smiles_in_january = average_smiles_per_day * january_days\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    from math import sqrt\n    num_students = 40\n    students_per_side = sqrt(num_students)\n    return int(students_per_side)\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate total mass of sugar from each solution\n    sugar_annie = 300 * 0.15\n    sugar_becky = 400 * 0.25\n    sugar_carol = 300 * 0.35\n\n    # Calculate total mass of the mixed solution\n    total_mass = 300 + 400 + 300\n\n    # Calculate total mass of sugar in the mixed solution\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n\n    # Calculate the concentration of sugar in the mixed solution\n    concentration = total_sugar / total_mass\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_5s = total_rolls * probability_of_5\n\n    return expected_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    largest_num = 999  # Largest three-digit number.\n    \n    while largest_num % 36 != 0:\n        largest_num -= 1\n    \n    return largest_num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    # Total permutations without restrictions\n    total_permutations = factorial(5)\n    \n    # Permutations where Hugh is between Louise and Richard\n    # Treat Louise, Hugh, and Richard as a block, with two permutations (Louise-Hugh-Richard and Richard-Hugh-Louise)\n    # Two remaining children can be in 2! ways, and the block itself can be in 3! ways\n    hugh_between_permutations = 2 * factorial(2) * factorial(3)\n    \n    # Subtract permutations where Hugh is unhappy from the total permutations\n    valid_permutations = total_permutations - hugh_between_permutations\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_matches = 10 / (1 - (2/5) - (7/20))\n    won_matches = (2/5) * total_matches\n    draw_matches = (7/20) * total_matches\n    points = (won_matches * 3) + (draw_matches * 1)\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    incorrect_partial_product = quotient * remainder\n    incorrect_total = incorrect_partial_product + divisor\n\n    # Find the correct dividend using the correct formula quotient*divisor + remainder\n    correct_dividend = quotient * divisor + remainder\n    \n    return correct_dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_chocolates_cost = 4 * 75  # Total cost of chocolate bars in pence\n    total_pens_cost = 3 * 95        # Total cost of pens in pence\n    total_cost = total_chocolates_cost + total_pens_cost  # Total cost in pence\n\n    note_value = 1000  # £10 note in pence\n\n    change = note_value - total_cost  # Change in pence\n\n    return change / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    total_mean = 555\n    difference_in_means = 296\n    \n    mean_of_last_5 = (total_numbers * total_mean - 3 * (total_mean - difference_in_means)) / 5\n    return mean_of_last_5\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    ans = (end - start) / step + 1\n    return int(ans)\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    timmy = symbols('timmy')\n    vicky_eq = Eq(99, 6 * timmy - 3)\n    timmy_stickers = solve(vicky_eq, timmy)[0]\n    kevin_stickers = timmy_stickers + 32\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    days_needed_with_five_people = 15\n    days_needed_with_more_people = 5\n    number_of_people_initially = 5\n    \n    # Calculate the work rate per day for the initial group\n    work_rate_initial = number_of_people_initially / days_needed_with_five_people\n    \n    # Calculate the work rate per day required to finish the task in 5 days\n    work_rate_required = number_of_people_initially / days_needed_with_more_people\n    \n    # Calculate the number of additional people required to meet the required work rate\n    additional_people = work_rate_required - work_rate_initial\n    \n    # Since the work rates are proportional to the number of people, calculate the total people needed\n    total_people_needed = number_of_people_initially * (work_rate_required / work_rate_initial)\n    \n    # Calculate the additional number of people needed\n    additional_people_needed = total_people_needed - number_of_people_initially\n    \n    return int(additional_people_needed)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between_pip_and_bud = 5\n\n    bud_position_from_start = pip_position + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_start + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(7*rasidah - 3*5*(3 / 5)*rasidah, 2*6*(chai_seng - 6 / 7*chai_seng))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, mother, years_ago = symbols('isaac mother years_ago')\n\n    # Current ages\n    isaac_age_now = 53\n    mother_age_now = 81\n\n    # Ages years ago\n    isaac_age_then = isaac_age_now - years_ago\n    mother_age_then = mother_age_now - years_ago\n\n    # Equation based on the condition\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n\n    # Solve for years_ago\n    ans = solve(equation, years_ago)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be written as:\n    # grandma's age ≡ 2 (mod 4)\n    # grandma's age ≡ 3 (mod 5)\n    # grandma's age ≡ 6 (mod 9)\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age = solve_congruence(*congruences)\n\n    return grandma_age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_factor = 2.2\n    kilograms = pounds / conversion_factor\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    \n    # Create all permutations of 1, 2, 3 without repetition\n    perms = list(permutations([1, 2, 3], 3))\n    \n    # Count the number of permutations, which will be the same as the number of three-digit numbers\n    ans = len(perms)\n    \n    return ans\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 21))\n    count = 0\n    for prime in primes:\n        if isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_diffs = [j - i for i, j in zip(differences[:-1], differences[1:])]\n    next_diff = differences[-1] + second_diffs[-1]\n    next_term = 50 + next_diff\n    return next_term\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from itertools import permutations\n\ndef solution():\n    digits = '12345'\n    count = 0\n    for perm in permutations(digits):\n        # Check if the last digit is even\n        if int(perm[-1]) % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    smallest_number = 96  # Initialize with a number larger than any 2-digit number\n    \n    # The sum of digits for a 2-digit number xy is x + y.\n    # Since x + y = 15, the smallest such number would minimize x and maximize y.\n    for x in range(1, 10):  # Loop from 1 to 9 because x cannot be 0 in a 2-digit number\n        for y in range(0, 10):  # Loop from 0 to 9 for y\n            if x + y == 15:  # Check if their sum is 15\n                smallest_number = min(smallest_number, int(f\"{x}{y}\"))  # Update smallest_number if a smaller one is found\n                break  # Break to skip unnecessary y values, as we're looking for the smallest x\n    \n    return smallest_number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50\n    total_weight_final = 9 * 52\n    weight_of_extra_apple = total_weight_final - total_weight_initial\n    \n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Since a light switch is toggled each time a number's divisor comes up,\n    # light will remain on if it has an odd number of divisors, \n    # which happens only for perfect squares (since divisors come in pairs).\n    # Therefore, we only need to count the number of perfect squares up to 250\n    \n    # Find all perfect squares up to 250\n    perfect_squares = [i**2 for i in range(1, 16+1) if i**2 <= 250]\n    \n    # The number of remaining on lights is equal to the number of perfect squares\n    ans = len(perfect_squares)\n    \n    return ans\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages in the document\n    x = symbols('x')\n\n    # Original speed: 50 pages per minute\n    # Original time: x / 50 minutes\n    original_time = x / 50\n\n    # Increased speed: 50 + 20 = 70 pages per minute\n    # New time: x / 70 minutes\n    new_time = x / 70\n\n    # Equation: Original time - New time = 2 minutes\n    equation = Eq(original_time - new_time, 2)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n\n    average = (first_term + last_term) / 2\n    \n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100):  # A practical range to find the least divisor\n        # Calculate the least dividend for the current divisor\n        dividend = divisor * 8 + 7\n        if dividend % divisor == 7:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    initial_date = datetime(2013, 1, 28)  # 28th January 2013\n    day_of_week = initial_date.weekday()  # Monday is 0\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    # Leap year adjustment\n    def is_leap_year(year):\n        \"\"\" Check if the year is a leap year \"\"\"\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n    next_date = initial_date + one_year\n    while next_date.weekday() != day_of_week or is_leap_year(next_date.year):\n        if is_leap_year(next_date.year):\n            next_date += one_day\n        next_date += one_year\n\n    return next_date.year\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time from 6:30am to 7:30am is 1 hour, speed is 6 miles per hour\n    jogging_time = 1  # hours\n    jogging_speed = 6  # mph\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Walking time from 7:30am to 9:30am is 2 hours, speed is 5 miles per hour\n    walking_time = 2  # hours\n    walking_speed = 5  # mph\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    final_amount = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return final_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_day_per_company = total_meters / (companies * days)\n\n    return meters_per_day_per_company\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_rate = 0.10\n    num_members = 30\n\n    discounted_cost = original_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / num_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_price = 0.80  # base price for up to 15 minutes\n    additional_rate = 0.05  # additional rate per minute after 15 minutes\n    total_price = 1.40  # total price paid\n    \n    if total_price == base_price:\n        return 15\n    else:\n        additional_minutes = (total_price - base_price) / additional_rate\n        return 15 + additional_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the variable\n    x = symbols('x')\n    # set up the equation\n    equation = Eq(4 * x - 13, 55)\n    # solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - (a % 10)\n\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara_number = symbols('sara_number')\n    equation = Eq(((sara_number - 4) / 2) + 11, 37)\n    \n    solution = solve(equation, sara_number)\n    return solution[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5\n    last_multiple = 120 // 5 * 5\n    ans = (last_multiple - first_multiple) // 5 + 1\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2 + 1/2\n    quarters_in_one = 4\n    ans = total_quarters * quarters_in_one\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # If Lucy is the 5th from the front, then there are 4 people in front of her.\n    # There are 2 people between Lucy and Eddie.\n    # Eddie is the 9th from the back, so there are 8 people behind him.\n    \n    # To find the total number of people in line, we add:\n    # - number of people in front of Lucy\n    # - Lucy herself\n    # - people between Lucy and Eddie\n    # - Eddie himself\n    # - number of people behind Eddie\n    \n    total_people = 4 + 1 + 2 + 1 + 8\n    return total_people\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n    # James's age on 10th May 1997\n    james_age_1997 = 20\n    \n    # Calculate the year when Gina was 35\n    year_gina_35 = 2005 - (gina_age_2005 - 35)\n    \n    # Calculate the age difference between Gina and James\n    age_difference = 2005 - 1997 + (gina_age_2005 - james_age_1997)\n    \n    # Calculate James's age when Gina was 35\n    james_age_when_gina_35 = 35 - (gina_age_2005 - james_age_1997)\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]  # List of small prime numbers\n    \n    # Iterate through all possible combinations of remainders\n    for r3 in primes:\n        for r5 in primes:\n            for r7 in primes:\n                for r8 in primes:\n                    if len({r3, r5, r7, r8}) == 4:  # Check for distinct remainders\n                        i = 0\n                        # Check all numbers to find the one that satisfies all remainders\n                        while True:\n                            number = 3*5*7*8*i + r3\n                            if number % 3 == r3 and number % 5 == r5 and number % 7 == r7 and number % 8 == r8:\n                                return number\n                            i += 1\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to cm\n    dress_length_cm = 5 * 100 + 8  # Convert meters to cm\n    remainder_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remainder_cm // 9\n    stripe_length_m = stripe_length_cm // 100  # Convert back to meters\n    stripe_length_cm_remainder = stripe_length_cm % 100  # Remainder in cm\n\n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    return (result + 21) / 7 - 4\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # The total number of flowers is the sum of the number of orchids,\n    # tulips, and roses\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n\n    # The ratio of the number of orchids to the number of tulips is 3:5\n    ratio_orchids_tulips = Eq(orchids / tulips, 3 / 5)\n\n    # After selling the flowers, the number of each type left\n    flowers_left = Eq(orchids - 0.40 * orchids +\n                      tulips - tulips / 5 +\n                      roses - 0.25 * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers, ratio_orchids_tulips, flowers_left), (orchids, tulips, roses))\n\n    # Return the number of orchids\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # The smallest number of right-handed girls occurs when all right-handed pupils\n    # except for the girls are right-handed. This means all boys are right-handed.\n    # Hence, boys = total_pupils - girls\n    boys = total_pupils - girls\n\n    # Minimum right-handed girls = total right-handed - boys\n    # Given that not all girls are right-handed, the answer is all right-handed\n    # minus the number of boys, because all of them are considered right-handed\n    # in this worst-case scenario.\n    min_right_handed_girls = right_handed - boys\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    equation1 = Eq(12*books + 9*files, 336)\n    equation2 = Eq(books, files + 14)\n    solutions = solve((equation1, equation2), (books, files))\n    \n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    total = sum(pow(i, 2013, 10) for i in range(1, 10))\n    return total % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Since there are 3 pairs of socks (red, blue, black),\n    # Peter can take out a maximum of 1 sock of each color without getting a pair.\n    # This means, after taking out 3 socks (one of each color), the next sock he takes out\n    # must guarantee a pair.\n    socks_taken_to_guarantee_pair = 3 + 1\n\n    return socks_taken_to_guarantee_pair\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime(2023, 7, 2, 20) # Japan 8pm July 2nd\n    arrival = datetime(2023, 7, 3, 1) # France 1am July 3rd\n    time_difference = timedelta(hours=7) # Japan is 7 hours ahead\n    adjusted_departure = departure - time_difference # Adjust for time difference\n    flight_duration = arrival - adjusted_departure # Calculate flight duration\n    return flight_duration.seconds // 3600 # Return flight duration in hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    diamond_plus_square = solutions[square] + solutions[diamond]\n\n    return diamond_plus_square\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    # Initialize a counter for the digits\n    digit_counter = 0\n\n    # Loop over the range of page numbers\n    for page_number in range(1, 132):  # 131 pages, plus 1 because the range is exclusive\n        # Add the number of digits in the current page_number to the counter\n        digit_counter += len(str(page_number))\n\n    return digit_counter\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    score = 168\n    unattempted = 3\n    attempted = total_questions - unattempted\n\n    # Let correct_answers be x, incorrect_answers be y\n    # Every correct answer gives 4 marks and incorrect answer takes away 1 mark.\n    # We have two equations:\n    # 1. x + y = attempted (total questions attempted)\n    # 2. 4x - y = score (total score)\n\n    # From equation 1, we can express y in terms of x:\n    # y = attempted - x\n\n    # Substitute y in equation 2:\n    # 4x - (attempted - x) = score\n    # 5x - attempted = score\n    # Solving for x (correct_answers):\n    correct_answers = (score + attempted) / 5\n\n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # Equation for total cost of 9 necklaces and 5 earrings\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    # Equation for total cost of 2 necklaces and 3 earrings\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Return the total cost of 1 necklace and 1 earring\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # First digit has 2 options (1, 2) because it can't be 0\n    # Second digit has 3 options (0, 1, 2)\n    ans = 2 * 3\n    return ans\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x.\n    # Then the five consecutive even numbers are x, x+2, x+4, x+6, x+8.\n    # According to the property of arithmetic sequences, their sum is:\n    # S = n/2 * (first_term + last_term) where n is the number of terms.\n    # In this case, S = 200 and n = 5.\n    \n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((5/2) * (x + x + 8), 200)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of sugar solution transferred in grams\n    x = symbols('x')\n\n    # Amount of sugar in container A before transfer\n    sugar_A = 50 * 0.10\n    # Amount of sugar in container B before transfer\n    sugar_B = 30 * 0.20 \n    \n    # Total water in container A after transfer\n    total_water_A = 50 - x \n    # Total water in container B after transfer\n    total_water_B = 30 - x\n    \n    # Sugar concentration in A after transfer\n    concentration_A = (sugar_A - 0.10 * x) / total_water_A\n    # Sugar concentration in B after transfer\n    concentration_B = (sugar_B + 0.10 * x) / total_water_B\n    \n    # Set the concentrations equal and solve for x\n    equation = Eq(concentration_A, concentration_B)\n    solution = solve(equation, x)\n    \n    # Assuming positive transfer\n    ans = [sol for sol in solution if sol > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    result = 0\n    for i in range(98):\n        numerator = factorial(100) // factorial(100 - i)\n        denominator = factorial(97) // factorial(97 - i)\n        result += numerator / denominator\n    return result\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # The initial piece was cut into 5 sections, requiring 4 cuts (since the first section does not require a cut).\n    initial_cuts = 5 - 1\n    initial_time = 8  # 8 minutes for the initial cuts\n\n    # The time per cut is the initial time divided by the initial number of cuts\n    time_per_cut = initial_time / initial_cuts\n\n    # For 6 sections, Katie will need 5 cuts.\n    cuts_needed = 6 - 1\n\n    # The time needed for these cuts is the time per cut times the number of cuts needed\n    time_needed = time_per_cut * cuts_needed\n\n    return time_needed\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    votes_needed_for_majority = (total_votes // 2) + 1\n    \n    additional_votes_needed = votes_needed_for_majority - peter_votes\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Difference equation\n    equation1 = Eq(girls, boys - 7)\n    # Total sum equation\n    equation2 = Eq(boys + girls, 995)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    highest_value_unit = max(numbers, key=lambda x: x % 10)\n    return highest_value_unit\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # Let's denote the number of each type of coin as n\n    # Then, the total value contributed by each type of coin will be:\n    # 5p coins -> 5n\n    # 10p coins -> 10n\n    # 20p coins -> 20n\n    # The total value in the money box is 4.90 pounds, which is 490 pence\n    # The equation will be: 5n + 10n + 20n = 490\n    \n    # We can solve this equation for n\n    total_value_pence = 490\n    total_per_coin_type = 5 + 10 + 20  # Sum of the value of one coin of each type\n    n = total_value_pence / total_per_coin_type  # Calculate the number of coins per type\n\n    # Since we have an equal number of each type of coin, the total number of coins\n    # will be three times n\n    total_coins = 3 * n\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction_amount = 189\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # total days\n    total_sweets = 135  # total sweets eaten in n days\n    a1 = symbols('a1')\n    \n    # The sum of an arithmetic sequence is given by: S = n/2 * (a1 + an)\n    # Here we have total_sweets = n/2 * (a1 + an)\n    # We also know each day he ate 3 more than the day before, so the difference d = 3\n    # an = a1 + (n - 1) * d, the nth term of an arithmetic sequence\n\n    # Let's substitute an in the sum formula with its expression in terms of a1 and d\n    # total_sweets = n/2 * (a1 + (a1 + (n - 1) * d))\n    # total_sweets = n/2 * (2*a1 + (n - 1) * d)\n    # 2*total_sweets = n * (2*a1 + (n - 1) * d)\n    # 2*total_sweets = n * (2*a1 + (9 - 1) * 3)\n    \n    # Now let's find a1 by solving the equation\n    equation = Eq(total_sweets, n/2 * (2*a1 + (n - 1) * 3))\n    solution = solve(equation, a1)\n\n    # Once we have a1, we can find the last day sweets an = a1 + (n - 1) * 3\n    last_day_sweets = solution[a1] + (n - 1) * 3\n    \n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money_cents = 28 * 100  # Convert dollars to cents\n    gift_cost_cents = 20 * 100  # Convert dollars to cents\n    money_left = total_money_cents - gift_cost_cents\n    return money_left\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    digits = 0\n    for i in range(1, 186):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    months_in_year = 12\n\n    pay_rise_amount = annual_salary * (pay_rise_percent / 100)\n    new_annual_salary = annual_salary + pay_rise_amount\n    new_monthly_salary = new_annual_salary / months_in_year\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4*x - 5 * (4 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):          # There are 12 months in a year\n        for day in range(1, 32):        # Maximum number of days in a month is 31\n            if month * 31 + day * 12 == 376:\n                ans = f'{day:02d}{month:02d}'\n                return ans\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return (4.08 * 20 - 1.08 * 20) / 20\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = 119 + 117 - 115 + 113 - 111 + 109 - 107 + 105 - 103 + 101 - 99\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_normal_price = 6  # in pounds\n    protractor_normal_price = 0.30  # in pounds (30p is 0.30 pounds)\n\n    calculator_sale_price = calculator_normal_price - (calculator_normal_price * 0.25)\n    protractor_sale_price = protractor_normal_price * 0.5\n\n    total_cost_calculators = 8 * calculator_sale_price\n    total_cost_protractors = 20 * protractor_sale_price\n\n    total_cost = total_cost_calculators + total_cost_protractors\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_required = 40\n    milk_required = 80\n    tom_flour = 25\n\n    milk_to_use = (milk_required / flour_required) * tom_flour\n\n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let's denote the age of the older elephant this year as x.\n    # According to the problem, when the younger elephant becomes the current age of the older elephant, the older elephant will be 62 years old.\n\n    # The difference in age between the two elephants is (x - 18) years.\n    # When the younger elephant is x years old, the older elephant will be x + (x - 18) years old.\n\n    # Set up the equation: x + (x - 18) = 62\n    # Solve for x.\n\n    x = symbols('x')\n    equation = Eq(x + (x - 18), 62)\n    solution = solve(equation, x)\n\n    # The first element of the solution list is the age of the older elephant this year.\n    return solution[0]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # 27 oxen can finish in 6 weeks\n    # This means 27 oxen * 6 weeks = 162 ox- weeks to finish the grass\n    total_ox_weeks = 27 * 6\n\n    # 23 oxen can finish in 9 weeks, which should be the same amount of ox-weeks\n    # Check if 23 * 9 is equal to 162 ox-weeks which means the assumption of constant grass growth rate is correct\n    assert 23 * 9 == total_ox_weeks\n\n    # Find out how many weeks it will take for 21 oxen to finish\n    weeks_for_21_oxen = total_ox_weeks / 21\n\n    return weeks_for_21_oxen\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    weight_in_tonnes = 1.194\n    two_thirds = 2 / 3\n    weight_in_kilograms = weight_in_tonnes * two_thirds * 1000  # Convert tonnes to kilograms\n    return weight_in_kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen rides a bike for 1 hour from 7:30 AM to 8:30 AM\n    bike_speed = 10  # miles per hour\n    bike_travel_time = 1  # hour\n    bike_distance = bike_speed * bike_travel_time\n\n    # Ellen takes a train for 2 hours from 8:30 AM to 10:30 AM\n    train_speed = 50  # miles per hour\n    train_travel_time = 2  # hours\n    train_distance = train_speed * train_travel_time\n\n    # Total distance Ellen travels every Saturday\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from sympy import symbols, binomial\n\n    # Let's represent the number of balls in box A, B, C as x, y, z respectively\n    # We need to count non-negative solutions for x + y + z = 5\n    # This is equivalent to finding the coefficient of x^5 in the expansion of (1 + x + x^2 + ...)^3\n    # The series sum formula for a geometric progression is used here to determine the number of terms.\n    \n    # Using stars and bars method (binomial theorem), where n = 5 balls and k = 3 - 1 = 2 bars (partitions).\n    balls = 5\n    boxes = 3\n    # We need to place 5 balls (n) into 3 boxes (k), which is like finding the number of solutions\n    # to the equation x+y+z=5 with non-negative integers. \n    # This is given by the formula C(n+k-1, k-1) or C(n+k-1, n).\n    # C(n+k-1, k-1) = C(5+3-1, 3-1) = C(7, 2)\n    ans = binomial(balls + boxes - 1, boxes - 1)\n\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02)**2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    # Let the number of blue marbles be x\n    # Then, red marbles will be x + 25\n    # Green marbles will be (x + 25) + 32\n    # Sum of all marbles = blue marbles + red marbles + green marbles = 112\n    \n    # Calculate the blue marbles based on the total\n    x = (112 - 25 - 32) / 3\n    \n    return int(x)\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "def solution():\n    from math import factorial\n\n    total_letters = 7  # The word 'TEENAGE' has 7 letters\n    # Count the occurrences of each distinct letter: T=1, E=3, N=1, A=1, G=1\n    count_T = 1\n    count_E = 3\n    count_N = 1\n    count_A = 1\n    count_G = 1\n\n    # The total number of arrangements is the factorial of the total number of letters\n    # divided by the product of the factorials of the counts of each letter\n    arrangements = factorial(total_letters) // (factorial(count_T) * factorial(count_E) * factorial(count_N) * factorial(count_A) * factorial(count_G))\n\n    return arrangements\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 216\n    while True:\n        number += 1\n        if sum(map(int, str(number))) == 9:\n            return number\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Since Lucas is the 3rd from front to back and 2nd from back to front,\n    # there are 3 students from the front to his position and 2 students from his position to the back\n    # therefore, there are 4 students in total in the vertical direction (3 + 2 - 1, as Lucas is counted twice)\n    vertical_students = 3 + 2 - 1\n\n    # Similarly, Lucas is the 4th from left to right and 3rd from right to left,\n    # there are 4 students from the left to his position and 3 students from his position to the right\n    # therefore, there are 6 students in total in the horizontal direction (4 + 3 - 1, as Lucas is counted twice)\n    horizontal_students = 4 + 3 - 1\n\n    # Total students in the rectangular array is the product of the number of students\n    # in the vertical and horizontal directions\n    total_students = vertical_students * horizontal_students\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'e' be the amount of money Ema had initially.\n    # Let 'k' be the amount of money Keng Wee had initially.\n    e, k = symbols('e k')\n\n    # Create the equations based on the problem.\n    # Ema had $360 less than Keng Wee -> e = k - 360\n    equation1 = Eq(e, k - 360)\n    # Ema spent 1/4 of her money -> e * (3/4)\n    # Keng Wee spent 4/7 of his money -> k * (3/7)\n    # They both have the same amount of money left -> e * (3/4) = k * (3/7)\n    equation2 = Eq(e * (3/4), k * (3/7))\n\n    # Use sympy's solve function to solve for 'k'.\n    solution = solve((equation1, equation2), (e, k))\n\n    # Extract the amount of money Keng Wee had initially.\n    return solution[k]\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10  # Since we're looking for the number that makes it equal to one-tenth\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys = symbols('boys')\n    girls_before = 9/11 * boys\n    girls_after = girls_before + 2\n\n    # Equation representing the new ratio after 2 girls are transferred in\n    equation = Eq(girls_after, 10/11 * boys)\n\n    # Solving the equation to find the number of boys\n    num_boys = solve(equation, boys)[0]\n    num_girls_after = 10/11 * num_boys\n\n    # Total number of students in the class now\n    total_students = num_boys + num_girls_after\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Counting from front to back, Lucas is the 3rd student, meaning two are in front of him\n    front_to_back = 3\n    # Counting from back to front, Lucas is the 2nd student, meaning one is behind him\n    back_to_front = 2\n    # Counting the total number of students in the column, we add the ones in front to the ones behind and Lucas himself\n    total_columns = front_to_back + back_to_front - 1\n    \n    # Counting from left to right, Lucas is the 4th student, meaning three are to his left\n    left_to_right = 4\n    # Counting from right to left, Lucas is the 3rd student, meaning two are to his right\n    right_to_left = 3\n    # Counting the total number of students in the row, we add the ones to his left to the ones to his right and Lucas himself\n    total_rows = left_to_right + right_to_left - 1\n    \n    # The total number of students in the array is the product of the number of rows and columns\n    total_students = total_columns * total_rows\n    \n    return total_students\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(1/n for n in range(1, 11)) + sum(2/n for n in range(1, 11)) + sum(3/n for n in range(1, 11)) + \\\n          sum(4/n for n in range(1, 11)) + sum(5/n for n in range(1, 11)) + sum(6/n for n in range(1, 11)) + \\\n          sum(7/n for n in range(1, 11)) + sum(8/n for n in range(1, 11)) + sum(9/n for n in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n    result = solve(equation, (x, y))\n\n    value_in_brackets = 2 * result[x] - result[y]\n    \n    return value_in_brackets\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_pence = 5 * 100  # convert pounds to pence\n    milk_cost = 3 * 31  # cost of milk in pence\n    crisps_cost = 2 * 17  # cost of crisps in pence\n    bread_cost = 78  # cost of bread in pence\n    magazine_cost = 105  # cost of magazine in pence\n\n    total_cost = milk_cost + crisps_cost + bread_cost + magazine_cost\n    change = total_pence - total_cost\n\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lim, tan = symbols('lim tan')\n    \n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n    \n    solutions = solve((equation1, equation2), (lim, tan))\n    \n    difference = solutions[lim] - solutions[tan]\n    \n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_now = symbols('zehan_now')\n    equation = Eq(zehan_now + 12, 3 * zehan_now)\n\n    solution = solve(equation, zehan_now)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 1 from A, B, or C\n    ways_to_choose_1_from_ABC = comb(3, 1)\n    # Number of ways to choose the remaining 4 students from the other 12 (15 total - 3 for A, B, C)\n    ways_to_choose_4_from_other_12 = comb(12, 4)\n    # The total number of ways is the product of the two possibilities\n    total_ways = ways_to_choose_1_from_ABC * ways_to_choose_4_from_other_12\n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    number = 0.36\n    percent = number * 100\n    return percent\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of lemon juice and water\n    lemon_juice_initial, water_initial = symbols('lemon_juice_initial water_initial')\n    \n    # The initial ratio is 2:3\n    equation1 = Eq(lemon_juice_initial / water_initial, 2/3)\n    \n    # After adding 80ml of lemon juice, the ratio becomes 6:5\n    equation2 = Eq((lemon_juice_initial + 80) / water_initial, 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lemon_juice_initial, water_initial))\n\n    return solutions[lemon_juice_initial]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's share ratio is 6\n    # Shaila received 36 sweets\n    # Total ratio is 5 + 6 = 11\n\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + 6\n\n    # Calculate sweets for one ratio unit\n    sweets_per_unit = shaila_sweets / shaila_ratio\n\n    # Calculate total sweets\n    total_sweets = sweets_per_unit * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    spent_total = 177 + 129\n\n    equation = Eq(savings - (savings / 3) - spent_total, (savings / 3) / 2)\n\n    solution = solve(equation, savings)\n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # using the inclusion-exclusion principle\n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase\n    delay_time = 9 / 60  # 9 minutes converted to hours\n\n    # The time taken at increased speed will be the usual time minus the delay\n    # The distance travelled is the same, so we can use the formula: distance = speed * time\n    # Let the usual time taken to travel the distance be t\n    # distance = usual_speed * t = increased_speed * (t - delay_time)\n    # Solving for t: t = distance / usual_speed = distance / increased_speed + delay_time\n\n    # Rearranging for distance we get:\n    # distance = (usual_speed * increased_speed * delay_time) / (increased_speed - usual_speed)\n    distance = (usual_speed * increased_speed * delay_time) / (increased_speed - usual_speed)\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    num = symbols('num')\n    equation = Eq(((num + 8) * 8 - 8) / 8, 80)\n    \n    ans = solve(equation, num)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial speed be v (in metres/minute) and initial time be t (in minutes)\n    v, t = symbols('v t')\n\n    # When speed increases by 25%, time decreases by 20 minutes\n    # Thus, 1.25*v*(t - 20) = v*t, as distance remains the same\n    equation1 = Eq(1.25 * v * (t - 20), v * t)\n\n    # When speed decreases by 45 metres/minute, time increases by 75%\n    # Thus, (v - 45)*(t * 1.75) = v*t, as distance remains the same\n    equation2 = Eq((v - 45) * (t * 1.75), v * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (v, t))\n\n    # Distance can be found by multiplying the initial speed and time\n    # As we have the solution for speed in metres/minute and time in minutes, their product gives metres\n    distance = solutions[v] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    for red_ropes in range(11):  # As the total count is 10, it ranges from 0 to 10.\n        blue_ropes = 10 - red_ropes\n        if 2 * red_ropes + 3 * blue_ropes == 26:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_second_half = 6\n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 0\n    while True:\n        children += 7\n        if children % 9 == 2:\n            break\n    return children\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22 // 2 + 1):\n        y = 22 - x\n        if x != y:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    ans = total_used.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            A = i + (41 // i)\n            if A % i == 0 and A // i == 41 // i:\n                return 7 * A\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_h_to_w = 3 / 4\n    width = height / ratio_h_to_w\n\n    perimeter = 2 * (height + width)\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    \n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 / 5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - y, 36)\n    equation2 = Eq(x + y, 98)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    num_str = '3' * 12\n    num = int(num_str)\n    remainder = num % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    common_difference = 2\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit for each of the bases raised to the 100th power\n    last_digit_4 = pow(4, 100, 10)\n    last_digit_7 = pow(7, 100, 10)\n    last_digit_9 = pow(9, 100, 10)\n    last_digit_11 = pow(11, 100, 10)\n    \n    # Calculate the product of the last digits\n    product = last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11\n    \n    # Find the last digit of the product\n    return product % 10\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_answers = total_questions * 0.7\n    incorrect_answers = total_questions - correct_answers\n    # Let x be the number of correct answers\n    # Each correct answer gives 3 marks, each wrong answer deducts 1 mark\n    # 3x - (incorrect_answers - (total_questions - x)) = total marks\n    # Simplify to find x:\n    # 3x - incorrect_answers + x = 78 + total_questions\n    # 4x = 78 + total_questions + incorrect_answers\n    x = (78 + total_questions + incorrect_answers) / 4\n    return int(x)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Let the cost of one file be f and one ruler be r.\n    # 6 files and 10 rulers cost $40.\n    # So, 6f + 10r = 40\n    \n    # We need to find the cost of 9 files and 15 rulers.\n    # Let's find the cost in the same ratio.\n    # Which means, (9f + 15r) / (6f + 10r) should be the same as (9 + 15) / (6 + 10)\n    # Therefore, the cost is 40 * (9 + 15) / (6 + 10)\n    \n    cost = 40 * (9 + 15) / (6 + 10)\n    return cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Jessie's original amounts of money\n    john, jessie = symbols('john jessie')\n\n    # Equation 1: John had 5/13 of Jessie's money\n    equation1 = Eq(john, 5/13 * jessie)\n\n    # Jessie transfers $600 to John\n    john_after = john + 600\n    jessie_after = jessie - 600\n\n    # Equation 2: After transfer, John's money became 50% of Jessie's money\n    equation2 = Eq(john_after, 0.5 * jessie_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate total money they had initially\n    total_money = solutions[john] + solutions[jessie]\n\n    return float(total_money)\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    n = 0\n    while count_1 < 15 or count_2 < 14:\n        n += 1\n        count_1 += str(n).count('1')\n        count_2 += str(n).count('2')\n    return n\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_format = \"%H:%M\"\n    time_in = datetime.strptime(\"10:30\", time_format)\n    time_out = datetime.strptime(\"11:00\", time_format)\n    \n    time_baked = (time_out - time_in).total_seconds() / 60  # Total baking time in minutes\n    return int(time_baked)\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # equation based on the ratio of T-shirts to caps\n    equation1 = Eq(t_shirts / caps, 8 / 5)\n\n    # equation based on the total cost of the sold items\n    # Siti sold 1/4 of T-shirts and each T-shirt costs $3\n    # Also, she sold 1/5 of caps and each cap costs $5\n    equation2 = Eq((1 / 4) * t_shirts * 3 + (1 / 5) * caps * 5, 132)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_banana = 12  # pence per banana\n    cost_apple = 11   # pence per apple\n\n    total_cost_bananas = 3 * cost_banana  # total cost for bananas in pence\n    total_cost_apples = 5 * cost_apple    # total cost for apples in pence\n\n    total_cost = total_cost_bananas + total_cost_apples   # total cost in pence\n    total_cost_pounds = total_cost / 100  # convert total cost to pounds\n\n    paid = 2  # Ian pays with £2 coin, which is 200 pence\n    change = paid - total_cost_pounds   # change Ian should get in pounds\n\n    return change\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    num_children = 7\n\n    harvir_age = youngest_age + (num_children - 1) * age_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    muffins_flour = 1/5\n    cookies_flour = 1/2\n    remaining_flour = 360 / 1000  # Convert grams to kilograms\n\n    original_flour = muffins_flour + cookies_flour + remaining_flour\n    return original_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    total_pence = 500  # Total cost in pence\n    possible_combinations = []\n\n    # Iterate through each possible number of oranges\n    for oranges in range(total_pence // 26 + 1):  # +1 because range end is exclusive\n        lemons = (total_pence - (oranges * 26)) // 30\n        \n        # If the combination exactly spends 500 pence, add to possible combinations\n        if (oranges * 26) + (lemons * 30) == total_pence:\n            possible_combinations.append((oranges, lemons))\n\n    # Get the total number of fruits by summing oranges and lemons for all combinations\n    total_fruits = [sum(combo) for combo in possible_combinations]\n\n    return total_fruits\n\n# Call the function to compute the answer\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # Since the table is circular, fix one person's position (e.g., ourselves) and then\n    # arrange the remaining people around the table. This is (n-1)! for n people.\n    num_people = 4\n    num_ways = factorial(num_people - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_eggs = symbols('original_eggs')\n    \n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n    \n    solution = solve(equation, original_eggs)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    # Define custom operations\n    def custom_op1(a, b):\n        return 3*a - 2*b\n    \n    def custom_op2(a, b):\n        return 3*a + 2*b\n    \n    # Perform operations as per the given question\n    result = custom_op2(custom_op1(custom_op2(3, 4), 5), 6)\n    \n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):  # the pages from 1 to 440\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo, jason + 220)\n    equation2 = Eq(jason * 2, leo + 180 + 1100)\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    schoolbooks = 2\n\n    ways_to_arrange = factorial(total_books) // (factorial(biographies) * factorial(science_fictions) * factorial(magazines) * factorial(schoolbooks))\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of male and female visitors\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Given: male_first_day = female_first_day + 450\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    \n    # On the second day, female visitors increased by 15%\n    female_second_day = female_first_day * 1.15\n    \n    # On the second day, male visitors decreased by 18%\n    male_second_day = male_first_day * 0.82\n    \n    # The total number of visitors on the second day was 1354\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n    \n    # Calculate the total number of visitors on the first day\n    total_first_day = solutions[male_first_day] + solutions[female_first_day]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, H, E, F, G = perm[0], perm[1], perm[2], perm[3], perm[4], (perm[4] + 1) % 10, (perm[4] + 2) % 10\n        if E == 0:  # Leading digit cannot be zero\n            continue\n        EF = E * 10 + F\n        CG = C * 10 + G\n        if A + EF + CG == B * 100 + C * 10 + H:\n          return B*10000 + C*1000 + F*100 + B*10 + H\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    ways = 0\n    for x in range(8):\n        for y in range(8):\n            for z in range(8):\n                if x + y + z == 7:\n                    ways += 1\n    # Divide by 3! to account for the identical cases\n    ans = ways // 6\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n    \n    remainder = start_number % step\n    \n    last_positive_number = start_number - remainder\n    \n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # mansion cost in pounds\n    number_of_friends = 5  # number of friends sharing the cost\n\n    each_pay = total_cost / number_of_friends  # amount each friend has to pay\n    \n    return each_pay\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of children buying each type of shirt\n    no_name, with_name = symbols('no_name with_name')\n\n    # Equation for the total number of children\n    equation1 = Eq(no_name + with_name, 50)\n\n    # Equation for the total amount paid\n    equation2 = Eq(10 * no_name + 15 * with_name, 555)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (no_name, with_name))\n\n    # Return the number of children who paid to have their name on the shirt\n    return solutions[with_name]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time David walks at the increased speed\n    x = symbols('x')\n\n    # Distance covered at initial speed (150 m/min for 10 min)\n    initial_distance = 150 * 10\n\n    # Total distance at increased speed (200 m/min for x min)\n    increased_speed_distance = (150 + 50) * x\n\n    # Total distance equation\n    equation = Eq(initial_distance + increased_speed_distance, 3700)\n\n    # Solve for x\n    time_at_increased_speed = solve(equation, x)[0]\n\n    # Total time spent walking\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of male and female visitors on the first day\n    males_first_day, females_first_day = symbols('males_first_day females_first_day')\n    \n    # Equation for the first day (males are 450 more than females)\n    equation1 = Eq(males_first_day, females_first_day + 450)\n    \n    # Equation for the second day (total visitors is 1354, with the changes in percentages)\n    equation2 = Eq(females_first_day * 1.15 + males_first_day * 0.82, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (males_first_day, females_first_day))\n    \n    return solutions[males_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London.\n    # When it is 05:00 in Singapore, it is actually 22:00 of the previous day in London.\n    \n    # Convert Singapore take-off time to London time\n    singapore_takeoff = 5\n    london_takeoff = singapore_takeoff - 7\n    if london_takeoff < 0:\n        london_takeoff += 24  # Adjust for time going to the previous day\n\n    # Time of landing in London\n    london_landing = 11\n\n    # If the London landing time is less than the London takeoff time, it means the flight landed on the next day.\n    if london_landing < london_takeoff:\n        london_landing += 24\n\n    # Calculate the flight time\n    flight_time = london_landing - london_takeoff\n\n    return flight_time\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    num_hearts = 4\n    num_spades = 3\n    num_diamonds = 7\n    total_cards = num_hearts + num_spades + num_diamonds\n\n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n\n    def combinations(n, k):\n        return permutations(n, k) // factorial(k)\n\n    # Calculate the different ways to arrange the cards\n    ans = factorial(total_cards) // (factorial(num_hearts) * factorial(num_spades) * factorial(num_diamonds))\n    return ans\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # Smallest multiple of 5\n    second_digit = 1 # Smallest odd number among the natural numbers\n    third_digit = 9  # Largest single digit odd number\n    fourth_digit = 2 # Smallest even number\n    fifth_digit = 8  # Largest single digit that is a multiple of 2\n    sixth_digit = 3  # Smallest odd number greater than 1 in nature\n    # Seventh digit is unknown, but must be a multiple of 2 and a multiple of 5, hence it must end with 0\n    seventh_digit = 0\n    \n    ans = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_read_last_day = 80\n    daily_increase = 5\n    \n    # Calculate total pages read until the day before the last day in an arithmetic progression\n    days_before_last = 1  # Initialize with the first day\n    total_pages_before_last = 20  # Pages read on the first day\n    \n    while True:\n        # Read pages on the next day\n        pages_next_day = 20 + days_before_last * daily_increase\n        # Calculate new total pages including the next day's read\n        new_total = total_pages_before_last + pages_next_day\n        # Check if the remaining pages are equal to the amount read on the last day\n        if new_total > total_read_last_day:\n            break\n        # Update the values for the next iteration\n        total_pages_before_last = new_total\n        days_before_last += 1\n    \n    # Calculate total pages in the book\n    total_pages = total_pages_before_last + total_read_last_day\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds_kg = 4/9\n    cashew_kg = 1/3\n\n    difference = almonds_kg - cashew_kg\n\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Correct method to find the dividend\n    dividend = quotient * divisor + remainder\n    \n    # Check if Johnny's solution is correct\n    # Johnny's mistake: he multiplied the remainder instead of using it as an addition term\n    johnny_dividend = remainder * divisor + divisor  # This is his incorrect method.\n    \n    # Johnny's answer is correct if his dividend matches the correct dividend\n    is_correct = dividend == johnny_dividend\n    \n    # Return the correct working if his answer was incorrect\n    return dividend if not is_correct else johnny_dividend\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))\n    sum_negative = sum(range(2, 51, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, a, m, o, g = perm\n        if s == 0 or g == 0:  # Leading digit cannot be zero\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = Eq(boys + girls, 40)\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    solutions = solve((total_students, equation), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    \n    median_position = len(sequence) // 2\n    ans = sequence[median_position]\n    \n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n    \n    ropeA_original = 65\n    ropeB_original = 29\n\n    equation = Eq((ropeA_original - cut_length) , 3 * (ropeB_original - cut_length))\n\n    solution = solve(equation, cut_length)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_times = total_rolls * probability_of_5\n\n    return expected_times\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n\n    ans = (numerator / denominator_original) * denominator_new\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    # Given ratios\n    ratio1 = Eq(A/B, 2/3)\n    ratio2 = Eq(B/C, 6/5)\n\n    # Average of A, B, and C is 45\n    average_eq = Eq((A + B + C)/3, 45)\n\n    # Solve the equations\n    solutions = solve((ratio1, ratio2, average_eq), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits_count = len([1, 3, 5, 7, 9])  # Available odd digits.\n    # For a 3-digit number with all odd digits, choose any odd digit for each place.\n    return odd_digits_count ** 3\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1/12\n    combined_rate = 1/8\n    lazy_rate = symbols('lazy_rate')\n\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    lazy_rate_solution = solve(equation, lazy_rate)\n    \n    lazy_days = 1 / lazy_rate_solution[0]\n\n    return lazy_days\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    sum_of_squares = sum([i**2 for i in range(1, 1000, 2)])\n    ans = sum_of_squares % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')  # Original length and width\n\n    # The original perimeter (2*l + 2*w)\n    # The new perimeter with length increased by 12cm (2*(l+12) + 2*w) equals 38cm\n    equation = Eq(2 * (l + 12) + 2 * w, 38)\n\n    # Get the value of l in terms of w from the equation\n    l_value = solve(equation, l)[0]\n\n    # Substitute l from the equation for perimeter with the expression in terms of w\n    original_perimeter = 2 * l_value + 2 * w\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) / nell_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    # Use the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    j_ratio = 5\n    n_ratio = 3\n    difference = 18\n\n    total_ratio = j_ratio + n_ratio\n    n_stamps = difference / (j_ratio - n_ratio) * n_ratio\n    total_stamps = n_stamps * total_ratio\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    # Initial condition\n    equation1 = Eq(sana, 8 * mina)\n\n    # Total number of coins\n    equation2 = Eq(sana + mina, 234)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina gives away 12 coins\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    \n    bag_weight = 3/4\n    number_of_bags = remaining_after_tuesday / bag_weight\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    total_flour = 142 * 123\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300  # £3.00 is 300 pence\n    percentage = (pence / pounds_to_pence) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Ratio of the number of lamp posts per time\n    lamp_posts_per_time = (11 - 1) / 50 # We subtract 1 because he starts at the first lamp post (10 intervals)\n\n    # Calculate the number of lamp posts after 80 seconds\n    lamp_posts = lamp_posts_per_time * 80\n\n    # Adding the initial lamp post to the ones passed after 80 seconds\n    lamp_posts += 1  # Since he starts at the first lamp post\n\n    return int(lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    total_flowers = flowers_per_side * 4 - (corners - 1)  # Subtract extra counted corner flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples = 2 * total_items / 3\n    bananas = total_items / 9\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n    lemons_count = total_items - (2 * total_items / 3) - (total_items / 9)\n\n    return int(lemons_count.subs(total_items, solutions[0]))\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    factors_of_4 = [1, 2, 4]\n    digit_ones = sum(factors_of_4)\n    digit_hundreds = 8\n    digit_thousands = digit_hundreds + 1\n    digit_tens = digit_hundreds - digit_ones\n    \n    return 40000 + digit_thousands * 1000 + digit_hundreds * 100 + digit_tens * 10 + digit_ones\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n    football_field_length = basketball_court_length + football_field_extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    discount_given_to_ana = 1 - (67.50 / original_price)\n    discount_percentage_to_ana = discount_given_to_ana * 100\n\n    return discount_percentage_to_ana\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    # Set r and s as an arbitrary starting point satisfying the criteria\n    r, s = 1, 4 \n    while not (3/10 < r/s < 5/16):\n        r += 1\n        if 5*s <= 16*r:  # Check if it crosses the upper boundary\n            s += 1\n            r = 3 * s // 10 + 1  # r should be the smallest value that makes the fraction > 3/10\n    return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total steering wheels made by Mr. Lawson\n    total_steering_wheels = symbols('total_steering_wheels')\n\n    # Equation representing the problem statement\n    equation = Eq((300 + 250) * 6 / 5, total_steering_wheels)\n\n    # Solving for the total number of steering wheels\n    solutions = solve(equation, total_steering_wheels)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Number of children a bus can carry\n    children_capacity = 40\n    # Number of adults a bus can carry\n    adults_capacity = 24\n    # Number of children already on the bus\n    children_on_bus = 15\n\n    # Calculate remaining space for children\n    remaining_children_space = children_capacity - children_on_bus\n\n    # Convert remaining space for children to equivalent space for adults\n    # We assume the maximum number of adults that can replace the remaining children\n    equivalent_adults_space = (remaining_children_space * adults_capacity) / children_capacity\n\n    # Since we cannot have a fraction of an adult, we take the floor of the number\n    remaining_adults_space = int(equivalent_adults_space)\n\n    return remaining_adults_space\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors\n    factors = factorint(28)\n\n    # A perfect square has even powers for all its prime factors.\n    # To make it a perfect square, each prime factor of the original\n    # number should be raised to an even power. If a prime factor already\n    # has an even power, it doesn't need to be multiplied. If it has an\n    # odd power, multiply by the same factor to make the power even.\n    \n    # Initialize the smallest number that needs to be multiplied\n    smallest_number = 1\n\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            # If the power is odd, multiply it by the prime to make it even\n            smallest_number *= prime\n\n    return smallest_number\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_to_cook_one_pancake = 3 / 2\n    pancakes_in_12_minutes = 12 / time_to_cook_one_pancake\n    return pancakes_in_12_minutes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n    \n    # Applying Pigeonhole Principle\n    min_same_size = (num_students // num_sizes) + 1\n    \n    return min_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    return triangle_operation(8, triangle_operation(6, 4))\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Mr Krishnan's salary\n    salary = symbols('salary')\n\n    # 740 is the amount spent on the DVD player\n    # 3/4 of the remain salary is used for TV set, so remaning is 1/4\n    # He has 1/5 of the salary left after these expenses:\n\n    # Equation setup:\n    # 740 + 3/4*(salary - 740) + 1/5*salary = salary\n\n    # Define the equation based on the problem statement\n    equation = Eq(740 + (3/4)*(salary - 740) + (1/5)*salary, salary)\n\n    # Solve the equation for the salary\n    solution = solve(equation, salary)\n\n    # Return the salary as the answer\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent Russell's current age\n    r = symbols('r')\n    \n    # Equation representing the problem\n    equation = Eq(r + 32, 4 * (r - 16))\n    \n    # Solve the equation for Russell's age\n    solution = solve(equation, r)\n    \n    # Since we might get more than one solution, we return the one that makes sense (positive age)\n    return next(age for age in solution if age.is_real and age > 0)\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Assuming the least count of people in the circle would be the difference\n    # between 19 and 6, as they need to be at least opposite in the circle.\n    minimum_people_in_circle = 19 - 6\n    \n    # Now, trying to find the actual count considering the opposite position\n    # and the even spacing, we find the least common multiple (LCM) of the numbers.\n    actual_people_in_circle = minimum_people_in_circle * 2  # Double the minimum to form a full circle\n\n    return actual_people_in_circle\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):  # thousands and units digit - cannot be 0\n        for B in range(0, 10):  # tens digit\n            for C in range(0, 10):  # hundreds digit\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * A + 100 * C + 10 * A + B\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a and b represent the number of students in Class 6A and 6B initially\n\n    # Initial ratio of students\n    equation1 = Eq(a, (4/9) * b)\n\n    # After reshuffling, the number of students in both classes becomes equal\n    equation2 = Eq(a - 3 + 18, b + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # He needs to make 4 cuts to divide the rod into 5 pieces.\n    # Each cut takes 2 minutes.\n    num_cuts = 4\n    time_per_cut = 2\n    total_time = num_cuts * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    spelling_books_per_shelf = 9\n    math_books_per_shelf = 4\n\n    total_spelling_books = 72\n    total_shelves = 15\n\n    num_shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    num_shelves_with_math_books = total_shelves - num_shelves_with_spelling_books\n\n    total_math_books = num_shelves_with_math_books * math_books_per_shelf\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey walks from the 1st to the 4th floor in 6 minutes.\n    # The number of intervals between these floors is 3 (i.e., from 1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    time_for_four_floors = 6\n    intervals_for_four_floors = 3\n\n    # Find the time taken for one interval.\n    time_per_interval = time_for_four_floors / intervals_for_four_floors\n\n    # For walking from the 1st to the 10th floor, there are 9 intervals.\n    intervals_for_ten_floors = 9\n\n    # Calculate the total time for 9 intervals.\n    total_time = time_per_interval * intervals_for_ten_floors\n\n    return total_time\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    # Given amounts in the recipe\n    chocolate_recipe = 40\n    biscuits_recipe = 100\n\n    # Amount of biscuits available\n    biscuits_available = 75\n\n    # Calculate the proportion between available biscuits and biscuits in the recipe\n    proportion = biscuits_available / biscuits_recipe\n\n    # Calculate the amount of melted chocolate needed based on the proportion\n    chocolate_needed = chocolate_recipe * proportion\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    num_days_in_week = 7\n    \n    total_weekly_earnings = average_daily_earnings * num_days_in_week\n    \n    return total_weekly_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n\n    ans = solve(equation, n)\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    initial_difference = 16 - 8\n    final_difference = 22 - 8\n\n    # The initial amount of students has to be twice the initial difference\n    initial_students = 2 * initial_difference\n\n    # The final amount of students has to be twice the final difference\n    final_students = 2 * final_difference\n\n    # Calculate the new students who joined the second game\n    new_students = final_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate time for each stage\n    time_stage_1 = 280 / 7  # Time = Distance / Speed\n    time_stage_2 = 400 / 5\n    # The sprint stage distance can be calculated as the total distance minus distances of the first two stages\n    sprint_distance = 800 - (280 + 400)\n    time_stage_3 = sprint_distance / 8  # Time = Distance / Speed\n\n    # Total time is the sum of all three stages\n    total_time = time_stage_1 + time_stage_2 + time_stage_3\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')  # Anna, Betsy, Charlene's marble counts after the final distribution\n\n    # Given conditions after the marble exchanges\n    equation1 = Eq(a + b + c, 168)  # Total marbles\n    equation2 = Eq(5 * a, 2 * b)    # Ratio of Anna's marbles to Betsy's marbles\n    equation3 = Eq(7 * a, 2 * c)    # Ratio of Anna's marbles to Charlene's marbles\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Calculate the number of marbles Betsy (denoted as 'b_original' here) had originally\n    b_original = solutions[b] + 8 - 15  # Betsy gave 8 to Anna and received 15 from Charlene\n\n    return b_original\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of lollipops and y be the number of gum drops initially\n    x, y = symbols('x y', integer=True)\n    \n    # Original ratio is 5x = 7y\n    eq1 = Eq(5*x, 7*y)\n    \n    # After adding, ratio is (x + 120) / (y + 120) = 4 / 5\n    eq2 = Eq((x + 120) / (y + 120), 4/5)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the total number of candy pieces now\n    total_candy = solutions[x] + 120 + solutions[y] + 120\n    \n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    digits = 0\n    for i in range(1, 268 + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Length and width of the paper\n    length = 1.36  # in meters\n    width = 0.8    # in meters\n\n    # Convert meters to centimeters to avoid floating point arithmetic problems\n    length_cm = int(length * 100)\n    width_cm = int(width * 100)\n\n    # Find the greatest common divisor to get the largest possible side of the square\n    side_of_square_cm = gcd(length_cm, width_cm)\n\n    # Number of squares cut from length and width\n    num_squares_length = length_cm // side_of_square_cm\n    num_squares_width = width_cm // side_of_square_cm\n\n    # Total number of squares\n    total_squares = num_squares_length * num_squares_width\n\n    return total_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    odds = [5, 7]  # Possible odd numbers for the last digit\n    others = [4, 5, 7]  # Possible numbers for the first and second digit\n    count = 0\n\n    for last in odds:  # Last digit must be an odd number\n        for first in others:  # First digit can be any of the three, but not zero\n            for second in others:  # Second digit can be any of the three\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    limit = 201\n    count_by_5 = (limit - 1) // 5\n    count_by_7 = (limit - 1) // 7\n    count_by_5_and_7 = (limit - 1) // (5*7)\n\n    ans = count_by_5 + count_by_7 - count_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbols for the price of one of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    \n    # equations based on the given information\n    equation1 = Eq(1*durian + 2*pineapple + 3*watermelon, 440)\n    equation2 = Eq(4*durian + 6*pineapple + 9*watermelon, 1625)\n    \n    # solve the system for the prices\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    total_matches = Eq(n * (n - 1), 30 * 2)  # each team plays n-1 other teams twice\n\n    solutions = solve(total_matches, n)\n\n    # Return only positive integer solution\n    return max(solutions)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    s = sum((-1)**(i%2) * i for i in range(1, 101))\n    return s\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1000, 10000):  # assuming the original number has up to four digits\n        if i - int(str(i)[:-1]) == 135:\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    total_trips = 0\n\n    while students > 0:\n        # Boat goes from initial side to the other side\n        total_trips += 1\n        students -= boat_capacity\n\n        # If there are still students on the initial side, one student must return with the boat\n        if students > 0:\n            total_trips += 1\n            students += 1  # Adding the student back as he/she returns\n            \n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    value = (49 * 57) + 7\n    return value\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let total_students be the total number of students involved in the exercise\n    # A_students is the percentage of students who chose A Math (80% of total_students)\n    # B_students is the percentage of students who chose B Math (35% of total_students)\n    # neither_students is the percentage of students who chose neither (10% of total_students)\n    # both_students is the number of students who chose both subjects (given as 75)\n    \n    # We know that the sum of students who chose A only, B only, both, and neither should equal the total number of students.\n    # Therefore, A_students + B_students - both_students + neither_students = total_students\n    \n    # Since we are given percentages, A_students is 0.8 * total_students, B_students is 0.35 * total_students, and neither_students is 0.1 * total_students\n    \n    # Substituting the given values and percentages into the equation, we have\n    # (0.8 * total_students) + (0.35 * total_students) - both_students + (0.1 * total_students) = total_students\n    \n    # Simplify and solve for total_students\n    # (0.8 + 0.35 + 0.1) * total_students - both_students = total_students\n    # 1.25 * total_students - both_students = total_students\n    # 0.25 * total_students = both_students\n    # total_students = both_students / 0.25\n\n    both_students = 75\n    total_students = both_students / 0.25\n\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    number = (3 * 100) + (2 * 10) + 7\n    return number\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom functools import reduce\nimport math\n\ndef factors(n):\n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)))\n\ndef solution():\n    # Find all possible combinations of 9 numbers out of 13\n    possible_combinations = list(combinations(range(1, 14), 9))\n    \n    # Filter combinations based on the given hints\n    for combination in possible_combinations:\n        factors_list = [len(factors(num)) for num in combination]\n        \n        # Two students with unique factor counts (hint 1)\n        if factors_list.count(len(factors(combination[0]))) == 1 and factors_list.count(len(factors(combination[1]))) == 1:\n            # Alice knows her number has a unique factor count and is odd (hint 2)\n            alice_options = [num for num in combination if num % 2 != 0 and factors_list.count(len(factors(num))) == 1]\n            if len(alice_options) == 1:\n                alice_num = alice_options[0]\n                \n                # May's number is 2 less than Alice's and 1 more than Mark's (hint 3)\n                may_num = alice_num - 2\n                if may_num in combination and may_num - 1 in combination:\n                    # Calculate the product of the remaining four numbers\n                    remaining_numbers = list(set(range(1, 14)) - set(combination))\n                    product = math.prod(remaining_numbers)\n                    return product\n                    \n    return \"No solution found\"\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    numerator = factorial(100)\n    denominator = factorial(99) + factorial(98)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    # Get all 4-digit permutations using the digits 1, 4, 6, 9 exactly once\n    perms = [''.join(p) for p in permutations('1469')]\n    \n    # Convert permutations to integers and calculate the sum\n    nums = [int(p) for p in perms]\n    total_sum = sum(nums)\n    \n    # Calculate the average of the 4-digit numbers\n    average = total_sum / len(nums)\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    initial_condition = Eq(boys, girls)\n    after_leaving = Eq(girls - 12, 2 * (boys - 60))\n\n    solutions = solve((initial_condition, after_leaving), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    # Start with the hundreds place being the greatest 1-digit number (9)\n    hundreds = 9\n\n    # Loop through possible digits for the tens and ones place (1 to 9, since 0 is not allowed)\n    for tens in range(1, 10):\n        for ones in range(1, 10):\n            # Check if the sum of tens and ones digits equals 15 and all digits are different\n            if tens + ones == 15 and tens != ones and tens != hundreds and ones != hundreds:\n                # Construct the number and ensure it's even\n                number = hundreds * 100 + tens * 10 + ones\n                if number % 2 == 0:\n                    return number\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls fill 1 jug\n    bowls_per_jug = 3\n    \n    # 2 jugs fill 1 pail\n    jugs_per_pail = 2\n    \n    # Bowls needed to fill one pail\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    \n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # in km/h\n    speed_car = 120  # in km/h\n    lead_time = 3  # hours\n\n    # Distance covered by the van during the 3 hours head start\n    distance_van = speed_van * lead_time\n\n    # Relative speed between the car and the van\n    relative_speed = speed_car - speed_van\n\n    # Time taken for the car to catch up with the van\n    time_to_catch_up = distance_van / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = 4 + 1  # 4 hats + 1 option not to choose a hat\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    combinations = hats * shirts * pants * skirt\n    return combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert recurring decimal 0.၁ to a fraction\n    # Using the formula for sum of geometric series a / (1 - r) where\n    # a is the first term and r is the common ratio\n    decimal_fraction = 1 / 99\n\n    # Since we're multiplying the number by itself, it's the same as taking the fraction to the power of 2\n    product_fraction = decimal_fraction ** 2\n\n    # Convert the fraction back into a recurring decimal and count the digits in the repetend\n    numerator = product_fraction.numerator\n    denominator = product_fraction.denominator\n\n    # Find how many times we need to multiply the numerator by 10 to get a whole number\n    count = 0\n    while (numerator * 10 ** count) % denominator != 0:\n        count += 1\n\n    # The number of digits in one repetend of the product is the number of times we had to multiply by 10\n    return count\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    pages_per_minute_a = 300 / 12\n    pages_per_minute_b = 300 / 10\n\n    combined_rate = pages_per_minute_a + pages_per_minute_b\n    pages_in_half_hour = combined_rate * 30  # 30 minutes in half an hour\n\n    return pages_in_half_hour\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month in {4, 6, 9, 11} and day > 30:\n                continue\n            elif month == 2 and (day > 28):\n                continue\n            date = f\"{day:02d}/{month:02d}/2019\"\n            count += date.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the number of lemons (lemons) and total items (total)\n    lemons, total = symbols('lemons total')\n    \n    # Construct the equations according to the problem\n    # 2/3 of total items are apples\n    apples = 2 * total / 3\n    # 1/9 of total items are bananas\n    bananas = total / 9\n    # The rest are lemons\n    rest = total - apples - bananas\n    # She bought 12 more apples than lemons\n    apples_lemons_eq = apples - lemons - 12\n    \n    # Solve the equations\n    solution = solve((rest - lemons, apples_lemons_eq), (lemons, total))\n    \n    # Return the number of lemons\n    return solution[lemons]\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14 and cut into 490 cubes,\n    # each small cube is 1x1x1 in size.\n    # Only the cubes at the corners will have exactly three faces painted.\n    # We calculate the number of corner cubes.\n    corners = 2 * 2 * 2 # two corners each edge\n    return corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    original_number = 10*x + y\n    swapped_number = 10*y + x\n\n    equation = Eq(swapped_number, original_number/3 + 3)\n\n    solutions = solve((equation, (x >= 1, x <= 9), (y >= 0, y <= 9), (x - y)), (x, y))\n\n    return 10 * solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for levels where A, B, C, D, Zachary, Yvonne, Xavier, Waylon live\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon')\n\n    # Set up the equations based on the information given\n    constraints = [\n        A < D,        # A stays in a unit located lower than D\n        A > C,        # A stays in a unit located higher than C\n        B < Xavier,   # B stays in a unit lower than Xavier's\n        D == 5 * Yvonne, # D stays in a unit that is 5 times Yvonne’s unit\n\n        # Zachary moves two level above his unit, and\n        # the difference with Xavier's and Waylon's is equal\n        Eq(Zachary + 2 - Xavier, Zachary - Waylon),\n\n        # The level Zachary stays is the sum of the levels Yvonne and Xavier stay\n        Eq(Zachary, Yvonne + Xavier),\n    ]\n\n    # Add constraints for all living within the 18 level apartment\n    constraints += [A > 0, A <= 18, B > 0, B <= 18, C > 0, C <= 18, D > 0, D <= 18, \n                    Zachary > 0, Zachary <= 18, Yvonne > 0, Yvonne <= 18,\n                    Xavier > 0, Xavier <= 18, Waylon > 0, Waylon <= 18]\n\n    # Solve the system of equations\n    solutions = solve(constraints)\n\n    # Find the valid solutions, considering the integer constraints and logical conditions\n    valid_solutions = [sol for sol in solutions if all(sol[i].is_integer and sol[i] >=1 and sol[i] <= 18 for i in [A, B, C, D])]\n\n    # Extract the solution for A\n    if valid_solutions:\n        A_level = valid_solutions[0][A]\n    else:\n        A_level = None\n\n    return A_level\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 1.191  # total for 3 years at 6%\n    second_interest_rate = 1.166  # total for 2 years at 8%\n    final_amount = initial_investment * first_interest_rate * second_interest_rate\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    donut, raisin_roll = symbols('donut raisin_roll')\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n    \n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n    \n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n\n    # Finding the gcd of the three numbers for the largest possible number of students per team\n    gcd_1_and_2 = gcd(students_school_1, students_school_2)\n    greatest_common_divisor = gcd(gcd_1_and_2, students_school_3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for h in range(1, 10):\n        for t in range(1, 10):\n            for u in range(1, 10):\n                if h % t == 0 and h % u == 0:\n                    # Construct the number and ensure it's a 3-digit integer\n                    number = 100 * h + 10 * t + u\n                    if 100 <= number <= 999:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of a notebook as n, pencil case as p, and eraser as e\n    n, p, e = symbols('n p e')\n\n    # Equation 1: 3 notebooks + 4 pencil cases + 5 erasers = $50\n    equation1 = Eq(3*n + 4*p + 5*e, 50)\n\n    # Equation 2: 1 notebook + 1 pencil case = $6\n    equation2 = Eq(n + p, 6)\n\n    # Equation 3: 1 pencil case + 1 eraser = $9\n    equation3 = Eq(p + e, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (n, p, e))\n\n    # Return the cost of the pencil case\n    return solutions[p]\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the common multiple of the ratio quantities.\n    x = symbols('x')\n\n    # Set up the equation: 5*(3x) + 3*(4x) + 4*(2x) = $560\n    total_sales = 5*(3*x) + 3*(4*x) + 4*(2*x)\n\n    # Solve for x\n    x_value = solve(total_sales - 560, x)[0]\n\n    # Calculate the amount collected from durian puffs\n    amount_collected_durian = 5 * (3 * x_value)\n\n    return amount_collected_durian\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    perm = permutations(digits)\n    numbers = set(int(''.join(p)) for p in perm)\n    return len(numbers)\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Calculate how many numbers in total by summing the sequence 1+2+2+3+3+3+...+12+12+...+12\n    total_numbers = sum(i for i in range(1, 13) for j in range(i))\n\n    # Since we are looking for the median, we should find the middle position\n    middle_position = total_numbers // 2 + 1 if total_numbers % 2 != 0 else total_numbers // 2\n    \n    current_count = 0\n    for num in range(1, 13):\n        current_count += num\n        if current_count >= middle_position:\n            return num\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    loafs_needed = 24\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # The sum of an arithmetic sequence can be expressed as S_n = (n/2) * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term, and a_n is the nth term.\n    # From the question, we have S_9 = 99 and S_27 = 540.\n    # Let a be the first term and d be the common difference of the arithmetic sequence.\n    # We then have the following two equations based on the sum of arithmetic sequence formula:\n    # S_9 = (9/2) * (2a + 8d) = 99\n    # S_27 = (27/2) * (2a + 26d) = 540\n    # This gives us two equations:\n    # 9a + 36d = 198 (1)\n    # 27a + 702d = 2160 (2)\n    # We can solve these two equations to find a and d.\n    \n    # Multiply the first equation by 3 to match the coefficients with the second equation\n    # 27a + 108d = 594 (3)\n    # Now subtract equation (1) from equation (2)\n    # (27a + 702d) - (27a + 108d) = 2160 - 594\n    # 594d = 1566\n    # d = 1566 / 594\n    d = 1566 / 594\n    \n    # Plug the value of d back into the first equation\n    # 9a + 36*(1566/594) = 198\n    # 9a + 94 = 198\n    # 9a = 198 - 94\n    a = (198 - 36*d) / 9\n    \n    # Now we need to find the sum of the first 16 terms S_16\n    # S_16 = (16/2) * (2a + 15d)\n    S_16 = (16/2) * (2*a + 15*d)\n    \n    return S_16\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    return len(\"\".join(str(i) for i in range(7, 41)))\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    min_in_hour = 60\n    lcm = (4 * 6) // math.gcd(4, 6)  # Least Common Multiple of 4 and 6\n    return min_in_hour // (lcm // 4)  # Number of times they flash together in an hour\n\nimport math\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage games calculations\n    # Each group has 4 teams and there are 8 groups total.\n    # Every team plays 3 games in a round-robin within its group.\n    # Thus each group has 6 games (4 choose 2).\n    group_stage_games = 6 * 8\n\n    # Knockout stage games calculations\n    # After group stage, 16 teams are left. Then we have the following rounds:\n    # Round of 16, Quarter-finals, Semi-finals, Third-place play-off, and Final.\n    # Round of 16 will have 8 games, quarter-finals 4, semi-finals 2, third-place play-off 1, final 1.\n    knockout_stage_games = 8 + 4 + 2 + 1 + 1\n\n    # Total games played\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the drink\n    max_volume_per_glass = total_volume // 9  # Greatest volume in each glass before remainder\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    amount1 = 100\n    concentration1 = 50\n\n    amount2 = 400\n    concentration2 = 80\n\n    total_amount = amount1 + amount2\n    total_rice = (amount1 * concentration1 / 100) + (amount2 * concentration2 / 100)\n\n    concentration_of_new_mixture = (total_rice / total_amount) * 100\n\n    return concentration_of_new_mixture\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)\n    landscapes_french = 25\n    total_french = 40\n    still_lifes_french = total_french - landscapes_french\n    still_lifes = total_paintings - landscapes\n    still_lifes_not_french = still_lifes - still_lifes_french\n    return still_lifes_not_french\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_s = 300\n    time_min = time_s / 60\n    \n    distance_m = speed_m_per_min * time_min\n    \n    return int(distance_m)\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total = 0\n    for i in range(1, 2018):\n        total += int('2' * i)\n    last_five_digits = str(total)[-5:]\n    ans = sum(int(digit) for digit in last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay_for_one_horse = 12 * 15\n    days_for_20_horses = total_hay_for_one_horse / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1, 10):  # 1st digit cannot be 0\n        for j in range(0, 10):  # Loop for second digit\n            for k in range(0, 10):  # Loop for third digit\n                for l in range(0, 10):  # Loop for fourth digit\n                    original = i*1000 + j*100 + k*10 + l\n                    new_number = l*1000 + i*100 + j*10 + k\n                    if new_number - original == 4707:\n                        return original\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(1 - x))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age = 8\n    mother_age = 4 * sandra_age\n    diff_in_past = (mother_age - 2) - (sandra_age - 2)\n    return diff_in_past\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    years_later = 0\n    while True:\n        if (oliver_current_age + years_later) + (lin_current_age + years_later) == target_sum_age:\n            break\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    multiple = 35\n    while True:\n        if str(multiple).endswith('35') and sum(map(int, str(multiple))) == 35:\n            break\n        multiple += 35\n    return multiple\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n\n    initial_amount = 8 * y\n    spend_on_watch = 4 * y\n    spend_on_handbag = 20\n    spend_on_each_child = y - 5\n\n    equation = Eq(initial_amount, spend_on_watch + spend_on_handbag + 2 * spend_on_each_child)\n\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = [year for year in range(1904, 2000, 4)]\n    non_leap_years = [year for year in range(1901, 2000) if year not in leap_years]\n    days_in_leap_years = len(leap_years) * 366\n    days_in_non_leap_years = len(non_leap_years) * 365\n    total_days = days_in_leap_years + days_in_non_leap_years\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n\n    deposit_days = (total_days + 1) // 2\n    spend_days = total_days // 2\n\n    final_amount = initial_amount + (deposit_days * 10) - (spend_days * 8)\n\n    return final_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    numbers_less_than_100 = set(range(1, 100))\n    divisible_by_3 = set(range(3, 100, 3))\n    divisible_by_7 = set(range(7, 100, 7))\n\n    divisible_by_3_or_7 = divisible_by_3.union(divisible_by_7)\n\n    cannot_be_divided_exactly_by_3_or_7 = numbers_less_than_100 - divisible_by_3_or_7\n\n    return len(cannot_be_divided_exactly_by_3_or_7)\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    first_term = 1\n    last_term = 12\n    num_terms = 12\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # grams for one ten-pence coin\n    total_coins = 40 / 10  # since each coin is ten-pence, divide by 10 to get the number of coins\n\n    total_weight = weight_per_coin * total_coins\n\n    return total_weight\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    incorrect_deduction = 2\n    total_questions = 6\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_mark) - (incorrect_answers * incorrect_deduction) == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    adults = (total_people * ratio_adults) / total_ratio\n    return int(adults)\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let x be the number of buttons James originally has\n    # Then Nina has 22 - x buttons\n    # When Nina gives 4 buttons to James, they have equal amounts\n    # So James will have x + 4 buttons, and Nina will have (22 - x) - 4 buttons\n    # Setting the two expressions equal to each other gives us the equation:\n    # x + 4 = (22 - x) - 4\n    # Solving for x gives us the number of buttons James has originally:\n    x = (22 - 4 * 2) / 2\n    # Since Nina has more buttons, we subtract x from the total to get Nina's original count:\n    nina_original = 22 - x\n\n    return nina_original\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of mango, pear, and apple\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Given equations\n    eq1 = Eq(mango + pear, 3.40)\n    eq2 = Eq(mango + apple, 3.80)\n    eq3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (mango, pear, apple))\n    \n    # Retrieve the cost of a mango\n    mango_cost = solutions[mango]\n\n    return mango_cost\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n\n    # Since the distribution starts from the child with seat number 3,\n    # we subtract 2 from the total candies to make it as if we were starting from seat number 1\n    last_child_to_get = (total_candies - 2) % num_children\n\n    # If the remainder is 0, the last child to receive the candy is the 9th child,\n    # else it is the remainder itself (because we are treating it as 1-indexed)\n    return last_child_to_get if last_child_to_get != 0 else num_children\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    \n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # m/s\n    angle_degrees = 37  # degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n    \n    # Calculate the height using the conservation of energy principle\n    # Kinetic energy (initial) = Potential energy (at maximum height)\n    # (1/2)*m*v^2 = m*g*h  =>  h = (v^2) / (2*g)\n    # But this height is along the vertical, so we need to project it onto the slope\n    # vertical_height = height_along_slope * sin(angle), rearrange to find height_along_slope\n    vertical_height = (initial_speed ** 2) / (2 * g)\n    height_along_slope = vertical_height / math.sin(angle_radians)\n    \n    # Now calculate the distance it slid up the ramp\n    # This is the hypotenuse of the right-angled triangle with opposite side 'height_along_slope'\n    distance_along_ramp = vertical_height / math.sin(angle_radians)\n\n    # Return the height along the slope and distance along the ramp\n    return round(height_along_slope, 2), round(distance_along_ramp, 2)\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # Number of players\n    players = 64\n    # Since 4 players compete in one match, and only 1 winner proceeds,\n    # for every match, the number of players reduces by 3 (4-1=3).\n    # So the number of matches required will be (players - 1) / 3\n    matches = (players - 1) // 3\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Maximum balls Sheila can take out without having 2 groups of 4 balls of the same color:\n    # Take 3 blue, 3 orange, and 2 yellow (maximum without getting 4 of the same color) = 3 + 3 + 2 = 8 balls\n    # Next ball she takes out will guarantee her 4 balls of one color (either blue, orange, or yellow)\n    # To get a second group of 4 of the same color, \n    # she can then take out all remaining balls of the other two colors.\n    \n    # The remaining blue balls after the first 4 = 5 - 3 = 2\n    # The remaining orange balls after the first 4 = 4 - 3 = 1\n    # Since she needs another group of 4, she must take all remaining yellow balls,\n    # and either all blue or all orange to complete the second group.\n    \n    # Therefore, Sheila must take out additional 2 blue + 1 orange + 2 yellow = 5 balls\n    # Total balls to take out = first 8 balls + additional 5 balls = 13 balls\n\n    total_balls_to_take_out = 8 + 5\n    return total_balls_to_take_out\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                for l in range(0, 10):\n                    original_number = int(f\"{i}{j}{k}{l}\")\n                    new_number = int(f\"{j}{k}{l}{i}\")\n                    if new_number - original_number == 4707:\n                        return original_number\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming you want to know the equivalent price of a CD in St Petersburg,\n    # but no exchange rate or price of CD in St Petersburg is provided.\n    # With this missing information, the question cannot be accurately solved.\n    # However, assuming that the price of CD in St Petersburg is the same and no exchange rate is involved:\n    price_of_cd_england = 14\n    amount_spent_st_petersburg = 14\n    num_cds = amount_spent_st_petersburg // price_of_cd_england\n    return num_cds\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Check each age option\n    for age in [28, 39, 52, 84]:\n        # Work backwards from given conditions and check if they are true\n        if (age - 3)**0.5 % 1 == 0 and isprime(age + 1) and ((age + 12)**(1/3)) % 1 == 0:\n            return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Using the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is sum of first n terms, a is the first term, n is the number of terms, and d is the common difference\n    # We have two equations:\n    # 72 = 9/2 * (2a + (9 - 1)d) ... (1)\n    # 736 = 23/2 * (2a + (23 - 1)d) ... (2)\n\n    # From equation (1), we can express a in terms of d\n    # a = 72 / 9 - 4d\n\n    # Now we substitute this expression for a in equation (2)\n    # 736 = 23/2 * \\([2 * (72 / 9 - 4d)] + 22d\\)\n\n    # Simplify and solve for d\n    # After solving for d, use the value of d to find a\n    # Finally, use the values of a and d to find the sum of the first 16 terms with n = 16\n\n    # Solving for d\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    a_eq = (72 / 9) - 4 * d\n    eq2 = Eq(736, 23/2 * (2 * a_eq + 22 * d))\n\n    d_value = solve(eq2, d)[0]\n\n    # Solving for a using the value of d\n    a_value = (72 / 9) - 4 * d_value\n\n    # Calculating the sum of the first 16 terms\n    n = 16\n    S_16 = n/2 * (2 * a_value + (n - 1) * d_value)\n\n    return S_16\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Assume Bart takes all of one color first.\n    # Taking all 3 reds does not guarantee two different colors.\n    # Taking all 3 reds and 4 yellows guarantees that the next one will be brown.\n    # Minimum chips taken = all reds + all yellows + 1 brown = 3 + 4 + 1\n    ans = 3 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of levels Andrew climbs when Cassandra climbs 1 level.\n    # Let y be the number of levels Bernice climbs when Cassandra climbs 1 level.\n    # Cassandra climbs 10 - 6 = 4 levels while Bernice climbs from 3 to 6\n    # Cassandra climbs 19 levels from level 1 while Andrew needs to climb some levels to be determined.\n    \n    x, y = symbols('x y')\n\n    # When Cassandra climbs 4 levels (from 6 to 10), Bernice climbs 6 - 3 = 3 levels\n    equation1 = Eq(4 * y, 3)\n\n    # When Cassandra climbs 10 levels (from 1 to 10), Andrew climbs from 1 to 5\n    equation2 = Eq(10 * x, 4)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # When Cassandra is at level 19 (having climbed 18 levels), Andrew will be at:\n    andrew_level = 1 + 18 * solutions[x]\n\n    return andrew_level\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_op(a, b):\n        return a * b + a + b\n\n    # Given 2 ∨ (x ∨ 4) = 59, we need to find x\n    # Let's denote x ∨ 4 as y, so we can substitute and solve the equation step by step\n    # We have 2 ∨ y = 59\n    # According to the definition of the new operation ∨,\n    # we substitute y back with (x ∨ 4) and solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    y = new_op(x, 4)  # x ∨ 4\n    equation = Eq(new_op(2, y), 59)  # 2 ∨ (x ∨ 4) = 59\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    num_repeats = 43 // len(pattern)\n    remainder = 43 % len(pattern)\n\n    repeated_sum = sum(int(digit) for digit in pattern) * num_repeats\n    remainder_sum = sum(int(pattern[i]) for i in range(remainder))\n\n    total_sum = repeated_sum + remainder_sum\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    minutes_per_quiz = 30\n    total_quizzes = 4\n    total_minutes = minutes_per_quiz * total_quizzes\n    total_hours = total_minutes / 60\n    return total_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_per_kilometre = 100000\n    centimetres = kilometres * centimetres_per_kilometre\n    return centimetres\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    \n    return years\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for num_5p in range(0, 41, 5):\n        for num_10p in range(0, 41, 10):\n            if num_5p + num_10p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of one chair and t be the cost of one table\n    c, t = symbols('c t')\n\n    # According to the problem statement\n    equation1 = Eq(4*t + 9*c, 504)  # The total cost of tables and chairs\n    equation2 = Eq(t, 3*c)          # The cost of each table is the total cost of 3 chairs\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (c, t))\n\n    # Return the cost of the chair\n    return solutions[c]\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        product = 1\n        for d in digits:\n            product *= d\n        if product > 99 and product < 1000:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    total_flowers = 68\n    flowers_per_vase = 9\n    num_vases, remainder = divmod(total_flowers, flowers_per_vase)\n    \n    if remainder > 0:\n        num_vases += 1\n        \n    return num_vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 // 3 + 1) * 3\n    last_multiple = 81 // 3 * 3\n    count_multiples = (last_multiple - first_multiple) // 3 + 1\n    return count_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    import fractions\n    import math\n\n    # Evaluate the first expression: (7 / -3.333...) / (cube root of -0.027)\n    first_term_numerator = fractions.Fraction(7, -10) / fractions.Fraction(1, 3)\n    first_term_denominator = round(-0.027 ** (1./3), 15)  # Using round to handle floating-point arithmetic issues\n    first_term = first_term_numerator / first_term_denominator\n\n    # Evaluate the second expression: (2^3 / 4^2) / (0.125 * [1.8 - (0.2 * 7)])\n    second_term_numerator = fractions.Fraction(2**3, 4**2)\n    second_term_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_term = second_term_numerator / second_term_denominator\n\n    # Evaluate the third expression: (0.1 / repeating decimal) + (2 * 0.3)\n    # Convert repeating decimal 0.142857... to fraction\n    repeating_fraction = fractions.Fraction(1, 7)\n    third_term = fractions.Fraction(1, 10) / repeating_fraction + (2 * 0.3)\n\n    # Calculate the final answer\n    answer = first_term + second_term - third_term\n\n    return answer\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # After spending, Pip has 20% (100% - 80%) left, Bud has 25% (100% - 75%) left\n    equation2 = Eq((pip * 0.2) / (bud * 0.25), 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones = 78\n    february_sales = 13\n    january_sales = 22\n\n    # Calculate the remaining phones after February sales\n    half_remaining_after_feb = remaining_phones + february_sales\n    # Calculate the total phones before February sales\n    total_before_february = half_remaining_after_feb * 2\n\n    # Calculate the remaining phones after January sales\n    half_remaining_after_jan = total_before_february + january_sales\n    # Calculate the total phones before January sales\n    initial_phones = half_remaining_after_jan * 2\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_shared = 40 / 60\n    \n    # Shafur's speed\n    shafur_speed = 54\n    \n    # Samuel's speed\n    samuel_speed = 66\n    \n    # Distance travelled together by both drivers before Samuel turned back\n    distance_together = samuel_speed * time_shared\n    \n    # Shafur's remaining distance which he covered alone\n    shafur_remaining_distance = shafur_speed * time_shared \n    \n    # Since both reached at the same time and Samuel turned back,\n    # Samuel spent twice the time to cover the distance_together\n    # thus Shafur had enough time to cover his remaining distance\n    # and also the distance_together that Samuel took to return back to point X.\n    total_time_shafur = 2 * distance_together / shafur_speed\n    \n    # Total distance is the distance Shafur travelled at his speed for total_time_shafur\n    total_distance = shafur_speed * total_time_shafur\n    \n    return total_distance\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n    \n    # Let the number of pencils be x, then pens will be x + 50.\n    # According to the question, x + (x + 50) = 438\n    # 2x + 50 = 438\n    # 2x = 438 - 50\n    # 2x = 388\n    # x = 388 / 2\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n    total_apples = initial_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_red_packets = 4  # She wanted to give to four grandchildren\n    amount_per_packet = 70  # She wanted to put $70 in each packet\n    shortage = 15  # She would be short of $15\n\n    # Total amount she wanted to give is the amount per packet times the number of packets\n    total_amount_wanted = total_red_packets * amount_per_packet\n    # Amount she had is total amount wanted minus the shortage\n    amount_she_had = total_amount_wanted - shortage\n\n    return amount_she_had\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    average_Jan_to_Apr = 500\n    average_May_to_Jul = 300\n    total_Aug_to_Sep = 400\n    average_Oct_to_Dec = 300\n    \n    months_Jan_to_Apr = 4\n    months_May_to_Jul = 3\n    months_Aug_to_Sep = 2\n    months_Oct_to_Dec = 3\n\n    total_spent_Jan_to_Apr = average_Jan_to_Apr * months_Jan_to_Apr\n    total_spent_May_to_Jul = average_May_to_Jul * months_May_to_Jul\n    total_spent_Oct_to_Dec = average_Oct_to_Dec * months_Oct_to_Dec\n\n    total_spent_year = total_spent_Jan_to_Apr + total_spent_May_to_Jul + total_Aug_to_Sep + total_spent_Oct_to_Dec\n    average_per_month = total_spent_year / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):  # Start from 4 to 51 inclusive\n        count += str(i).count('3')\n        if i == 23:\n            ans = count  # Store the count when i reaches 23\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Summation of sequence from 3 to 10 using the formula: n/2 * (first_term + last_term)\n    first_half_sum = (10 - 3 + 1) * (3 + 10) / 2\n    # Summation of sequence from 3 to 6 using the formula: n/2 * (first_term + last_term)\n    second_half_sum = (6 - 3 + 1) * (3 + 6) / 2\n    # The second half sequence is counted twice, hence multiply by 2\n    total_sum = first_half_sum + 2 * second_half_sum\n    return int(total_sum)\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a one-on-one knockout tournament, the number of games is always one less than the number of players\n    # because in each game, one player is eliminated until only the winner remains.\n    number_of_players = 5\n    number_of_games = number_of_players - 1\n\n    return number_of_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of marbles each person has at the end\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Initial conditions based on the problem statements\n    initial_total = 168\n    betsy_to_anna = 8\n    charlene_to_betsy = 15\n\n    # Equations based on the given conditions\n    equation1 = Eq(anna + betsy_to_anna + charlene_to_betsy, 2/14 * initial_total)\n    equation2 = Eq(betsy - betsy_to_anna - charlene_to_betsy, 5/14 * initial_total)\n    equation3 = Eq(charlene, 7/14 * initial_total)\n    equation4 = Eq(anna + betsy + charlene, initial_total)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # Betsy's initial number of marbles is her final count plus what she gave to Anna and received from Charlene\n    initial_betsy = solutions[betsy] + betsy_to_anna + charlene_to_betsy\n\n    return initial_betsy\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the number 2016 into its prime factors\n    factors = factorint(2016)\n    # Since the children are of different ages and under 10,\n    # the only possible prime factors for their ages are 2, 3, and 7\n    # 2016 prime factorization is 2^5 * 3^2 * 7\n    # The ages of the children can be derived from the prime factorization\n    # considering that all are under 10 and their product is 2016.\n    # So, we can express 2016 as the product of four integers:\n    # 2^3 * 1, 2^2, 3, 7 (which are 8, 4, 3, and 7)\n\n    # Calculate the sum of the ages\n    sum_of_ages = 8 + 4 + 3 + 7\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Total students in the vertical line where Chris is standing\n    students_vertical = 7 + 4 - 1  # Chris is counted twice, hence subtract 1\n\n    # Total students in the horizontal line where Chris is standing\n    students_horizontal = 3 + 7 - 1  # Chris is counted twice, hence subtract 1\n\n    # Total students = Multiplication of students count in vertical and horizontal\n    total_students = students_vertical * students_horizontal\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed_since_then = 4 + 2\n    combined_future_age = combined_age_4_years_ago + 2 * years_passed_since_then\n    return combined_future_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence = symbols('ten_pence')\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n\n    total_money = Eq(5 * five_pence + 10 * ten_pence + 20 * twenty_pence, 1575)\n\n    num_ten_pence_coins = solve(total_money, ten_pence)[0]\n    num_twenty_pence_coins = 2 * num_ten_pence_coins\n\n    return num_twenty_pence_coins\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    nth = 12\n\n    common_difference = (nth_term - first_term) / (nth - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # each boy has as many sisters as brothers\n    equation1 = Eq(girls, boys - 1)\n    # each girl has half as many sisters as brothers\n    equation2 = Eq(boys, 2 * (girls - 1))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] + solutions[girls]\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Convert 30 minutes to hours, which is 0.5 hours\n    time_period = 30 / 60  # 0.5 hours\n\n    # First part\n    distance_first = x * time_period\n    # Second part\n    distance_second = (x - 20) * time_period\n    # Third part\n    distance_third = (x + 10) * time_period\n\n    # Total distance equation\n    total_distance_eq = Eq(distance_first + distance_second + distance_third, 70)\n\n    # Solve for x\n    solution = solve(total_distance_eq, x)\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    fraction_eaten = 3/5\n    remaining_weight = 60\n    original_mass = remaining_weight / (1 - fraction_eaten)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) / difference) + 1\n\n    return int(num_students)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    \n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number //= 6\n        base_6_number = str(remainder) + base_6_number\n    \n    return base_6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "from itertools import combinations\n\ndef solution():\n    apples = 27\n    children = 5\n    min_apples_for_most = None\n\n    for combo in combinations(range(1, apples), children - 1):\n        if sum(combo) < apples and len(set(combo)) == children - 1:  # Unique distribution\n            remaining = apples - sum(combo)\n            if min_apples_for_most is None or remaining < min_apples_for_most:\n                min_apples_for_most = remaining\n                \n    return min_apples_for_most\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    cost_per_person = 5.50\n    num_people = 6\n    tip_percentage = 10\n    total_bill = 50\n    \n    # Calculate the total cost of the meal\n    total_cost = cost_per_person * num_people\n    \n    # Calculate the total tip\n    total_tip = (tip_percentage / 100) * total_cost\n    \n    # Calculate the total paid\n    total_paid = total_cost + total_tip\n    \n    # Calculate the change received\n    change_received = total_bill - total_paid\n    \n    return change_received\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    return 60\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    # Initial distance climbed and the snail's position\n    distance_per_day = 4\n    distance_per_night = 2\n    distance_climbed = 0\n    day = 0\n\n    # Depth of the well\n    well_depth = 10\n\n    # While the snail hasn't climbed out of the well\n    while distance_climbed < well_depth:\n        # Add a day\n        day += 1\n        # The snail climbs up during the day\n        distance_climbed += distance_per_day\n\n        # Check if the snail has climbed out of the well during the day\n        if distance_climbed >= well_depth:\n            break\n\n        # The snail slides down during the night\n        distance_climbed -= distance_per_night\n\n    # The day the snail climbs out of the well\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Jason needs to take marbles in such a way that Belinda is always left with\n    # a multiple of 4 after her turn, so that Jason can eventually force Belinda\n    # to take the last marble. This is because no matter how many marbles Belinda takes,\n    # if she is always left with a multiple of 4, Jason can always take enough marbles\n    # to leave another multiple of 4.\n\n    # Total marbles\n    total_marbles = 26\n\n    # Jason's strategy is to leave a multiple of 4 for Belinda.\n    # Therefore, Jason should take marbles so that after his turn\n    # there are 25 (which is not a multiple of 4) marbles left.\n    # Then Belinda will be forced into a position where she will always leave\n    # a multiple of 4 after Jason's turn.\n\n    # To leave 25 marbles, Jason should take 1 marble.\n    marbles_to_take = 26 % 4   # 2 marbles would leave 24, 3 marbles would leave 23\n    \n    # Return the number of marbles Jason should take initially to win the game\n    return marbles_to_take\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5*n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic goes to three fixed bars at random,\n    # and is not at two of the bars, they must be at the third bar.\n    # Therefore, the probability is 100% or 1.\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    number = (three_sevenths * 7) / 3\n    five_sixths = (number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    # Three weeks is 21 days\n    end_date = start_date + timedelta(days=21)\n    \n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    pencil_cost = solutions[pencil]\n    marker_cost = solutions[marker]\n\n    total_cost = 7 * pencil_cost + 7 * marker_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # The problem can be formalized as the following linear equations:\n    # 120 cows * 12 weeks = Grass Growth Rate * 6 weeks + Initial Grass Amount\n    # 150 cows * 8 weeks = Grass Growth Rate * 6 weeks + Initial Grass Amount\n    # We need to find the number of cows (let's say x) that can be sustained for 6 weeks\n    # Such that: x cows * 6 weeks = Grass Growth Rate * 6 weeks + Initial Grass Amount\n    # By solving the system of equations, we can find the Grass Growth Rate and Initial Grass Amount\n    \n    from sympy import symbols, Eq, solve\n    \n    # Variables for Grass Growth Rate and Initial Grass Amount\n    growth_rate, initial_grass = symbols('growth_rate initial_grass')\n    \n    # Equation for 120 cows and 12 weeks\n    equation1 = Eq(120 * 12, growth_rate * 6 + initial_grass)\n    # Equation for 150 cows and 8 weeks\n    equation2 = Eq(150 * 8, growth_rate * 6 + initial_grass)\n    \n    # Solving the equations for growth_rate and initial_grass\n    solutions = solve((equation1, equation2), (growth_rate, initial_grass))\n    \n    # Extracting solution values\n    growth_rate_value = solutions[growth_rate]\n    initial_grass_value = solutions[initial_grass]\n    \n    # Equation for an unknown number of cows (x) for 6 weeks using the growth_rate and initial_grass\n    x = symbols('x')\n    equation3 = Eq(x * 6, growth_rate_value * 6 + initial_grass_value)\n    \n    # Solving for x\n    solution_x = solve(equation3, x)\n    \n    # Extracting the number of cows the pasture can sustain for 6 weeks\n    ans = solution_x[x]\n    \n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Initialize the count of boys and girls\n    boys = 0\n    girls = 0\n    \n    # Consider the square layer by layer from the outermost to the innermost\n    for layer in range(1000):  # Arbitrary large number to make sure we cover all possibilities\n        # Calculate the number of students at the current layer\n        students_at_layer = (layer * 4 + 1)**2 - (layer * 4 - 1)**2\n        \n        # If it's an even layer, we add to boys count, else to girls count\n        if layer % 2 == 0:\n            boys += students_at_layer\n        else:\n            girls += students_at_layer\n        \n        # If the difference between boys and girls is 55, break the loop\n        if boys - girls == 55:\n            break\n    \n    # The total number of students is the sum of boys and girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            ways.append(combo)\n    \n    ans = len(ways)\n    return ways, ans\n\nways, ans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    return (10 * 21) // 14\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbolic variables for the original amounts in Bags A and B\n    stickers_A, stickers_B = symbols('stickers_A stickers_B')\n\n    # Equation 1: The total number of stickers in both bags before moving any\n    equation1 = Eq(stickers_A + stickers_B, 270)\n\n    # Equation 2: The ratio of the number of stickers in Bag B to Bag A after moving 56 stickers\n    equation2 = Eq((stickers_B + 56) / (stickers_A - 56), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers_A, stickers_B))\n\n    # Extract the solution which is the initial number of stickers in Bag A\n    initial_stickers_A = solutions[stickers_A]\n\n    return initial_stickers_A\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets, remainder = divmod(children, bars_per_packet)\n    \n    if remainder > 0:\n        packets += 1\n\n    return packets\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let x be the number of volunteers, and y be the total number of trees\n    # We have the following equations from the problem description:\n    # x * 4 + 5 = y (each volunteer plants 4 trees and 5 trees are left)\n    # (x - 1) * 7 = y (if each of them plants 7 trees, one volunteer will have nothing to plant)\n    # So we need to solve these two equations\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x * 4 + 5, y)\n    equation2 = Eq((x - 1) * 7, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the number of volunteers and the number of trees\n    num_volunteers = solutions[x]\n    num_trees = solutions[y]\n\n    return num_volunteers, num_trees\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    percentage = 5\n    total = 180\n\n    ans = (percentage * total) / 100\n\n    return ans\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        return sum([i for i in range(1, number) if number % i == 0])\n    \n    n = 2\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    terms = [30, -28, 26, -24, 22, -20, 18, -16, 14]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    an = 31  # 10th term\n    difference = 3  # Common difference\n    \n    a1 = an - (nth_term - 1) * difference  # Formula to find the first term\n\n    return a1\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sister_sweets = 6\n    num_friends = 6\n\n    sweets_for_friends = (total_sweets - sister_sweets) // num_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had 3998 muffins altogether\n    equation1 = Eq(lovelle + makayla, 3998)\n\n    # After transactions, Lovelle and Makayla had an equal number of muffins\n    equation2 = Eq(lovelle - 462, makayla - (2 / 5) * makayla)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_amount = symbols('initial_amount')\n    book_cost = initial_amount / 4\n    bag_cost = 2 * initial_amount / 7\n    total_cost = 225\n    \n    equation = Eq(book_cost + bag_cost, total_cost)\n    \n    solution = solve(equation, initial_amount)\n    \n    return solution[0]\n    \nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    return 30 // 2 + 1\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap = 1.1\n    total_gaps = num_daffodils - 1  # Because the row begins and ends with a daffodil\n    total_length = total_gaps * gap + 1 * (num_daffodils - 2) # The length of the daffodil itself is negligible except at the ends\n\n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    num_pieces = 30\n    \n    length_per_piece = ribbon_length / num_pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    # We want to make sure that even in the worst-case scenario of picking the maximum number\n    # of cards from each color except the one we end up with 10 cards of the same color,\n    # we still want to guarantee that the next card we pick will be the 10th card of that color.\n    \n    # We can take at most 9 cards from each color without getting 10 of the same color.\n    # So we take 9 cards from each of the three colors with the least number of cards \n    # and then one more from any color to guarantee 10 of the same color.\n    \n    max_cards_without_10_of_same = (9 * 3)\n    \n    # Selecting one more card will ensure we have 10 of the same colour\n    at_least_to_get_10_of_same = max_cards_without_10_of_same + 1\n    \n    return at_least_to_get_10_of_same\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # since the boxes are identical, we only need to consider combinations such that\n    # the number of stickers in the first box is less than the second, which is less than the third\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # ensure no box has the same amount and each box has less than 9 stickers\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n    ways = 0\n\n    for boys_count in range(1, group_size + 1):\n        girls_count = group_size - boys_count\n        if girls_count <= total_girls:\n            ways += comb(total_boys, boys_count) * comb(total_girls, girls_count)\n\n    return ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1 / 2) * (16 * 4 / 1)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = (pears + strawberries) // friends\n    return total_fruits\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount Jane drinks\n    x = symbols('x')\n    # Alex drinks 50% more than Jane\n    equation = Eq(x + x * 1.5, 150)\n\n    # Solve for x\n    jane_amount = solve(equation, x)[0]\n    # Calculate Alex's amount\n    alex_amount = jane_amount * 1.5\n    \n    return alex_amount\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes_needed = distance / speed\n    return minutes_needed\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    number_of_boxes = total_cakes // cakes_per_box\n    return number_of_boxes\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    ans = x * y\n    return ans\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits = 157\n    total_pages = 0\n    page = 1\n\n    while digits > 0:\n        page_digits = len(str(page))\n        digits -= page_digits\n        if digits >= 0:\n            total_pages += 1\n        page += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate through odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:  # Check if divisible by both 3 and 7\n            return num  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total length of the road is (number of gaps * distance between trees)\n    total_length = (41 - 1) * 3\n    \n    # Number of lamp posts = (total length of road / distance between lamp posts) + 1\n    num_lamp_posts = (total_length // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    possibilities = []\n    for digit1 in range(10):\n        for digit2 in range(10):\n            price = int(f\"{digit1}679{digit2}\")\n            if price % 72 == 0:\n                possibilities.append(price // 72)\n\n    ans = min(possibilities)  # Assuming we want the smallest valid unit price\n    return ans\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of candies, class A students, and class B students\n    candies, students_b = symbols('candies students_b')\n\n    # Number of students in class A is twice of class B\n    students_a = 2 * students_b\n\n    # Set up equations based on the problem statement\n    # Each student in class A gets 4 candies, 20 more candies needed\n    # Each student in class B gets 6 candies, 16 candies left\n    equation1 = Eq(candies, 4 * students_a + 20)\n    equation2 = Eq(candies, 6 * students_b - 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if sum(map(int, str(number))) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    result = 208 // 8\n    return result\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    total_money = symbols('total_money')\n\n    # Let total_money be the total amount of money Bud had originally\n    # She spent 1/4 on a book, so she has 3/4 of her money left\n    money_after_book = total_money * (3/4)\n\n    # She then spends 2/5 of the remaining money on a bag\n    money_spent_on_bag = money_after_book * (2/5)\n    \n    # The amount spent on the bag is given to be £60\n    equation = Eq(money_spent_on_bag, 60)\n    \n    # Solve for total_money\n    initial_money = solve(equation, total_money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    # Number of intervals is one more than the number of potted plants\n    # because there's an empty space at each end of the row of potted plants.\n    intervals = 21\n    potted_plants = intervals - 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    dvd_cost = total_money / 3\n    remaining_after_dvd = total_money - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n    \n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(1, years + 1):\n        initial_rabbits *= 3  # Rabbits multiply by 3 each year\n        initial_rabbits = initial_rabbits // 2  # Wolves eat half the rabbits each year\n\n    ans = initial_rabbits\n    \n    return ans\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60\n    time_for_second_mile = 1 / 30\n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2\n    \n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    money_per_wash = 1.40\n    desired_amount = 12\n    num_washes = (desired_amount // money_per_wash) + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_eaten_first_day = 2\n    day_number = 4\n    ans = candies_eaten_first_day * (2 ** (day_number - 1))\n    return ans\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40          # speed of the train in meters per second\n\n    time_to_pass = train_length / speed  # time in seconds\n\n    return time_to_pass\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    number_of_days = 6  # Monday to Saturday\n\n    total_earnings = daily_earnings * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    a = symbols('a')\n    eq1 = Eq(290 % a, a)\n    eq2 = Eq(235 % a, a + 2)\n    eq3 = Eq(200 % a, a + 5)\n  \n    res = solve((eq1, eq2, eq3), a)\n    ans = 0\n    for r in res:\n        if r.is_integer and r > 1:\n            ans = 290 - r\n            break\n    return ans\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the smaller unknown angle\n    # therefore, 2x is the larger unknown angle\n    x = symbols('x')\n\n    # equation representing the sum of angles in a triangle (180 degrees)\n    equation = Eq(x + 2*x + 90, 180)\n\n    # solve for x\n    x_value = solve(equation, x)\n\n    # the largest angle between the two unknown angles is 2x\n    largest_angle = 2 * x_value[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    n = 9\n    # Since the ages are consecutive numbers, we can use the formula for the sum of an arithmetic series:\n    # total_sum = n/2 * (first_term + last_term)\n    # And because the numbers are consecutive and n is odd, the middle number is also the average of the sequence\n    # Therefore, middle_term = total_sum / n\n    middle_term = total_sum // n\n    \n    return middle_term\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    total_sunshine_on_sunday = 10\n    total_sunshine_for_week = total_sunshine_for_six_days + total_sunshine_on_sunday\n    average_sunshine_for_week = total_sunshine_for_week / 7\n    return average_sunshine_for_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n\n    walk_time_full = 24  # minutes\n    distance_full = walking_speed * walk_time_full  # the full distance to school\n\n    half_distance = distance_full / 2  # the half distance\n\n    # Time to cover half the distance while walking\n    walk_time_half = half_distance / walking_speed\n    \n    # Time to cover half the distance while running\n    run_time_half = half_distance / running_speed\n\n    total_time_half_walk_half_run = walk_time_half + run_time_half\n    \n    return total_time_half_walk_half_run\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total savings Kim had initially\n    x = symbols('x')\n\n    # According to the problem, Kim gave 1/3 of her savings to her mother\n    given_to_mother = x / 3\n\n    # She spent $177 on dresses and $129 on a pair of earrings\n    total_spent = 177 + 129\n\n    # The amount left is 1/2 of what she gave her mother\n    amount_left = given_to_mother / 2\n\n    # Now, set up the equation:\n    # initial savings - given to mother - total spent - amount left = 0\n    equation = Eq(x - given_to_mother - total_spent - amount_left, 0)\n\n    # Solve the equation for x\n    savings = solve(equation, x)\n\n    return savings[0] # Return the total savings Kim initially had\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Since the baskets are identical, we just need to find the partitions of 6\n    # i.e, find (x, y, z) such that x + y + z = 6 and x >= y >= z\n    # This is similar to finding the number of integer partitions of 6 into at most 3 parts\n    count = 0\n    for x in range(7):  # x can be 0 to 6\n        for y in range(x+1):  # y should be less than or equal to x\n            for z in range(y+1):  # z should be less than or equal to y\n                if x + y + z == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    numerator = 3\n    denominator = 100\n    decimal = whole_number + numerator / denominator\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    # Find all possible values of N that give a remainder of 11 when 2018 is divided by N\n    possible_values_of_N = []\n\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            possible_values_of_N.append(N)\n\n    # Sum all possible values of N\n    N_sum = sum(possible_values_of_N)\n\n    return N_sum\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n\n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_day\n\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):  # There can't be more than 8 chickens since there are 8 animals in total\n        cows = 8 - chickens\n        if (chickens * 2 + cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_length = 320\n\n    # since there are no trees at either end, \n    # we have to consider the intervals between the trees rather than the number of trees\n    # There are total_trees - 1 intervals between total_trees\n    distance_between_each_tree = total_length / (total_trees + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    remainder = total_length % cut_length\n\n    return remainder\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n\n    ans = []\n    for number in range(30, 61):\n        if (number - first_term) % common_difference == 0:\n            ans.append(number)\n\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n    return int(number[2022])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_possible_students = total_sweets // min_sweets_per_student\n\n    for class_size in range(1, max_possible_students + 1):\n        if total_sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let T be the variable we are looking to find.\n    T = symbols('T')\n    \n    # First, calculate the income tax for the first $50,000.\n    tax_for_first_50k = 0.08 * 50000\n    \n    # The remaining income above $50,000.\n    remaining_income = 150000 - 50000\n    \n    # Total tax paid is $15,000.\n    total_tax_paid = 15000\n    \n    # Write an equation for the tax paid on the remaining income.\n    # Total tax = tax for first $50,000 + tax for remaining income.\n    tax_for_remaining_income = (0.08 + T / 100) * remaining_income\n    \n    # The total tax paid is the sum of both taxes.\n    equation = Eq(tax_for_first_50k + tax_for_remaining_income , total_tax_paid)\n    \n    # Solve the equation for T.\n    solving_for_T = solve(equation, T)\n    \n    return solving_for_T[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    unanswered = 1\n    answered_questions = total_questions - unanswered\n\n    for correct in range(answered_questions + 1):\n        incorrect = answered_questions - correct\n        if (correct * 4 - incorrect * 2) == 66:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10) # After Rachel gives Alice 10 candies\n    equation2 = Eq((rachel - 8) / (alice - 8), 3) # After they both eat 8 candies, Rachel has 3 times more than Alice\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Pigeonhole principle: if 432 boys are distributed over 31 days,\n    # then at least one day must have at least ceil(432/31) boys.\n    min_boys_per_day = -(-total_boys // days_in_january)  # Ceiling division\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # There are three options for the first digit (2, 3, or 4)\n    # There are two options left for the second digit after choosing the first one\n    # There is only one option left for the third digit after choosing the first two\n\n    first_digit_options = 2  # Only 2 and 3 are valid leading digits, 0 is not\n    second_digit_options = 2  # After picking the first digit, we have two choices left\n    third_digit_options = 1  # Only one option is left after picking the first two\n    \n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    num_other_cars = 31 - 1\n    space_between_cars = 5\n    total_space_between = space_between_cars * 31\n\n    total_length = first_car_length + (other_car_length * num_other_cars) + total_space_between\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Known terms of the sequence\n    term7 = 105  # 7th term\n    term8 = 120  # 8th term\n    term9 = 135  # 9th term\n\n    # Calculate the common difference of the arithmetic sequence\n    difference = term8 - term7  # or term9 - term8\n\n    # The first term is unknown, but we can calculate it based on the 7th term\n    first_term = term7 - 6 * difference\n    \n    # Calculate the 100th term using the formula of arithmetic sequence\n    term100 = first_term + (100 - 1) * difference\n    \n    return term100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    remaining_chocolates = total_chocolates - chocolates_given_away\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for p in permutations(cards):\n        if p[0] != '0' and int(''.join(p)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = 'ABCDEFG'\n\n    # Iterate through all permutations of 7 students\n    for perm in permutations(students):\n        # Convert tuple to list to check conditions\n        perm = list(perm)\n\n        # Check if D and E are next to each other\n        if abs(perm.index('D') - perm.index('E')) != 1:\n            continue\n\n        # Check if A is in the middle of B and C, not necessarily next to each other\n        A_index = perm.index('A')\n        B_index = perm.index('B')\n        C_index = perm.index('C')\n\n        if not (A_index > B_index and A_index < C_index) and not (A_index < B_index and A_index > C_index):\n            continue\n\n        # If both conditions are met, count as a valid arrangement\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Sarah's ratio being 3, and she received 12 sweets\n    sarah_ratio = 3\n    sarah_sweets = 12\n    \n    # Calculate the total ratio for Sue, Sarah, and Ian\n    total_ratio = 2 + sarah_ratio + 5\n    \n    # Calculate the number of sweets per ratio unit\n    sweets_per_ratio = sarah_sweets / sarah_ratio\n    \n    # Calculate the total sweets\n    total_sweets = sweets_per_ratio * total_ratio\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost_pence = 7 * 73\n    cakes_cost_pence = 9 * 113\n    \n    total_cost_pence = biscuits_cost_pence + cakes_cost_pence\n    total_cost_pounds = total_cost_pence / 100\n    \n    change = 20 - total_cost_pounds\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    initial_difference = 40\n\n    # Sam had 40 more stickers than Peter initially\n    equation1 = Eq(sam, peter + initial_difference)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_after_giving = sam - 0.20 * sam\n\n    # Peter received 20% of Sam's stickers\n    peter_after_receiving = peter + 0.20 * sam\n\n    # Peter gave 25% of his new total stickers to Sam\n    sam_final = sam_after_giving + 0.25 * peter_after_receiving\n\n    # Sam now had 96 stickers more than Peter\n    peter_final = peter_after_receiving - 0.25 * peter_after_receiving\n\n    # The final equation representing the stickers difference\n    equation2 = Eq(sam_final - peter_final, 96)\n\n    # Solving the equation system\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    # Total number of combinations is the product of the number of tops and bottoms\n    total_combinations = tops * bottoms\n    \n    # Jessie's method is incorrect because she added instead of multiplying\n    return total_combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finished = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch lasted for 20 minutes\n    lunch_start = lunch_finished - timedelta(minutes=20)\n    \n    # Watched television for 20 minutes before lunch\n    tv_end = lunch_start\n    tv_start = tv_end - timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home\n    play_end = tv_start\n    home_arrival = play_end - timedelta(minutes=10)\n    \n    # Format home arrival time to hours and minutes\n    home_arrival_time = home_arrival.strftime(\"%H:%M\")\n    \n    return home_arrival_time\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40 PM\", \"%I:%M %p\")\n\n    duration = timedelta(hours=2, minutes=40)\n\n    leave_time = arrival_time + duration\n\n    return leave_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # For the 3-digit numbers, we can have the following placements:\n    # (X, X, X), with each X being one of the non-zero digits (2, 1, 7)\n    # and we can arrange these in 3! (factorial 3) ways.\n    three_digit_arrangements = factorial(3)\n    \n    # For the 4-digit numbers, we have the following placements:\n    # (X, X, X, X), with each X being one of the digits (2, 0, 1, 7)\n    # However, the first place can't be 0, so we have 3 choices for the first place,\n    # and then we can arrange the remaining ones in 3! (factorial 3) ways.\n    four_digit_arrangements = 3 * factorial(3)\n    \n    # The total number of 3-digit and 4-digit numbers that can be formed is then\n    # the sum of the arrangements for each case.\n    total_numbers = three_digit_arrangements + four_digit_arrangements\n    return total_numbers\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = (6 + 1/2) / (1/2)\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (first_term + last_term) * number_of_terms // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    total_nines = 0\n    page = 0\n    while total_nines < 181:\n        page += 1\n        total_nines += str(page).count('9')\n    return page - 1  # Subtract one because we stop after passing 181 nines\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    equation = Eq((initial_crystals / 2 + 10) + 20 - 14, initial_crystals - 35)\n\n    sol = solve(equation, initial_crystals)\n\n    return sol[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2\n\n    # As there are 2 grey rabbits in the pattern, we need to find out how many patterns there are\n    patterns = grey_rabbits / pattern_grey\n\n    # Each pattern has 1 black, 2 white, and 2 grey rabbits\n    total_rabbits_in_pattern = 1 + 2 + 2\n\n    # Total rabbits is the number of patterns times rabbits in one pattern\n    total_rabbits = patterns * total_rabbits_in_pattern\n\n    return int(total_rabbits)\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    from itertools import permutations\n\n    # Create all permutations of the given digits\n    digits = [0, 1, 5, 8]\n    all_permutations = permutations(digits, 3)\n\n    # Filter out permutations starting with 0, as they don't form a three-digit number\n    valid_permutations = [perm for perm in all_permutations if perm[0] != 0]\n\n    # Create numbers from the permutations and find the max and min\n    numbers = [int(''.join(map(str, perm))) for perm in valid_permutations]\n    max_number = max(numbers)\n    min_number = min(numbers)\n\n    # Calculate the difference\n    difference = max_number - min_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a_students = 12\n    class_b_students = 15\n    class_c_students = 18\n\n    # Calculating Greatest Common Divisor (GCD) for the three classes\n    gcd_ab = gcd(class_a_students, class_b_students)\n    gcd_abc = gcd(gcd_ab, class_c_students)\n\n    # The number of students each group will have\n    return gcd_abc\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    count = 0\n\n    for perm in permutations(digits):\n        if perm[-1] in '24':  # Last digit must be even\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(180)\n    count = sum(1 for factor in factors if factor % 9 == 0)\n    \n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n\n    u_value = solve(equation, u)\n\n    return u_value[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds_to_pence = 200  # £2 to pence\n    single_price = 12      # cost per single sweet in pence\n    bulk_price = 30        # cost for three sweets in pence\n    bulk_quantity = 3      # number of sweets in bulk purchase\n\n    # Calculate the maximum number of sweets by buying in bulk\n    max_bulk_purchases = pounds_to_pence // bulk_price\n    remaining_pence = pounds_to_pence % bulk_price\n\n    # Calculate any additional sweets that can be bought with the remaining pence\n    additional_sweets = remaining_pence // single_price\n\n    # Total maximum number of sweets\n    max_sweets = (max_bulk_purchases * bulk_quantity) + additional_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    balls = 10 - 7 # Subtracting one ball for each box to satisfy the condition of at least one ball per box\n    boxes = 7 - 1 # The remaining boxes after placing one ball in each\n\n    ans = comb(balls + boxes, boxes)\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Analyze the game and derive the strategy.\n    # If Felix goes first and gets the game to a state where there are 3 candies left\n    # after John's turn, then Felix can ensure victory by eating 2 candies and\n    # leaving one candy for John, forcing him to eat the last candy and lose.\n    # Work backwards from the win condition (3 candies after John's turn):\n    # Felix(1st) -> John -> Felix -> John -> Felix(2nd) -> John -> Felix(3rd) -> John\n    # If Felix uses his turns to eat the following candies, he wins:\n    # First turn: 1, Second turn: 2, Third turn: 2.\n    # This way, after 3 full rounds (6 turns), there will be 2 candies left, and\n    # Felix can eat them both, no matter what John does.\n\n    # The final answer will be whether Felix should start first or not.\n    # From the strategy analysis, yes, Felix should go first.\n    \n    felix_should_go_first = True\n    return felix_should_go_first\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water needed to fill the tank\n    x = symbols('x')\n\n    # If he uses a 5-litre pail, 4 litres of water will overflow\n    equation1 = Eq(x + 4, 5)\n\n    # If he uses a 3-litre pail, he needs another 4 more pails of water\n    equation2 = Eq(x, 3 * 5)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n\n    num_pipes_needed = -(-pipe_length // each_pipe_length) # Ceiling division\n\n    return num_pipes_needed\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        times_underlined = (num % 2 == 0) + (num % 3 == 0) + (num % 4 == 0)\n        if times_underlined == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages = 0\n    count = 0\n    while count < 28:\n        pages += 1\n        count += str(pages).count('3')\n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount // 3  # Since Zoey has twice as much left\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == brother_amount * 2:\n            return coin\n\n    return None\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age = 7\n    may_age_future = 10\n    kenny_age_diff = 2\n\n    # Let k represent Kenny's current age and b represent his brother's age\n    k, b = symbols('k b')\n\n    # The sum of the ages of Kenny's younger brother and himself when May is 10\n    # will be 3 times May's age when she's 10\n    equation = Eq((k + may_age_future - may_age) + (b + may_age_future - may_age), 3 * may_age_future)\n\n    # Kenny is 2 years older than his younger brother\n    age_difference = Eq(k - b, kenny_age_diff)\n\n    # Solve for Kenny and his brother's current age\n    ages = solve((equation, age_difference), (k, b))\n\n    # Calculate how much older Kenny is than May\n    kenny_age = ages[k]\n    kenny_may_age_diff = kenny_age - may_age\n\n    return kenny_may_age_diff\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "def solution():\n    from math import comb\n\n    # Calculate the number of ways to pick 4 girls from 8 and 3 boys from 12\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    # The total number of different ways to pick the students\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Averages multiplied by the count give the total sum of those numbers.\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n\n    # Overall sum when adding all the averages to include all numbers.\n    total_sum = sum(sums)\n\n    # Since each number is counted in four of the sums, the total sum should be divided by 4 to get the sum of all 5 numbers.\n    overall_sum = total_sum // 4\n\n    # The largest whole number is the overall sum minus the smallest total of four numbers\n    largest_number = overall_sum - min(sums)\n\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    # Time of the first bus\n    first_bus_hour = 15\n    first_bus_minute = 55\n    \n    # Time you arrive if 4 minutes late\n    late_minute = first_bus_minute + 4\n    if late_minute >= 60:\n        first_bus_hour += 1\n        late_minute -= 60\n    \n    # Time of the second bus\n    second_bus_hour = 16\n    second_bus_minute = 35\n    \n    # Calculate waiting time in minutes\n    waiting_hours = second_bus_hour - first_bus_hour\n    waiting_minutes = second_bus_minute - late_minute\n    total_waiting_time = waiting_hours * 60 + waiting_minutes\n    \n    return total_waiting_time\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let the original number of boys be b and number of girls be g.\n    # According to the problem statement, after removing 1/11 of the boys and 5 girls,\n    # the number of boys and girls will become the same.\n    # This results in the equations:\n    # b + g = 152 (total number of students)\n    # b - (1/11)*b = g - 5 (number of boys and girls are the same after removal)\n    #\n    # Simplifying the second equation, we get:\n    # (10/11)*b = g - 5\n    #\n    # Now we can substitute g from the first equation into the second to solve for b.\n\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    g = 152 - b\n    equation = Eq((10/11)*b, g - 5)\n    original_number_of_boys = solve(equation, b)\n\n    return original_number_of_boys[0]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    # Number of intervals is one less than the number of trees\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    \n    lorries_needed = (workers + lorry_capacity - 1) // lorry_capacity\n    \n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    return solutions[men] + solutions[women]\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_next_four_days * 4) + pages_last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number, _ = solve_congruence(*congruences)\n    while number < 200:\n        if number >= 100:\n            return number\n        number += 4 * 5 * 9\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Initialize sum of students as None\n    total_students = None\n    \n    # Assume n = total number of rooms\n    # According to the question:\n    # 4 * n + 6 (students) = 5 * (n - 1) + 5 (empty room can accommodate 5 students)\n    \n    # We create a range where n is feasible, \n    # the school would not have an outrageous number of rooms, hence the upper limit 1000\n    for n in range(1, 1000):\n        if 4 * n + 6 == 5 * (n - 1) + 5:\n            total_students = 4 * n + 6\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die2 != die3 and die1 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while sum(grandsons_ages) != bill_age:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9  # The total sum of seven numbers with an average of 9\n    total_sum_remaining = 6 * 10  # The total sum of remaining six numbers with an average of 10\n\n    removed_number = total_sum_initial - total_sum_remaining  # The number that was removed\n\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_still_at_party = total_people - people_left\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    \n    aytown_interval = 15\n    beeville_interval = 12\n    ceeford_interval = 8\n    \n    least_common_multiple = lcm(aytown_interval, beeville_interval, ceeford_interval)\n    \n    hours = least_common_multiple // 60\n    minutes = least_common_multiple % 60\n    \n    next_time_hour = 10 + hours\n    next_time_minute = minutes\n    \n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    wrong_deduction = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + incorrect_answers * wrong_deduction == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Maximum number of students not playing at least one sport\n    max_no_single_sport = total_students - (swimmers + cyclists + table_tennis_players - total_students)\n    \n    # Minimum number of students playing all three sports is the number of students in excess \n    # when each group is accounted for once in the 52 students\n    min_all_three = total_students - max_no_single_sport\n\n    return min_all_three\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    ans = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30  # time taken to pass the tree in seconds\n    length_train = 360  # length of the train in meters\n    \n    # Speed = Distance / Time\n    speed_train = length_train / time_seconds  # speed in meters per second\n    \n    # Convert speed from m/s to km/h (1 m/s = 3.6 km/h)\n    speed_train_kmh = speed_train * 3.6\n    \n    return speed_train_kmh\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colours, we draw marbles considering the worst case\n    # Worst case: the most abundant colours are drawn before getting one of each colour.\n\n    # 1. Draw all red marbles (the most abundant): 12 red\n    # 2. Then draw all blue marbles: 12 red + 9 blue\n    # 3. Then draw all yellow marbles: 12 red + 9 blue + 8 yellow\n    # At this point, we have 3 colours. To guarantee the 4th color (one green),\n    # we need to draw one more marble: 12 red + 9 blue + 8 yellow + 1 green\n    \n    # Total marbles drawn to ensure 4 marbles of different colours:\n    total_drawn = 12 + 9 + 8 + 1\n\n    return total_drawn\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Add the number of choices for each type of restaurant\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Let's assume n is the total number of people standing in the circle\n    # Since the numbers on the circle go up by 2 (even numbers),\n    # if person 10 is directly opposite to person 24, it means halfway around the circle we have 7 more numbers \n    # (since 24 - 10 = 14 and every number represents a 2 increment)\n    # Therefore, n / 2 = 7 persons\n    # which implies n = 7 * 2 = 14 persons in the circle\n\n    # Total number of people playing the game\n    total_people = 7 * 2\n\n    return total_people\n\n# call the function and store the result in the variable ans\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery = 0.20 * pocket_money\n    savings_plus_food = pocket_money - books_stationery\n    savings = (savings_plus_food / 4) - 6\n    savings_percent = (savings / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    ans = 7.72 - 7.54\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    import math\n    time_A = 24\n    time_B = 64\n    lcm_time = (time_A * time_B) // math.gcd(time_A, time_B)\n    return lcm_time\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n    for i in range(3267, 5121):\n        nums = set(str(i))\n        if len(nums) == len(str(i)) and nums.issubset({'1', '2', '3', '4', '5', '6'}):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for num in range(10, 100):\n        if 75 % num == 0 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_answer = 50\n    correct_subtrahend = 14\n\n    minuend = incorrect_answer + incorrect_subtrahend\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40 - i * 2 - (38 - i * 2) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4\n    apples_left = 20\n\n    original_apples = justin_ate + sisters_ate + apples_left\n\n    return original_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    P = 5000\n    A = 7320.5\n    n = 4\n\n    # Formula for compound interest A = P * (1 + r/n)^(nt)\n    # Since the interest is compounded annually, n = 1\n    # A = P * (1 + r)^4 and we can solve this for r\n\n    # We can iterate over plausible interest rates r and calculate the accumulated\n    # amount A until the calculated A is close enough to the given A (7320.5).\n    # Since we're given approximations for 1.2^3 and 1.1^4, we can assume the interest rate\n    # is between 10% (0.10) and 20% (0.20). Incrementing by a small step, we can find the interest rate.\n\n    r = 0.10  # start checking from an interest rate of 10%\n    while r <= 0.20:  # go up to an interest rate of 20%\n        A_calculated = P * (1 + r)**n\n        if round(A_calculated, 2) == round(A, 2):  # if the calculated amount matches the given amount\n            return round(r, 4)  # return the interest rate and round to 4 decimal places as a percentage\n        r += 0.0001  # increment rate in small steps to find approximate match\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # The scenario describes an initial square of side s, \n    # so the original number of soldiers is s^2.\n    # After 31 soldiers join, the formation becomes a rectangle \n    # of dimensions (s+1) and (s+1) i.e., (s+1)^2 total soldiers.\n    # This new formation has s^2 + 31 soldiers.\n    # Therefore, (s+1)^2 - s^2 = 31 -> 2s + 1 = 31 -> s = 15\n\n    s = 15  # Found from the equation\n    new_total = (s + 1) ** 2  # Calculating the total number of soldiers now\n    \n    return new_total\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # Given 3/x of 56 = 21\n    # We need to solve for x\n    # so, (3/x) * 56 = 21\n    # x can be found by rearranging the equation to x = (3 * 56) / 21\n    \n    x = (3 * 56) / 21\n    return int(x)\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    result = (3.2 + 6.77 + 8.88) * (6.77 + 8.88 + 6.3) - (3.2 + 6.77 + 8.88 + 6.3) * (6.77 + 8.88)\n    return result\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time_available = 80  # total time in minutes (1 hour 20 minutes)\n    number_of_pictures = total_time_available / time_for_one_picture\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n    february_savings = total_savings - january_savings - march_savings\n    return february_savings\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Since each of the other five children should get at least one apple,\n    # we will distribute one apple to each of the other five children.\n    apples_for_other_children = 5 * 1\n\n    # Subtract the number of apples given to other children from the total number of apples\n    # to find out how many apples Ann can get at most.\n    ans = 30 - apples_for_other_children\n    return ans\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        num1 = int(''.join(perm[:3]))\n        num2 = int(''.join(perm[3:5]))\n        num3 = int(''.join(perm[5:]))\n        if num2 == 2 * num1 and num3 == 4 * num1:\n            return num3\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    pants_outfits = shirts * pants * shoes\n    dress_outfits_with_shoes = dresses * shoes\n    dress_outfits_with_heels = dresses * heels\n    \n    total_outfits = pants_outfits + dress_outfits_with_shoes + dress_outfits_with_heels\n    \n    return total_outfits\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # The highest common factor is 75, which can be factorized into prime factors as 3^1 * 5^2.\n    # The number of factors can be determined by (a+1)(b+1)... for prime factorization p^a * q^b * ...\n    \n    # Since HCF of M and N is 75, both M and N are in the form of 3^x * 5^y.\n    # M has 12 factors, so (x+1)(y+1)=12, and potential pairs for M are (1,11), (2,5) excluding the common factor.\n    # However, x and y should be at least 1 and 2 respectively because of the HCF.\n    # Only the pair (2,5) satisfies this condition because it takes the form (x+1)(y+1)=(2+1)(5+1)=3*6=18, \n    # but 6 counts the common factors, and excluding the common factor (counting only increments over the HCF), we're left with 12 factors for M.\n    # Hence the prime factorization of M is 3^3 * 5^5.\n    \n    # N has 10 factors, so (x+1)(y+1)=10, and potential pairs for N are (1,9), (2,4), excluding the common factor.\n    # Only the pair (1,9) satisfies the condition to have at least the same powers as the HCF (3^1 * 5^2) and the only increment is for the power of 5.\n    # Hence the prime factorization of N is 3^1 * 5^9.\n    \n    # Calculating M and N\n    M = (3 ** 3) * (5 ** 5)\n    N = (3 ** 1) * (5 ** 9)\n\n    # Sum of M and N\n    ans = M + N\n    return ans\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    difference_kg = sand_mass_g // 1000\n    difference_g = sand_mass_g % 1000\n\n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons Nina has originally\n    # Then James has 22 - x buttons\n    # According to the problem, when Nina gave 4 buttons to James, they both have the \n    # same number of buttons, which leads to the equation: x - 4 = (22 - x) + 4\n    # Simplify the equation to find the value of x\n    x = (22 + 4 + 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        for j in range(1, i):\n            ans += j / i\n    ans += 1  # Adding the first term explicitly\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_points = 4\n    incorrect_points = -2\n    total_points = 29\n\n    # Assume all answers were correct initially, and subtract 6 points for each incorrect assumption.\n    # Since correct is 4 points and incorrect deducts 2, each incorrect switch changes score by 6.\n    base_points = total_questions * correct_points\n    incorrect_answers = (base_points - total_points) // (correct_points - incorrect_points)\n    correct_answers = total_questions - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = '12345'\n    repeats = 52 // len(pattern)\n    remainder = 52 % len(pattern)\n    \n    sum_repeated_pattern = sum(int(digit) for digit in pattern) * repeats\n    sum_remainder = sum(int(pattern[i]) for i in range(remainder))\n    \n    return sum_repeated_pattern + sum_remainder\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    kites_made = total_paper // paper_per_kite\n    \n    return int(kites_made)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    intervals = total_trees + 1  # number of gaps between trees\n\n    distance_between_each_tree = total_distance / intervals\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod_length = Fraction(10) + Fraction(4, 5)  # Convert 10 4/5 to a fraction\n    short_rod_length = Fraction(3, 10)  # Convert 3/10 to a fraction\n\n    number_of_short_rods = long_rod_length // short_rod_length\n\n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_quantity = 30\n    required_quantity = 20\n\n    cost_without_deal = single_laptop_cost * required_quantity\n    cost_per_laptop_with_deal = deal_cost / deal_quantity\n    cost_with_deal = cost_per_laptop_with_deal * required_quantity\n    \n    savings = cost_without_deal - cost_with_deal\n    \n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "def solution():\n    from math import factorial\n\n    # Calculate nPr (n permutation r)\n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Number of ways to arrange 6 singing performances among themselves\n    singing_perm = factorial(6)\n\n    # There can be at most 3 dancing performances in between singing performances\n    # Since at least one singing performance should be there in between 2 dancing\n    # We can arrange remaining 1 dancing performance in 7 different places\n    # (since 6 singing create 7 places: _ S _ S _ S _ S _ S _ )\n\n    # Number of ways to arrange 4 - 3 = 1 dancing within 7 slots created by 6 singing\n    dancing_slots = 7\n    remaining_dancing = 1\n    dancing_perm = nPr(dancing_slots, remaining_dancing)\n\n    # Total arrangements = singing arrangements * dancing arrangements\n    total_arrangements = singing_perm * dancing_perm\n\n    return total_arrangements\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Find the ratio of fish to rabbits through the first trade\n    fish_for_rabbits = 10 / 4\n\n    # Find the ratio of rabbits to packs of wheat through the second trade\n    rabbits_for_wheat = 5 / 6\n\n    # Combine the ratios to find the ratio of fish to packs of wheat\n    fish_for_wheat = fish_for_rabbits * rabbits_for_wheat\n\n    # Given that Owen wants to acquire 12 packs of wheat, calculate how many fish are needed\n    fish_needed_for_12_wheat = fish_for_wheat * 12\n\n    return fish_needed_for_12_wheat\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    \n    # Fish distribution if 3 fish to each penguin\n    equation1 = Eq(3*penguins + 5, 4*penguins - 15)\n    \n    # Solve for penguins\n    solutions = solve(equation1, penguins)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    mistake = -26\n    correct_addition = 26\n\n    actual_number = incorrect_result - mistake\n    correct_result = actual_number + correct_addition\n\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    result = 322 - (95 - 87) * 16\n    return result\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthews_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kellys_height = (matthews_height / ratio_matthew) * ratio_kelly\n    return kellys_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 35 / 100 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for ht1 in range(4):  # Home team halftime goals cannot exceed total goals\n        for ht2 in range(3):  # Away team halftime goals cannot exceed total goals\n            if ht1 <= 3 and ht2 <= 2:  # Halftime goals must not exceed final goals\n                if ht1 >= ht2:  # Possible halftime score for the home team leading or draw\n                    count += 1\n                if ht1 <= 2 and ht2 <= 1:  # Possible halftime score for the away team leading\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    # Iterate through all possible values of a and b (0-9)\n    for a in range(10):\n        for b in range(10):\n            # Construct the numbers as per the given equation\n            ab = a * 10 + b\n            ba = b * 10 + a\n            aab = a * 100 + a * 10 + b\n\n            # Check the condition given in the question\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    num_ways = comb(6, 2)\n    return num_ways\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the total number of girls and b the total number of boys in the class\n    g, b = symbols('g b', integer=True)\n    \n    # 3/8 of the girls and 3/5 of the boys can swim, so (5/8)g and (2/5)b cannot swim\n    # According to the problem, the number of boys and girls who cannot swim is equal\n    # Therefore, (5/8)g = (2/5)b\n    \n    # 20 pupils in the class cannot swim\n    # Total pupils who cannot swim is (5/8)g + (2/5)b = 20\n    # The equal number of boys and girls who cannot swim would then each be 10 (because it is half of 20)\n    \n    # Create equations based on the above information\n    equation1 = Eq((5/8)*g, 10)  # Number of girls who cannot swim\n    equation2 = Eq((2/5)*b, 10)  # Number of boys who cannot swim\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # The total number of pupils is the sum of girls and boys\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Clara and Emma\n    clara, emma = symbols('clara emma')\n    \n    # Equation representing the total amount of cookies\n    total_cookies = Eq(clara + emma, 1002)\n    \n    # Equation representing the relationship between the cookies baked by Clara and Emma\n    clara_emma_ratio = Eq(clara, 5 * emma)\n    \n    # Solve the system of equations\n    solutions = solve((total_cookies, clara_emma_ratio), (clara, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Initialize the number of students to None\n    num_students = None\n    \n    # start from 3 since Mike has to be the 2nd in line, there should be at least 1 before him\n    # end at 1000 for the sake of computational limitations during this brute force process\n    for i in range(3, 1001):\n        for j in range(3, 1001):\n            if i*j <= 4:  # The total students need to be more than 4, as Mike is 2nd in line\n                continue\n            if (i * j) % (i - 1) == 0 and (i * j) % (j - 1) == 0:\n                num_students = i * j\n                # Once we find the number of students, we break the inner loop\n                break\n        \n        # If we found the number of students, we break the outer loop as well\n        if num_students is not None:\n            break\n\n    return num_students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n\n    empty_basket_weight = full_weight - (2 * mangoes_half_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Since Pip ate 3/5, Bud is left with 2/5 of the sweets\n    # Let's denote the total number of sweets in the box as 'total_sweets'\n\n    # Bud's share is:\n    # (2/5) * total_sweets = 16\n\n    # Solving for total_sweets\n    total_sweets = 16 * (5/2)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    percent_of_40 = (product / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    price_per_cup = 30 / 3  # Unit price of one cup\n    total_cost_for_five_cups = price_per_cup * 5  # Total price for five cups\n    return total_cost_for_five_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # Let x be the number of rabbits each small mushroom house can accommodate\n    # Then we create the equation: 5 big houses * 4 rabbits/big house + 9 small houses * x rabbits/small house = 38 rabbits\n    # 5*4 + 9*x = 38\n    # 20 + 9x = 38\n    # 9x = 18\n    # x = 2\n    x = (38 - 5 * 4) / 9\n    return x\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum([(i + 1)**2 - i**2 for i in range(1, 9, 2)])\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def count_ways(n):\n        # Base cases\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n\n        # Recursive step\n        else:\n            return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n\n    return count_ways(6)\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    summation = 21 + 22 + 23\n    for i in range(1, summation + 1):\n        if 2 * 3 * i == summation:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Abigail's age and Ryan's age\n    abigail_age, ryan_age = symbols('abigail_age ryan_age')\n\n    # Abigail is three times as old as Ryan\n    equation1 = Eq(abigail_age, 3 * ryan_age)\n    \n    # In 6 years time Abigail will be 42\n    equation2 = Eq(abigail_age + 6, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail_age, ryan_age))\n\n    # Calculate Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan_age] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    speed_upstream = speed_in_still_water - speed_of_current\n    distance = 150\n\n    time = distance / speed_upstream  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    return number if number < 100 else None\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    # First equation: drink + popcorn = 90p\n    equation1 = Eq(drink + popcorn, 90)\n    \n    # Second equation: 2 * drink + popcorn = 145p (1.45 pounds is 145 pence)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    # Returning the cost of a box of popcorn\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 - (56 % 4) + (4 if 56 % 4 != 0 else 0)\n    last_multiple = 92 - (92 % 4)\n    \n    ans = (last_multiple - first_multiple) // 4 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1) ** ((i//4) % 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit of 999^99 is the same as the ones digit of 9^99\n    # Because the tens, hundreds, etc., do not affect the ones digit.\n    # Let's find the ones digit of 9^1, 9^2, 9^3, ... until the pattern repeats.\n\n    ones_digit = 9\n    for _ in range(1, 99):\n        ones_digit = (ones_digit * 9) % 10  # Use modulus to get the ones digit\n\n    return ones_digit\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the journey should have taken\n    # 11/12x is the actual time the journey took\n    # The train was 15 minutes late leaving and 5 minutes late arriving.\n    # Therefore, (11/12)x + 10 = x\n\n    x = symbols('x')\n    equation = Eq((11/12) * x + 10, x)\n    actual_time = solve(equation, x)\n   \n    return actual_time[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    return (4/15) - (7/10) + (11/15) - (3/10)\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the current age of Claire as a symbol\n    current_age = symbols('current_age')\n\n    # In six years, Claire will be three times her current age\n    future_age_eq = Eq(current_age + 6, 3 * current_age)\n\n    # Solving the equation for current age\n    current_age_solution = solve(future_age_eq, current_age)\n\n    # Claire's age two years from now\n    claire_age_in_two_years = current_age_solution[0] + 2\n\n    return claire_age_in_two_years\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # UK coin denominations in pence: £2, £1, 50p, 20p, 10p, 5p, 2p, 1p\n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    bus_fare = 44  # Susan's bus fare in pence\n    min_coins = 0  # Minimum number of coins that change hands\n    payment = 0  # Incremental payment\n\n    # Given that Susan has to pay the fare and needs change,\n    # She must pay with a coin or combination of coins that is more than the actual fare.\n    # Find the smallest combination that Susan can pay with which exceeds the bus fare.\n    for coin in denominations:\n        while payment < bus_fare:\n            payment += coin\n            min_coins += 1\n            if payment > bus_fare:\n                break  # Stop if payment exceeds fare.\n\n    # To find the minimum number of coins for the change:\n    # Subtract the bus fare from the payment to get the amount of change\n    change = payment - bus_fare\n    change_coins = 0  # Count the number of coins for the change\n\n    # Greedy approach to find the minimum number of coins for the change\n    for coin in denominations:\n        while change >= coin:\n            change -= coin\n            change_coins += 1\n            if change == 0:\n                break\n\n    # Total coins exchanged are the coins Susan gives and the coins given as change.\n    total_coins_exchanged = min_coins + change_coins\n\n    return total_coins_exchanged\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To get at least one marble of each color (4 different colored marbles),\n    # we take the worst-case scenario using the Pigeonhole Principle.\n\n    # First, we take the maximum number from any three colors, because even if we're unlucky,\n    # we'd get three different colors in three draws.\n\n    # Number of marbles for red, green and blue (the three colors with the most marbles)\n    red = 4\n    green = 7\n    blue = 6\n    \n    # Adding one to each for the possible worst case that we're still only drawing these three colors.\n    total_draws = red + green + blue + 1\n    \n    # Now, total_draws ensures that even in the worst-case scenario, we will have at least one of each color.\n    \n    return total_draws\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    distance_climbed_per_day = 3\n    distance_slid_per_night = 1\n    net_distance_per_day = distance_climbed_per_day - distance_slid_per_night\n    total_distance = 9\n    day = 0\n\n    while total_distance > 0:\n        day += 1\n        total_distance -= distance_climbed_per_day\n        if total_distance <= 0:\n            break\n        total_distance += distance_slid_per_night\n\n    return day\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Total books\n    n = 19\n    # Kids\n    k = 4\n    # To ensure each kid gets at least one book, we pre-distribute one book to each kid\n    n -= k\n    \n    # Now, we need to find the combinations to distribute the remaining books\n    # This follows the concept of stars and bars\n    bars = k - 1\n    stars = n\n    \n    # Calculate the number of ways to distribute 'stars' into 'bars+1' bins\n    # Number of ways = binomial coefficient of (stars + bars) choose (bars)\n    ans = factorial(stars + bars) // (factorial(stars) * factorial(bars))\n    \n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2  # First term\n    d = 1  # Initial difference\n    while a < 100:  # Look for the first three-digit number\n        a, d = a + d, d + 1  # Update term and difference\n\n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, we start by putting one pen in each.\n    remaining_pens = 6 - 3\n\n    # This becomes a problem of distributing the remaining pens into 3 pencil cases.\n    # For n identical items distributed into r distinct groups, the number of ways is C(n+r-1, r-1).\n    # This is a classic problem of combinations with repetitions.\n    # Here n = remaining_pens and r = number of pencil cases.\n    \n    # We can calculate the binomial coefficient using the comb function from the math library.\n    from math import comb\n    return comb(remaining_pens + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    # Motorbikes have 2 wheels each, tricycles have 3 wheels each, and vans have 4 wheels each.\n\n    # From the first statement, we have: 2m + 4v = 3t + 35\n    # From the second statement, we have: 3t + 4v = 2m + 13\n    # From the total number of wheels, we have: 2m + 3t + 4v = 101\n\n    # Rearranging the equations:\n    # 2m - 3t + 4v = 35 (1)\n    # -2m + 3t + 4v = 13 (2)\n    # 2m + 3t +  4v = 101 (3)\n\n    # Adding (1) and (2), we get:\n    # 8v = 48\n    # v = 6\n\n    # Substitute v = 6 into (3), we get:\n    # 2m + 3t + 24 = 101\n    # 2m + 3t = 77\n\n    # Substitute v = 6 into (1), we get:\n    # 2m - 3t + 24 = 35\n    # 2m - 3t = 11\n\n    # Now we have a system of two equations:\n    # 2m + 3t = 77 (4)\n    # 2m - 3t = 11 (5)\n\n    # Adding (4) and (5), we get:\n    # 4m = 88\n    # m = 22\n\n    # Now we need to find how many more motorbikes than vans are there, which is m - v\n    ans = 22 - 6\n\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n    \n    # Given information\n    D = 41  # Tank D contains 41 liters of water\n    \n    # Equations based on the given information\n    equation1 = Eq(A, 5 * B)            # A has 5 times the water as B\n    equation2 = Eq(B, C + 5)            # B has 5 more liters than C\n    equation3 = Eq(C + D, A)            # C + D equals amount of water in A\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i + 2) ** 2 - i ** 2 for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    total_cups_needed = 30\n\n    gallons_needed = total_cups_needed / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Since Pip is directly in front of Bud, they count as 2 people together.\n    pip_and_bud = 2 \n\n    total_people = people_in_front_of_pip + pip_and_bud + people_behind_bud\n    \n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given average of 8 numbers is 6, so the sum of the numbers is 8 * 6\n    total_sum = 8 * 6\n    \n    # Given numbers without p and q\n    given_nums = [4, 5, 6, 9, 3, 9]\n    \n    # Calculate the sum of the given numbers\n    sum_of_given_nums = sum(given_nums)\n    \n    # Calculate the sum of p and q\n    sum_of_p_q = total_sum - sum_of_given_nums\n    \n    # Loop through all possible combinations of p and q\n    # since p < q, start with p = 1 and q = sum_of_p_q - p\n    # stop when p reaches half of sum_of_p_q since p is always less than q\n    for p in range(1, sum_of_p_q // 2 + 1):\n        q = sum_of_p_q - p\n        all_nums = given_nums + [p, q]\n        \n        # Check if the difference between highest and lowest value is 6\n        if max(all_nums) - min(all_nums) == 6:\n            return q  # Since we loop from lowest p value, the first q we find is the lowest possible q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n   \n    football_only = 3 * both\n    basketball_only = 4 * both\n    total_students = 36\n\n    # Using Inclusion-Exclusion Principle: total = football + basketball - both\n    equation = Eq(football_only + basketball_only - both, total_students)\n\n    solution = solve(equation, both)\n\n    return solution[both]\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    def comb(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Function to calculate total permutations of '0', '1', '2' in yymmdd\n    def calculate_permutations():\n        total = 0\n        # 2 of each 0, 1, 2 and 2 other digits can be placed in 6 positions\n        total_permutations = comb(6, 2) * comb(4, 2)\n        \n        # Permutations of the digits other than 0, 1, 2\n        perm_other_digits = factorial(2)\n        \n        return total_permutations * perm_other_digits\n\n    # For each valid month mm, check valid days and multiply by permutations\n    valid_months = [1, 10, 11, 12]  # possible months that can contain 0, 1, 2\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n    \n    # The year 2014 has digits '0', '1', '2' and thus counts as 1 for each of these\n    total_days = 0\n    for mm in valid_months:\n        for dd in range(1, days_in_month[mm] + 1):\n            yymmdd = \"2014{:02d}{:02d}\".format(mm, dd)\n            if yymmdd.count('0') == 2 and yymmdd.count('1') == 2 and yymmdd.count('2') == 2:\n                total_days += 1\n    \n    ans = calculate_permutations() * total_days\n    return ans\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on given conditions: x ≡ 3 (mod 7), x ≡ 7 (mod 11), x ≡ 9 (mod 13)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Solve the system of congruences to find the smallest x that satisfies all conditions\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60  # km/h\n    jacob_speed = 80  # km/h\n    jacob_time = 3  # hours\n    adam_extra_time = 0.5  # hours (30 minutes)\n\n    # Calculate the distance each person traveled\n    jacob_distance = jacob_speed * jacob_time\n    adam_distance = adam_speed * (jacob_time + adam_extra_time)\n\n    # The total distance between their homes is the sum of the distances they traveled\n    total_distance = jacob_distance + adam_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    term_number = 21\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_mult(a, b):\n        return ((a * b + 16) / (a + b))**2\n\n    result = custom_mult(custom_mult(custom_mult(1, 2), 3), 4)\n    result = custom_mult(result, 5)\n    \n    return int(result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factors_exponents = [2, 1, 1]  # 252 = 2^2 * 3^1 * 7^1\n    num_factors = 1\n    for exp in prime_factors_exponents:\n        num_factors *= (exp + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    cakes = 50\n    layers = 9\n    # Using the Pigeonhole Principle\n    most_cakes = (cakes + layers - 1) // layers\n    \n    return most_cakes\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case scenario: \n    # 1. Lucy takes 1 blue marble\n    # 2. Lucy takes 1 yellow marble\n    # To ensure the next marble is of the same colour as one of the previous, \n    # Lucy should take a third marble.\n    # At this point, she will definitely have 2 marbles of the same colour.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 2.49 * 1000\n    g = 670\n    kg_g_to_g = (3 * 1000) + 80\n\n    total_g = kg_to_g + g + kg_g_to_g\n    return total_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Calculate the least common multiple of the times\n    meet_time = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the hours and minutes addition\n    hours = meet_time // 60\n    minutes = meet_time % 60\n\n    # Calculate the new time\n    start_hour = 10\n    new_hour = (start_hour + hours) % 12  # Assuming a 12-hour clock\n    new_minute = minutes\n\n    # Convert the time into the format HH:MM a.m.\n    if new_hour == 0:\n        new_hour = 12\n    new_time = f\"{new_hour:02d}:{new_minute:02d} a.m.\"\n\n    return new_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # total time in minutes\n\n    cycling_fraction = 1/3\n    \n    jogging_time_minutes = total_time_minutes * (1 - cycling_fraction)\n\n    return int(jogging_time_minutes)\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    age = solve(equation, justin)\n    \n    return age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 18 - 22\n    last_term = 2\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    miles = 273\n    sam_petrol_rate = 72.8\n    sam_petrol_consumed = miles / sam_petrol_rate\n    tom_extra_petrol = 6 + 3/4\n    tom_petrol_consumed = sam_petrol_consumed + tom_extra_petrol\n    tom_petrol_rate = miles / tom_petrol_consumed\n    \n    return tom_petrol_rate\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "from math import comb\n\ndef solution():\n    # Calculate minimum number of picks required to ensure two M&Ms of different colors\n    # Take the worst-case scenario first. i.e., picking all of one color before getting to the next\n    # Picking all reds and then one more will ensure at least one non-red M&M\n    picks_red = 3 + 1\n    # Picking all yellows and then one more will ensure at least one non-yellow M&M\n    picks_yellow = 4 + 1\n    \n    # We take the smallest number of picks that ensures two M&Ms of different colors\n    min_picks = min(picks_red, picks_yellow)\n\n    return min_picks\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total apples.\n    total_apples = 30\n    # Total children.\n    num_children = 6\n    # Deduct the minimum each child can get (1 apple each).\n    remaining_apples = total_apples - num_children\n    \n    # As the number of apples for each child is different, start distributing\n    # remaining apples to children from the one who gets least to the second most.\n    # Hence, the maximum number of apples the child getting most can receive will\n    # be reduced by the number of other children, as each child needs to get more\n    # than the previous one.\n    max_apples_for_most = remaining_apples - (num_children - 1)\n    \n    return max_apples_for_most\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n    original_cost = paid_gst / gst_rate\n    return original_cost\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    pattern = [1, 3]\n    while len(pattern) < 5:\n        pattern.append(pattern[-1] * 3)\n    ans = pattern[2]\n    return ans\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert numbers from base 7 to base 10, add them, then convert back to base 7\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    \n    # Convert the sum back to base 7\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    # Convert the result to integer in base 10 to represent base 7 number\n    return int(ans)\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given that 105, 120, 135 are the 7th, 8th, and 9th terms\n    # We can determine the common difference (d) of the arithmetic sequence\n    d = 120 - 105  # This is the difference between the 8th and 7th term\n\n    # The nth term of an arithmetic sequence is given by a_n = a_1 + (n - 1) * d\n    # where a_1 is the first term and d is the common difference\n    # We need to find the first term (a_1) using the 7th term (a_7 = 105)\n    a_7 = 105\n    n = 7\n    a_1 = a_7 - (n - 1) * d  # a_1 = 105 - (7 - 1) * 15\n\n    # Now that we have the first term, we can determine the 100th term (a_100)\n    a_100 = a_1 + (100 - 1) * d  # a_100 = a_1 + (100 - 1) * 15\n    \n    return a_100\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio\n    equation1 = Eq(oranges / lemons, 3 / 5)\n\n    # New ratio after selling oranges\n    equation2 = Eq((oranges - 48) / lemons, 1 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    # Extract number of lemons\n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    num_rabbits = 8\n    num_days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * num_rabbits * num_days\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    total_rate = horse_rate + cow_rate + sheep_rate\n\n    total_days = 22 / total_rate\n\n    return total_days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    fraction = 5 / 8\n    total = 160\n    ans = fraction * total\n    return ans\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n    \n    equation1 = Eq(mother_age_now - daughter_age_now, 75)\n    equation2 = Eq(mother_age_now - (mother_age_now - daughter_age_now), daughter_age_now - 3)\n\n    solutions = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solutions[mother_age_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef is_valid_date(y, m, d):\n    from datetime import datetime\n    try:\n        datetime(year=y, month=m, day=d)\n        return True\n    except ValueError:\n        return False\n\ndef solution():\n    count = 0\n    # The year is fixed as 2014, so we have two 1's and one 2 guaranteed.\n    for perm in permutations(\"00112233445566778899\", 6):  # 6 other digits to choose as month and day\n        number = \"2014\" + \"\".join(perm)\n        year = int(number[:4])\n        month = int(number[4:6])\n        day = int(number[6:8])\n        if is_valid_date(year, month, day):\n            count += 1\n    # Divide by 6! since the 6 positions of 0, 1, 2 can be in any order\n    return count // (2 * 2 * 2 * 6 * 6 * 6)\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Number of non-red apples\n    non_red_apples = 11 + 7  # green + yellow\n    # To ensure we get 3 red apples, we take all non-red apples plus 3 red apples\n    apples_needed = non_red_apples + 3\n    \n    return apples_needed\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    # Total pupils in the class\n    total_pupils = 30\n    # Total right-handed pupils\n    right_handed = 21\n    # Total girls in the class\n    girls = 16\n    # The smallest number of right-handed girls would occur when all the left-handed pupils are girls\n    # Calculate the left-handed pupils in the class\n    left_handed = total_pupils - right_handed\n    # Calculate the minimum right-handed girls by subtracting left-handed girls from total girls\n    right_handed_girls = girls - left_handed\n    \n    # If the number is negative, it means there are more left-handed pupils than girls, which is not possible.\n    # So the minimum number of right-handed girls cannot be less than the number of left-handed boys.\n    # In this case, we return 0.\n    return max(right_handed_girls, 0)\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    sum_alternate = sum(range(14, 21, 2)) - sum(range(13, 20, 2))\n    return sum_alternate\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    discount = 0.80\n    spent = 6400\n    saved = spent / (1 - discount) * discount\n    return saved\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "from itertools import combinations\n\ndef solution():\n    team_combinations = list(combinations(['A', 'B', 'C', 'D', 'E', 'F'], 2)) # All possible games\n    total_games = len(team_combinations)\n    points_per_game = 2  # Either 2 points for a win or 1 point each for a tie\n    total_points = total_games * points_per_game\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n\n    if children % minibus_capacity == 0:\n        minibuses_needed = children // minibus_capacity\n    else:\n        minibuses_needed = (children // minibus_capacity) + 1\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Max number of marbles Jane can draw while still being able to miss one color\n    # This occurs when she draws all but one of all colors except the most populous one.\n    max_without_all_colors = 4 + 6 + 2 - 1  # all red, blue, and orange, one less green\n    \n    # The next draw guarantees the fourth color\n    ans = max_without_all_colors + 1\n    \n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Boys are 90 more than girls\n    eq1 = Eq(boys, girls + 90)\n\n    # Ratio of girls who can swim to those who cannot swim\n    eq2 = Eq(girls_swim, girls * 31 / (31 + 49))\n    eq3 = Eq(girls_not_swim, girls * 49 / (31 + 49))\n\n    # Boys who can swim are 120 less than those who cannot\n    eq4 = Eq(boys_swim, boys_not_swim - 120)\n\n    # Total number of students is 1690\n    eq5 = Eq(girls + boys, 1690)\n\n    # Set up the equation for the total number of pupils who can not swim\n    eq6 = Eq(boys_not_swim + girls_not_swim, girls_not_swim + (girls + 90) - 120)\n\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Number of pupils who cannot swim\n    cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    return cannot_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if (num % 2 == 0) and (num % 3 == 0) and (num % 5 == 0) and (num % 7 == 6):\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # Count the number of times 2 and 5 are factors in the factorial\n    # Since 10 = 2 * 5, a zero is added whenever a pair of 2 and 5 are encountered\n    # However, 2 will occur more frequently than 5, the number of zeros will be determined\n    # by the number of times 5 is a factor.\n\n    # Initialize variables to count the factors\n    n = 0\n    count_5 = 0\n\n    # We need 28 pairs of 5s (for 28 zeros)\n    while count_5 < 28:\n        n += 1\n        # Check how many times 5 is a factor of the current n\n        temp = n\n        while temp % 5 == 0:\n            count_5 += 1\n            temp /= 5\n\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 41):\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4 = 7 / 4\n    price_per_pc_6 = 8.5 / 6\n    \n    return '4pc' if price_per_pc_4 < price_per_pc_6 else '6pc'\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    win_amount = 10\n    bet_amount = 1\n\n    # Total outcomes when rolling two dice\n    total_outcomes = 6 * 6 \n\n    # Winning outcomes: sums of dice that are 11 or 12 (i.e., (5,6),(6,5),(6,6))\n    winning_outcomes = 2 + 1\n\n    # Probability of winning\n    win_probability = winning_outcomes / total_outcomes\n\n    # Expected winnings per game\n    expected_win_per_game = win_probability * win_amount\n\n    # Expected loss per game is the bet amount minus the expected win\n    expected_loss_per_game = bet_amount - expected_win_per_game\n\n    # Expected total loss over 60 games\n    expected_total_loss = total_rolls * expected_loss_per_game\n\n    return expected_total_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    phone = 740\n    remaining_after_phone = salary - phone\n    rent = remaining_after_phone * 0.75\n    remaining_after_rent = remaining_after_phone - rent\n\n    equation = Eq(remaining_after_rent, salary / 5)\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_basket = weight_with_2_apples - 2 * (weight_of_3_apples // 3)\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    numbers = [2, 3, 4]\n    perm = permutations(numbers)\n    \n    # Since we want unique numbers, we convert the tuples to integers\n    unique_numbers = set(int(''.join(map(str, p))) for p in perm)\n    \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "网络故障，请重试"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100\n    original = after_class * 2\n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lynn, mary = symbols('lynn mary')\n    equation1 = Eq(mary - 58, 3 * (lynn - 160))\n    equation2 = Eq(lynn, mary)\n    \n    solutions = solve((equation1, equation2), (lynn, mary))\n    \n    lynn_left = solutions[lynn] - 160\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def diamond(A, B):\n    return A * A - 3 * B\n\ndef triangle(A, B):\n    return 5 * A - B * B\n\ndef solution():\n    result_diamond = diamond(4, 2)\n    result_triangle = triangle(result_diamond, 6)\n    return result_triangle\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = (3/7) * total_grapes  # Fraction sold on Monday\n    \n    remaining_after_monday = total_grapes - sold_on_monday\n    \n    sold_on_tuesday = (3/8) * remaining_after_monday  # Fraction sold on Tuesday\n    \n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    \n    weight_per_bag = (3/4)  # Weight of grapes per bag\n    \n    number_of_bags = remaining_after_tuesday / weight_per_bag\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 0.60\n    tickets_unsold = 28\n    total_tickets = tickets_unsold / (1 - percent_sold)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum((-1)**(i+1) * (64 - 2*i) for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # brute force to find the two numbers with the described conditions\n    for tens_subtrahend in range(1, 10):\n        for ones_subtrahend in range(0, 10):\n            for tens_minuend in range(1, 10):\n                for ones_minuend in range(0, 10):\n                    # original subtrahend\n                    original_subtrahend = tens_subtrahend * 10 + ones_subtrahend\n                    # mistook subtrahend\n                    mistook_subtrahend = (tens_subtrahend + 2) * 10 + (ones_subtrahend - 2)\n                    # minuend remains the same\n                    minuend = tens_minuend * 10 + ones_minuend\n                    # calculate the differences\n                    original_diff = minuend - original_subtrahend\n                    mistook_diff = minuend - mistook_subtrahend\n                    # check if the condition met\n                    if mistook_diff == 36:\n                        return original_diff\n                        \nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    phoebe_num = symbols('phoebe_num')\n\n    equation = Eq(5 * phoebe_num - 4, 41)\n\n    solution = solve(equation, phoebe_num)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n\n    # Compute the least number of jugs needed\n    if total_juice_ml % jug_capacity_ml == 0:\n        num_jugs = total_juice_ml // jug_capacity_ml\n    else:\n        num_jugs = (total_juice_ml // jug_capacity_ml) + 1\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1\n    target_percentage = 0.90\n    blue_balls = 1\n    red_balls_needed = total_balls * target_percentage - blue_balls  # red balls should be 90% after removing\n\n    red_balls_to_remove = 49 - red_balls_needed\n\n    return int(red_balls_to_remove)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / 97) if i == 0 else (ans * (100 - i) / (100 - i - 3) for i in range(0, 97))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    total_matches = 220\n\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_per_match = weight_of_matches / total_matches\n    \n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n    \n    # Total animals equation\n    equation1 = Eq(cows + birds, 1300)\n    # Total legs equation\n    equation2 = Eq(4*cows + 2*birds, 3440)\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    ans = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the masses and velocities\n    m1, m2 = 500, 500           # masses of the cars\n    v1, v2 = 20, 30             # velocities of the cars\n    \n    # Conserve momentum in north (y) and west (x) directions\n    # m1*v1 + m2*0 = (m1 + m2)*v_y (for north direction)\n    # m1*0 + m2*v2 = (m1 + m2)*v_x (for west direction)\n    \n    # Calculate final velocities in x and y direction\n    v_x = (m2 * v2) / (m1 + m2)\n    v_y = (m1 * v1) / (m1 + m2)\n    \n    # Pythagorean theorem to calculate the magnitude of the velocity\n    magnitude = sqrt(v_x**2 + v_y**2)\n\n    return magnitude\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Iterate from the greatest 3-digit number down to the lowest,\n    # checking if it fits the criteria\n    for number in range(999, 99, -2):  # Only check odd numbers\n        if number % 9 == 0:  # Check if divisible by 9\n            tens_place = (number // 10) % 10  # Extract the tens digit\n            if tens_place % 4 == 0:  # Check if tens digit is divisible by 4\n                return number  # This is the greatest number that fits all criteria\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens_initial = 83\n    jenny_pens_after_giving = jenny_pens_initial - 28\n    ben_pens_initial = jenny_pens_after_giving\n\n    return ben_pens_initial\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    num_intervals_trees = 21 - 1\n    # Length of the road divider based on number of trees intervals and interval length\n    road_length = num_intervals_trees * 2\n\n    # Number of intervals for lamp posts that can fit within the road length,\n    # making sure to include both ends of the road.\n    num_intervals_lamp_posts = road_length // 10\n    # Number of lamp posts is one more than the number of intervals\n    num_lamp_posts = num_intervals_lamp_posts + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop_price, dvd_price = symbols('laptop_price dvd_price')\n\n    # 5 laptops and 4 DVD players cost $14438\n    total_cost_eq = Eq(5 * laptop_price + 4 * dvd_price, 14438)\n    # 1 laptop and 1 DVD player cost $2960\n    individual_cost_eq = Eq(laptop_price + dvd_price, 2960)\n\n    # Solving the equations\n    solutions = solve((total_cost_eq, individual_cost_eq), (laptop_price, dvd_price))\n\n    return solutions[dvd_price]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3\n    colours = 5\n    \n    combinations = sizes * colours\n    \n    return combinations\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total weight of the original group\n    # Let n be the number of people in the original group\n    x, n = symbols('x n')\n\n    # Equation representing the average before Aaron joined\n    equation1 = Eq(x / n, 61 - (45 / n))\n\n    # Equation representing the average after Ben joined\n    equation2 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # The average weight of the group before Aaron joined\n    original_average = solutions[x] / solutions[n]\n\n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    # All triangles stand for different digits and they must sum up to a number where the last digit is a triangle (i.e., they sum up to a multiple of 10).\n    for triangle in range(10):\n        if (4 * triangle) % 10 == triangle:\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize the count of pairs\n    count = 0\n    \n    # Iterate over all possible pairs of numbers from 1 to 100\n    for i in range(1, 100):\n        for j in range(i+1, 101):\n            # Check if the sum is a multiple of 5\n            if (i + j) % 5 == 0:\n                # If so, increment the count\n                count += 1\n    \n    # Return the final count of pairs\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    total_digits = 2000\n    full_patterns = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n    \n    pattern_sum = sum(range(1, pattern_length + 1))\n    total_sum = full_patterns * pattern_sum + sum(range(1, remaining_digits + 1))\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_cost - coffee_cost - milk_cost\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario: Sheila picks 3 balls of each color without getting 4 of the same color.\n    worst_case = 3*3  # 3 blue, 3 orange, 3 yellow\n\n    # Next pick guarantees 4 balls of the same color.\n    next_pick = 1\n\n    # Total number of balls must be drawn to guarantee 4 balls of the same color.\n    total_picks = worst_case + next_pick\n\n    return total_picks\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    cost_oranges = 1.5 * 4.1\n    cost_mangoes = 2.3 * 2\n    total_cost = cost_oranges + cost_mangoes\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_sum = mean_value * (len(numbers) + 1)  # mean = total_sum / number_of_elements\n    a = total_sum - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Amount of work A can do in one day\n    work_per_day_a = 1 / 15\n    # Amount of work B can do in one day\n    work_per_day_b = 1 / 10\n    \n    # Amount of work done by A and B together in 4 days\n    work_done_4_days = (work_per_day_a + work_per_day_b) * 4\n    \n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n    \n    # Time required for B to finish the remaining job\n    days_for_b_to_finish = remaining_work / work_per_day_b\n    \n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # There are two parts to this pyramid sequence.\n    # Part one is a series that goes from 1 to 13: 1+2+3+...+13\n    # Part two is a series that goes from 13 down to 1: 13+12+...+1\n    # For each series, the sum can be calculated using the formula for the sum of an arithmetic series:\n    # Sum = n/2 * (first_term + last_term), where n is the number of terms.\n\n    # Calculate the sum for the series from 1 up to 13\n    n1 = 13\n    sum1 = (n1 * (1 + n1)) // 2\n\n    # Calculate the sum for the series from 13 down to 1\n    # It's the same as from 1 to 13, as it's symmetric\n    sum2 = sum1\n\n    # Add both parts together to get the total sum\n    total_sum = sum1 + sum2\n\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    \n    discount_amount = original_price - reduced_price\n    percentage_reduction = (discount_amount / original_price) * 100\n    \n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Initialize the count of boys and girls\n    boys, girls = 0, 0\n    \n    # Since students are arranged in a square array, let's start with a size of 1 and increase\n    side_length = 1\n    \n    while True:\n        # If side_length is odd, it's a boy layer; otherwise, it's a girl layer\n        if side_length % 2 == 1:\n            boys += side_length * 4 - 4 if side_length > 1 else 1\n        else:\n            girls += side_length * 4 - 4\n\n        # Check the condition if there are 52 more boys than girls\n        if boys - girls == 52:\n            break\n        \n        # Increase the side length for the next layer\n        side_length += 1\n    \n    # Total students is the sum of boys and girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    test_tubes = 1\n    while 2 ** test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    num = 100\n    while not (num % 5 == 1 and num % 6 == 1 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Each duckling has 2 legs\n    duckling_legs = 4 * 2\n    # Each baby goose has 2 legs\n    baby_goose_legs = 2 * 2\n    # Each lamb has 4 legs\n    lamb_legs = 4\n\n    # Total number of legs\n    total_legs = 36\n    # Total number of legs for ducklings and baby geese\n    legs_without_lambs = duckling_legs + baby_goose_legs\n    # Remaining legs are for lambs\n    remaining_legs_for_lambs = total_legs - legs_without_lambs\n    # Divide the remaining legs by the number of legs each lamb has to find the number of lambs\n    num_lambs = remaining_legs_for_lambs / lamb_legs\n\n    return int(num_lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # converting litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_day4 = remaining_sweets / (1 - 1/4)\n    remaining_after_day3 = remaining_after_day4 / (1 - 1/5)\n    remaining_after_day2 = remaining_after_day3 / (1 - 1/6)\n    initial_sweet_count = remaining_after_day2 / (1 - 1/7)\n    return int(initial_sweet_count)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    # Let's label the final number of cookies Hebe has after eating as \"H\".\n    # After eating 1/4 of her cookies and having 42 left, this means:\n    # H - 1/4 * H = 42\n    # 3/4 * H = 42\n    # H = 42 * 4 / 3\n    H = 42 * 4 / 3\n\n    # Now let's label the initial number of cookies Emerald got as \"E\".\n    # Emerald ate 1/3 of the cookies plus 4 cookies and then gave the H cookies to Hebe:\n    # E - 1/3 * E - 4 = H\n    # 2/3 * E - 4 = H\n    # 2/3 * E = H + 4\n    # E = (H + 4) * 3 / 2\n    E = (H + 4) * 3 / 2\n\n    # Finally, let's label the initial number of cookies Charlene had as \"C\".\n    # She kept 1/2 of the cookies plus 8 cookies, and gave the E cookies to Emerald:\n    # C - 1/2 * C - 8 = E\n    # 1/2 * C = E + 8\n    # C = (E + 8) * 2\n    C = (E + 8) * 2\n\n    ans = int(C)\n    return ans\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Assuming 'n' teams, each team plays 'n-1' matches at home and 'n-1' matches away, hence total matches = n*(n-1).\n    # But since each match is counted twice (home and away), we divide by 2 to get the actual number of matches.\n    # So the equation is n*(n-1)/2 = 30\n\n    n = 1\n    while n * (n - 1) / 2 != 30:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_to_make = 3600\n    days_for_first_720_sets = 5\n\n    total_days = (total_sets_to_make / sets_made_in_5_days) * days_for_first_720_sets\n\n    return int(total_days)\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Number of ways to reach the ith step with 1 or 2 steps at a time\n    def ways_to_step(i):\n        if i <= 1:\n            return 1\n        ways = [0] * (i + 1)\n        ways[0], ways[1] = 1, 1\n        for j in range(2, i + 1):\n            ways[j] = ways[j - 1] + ways[j - 2]\n        return ways[i]\n\n    # Total ways to climb 10 steps with a condition to step on the 5th step\n    total_ways = ways_to_step(4) * ways_to_step(5)\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Define the equations based on the problem\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Get the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 45\n    equation = Eq(3 * boys - 21, girls)\n    \n    num_boys = solve(equation, boys)[0]\n    return num_boys\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    product = 2*2*2*3*8*5*5*25\n    count = 0\n    while product % 10 == 0:\n        product //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        if (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    jug_capacity = 150\n    cup_volume = 40\n    cups_filled = 3\n\n    water_used = cup_volume * cups_filled\n    water_left = jug_capacity - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    # Let's denote the price of a notebook as n, pencil case as p, and eraser as e in dollars.\n    # According to the problem statement, we have 3 equations:\n    # 3n + 4p + 5e = 50 (total cost)\n    # n + p = 6 (cost of a notebook and a pencil case)\n    # p + e = 8 (cost of a pencil case and an eraser)\n    \n    # If we multiply the second equation by 3, we get:\n    # 3n + 3p = 18\n    \n    # Now, if we subtract this from the total cost equation, we get:\n    # 3n + 4p + 5e - (3n + 3p) = 50 - 18\n    # Which simplifies to:\n    # p + 5e = 32\n    \n    # Now, subtract the third equation from this new equation:\n    # (p + 5e) - (p + e) = 32 - 8\n    # Which simplifies to:\n    # 4e = 24\n    \n    # Solving for e:\n    e = 24 / 4   # e = 6\n    \n    # Now we can find p using the third equation:\n    # p + e = 8\n    # p + 6 = 8\n    p = 8 - e     # p = 2\n    \n    # The question is asking for the cost of a pencil case, which is represented by p\n    return p\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Alice's current age be 'a' and her sister's age be 's'.\n    a, s = symbols('a s')\n\n    # Given condition: Alice is twice as old as her sister now.\n    eq1 = Eq(a, 2 * s)\n\n    # In 10 years, their total age will be 53 years old.\n    eq2 = Eq((a + 10) + (s + 10), 53)\n\n    # Solving the system of equations to find the values of 'a' and 's'\n    solutions = solve((eq1, eq2), (a, s))\n\n    # Alice's current age 'a' is what we are looking for.\n    return solutions[a]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    number = 3024\n    for i in range(1, int(number**(1/4)) + 1):\n        if (i * (i + 1) * (i + 2) * (i + 3)) == number:\n            return i + 3\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan: bob = alan + 15\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards, and then Bob has 3 times as many as Alan\n    # bob + 25 = 3 * alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the equations to find the number of cards Alan has\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Least common multiple of the packs sizes\n    packs_lcm = lcm(6, 8, 9, 15)\n    \n    # Minimum marker packs\n    min_marker_packs = 1000 // packs_lcm\n    \n    # Check whether this fits the required at least 1000 markers\n    if (min_marker_packs * packs_lcm) < 1000:\n        min_marker_packs += 1\n    \n    # Calculate total number of packs needed\n    total_packs = min_marker_packs * (1/6 + 1/8 + 1/9 + 1/15)\n    \n    return int(total_packs)\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    # Each handshake involves two students, so to avoid double counting, we use combinations where order doesn't matter (n choose 2)\n    handshakes = (num_students * (num_students - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def recurring_to_fraction(digit, recurring_part):\n        nines = int('9' * len(recurring_part))\n        non_recurring_length = len(str(digit)) - 2\n        denom = 10**non_recurring_length * nines\n        num = int(digit * denom + int(recurring_part)) - int(digit * denom)\n        return num, denom\n\n    num1, denom1 = recurring_to_fraction(0.1, '17')\n    num2, denom2 = recurring_to_fraction(0.2, '37')\n\n    for n in range(1, denom1 * denom2):\n        if (num1 * pow(10, n, denom1)) % denom1 == (num2 * pow(10, n, denom2)) % denom2:\n            return n\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the page difference he reads each day more than the previous day\n    d = symbols('d')\n    \n    # The total number of days he takes to read is n\n    # On the first day he reads 30 pages, on the last day he reads 70 pages\n    # Total pages read is given by the sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    # We know the sum is 550, so we can write equation as:\n    # n/2 * (30 + (30 + (n-1)*d)) = 550\n    \n    # Since the first and last terms are 30 and 70 respectively, we can relate them by the last_term = first_term + (n-1)*d\n    # So, 70 = 30 + (n-1)*d, which gives us the equation (n-1)*d = 40\n    \n    # First let's solve for n\n    # Our equation for n is then: n/2 * (30 + 70) = 550\n    # Simplifying: n/2 * 100 = 550\n    # Further simplifying: n = 550 * 2 / 100\n    # So n is 11 (number of days)\n    n = 550 * 2 // 100\n    \n    # Now substitute n in our second equation (n-1)*d = 40\n    # (11-1)*d = 40\n    # 10*d = 40\n    # d = 4 (the number of pages he reads more each day)\n    d = 40 // (n - 1)\n    \n    return d\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_mass = 10\n\n    water_mass = (orange_mass * water_ratio) / orange_ratio\n\n    return water_mass\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]  # Scores from the first four judges\n    required_average = 8.5\n    \n    # Sum of scores from the first four judges\n    sum_of_scores = sum(scores)\n    \n    # The minimum score needed from the final judge\n    min_final_score = (required_average * 5) - sum_of_scores\n    \n    return min_final_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000\n    total_interest = 816\n    rate = symbols('rate')\n\n    # Using the formula for compound interest to set up the equation\n    # A = P * (1 + r/n)^(nt)\n    # Since interest is earned at the end of the second year, n=1, t=2\n    # A - P = interest\n    # P * (1 + r)^2 - P = interest\n\n    equation = Eq(principal * (1 + rate)**2 - principal, total_interest)\n\n    # Solving for the rate\n    rate_solution = solve(equation, rate)\n\n    # We are looking for the annual interest rate as a percentage\n    interest_rate_per_year = rate_solution[0] * 100\n\n    return float(interest_rate_per_year)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Johnny's initial step, multiplication part\n    multiplication_result = 9 * 4 # This should be 9 * 4 instead of 9 * 2\n    # Johnny's mistake is in the multiplication step.\n    # He should multiply by 4 (the divisor), not by 2 (the remainder).\n    \n    # Johnny's correct step for adding the remainder\n    correct_total = multiplication_result + 2 # this is correct\n    \n    # Return the correct answer\n    return correct_total\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    return (43 - 7) // 2\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h be the speed of Hannah in cm/s\n    h = symbols('h')\n    # Peter's speed will be h + 15 cm/s\n    # Since Speed = Distance / Time, and assuming the same distance, we can write the following ratio:\n    # (h + 15) / h = 3 / 4\n\n    equation = Eq((h + 15) / h, 3 / 4)\n\n    # Solve the equation for h\n    hannah_speed = solve(equation, h)[0]\n\n    return hannah_speed\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multi_choice = 23\n    time_spent_fill_blank = 35\n    \n    time_left = total_time - (time_spent_multi_choice + time_spent_fill_blank)\n    \n    return time_left\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850\n    time_to_cross = 45\n    train_speed = 30\n\n    tunnel_length = (train_speed * time_to_cross) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    ans = circles * (circles - 1) + 2 * circles + line\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    # Let x be the total number of coins Owen had originally\n    # Let f be the number of fifty-cent coins Owen had originally\n    # Since 2/7 of his coins were fifty-cent coins, then f = 2/7 * x\n    # After his mother gave him 10 one-dollar coins and 5 dollars' worth of fifty-cent coins (which is 10 fifty-cent coins),\n    # he had x + 10 (one-dollar coins) and f + 10 (fifty-cent coins)\n    \n    # In the end, he had twice as many one-dollar coins as fifty-cent coins, so 2*(f + 10) = (x + 10) - (f + 10)\n    # Solving for f in terms of x from the first equation: f = 2/7 * x\n    # Plugging f into the second equation: 2*(2/7 * x + 10) = (x + 10) - (2/7 * x + 10)\n    # Simplifying and solving for x\n    # 4/7 * x + 20 = 5/7 * x - 10\n    # 20 + 10 = 5/7 * x - 4/7 * x\n    # 30 = 1/7 * x\n    # x = 30 * 7\n    x = 30 * 7\n    \n    # Now we return the total number of coins Owen had originally, which is x\n    return x\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    entrances = [1, 2, 3, 4]\n    people = ['Joe', 'Mike', 'Tina']\n    \n    # Calculate all possible entrance choices for Joe, Mike and Tina\n    for joe_entrance in entrances:\n        for mike_entrance in entrances:\n            if joe_entrance != mike_entrance: # Joe and Mike cannot join the same entrance\n                for tina_entrance in entrances:\n                    if tina_entrance != joe_entrance and tina_entrance != mike_entrance:\n                        total_ways += len(list(permutations(people)))\n    \n    return total_ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n    # Let x be the money spent on transportation, then 2x is spent on food\n    # x + 2x = spent_money -> 3x = spent_money\n    money_on_transportation = spent_money / 3\n    money_on_food = 2 * money_on_transportation\n    return money_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed variables\n    base_water_fee = 4  # Base water fee per ton for the first 3 tons\n    additional_water_fee = 3  # Fee per ton for additional usage\n    service_fee = 4  # Fixed service fee\n    \n    # Total amount available for water usage\n    total_amount = 109\n    \n    # Calculating cost for the first 3 tons\n    base_cost = 3 * base_water_fee + service_fee\n    \n    if total_amount < base_cost:\n        # If she has less than the base cost, she can't afford any water\n        return 0\n    else:\n        # Calculate how much money is left after paying base cost and service fee\n        remaining_amount = total_amount - base_cost\n        \n        # Calculate maximum additional tons of water she can use\n        additional_tons = remaining_amount // additional_water_fee\n        \n        # Total tons of water she can use\n        total_tons = 3 + additional_tons\n    \n    return int(total_tons)\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n\n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, (amelia + carl + daniel) / 2)\n    equation3 = Eq(carl, (3 / 4) * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor that gives a remainder is always 1 more than the remainder\n    smallest_divisor = remainder + 1\n    # The smallest possible dividend can be calculated using the formula:\n    # dividend = divisor * quotient + remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time taken by the lazy gardener to mow the lawn alone\n    # Quick gardener's work rate is 1/12 per hour\n    # Lazy gardener's work rate is 1/x per hour\n    # Combined rate is (1/12 + 1/x) per hour\n    # Combined work time is 8 hours\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1/12 + 1/x, 1/8)\n    solution = solve(equation, x)\n    \n    # Since the solve function may return a list of solutions including negative value,\n    # we take only the positive value for the time taken.\n    time_taken_by_lazy = [sol.evalf() for sol in solution if sol > 0][0]\n    \n    return time_taken_by_lazy\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    total_fruits = solutions[apples] + solutions[oranges]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Eve's and Alice's candies\n    number_of_girls = 3   # Eve, Alice, and Irene\n\n    candy_per_girl = total_candy / number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Noah, Pete, and Howard have\n    noah, pete, howard = symbols('noah pete howard')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    \n    matthew_tomatoes = belinda_tomatoes - belinda_gave\n    matthew_original = matthew_tomatoes - belinda_gave\n    \n    return matthew_original\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_amount = 5 * x\n\n    equation = Eq(initial_amount - (dress_cost * x + skirt_cost * x), remaining_amount)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():    \n    from math import floor, ceil\n\n    part1 = floor(2017)\n    part2 = floor(201.7)\n    part3 = ceil(20.17)\n    part4 = ceil(2.017)\n\n    ans = part1 - part2 + part3 - part4\n\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # minutes\n    red_line_interval = 6    # minutes\n    \n    # Least common multiple (LCM) will give us the interval in minutes when both will align\n    lcm = green_line_interval * red_line_interval\n    \n    for i in range(2, min(green_line_interval, red_line_interval) + 1):\n        if green_line_interval % i == 0 and red_line_interval % i == 0:\n            lcm = (green_line_interval * red_line_interval) // i\n            break\n\n    # Convert the interval from minutes to hours and minutes\n    hours = lcm // 60\n    minutes = lcm % 60\n\n    # Trains start at 5:00 am, so we add the interval to this start time\n    start_hour = 5\n    end_hour = start_hour + hours\n    end_minutes = minutes\n\n    # Format the time when they set out together again\n    end_time = f\"{end_hour:02d}:{end_minutes:02d}\"\n\n    return end_time\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    total = 0\n    for i in range(1, 15, 2):\n        prod = 1\n        for j in range(2, i+2, 2):\n            prod *= j\n        total += prod\n    return total\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in mL\n    half_jug = jug_capacity / 2\n    capacity_per_cup = half_jug / 3\n    return capacity_per_cup\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # There's one tree for every 3 meters, so to reach the 101th tree, \n    # Olivia would have walked past 100 intervals of 3 meters each.\n    distance_to_101th_tree = 100 * 3  # in meters\n\n    # Convert Olivia's walking time to the 101th tree into minutes\n    time_to_101th_tree = 3  # in minutes\n\n    # Calculate Olivia's walking speed in meters per minute\n    speed = distance_to_101th_tree / time_to_101th_tree  # meters per minute\n\n    # Calculate the total time it will take for her to travel 4000 meters (the distance from school to home)\n    total_time = 4000 / speed  # in minutes\n\n    return total_time\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Given two equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    total_cost = cost_per_gram * 250\n    return total_cost\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    sum_of_squares = 0\n    # The series 4, 8, 12, ..., 124 is an arithmetic sequence with a common difference of 4\n    # Calculate the number of terms in the sequence\n    n = (124 - 4) / 4 + 1\n\n    # Calculate the sum of squares using the formula for the sum of the first n squares: n(n + 1)(2n + 1) / 6\n    # The series 4^2, 8^2, 12^2, ..., 124^2 can be written as (4^2)(1^2), (4^2)(2^2), (4^2)(3^2), ... (4^2)(31^2)\n    # Which is 16 times the sum of the squares of the first 31 numbers\n    sum_of_squares = 16 * (n * (n + 1) * (2 * n + 1)) // 6\n\n    return sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    total = 0\n    for i in range(6, 52, 5):\n        total += i**2\n    return total\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 'ABC'\n    people = 'LJAK'\n    count = 0\n    for perm in permutations(entrances * len(people), len(people)):\n        if len(set(perm)) == len(entrances):\n            count += 1\n    return count // 6  # dividing by 6 because each permutation is counted 6 times due to repetition of entrances\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    # Define the total number of questions and Valerie's total score\n    total_questions = 6\n    total_score = 23\n    # Points for correct and wrong answers\n    correct_points = 5\n    wrong_points = -2\n\n    # We will hypothesize the number of correct answers and find wrong ones\n    # Use a loop to test each possible number of correct answers\n    for correct_answers in range(total_questions + 1):\n        # Calculate the number of wrong answers\n        wrong_answers = total_questions - correct_answers\n        # Calculate the score\n        score = (correct_answers * correct_points) + (wrong_answers * wrong_points)\n        # Check if the calculated score matches Valerie's total score\n        if score == total_score:\n            return correct_answers\n\n    # If no answer is found (though we expect one), return None as a safeguard\n    return None\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cows as c and initial number of goats as g.\n    c, g = symbols('c g') \n\n    # From the question, we have 65% of the animals were cows and the rest were goats.\n    # Thus, we have two equations:\n    # Equation 1: c = 0.65 * (c + g)  -> Initial number of cows is 65% of the total\n    # Equation 2: g = (c + g) - c     -> Number of goats is total minus number of cows\n\n    # After 240 animals were added, the percentage of cows increased to 85% because 65% + 20% = 85%\n    # The number of goats doubled, meaning the new number of goats is 2g.\n    # Because 240 animals were added, we also know that (c + 240) + 2g = (c + g) + 240\n    # Equation 3: c + 240 = 0.85 * ((c + 240) + 2g)\n    # Equation 4: 2g = ((c + 240) + 2g) - (c + 240)\n\n    # Now, let's setup our equations based on the problem statement:\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, (c + g) - c)\n    equation3 = Eq(c + 240, 0.85 * ((c + 240) + 2*g))\n    equation4 = Eq(2*g, ((c + 240) + 2*g) - (c + 240))\n\n    # We can solve the system of equations using sympy's solve function\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    # We only need the initial number of goats (g)\n    return solutions[g]\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Given Owen traded 5 fish for 2 rabbits\n    fish_to_rabbits_ratio = 5 / 2  # This gives the ratio of fish to rabbits\n\n    # Given Oscar traded 4 rabbits for 7 packs of wheat\n    rabbits_to_wheat_ratio = 4 / 7  # This gives the ratio of rabbits to wheat packs\n\n    # Owen -> Oscar -> Dennis: 5 fish for 2 rabbits, then those 2 rabbits for 7/2 packs of wheat\n    # Simplify the continued ratio to find the equivalent number of fish for 1 pack of wheat\n    fish_to_wheat_ratio = fish_to_rabbits_ratio / rabbits_to_wheat_ratio\n\n    # Finally, determine how many fish Owen should give Dennis for 14 packs of wheat\n    fish_for_14_wheat = fish_to_wheat_ratio * 14\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n\n    total_time = time_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 8 == 0) and (i % 9 == 1):\n            ans = i\n            break\n        i += 1\n    return ans\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 4 * 5 * 6  # Since Chinese Remainder Theorem gives a series of solutions, we only need the first one less than 100\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_payment = total_cost - discount\n\n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_in_one_case = 10 // 2\n    books_in_six_cases = books_in_one_case * 6\n    return books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    # There are two boys, which can be arranged in 2! ways.\n    boy_arrangements = 2\n\n    # There are three girls, which can be arranged in 3! ways.\n    girl_arrangements = 6  # This is 3! (factorial of 3)\n\n    # By the multiplication principle, the total number of arrangements is the product of boy_arrangements and girl_arrangements.\n    total_arrangements = boy_arrangements * girl_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    # Since Tom's age is a multiple of 3 and he is the oldest,\n    # Tom must be 10, Jason is younger than Tom so Jason must be 6,\n    # and consequently, Adam is 9.\n    tom, adam, jason = 10, 9, 6\n    return adam\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # To guarantee 3 different colored balls, we must consider the worst case scenario\n    # In the worst case, we might pick all balls of the same color first before getting another color\n    # Since there are 5 balls of each color, we can pick at most 5 of one color and 5 of another before we are\n    # guaranteed to get a third color on the next draw\n    # So, we need to pick all 5 red and all 5 white to ensure that the next ball (the 11th) is of a different color (yellow)\n    return 5 + 5 + 1  # 5 red, 5 white, and 1 yellow\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    while int(number * n) % 11 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    return 224 - 75\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Since the number of apples each child gets must be different,\n    # let's assign the minimum number of apples to the five other children first.\n    # They get 1, 2, 3, 4, and 5 apples, respectively.\n    min_apples_given_away = sum(range(1, 6))\n    \n    # Now we subtract the minimum number of apples given away from the total\n    # to find the maximum number of apples that Avril could possibly get.\n    max_apples_for_avril = 28 - min_apples_given_away\n\n    return max_apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n    laptop_cost = total_money * fraction_spent\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    # Ratio of Joyce's speed to Lori's speed.\n    ratio_j_l = 3/2\n    \n    # Lori's speed is 2 meters per second.\n    lori_speed = 2\n    \n    # Calculate Joyce's speed based on the ratio.\n    joyce_speed = lori_speed * ratio_j_l\n    \n    # Calculate the distance Joyce can run in 10 seconds.\n    distance_run_by_joyce = joyce_speed * 10\n    \n    return distance_run_by_joyce\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    # Average of two numbers is 60, so their sum is 2 * 60\n    sum_two_numbers = 2 * 60\n    \n    # If one more number is added, the average becomes 70, so the sum of three numbers is 3 * 70\n    sum_three_numbers = 3 * 70\n    \n    # The newly added number is the difference between the sum of three numbers and the sum of the two numbers\n    new_number = sum_three_numbers - sum_two_numbers\n    \n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Hannah left school\n    left_school_time = datetime.strptime('15:22', '%H:%M')\n    # Time when Hannah caught the bus\n    caught_bus_time = datetime.strptime('16:01', '%H:%M')\n    # Time when Hannah got on the bus\n    got_on_bus_time = caught_bus_time + timedelta(minutes=18)\n    # Time when Hannah got home\n    got_home_time = datetime.strptime('16:35', '%H:%M')\n\n    # Calculate time spent walking to the bus stop\n    walk_to_bus = caught_bus_time - left_school_time\n    # Calculate time spent walking home from the bus drop off point\n    walk_home = got_home_time - got_on_bus_time\n\n    # Total walking time\n    total_walking_time = walk_to_bus + walk_home\n    # Total walking time in minutes\n    total_walking_minutes = total_walking_time.seconds // 60\n\n    return total_walking_minutes\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L represent the amount of money Lisa has and K represent the money Ken has.\n    L, K = symbols('L K')\n    \n    # According to the problem, Ken had $15 more than Lisa at first: K = L + 15.\n    initial_condition = Eq(K, L + 15)\n    \n    # After Ken gave some of his money to Lisa, he had $21 less than Lisa: K - x = L + x - 21.\n    # Let x represent the amount of money Ken gave to Lisa.\n    x = symbols('x')\n    final_condition = Eq(K - x, L + x - 21)\n    \n    # We have two equations to solve for K, L, and x.\n    solutions = solve((initial_condition, final_condition), (K, L, x))\n    \n    # The amount Ken gave to Lisa is represented by x.\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for question_number in range(1, 10):\n        if question_number <= 5:\n            trophies += question_number\n        else:\n            trophies += (10 - question_number)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    more_boys = 80\n    girls = boys - more_boys  # Calculate the number of girls\n\n    children_total = boys + girls  # Calculate the total number of children\n\n    percentage_boys = (boys / children_total) * 100  # Calculate the percentage of boys\n\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n    \n    # Sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # Here, S_5 (sum of cookies eaten in 5 days) is 100,\n    # a_1 is x, and a_5 (number of cookies eaten on the 5th day) is x + 4*6\n    # because he eats 6 more each day than the previous day\n    \n    # Equation for the sum of terms in the arithmetic sequence over 5 days\n    equation = Eq(5/2 * (x + (x + 4*6)), 100)\n    \n    # Solve for x\n    first_day_cookies = solve(equation, x)[0]\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Generate the sequence\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i+1))\n    \n    # Calculating the median\n    sequence.sort()\n    N = len(sequence)\n    if N % 2 == 0:\n        median = (sequence[N//2 - 1] + sequence[N//2]) / 2\n    else:\n        median = sequence[N//2]\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    blue = 18\n    red = 6\n    orange = 8\n    # To ensure 2 red marbles, we could take all non-red ones first:\n    non_red = blue + orange\n    # Then we take 1 red marble but since we are ensuring 2, we need to take one more\n    ans = non_red + 2\n    return ans\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # A student turns around for every multiple of 2 and 3, thus multiple of 6\n        # If a number is a multiple of both 2 and 3 (i.e., multiple of 6), they'll face away and then face the teacher\n        # So only count those not multiple of 2 or not multiple of 3 (those who turn around an odd number of times)\n        if i % 2 != 0 or i % 3 != 0:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) / (4 - 1)\n    rows = 25\n    \n    last_term = first_term + (rows - 1) * difference\n    total_athletes = (first_term + last_term) * rows / 2\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initially there's a 1/3 chance the car is behind each gate.\n    # When the host opens a gate with a goat, the probabilities are adjusted.\n    # If your initial choice (gate 1) had the car, there's still a 1/3 chance you chose correctly.\n    # The remaining 2/3 chance must all be for the other unopened gate (gate 2).\n    # So, you have a better chance (2/3) of winning the car if you switch to gate 2.\n    # Therefore, you should choose gate 2.\n    # Return the probability as it's more beneficial to switch\n    return 2/3  # This is the probability of winning if you switch to gate 2\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    missing_number = 221 * 4\n    return missing_number\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            break\n    return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    times = 6\n    per_time_cost = 'x'\n    total_cost = times * per_time_cost\n    return str(total_cost) + ' dollars'\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original sum of money as 'x'.\n    x = symbols('x')\n\n    # According to the problem, David spent 75 dollars on CDs.\n    # So, he has x - 75 left.\n\n    # Then he spent 1/4 of the remaining money on batteries.\n    # So, he has (x - 75) - (1/4)*(x - 75) left.\n\n    # He finally was left with 1/3 of the original sum of money.\n    # Therefore, (x - 75) - (1/4)*(x - 75) = (1/3)*x. \n\n    # Setting up the equation\n    equation = Eq((x - 75) - (1/4)*(x - 75), (1/3)*x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution which is the original amount of money David had\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 trainers can catch 7 pokemon in 7 minutes,\n    # we can calculate the rate of one trainer.\n    # One trainer catches 1 pokemon in 7 minutes.\n    # Now, we want to catch 49 pokemons in 49 minutes.\n    # Since the time is 49 minutes and one trainer catches 1 pokemon every 7 minutes,\n    # one trainer can catch 7 pokemons in 49 minutes.\n    # Finally, we need to find out how many trainers we need to catch 49 pokemons,\n    # which is 49 pokemons divided by 7 pokemons per trainer.\n\n    pokemons_per_trainer = 49 / 7\n    return int(pokemons_per_trainer)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from itertools import permutations\n\ndef solution():\n    all_permutations = list(permutations(range(7), 3))\n    ans = len(all_permutations)\n    return ans\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 13  # Tommy and his 12 friends\n    minutes_per_person = 142  # Each person spent 142 minutes\n    \n    total_minutes_spent = total_people * minutes_per_person\n    \n    return total_minutes_spent\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    num_repetitions = 99 // 9  # Each repetition of '928' has 3 digits\n    remainder = (928 * num_repetitions) % 9\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oplus = symbols('oplus')\n    \n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    solution = solve(equation, oplus)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n    \n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n    \n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, c where a <= b <= c\n    \n    # Given total sum of the numbers\n    total_sum = 56\n    \n    # Average of the smallest two numbers is 14\n    # Let the smallest two numbers be a and b\n    # (a + b) / 2 = 14 => a + b = 28\n    \n    # Average of the largest two numbers is 22\n    # Let the largest two numbers be b and c\n    # (b + c) / 2 = 22 => b + c = 44\n    \n    # Using the two equations to solve for b\n    # a + b = 28 and b + c = 44\n    # Total sum is a + b + c = 56\n    # Substituting the value of a + b into a + b + c\n    # We get 28 + c = 56 => c = 28\n    \n    # Now, we can find b by substituting c into b + c = 44\n    # So b = 44 - c = 44 - 28 = 16\n    \n    # Finally, find a by substituting b into a + b = 28\n    # a = 28 - b = 28 - 16 = 12\n    \n    # Therefore, the three numbers are 12, 16, 28\n    # The median number is the middle number which is b\n    b = 16\n    return b\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # We are searching for a number of bars such that the change for both purchases is the same\n    # We calculate the price in pence, and the amount paid in pence for easier calculation\n    price_sour = 12\n    paid_sour = 3 * 100\n    price_choco = 17\n    paid_choco = 4 * 100\n\n    # We iterate over the possible number of bars until we find the same amount of change\n    for bars in range(1, paid_sour // price_sour + 1):\n        change_sour = paid_sour - bars * price_sour\n        change_choco = paid_choco - bars * price_choco\n\n        if change_sour == change_choco:\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 3, 5, 7]\n    smallest_even = min(d for d in digits if d % 2 == 0)\n    digits.remove(smallest_even)\n    smallest_number = smallest_even\n    digits.sort()\n    for d in digits[::-1]:\n        smallest_number += d * 10 ** (digits.index(d) + 1)\n    return smallest_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10\n    container_volume = 2\n    num_containers = total_volume // container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n    \n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = sum('2' in str(number) for number in range(41))\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    ans = equation1 == equation2\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dumpling, bun = symbols('dumpling bun')\n    \n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_fare = 8.5\n    base_distance = 1.8\n\n    additional_fare = total_fare - base_fare\n    additional_distance = additional_fare / additional_fare_per_km\n\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    # At least one student gets at least 3 apples.\n    # Use the Pigeonhole Principle to calculate the minimum number of students (pigeonholes).\n    min_apples_per_student = 3\n\n    # To ensure at least one student gets 3 apples, we need to have at least 3 apples for every student except one.\n    # That one student can have the remaining apples. So the class size (number of pigeonholes) is:\n    class_size = (apples - 3) // (min_apples_per_student - 1) + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for x in range(1, 50):\n        if x % 5 == 0 and x % 6 == 3 and x % 8 == 5:\n            return x\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received = 8\n    original = received * 2\n    return original\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    big_cars_needed = boys_in_big_cars // big_car_capacity\n    small_cars_needed = girls_in_small_cars // small_car_capacity\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    target_sum = 100\n\n    years = 0\n    while julia_age + mother_age + father_age + 3 * years < target_sum:\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n\n    pounds = ounces * pounds_per_ounce\n    kg = pounds * kg_per_pound\n\n    return round(kg, 1)  # round to the nearest 0.5kg increment for best approximation\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    solutions = solve(equation)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    ascending_sum = sum(range(5, 81))\n    descending_sum = sum(range(5, 80))\n    total_sum = ascending_sum + descending_sum\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        abc = 100*a + 10*b + c\n        bcd = 100*b + 10*c + d\n        cde = 100*c + 10*d + e\n        def_val = 100*d + 10*e + f\n        efg = 100*e + 10*f + g\n        fgh = 100*f + 10*g + h\n        ghi = 100*g + 10*h + i\n\n        current_sum = abc + bcd + cde + def_val + efg + fgh + ghi\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    discounted_price = 32\n    further_discount = 4\n    original_price = discounted_price / (1 - 0.20)\n    \n    final_price = discounted_price - further_discount\n    total_discount = (original_price - final_price) / original_price * 100\n    \n    return total_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Since A wants to be to the left of B, and B wants to be to the left of C,\n    # there are only 3 positions they can take (ABC, BAC, or BCA).\n    ABC_positions = 3\n\n    # There are 2 remaining people that can be placed in any of the remaining 2 spots\n    # in any order. This equates to 2! (factorial of 2) arrangements.\n    remaining_people_arrangements = factorial(2)\n\n    # Total arrangements is the product of the specific arrangements (ABC_positions)\n    # and the arrangements of the remaining people (remaining_people_arrangements).\n    total_arrangements = ABC_positions * remaining_people_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the pattern, it can be inferred that the product result\n    # is the square of the difference between the tens and ones place of the number in question\n    number = 55\n    tens = number // 10\n    ones = number % 10\n    ans = (tens - ones) ** 2\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    return int(all_permutations[504])  # indexing starts from 0, so 505th number is at index 504\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '2', '3']\n    perm = permutations(digits, 3)\n\n    # Exclude permutations that start with '0' as it wouldn't be a three-digit number\n    count = sum(1 for p in perm if p[0] != '0')\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 89 * 36\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate\n    alice_work_per_day = 1 / 40\n\n    # Bob's work rate\n    bob_work_per_day = 1 / 60\n\n    # Work done together per day\n    both_work_per_day = alice_work_per_day + bob_work_per_day\n\n    # Total work done by the end of the 27th day\n    total_work_done = both_work_per_day * 27\n\n    # If Alice takes 'x' days off\n    # Work done by Alice = (27-x) * alice_work_per_day\n    # Work done by Bob = 27 * bob_work_per_day\n    # Their combined work should equal to finishing 1 job, hence:\n    # (27-x) * alice_work_per_day + 27 * bob_work_per_day = 1 job\n    # We solve for x\n\n    # Total days Alice worked (27 - x)\n    alice_total_work_days = 27 - (1 - (27 * bob_work_per_day)) / alice_work_per_day\n\n    # Days Alice took off\n    alice_days_off = 27 - alice_total_work_days\n\n    return alice_days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_6_and_9 = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples_6_and_9.append(i)\n    return multiples_6_and_9\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    # Let x be the number of red balls\n    # Then the number of white balls is 2x\n    # And the number of black balls would be (2x * 4) / 3\n    # The sum is 136: x + 2x + (2x * 4) / 3 = 136\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 2 * x + (2 * x * 4) / 3, 136)\n    solution = solve(equation, x)\n    \n    return int(solution[0])\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Given 7th, 8th, and 9th terms of the sequence\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    # Calculate the common difference from the sequence\n    common_difference = term_8 - term_7  # or term_9 - term_8\n\n    # Calculate the 1st term using the formula: a_n = a_1 + (n - 1)d\n    # Rearranged to find a_1: a_1 = a_n - (n - 1)d\n    term_1 = term_7 - (7 - 1) * common_difference\n\n    # Now, calculate the 100th term with the above information\n    term_100 = term_1 + (100 - 1) * common_difference\n\n    return term_100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Number of red and blue socks\n    num_red_socks = 4\n    num_blue_socks = 4\n    # We need 1 extra sock to ensure we have a matching pair\n    socks_to_take_out = num_red_socks + 1\n\n    # Return the minimum socks to take out to guarantee one pair\n    return socks_to_take_out\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Four years ago, combined age of 3 dogs was 24 years\n    combined_age_4_years_ago = 24\n    \n    # Each year, each dog gets older by 1 year\n    # So in 4 years, each dog gets older by 4 years\n    # Since there are 3 dogs, they get a total of 3 * 4 years older in 4 years\n    combined_age_now = combined_age_4_years_ago + (3 * 4)\n    \n    # In 2 more years, each dog will have 2 more years of age\n    # Since there are 3 dogs, they will have a total of 3 * 2 more years\n    combined_age_in_2_years = combined_age_now + (3 * 2)\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11 ** 2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ryan, audrey = symbols('ryan audrey')\n    \n    # Initial ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    # New ratio after the changes\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    results = solve((equation1, equation2), (ryan, audrey))\n    \n    return results[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minutes = 30\n    \n    # The hour hand moves 360 degrees in 12 hours (or 0.5 degrees per minute)\n    # The minute hand moves 360 degrees in 60 minutes (or 6 degrees per minute)\n    hour_angle = (hour % 12) * 30 + (minutes * 0.5)\n    minute_angle = minutes * 6\n    \n    # The angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n    \n    # If angle is more than 180 degrees, convert it to the smaller angle\n    angle = min(angle, 360 - angle)\n    \n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # 5 apples each for 4 sisters\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n    black_beads_in_full_pattern = 3 * full_patterns\n\n    if remaining_beads > 3:\n        black_beads_in_remaining = 3\n    else:\n        black_beads_in_remaining = remaining_beads\n\n    total_black_beads = black_beads_in_full_pattern + black_beads_in_remaining\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    required_time = datetime.strptime(\"7:45 AM\", \"%I:%M %p\")\n    wake_up_time = required_time - timedelta(minutes=total_minutes)\n    \n    return wake_up_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 < 2 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(52):  # Maximum possible chickens will be 51\n        ducks = chickens  # Number of ducks is the same as chickens\n        cows = 51 - chickens - ducks  # Total heads is 51\n        if chickens * 2 + ducks * 2 + cows * 4 == 160:  # Total legs is 160\n            return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    possible_totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                possible_totals.add(total)\n\n    return len(possible_totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from itertools import permutations\n    \n    total_ways = 0\n    entrances = ['E1', 'E2', 'E3', 'E4']\n    for perm in permutations(entrances, 3):\n        if 'E1' in perm[0:2] and 'E2' in perm[0:2]:\n            continue\n        if 'E2' in perm[0:2] and 'E1' in perm[0:2]:\n            continue\n        total_ways += 1\n        \n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_amount = 750\n    drank_rebekah = initial_amount * (1/5)\n    drank_abigail = 200\n    drank_anna = 120\n\n    juice_left = initial_amount - (drank_rebekah + drank_abigail + drank_anna)\n\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    quantity = 90\n    percentage = 75 / 100\n\n    result = quantity * percentage\n\n    return result\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance_nm = 3000  # nautical miles\n    total_time_hours = 13 * 24 + 22  # converting days and hours to hours\n\n    average_speed_nm_per_hour = total_distance_nm / total_time_hours\n\n    return round(average_speed_nm_per_hour)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first fruit punch in liters\n    concentration1 = 0.4  # 40% fruit juice\n    \n    volume2 = 3  # volume of second fruit punch in liters\n    concentration2 = 0.7  # 70% fruit juice\n    \n    total_volume = volume1 + volume2\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n    \n    new_concentration = total_fruit_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    start = (50 // 11) + 1\n    end = 150 // 11\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare symbols for the number of men and women originally at the bus stop\n    men_original, women_original = symbols('men_original women_original')\n    \n    # When the first bus arrived, 36 women left\n    equation1 = Eq(women_original - 36, (3/5) * men_original)\n    \n    # Then, 48 men left, making the number of men and women equal\n    equation2 = Eq(men_original - 48, women_original - 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men_original, women_original))\n    \n    # Total people at first = original number of men + original number of women\n    total_people_at_first = solutions[men_original] + solutions[women_original]\n    \n    # Return the total number of people\n    return total_people_at_first\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    given_away_first = 339\n    bought_stamps = 455\n    given_away_second = 777\n\n    remaining_stamps = initial_stamps - given_away_first + bought_stamps - given_away_second\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes_list = list(primerange(20, 30))\n    return primes_list[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'age' be Fatouma's current age\n    age = symbols('age')\n\n    # Equation representing the problem: age in 2 years = 2 * (age 5 years ago)\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    # Solve the equation\n    solution = solve(equation, age)\n\n    # Return Fatouma's current age\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x in range(1, 14):\n        for y in range(x + 1, 14):\n            z = 14 - x - y\n            if z > y and z < 14:\n                ways.append((x, y, z))\n    ans = len(ways), ways\n    return ans\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = (1*3*8) + (2*6*16) + (3*9*24)\n    denominator = (1*2*4) + (2*4*8) + (3*6*12)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "from math import ceil\n\ndef solution():\n    min_height = 124\n    max_height = 132\n    # To ensure at least 4 students are of the same height,\n    # divide the range of heights by the number of possibilities (4-1)\n    # and use the ceiling function to get the minimum class size.\n    class_size = ceil((max_height - min_height + 1) / 3)\n    return class_size * 3  # Times 3 because we need at least 4 students per group\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred takes 1 orange, there are 14 oranges left.\n    # If George then can take 1,2,3 oranges, leaving Fred with 13,12,11 oranges\n    # No matter what George takes, Fred can always leave George with 10 oranges by taking 3,2,1.\n    # Then if George takes 1,2,3 oranges, leaving 9,8,7 oranges left.\n    # Fred can again take 3,2,1 to leave George with 6 oranges.\n    # And then regardless of George's move, Fred can always leave George with 2 oranges.\n    # Hence, Fred can make sure to win by always leaving a number that is 4 minus George's take.\n    \n    # We can go backward and find that the winning positions for Fred are multiples of 4 plus 1.\n    # That is 1, 5, 9, 13.\n    # He will take enough oranges to reach the next winning position after his turn.\n    \n    # The strategy boils down to taking enough oranges to have the remaining count be a multiple of 4.\n    # Hence Fred should aim for leaving 12 oranges on the table on his first turn.\n    # To leave 12 oranges, Fred should take 3 oranges on his first turn.\n    \n    fred_first_turn = 15 % 4\n    return fred_first_turn \n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    desired_ready_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = desired_ready_time - cooking_duration\n    return start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    total_go = 42\n    total_checkers = 55\n    total_chess = 33\n    \n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    \n    all_three = 5\n\n    total_students = (total_go + total_checkers + total_chess) - (go_and_checkers + go_and_chess + checkers_and_chess) + all_three\n    \n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Define the current ages of Oliver and Lin\n    oliver_age_now = 20\n    lin_age_now = 26\n\n    # Let the number of years later be x\n    # Oliver's age x years later will be oliver_age_now + x\n    # Lin's age x years later will be lin_age_now + x\n    # According to the problem, the sum of their ages should be 48 x years later\n    # Formulate the equation: (oliver_age_now + x) + (lin_age_now + x) = 48\n\n    # Simplify the equation to find x\n    # (20+x) + (26+x) = 48\n    # 46 + 2x = 48\n    # 2x = 48 - 46\n    # 2x = 2\n    # x = 2 / 2\n    # x = 1\n\n    x = 1\n    return x\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    poles = 40\n    distance_between_poles = 3\n    distance = (poles - 1) * distance_between_poles\n    return distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_roots = [i**3 for i in range(1, int((245)**(1/3))+1)]\n    for cube in cube_roots:\n        if (245 * cube) ** (1/3) % 1 == 0:\n            return cube\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n        if E == 0 or S == 0:  # Skip if first letter of a number is 0\n            continue\n        ESSE = E*1000 + S*100 + S*10 + E\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    sum = 0\n    for i in range(64, 45, -2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    last_year = this_year * 1/4\n    return this_year + last_year\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n    attendance_rate = (present_students / total_students) * 100\n\n    return round(attendance_rate, 2)  # rounding to two decimal places\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n\n    for n in range(2, 2018):\n        for k in range(1, n):\n            total_sum += k / n\n\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    rows_from_front = 4\n    rows_from_back = 3\n    columns_from_left = 1\n    columns_from_right = 4\n\n    total_rows = rows_from_front + (rows_from_back - 1)\n    total_columns = columns_from_left + (columns_from_right - 1)\n\n    total_members = total_rows * total_columns\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n    \n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(100 - x))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_savings = 2.40\n    total_required = 150\n    number_of_days = total_required / daily_savings\n    number_of_weeks = number_of_days / 7\n    return int(number_of_weeks) if number_of_weeks.is_integer() else int(number_of_weeks) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))\n    final_sum = initial_sum + 2019\n    for start in range(1, final_sum):\n        if sum(range(start, start + 8)) == final_sum:\n            return start\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / (1/4)\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let's denote the weight of one chicken as c, one rabbit as r, and one kangaroo as k.\n    \n    # Given that the weight of 2 rabbits is equal to 6 chickens, we can write the following equation:\n    # 2r = 6c => r = 3c\n    \n    # Also given that the weight of 3 kangaroos is equal to 4 rabbits, we can write the following equation:\n    # 3k = 4r\n    \n    # Substitute the weight of the rabbit r from the first equation into the second equation:\n    # 3k = 4 * (3c) => 3k = 12c => k = 4c\n    \n    # Now, we know that one kangaroo weighs the same as 4 chickens.\n    \n    return 4\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    arrangements = factorial(total_letters)\n    \n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Time taken for each activity\n    cut_wood = 3\n    weave_rope = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n    \n    # Since Jason can perform some tasks simultaneously\n    # The longest process will determine the minimum time needed.\n    # Drying the wood takes the longest\n    max_time = max(cut_wood + choose_wood, dry_wood, mow_grass + soak_grass + weave_rope, prepare_food)\n    \n    # The minimum time required is the time taken for the longest process\n    return max_time\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    result = factor * sum_of_multipliers\n    return result\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    num_notes = total_amount // note_value\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_three_years_ago = ashley_age_now - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_age_now = brother_age_three_years_ago + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) / 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is the 7th in line counting from front to back,\n    # and she is standing in the exact middle of the line,\n    # it means there are 6 people in front of her and 6 people behind her.\n    total_dwarves = 6 + 6  # Counting the dwarves only, Snow White excluded\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # To guarantee at least 4 participants for the school with the most participants,\n    # we can divide the total number of participants by 3, and then take the ceiling of that number.\n    # This is because if we had one more school than this number, at least one school would have less\n    # than 4 participants, which contradicts the condition given in the problem.\n\n    # Total number of participants\n    total_participants = 100\n\n    # Maximum number of participants in a school to guarantee at least 4 per school\n    max_participants_per_school = 3\n\n    # The number of schools attended at most\n    max_schools = -(-total_participants // max_participants_per_school)  # Ceiling division\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Using the formula for the sum of an arithmetic series: S_n = n/2 * (a1 + a_n)\n    sum_of_series = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        x = (2018 + i) / 5\n        fractional_part = x - int(x)\n        total += fractional_part\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):\n        if (number % 6 == 0) and (int((number / 6) ** 0.5) ** 2 == number / 6) and (int((number * 6) ** (1/3)) ** 3 == number * 6):\n            return number\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Let x be the distance traveled by the slower train\n    # Then the distance traveled by the faster train is x + 70\n\n    # The time for both trains is the same, hence distance/speed should be equal for both\n    # Hence, (x / 36) = ((x + 70) / 48)\n\n    # To find x, we do cross multiplication\n    # 48 * x = 36 * (x + 70)\n    # 48x = 36x + 2520\n    # 48x - 36x = 2520\n    # 12x = 2520\n    x = 2520 / 12\n  \n    # Now to find the total distance, it is the sum of distances of both trains\n    total_distance = x + (x + 70)\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position gives us the dimensions of the rectangle\n    rows_from_front = 4\n    rows_from_back = 3\n    cols_from_left = 4\n    cols_from_right = 7\n    \n    # Since he is counted from both sides, we subtract one from each to avoid double counting Tim himself\n    total_rows = rows_from_front + rows_from_back - 1\n    total_columns = cols_from_left + cols_from_right - 1\n    \n    # The total number of band members is the number of rows times the number of columns\n    total_members = total_rows * total_columns\n    \n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n    \n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n    \n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount // 2\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == brother_amount * 2:\n            return coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (4/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        # If one boat is added, each boat will hold exactly 6 people\n        students_with_extra_boat = (boat + 1) * 6\n        # If one boat is subtracted, each boat will hold exactly 9 people\n        students_with_less_boat = (boat - 1) * 9\n        # Both conditions need to hold the same number of students\n        if students_with_extra_boat == students_with_less_boat:\n            return students_with_extra_boat\n        boat += 1\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pairs = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                pairs += 1\n    return pairs\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the number of friends, y is the total number of chocolates\n    x, y = symbols('x y')\n\n    equation1 = Eq(y - 18*x, 41)  # If each friend gets 18 pieces, 41 pieces are excess\n    equation2 = Eq(23*x - y, 34)  # If each friend gets 23 pieces, she is short of 34 pieces\n\n    # using sympy.solve to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Now we know the total chocolates and number of friends, calculate pieces left when each friend gets 20\n    chocolates_left = solutions[y] - 20*solutions[x]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * (2/5), chai_seng * (1/7))\n    equation3 = Eq(chai_seng * (1/7), rasidah * (2/5) / 2)\n\n    solutions = solve((equation1, equation2, equation3), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for d1 in range(1, 10):\n        for d2 in range(d1 + 1, 10):\n            for d3 in range(d2 + 1, 10):\n                d4 = d1 + d2 + d3\n                if d3 == d1 + d2 and d4 < 10 and d1 + d2 + d3 + d4 == 16:\n                    return d4\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    two_digit_numbers = set()\n    \n    # Loop to generate all possible combinations of the three digits\n    for i in digits:\n        for j in digits:\n            number = i + j\n            \n            # Ensuring that we do not have a leading zero and duplicates are not counted\n            if number[0] != '0' and number not in two_digit_numbers:\n                two_digit_numbers.add(number)\n    \n    # The number of different two-digit numbers\n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    digits = [2, 4, 6, 8]\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance of the uphill and downhill journeys\n    uphill_distance = 3 * 5\n    downhill_distance = 2 * 10\n\n    # Total distance of the whole trip\n    total_distance = uphill_distance + downhill_distance\n\n    # Total time taken for the trip\n    total_time = 3 + 2\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Calculate the total cost for the first 5 kilowatt-hour\n    initial_cost = 2 * 5\n    # Calculate the fixed service fee\n    service_fee = 3\n    # Calculate the amount left after subtracting initial costs and service fees from total $63\n    remaining_money = 63 - initial_cost - service_fee\n    \n    # Calculate additional kilowatt-hour she can use with the remaining money\n    # As it is charged at $1 per kilowatt-hour\n    additional_kwh = remaining_money\n    \n    # Total kilowatt-hour is the sum of first 5 plus additional \n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    # Perform inverse operation to find the value of the square.\n    result = 54 * 7 / 63\n    return result\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    value_after_depreciation = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(value_after_depreciation, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10*x + y\n            B = 400 + 10*x + y\n            if B == 7*A + 10:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    number = 4320\n    target_base = 3/2\n    # Prime factorization of the number 4320\n    factorization = {2: 5, 3: 3, 5: 1}  # 4320 = 2^5 * 3^3 * 5\n    n = 0  # Initialize the counter for how many n satisfy the condition\n    # Since the base is 3/2, we can only remove factors of 3\n    # We need to check how many threes we can remove until there are no threes left\n    while factorization[3] >= n:\n        n += 1\n    ans = n - 1  # Subtract one because we've gone one step too far\n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    number_of_small_boxes = total_cookies / small_box_capacity\n\n    return int(number_of_small_boxes) if total_cookies % small_box_capacity == 0 else int(number_of_small_boxes) + 1\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return (-8) - (-19)\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # Using Inclusion-Exclusion Principle, at most students passing all tests can be obtained by subtracting min overlap\n    min_pass_two_tests = (math_pass + science_pass + english_pass) - total_students\n\n    # Since at least 43 pupils passed at least one test, the maximum that can pass all tests\n    # is when the remaining students (1 to min_pass_two_tests) pass exactly two tests\n    max_all_pass = total_students - min_pass_two_tests\n\n    return max_all_pass\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    total_juice = 20 * 0.35 + 30 * 0.60\n    concentration = (total_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original grain in warehouse B as 'b'\n    b = symbols('b')\n\n    # We can set up the equation based on the given information\n    # After the transactions, warehouse A has 50 + 12 tons of grain\n    # Warehouse B has b - 16 tons of grain after shipping out 16 tons\n    # And we are told that warehouse A has 2 times the grain of warehouse B\n    equation = Eq(50 + 12, 2 * (b - 16))\n\n    # Solve the equation for 'b'\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    for num in range(32, 41):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return num\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    # Calculate minimum number of boxes needed by using ceiling division\n    min_boxes = -(-total_cookies // cookies_per_box)\n\n    return min_boxes\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    num_ways = factorial(len(word)) // prod(factorial(freq) for freq in letter_freq.values())\n    return num_ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen trades 3 fishes for 1 rabbit: 3 fishes = 1 rabbit\n    # Oscar trades 2 rabbits for 3 packs of wheat: 2 rabbits = 3 packs of wheat\n    # We need to find how many fishes for 1 pack of wheat.\n\n    # We can combine the ratios:\n    # (3 fishes / 1 rabbit) * (1 rabbit / (3/2) packs of wheat)\n    # This simplifies to (3 fishes) / ((2/3) pack of wheat)\n    # So, for 1 pack of wheat, Owen needs to give Dennis 3 * (2/3) = 2 fishes.\n\n    fishes_per_pack_of_wheat = 3 * (2/3)\n    \n    return int(fishes_per_pack_of_wheat)\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # assuming a reasonable upper limit for people\n        if (people + 7) % 3 == 0 and (people - 21) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10): # since we're including 0, start from 0\n        for x2 in range(10):\n            for x3 in range(10):\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell / 2\n    lyn = ginnie / 4\n    total_stickers = ginnie + lyn\n    return int(total_stickers)\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    ans = 21 - 11\n    return ans\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The Chinese Remainder Theorem can be applied here.\n    # x = 1 (mod 4), x = 2 (mod 5), x = 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Using solve_congruence from the sympy library to find the solution\n    remainder_solve = solve_congruence(*congruences)\n\n    # Since solve_congruence returns a tuple (a, b) where x = a (mod b),\n    # we're interested only in the first value a, which is the minimum solution.\n    # Then we add b until we find a value in the given range 400-500.\n    pencils = remainder_solve[0]\n    modulus = remainder_solve[1]\n    while pencils < 400:\n        pencils += modulus\n    \n    # Ensure the result is in the range 400-500\n    if pencils > 500:\n        return \"No solution in given range\"\n\n    return pencils\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_money = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_money * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_mass, juice_mass = symbols('empty_mass juice_mass')\n\n    equation1 = Eq((5/6) * juice_mass + empty_mass, 4.6)\n    equation2 = Eq((2/3) * juice_mass + empty_mass, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_mass, juice_mass))\n\n    empty_bottle_mass_kg = solutions[empty_mass]\n    # Convert kg to grams\n    return empty_bottle_mass_kg * 1000\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    # Multiply by 2, subtract 3 and get 19 is the equation: 2x - 3 = 19\n    # Perform the inverse operations to find Lisa's favourite number (x)\n    # Add 3 to both sides of the equation: 2x - 3 + 3 = 19 + 3\n    # This simplifies to: 2x = 22\n    # Divide both sides of the equation by 2: 2x / 2 = 22 / 2\n    # This simplifies to: x = 11, which is Lisa's favourite number\n    return 11\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):             # Loop for the hundreds place (odd digit)\n        for j in range(0, 10):            # Loop for the tens place\n            for k in range(0, 10):        # Loop for the units place\n                if i + j + k == 5:        # Check if the sum of the digits is 5\n                    count += 1            # Increment the count if the condition is satisfied\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits = 1101\n    total_pages = 0\n    current_digits = 0\n    \n    for num_digits in range(1, digits+1):\n        pages_with_current_digits = 9 * (10 ** (num_digits - 1))\n        if current_digits + pages_with_current_digits * num_digits > digits:\n            remaining_digits = digits - current_digits\n            total_pages += remaining_digits // num_digits\n            break\n        else:\n            current_digits += pages_with_current_digits * num_digits\n            total_pages += pages_with_current_digits\n    \n    return total_pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each = total_pupils // 2  # Dividing by 2 to get the number of pupils each room will have\n    return pupils_each\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    total = sum((-1)**(i+1) * i for i in range(1, 21))\n    return total\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    while True:\n        term = n * (n + 1) // 2\n        if term >= 100:\n            break\n        n += 1\n    \n    # The while loop stops when term is 3-digit, the largest 2-digit is the previous term.\n    largest_two_digit_term = (n - 1) * n // 2\n    return largest_two_digit_term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's as B, and Carl's as C.\n    # According to the problem we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Adding all three equations we get:\n    # 2*(A + B + C) = 102 + 97 + 93\n\n    # Therefore, the total weight A + B + C is:\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spent = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n    \n    # Number of magazines Clara can buy at most, assuming she spends entirely on magazines\n    max_magazines = total_spent // magazine_cost\n    \n    # Starting from this maximum, and reducing the count, \n    # find the combination where the remaining amount can be fully spent on books\n    for mags in range(int(max_magazines), -1, -1):\n        remaining = total_spent - (mags * magazine_cost)\n        if remaining % book_cost == 0:\n            return mags\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    # Let x be the number of notebooks Andy's sister has at first\n    # Andy has 149 notebooks\n    # After giving 38 notebooks away, Andy has 149 - 38 notebooks\n    # They will then have the same number of notebooks, which means Andy's sister has x + 38\n    # Hence, 149 - 38 = x + 38\n    \n    # Calculate the number of notebooks Andy's sister has at first\n    x = (149 - 38) - 38\n    \n    return x\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv is less than 100 years old\n        age_base10 = str(age) + '0'\n        age_base3 = int(age_base10, 3)\n        if age_base3 == age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of orchids, tulips and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    equation2 = Eq(orchids / tulips, 3/5)\n    equation3 = Eq(orchids * (1 - 0.40) + tulips * (1 - 1/5) + roses * (1 - 0.25), 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    # Return the number of orchids at first\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    # Calculating the expression using arithmetic\n    ans = ((5 / 8) + (1 / 17)) * 8 + (9 / 17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    \n    # Since we need TWO 2-digit multiples of 7 and their product is 7007\n    # We decompose the factorization into two distinct factors that are multiples of 7\n    # and also 2-digit numbers. We can do that by looking at the prime factorization\n    # 7007 = 7 x 7 x 11 x 13. We can then pair up 7 with one of (11 or 13) to get the results\n    first_multiple = 7 * 11\n    second_multiple = 7 * 13\n    \n    # The sum of the two multiples\n    return first_multiple + second_multiple\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # for a circular table with n seats, there are (n-1)! arrangements\n    num_people = 7\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(2, 55):\n        if isprime(num) and isprime(55 - num):\n            return num * (55 - num)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = (379 * 0.00038) + (159 * 0.00621) + (3.79 * 0.121)\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    chocolate_to_cheesecake_ratio = 2 / 3\n    \n    # Find cost of one piece of cheesecake\n    cheesecake_cost = cookie_cost / cheesecake_to_cookie_ratio\n    \n    # Find cost of one piece of chocolate cake\n    chocolate_cake_cost = cheesecake_cost * chocolate_to_cheesecake_ratio\n    \n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    total_candy = Eq(mike + valeria, 36)\n    candy_after_eating = Eq(mike - valeria, 6 - 22)\n\n    solutions = solve((total_candy, candy_after_eating), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_read_in_1_day = 1/4 / 3  # The part of the book Elvis can read in one day\n    total_days_to_finish = 1 / part_read_in_1_day  # Total number of days to finish the whole book\n    return total_days_to_finish\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Iterate over possible values of A, M, and C\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Continue if any of A, M, C are the digits 2, 0, 1, or 9, or if they are not distinct\n                if len({A, M, C, 2, 0, 1, 9}) != 7:\n                    continue\n                \n                # Check divisibility by 9\n                number = 20000000 + A * 1000000 + M * 10000 + C * 100 + 19\n                if number % 9 == 0:\n                    # The number is divisible by 9; return the sum of A, M, and C\n                    return A + M + C\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n    equation1 = Eq(mother_age_now, melissa_age_now * 3)\n    equation2 = Eq(mother_age_now - melissa_age_now, 32 - 8)\n\n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 // (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_digits = [8, 5, 7, 1, 4, 2]  # recurring decimal digits of 6/7\n    sum_digits = sum(recurring_digits)  # sum of one cycle of recurring digits\n\n    full_cycles = 58 // len(recurring_digits)  # how many full cycles in 58 digits\n    remaining_digits = 58 % len(recurring_digits)  # how many digits remain after full cycles\n\n    sum_full_cycles = sum_digits * full_cycles  # sum of digits in full cycles\n    sum_remaining_digits = sum(recurring_digits[:remaining_digits])  # sum of the remaining digits\n\n    total_sum = sum_full_cycles + sum_remaining_digits\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert repetends to float\n    repetend = 4 + 7/10 + 3/100 + 7/990\n    non_repetend = 4.73\n    just_above_repetend = 4.77\n    just_below_repetend = 4.737\n\n    # Find the smallest number\n    min_val = min(repetend, non_repetend, just_above_repetend, just_below_repetend)\n    \n    return min_val\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    plants_before_joel = (remaining_after_joel + 2) * 2\n    \n    remaining_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_after_valerie + 3) * 2\n    \n    remaining_after_ethan = plants_before_valerie\n    plants_at_start = (remaining_after_ethan + 1) * 2\n\n    return plants_at_start\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # Train length in meters\n    tunnel_length = 544  # Tunnel length in meters\n    speed = 52  # Speed in meters per second\n    \n    # Time taken to pass the entire length of the train and the tunnel\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of eggs in the basket at first\n    initial_eggs = symbols('initial_eggs')\n    \n    # The egg-seller sold 16 eggs more than half of initial_eggs\n    first_sale = initial_eggs / 2 + 16\n    \n    # The remaining eggs after the first sale\n    remaining_after_first_sale = initial_eggs - first_sale\n    \n    # The egg-seller sold 7 less than half of the remaining eggs after the first sale\n    second_sale = remaining_after_first_sale / 2 - 7\n    \n    # The remaining eggs after the second sale is 18\n    remaining_after_second_sale = remaining_after_first_sale - second_sale\n    \n    # Set up and solve the equation\n    equation = Eq(remaining_after_second_sale, 18)\n    solution = solve(equation, initial_eggs)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 40\n\n    original_price = increased_price / (1 + increase_percentage / 100)\n\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "from sympy import symbols, solve, sqrt\n\ndef solution():\n    PA, x = symbols('PA x') # Let x be the side length of the cube.\n    \n    # Given lengths, these are the squares of the distances from P to the vertices B, C, D, and diagonal AG, respectively.\n    PB2 = (60 * sqrt(10))**2\n    PC2 = (60 * sqrt(5))**2\n    PD2 = (120 * sqrt(2))**2\n    PG2 = (36 * sqrt(7))**2\n    \n    # The equations based on Pythagorean Theorem for distances to B, C, D\n    eq1 = Eq(PA**2 + x**2, PB2) # PB = sqrt(PA^2 + AB^2), AB = x because it is a side of the cube.\n    eq2 = Eq(PA**2 + 2*x**2, PC2) # PC = sqrt(PA^2 + AC^2), AC is a diagonal on a face of the cube, so AC = sqrt(2)*x.\n    eq3 = Eq(PA**2 + 3*x**2, PD2) # PD = sqrt(PA^2 + AD^2), AD is the space diagonal, so AD = sqrt(3)*x.\n    \n    # The equation based on diagonal AG\n    eq4 = Eq(PA**2 + (3/2)*x**2, PG2) # PG = sqrt(PA^2 + AG^2), AG = x*sqrt(3)/2 because it's half the space diagonal.\n    \n    # We solve the system of equations for PA and x.\n    solutions = solve((eq1, eq2, eq3, eq4), (PA, x))\n    # We only need the positive solution for PA.\n    PA_value = [sol[0] for sol in solutions if sol[0] > 0][0]\n    \n    return PA_value\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let's denote P1 as x and P6 as y.\n    # We have two equations based on the problem statement:\n    # x + y = 120 (total number of students)\n    # (1/2)*x + 2y = 180 (total buckets of water, since each P1 student carries half a bucket)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 120)\n    equation2 = Eq(0.5*x + 2*y, 180)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # A coin has two sides, heads and tails.\n    total_tosses = 2  # The coin is tossed two times.\n    total_outcomes = outcomes_per_toss ** total_tosses  # Each toss is independent of the other.\n\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    # Each team plays with every other team once, so it's a combination problem\n    num_matches = num_teams * (num_teams - 1) // 2\n    \n    return num_matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen the fisher traded 3 fish for 1 rabbit\n    fish_per_rabbit = 3\n\n    # Oscar traded 2 rabbits for 3 packs of wheat\n    rabbits_per_wheat_pack = 2 / 3\n\n    # Calculate fish per pack of wheat\n    fish_per_wheat_pack = fish_per_rabbit * rabbits_per_wheat_pack\n    return fish_per_wheat_pack\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's calculation is wrong. Here is the correct way to check his homework.\n\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    original_number = divisor * quotient + remainder\n\n    return original_number\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    # Initialize count to 0 since we've not yet counted any combinations\n    count = 0\n    # Initialize a list to hold the pairs\n    pairs = []\n\n    # Iterate through all the possible values of the first die\n    for die1 in range(1, 7):\n        # Iterate through all the possible values of the second die\n        for die2 in range(1, 7):\n            # Check if the sum of this pair of dice equals 8\n            if die1 + die2 == 8:\n                # If so, add one to the count\n                count += 1\n                # And append the pair to the pairs list\n                pairs.append((die1, die2))\n\n    # Return the count and the list of pairs\n    return count, pairs\n\n# By calling the solution function, we receive the answer\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_per_box = 14 / boxes_for_14kg\n    total_apples = 66.5\n    total_boxes = total_apples / apples_per_box\n\n    return int(total_boxes) if total_boxes.is_integer() else int(total_boxes) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x represents the total number of students in the canteen initially\n    x = symbols('x')\n\n    # Initially, 40% of x are boys\n    initial_boys = 0.4 * x\n\n    # After 16 boys left and 16 girls entered, the number of boys is initial_boys - 16\n    # and the number of students in the canteen becomes x (total students does not change)\n    # Now, the boys make up 2/15 of the students\n    # So we have the equation: (initial_boys - 16) / x = 2/15\n    equation = Eq((initial_boys - 16) / x, 2/15)\n\n    # Solve for the total number of students initially\n    total_students_initially = solve(equation, x)[0]\n\n    # Calculate the number of boys after 16 boys left\n    boys_after_leaving = initial_boys.subs(x, total_students_initially) - 16\n\n    # Calculate the number of girls after 16 girls entered\n    girls_now = total_students_initially - boys_after_leaving\n\n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n\n    for i in range(1, 4): # Length of numbers to be 1, 2, and 3\n        for comb in permutations(digits, i):\n            num = int(''.join(comb))\n            if isprime(num) and num < 100:\n                primes.add(num)\n    \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the numerator\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n\n    # Calculate the denominator part 1\n    denominator1 = (Fraction(62, 75) - 0.16)\n\n    # Calculate the denominator part 2\n    denominator2 = (3.5 + Fraction(14, 3) + Fraction(32, 15)) / (0.5 * (Fraction(21, 20) + 4.1))\n\n    # Divide the first fraction by the second fraction\n    result = numerator / denominator1 / denominator2\n\n    return float(result)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bracelet, necklace, ring = symbols('bracelet necklace ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(bracelet + necklace + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (bracelet, necklace, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming_percent = 0.82\n    jogging_percent = 0.54\n    neither_percent = 0.16\n\n    swimming_count = total_students * swimming_percent\n    jogging_count = total_students * jogging_percent\n    neither_count = total_students * neither_percent\n\n    both_count = swimming_count + jogging_count - (total_students - neither_count)\n\n    return int(both_count)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # Work rate of A is 1 job in 15 days, i.e., 1/15 job per day\n    work_rate_A = 1 / 15\n    # Work rate of B is 1 job in 10 days, i.e., 1/10 job per day\n    work_rate_B = 1 / 10\n\n    # Total work done by A and B together in 4 days\n    work_done_in_4_days = 4 * (work_rate_A + work_rate_B)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_in_4_days\n\n    # Days needed for B to finish the remaining work alone\n    days_needed_for_B = remaining_work / work_rate_B\n\n    return days_needed_for_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34)\n    term2 = (0.23 + 0.34 + 0.65)\n    term3 = (1 + 0.23 + 0.34 + 0.65)\n    term4 = (0.23 + 0.34)\n\n    ans = (term1 * term2) - (term3 * term4)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    # adding two for the trees on opposite ends\n    ans = (road_length // tree_spacing) + 1\n    return ans\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda can do 1 problem in 5 minutes\n    cici_rate = 1 / 6   # Cici can do 1 problem in 6 minutes\n\n    combined_rate = linda_rate + cici_rate  # Problems done per minute together\n\n    problems_in_2_hours = combined_rate * 120  # Total problems in 2 hours (120 minutes)\n\n    return int(problems_in_2_hours)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy has to give to John.\n    # After giving x apples, Amy will have amy - x apples, and John will have john + x apples.\n    # Amy will have 4 more apples than John.\n    # Therefore, we need to solve for x in the equation: (amy - x) = (john + x) + 4\n\n    x = (amy - john - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice = 245\n    janet = alice + 125\n    total_stickers = alice + janet\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    odd_number = 15  # The odd number between 13 and 17\n    return odd_number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    # Your arrival time is 18 minutes late\n    late_time = 18\n    \n    # Buses run every 45 minutes\n    bus_interval = 45\n    \n    # Calculate the waiting time by taking the remainder of the late time divided by the bus interval\n    # If you are late by a multiple of the bus interval, then you arrive just as a bus leaves and must wait the full interval\n    wait_time = bus_interval - (late_time % bus_interval)\n    \n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    total_grass = 14 * 15  # Total amount of grass is enough to feed 14 goats for 15 days\n    grass_for_one_goat_one_day = total_grass / (14 * 15)  # Grass for 1 goat for 1 day\n\n    # Since a goat eats as much grass a day as 4 rabbits, the amount of grass 1 rabbit eats in a day is:\n    grass_for_one_rabbit_one_day = grass_for_one_goat_one_day / 4\n    # The amount of grass 70 rabbits eat in 8 days is the same as the total grass, so we calculate the daily consumption for 70 rabbits\n    daily_consumption_70_rabbits = total_grass / 8\n\n    # Now we have the daily consumption for 70 rabbits, we can find the daily consumption for 1 rabbit\n    daily_consumption_one_rabbit = daily_consumption_70_rabbits / 70\n\n    # Check if grass_for_one_rabbit_one_day and daily_consumption_one_rabbit are equal\n    assert grass_for_one_rabbit_one_day == daily_consumption_one_rabbit\n\n    # Now, we calculate the daily consumption for 17 goats and 20 rabbits\n    daily_consumption_17_goats = 17 * grass_for_one_goat_one_day\n    daily_consumption_20_rabbits = 20 * grass_for_one_rabbit_one_day\n\n    # Total daily consumption for 17 goats and 20 rabbits\n    total_daily_consumption = daily_consumption_17_goats + daily_consumption_20_rabbits\n\n    # Finally, we find out for how many days the given piece of pasture can feed 17 goats and 20 rabbits\n    days = total_grass / total_daily_consumption\n\n    return int(days)\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define variables for the number of each prize\n    x, y, z = symbols('x y z')\n\n    # write the equations based on the problem statement\n    eq1 = Eq(x, y + 83) # X has 83 more prizes than Y\n    eq2 = Eq(z, x + 24) # Z has 24 more prizes than X\n    eq3 = Eq(x + y + z, 283) # The total number of prizes is 283\n\n    # solve the equations to find the number of prizes Y\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # return the solution for the number of Prizes Y\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mr. Chan (C) and Mr. Toh (T)'s money\n    C, T = symbols('C T')\n\n    # Equation 1: 1/4 of C's money is $33 more than 1/3 of T's money\n    eq1 = Eq(1/4 * C, 1/3 * T + 33)\n\n    # Equation 2: Together, they have $1000\n    eq2 = Eq(C + T, 1000)\n\n    # Solve the system of equations for C and T\n    solutions = solve((eq1, eq2), (C, T))\n\n    # Return the amount of money that Mr. Toh has\n    return solutions[T]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tasha, sandra, riley = symbols('tasha sandra riley')\n\n    # Sandra has 1/3 of Tasha's erasers\n    equation1 = Eq(sandra, tasha / 3)\n\n    # Riley has 3/5 of Sandra's erasers\n    equation2 = Eq(riley, 3 * sandra / 5)\n\n    # Tasha has 60 more erasers than Riley\n    equation3 = Eq(tasha, riley + 60)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    total_climbed = 0\n    day = 0\n    slide = 0\n\n    while total_climbed < height:\n        day += 1\n        total_climbed += climb\n        \n        if total_climbed >= height:\n            break\n\n        slide += 1\n        total_climbed -= slide\n    \n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    base = 4\n    repetitions = 3\n    number_str = ''.join(str(base) * i for i in range(1, repetitions + 1))\n    numbers = list(map(int, number_str.split(base)))\n    ans = sum(numbers) + base * (repetitions - 1)\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9 ** 2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    old_password = \"0141705021\"\n    new_password_text = \"Devil\"\n    expected_new_password = \"\"\n\n    letter_to_number_mapping = {\n        'A': '0', 'n': '1', 'g': '2', 'e': '3', 'l': '4',\n        'D': '0', 'v': '5', 'i': '6'\n    }\n\n    for letter in new_password_text:\n        expected_new_password += letter_to_number_mapping[letter]\n\n    attempted_password = \"4005220912\"\n\n    if attempted_password == expected_new_password:\n        return True\n    else:\n        return expected_new_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for n in range(2, 7): # 6 can be split into at least 2 parts and at most 6 parts (all 1s)\n        for i in range(1, 6):\n            for j in range(i, 6): # start from i to ensure no duplicates (e.g., 1+5 and 5+1)\n                if i + j == 6 and i != j:\n                    count += 1\n                elif i + j < 6:\n                    for k in range(j, 6): # start from j\n                        if i + j + k == 6 and len({i, j, k}) == 3:\n                            count += 1\n                        elif i + j + k < 6:\n                            for l in range(k, 6): # start from k\n                                if i + j + k + l == 6 and len({i, j, k, l}) == 4:\n                                    count += 1\n                                elif i + j + k + l < 6:\n                                    for m in range(l, 6): # start from l\n                                        if i + j + k + l + m == 6 and len({i, j, k, l, m}) == 5:\n                                            count += 1\n                                        elif i + j + k + l + m < 6:\n                                            for n in range(m, 6): # start from m\n                                                if i + j + k + l + m + n == 6 and len({i, j, k, l, m, n}) == 6:\n                                                    count += 1\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert repeating decimals to fractions\n    def repeating_decimal(num, repeat):\n        # Convert to a fraction\n        return Fraction(num).limit_denominator() + Fraction(repeat, 10**len(str(repeat))-1)\n    \n    # Calculate each term\n    term1 = repeating_decimal(0, 1)\n    term2 = repeating_decimal(0.1, 2)\n    term3 = repeating_decimal(0.2, 3)\n    term4 = repeating_decimal(0.3, 4)\n    term5 = repeating_decimal(0.4, 5)\n    term6 = repeating_decimal(0.5, 4)\n    term7 = repeating_decimal(0.7, 8)\n    \n    # Add terms to get the result\n    result = sum([term1, term2, term3, term4, term5, term6, term7])\n\n    # Convert result to float\n    return float(result)\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "from sympy import symbols, Eq, solve, sqrt\n\ndef solution():\n    x, a = symbols('x a')\n    equation = Eq(sqrt(x), sqrt(a) - 2/sqrt(a))\n    solutions = solve(equation, x)\n    # We only consider x solution which is positive\n    x_value = solutions[0] if solutions[0] > 0 else solutions[1]\n\n    # Calculate sqrt(x^2 + 8x)\n    expression = sqrt(x_value**2 + 8 * x_value)\n    # Simplify the expression in terms of a\n    simplified_expression = expression.simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    \n    max_sheep_in_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return max_sheep_in_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for number in range(300, 401):\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 5:\n            return number\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys_count = 18\n    girls_count = 27\n    total_count = boys_count + girls_count\n    \n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n    \n    total_age_boys = boys_count * mean_age_boys\n    total_age_girls = girls_count * mean_age_girls\n    \n    total_age = total_age_boys + total_age_girls\n    \n    mean_age_total = total_age / total_count\n    \n    return mean_age_total\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original = \"Angel\"  # original word\n    original_password = \"0141705021\"  # original password\n    new_word = \"Devil\"  # new word to be converted into password\n\n    # Mapping each letter in 'Angel' to its corresponding number\n    mapping = {letter: number for letter, number in zip(original, original_password)}\n\n    # Creating the new password based on the mapping\n    new_password = \"\".join(mapping.get(letter, '') for letter in new_word)\n\n    attempt = \"4005220912\"  # Andy's attempt\n\n    # If Andy's attempt matches the new password, he can unlock the chest\n    return attempt == new_password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 6), (8, 13)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 200 or ans > 300:\n        ans += 6 * 13\n    return ans\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    # The least number of days they will meet again is the least common multiple of their individual cycles\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    return lcm(raye_cycle, simon_cycle, taylor_cycle)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    worst_case_green_and_yellow = 7 + 5  # Taking all greens and yellows without getting 5 of same color\n    balls_to_take_for_red = 1  # Taking just 1 red ensures the fifth ball of the same color\n    total_balls_to_take = worst_case_green_and_yellow + balls_to_take_for_red\n    return total_balls_to_take\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    table, chair = symbols('table chair')\n    \n    # Set up the equations\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_position = 10\n    last_term_value = 31\n    common_difference = 28 - 25\n\n    first_term_value = last_term_value - (term_position - 1) * common_difference\n    \n    return first_term_value\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # pool length in meters\n    sam_speed = 1  # Sam's speed in meters per second\n    ben_speed = 0.6  # Ben's speed in meters per second\n    swim_time = 10 * 60  # swimming time in seconds (10 minutes)\n\n    # Combined speed when swimming towards each other\n    combined_speed = sam_speed + ben_speed\n\n    # Time taken to meet each time they swim towards each other\n    time_to_meet = pool_length / combined_speed\n\n    # Number of times they meet\n    meets = swim_time // time_to_meet\n\n    return int(meets)  # returning an integer number of meets\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    def new_operation(a, b):\n        # Extracting the tens and ones digits of both numbers\n        tens_a, ones_a = divmod(a, 10)\n        tens_b, ones_b = divmod(b, 10)\n\n        # Performing the new operation as defined\n        return tens_a * ones_a + tens_b * ones_b\n\n    # Compute the result for the operation 89*75\n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    # Given values\n    average_height_bob_cindy = 120  # cm\n    height_doris = 126  # cm\n\n    # Total height of Bob and Cindy\n    total_height_bob_cindy = average_height_bob_cindy * 2\n\n    # Total height of all three children\n    total_height_three_children = total_height_bob_cindy + height_doris\n\n    # Average height of the three children\n    average_height_three_children = total_height_three_children / 3\n\n    return average_height_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    destin_age = solutions[destin]\n    nephew_age = solutions[nephew]\n\n    sum_in_10_years = (destin_age + 10) + (nephew_age + 10)\n\n    return sum_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_pencils_avg = 35\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n\n    # Let the number of boys be x.\n    # Then the number of girls is total_pupils - x.\n    # According to the average number of pencils owned:\n    # (boys_pencils_avg * x + girls_pencils_avg * (total_pupils - x)) / total_pupils = total_pencils_avg\n    # Solve this equation for x.\n\n    # Simplify the equation to:\n    # boys_pencils_avg * x + girls_pencils_avg * total_pupils - girls_pencils_avg * x = total_pencils_avg * total_pupils\n    # (boys_pencils_avg - girls_pencils_avg) * x = total_pencils_avg * total_pupils - girls_pencils_avg * total_pupils\n\n    x = (total_pencils_avg * total_pupils - girls_pencils_avg * total_pupils) / (boys_pencils_avg - girls_pencils_avg)\n    return int(x)\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of pies Mrs Tan and Mrs Lim each had.\n    x = symbols('x')\n\n    # Mrs Tan now has x + 12 pies\n    # Mrs Lim now has x - 4 pies\n\n    # Set up the equation according to the problem statement\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)\n    arrival_time = (10, 22)\n\n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n\n    ans = arrival_minutes - departure_minutes\n\n    return ans\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    pattern_length = len(pattern)\n    total_length = 50\n\n    # The number of complete patterns within the 50 digits\n    complete_patterns = total_length // pattern_length\n\n    # The remaining digits after the complete patterns\n    remaining_digits = total_length % pattern_length\n\n    # Sum of digits in one complete pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n\n    # Sum of the digits in the complete patterns\n    sum_complete_patterns = sum_of_pattern * complete_patterns\n\n    # Sum of the remaining digits\n    sum_remaining_digits = sum(int(digit) for digit in pattern[:remaining_digits])\n\n    # Total sum of all 50 digits\n    total_sum = sum_complete_patterns + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Calculate the expression step by step\n    result = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    \n    # Return the final result\n    return result\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    students_with_6_sweets = (3 / 5) * total_sweets / 6  # each received 6 sweets\n    remaining_sweets = total_sweets - students_with_6_sweets * 6\n    students_with_4_sweets = (1 / 4) * remaining_sweets / 4  # each received 4 sweets\n    remaining_sweets -= students_with_4_sweets * 4\n    students_with_5_sweets = remaining_sweets / 5  # each received 5 sweets\n    total_students = students_with_6_sweets + students_with_4_sweets + students_with_5_sweets\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {prod(selection) for selection in combinations(numbers, 2)}\n\n    for combo in combinations(numbers, 3):\n        product = prod(combo)\n        if product in products:\n            return list(set(numbers) - set(combo))[0]\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    current_age_difference = 70 - 10\n    father_current_age = current_age_difference + 10\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30/100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for num in range(999, 0, -2):  # Start from the largest odd number below 1000\n        found = False\n        for a in range(2, num, 1):\n            if is_composite(a):\n                for b in range(2, num - a, 1):\n                    if is_composite(b) and is_composite(num - a - b):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            return num\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packets_tablet1 = 25\n    packets_tablet2 = 20\n    cycle_days = lcm(packets_tablet1, packets_tablet2)\n\n    # Starting from March 1st\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_passed = 0\n    for i, days in enumerate(days_in_months):\n        days_passed += days\n        if days_passed >= cycle_days:\n            days_passed -= days\n            break\n\n    next_start_day = cycle_days - days_passed\n    next_start_month = i + 1  # Indexing starts at 0, months start at 1\n\n    return next_start_day, next_start_month\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    larger_number = 3 + 1/4\n    smaller_number = 1 + 3/4\n\n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x = number of girls, so 3x = number of boys\n    x = symbols('x')\n\n    # Equation based on total prize money: 5x (money each girl gets) + 8*3x (money each boy gets) = 580\n    equation = Eq(5*x + 8*3*x, 580)\n\n    # Solve the equation\n    number_of_girls = solve(equation, x)\n\n    # Calculate number of boys\n    number_of_boys = 3 * number_of_girls[0]\n\n    return number_of_boys\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum_of_numbers = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1):  # a is the length of the two equal sides\n        for b in range(1, 12 - 2 * a + 1):  # b is the length of the base\n            if a + a + b == 12 and a > b:  # the perimeter must add up to 12 and a must be greater than b\n                count += 1  # an isosceles triangle is possible\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current age of the elder and younger brother.\n    elder, younger = symbols('elder younger')\n\n    # The first equation representing the sum of their ages.\n    equation1 = Eq(elder + younger, 42)\n\n    # The second equation representing the age relationship.\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    dividend = 104\n    divisor = 4\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    students_A = 8\n    students_B = 12\n    students_C = 20\n\n    # Calculate the GCD of the three class sizes\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n    failed_both_exams = total_students - passed_first_exam - (failed_second_exam - passed_second_failed_first)\n\n    passed_only_first_exam = passed_first_exam - passed_both_exams - failed_both_exams\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # From A to B to C to D\n    A_B_C_D = 7 * 5 * 2\n    \n    # From A to C to D\n    A_C_D = 4 * 2\n    \n    # Directly from A to D\n    A_D = 6\n    \n    # Total ways\n    total_ways = A_B_C_D + A_C_D + A_D\n    \n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let c be the number of chocolate cupcakes and x be the number of cheese cupcakes\n    # We know that c + x = 255 and we are given that:\n    # After selling, the number of chocolate cupcakes left is (1 - 40%)c = 0.6c\n    # After selling, the number of cheese cupcakes left is (1 - 75%)x = 0.25x\n    # The problem states that he was left with an equal number, so:\n    # 0.6c = 0.25x (1)\n    \n    # We also know that:\n    # c + x = 255 (2)\n    \n    # Let's substitute the value of x from (2) into (1)\n    # Therefore, 0.6c = 0.25(255 - c)\n    # Solving this equation for c will give us the number of chocolate cupcakes\n    # And since the remaining numbers are equal, this will also give us the answer\n    # to the number of cupcakes left.\n    \n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(0.6*c, 0.25*(255 - c))\n    number_of_chocolate_cupcakes = solve(equation, c)[0]\n    \n    # Calculate the number of cupcakes left\n    ans = 0.6 * number_of_chocolate_cupcakes\n    \n    return int(ans)\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pen_price = symbols('pen_price')\n    pencil_price = 2\n    total_cost = Eq(2 * pen_price + 3 * pencil_price, 20)\n    solutions = solve(total_cost, (pen_price))\n    return solutions[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    number_of_cattle = 5\n    number_of_days = 10\n\n    # Total amount of hay a single cattle would eat in 10 days\n    hay_per_cattle = total_hay / number_of_cattle\n\n    # Amount of hay a single cattle would eat in a day\n    hay_per_day_per_cattle = hay_per_cattle / number_of_days\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from math import prod\n\n    for age1 in range(1, 10):\n        for age2 in range(age1 + 1, 10):  # since all children have different ages\n            for age3 in range(age2 + 1, 10):  # since all children have different ages\n                if prod([age1, age2, age3]) == 210:\n                    return age1\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # 1/4 of boys equals 2/5 of girls\n    # This implies 5 * boys = 8 * girls since 1/4 * boys = 2/5 * girls\n    # Let the number of boys be 'b' and girls be 'g'\n    # b + g = 39, 5b = 8g\n    # From 5b = 8g, we can write b = (8/5)g\n    # Now, substitute b back to the total number (b + g = 39):\n    # (8/5)g + g = 39\n    # Multiply both sides by 5 to get rid of the fraction:\n    # 8g + 5g = 39 * 5\n    # 13g = 195\n    # Now, divide both sides by 13 to find g:\n    g = 195 // 13\n    # Now we can find b using the equation b = (8/5)g\n    b = (8 * g) // 5\n    # The difference between boys and girls\n    difference = b - g\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_kilograms = 960\n    per_box_kilograms = 8\n    ans = total_kilograms // per_box_kilograms\n    return ans\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_locusts = 12\n    \n    full_days = total_locusts // daily_locusts\n    remaining_locusts = total_locusts % daily_locusts\n    \n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    notes_5, notes_10, bag_cost = symbols('notes_5 notes_10 bag_cost')\n\n    # Total number of notes\n    total_notes = Eq(notes_5 + notes_10, 116)\n    \n    # Relationship between the remaining notes\n    notes_relation = Eq(notes_10 * (1 - 0.60), notes_5 * (1 - 0.25) * (4/7))\n    \n    # The amount spent on the bag\n    amount_spent = Eq(bag_cost, notes_10 * 10 * 0.60 + notes_5 * 5 * 0.25)\n    \n    # Solve the system of equations\n    solutions = solve((total_notes, notes_relation, amount_spent), (notes_5, notes_10, bag_cost))  \n    return solutions[bag_cost]\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return 12*92 + 22*82 + 32*72\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    don_initial, ben_initial = symbols('don_initial ben_initial')\n\n    # Create the equations according to the ratios\n    # don_initial / ben_initial = 2 / 3\n    equation1 = Eq(don_initial / ben_initial, 2 / 3)\n\n    # (don_initial + 10) / (ben_initial - 5) = 6 / 7\n    equation2 = Eq((don_initial + 10) / (ben_initial - 5), 6 / 7)\n\n    # Solve the equations for both Don's and Ben's initial sticker counts\n    solutions = solve((equation1, equation2), (don_initial, ben_initial))\n\n    # Return the number of stickers Don had at first\n    return solutions[don_initial]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # From observation, the sequence groups positive and negative alternating numbers.\n    # When grouped, (2-3) + (4-5) + ... each of these is -1.\n    # We want to find how many such pairs there are up to 2015, and then add the last number which is 2016.\n    \n    # The last number we will use to form a pair is 2015, therefore the total numbers from 2 to 2015 is 2015 - 2 + 1.\n    total_numbers = 2015 - 2 + 1\n\n    # Since each pair is formed by two numbers, we divide the total numbers by 2 to find the total pairs.\n    total_pairs = total_numbers // 2\n    \n    # Sum of all pairs, each of which is -1.\n    sum_pairs = total_pairs * -1\n    \n    # Add the last number to the sum of pairs.\n    ans = sum_pairs + 2016\n\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    number = 4293\n    remainder = number % 25\n    if remainder == 0:\n        smallest_number = 0\n    else:\n        smallest_number = remainder\n    return smallest_number\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_transfer = (amy_toys - sally_toys) // 2\n    return toys_to_transfer\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia = 80\n    kenny = cecilia / 4\n    total_money = cecilia + kenny\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = 24.50 + zach\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # According to the given sum of squares, we can derive the sum of the series: 1*3 + 3*5 + ... + 39*41\n    # This series is the sum of the product of consecutive odd numbers, which can be represented by the following pattern:\n    # (1 + 2 + ... + 20)^2 - (1^2 + 2^2 + ... + 20^2)\n    \n    # Calculate the sum of the first 20 natural numbers\n    n = 20\n    sum_of_naturals = (n * (n + 1)) // 2\n    \n    # Calculate the sum of the squares of the first 20 natural numbers\n    # This value is given in the question: 2870\n    \n    # Now calculate the sum of the product of consecutive odd numbers\n    ans = sum_of_naturals ** 2 - 2870\n    return ans\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n    \n    # Calculation the number of ways to arrange the remaining 5 items, which includes the triplet as a single item\n    # Remaining students: 2 boys (twins), 1 girl, 3 girls (triplets as a single item)\n    total_non_twins = factorial(5)\n\n    # There are two arrangements for the triplet sisters (since they always stick together)\n    triplet_arrangements = factorial(3)\n\n    # The twins cannot stand next to each other\n    # For each permutation of the 5 items, there are 4 gaps + 2 ends the single boy can stand in\n    # The twins can arrange themselves in 2 ways (per 5-item permutation)\n    twin_arrangements = 6 * 2  # 5 - 1 gaps + 2 ends * 2!\n\n    # Calculate the total number of arrangements\n    total_arrangements = total_non_twins * triplet_arrangements * twin_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            num = int(f'21{digit1}{digit2}35')\n\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    from math import ceil\n\n    total_students = 320\n    days_in_week = 7\n\n    min_students_in_most_populated_week = ceil(total_students / days_in_week)\n\n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assume the first day of vacation is not Friday, the worst case.\n    # There are 7 days in a week, so the maximum of Fridays in 55 days \n    # would be if the first day was the day right before a Friday.\n    max_fridays = 55 // 7 + 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wearing_glasses = 20\n    total_girls_in_class = 25\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls_in_class\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    # Least common multiple of all divisors: 2, 3, 4, 5, 6, 8, 9\n    # LCM(2, 3, 4, 5, 6, 8, 9) since 8 = 2^3 and 9 = 3^2, this implies to consider only \n    # LCM(2^3, 3^2, 5) to cover all the multipliers\n    from math import lcm\n    base = lcm(8, 9, 5)\n    \n    # If a number gives a remainder of 5 when divided by 7, \n    # it can be expressed as 7k + 5. We need the smallest k such that \n    # base * k + 5 is divisible by 7.\n    k = 0\n    while True:\n        N = base * k + 5\n        if N % 7 == 0:\n            return N\n        k += 1\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Prices of the items\n    price_of_pencil = 2\n    price_of_pen = 4\n\n    # Owen wants to trade a pen, which is worth 2 pencils (4/2)\n    pencils_for_a_pen = price_of_pen // price_of_pencil\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_of_5_mugs = 3.50\n    cost_of_8_pens = 6.80\n    total_money = 10.00\n    \n    cost_per_mug = cost_of_5_mugs / 5\n    cost_per_pen = cost_of_8_pens / 8\n    \n    total_cost_of_7_mugs = 7 * cost_per_mug\n    total_cost_of_5_pens = 5 * cost_per_pen\n    \n    total_cost = total_cost_of_7_mugs + total_cost_of_5_pens\n    \n    change_from_10 = total_money - total_cost\n    \n    return round(change_from_10, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away_fraction = 1/5\n    pupils_away = total_pupils * pupils_away_fraction\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    songs = 2\n    children = 50\n    total_time = time_per_song * songs * children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_after_removing_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_after_removing_apples\n\n    return total_weight_with_apples - weight_of_3_apples * (5 / 3)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    if 0.25 > 0.3:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = 0\n    amount = principal\n    while amount < final_amount:\n        amount += amount * rate\n        years += 1\n\n    if years == 5:\n        return 'right'\n    else:\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7 # Least common multiple of 3 and 7\n    ans = -1\n    for i in range(lcm, 1000, lcm): # Assuming the range within 1000 for simplicity\n        if str(i).endswith('2'):\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_per_week = 7\n    weeks = 2\n    total_days = days_per_week * weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position_difference = 10**3 - 10\n    return position_difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    pages = sum(range(1, 21))\n    return pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Using Frobenius number formula F(a, b) = (a - 1)(b - 1) - 1\n    # where a and b are relatively prime\n    # In this case a and b are 4 and 5 which are relatively prime\n    a = 4\n    b = 5\n    ans = (a - 1) * (b - 1) - 1\n    return ans\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    # Let x be the time it takes John alone to build the wall\n    # Let y be the time it takes Jonah alone to build the wall\n    # Let z be the time it takes Angus alone to build the wall\n\n    # Rates of work for John, Jonah, and Angus\n    # John's rate = 1/x\n    # Jonah's rate = 1/y\n    # Angus's rate = 1/z\n\n    # The combined rate when all three work together is the sum of their individual rates:\n    # Combined rate of John, Jonah, and Angus = 1/x + 1/y + 1/z\n    # They take 27 hours to build the wall together, so their combined rate is 1/27 wall per hour.\n\n    # Similarly, the combined rate of Jonah and Angus is 1/y + 1/z\n    # Jonah and Angus take 36 hours to build the wall together, so their combined rate is 1/36 wall per hour.\n\n    # We can set up the following system of equations with these two information:\n    # 1/x + 1/y + 1/z = 1/27 (1)\n    # 1/y + 1/z = 1/36 (2)\n\n    # Subtract equation (2) from equation (1) to find John's rate:\n    # (1/x + 1/y + 1/z) - (1/y + 1/z) = 1/27 - 1/36\n    # 1/x = 1/27 - 1/36\n    # 1/x = (36 - 27) / (27 * 36)\n    # 1/x = 9 / (27 * 36)\n    # 1/x = 1 / (27 * 4)\n\n    # Now, we have John's rate, which is 1 wall per 27*4 hours. So, John can build the wall alone in 27*4 hours.\n\n    return 27 * 4\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    sum_of_numbers = 1001\n    num_of_integers = 10\n\n    # The maximum d is the largest number that divides 1001 without leaving a remainder\n    for d in range(sum_of_numbers, 0, -1):\n        if sum_of_numbers % d == 0:\n            # Check if we can form 10 numbers which are multiples of d\n            if d <= sum_of_numbers // num_of_integers:\n                return d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    years_since_then = 5\n    years_ahead = 3\n\n    current_combined_age = combined_age_5_years_ago + 2 * years_since_then\n    combined_age_in_3_years = current_combined_age + 2 * years_ahead\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            # Construct the 6-digit number\n            number = 108200 + a * 10 + b\n            # Check if the number is divisible by 12\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of one apple and one pear\n    apple_weight, pear_weight = symbols('apple_weight pear_weight')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * apple_weight + 4 * pear_weight, 1.81)\n    equation2 = Eq(5 * apple_weight + 2 * pear_weight, 1.71)\n\n    # Solve the system of equations for apple_weight and pear_weight\n    solutions = solve((equation1, equation2), (apple_weight, pear_weight))\n\n    # Find the weight of 4 apples and 4 pears based on the solutions found\n    weight_4_apples_4_pears = 4 * solutions[apple_weight] + 4 * solutions[pear_weight]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    ans = gcd(length1, length2)\n\n    return ans\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let 'b' be the number of boys, 'g' be the number of girls.\n    total_students = 152\n\n    # Let's represent the equation as per the problem statement.\n    # After removing 1/11 of the boys and 5 girls, boys and girls become equal.\n    # Hence, b - (1/11)*b = g - 5\n    # Also, b + g = total_students\n\n    # Let's solve these two equations to find the value of 'b' (number of boys).\n    # b - (1/11)*b = g - 5\n    # b - b/11 = g - 5\n    # b - b/11 + 5 = g\n    # 10b/11 + 5 = g  -> (1)\n\n    # Now from b + g = 152\n    # We substitute the value of g from (1)\n    # b + 10b/11 + 5 = 152\n    # 21b/11 + 5 = 152\n    # 21b = 11 * (152 - 5)\n    # 21b = 11 * 147\n    # b = (11 * 147) / 21\n    b = (11 * 147) // 21\n\n    return b\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    first_number = 475\n    second_number = 138\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while not(number % 5 == 1 and number % 12 == 3):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    boxes_bought = total_pencils // pencils_per_box\n    \n    return boxes_bought\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    amanda_stickers = solutions[amanda]\n    cathy_stickers = solutions[cathy]\n\n    return amanda_stickers + cathy_stickers\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    result = 386 + 99\n    return result\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    adult_age_days = 30\n    total_days = 40\n    new_adult_fleas = 0\n\n    # Only the eggs laid in the first 10 days will become adults by the 40th day\n    for day in range(1, total_days - adult_age_days + 1):\n        new_adult_fleas += daily_eggs\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    French = 15\n    Japanese = 12\n    Italian = 13\n    French_Japanese = 5\n    French_Italian = 3\n    Japanese_Italian = 2\n    All_three = 1\n\n    total_people = French + Japanese + Italian - French_Japanese - French_Italian - Japanese_Italian + All_three\n\n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n\n    amount_water = total_orange_drink * fraction_water\n\n    return amount_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    number_of_rows = 22\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_students = number_of_rows / 2 * (2 * first_term + (number_of_rows - 1) * difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + (3 * story_books)\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # M = 50000 + abcd\n    # N = abcd * 10 + 5\n    # M - N = 50000 + abcd - (abcd * 10 + 5) = 22122\n    # Solve for abcd\n    abcd = (22122 + 5 - 50000) / (1 - 10)\n\n    return int(abcd)\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 21 + Fraction(21, 286)\n    num2 = 6 + Fraction(647, 2530)\n    num3 = 1 + Fraction(1370, 2829)\n\n    ans = num1 / num2 * num3\n    \n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the dimensions of the small cubes\n    # Since there are 720 cubes, let's find the factor of 720 that fits the dimensions.\n    # We know that 6*10*12 = 720, so each dimension of the cuboid should \n    # be divided by a factor such that 6 / x * 10 / y * 12 / z = 720\n    # A possible set of factors that satisfies this equation is 6, 10, 12 themselves\n    # Therefore, each small cube has dimensions 1x1x1.\n\n    # Calculate the number of small cubes on each face of the cuboid\n    # 6*10 face has dimensions of 6 by 10, we must subtract 2 from each dimension to exclude the edges\n    num_on_6x10_face = (6 - 2) * (10 - 2)\n    # 6*12 face\n    num_on_6x12_face = (6 - 2) * (12 - 2)\n    # 10*12 face\n    num_on_10x12_face = (10 - 2) * (12 - 2)\n\n    # Since there are two faces of each kind on the cuboid, we multiply by 2\n    total_cubes_1_face_painted = 2 * (num_on_6x10_face + num_on_6x12_face + num_on_10x12_face)\n\n    return total_cubes_1_face_painted\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n    \n    remaining_money = total_money - (pencil_cost + ruler_cost)\n    \n    return remaining_money\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')  # Rate is work done per hour\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)     # They finish 1 job together\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)     # They finish 1 job together\n\n    solution_rates = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time_to_finish = 1 / solution_rates[nini_rate]   # Time = Work / Rate for Nini to finish 1 job\n\n    return nini_time_to_finish\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "网络故障，请重试"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "from sympy import divisors\n\ndef solution():\n    # Prime factorization of 140: 2^2 * 5 * 7\n    # Since we need to distribute candies into piles with odd numbers, we discard the 2^2\n    # and work with the product of odd prime factors which is 5 * 7 = 35\n    # We need to find the divisors of the odd part of the prime factorization\n    odd_part = 5 * 7\n\n    # The divisors of the odd part represent the possible odd pile sizes\n    possible_pile_sizes = divisors(odd_part)\n\n    # To get the number of ways to distribute, we find the number of possible pile sizes\n    num_ways = len(possible_pile_sizes)\n    return num_ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # iterate over possible two-digit numbers, which range from 10 to 99\n    for number in range(10, 100):\n        # check the conditions for the remainders when divided by 9 and 11\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Maximum number of trials to find the correct key for each classroom:\n    # In the worst case, he tries all keys for the first classroom until the\n    # last key fits (19 tries), for the second classroom the last key again (18 tries),\n    # and so on, until there is only one key left for the last classroom (0 tries).\n    max_tries = sum(range(20))\n    return max_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks are: A = 20, B = 16\n    # Jerry wants to make sure the stones in the two stacks are always even\n    # so that no matter how Tom takes, Jerry can always take the same amount\n    # from the other stack and eventually be the one who takes the last stone.\n\n    # Since Tom has made Stack B even, Jerry also needs to take stones from Stack B\n    # to make the number of stones in Stack A and B even again.\n    # Stack A has 20 stones which is already even\n    # So Jerry should take 4 stones from Stack B to make it even\n\n    stones_to_take_from_B = 4\n    stack_name = \"B\"\n    \n    return f\"Jerry must take {stones_to_take_from_B} stone(s) from Stack {stack_name}.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Calculating the page numbers on the third sheet.\n    # Each sheet contains two pages on the front and two on the back.\n    # Pages are numbered such that the first sheet has 1 and 2 on the front, 55 and 56 on the back.\n    # Therefore, the third sheet will have 5 and 6 on the front, and 51 and 52 on the back.\n    page_numbers_sum = 5 + 6 + 51 + 52\n    return page_numbers_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    num_girls = total_students * fraction_girls\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # 1 watermelon = 6 peaches\n    watermelon_to_peaches = 6\n    \n    # 2 peaches = 3 apples\n    peaches_to_apples = 3 / 2\n    \n    # Total conversion from watermelon to apples\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    \n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    pages = 0\n    current_digits = 0\n    while current_digits < digits:\n        pages += 1\n        current_digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    # First consider the pattern of the sequence: each pair of numbers cancels each other\n    # except the first number which is 100 which is not cancelled out.\n    # So the answer is just 100.\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    apple_juice_price = 5\n    orange_juice_price = 3\n    peach_juice_price = 10\n\n    apple_juice_cups = 30\n    orange_juice_cups = 50\n    peach_juice_cups = 20\n\n    total_cost = (apple_juice_cups * apple_juice_price) + \\\n                 (orange_juice_cups * orange_juice_price) + \\\n                 (peach_juice_cups * peach_juice_price)\n    \n    total_cups = apple_juice_cups + orange_juice_cups + peach_juice_cups\n    \n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    from datetime import datetime\n    \n    start_time = datetime.strptime('9:15PM', '%I:%M%p')\n    end_time = datetime.strptime('11:06PM', '%I:%M%p')\n    \n    duration = (end_time - start_time).total_seconds() / 60\n    \n    return int(duration)\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    \n    # Since the difference is given by the outer layer(s) of boys,\n    # let's denote the total number of layers of students with n.\n    # For a square with n layers, the total students will be (2n-1)^2.\n    # We need to find n such that the difference between the number of boys and girls is 32.\n\n    n = 1  # Start with a single layer\n    while True:\n        # Calculate the number of boys and girls for `n` layers\n        boys = (2 * n - 1)**2 - (2 * (n - 1) - 1)**2 if n > 1 else 1\n        girls = (2 * (n - 1) - 1)**2\n        \n        # Check if the difference matches the condition\n        if boys - girls == 32:\n            # If it is the right n, calculate the total number of students\n            total_students = (2 * n - 1)**2\n            break\n        \n        n += 1  # Increment n to check the next potential value\n\n    return total_students\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of pens of each color in Box A and Box B\n    blue_a = blue_b = red_a = red_b = black_a = black_b = green_a = green_b = 10\n    \n    # After moving 20 pens from Box A to Box B, at least 15 must remain in Box A\n    # Because there is an equal number of each color, we will remove 5 of each color from Box A\n    # and transfer them to Box B. This will leave Box A with exactly 15 of each color.\n    \n    blue_a -= 5\n    red_a -= 5\n    black_a -= 5\n    green_a -= 5\n    \n    blue_b += 5\n    red_b += 5\n    black_b += 5\n    green_b += 5\n    \n    # We now need to return pens from Box B to Box A to maintain at least 15 pens of each color in Box A.\n    # Since the colors have already been balanced to 15 pens each in Box A, we just need to return the difference\n    # of the number of pens we initially took from Box A, which is 20, minus the pens we already returned, which\n    # is 5 of each color, hence 5 * 4 = 20. So, we need to return 20 pens back to Box A.\n    \n    pens_to_return = 20\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1/8\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres_chocolates = 16\n\n    # Let's assume all milk chocolates have soft-centres\n    soft_centres_plain = soft_centres_chocolates - milk_chocolates\n\n    # We ensure that the number of plain chocolates with soft-centres can't be negative\n    if soft_centres_plain < 0:\n        soft_centres_plain = 0\n\n    return soft_centres_plain\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let divisor be x, then dividend will be 29x + 11 (quotient x divisor + remainder)\n    # We are given sum of dividend and divisor is 431, therefore:\n    # 29x + 11 (dividend) + x (divisor) = 431\n    # 30x + 11 = 431\n    # 30x = 431 - 11\n    # 30x = 420\n    # x = 420 / 30\n    x = 420 // 30  # Using integer division as divisor must be a whole number\n    \n    # Dividend y = 29 * x + 11\n    y = 29 * x + 11\n    \n    # The difference between dividend and divisor\n    difference = y - x\n    \n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_percentage = 12.5\n    violin_players = 11\n\n    total_pupils = (violin_players * 100) / violin_percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each type of coin\n    x = symbols('x')\n    \n    # 1p coin is x * 1p, 2p coin is x * 2p, 5p coin is x * 5p, 10p coin is x * 10p \n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve for x\n    num_coins = solve(equation, x)\n    \n    # Total coins will be 4 times the x (for each type of coin)\n    total_coins = 4 * num_coins[0]\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apples, pears = symbols('apples pears')\n    equation1 = Eq(apples + pears, 105)\n    equation2 = Eq((1 - 1/3) * apples, (5/6) * (1 - 2/5) * pears)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] * 1/3\n    pears_sold = solutions[pears] * 2/5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    ratio_equation = Eq(A/B, 4/5) & Eq(B/C, 5/6) & Eq(C/A, 6/4)\n    difference_equation = Eq(C - A, 10)\n\n    solutions = solve((ratio_equation, difference_equation), (A, B, C))\n\n    sum_ABC = solutions[A] + solutions[B] + solutions[C]\n\n    return sum_ABC\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Treat students A, B, C, and D as one unit since they must be together.\n    # There are 12 - 3 = 9 units now because A, B, C, D together is a single unit.\n    num_units = 12 - 3\n\n    # Permutations of the 9 units (including the A, B, C, D unit).\n    permutations_units = factorial(num_units)\n\n    # Permutations within the A, B, C, D group since their order can vary.\n    permutations_group = factorial(4)\n\n    # Total permutations are the product of the two.\n    total_permutations = permutations_units * permutations_group\n\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_matches = 6 * (6 - 1) // 2  # Total matches played\n    total_points = total_matches * 2  # Total points distributed\n\n    # Points for the five students\n    points_known = 7 + 6 + 5 + 4 + 3\n    remaining_points = total_points - points_known  # Points for the remaining student\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the weight of bag A as 'a', and the weight of bag B as 'b'\n    a, b = symbols('a b')\n\n    # Original ratio of the weights\n    original_ratio = Eq(a / b, 5/3)\n\n    # New ratio after 10 grams are transferred from A to B\n    new_ratio = Eq((a - 10) / (b + 10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (a, b))\n\n    # The total weight is the sum of the weights of bags A and B\n    total_weight = solutions[a] + solutions[b]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Calculate the number of lines using the formula for the sum of an arithmetic sequence:\n    # total_players = n/2 * (first_line_players + last_line_players)\n    n = 2 * total_players // (first_line_players + last_line_players)\n    \n    # Calculate the common difference using the formula for the nth term of an arithmetic sequence:\n    # last_line_players = first_line_players + (n - 1) * d\n    d = (last_line_players - first_line_players) // (n - 1)\n    \n    return d\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product\n    product = 48 * 925 * 38 * 435\n\n    # Convert the product into a string to count zeros at the end\n    product_str = str(product)\n\n    # Count the trailing zeros\n    count_zeros = len(product_str) - len(product_str.rstrip('0'))\n\n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    max_mass = max(masses_in_grams)\n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Number of nights\n    nights = 1000\n\n    # Total number of thefts\n    thefts = 2\n\n    # Dog barks 3 times every week, calculate total barks in 1000 days\n    barks_per_week = 3\n    weeks = nights / 7\n    total_barks = weeks * barks_per_week\n\n    # Probability of dog barking when a thief is around\n    prob_bark_given_theft = Rational(9, 10)\n\n    # Probability of at least one theft during a bark\n    # Probability P(A|B) = P(B|A) * P(A) / P(B)\n    # P(A) is the probabilities of a theft which is thefts/nights\n    # P(B) is the probability of the dog barking which is total_barks/nights\n    # P(B|A) is the probability of dog barking given a theft, which is given as 0.9\n    prob_theft = Rational(thefts, nights)\n    prob_bark = Rational(total_barks, nights)\n    prob_theft_given_bark = (prob_bark_given_theft * prob_theft) / prob_bark\n\n    return prob_theft_given_bark\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers\n    equation1 = Eq(stickers, 13*pupils + 190)\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers\n    equation2 = Eq(stickers, 17*pupils + 50)\n    \n    # Solve the equations\n    solution = solve((equation1, equation2), (stickers, pupils))\n    \n    return solution[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "from itertools import permutations\n\ndef solution():\n    perms = [''.join(p) for p in permutations('123456789')]\n    numbers = sorted(list(map(int, perms)))\n\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # initial relationship between boys and girls\n    initial_condition = Eq(girls, boys + 65)\n    \n    # The boys and girls remaining after recess\n    boys_left = boys - (2/5) * boys \n    girls_left = girls - (3/7) * girls \n    \n    # Calculate the number of students left after some left for the recess\n    # by setting the number of boys left equal to the number of girls left\n    recess_condition = Eq(boys_left, girls_left)\n\n    # Solving the equations for the number of boys and girls initially\n    solutions = solve((initial_condition, recess_condition), (boys, girls))\n\n    # Applying the solution to get the final number of students left\n    total_students_left = solutions[boys] - (2/5) * solutions[boys] + solutions[girls] - (3/7) * solutions[girls]\n\n    return int(total_students_left)\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_bricks_after_third = 25\n    moved_third_trip = 68\n    half_remaining_after_second = remaining_bricks_after_third + moved_third_trip\n\n    second_trip_moved = half_remaining_after_second + 11\n    remaining_after_first = 2 * (half_remaining_after_second - 11)\n\n    half_first_trip = second_trip_moved + half_remaining_after_second\n    first_trip_moved = half_first_trip - 26\n\n    total_bricks = 2 * (half_first_trip + 26)\n\n    return total_bricks\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    boys_more_than_girls = 90\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_less_swim = 120\n\n    # Calculate the number of girls and boys\n    girls = (total_pupils - boys_more_than_girls) // 2\n    boys = girls + boys_more_than_girls\n\n    # Calculate the number of girls who can swim and who cannot\n    girls_swim = (girls * girls_swim_ratio) // (girls_swim_ratio + girls_not_swim_ratio)\n    girls_not_swim = girls - girls_swim\n\n    # Calculate the number of boys who can swim and who cannot\n    boys_not_swim = (boys + boys_less_swim) // 2\n    boys_swim = boys_not_swim - boys_less_swim\n\n    # Calculate the number of pupils who cannot swim\n    cannot_swim = girls_not_swim + boys_not_swim\n\n    return cannot_swim\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    ans = factorial(num_kids)\n    \n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    count = 0\n    # To form a square array, we start checking from the smallest square number greater than 1.\n    # Since Mike is second in each direction, minimum size of the square should be 3x3.\n    i = 3\n    while True:\n        # Square number for an array i x i\n        square = i * i\n        # We find the student at position (2,2), which is second row, second column in 0-based indexing\n        # As index starts from 0, the index for 2nd position is 1.\n        if (i * 1 + 1) == square - (i * 1 + 1) + 1:\n            count = square\n            break\n        i += 1\n\n    return count\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    target_sum_ages = 40\n    years_until_target = target_sum_ages - current_sum_ages\n    return years_until_target\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    ways = [0] * 11\n    ways[0] = 1\n\n    for i in range(10 + 1):\n        if i >= 2:\n            ways[i] += ways[i - 2]\n        if i >= 3:\n            ways[i] += ways[i - 3]\n\n    return ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Iterate through all four digit numbers\n    for number in range(1000, 10000):\n        # Change the digit in the ones place to the first digit\n        str_number = str(number)\n        new_str_number = str_number[-1] + str_number[1:-1] + str_number[0]\n        new_number = int(new_str_number)\n        \n        # Check if the new four-digit number is greater than the original by 5877\n        if new_number - number == 5877:\n            return number\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n    minimum_dividend = minimum_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = '1998'\n    concatenated_number = number\n    n = len(concatenated_number)\n    \n    while int(concatenated_number) % 33 != 0:\n        concatenated_number += number\n        n = len(concatenated_number)\n        \n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = a ** 2\n    c = a ** 3\n\n    return a + b + c\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    number_of_rounds = total_distance / distance_per_round\n    return int(number_of_rounds)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    number = 3_030_030\n    return number\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = total_boys / boys_to_girls_ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities we need to find\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    return 10 * 21 // 14\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and number % 9 == 0 and number % 10 == 0:\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10\n    correct_answer = original_number + tens_to_add\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # The number 1 can appear at most once, as using it more than once will make two numbers the same.\n    # To have all numbers different and positive, we should use the smallest possible numbers starting from 1.\n    # So, we keep adding the next positive integer until the sum would exceed 27.\n    sum_current = 0\n    max_int = 0\n    while sum_current + (max_int + 1) <= 27:\n        max_int += 1\n        sum_current += max_int\n    return max_int\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 3 * 100  # convert meters to centimeters\n    used_length_cm = 147 + 32.5 + 67\n    fourth_piece_length_cm = total_length_cm - used_length_cm\n    return fourth_piece_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probabilities of A, B, and C passing the test\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n\n    # Probabilities of NOT passing the test\n    p_not_A = 1 - p_A\n    p_not_B = 1 - p_B\n    p_not_C = 1 - p_C\n\n    # Calculate probabilities of 0, 1, 2, and 3 people passing\n    prob_0 = p_not_A * p_not_B * p_not_C\n    prob_1 = p_A * p_not_B * p_not_C + p_not_A * p_B * p_not_C + p_not_A * p_not_B * p_C\n    prob_2 = p_A * p_B * p_not_C + p_A * p_not_B * p_C + p_not_A * p_B * p_C\n    prob_3 = p_A * p_B * p_C\n    \n    # Most likely number of people to pass\n    probabilities = [prob_0, prob_1, prob_2, prob_3]\n    most_likely = probabilities.index(max(probabilities))\n    \n    return most_likely\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves_needed = (total_papers - 1) // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    ans = (101 + 234 + 567) * (234 + 567 + 89) - (101 + 234 + 567 + 89) * (234 + 567)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # initial term\n    for i in range(2, 11):\n        ans += (i - 1) * (1/i) * 2\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of watches be 8x and the number of caps be 11x initially.\n    x = symbols('x')\n    # Ratio after selling 88 caps\n    # number of watches : number of caps = 12 : 11\n    # So, number of watches = 12y and number of caps = 11y - 88\n    y = symbols('y')\n    \n    # Setting up the equations based on the given ratios\n    # We know that the number of watches stays the same, so 8x = 12y\n    equation1 = Eq(8*x, 12*y)\n    \n    # The number of caps after selling 88 is 11x - 88, which also equals 11y\n    equation2 = Eq(11*x - 88, 11*y)\n    \n    # Solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The number of watches at the stall is 8x\n    watches = 8 * solutions[x]\n    \n    return watches\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Given that Sam spends 30 minutes to travel from the first house to the sixth house\n    # The time is spent on crossing 5 intervals since the width of houses is negligible\n    \n    # We are asked to find how much time he will need to deliver the newspapers for all 10 houses\n    # This means he will cross 9 intervals in total (from the 1st house to the 10th house)\n\n    # Since the speed is constant and the distance between each two adjacent houses is equal,\n    # the time taken to cross one interval can be calculated as:\n    time_for_one_interval = 30 / 5\n    \n    # Now we calculate the time for 9 intervals to deliver the newspapers for all 10 houses\n    total_time_for_all_houses = time_for_one_interval * 9\n\n    return total_time_for_all_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # Iterate over all 4-digit numbers\n    for d in range(1, 10):  # last digit\n        for a in range(1, 10):  # first digit must not be 0\n            if a == d / 4:  # first digit is one forth of last digit\n                for b in range(1, 10):\n                    if b == a - 1:  # second digit is one less than first digit\n                        for c in range(1, 10):\n                            if len(set([a, b, c, d])) == 4:  # all digits should be different\n                                abcd = int(f\"{int(a)}{int(b)}{int(c)}{int(d)}\")\n                                dcba = int(f\"{int(d)}{int(c)}{int(b)}{int(a)}\")\n                                if abcd * 4 == dcba:\n                                    return abcd\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length = 1.05 * 100  # Convert meters to centimeters\n    longer_piece = (2/3) * total_length\n    return longer_piece\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    cost = litres_used * cost_per_litre\n\n    return cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # There are 2015 coins, the goal is for Jack to take coins in such a way that\n    # Ken is forced to take the last coin.\n    # As the coin taking rules allow to take 1 to 11 coins, the strategy for Jack is to leave\n    # a multiple of 12 coins after his first turn, so that he will always leave a multiple of 12\n    # for Ken if they both take the optimal number of coins. If Ken is left with 12 coins, he will lose.\n    \n    total_coins = 2015\n    \n    # To leave a multiple of 12 for Ken\n    jack_first_pick = total_coins % 12\n\n    # If jack_first_pick is 0, it means that Jack is already at a disadvantage as there is no way\n    # to force Ken to take the last coin if total coins initially is a multiple of 12.\n    # Jack should pick 1 coin initially to disrupt the pattern, in this (impossible) scenario.\n    if jack_first_pick == 0:\n        jack_first_pick = 1\n\n    return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know b = 0\n    b = 0\n\n    # Now we use the point (4, 8) to find the slope m\n    # The slope m = (y2 - y1) / (x2 - x1)\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n\n    # Return the equation in the form y = mx + b with b = 0\n    return f'y = {m}x + {b}'\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # The pattern is ●○●○○, which contains 5 balls (2 white, 3 black)\n    pattern_len = 5\n    white_balls = 2\n    white_balls_total = 92\n    # Calculate how many complete patterns there are\n    patterns_complete = white_balls_total // white_balls\n    # Calculate total number of balls using the complete patterns\n    total_balls = patterns_complete * pattern_len\n\n    # Check for remaining white balls that are not part of a complete pattern\n    remaining_white_balls = white_balls_total % white_balls\n    # Add remaining balls based on the pattern up to the remaining white balls\n    # The pattern is ●○●○○, if there is one white ball left, it means 3 balls in total (●○●)\n    if remaining_white_balls > 0:\n        if remaining_white_balls == 1:\n            total_balls += 3\n        # If there is two white balls left, it means 5 balls in total (●○●○○)\n        elif remaining_white_balls == 2:\n            total_balls += 5\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    number = 2015\n    count = 0\n    for digit in str(number):\n        if digit in ['0', '6', '9']:\n            count += 1\n        elif digit == '8':\n            count += 2\n    return count\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # The ages of the youngest three add up to 42 years, and since they were born in consecutive years,\n    # they form an arithmetic sequence with a common difference of 1.\n    # Let the age of the youngest be x, then the next two ages are x + 1 and x + 2.\n    # Their sum is x + (x + 1) + (x + 2) = 42\n    x = symbols('x')\n    \n    # Equation for the sum of the ages of the youngest three dwarfs\n    equation = Eq(x + (x + 1) + (x + 2), 42)\n    \n    # Solve for x\n    youngest_age_solution = solve(equation, x)\n    \n    # Get the youngest age \n    youngest_age = youngest_age_solution[0]\n    \n    # The oldest one is 6 years older than the youngest (since there are seven dwarfs with consecutive ages)\n    oldest_age = youngest_age + 6\n    \n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    a = 16\n    b = 28\n    ans = gcd(a, b)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    n = 0\n    while True:\n        n += 1\n        if (n - 2) % 6 == 0 and (n + 3) % 7 == 0:\n            return n\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_shorter_mm = 4\n\n    sharpened_shorter_cm = sharpened_shorter_mm / 10\n    new_length_cm = original_length_cm - sharpened_shorter_cm\n    \n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of stickers Sam, Peter and John initially had\n    sam, peter, john = symbols('sam peter john')\n\n    # Create equations based on the given information\n    # Sam and Peter had some stickers in the ratio 7 : 5\n    equation1 = Eq(sam/peter, 7/5)\n    # Sam and Peter each gave 20% of their stickers to John, so they are left with 80% of their stickers\n    # and John's stickers increased by 80%\n    equation2 = Eq(john + 0.2*sam + 0.2*peter, 1.8*john)\n    # Sam had 20 stickers more than John in the end\n    equation3 = Eq(0.8*sam, john + 20)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (sam, peter, john), dict=True)\n\n    # Extract the value of Peter's initial stickers from the solution\n    peter_initial = solution[0][peter]\n\n    return peter_initial\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Distance covered in each stage\n    distance_stage_1 = 420\n    distance_stage_2 = 620\n    distance_stage_3 = 1200 - distance_stage_1 - distance_stage_2\n\n    # Speed in each stage (m/s)\n    speed_stage_1 = 7\n    speed_stage_2 = 5\n    speed_stage_3 = 8\n\n    # Time for each stage (s)\n    time_stage_1 = distance_stage_1 / speed_stage_1\n    time_stage_2 = distance_stage_2 / speed_stage_2\n    time_stage_3 = distance_stage_3 / speed_stage_3\n\n    # Total time spent (s)\n    total_time = time_stage_1 + time_stage_2 + time_stage_3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total = 89 * 4  # Current total score after 4 tests\n    desired_average = 95    # Desired average score\n\n    more_tests = 0          # Number of additional tests needed\n    while True:\n        new_total = current_total + 100 * more_tests  # Total score if he gets full marks in all additional tests\n        new_average = new_total / (4 + more_tests)    # New average after additional tests\n        if new_average >= desired_average:            # If the new average is at least the desired average, break\n            break\n        more_tests += 1\n\n    return more_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the number of $2 notes and $10 notes\n    num_two_dollar_notes, num_ten_dollar_notes = symbols('num_two_dollar_notes num_ten_dollar_notes')\n\n    # Define equations based on the problem statement\n    total_notes_eq = Eq(num_two_dollar_notes + num_ten_dollar_notes, 72)\n    remaining_two_dollar_notes_eq = Eq(num_two_dollar_notes * (1 - 0.75), num_ten_dollar_notes * (1 - 0.90) / 2)\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_two_dollar_notes_eq), (num_two_dollar_notes, num_ten_dollar_notes))\n\n    # Extract solution for number of notes\n    num_two_dollar_notes = solutions[num_two_dollar_notes]\n    num_ten_dollar_notes = solutions[num_ten_dollar_notes]\n\n    # Calculate the total amount spent on the gift\n    spent_on_gift = (num_ten_dollar_notes * 10 * 0.90) + (num_two_dollar_notes * 2 * 0.75)\n\n    return spent_on_gift\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the rates of the hoses as variables\n    rate_a, rate_b, rate_c = symbols('rate_a rate_b rate_c')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(1/(rate_a + rate_b), 9)\n    equation2 = Eq(1/(rate_a + rate_c), 12)\n    equation3 = Eq(1/(rate_b + rate_c), 18)\n\n    # Solve the system of equations for the individual rates\n    solutions = solve((equation1, equation2, equation3), (rate_a, rate_b, rate_c))\n\n    # Calculate the total rate when all hoses are turned on\n    total_rate = solutions[rate_a] + solutions[rate_b] + solutions[rate_c]\n\n    # Calculate time taken to fill the pool with all hoses on\n    time_all_hoses = 1 / total_rate\n\n    return time_all_hoses.evalf()\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n\n    total_length = days * meters_per_day\n\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # We have 3 different colors and we want to be sure to get 2 markers of the same color\n    # Using the pigeonhole principle, we need to take one more than three times the number of colors to ensure at least two are the same\n    num_colors = 3\n    markers_needed = num_colors + 1\n    return markers_needed\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for notes_5 in range(59):  # Wei Li cannot have more than 58 ＄5 notes\n        notes_2 = 58 - notes_5  # The rest will be ＄2 notes\n        if (notes_5 * 5 + notes_2 * 2) == 164:  # The total value should be ＄164\n            return notes_5\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Define the known terms and their positions\n    position_7 = 105\n    position_8 = 120\n    position_9 = 135\n\n    # Calculate the common difference\n    difference = position_8 - position_7\n\n    # Calculate the first term using the known 7th term\n    first_term = position_7 - (position_8 - position_7) * (7 - 1)\n\n    # Calculate the 100th term using the arithmetic sequence formula\n    term_100 = first_term + (100 - 1) * difference\n\n    return term_100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_money = symbols('total_money')\n    price_cupcake = symbols('price_cupcake')\n    price_muffin = symbols('price_muffin')\n    \n    # Given that Cellina spent 5/9 of her money on 36 cupcakes and 32 muffins\n    equation1 = Eq((5/9) * total_money, 36 * price_cupcake + 32 * price_muffin)\n    \n    # Given that the price of one cupcake is thrice as much as the price of one muffin\n    equation2 = Eq(price_cupcake, 3 * price_muffin)\n    \n    # She then used 1/6 of her money to buy more cupcakes\n    equation3 = Eq((1/6) * total_money, 187.50 - 36 * price_cupcake)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_money, price_cupcake, price_muffin))\n    \n    # Find how much she spent on muffins\n    money_spent_on_muffins = 32 * solutions[price_muffin]\n    \n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start with the assumption that each box has a minimum of 2 marbles.\n    # Since 9 boxes have different counts and 1 has the same count, 8 boxes have unique even counts.\n    # The smallest numbers of marbles that can be distributed uniquely in 8 boxes (with even counts) are 2, 4, 6, 8, 10, 12, 14, 16.\n    # The 9th box can have the same number as the first box, which has 2 marbles.\n    # The 10th box should have the next even number of marbles, which is 18.\n    # Sum these values to get the answer.\n    \n    # Boxes: 2, 4, 6, 8, 10, 12, 14, 16, 2, 18\n    marbles = [2, 4, 6, 8, 10, 12, 14, 16, 2, 18]\n    return sum(marbles)\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Using the Pigeonhole Principle: at least one cage must have\n    # ceil(total_pigeons/total_cages) pigeons, where ceil is the ceiling function.\n    pigeons_in_most_populated_cage = -(-total_pigeons // total_cages)\n    \n    return pigeons_in_most_populated_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Correct the error in the calculation for the mass of the jackfruit\n    mass_papaya = 2 + 1/4\n    mass_jackfruit = 3 * mass_papaya\n    # Calculate the total mass of the papaya and the jackfruit\n    total_mass = mass_papaya + mass_jackfruit\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            break\n    return current_steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    # Let x be the original number of stickers Alexis had\n    marry = (7/5) * x\n    # After giving 20%, Marry and Alexis have 80% left\n    marry_after_giving = 0.8 * marry\n    alexis_after_giving = 0.8 * x\n    # Charlotte's stickers increased by 80%\n    # Hence, the total stickers Charlotte received is 80% of her original amount\n    charlotte_received = 0.8 * charlotte\n    # The stickers Charlotte received are 20% of what Marry and Alexis originally had\n    charlotte_received = 0.2 * marry + 0.2 * x\n    # Now we have two expressions for charlotte_received, set them equal to each other\n    # 0.8 * charlotte = 0.2 * marry + 0.2 * x\n    # Since Marry has 20 stickers more than Charlotte after giving\n    # marry_after_giving = charlotte + 20\n    # Replace marry_after_giving with 0.8 * marry\n    # 0.8 * marry = charlotte + 20\n    # Substituting the expression for charlotte\n    # 0.8 * marry = 0.2 * marry + 0.2 * x + 20\n    # Solve for x using simple algebra\n    marry_minus_charlotte = 20\n    # 0.8 * marry - 0.2 * marry = 0.2 * x + 20\n    # 0.6 * marry = 0.2 * x + 20\n\n    # At this point we set marry to (7/5) * x and simplify to find the value for x\n    # 0.6 * (7/5) * x = 0.2 * x + 20\n    # 0.6 * 7/5 * x - 0.2 * x = 20\n    # (0.6 * 7/5 - 0.2) * x = 20\n    # (0.84 - 0.2) * x = 20\n    # 0.64 * x = 20\n    x = 20 / 0.64\n\n    return int(x)\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_road = symbols('total_road')\n    first_day = 8\n    second_day = total_road / 6 + 4\n    \n    equation = Eq(first_day + second_day, 5 * total_road / 12)\n    \n    solution = solve(equation, total_road)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    three_digit_numbers = set(permutations(digits, 3))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let x be the original number of bottle caps in Justin's collection.\n    # After giving away 440 caps, Justin has 5/9 of his collection left, meaning he has 4/9 of his collection left.\n    # So, the equation to solve is: (x - 440) = (5/9) * x\n    # We can rearrange this equation to solve for x.\n    \n    # x - 440 = (5/9) * x\n    # (4/9) * x = 440\n    # x = (440 * 9) / 4\n    x = (440 * 9) / 4\n    return x\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perimeter = (144 + 204) * 2\n    wheat_on_sides = 116 - 4  # subtracting the wheat on the corners\n    distance_between_wheat = perimeter / wheat_on_sides\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        str_num = str(num)\n        if str_num.endswith('35') and sum(int(digit) for digit in str_num) == 35:\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    # Let r be the number of rainy days and s be the number of sunny days.\n    # We have two equations:\n    # r + s = 8       (1) Total number of days\n    # 12r + 20s = 112 (2) Total number of pine nuts\n\n    # From equation (1) we can express s in terms of r: s = 8 - r\n    # Substitute s in equation (2):\n    # 12r + 20(8 - r) = 112\n    # 12r + 160 - 20r = 112\n    # -8r = 112 - 160\n    # -8r = -48\n    r = -48 / -8\n\n    return int(r)\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_single = 15\n    price_double = 28\n    price_pack = 60\n\n    # Number of drinks Ben wants to buy\n    drinks_needed = 17\n\n    # Initialize minimal cost to a large value (17 times the single bottle price)\n    min_cost = drinks_needed * price_single\n\n    # Try different combinations of packs and calculate the total cost\n    for pack in range((drinks_needed // 5) + 1):\n        for double in range((drinks_needed // 2) + 1):\n            for single in range(drinks_needed + 1):\n                # Verify if this combination gives the correct number of bottles\n                if (5 * pack + 2 * double + single) == drinks_needed:\n                    cost = (price_pack * pack) + (price_double * double) + (price_single * single)\n                    # Check if this is the minimum cost found so far\n                    if cost < min_cost:\n                        min_cost = cost\n\n    # Convert pence to pounds for the final answer\n    return min_cost / 100\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # Therefore, for 4 players, the number of rounds required will be:\n    # Round 1: 4 players -> 2 winners\n    # Round 2: 2 players -> 1 winner\n    # Total rounds required is the number of times we need to divide by 2 to get to 1 player.\n    \n    players = 4\n    rounds = 0\n    \n    while players > 1:\n        players /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_only = 10 - both_correct\n    second_only = 15 - both_correct\n    one_question_correct = first_only + second_only\n    return one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    day_off = (end_date - start_date).days\n\n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve equations to find the number of pieces each had originally\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Total pieces of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5    # time taken to pass the tree in seconds\n\n    # Distance = Speed * Time\n    train_length = speed * time\n\n    return train_length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Different bracket placements and their evaluations\n    expressions = [\n        (285 + 15) / 5 - 2,\n        285 + (15 / 5) - 2,\n        285 + 15 / (5 - 2),\n        (285 + 15) / (5 - 2),\n        (285 + (15 / 5)) - 2,\n        285 + ((15 / 5) - 2),\n        285 + (15 / (5 - 2)),\n        ((285 + 15) / 5) - 2,\n        285 - (15 / (5 - 2))\n    ]\n\n    # Use set to find unique results\n    unique_results = set(expressions)\n    return len(unique_results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of mushrooms gathered each hour\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation 1: The total mushrooms gathered in two hours is 40\n    equation1 = Eq(first_hour + second_hour, 40)\n\n    # Equation 2: First hour mushrooms + 26 is equal to second hour mushrooms\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    # Retrieve the solution for the second hour\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    num_brushes = 0\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    while (total_spent - num_brushes * brush_price) % towel_price != 0 or (num_brushes * brush_price) >= 10:\n        num_brushes += 1\n\n    return num_brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    n = 5  # total days\n    total_teddy_bears = 35  # total teddy bears made\n    common_difference = 2  # number of additional teddy bears made each day\n\n    # Let the number of teddy bears made on the first day be 'a'.\n    # Then the total number of teddy bears made over the 5 days can be represented as:\n    # a + (a + d) + (a + 2d) + (a + 3d) + (a + 4d) = total_teddy_bears\n    # where d is the common difference\n    # This simplifies to: 5a + 10d = total_teddy_bears\n    # Solving for 'a' (the number of teddy bears made on the first day):\n    a = (total_teddy_bears - common_difference * (n * (n - 1) // 2)) // n\n\n    # The number of teddy bears made on the fifth day is: a + 4d\n    fifth_day_teddy_bears = a + 4 * common_difference\n    return fifth_day_teddy_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    multiplier = 7\n    addition = 8\n    \n    original_number = (final_number - addition) / multiplier\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49')\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    for hundred in [1, 8]:  # since it's a three-digit number, 0 cannot be the hundred's place\n        for ten in [0, 1, 8]:\n            for one in [0, 1, 8]:\n                if hundred != ten and hundred != one and ten != one:  # no repetition of digits\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # To ensure we get a blue marble, we have to consider the worst case\n    # scenario where we draw all marbles of the other colors first.\n\n    # Total number of marbles which are not blue is the sum of pink and grey marbles\n    non_blue_marbles = 9 + 7  # Pink + Grey\n\n    # To get at least one blue marble, we need to draw one more after drawing all non-blue marbles\n    draws_to_get_blue = non_blue_marbles + 1  # One more draw to ensure a blue marble\n\n    return draws_to_get_blue\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n\n    price_computer = tax_paid / tax_rate\n\n    return price_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    for perm in permutations(numbers):\n        for i in range(len(perm) - 1):\n            if gcd(perm[i], perm[i + 1]) != 1:\n                break\n        else:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3 / 10\n    whole = 6 / 7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Given Condition: there were 30 less boys than girls\n    equation1 = Eq(boys, girls - 30)\n    # After 3/5 of the boys and 5/8 of the girls left the hall, remaining boys and girls are equal\n    equation2 = Eq((1 - 3/5) * boys, (1 - 5/8) * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_frogs, initial_dragonflies = symbols('initial_frogs initial_dragonflies')\n    \n    # At the beginning the amount of frogs is 9 more than that of dragonflies\n    equation1 = Eq(initial_frogs, initial_dragonflies + 9)\n    \n    # Total number of animals is the same before and after the show\n    total_animals_before = initial_frogs + initial_dragonflies\n    total_animals_after = 11 + 10\n    \n    # Creating equation based on the total number of animals\n    equation2 = Eq(total_animals_before, total_animals_after)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (initial_frogs, initial_dragonflies))\n    \n    return solutions[initial_frogs]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        '(285+15) / 5 - 2',\n        '(285+15) / (5-2)',\n        '285 + (15 / 5) - 2',\n        '285 + (15 / (5-2))',\n        '285 + 15 / (5 - 2)',\n        '(285 + 15 / 5) - 2',\n        '285 + 15 / 5 - 2',\n        '285 + (15 / 5 - 2)',\n    ]\n    results = {eval(expr) for expr in expressions}\n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    \n    s = (amy_apples - john_apples) // 2\n    \n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if (24 - i) / 4 == 4:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # 1/A + 1/B = 1/3, 1/B + 1/C = 1/4, 1/A + 1/C = 1/8\n    # Let's add all three equations\n    # 2(1/A + 1/B + 1/C) = 1/3 + 1/4 + 1/8\n    # 1/A + 1/B + 1/C = 1/6 + 1/8 + 1/24\n    # Simplify the right side of the equation\n    total_rate = 1/3 + 1/4 + 1/8\n    # Find the combined rate for A, B, and C\n    combined_rate = total_rate / 2\n    # The time taken for all three together to complete the job is the inverse of the combined rate\n    time_taken = 1 / combined_rate\n    return time_taken\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total = sum((-1)**(i+1) * i for i in range(1, 101))\n    return total\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack = 42\n    tom = 38\n    james = 3 * (jack + tom)\n    return james\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the concentration of the final mixture\n    equation = Eq(2 * 0.45 + x * 0.15, 0.25 * (2 + x))\n\n    # Solve for x\n    amount_15_percent_sugar_water = solve(equation, x)\n\n    return amount_15_percent_sugar_water[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    # Define the number of coins Johnson and Vicky have initially as j and v respectively\n    from sympy import symbols, Eq, solve\n    j, v = symbols('j v')\n\n    # Equation 1: The total number of coins they have initially\n    equation1 = Eq(j + v, 48)\n\n    # Equation 2: After Johnson gives Vicky 8 coins, Vicky will have 2 fewer coins than Johnson\n    equation2 = Eq((v + 8) + 2, j - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, v))\n\n    # Johnson's initial number of coins\n    return solutions[j]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies - 18 * kids, -12)\n    equation2 = Eq(candies - 15 * (kids + 2), 0)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / boys_to_girls_ratio) * 2\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    sum_last_5_digits = 0\n    term = 2\n    \n    for i in range(2017):\n        sum_last_5_digits = (sum_last_5_digits + term) % 100000\n        term = term * 10 + 2\n        \n    return sum_last_5_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result_after_addition = (77 // 7)\n    original_number = result_after_addition - 6\n    return original_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    \n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n    \n    total_cupcakes = solutions[david] + solutions[eugene]\n    \n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, tim = symbols('sam tim')\n    \n    # Sam has sam cookies, Tim has tim cookies, together they have 1170 cookies\n    equation1 = Eq(sam + tim, 1170)\n    # After eating 1/4 of her cookies, Sam has 3/4 * sam cookies left\n    # After buying 1/5 more cookies, Tim has tim + 1/5 * tim = 6/5 * tim cookies\n    # Sam has 663 fewer cookies than Tim after these transactions\n    equation2 = Eq((3/4) * sam, (6/5) * tim - 663)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (sam, tim))\n    \n    # Sam ate 1/4 of her original amount of cookies\n    cookies_eaten = (1/4) * solution[sam]\n    \n    return int(cookies_eaten)\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    cost_per_kg = 11.4 / 0.6\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_in_8_days = fruit_per_day * 8\n    return total_fruit_in_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % i == 1 for i in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_initial = 40\n    ting_initial = 32\n    \n    # Let x be the number of stamps Sally gave to Ting\n    # After giving x stamps, Sally has (sally_initial - x) stamps\n    # Ting has (ting_initial + x) stamps\n    # The ratio of Sally's stamps to Ting's stamps after the exchange is 1:2\n    # (sally_initial - x) / (ting_initial + x) = 1/2\n    # Solving for x, we get\n    # 2*(sally_initial - x) = (ting_initial + x)\n    # 2*sally_initial - 2*x = ting_initial + x\n    # 2*x + x = 2*sally_initial - ting_initial\n    # 3*x = 2*sally_initial - ting_initial\n    x = (2*sally_initial - ting_initial) // 3\n    \n    # After giving x stamps, Ting has (ting_initial + x) stamps\n    ting_end = ting_initial + x\n    return ting_end\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    # Let t be the time (in minutes) after David increases his speed.\n    # Distance walked at initial speed = 150 m/min * 10 min = 1500 m\n    # Distance walked at increased speed = (150 m/min + 50 m/min) * t = 200 m/min * t\n    # Total distance = Distance at initial speed + Distance at increased speed\n    # 3700 m = 1500 m + 200 m/min * t\n    # Solve for t:\n    t = (3700 - 1500) / 200  # Time in minutes after speed increase\n    \n    # Total time spent walking in the park (initial 10 minutes + time t)\n    total_time = 10 + t\n    \n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Calculate the number of packets that can be bought with $20\n    packets_bought = 20 // 4\n    # Calculate the number of free sweets received\n    free_sweets = packets_bought // 2\n    # Calculate the total number of sweets\n    total_sweets = (packets_bought * 8) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # We start by giving each child at least one piece\n    total_pieces = 88 - 8  # We have given out 8 pieces, one to each child\n\n    # Now we need to distribute the remaining pieces.\n    # Each child must get a different number of pieces,\n    # if we want to give the max number to a child as little as possible,\n    # we should give out the pieces in an increasing order starting with 1\n    \n    # We distribute the remaining pieces as 1, 2, 3, ..., n to the other 7 children\n    # and the remaining pieces to the 8th child\n    \n    pieces_distributed = 0\n    for i in range(1, 8):\n        pieces_distributed += i\n    \n    # Pieces for the child with the most\n    most_pieces_child = total_pieces - pieces_distributed\n\n    return most_pieces_child\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total_counters = pink + purple + orange\n\n    # current probability of choosing a pink counter\n    current_prob = pink / total_counters\n\n    # double the probability\n    double_prob = 2 * current_prob\n\n    # Let x be the number of extra pink counters she needs to add\n    # The new probability will be (pink + x) / (total_counters + x)\n    # Set the new probability equal to double the original probability and solve for x\n    x = symbols('x')\n    equation = Eq((pink + x) / (total_counters + x), double_prob)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')  # b represents boys, g represents girls\n\n    # 40% more boys than girls\n    equation1 = Eq(b, g + 0.4 * g)\n\n    # After 24 boys and 24 girls left, 50% more boys than girls\n    equation2 = Eq(b - 24, 1.5 * (g - 24))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return int(solutions[b])\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    # Calculate 16 factorial\n    factorial_16 = factorial(16)\n    \n    # Convert the factorial number into a string\n    factorial_str = str(factorial_16)\n    \n    # Initialize counter for trailing zeros\n    trailing_zeros = 0\n    \n    # Count zeros from the end of the string (from right to left)\n    for character in reversed(factorial_str):\n        if character == '0':\n            trailing_zeros += 1\n        else:\n            break  # Stop counting when a non-zero digit is found\n    \n    return trailing_zeros\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case scenario for drawing one pair of matching socks is\n    # taking out all socks of the first two colors and one of the last color\n    # (3 black, 3 grey, and 1 red) or any other combination of colors\n    # (3 black, 3 red, and 1 grey) or (3 grey, 3 red, and 1 black).\n    \n    # To ensure a second pair is obtained, one more sock must be taken out\n    # which will definitely be the same color as one of the previously drawn socks.\n    \n    # So, the calculation will be:\n    max_single_pairs = 3 + 3 + 1  # One less than a pair for each color plus one\n    socks_for_second_pair = 1      # To ensure the second pair\n\n    total_socks = max_single_pairs + socks_for_second_pair\n\n    return total_socks\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let the original number of cupcakes and muffins be x.\n    cupcakes, muffins = symbols('cupcakes muffins')\n    \n    # After selling 60 cupcakes and 12 muffins\n    sold_cupcakes = 60\n    sold_muffins = 12\n    \n    # The number of muffins left is twice the number of cupcakes left\n    equation = Eq((muffins - sold_muffins), 2 * (cupcakes - sold_cupcakes))\n    \n    # Since she had an equal number of cupcakes and muffins originally\n    equal_number = Eq(cupcakes, muffins)\n    \n    # Solve the system of equations for cupcakes and muffins\n    solutions = solve((equation, equal_number), (cupcakes, muffins))\n    \n    # The total number of cupcakes and muffins Demi had originally\n    total_initial = solutions[muffins] * 2\n\n    return total_initial\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import Eq, symbols, solve\n    \n    # Let's define Helen's daily pocket money as a symbol\n    helen_pocket_money = symbols('helen_pocket_money')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(helen_pocket_money * 60 - 5 * 60 + 90, (helen_pocket_money + 3) * 60 - 5 * 60)\n    \n    # Solve the equation for Helen's daily pocket money\n    helen_daily_money = solve(equation, helen_pocket_money)[0]\n    \n    # Return the solution\n    return helen_daily_money\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    sh_to_la = 12.25\n    la_to_sh = sh_to_la + 1.5\n    round_trip = sh_to_la + la_to_sh\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    return 278 + 127\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let the amount of money Eddi and Wiya originally have be 3x and 2x respectively\n    x = symbols('x')\n    \n    # original amounts\n    eddi_original = 3 * x\n    wiya_original = 2 * x\n\n    # after Lisa gives Eddi $4, the ratio should be 8:5\n    equation = Eq((eddi_original + 4) / wiya_original, 8 / 5)\n    \n    # solve for x\n    x_value = solve(equation, x)[0]\n    \n    # calculate Wiya's original amount of money\n    wiya_money = wiya_original.subs(x, x_value)\n    \n    return wiya_money\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    sum_1_to_30 = sum(range(1, 31))\n    sum_1_to_29 = sum(range(1, 30))\n    return sum_1_to_30 + sum_1_to_29\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # By the inclusion-exclusion principle\n    both_classes = sport_class + reading_class - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Initial parameters\n    speed_first_part = 40  # km/h\n    duration_first_part = 2  # hours\n    distance_first_part = speed_first_part * duration_first_part  # km\n\n    speed_second_part = 70  # km/h\n    distance_second_part = 280  # km\n    duration_second_part = distance_second_part / speed_second_part  # hours\n\n    # Total distance and time\n    total_distance = distance_first_part + distance_second_part  # km\n    total_duration = duration_first_part + duration_second_part  # hours\n\n    # Average speed calculation\n    average_speed = total_distance / total_duration  # km/h\n\n    return average_speed\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference of the arithmetic sequence\n    a, d = symbols('a d')\n\n    # The nth term of an arithmetic sequence can be found using the formula: a + (n - 1) * d\n    # According to the question:\n    # 9th term: a + (9 - 1) * d = a + 8d\n    # 15th term: a + (15 - 1) * d = a + 14d\n    # We know that the 9th term is 18 larger than the 15th term, so:\n    # a + 8d = (a + 14d) + 18\n\n    # The sum of the 20th and 12th terms is 88:\n    # (a + (20 - 1) * d) + (a + (12 - 1) * d) = 88\n    # (a + 19d) + (a + 11d) = 88\n\n    # We need to find the 32nd term, which is a + (32 - 1) * d = a + 31d\n\n    # Writing system of equations based on the above information\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculating the 32nd term using the found values of a and d\n    term_32 = solutions[a] + 31 * solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n\n    for number in range(100, 1000):\n        str_num = str(number)\n        if str_num.count('7') >= 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    for three_page_letters in range(12):\n        four_page_letters = 11 - three_page_letters\n        total_pages = (three_page_letters * 3) + (four_page_letters * 4)\n        if total_pages == 38:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    str_number = str(number)\n    index_of_8 = str_number.index('8')  # Get the index of '8' in the string\n    value_of_8 = 10**(len(str_number) - index_of_8 - 1)\n    return value_of_8\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days = lcm(25, 20)\n    \n    # Start from 1st March (subtracting this day because we start counting from 0)\n    day = days - 1\n\n    # March has 31 days, so subtract these days to find the day in the next month\n    next_month_day = day - 31\n\n    # Assuming April next (30 days), but adding 1 to make it the actual date in April\n    date_in_april = next_month_day + 1\n\n    return date_in_april\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    # Compute the factorial for a given number n\n    def fact(n):\n        return factorial(n)\n\n    # There must be at least 1 singing performance between 2 dancing performances\n    # We have 4 dancing performances hence we divide them into 3 pairs.\n    # S(D_DS_DS_D)S - where S represents singing and D represents dancing\n    # These pairs create 5 slots in which we can place the remaining singing performances\n    # Including the start and end which must be singing performances.\n\n    # Since we have 6 singing performances and we've already placed 2\n    # We have 4 singing performances left to place in the 5 slots.\n\n    # We can solve this using stars and bars problem which is (n+k-1) choose k\n    # Where n is the number of items (singing performances) and k the number of slots.\n    # (5+4-1) choose 4 = 8 choose 4\n\n    # Calculate the number of different arrangements for the singing performances.\n    sing_arrangements = fact(8) // (fact(4) * fact(8 - 4))\n    # Each of these singing arrangements corresponds to exactly one complete performance arrangement\n    # Since the dancing arrangement is fixed by the requirement that there be at least\n    # one singing performance between each dancing performance.\n\n    return sing_arrangements\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    A = 1\n    # Applying the operation A Δ a_n = A - a_n\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n\n    # Since A = a0 + a1 + a2 + a3 + a4 + a5 + a6 = 1\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Calculating the simplest form of a0\n    from fractions import Fraction\n    a0_simplest = Fraction(a0).limit_denominator()\n    m = a0_simplest.numerator\n    n = a0_simplest.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Define possible digits based on the hints provided\n    possible_digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\n    # From the hint given with 5430 we know none of these digits are in the number\n    possible_digits -= {5, 4, 3, 0}\n\n    # 8642 has 2 correct digits in the right position, so the number can contain 8, 6, or both\n    # And it cannot be 4 or 2 since they are in the wrong position and they're not in number from previous steps\n    # 8765 and 1023 have 2 correct digits but in the wrong position, so they can't have 8 and 6 both\n    # By combining the hints, we know the number must have 6 and 8 or one of each in the correct place (which is 86__)\n\n    # Now we check the numbers that can match with the previous hints\n    # 8765 and 1023 have 2 correct digits in common but in a wrong position, so these must be 0 and 1\n    # This tells us the third digit cannot be 7 and must be either 0 or 1 but not in the second position (860_ or 861_)\n    # Since we know that 0 cannot be the last digit (from 1023), it must be 1\n\n    # So our number is 86_1. Now we need to find the third digit\n    # Based on the information above, we know that the third digit must be 0 (8610)\n    return 8610\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number as x\n    x = symbols('x')\n    \n    # Aiden's mistaken calculation is (x / 4) - 25 = 2021\n    mistake_eq = Eq((x / 4) - 25, 2021)\n    \n    # Now we solve for x\n    x_value = solve(mistake_eq, x)[0]\n\n    # Aiden's correct calculation would be 4 * x + 25\n    correct_answer = 4 * x_value + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    # Define the prime factorization function\n    def prime_factors_count(n, p):\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        return count\n\n    # List of the numbers\n    numbers = [75, 56, 12, 105]\n\n    # Count the number of 2s and 5s in the prime factorization\n    # as they will determine the number of trailing zeros\n    count_2 = 0\n    count_5 = 0\n    for number in numbers:\n        count_2 += prime_factors_count(number, 2)\n        count_5 += prime_factors_count(number, 5)\n\n    # The number of trailing zeros is the minimum of count of 2s and 5s\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna_books = symbols('donna_books')\n    chloe_books = Eq(4 * donna_books, donna_books + 816)\n    donna_books_count = solve(chloe_books, donna_books)\n\n    return donna_books_count[0]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((x + 4) / 8, 3)\n    result = solve(equation, x)\n    return result[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for number of adults, children, boys, and girls\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    # Equations based on the problem statement\n    equation1 = Eq(adults, 3 * children)  # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)       # twice as many boys as girls\n    equation3 = Eq(adults, girls + 176)   # 176 more adults than girls\n\n    # Total number of people is the sum of adults and children\n    # children can be expressed as the sum of boys and girls\n    equation4 = Eq(adults + boys + girls, adults + children)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    # Total number of people at the concert\n    total_people = solutions[adults] + solutions[boys] + solutions[girls]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Calculate modulus of 999^99 by 10 to find the last digit\n    ans = pow(999, 99, 10)\n    return ans\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    ans = None\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3*a + 11*b == 193:\n                    ans = a + b\n                    break\n            if ans is not None:\n                break\n    return ans\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Janice made an error by multiplying 'a' with 'b'.\n    # The correct process is to interpret 'ab' as a two-digit number, not as 'a' times 'b'.\n    \n    # We are looking for a two-digit number 'ab' such that 7 * ab = a0b,\n    # where a0b is a three-digit number with '0' in the middle.\n    \n    # To solve, we'll loop through all possible two-digit numbers 'ab'\n    for a in range(1, 10):  # 'a' must be a non-zero digit\n        for b in range(10):  # 'b' can be any digit including zero\n            ab = a * 10 + b\n            a0b = a * 100 + b\n            if 7 * ab == a0b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the price of a banana as 'b' and the price of an apple as 'a'.\n    b, a = symbols('b a')\n    \n    # Write equations based on the given information\n    # Ellie's purchase: 1.50 = 2b + 3a\n    equation1 = Eq(2 * b + 3 * a, 1.50)\n    # Beth's purchase: 1.45 = 3b + 2a\n    equation2 = Eq(3 * b + 2 * a, 1.45)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (b, a))\n    \n    # Calculate the cost for Annabella (1 banana and 1 apple)\n    annabella_cost = solution[b] + solution[a]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # 3 workers build 14 houses in 4 days\n    houses_per_day_per_worker = 14 / (3 * 4) # Houses built per worker per day\n    houses_built = houses_per_day_per_worker * 9 * 2 # Houses built by 9 workers in 2 days\n    \n    return int(houses_built)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(12, 15), 60)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    # Set the minimum product to a large number\n    min_product = float('inf')\n    \n    # Set the minimum ages to None as placeholders\n    min_ages = (None, None, None)\n    \n    # Loop over possible ages for Bob (since Fido must be 10 years younger)\n    for bob in range(11, 29):\n        for rex in range(1, 29):\n            # Calculate Fido's age based on the constraint given\n            fido = bob - 10\n            # Check if all dogs have different ages and sum up to 28\n            if bob != rex and rex != fido and fido != bob and bob + rex + fido == 28:\n                # Calculate the product of their ages\n                product = bob * rex * fido\n                # If the product is less than the minimum product found so far, update it\n                if product < min_product:\n                    min_product = product\n                    min_ages = (bob, rex, fido)\n    # Return the minimum product\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    children = (2/5) * total\n    women = (1/4) * total\n    men = total - children - women\n\n    equation = Eq(children, men + 20)\n\n    total_people = solve((equation), (total))\n\n    return total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money Adam has and y be the price of one ball\n    x, y = symbols('x y')\n\n    # If he buys 5 balls, he has $15 left: x - 5y = 15\n    equation1 = Eq(x - 5 * y, 15)\n\n    # If he buys 8 balls, he needs $12 more: x - 8y = -12\n    equation2 = Eq(x - 8 * y, -12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the price of one ball, which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(100, 1000):\n            if A != B and set(str(A)) & set(str(B)) and len(set(str(A))) < 3 and len(set(str(B))) < 3:\n                if A % 75 == 0 and B % 75 == 0:\n                    current_sum = A + B\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    rebound_height_after_second_bounce = 9\n    initial_drop_height = rebound_height_after_second_bounce * (3**2)\n    return initial_drop_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are as follows:\n    # number % 3 = 2\n    # number % 7 = 4\n    # number % 8 = 7\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Lee's work rate be x jobs/hour and Nancy's work rate be y jobs/hour\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # If they work together, they will finish 1 job in 10 hours\n    equation1 = Eq(1, (lee_rate + nancy_rate) * 10)\n\n    # Lee types for 6 hours and Nancy types for 20 hours to finish 1 job\n    equation2 = Eq(1, lee_rate * 6 + nancy_rate * 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Nancy's rate is y jobs/hour, so the time taken for Nancy to finish 1 job is 1/y hours\n    time_for_nancy = 1 / solutions[nancy_rate]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Let the average marks for class A be `a`\n    # Then the average marks for class B will be `a + 7`\n    # Total number of pupils = class A + class B = 40 + 30\n    total_pupils = 40 + 30\n    # Total average = (class A pupils * class A average + class B pupils * class B average) / total pupils\n    total_avg = 90\n    \n    # We set up the equation based on the information given:\n    # (40 * a + 30 * (a + 7)) / (40 + 30) = 90\n    # Now we solve for `a`\n    a = symbols('a')\n    equation = Eq((40 * a + 30 * (a + 7)) / total_pupils, total_avg)\n    \n    # We solve the equation to find the value of `a`\n    a_value = solve(equation, a)[0]\n    \n    # The average score for class B is `a + 7`\n    average_class_b = a_value + 7\n\n    return average_class_b\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the value of the complex fraction\n    ans = 1 / (1 / (2007 * 2008) + 1 / (2008 * 2009) + 1 / 2009)\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    # Set the possible ways to pay the totals as 0\n    count = 0\n\n    # Enumerate through the possible quantities of each coin type\n    for ten_pences in range(6):  # He has 5 ten-pence coins, so it can be 0 to 5\n        for twenty_pences in range(4):  # He has 3 twenty-pence coins, so it can be 0 to 3\n            for fifty_pences in range(2):  # He has 1 fifty-pence coin, so it can be 0 to 1\n                # If the total adds up to 70 pence, we have found a valid way to pay\n                if (ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50) == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    import math\n    students = 40\n    boat_capacity = 7\n    num_boats = math.ceil(students / boat_capacity)\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = (11 - 2) + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2)-(250249*250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 201))\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = 9000 + a * 100 + 80 + a\n        if number % 15 == 0:\n            return a\n            \nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        number = int(f\"125{J}6\")\n        if number % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one table and one chair\n    table, chair = symbols('table chair')\n    \n    # Equation 1: The cost of 5 tables and 12 chairs is £720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    \n    # Equation 2: Each table costs £25 more than each chair\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    # Return the cost of one table from the solutions\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    first_operation = final_number / 6\n    original_number = first_operation - 7\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    # a ⊙ b = 5a - 2b\n    # So, 9 ⊙ x = 33 can be written as:\n    # 5 * 9 - 2 * x = 33\n    # Solving for x:\n    x = (5 * a - result) / -2\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Known formula for the sum of squares up to n^2:\n    # 1^2 + 2^2 + 3^2 + ... + n^2 = n*(n+1)*(2n+1)/6\n    square_sum = lambda n: n * (n + 1) * (2 * n + 1) // 6\n    \n    # Known formula for the sum of cubes up to n^3:\n    # 1^3 + 2^3 + 3^3 + ... + n^3 = (1 + 2 + 3 + ... + n)^2\n    # Also known that the sum of the first n natural numbers is n*(n+1)/2\n    cube_sum = lambda n: (n * (n + 1) // 2) ** 2\n    \n    # The series can be rewritten using the formula for the sum of cubes and square of a number:\n    # a * b == a^2 * b/a == a^3 / a + b^3 - (a-1)^3\n    # our series 0*1^2+1*2^2+2*3^2...+23*24^2 can be rewritten as:\n    # 1^3 - 0^3 + 2^3 - 1^3 .... + 24^3 - 23^3\n    # we use the formula for cubes up to n and for n-1 and sum them up\n    ans = cube_sum(24) - cube_sum(0)\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360\n    \n    # Ratio of time going up to time going down is 5:4\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n\n    # Calculate time spent going up and going down\n    time_up = (ratio_up / total_ratio) * total_time\n    time_down = (ratio_down / total_ratio) * total_time\n\n    # Let speed going down be x m/min, then speed going up is x - 10 m/min\n    # Using the relationship between distance, speed, and time: distance = speed * time\n    # Distance up: (x - 10) * time_up\n    # Distance down: x * time_down\n    # The total distance is the sum of distance up and distance down\n    # Since the total distance is what we want to find, we only need to express it in terms of x\n    # We do not need to explicitly solve for x as it will cancel out in the total distance calculation\n\n    # Total distance = (x - 10) * time_up + x * time_down\n    total_distance = (time_up - 10) * time_up + time_down * time_down\n\n    # Calculate the total distance cycled\n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    # Calculate least common multiple of the two packet sizes.\n    days_to_sync = lcm(25, 20)\n    \n    # Since March has 31 days, we'll find the month and day when she starts new packets.\n    next_start_month = 'March'  # The month remains March, because the LCM is less than 31.\n    next_start_day = 1 + days_to_sync  # We add the LCM to the 1st of March.\n    \n    # As March has 31 days, we need to adjust for this.\n    if next_start_day > 31:\n        next_start_day -= 31\n        next_start_month = 'April'\n\n    return next_start_month, next_start_day\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the number of watermelons and pineapples left as functions of the number of days\n    days = symbols('days')\n    watermelons_left = 94 - 9 * days\n    pineapples_left = 138 - 9 * days\n    \n    # Create an equation representing the problem statement\n    equation = Eq(pineapples_left, 3 * watermelons_left)\n    \n    # Solve the equation for the number of days\n    solution = solve(equation, days)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n    \n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    result = 3.6 * 100\n    return result\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom, jerry, years = symbols('tom jerry years')\n    current_year = 0\n    \n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the system of equations for Tom and Jerry's current age\n    ages = solve((equation1, equation2), (tom, jerry))\n    \n    # Replace Tom's age in the first equation to find Jerry's current age\n    tom_age = ages[tom]\n    jerry_age = ages[jerry]\n    \n    # In how many years from now will Jerry's age be doubled\n    equation3 = Eq(jerry + years, 2 * jerry)\n    \n    # Solve for the number of years\n    years_to_double = solve(equation3, years)\n    \n    # Since jerry's age should be an integer, we return the integer number of years\n    return int(years_to_double[0])\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Mass of fruits that each car carries\n    mass_per_car = 24.2 / 4\n    # Mass of fruits that each truck carries\n    mass_per_truck = 410 / 50\n    \n    # The mass that a truck carried more than a car\n    diff = mass_per_truck - mass_per_car\n    \n    # Return the difference in mass\n    return diff\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    \n    weeks_until_birthday = days_until_birthday // days_in_a_week\n\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    meeting_time = 5\n\n    # Distance covered by Eddie before meeting\n    distance_eddie = eddie_speed * meeting_time\n\n    # Distance covered by Brother before meeting\n    distance_brother = brother_speed * meeting_time\n\n    # Total distance from house to mall\n    distance_to_mall = distance_eddie + distance_brother\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    time_arrived = 9 * 60 + 22       # Convert 9:22 AM to minutes\n    time_bus = 9 * 60 + 15           # Convert 9:15 AM to minutes\n    bus_interval = 35                # Bus leaves every 35 minutes\n\n    if time_arrived <= time_bus:\n        wait_time = time_bus - time_arrived\n    else:\n        # Find out how many intervals have passed since the first bus at 9:15\n        intervals_passed = (time_arrived - time_bus) // bus_interval\n        # Calculate the time for the next bus\n        next_bus_time = time_bus + (intervals_passed + 1) * bus_interval\n        # Calculate the wait time\n        wait_time = next_bus_time - time_arrived\n\n    return wait_time\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    result = 161 / 46\n    return result\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    current_year = 2017\n    # Ages of family members in the current year 2017\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n    \n    # Iterate over the next years to find when all ages are prime again\n    while True:\n        current_year += 1\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n\n        # Check if all ages in the current year are prime\n        if all(isprime(age) for age in [my_age, brother_age, mother_age, father_age]):\n            break\n    \n    return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_percentage = 15 / 100\n    increase_percentage = 15 / 100\n    \n    discounted_price = original_price - (original_price * discount_percentage)\n    final_price = discounted_price + (discounted_price * increase_percentage)\n    \n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    road_length = 50\n\n    # Calculate the number of intervals between the lamp posts\n    number_of_intervals = total_flowers / flowers_between_posts\n\n    # Calculate the distance between each interval (between two lamp posts)\n    distance_between_posts = road_length / (number_of_intervals + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    ans = 1 + circles + circles * (circles - 1) // 2 + circles * (circles - 1) * (circles - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_to_each_friend = 15\n    number_of_friends = 8\n\n    books_given_away = books_given_to_each_friend * number_of_friends\n    books_remaining = total_books - books_given_away\n\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Because we only care about the unit digit, we only need to consider the unit digit of 4 raised to different powers.\n    # We will take the powers of 4 (mod 10) to find the cycle of unit digits for 4^n.\n    # Then find the unit digit of 4^2008 by seeing where 2008 would fall in the cycle.\n\n    # cycle of unit digits for powers of 4\n    cycle = [4**i % 10 for i in range(1, 5)]\n\n    # 2008 modulo the length of the cycle to find the position of the unit digit\n    position = 2008 % len(cycle)\n\n    # If position is 0, it means it's the last element of the cycle\n    if position == 0:\n        position = len(cycle)\n    \n    # The unit digit is at the (position-1) index in the cycle (since we start counting from 4^1)\n    unit_digit = cycle[position-1]\n\n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    \n    number_of_males = fraction_male * total_adults\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Home to Shops paths\n    home_to_audio = 6\n    home_to_book = 4\n    home_to_chapel = 5\n\n    # Shops to School paths\n    audio_to_school = 2\n    book_to_school = 2\n    chapel_to_school = 3\n\n    # Total paths from home to school\n    total_paths = (home_to_audio * audio_to_school +\n                   home_to_book * book_to_school +\n                   home_to_chapel * chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let's represent Adam's weight as A, Ben as B, and Carl as C.\n    # Given A + B = 102 kg, B + C = 97 kg, and A + C = 93 kg.\n    # Adding all three equations gives us 2(A + B + C) = 102 + 97 + 93.\n    \n    total_double_weight = 102 + 97 + 93\n    total_weight = total_double_weight / 2  # Dividing by 2 to find the actual total weight.\n    \n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40 PM\", \"%I:%M %p\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    ans = departure_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n    \n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    belle, eddie = symbols('belle eddie')\n    \n    # Belle initially has 49 ice-cream sticks, and Eddie gives her 11 more.\n    # After the exchange, both have the same number of sticks.\n    equation = Eq(belle + 11, eddie - 11)\n    \n    # Belle's initial number of sticks\n    belle_sticks = 49\n    \n    # Solve the equation to find Eddie's initial number of sticks\n    solutions = solve((equation, Eq(belle, belle_sticks)), (belle, eddie))\n    \n    # Return Eddie's initial number of sticks\n    return solutions[eddie]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    # There are 50 lamp posts with 2 meters between each one\n    num_lamp_posts = 50\n    distance_between = 2\n\n    # The total length is the distance between each lamp post times the number of gaps between lamp posts\n    # which is one less than the number of lamp posts.\n    total_length = distance_between * (num_lamp_posts - 1)\n\n    return total_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n\n    exeter_temp = glasgow_temp + difference\n\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = (5/11 + 2/27) * 11 + 5/27\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    num_boxes = 6\n    total_weight = weight_per_box * num_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)  # John and Kofi have $25 coins between them\n    equation2 = Eq(kofi + 4, john - 4 - 3)  # Kofi will have three fewer coins than John after giving four coins\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    total_tea = jason_tea + belinda_tea\n    each_should_have = total_tea / 2\n    tea_to_give = each_should_have - belinda_tea\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '246'\n    all_permutations = permutations(digits)\n    count = sum(1 for _ in all_permutations)\n    return count\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost  # Convert £10 to pence\n    \n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    # Seperate into two sequences, one for the positive numbers (even) and one for the negative numbers (odd)\n    positive_sequence_sum = sum(range(2, 101, 2))\n    negative_sequence_sum = sum(range(1, 100, 2))\n    \n    ans = positive_sequence_sum - negative_sequence_sum\n    \n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    normal, special = symbols('normal special')\n    \n    # Equation 1: Heads count; normal rabbits have 1 head, special rabbits have 3\n    heads_eq = Eq(normal + 3*special, 53)\n    # Equation 2: Feet count; normal rabbits have 4 feet, special rabbits have 2\n    feet_eq = Eq(4*normal + 2*special, 102)\n    \n    # Solve the system of equations\n    solutions = solve((heads_eq, feet_eq), (normal, special))\n    \n    return solutions\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_left = 4\n    neelesh_ate = 1\n    neelesh_total = neelesh_left + neelesh_ate\n\n    ayesha_total = neelesh_total * 6\n    ayesha_left = ayesha_total - neelesh_total\n\n    return ayesha_left\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = 3\n    denominator = Fraction(1, 3)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of one copper ball and one iron ball\n    weight_copper, weight_iron = symbols('weight_copper weight_iron')\n\n    # Create equations based on the given information\n    equation1 = Eq(8 * weight_copper + 9 * weight_iron, 135)\n    equation2 = Eq(6 * weight_copper + 3 * weight_iron, 75)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (weight_copper, weight_iron))\n\n    return solutions[weight_copper]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gummy_bears, lollipops = symbols('gummy_bears lollipops')\n\n    # Original ratio equation\n    original_ratio = Eq(gummy_bears / lollipops, 5/7)\n\n    # New ratio equation after adding candy to each pile\n    new_ratio = Eq((gummy_bears + 120) / (lollipops + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (gummy_bears, lollipops))\n\n    # Calculate the total number of candies now\n    total_candy_now = solutions[gummy_bears] + 120 + solutions[lollipops] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_a = 80\n    remaining_marbles = total_marbles - marbles_in_a  # Marbles to distribute in B and C\n\n    # Let the number of marbles in Box C be x.\n    # Then number of marbles in Box B will be 2x.\n    # The equation will be 2x + x = remaining_marbles\n    # i.e., 3x = remaining_marbles\n\n    marbles_in_c = remaining_marbles // 3\n    return marbles_in_c\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    value_at_nth_term = 25\n    common_difference = 28 - 25  # Calculating the common difference from the sequence\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference.\n    # We need to find a_1, so we rewrite the formula to find a_1: a_1 = a_n - (n - 1) * d\n    first_term = value_at_nth_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    from decimal import Decimal, getcontext\n    \n    getcontext().prec = 501  # Set precision high enough to calculate beyond the 500th digit after the decimal point\n    fraction = Decimal(1) / Decimal(70)\n    \n    fraction_str = str(fraction)[2:]  # Convert to string and remove '0.' from the start\n    ans = int(fraction_str[499])  # Get the 500th digit (index 499 since it's 0-indexed)\n    \n    return ans\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(24 * x - 5 * (3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sum_of_numbers = 5 + 15 + 17 + 23\n    total_sum = sum_of_numbers * 3\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    nums = [31, 42, 53, 64, 75, 86, 97]\n    return sum(nums)\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10, subtract them, then convert back to base 3\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n    \n    result_in_base10 = num1 - num2\n    ans = ''\n    \n    while result_in_base10 > 0:\n        ans = str(result_in_base10 % 3) + ans\n        result_in_base10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Define the possible selections and initialize variables\n    largest_value_of_n = 0\n    potential_lists = []\n\n    # Given the constraint that no two numbers differ by 5,\n    # the list of first 20 positive integers can be broken down into groups.\n    # No number within these sets differs by 5 with any other member of the set.\n    sets = [(1, 6, 11, 16), (2, 7, 12, 17), (3, 8, 13, 18), (4, 9, 14, 19), (5, 10, 15, 20)]\n\n    # Loop through product of sets to generate every possible combination\n    # without breaking the rule of difference being not equal to 5.\n    import itertools\n    for combination in itertools.product(*sets):\n        potential_lists.append(combination)\n\n    # Calculate the largest n by finding the length of the longest combination\n    largest_value_of_n = len(max(potential_lists, key=len))\n\n    return largest_value_of_n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for cake and biscuit\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    # Return the calories provided by one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct_answer = 12\n    total_questions = correct_answers + wrong_answers\n\n    total_marks = correct_answers * marks_per_correct_answer\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for b in range(1, 10):\n        for i in range(10):\n            total_pencils = int(str(b) + str(i) + str(b))\n            if total_pencils % 44 == 0:\n                pencils_per_student = total_pencils // 44\n                return pencils_per_student\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's current age and Mother's current age\n    j, m = symbols('j m')\n    # John’s age in 8 years is equivalent to his mother’s age 20 years ago\n    equation1 = Eq(j + 8, m - 20)\n    # John's age when his mother is 5 times his age\n    # The age difference between them remains the same\n    age_difference = m - j\n    equation2 = Eq(5 * (j - age_difference), m)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, m))\n\n    # John's age when his mother was 5 times his age\n    john_age_when = j - age_difference\n\n    # Substitute the found age difference into John's age\n    return solutions[john_age_when.subs(age_difference, solutions[m] - solutions[j])]\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara, kevin, james = symbols('sara kevin james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    # Fractional part calculation\n    numerator = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - (2016 + Fraction(7, 8)) * (Fraction(11, 3))\n    denominator = ((2017 + Fraction(1, 3)) - (2016 + Fraction(7, 8))) * 17\n    fraction_part = numerator / denominator\n\n    # Adding the mixed number\n    mixed_number = 3 + Fraction(23, 32)\n\n    # Final calculation\n    ans = fraction_part * mixed_number\n\n    return float(ans)\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [M % i for i in range(2, 11)]\n        if len(set(remainders)) == 9 and all(x != 0 for x in remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    toms_lap_time = 24\n    williams_lap_time = 8\n\n    meet_time = (toms_lap_time * williams_lap_time) // math.gcd(toms_lap_time, williams_lap_time)\n\n    return meet_time\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    containers = (total_apples + apples_per_container - 1) // apples_per_container\n    return containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve((equation), (reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n\n    total_books = books_about_fish + books_about_birds\n\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 28\n    factorization = factorint(28)\n    \n    # For a perfect square, all exponents in prime factorization should be even\n    # Multiply with the smallest number to make all exponents even\n    smallest_multiplier = 1\n    for prime, exponent in factorization.items():\n        if exponent % 2 != 0:  # if the exponent is odd\n            smallest_multiplier *= prime\n\n    return smallest_multiplier\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n\n    # Number of intervals + 1 (since there's a post at each end of the field)\n    num_posts = (field_length // post_interval) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # the first digit cannot be zero\n        for b in range(10):  # the second digit can be from 0 to 9\n            ab = 10 * a + b  # construct the number ab\n            ba = 10 * b + a  # construct the number ba\n            if 8 * ab == 3 * ba:  # check the condition\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_sum = sum([6, 16, 26, 46, 56, 66])\n    return positive_sum - negative_sum\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_finish_time = datetime.strptime('14:50', '%H:%M')\n    play_time = timedelta(minutes=10)\n    watch_tv_time = timedelta(minutes=20)\n    lunch_time = timedelta(minutes=20)\n    \n    home_reached_time = lunch_finish_time - (play_time + watch_tv_time + lunch_time)\n    return home_reached_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # A and B are always next to each other, treat them as one person AB\n    # There are now 5 \"items\" to arrange: AB, C, D, E, F\n    arrangements_of_5 = factorial(5)\n\n    # A and B can be arranged in 2! ways since AB or BA\n    arrangements_of_AB = factorial(2)\n\n    # Total arrangements is the product of both\n    total_arrangements = arrangements_of_5 * arrangements_of_AB\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    years = 5\n    for _ in range(years):\n        initial_population = 5 * initial_population // 2\n    return initial_population\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    max_num = 0\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 4 == 3 and num % 5 == 3:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming the number of red balloons is r, green balloons is g, and purple balloons is p\n    r, g, p = symbols('r g p')\n\n    # Equations based on the given conditions\n    equation1 = Eq(r, g / 4)\n    equation2 = Eq(r, (3/5) * p)\n    equation3 = Eq(4 * r + 5 * g + 7 * p, 642)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (r, g, p))\n\n    # Returning the number of purple balloons\n    return solutions[p]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    for class_size in range(1, 139):\n        if 138 % class_size == 0 and 138 // class_size >= 5:\n            return class_size\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let's denote the number of steps of the escalator as x.\n    # When Peter walks at 1 step per second, the escalator moves (x - 10) steps in 10 seconds.\n    # When Peter walks at 2 step per second, the escalator moves (x - 16) steps in 8 seconds.\n    \n    # We have the following system of equations:\n    # x = 10 + s * 10       (1)\n    # x = 16 + s * 8        (2)\n    # Here, s represents the escalator's step movement per second.\n    \n    # So we can directly use these two equations to find x by equating them and solving for s:\n    # 10 + 10s = 16 + 8s\n    # 2s = 16 - 10\n    # s = (16 - 10) / 2\n    # s = 6 / 2\n    s = 3\n    \n    # Now substituting the value of s back into either (1) or (2) to find x:\n    # x = 10 + 10s\n    # x = 10 + 10 * 3\n    x = 10 + 10 * s\n    \n    return x\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    original_product = 246 * 135\n    # Given in the question that 246 times 135 equals 33210\n    given_product = 33210\n    difference_in_multiplicand = 248 - 246\n    additional_product = difference_in_multiplicand * 135\n\n    # We can use the distributive property of multiplication to calculate the new product\n    new_product = given_product + additional_product\n\n    return new_product\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    ans = tens + hundredths + thousandths\n\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total_value = 1200\n\n    ans = (percentage / 100) * total_value\n\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children_count = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children_count\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    return solutions[pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    # No need for libraries in this case\n    for hundreds in range(1, 5):  # hundreds digit can only be 2 or 4 since it needs to be even and <5 (because ones is twice)\n        for tens in range(0, 10, 2):  # tens digit needs to be even\n            for ones in range(0, 10, 2):  # ones digit also needs to be even\n                number = 100 * hundreds + 10 * tens + ones\n                if (number % 2 == 0 and number % 9 == 0 and \n                    ones == 2 * hundreds and hundreds < tens and\n                    len(set([hundreds, tens, ones])) == 3):\n                    return number\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the amount of chocolate Sally initially has,\n    # and k be the amount of chocolate Ken initially has.\n    s, k = symbols('s k')\n\n    # Based on the given ratio, we have the first equation:\n    # s / k = 5 / 7\n    equation1 = Eq(s / k, 5 / 7)\n\n    # After Ken gives 24 chocolates to Sally, Sally has s + 24 chocolates\n    # and Ken has k - 24 chocolates.\n    # At this point, Sally has twice as much chocolate as Ken.\n    # So we have the second equation:\n    # (s + 24) = 2 * (k - 24)\n    equation2 = Eq(s + 24, 2 * (k - 24))\n\n    # Solve the system of equations for s and k\n    solutions = solve((equation1, equation2), (s, k))\n\n    # Ken's final amount of chocolate\n    ken_final = solutions[k] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    first_segment_rate = 5\n    first_segment_hours = 10\n    second_segment_rate = 8\n    second_segment_hours = 10\n    third_segment_rate = 15\n    \n    # Calculate the bill without the free hours\n    if bill <= first_segment_rate * first_segment_hours: \n        # all billed hours are in the first pricing segment\n        billed_hours = bill / first_segment_rate\n    elif bill <= (first_segment_rate * first_segment_hours + \n                  second_segment_rate * second_segment_hours): \n        # bill includes hours from the first and second pricing segments\n        billed_hours = ((bill - first_segment_rate * first_segment_hours) / \n                        second_segment_rate + first_segment_hours)\n    else: \n        # bill includes hours from all three pricing segments\n        billed_hours = ((bill - first_segment_rate * first_segment_hours -\n                        second_segment_rate * second_segment_hours) / \n                        third_segment_rate + first_segment_hours + second_segment_hours)\n    \n    # Add in the free hours\n    total_hours = free_hours + billed_hours\n    return int(total_hours)\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    # The sum of their money is 3 times the average since there are 3 boys\n    equation3 = Eq(raju + vijay + patrick, 507 * 3)\n    \n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_triangle = 3\n    sides_square = 4\n    number_thought = (sides_square * 2) - sides_triangle\n\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n\n    new_pay = original_pay * (1 + increase_percentage)\n\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    num_pages = 0\n    total_digits = 0\n\n    while total_digits < 1014:\n        num_pages += 1\n        total_digits += digits_per_page\n        if num_pages == 10 or num_pages == 100 or num_pages == 1000:\n            digits_per_page += 1\n    \n    return num_pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly * weeks) - (amy_spent_weekly * weeks)\n\n    diff = joanna_total - amy_total\n\n    return diff\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    # After adding the magic number\n    new_first_number = 57 + magic_number\n    new_second_number = 9 + magic_number\n\n    # Setting up the equation according to the problem statement\n    equation = Eq(new_first_number, 4 * new_second_number)\n\n    # Solving for the magic number\n    solutions = solve(equation, magic_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teacher = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways with no restriction\n    total_ways = total_teacher * comb(total_male_students + total_female_students, 4)\n\n    # Ways with no female students\n    ways_no_female = total_teacher * comb(total_male_students, 4)\n\n    # Total ways with at least 1 female student\n    ways_with_female = total_ways - ways_no_female\n\n    return ways_with_female\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum([(10 * i) - (6 + (i - 1) * 10) for i in range(1, 8)]) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, their total age is 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Given values\n    tenth_number = 23\n    fifteenth_number = 38\n\n    # Calculate common difference (step)\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n\n    # Calculate the twelfth number\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n\n    return twelfth_number\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Since the degree of the monomial is the sum of the exponents of all its variables,\n    # and we are given that the degree of -x^3*y^(2n) is 5, we can write the equation:\n    # 3 + 2n = 5\n    # Now we can solve for n:\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n\n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n    total_liquid = total_milk + total_tea\n\n    return total_liquid\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')  # Define the unknown variable\n\n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n\n    # Solve for the price of a book\n    book_cost = solve(equation, book_price)\n\n    return book_cost[0]\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Prices are in pence for simplicity\n    total_cost_pence = 342 * 100 # converting £3.42 to pence\n    \n    # Angela buys two more gummy bears than Bernice\n    equation1 = Eq(angela, bernice + 2)\n    # Bernice buys eight more gummy bears than Candice\n    equation2 = Eq(bernice, candice + 8)\n    # Together they spend 342 pence on gummy bears\n    # The cost of one gummy bear is 6 pence, hence we multiply each by 6\n    equation3 = Eq(6 * angela + 6 * bernice + 6 * candice, total_cost_pence)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given the median value\n    median = 20\n    # Since the median is the middle value and the sequence is sorted, \n    # the median must correspond to the middle term which is the fifth term: n+7\n    # So we solve for n\n    n = median - 7\n    \n    # Now that we have n, we can calculate all the other terms of the sequence\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    # The mean is the sum of all terms divided by the number of terms\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weights of the lightest, middle, and heaviest apples respectively.\n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams.\n    # So, (x + y) / 2 = 70 => x + y = 140 ... (1)\n    \n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams.\n    # So, (y + z) / 2 = 105 => y + z = 210 ... (2)\n    \n    # Subtracting equation (1) from equation (2) gives\n    # (y + z) - (x + y) = 210 - 140 => z - x = 70\n    \n    # The weight difference between the heaviest apple and the lightest apple is 70 grams.\n    return 70\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # If x is the first number, then the three consecutive numbers are x, x+1, and x+2\n    # Their sum is 3x + 3, and it equals 60.\n    # We solve for x and find the largest number by adding 2.\n    x = (60 - 3) // 3\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    total_handshakes = (total_members * (total_members - 1)) // 2\n    missed_handshakes = (non_shaking_groups * (non_shaking_groups - 1)) // 2\n    actual_handshakes = total_handshakes - missed_handshakes\n    \n    return actual_handshakes\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):\n        new_num = int(str(num) + '0')\n        if new_num - num == 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    # the nth term of an arithmetic sequence is given by an = a1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob is always the 3rd animal from any direction, \n    # it means that there are 2 animals in each direction (front, back, left, right).\n    # If we consider the array as a rectangle, Bob is placed on one of its inner cells,\n    # and there are exactly 2 animals between him and any of the 4 sides of the array.\n    \n    # Thus, the short side of the rectangle will have Bob + 2 animals before him + 2 animals after him = 5 animals\n    # The longer side will have the same structure, hence also 5 animals\n    # Since the array is the same from any side, the array must be a square.\n    \n    # Therefore, the total number of animals is 5 animals on one side multiplied by 5 animals on the other side.\n    \n    total_animals = 5 * 5\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of one-cent coins, y the number of two-cent coins, and z the number of five-cent coins.\n    x, y, z = symbols('x y z')\n\n    # 6 one-cent coins have the same height as 5 two-cent coins.\n    equation1 = Eq(6*x, 5*y)\n    # 4 one-cent coins have the same height as 3 five-cent coins.\n    equation2 = Eq(4*x, 3*z)\n    # The total number of coins used is 124.\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate the total value of all these coins in cents.\n    total_value = solutions[x] + 2*solutions[y] + 5*solutions[z]\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of plum trees\n    plum_trees = 41\n    # Distance between each plum tree\n    distance_between_plum = 4\n    # Total length of the stretch with plum trees\n    total_length = (plum_trees - 1) * distance_between_plum\n\n    # Distance between each pine tree\n    distance_between_pine = 5\n    # Number of pine trees\n    pine_trees = (total_length // distance_between_pine) + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11 - 11\n    \n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    \n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        \n        if blue_pens.is_integer() and red_pens.is_integer() and blue_pens + green_pens + red_pens < 100:\n            max_red_pens = max(max_red_pens, red_pens)\n    \n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    spent_on_books = initial_money * 0.25\n    remaining_after_books = initial_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # Since m components were produced last year,\n    # and there are 12 months in a year,\n    # we divide the total production m by 12\n    # to get the number of components produced per month.\n    return m / 12\n\n# Here m should be provided as an input for the function to return the monthly production.\n# m can be assigned a specific value and then passed to the solution function.\n# example usage: ans = solution(1200) to find the monthly production if 1200 components were produced last year"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # The largest six-digit palindrome is 998899\n    # We start from this number and decrement to find the \n    # largest palindrome divisible by 6.\n    for num in range(998899, 100001, -1):  # 100001 is the smallest six-digit palindrome\n        str_num = str(num)\n        if str_num == str_num[::-1]:  # Check if the number is a palindrome\n            if num % 6 == 0:  # Check if the palindrome is divisible by 6\n                return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_at_first = 216\n    girls_at_first = 153\n    children_joined = 37\n\n    total_children_after_an_hour = boys_at_first + girls_at_first + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    \n    # Constructing the equations from the vertical forms\n    # Each digit in the vertically aligned equation can be considered as a single digit multiplication\n    # Example: _ * 2 = _ (last digit) is 8, so it could be 4 * 2 = 8 or 9 * 2 = 18, etc.\n    # We need to find the corresponding values for A that satisfy all equations.\n    \n    # Let's break down the puzzle\n    #      A\n    #  x   2\n    #  ------\n    #    B8  (1st equation, B is another digit, which we don't need to find)\n    #   A0\n    #  ------\n    #  B68  (2nd equation)\n\n    # From the vertical addition in the second equation, we can see that A * 2 must end with 8,\n    # This means A * 2 could be 8 or 18 (because we're looking for a single-digit A)\n    # Hence, A has to be 4 or 9.\n    \n    # We need another condition to determine the exact value of A.\n    # Since (A * 2) + (A * 10) gives the last two digits as 68, we know the ones digit is 8.\n    # The tens digit is the result of the carried over digit from (A * 2) plus (A * 1).\n    # If A were 4, (4 * 2) + (4 * 1) = 8 + 4 = 12. This does not match the 6 in 68.\n    # If A were 9, (9 * 2) + (9 * 1) = 18 + 9 = 27. This matches because the carried over digit from 18 (which is 1) plus 9 equals 10, carrying over 1 to make 6.\n    # Therefore, A is 9.\n    \n    # Let's confirm by constructing the equations and solving:\n    eq1 = Eq(2*A, 10*B + 8)     # B8 is the result of A * 2\n    eq2 = Eq(10*A + (2*A % 10), 60 + (2*A // 10)) # The tens digit (from eq1) + A must end in 6\n\n    ans = solve((eq1, eq2), (A, B))\n\n    return ans[A]\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for pins and needles\n    pins, needles = symbols('pins needles')\n\n    # Paul's initial working: needles_left = 1820/4\n    pauls_needles_left = 1820 / 4\n\n    # Equation 1: Grace had a total number of pins and needles at first\n    equation1 = Eq(pins + needles, 2540)\n\n    # Equation 2: Grace sold 1820 pins\n    equation2 = Eq(pins, 2540 - needles - 1820)\n\n    # Equation 3: Grace sold 4/5 of the needles\n    equation3 = Eq(4/5 * needles, 1820)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (pins, needles))\n\n    # Get the number of needles left after selling\n    needles_left = solutions[needles] - (4/5 * solutions[needles])\n\n    # Check if Paul is correct\n    paul_is_correct = needles_left == pauls_needles_left\n\n    return needles_left if not paul_is_correct else pauls_needles_left\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    required_length_cm = 183  # 1.83 meters converted to centimeters\n    shortage = 10  # 10 centimeters too short\n\n    length_in_garage = required_length_cm - shortage\n    return length_in_garage  # Returning the answer in centimeters\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of marbles Wei Yan had\n    x = symbols('x')\n\n    # Equation based on given information\n    equation = Eq(x + 408, 2 * x * (1 - 3/8) * (1 - 5/7))\n\n    # Solve the equation for x\n    num_marbles = solve(equation, x)\n\n    return num_marbles[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]  # the repeating pattern\n    times_repeated = 41 // len(pattern)  # number of times the full pattern is repeated\n    remainder = 41 % len(pattern)  # numbers left after the last full pattern\n\n    sum_full_patterns = sum(pattern) * times_repeated\n    sum_partial_pattern = sum(pattern[:remainder])\n\n    total_sum = sum_full_patterns + sum_partial_pattern\n\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    fraction = 2 / 7\n    whole_number = 315\n    ans = fraction * whole_number\n    return ans\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11)\n    denominator = (1 / 8 - 1 / 9 + 1 / 10 - 1 / 11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # Divide by 6 to account for permutations of piles\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's age on his 14th birthday\n    brian_age = 14\n    # Father's age on Brian's 14th birthday\n    father_age = 41\n    # The difference in their ages will always remain constant\n    age_difference = father_age - brian_age\n\n    # Starting from the next year, check when their ages are in reverse until Brian reaches the age of his father originally\n    while True:\n        brian_age += 1\n        father_age += 1\n        # Check if Brian's age is the reverse of Father's age\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[-1::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = 654876\n    num2 = 279745\n\n    # Round off each number to the nearest hundred\n    rounded_num1 = round(num1, -2)\n    rounded_num2 = round(num2, -2)\n\n    # Calculate the estimated difference\n    estimated_diff = rounded_num1 - rounded_num2\n\n    return estimated_diff\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_meters = 480\n\n    # Speed = Distance / Time\n    speed_meters_per_second = length_meters / time_seconds\n    \n    # Convert speed to meters per hour (1 m/s = 3.6 km/h)\n    speed_kilometers_per_hour = speed_meters_per_second * 3.6\n    \n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for n in range(2, 9):  # n represents the number of terms in the sum\n        for x1 in range(1, 8):\n            for x2 in range(1, 8):\n                if n == 2:\n                    if x1 + x2 == 8 and len(set([x1, x2])) == n:\n                        count += 1\n                for x3 in range(1, 8):\n                    if n == 3:\n                        if x1 + x2 + x3 == 8 and len(set([x1, x2, x3])) == n:\n                            count += 1\n                    for x4 in range(1, 8):\n                        if n == 4:\n                            if x1 + x2 + x3 + x4 == 8 and len(set([x1, x2, x3, x4])) == n:\n                                count += 1\n                        for x5 in range(1, 8):\n                            if n == 5:\n                                if x1 + x2 + x3 + x4 + x5 == 8 and len(set([x1, x2, x3, x4, x5])) == n:\n                                    count += 1\n                            for x6 in range(1, 8):\n                                if n == 6:\n                                    if x1 + x2 + x3 + x4 + x5 + x6 == 8 and len(set([x1, x2, x3, x4, x5, x6])) == n:\n                                        count += 1\n                                for x7 in range(1, 8):\n                                    if n == 7:\n                                        if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8 and len(set([x1, x2, x3, x4, x5, x6, x7])) == n:\n                                            count += 1\n                                    for x8 in range(1, 8):\n                                        if n == 8:\n                                            if x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 == 8 and len(set([x1, x2, x3, x4, x5, x6, x7, x8])) == n:\n                                                count += 1\n    return count\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return round(cost_for_3_5kg, 2)\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 47 // 2 + 1):\n        for five_p in range(0, 47 // 5 + 1):\n            if 2 * two_p + 5 * five_p == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    result = (2/5) * 30\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    ans = (5 / 8) * 4000\n    return ans\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n    # Subtract 1 from the number of lampposts to calculate the intervals between them\n    number_of_intervals = number_of_lampposts - 1\n\n    length_of_road = number_of_intervals * distance_between_lampposts\n\n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    ans = pastas * sauces * toppings\n    return ans\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # If keys are tested one by one in the worst case scenario,\n    # every key is tried out in each classroom until it fits.\n    # For the first classroom, he could potentially try all 10 keys.\n    # For the second one, in the worst case, he tries 9.\n    # This continues until the last classroom where he does not need to try the key.\n    \n    # He has 10 options for the first classroom, 9 for the second, ..., 1 for the last.\n    # So we sum these up: 10 + 9 + 8 + ... + 1\n    # This is the sum of the first 10 positive integers.\n    \n    # The formula for the sum of the first n positive integers is n*(n+1)/2.\n    total_tries = 10 * (10 + 1) // 2\n\n    return total_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    poppers_needed = total_guests % poppers_per_bag\n    poppers_left = poppers_per_bag - poppers_needed\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    ones_digit = 7\n    for _ in range(1, 2023):\n        ones_digit = (ones_digit * 7) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    # Set the precision for decimal calculations to 9 decimal places\n    getcontext().prec = 9\n\n    # Given values\n    negative_fraction = Decimal('-13.333333333')  # repesentation of -13.3 repeating\n    fraction_repeating = Decimal('4.0909090909')  # repesentation of 4.0 repeating with 09\n    repeating_in_denominator = Decimal('11.111111111')  # representation of 11.1 repeating\n\n    # Calculate the expression\n    numerator = negative_fraction**(Decimal('1')/Decimal('3')) * fraction_repeating**2\n    denominator = Decimal('59.24') - repeating_in_denominator.sqrt()\n    result = numerator / denominator\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create the original long number as a string\n    original_number = ''.join(str(i) for i in range(1, 31))\n    \n    # Since we want the smallest number after removing 46 digits, we should\n    #   start removing from the left (the most significant digits)\n    # We need to keep the smallest digits, which implies keeping as many '1's as possible and hence\n    #   removing digits starting from '9' to '2'.\n    \n    # Initialize the number of digits to remove for each digit from '9' to '2'\n    to_remove = {'9': 46, '8': 0, '7': 0, '6': 0, '5': 0, '4': 0, '3': 0, '2': 0}\n    \n    # Update the number of digits need to be removed as we encounter digits from '2' to '9'\n    for num in original_number:\n        if to_remove.get(num, 0) > 0:\n            to_remove[num] -= 1\n        else:\n            break  # Stop once we have removed the required 46 digits\n\n    # Now remove the counted digits from the original number\n    new_number = list(original_number)\n    for num, count in to_remove.items():\n        i = 0\n        while count > 0:\n            if new_number[i] == num:\n                new_number.pop(i)\n                count -= 1\n            else:\n                i += 1\n    \n    # The result is what's left after removing the digits, converted back to string\n    smallest_number = ''.join(new_number)\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first one in the range 10000-99999)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (the last one in the range 100000-999999)\n    greatest_6_digit_palindrome = 999999\n    \n    # The difference between the two\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_picked = 2\n    num_combinations = comb(num_children, num_picked)\n    return num_combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls_fraction = 3 / 4\n\n    # Total number of members is 4 parts (since 3/4 are girls, then 1/4 must be boys)\n    total_members = boys / (1 - girls_fraction)\n    \n    # Number of girls is three quarters of total members\n    girls = girls_fraction * total_members\n    \n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    left_side = 32 - 15\n    right_side = 12\n    ans = left_side - right_side\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one banana (b) and one apple (a)\n    b, a = symbols('b a')\n\n    # Equation representing Ellie's payment for bananas and apples\n    equation1 = Eq(2*b + 3*a, 1.50)\n\n    # Equation representing Beth's payment for bananas and apples\n    equation2 = Eq(3*b + 2*a, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculate Annabella's payment for 1 banana and 1 apple\n    annabella_payment = solutions[b] + solutions[a]\n\n    return annabella_payment\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years_later = 0\n    \n    while True:\n        total_age = sara_age + lucy_age + 2 * years_later\n        if total_age == 60:\n            break\n        years_later += 1\n    \n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_people_benches = 6\n    three_people_benches = 9\n\n    total_people = two_people_benches * 2 + three_people_benches * 3\n\n    return total_people\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # paying with one £1 coin gives no change, so we start with £16\n    while payment - book_cost < 1:\n        payment += 1  # pay with an additional £1 coin\n    \n    change = payment - book_cost\n    return round(change, 2)  # rounding to 2 decimal places for currency\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(99, 120, 2):\n        total += i * sign\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    from fractions import Fraction\n\n    # 201 and 1/7 is 201 + 1/7\n    whole_part = 201\n    fraction_part = Fraction(1, 7)\n    \n    # 201 1/7 divided by 8\n    total = whole_part + fraction_part\n    divided_result = total / 8\n    \n    # A + 1/7, so need to subtract 1/7 from the result\n    A = divided_result - fraction_part\n    \n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Before the sale, there were 2/5 as many footballs as basketballs\n    equation1 = Eq(footballs, 2/5 * basketballs)\n    \n    # After selling 16 basketballs, there were 2/3 as many footballs as basketballs\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n    \n    # The total number of footballs and basketballs at first\n    total_initial = solutions[footballs] + solutions[basketballs]\n\n    return total_initial\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * total_minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the older and the younger brother\n    older_current, younger_current = symbols('older_current younger_current')\n    \n    # Equation 1: When the age of the older brother was the same as the younger current age, the younger was 12.\n    # older_past = younger_current\n    # younger_past = 12\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    \n    # Equation 2: When the younger becomes as old as the older's current age, the older will be 27.\n    # younger_future = older_current\n    # older_future = 27\n    equation2 = Eq(younger_current + (older_current - younger_current), older_current)\n    equation3 = Eq(older_current + (older_current - younger_current), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona takes out one glove of each color first.\n    gloves_taken = 5\n    \n    # To make sure she has a pair of gloves in the same color,\n    # she needs to take one more glove.\n    gloves_taken += 1\n    \n    return gloves_taken\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n    \n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of stickers Peter had\n    peter = symbols('peter')\n    \n    # Sam had 40 stickers more than Peter initially\n    sam = peter + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_after_give = sam - 0.2 * sam\n    peter_after_receive = peter + 0.2 * sam\n    \n    # Peter then gave 25% of his stickers to Sam\n    peter_after_give = peter_after_receive - 0.25 * peter_after_receive\n    sam_after_receive = sam_after_give + 0.25 * peter_after_receive\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_after_receive - peter_after_give, 96)\n\n    # Solve for the number of stickers Peter had originally\n    solution = solve(equation, peter)\n    return solution[0]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    # Each pair of lines can form a junction, provided the lines are not parallel\n    # For 13 lines, we select 2 out of them to form a junction, which is a combination problem.\n    from math import comb\n    num_lines = 13\n    max_junctions = comb(num_lines, 2)  # C(13, 2)\n\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.1 * original_price\n    new_price = original_price + increase_rate\n    decrease_rate = 0.1 * new_price\n    final_price = new_price - decrease_rate\n    return final_price\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    group_stage_games_per_group = (16 // 4) * ((16 // 4) - 1) // 2\n    group_stage_games_total = group_stage_games_per_group * 4\n    \n    knockout_games = 8 - 1  # top 8 to the winner\n    third_place_game = 1  # game for third place\n    \n    total_games = group_stage_games_total + knockout_games + third_place_game\n    \n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Flora's current age as f and her father's current age as F\n    f, F = symbols('f F')\n\n    # Flora's age 2 years ago would be (f - 2) and her father's age would be (F - 2)\n    # According to the problem, Flora's father's age 2 years ago was 9 times Flora's age at that time.\n    equation = Eq(F - 2, 9 * (f - 2))\n\n    # Flora's current age is given as 5\n    flora_age = 5\n\n    # Now we can solve the equation for F using Flora's current age\n    sol = solve((equation, Eq(f, flora_age)), (F, f))\n\n    # F represents the father's current age\n    return sol[F]\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert total time spent by teacher to hours (as speeds are in km/h)\n    total_time_hours = 7.2 / 60\n    \n    # Relative speed of teacher when going to the front (subtracting student's speed)\n    speed_to_front = 12 - 8\n    \n    # Relative speed of teacher when coming back to the end (adding student's speed)\n    speed_to_end = 12 + 8\n    \n    # Distance covered by the teacher is the sum of distances while going to front and back\n    # Time taken to go to the front = distance to the front / relative speed to front\n    # Time taken to go to the end = distance to the front / relative speed to end\n    # Their sum is the total time spent, which is 7.2 minutes or total_time_hours in hours\n    # Therefore, total_time_hours = (distance to the front / speed_to_front) + (distance to the front / speed_to_end)\n    \n    # We can find distance to the front using the equation:\n    # total_time_hours = distance / speed_to_front + distance / speed_to_end\n    # Solving for distance gives us the length of the line\n    distance = total_time_hours / (1/speed_to_front + 1/speed_to_end)\n\n    ans = distance\n    return ans\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = 2 * i\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1\n    exchange_rate = 1.25\n    value_in_pence = value_in_pounds * exchange_rate * 100\n    return value_in_pence\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Define the variables for slow and fast speed and their corresponding time differences\n    slow_speed = 4  # in km/h\n    fast_speed = 6  # in km/h\n    slow_time_difference = 20 / 60  # 20 minutes late converted to hours\n    fast_time_difference = -10 / 60  # 10 minutes early converted to hours\n\n    # Using the formula of distance (distance = speed * time) and the relationship between distances covered at both speeds\n    # Let the actual time for the journey be 't' hours\n    # Slow speed distance: slow_speed * (t + slow_time_difference)\n    # Fast speed distance: fast_speed * (t - fast_time_difference)\n    # Both distances are equal, so we have the equation:\n    # slow_speed * (t + slow_time_difference) = fast_speed * (t - fast_time_difference)\n\n    # Solving this equation for 't':\n    t = (slow_speed * slow_time_difference - fast_speed * fast_time_difference) / (fast_speed - slow_speed)\n\n    # Now we can calculate the distance using the actual time 't' at either slow or fast speed (we use slow_speed here)\n    distance = slow_speed * (t + slow_time_difference)\n\n    return distance\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candies = 3\n    # Ken took 1 less than half of the remaining pieces, reverse the operation\n    before_ken = (remaining_candies * 2) + 1\n    # Nini took 3 more than half of the remaining pieces, reverse the operation\n    before_nini = (before_ken * 2) - 3\n    # Ivy took 2 less than half of the pieces left, reverse the operation\n    before_ivy = (before_nini * 2) + 2\n    # Eddie took 1 more than half of the pieces, reverse the operation\n    initial_candies = (before_ivy * 2) + 1\n\n    return initial_candies\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    distance_climbed = 7 * 5 + 3  # Climb for 5 days and the different climb on the 6th day\n    remaining_distance = 18 - distance_climbed  # Remaining distance after the 6th day's climb\n    slide_down = 7 - remaining_distance  # Slide down distance is the daily climb minus the remaining distance\n    return slide_down\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    # Addition and subtraction of decimals\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "def solution():\n    from itertools import permutations\n    unique_permutations = set(permutations(\"CYZZ\"))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all measurements to centimeters (since we have 120 cm as one of the options)\n    height_m_in_cm = 5 * 100            # Convert meters to centimeters\n    height_mm_in_cm = 50 / 10           # Convert millimeters to centimeters\n    height_feet_in_cm = 8 * 30.48       # Convert feet to centimeters\n\n    # Check which height is in a plausible range for pupils (usually between 100 cm and 200 cm)\n    plausible_heights = []\n    for height in [height_m_in_cm, 120, height_mm_in_cm, height_feet_in_cm]:\n        if 100 <= height <= 200:\n            plausible_heights.append(height)\n\n    # Since the question asks for which one \"might\" be correct, \n    # we can assume they are looking for plausible heights for a pupil.\n    # We return the plausible height if only one exists\n    return plausible_heights[0] if len(plausible_heights) == 1 else 'None'\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls will be 3x\n    # Each girl took 2 paintbrushes, and each boy took 3 paintbrushes\n    # The total number of paintbrushes taken by girls and boys is 2*(3x) + 3*x = 99\n    # Simplifying, 6x + 3x = 99\n    # Which gives us 9x = 99\n    # Solving for x we get x = 99 / 9 = 11\n    # The number of girls is 3 times the number of boys, so the number of girls is 3 * 11 = 33\n    boys = 99 // 9\n    girls = 3 * boys\n    return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    a_students = 12\n    b_students = 16\n    c_students = 20\n\n    # Find greatest common divisor of the three numbers\n    ans = gcd(gcd(a_students, b_students), c_students)\n    \n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    avg_boys = 74\n    total_participants = total_boys + 12\n    avg_all = 82\n\n    # Total score of boys\n    total_score_boys = total_boys * avg_boys\n    \n    # Total score of all participants\n    total_score_all = total_participants * avg_all\n    \n    # Total score of girls\n    total_score_girls = total_score_all - total_score_boys\n    \n    # Average score of girls\n    avg_girls = total_score_girls / 12\n\n    return avg_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    # The shortest possible length of string given to each of them is the least common multiple (LCM)\n    # of the lengths into which they cut the string (2m, 3m, 5m).\n    alyson_cut = 2\n    clara_cut = 3\n    joyce_cut = 5\n    \n    # Calculate LCM of the cuts\n    ans = lcm(alyson_cut, clara_cut, joyce_cut)\n    return ans\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = 121 - 124  # Calculate the common difference\n    n = 15  # The term number we're looking for\n\n    # Use the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Let N be the total number of fish in the pond\n    # The proportion of caught fish marked to total caught fish should \n    # be roughly equal to the proportion of total marked fish to total fish\n\n    # Applying the capture-recapture method:\n    # (marked fish in first catch / total fish in pond) = (marked fish in second catch / second catch size)\n    # (100 / N) = (25 / 200)\n    \n    # Solve for N:\n    N = 100 * 200 / 25\n    return N\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15\n    days_for_20_rabbits = total_food / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation = Eq(girls, boys + 12)\n    total_trees = Eq(girls + boys, 100)\n\n    solutions = solve((equation, total_trees), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gift\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    start_breakfast_time = wake_up_time + timedelta(minutes=25)\n    end_breakfast_time = start_breakfast_time + timedelta(minutes=10)\n    arrival_time = end_breakfast_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    num_packets = 6\n    total_salt = salt_per_packet * num_packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78, 2):\n        if (77 - two_gram_weights) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_9 = sum(range(1, 10))\n    \n    total_sum_to_20 = sum_to_20**2\n    total_sum_to_9 = sum_to_9**2\n    \n    ans = total_sum_to_20 - total_sum_to_9\n    \n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_a_dollar = 4\n    ans = total_amount * quarters_in_a_dollar\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores_for_5_assignments = 90 * 5\n    scores_of_4_assignments = 96 + 85 + 89 + 92\n    score_of_5th_assignment = total_scores_for_5_assignments - scores_of_4_assignments\n    return score_of_5th_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 4 == 3) and (i % 5 == 4) and (i % 7 == 6):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    total_pupils = 1690\n    more_boys_than_girls = 90\n\n    girls = (total_pupils - more_boys_than_girls) // 2\n    boys = girls + more_boys_than_girls\n\n    # Ratio of girls who can swim to those who can not\n    ratio_girls_swim = 31\n    ratio_girls_not_swim = 49\n\n    total_girls_ratio = ratio_girls_swim + ratio_girls_not_swim\n    girls_swim = (girls * ratio_girls_swim) // total_girls_ratio\n    girls_not_swim = girls - girls_swim\n\n    # Boys who can swim\n    boys_not_swim = boys - 120\n    boys_swim = boys_not_swim - 120\n\n    # Total pupils who can not swim\n    total_not_swim = girls_not_swim + boys_not_swim\n\n    return total_not_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure that we have at least 5 different colors with at least 10 pencils for each color,\n    # we will draw the worst-case scenario:\n    # We draw all pencils from 4 colors completely, which gives us 4 * 75 pencils.\n    # Then, we draw 10 pencils from the fifth color.\n    # This will ensure that we have 10 pencils from at least 5 different colors.\n\n    total_pencils_from_4_colors = 4 * 75\n    additional_pencils_from_5th_color = 10\n\n    # Calculate the minimum number of pencils needed to be drawn\n    min_pencils_needed = total_pencils_from_4_colors + additional_pencils_from_5th_color\n\n    return min_pencils_needed\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity = 34\n    coaches = (pupils + capacity - 1) // capacity\n    return coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    # Before Santa gave sweets\n    equation1 = Eq(pip / bud, 4/7)\n\n    # After Santa gave sweets\n    equation2 = Eq(pip / (bud + 5), 8/15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204) - 4\n    plant_spaces = 116 - 4\n    distance = perimeter / plant_spaces\n\n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5**20 % 10\n    last_digit_7 = 7**30 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import primerange\n\n    primes_list = list(primerange(1, 46))\n\n    for C in primes_list:\n        for B in primes_list:\n            if B - 1 == C + 7:\n                for A in primes_list:\n                    if A != B and A != C and 2 * C == A + B:\n                        return A + B + C\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    length1 = 39\n    length2 = 52\n    \n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A represent the score of one A grade\n    # Let B represent the score of one B grade\n    A, B = symbols('A B')\n\n    # Simon's score equation: 4A + 4B = 36\n    simon_eq = Eq(4 * A + 4 * B, 36)\n    \n    # Peter's score equation: 2A + 3B = 22\n    peter_eq = Eq(2 * A + 3 * B, 22)\n\n    # Solve the system of equations for A and B\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    # Calculate the score for 3 A grades and 5 B grades\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # If Joe shares the chocolate bar with one friend,\n    # it means there are two people in total to share the chocolate.\n    total_people = 2\n    \n    # The chocolate bar has 16 squares.\n    total_squares = 16\n    \n    # Joe's share would be half of the total squares.\n    joe_share = total_squares / total_people\n    \n    return int(joe_share)\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assign the values based on the clues provided\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime nor composite (excluding 0)\n    D = A - 2  # 2 less than the smallest prime number\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 8  # greatest factor of 8 (excluding 8 itself, so it would be 4, but since 4 is taken by B, G is 1)\n    H = 6  # lowest multiple of 6\n    \n    # Convert these individual numbers to a single number string\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    \n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the quantities we want to find\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n    \n    # Marry and Alexis's initial ratio\n    eq1 = Eq(marry_initial / alexis_initial, 7 / 5)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_final = marry_initial - 0.20 * marry_initial\n    alexis_final = alexis_initial - 0.20 * alexis_initial\n    charlotte_final = charlotte_initial + 0.20 * marry_initial + 0.20 * alexis_initial\n    \n    # Charlotte's stickers increased by 80%\n    eq2 = Eq(charlotte_final, charlotte_initial * 1.80)\n    \n    # Marry had 20 stickers more than Charlotte in the end\n    eq3 = Eq(marry_final, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (marry_initial, alexis_initial, charlotte_initial))\n    \n    # Return the solution for Alexis's initial number of stickers\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n    \n    return people_on_train_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_in_a_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    family_size = 3  # Eddie, mom, and dad\n    total_people = 5  # Assuming it's Eddie, mom, dad, and two more people\n\n    # Eddie and his parents can be considered as one unit.\n    # We first find the number of ways to arrange this unit with the other 2 people.\n    # This is the same as arranging 3 \"units\" (the family unit + 2 more individuals).\n    arrangements_of_units = math.factorial(total_people - family_size + 1)\n\n    # Now find the number of ways to arrange Eddie, mom, and dad within their unit.\n    arrangements_within_family = math.factorial(family_size)\n\n    # The total number of different ways is the product of the two.\n    return arrangements_of_units * arrangements_within_family\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands_units in range(10):\n        for hundreds in range(10):\n            for tens in range(10):\n                # Construct Pip's number with thousands and units being the same\n                pips_number = int(f\"{thousands_units}{hundreds}{tens}{thousands_units}\")\n                # Reverse tens and units to get Bud's number\n                buds_number = int(f\"{thousands_units}{tens}{hundreds}{thousands_units}\")\n                # Check if their sum is 5510\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Given: 25 cows for 10 days, or 15 cows for 20 days\n    # Let's find the total amount of grass (in cow-days)\n    total_grass = 25 * 10  # This is the same for 15 cows for 20 days\n\n    # Now we want to find out how many cows can be fed for 50 days\n    # Amount of grass needed for one cow for 50 days is 50 cow-days\n    # So we divide the total grass by the grass needed per cow for 50 days\n    cows_for_50_days = total_grass / 50\n\n    return int(cows_for_50_days)\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # The most number of days means he reads the least pages each day starting from 1\n    # This forms an arithmetic progression starting with a_1 = 1\n    # The sum of the arithmetic progression has to be 95 (The total number of pages).\n    # Use the formula for the sum of the first n terms of an arithmetic progression: n/2 * (2*a_1 + (n-1)*d)\n    # which simplifies to n/2 * (2 + (n-1)), since a_1 = 1 and difference d = 1\n    # n/2 * (1 + n) = 95, 1*n + n^2 = 190, n^2 + n - 190 = 0\n    # Solving the quadratic equation n^2 + n - 190 = 0 for n\n\n    n = 1\n    while (n * (1 + n)) / 2 <= 95:\n        n += 1\n    return n - 1  # Subtract 1 because we exceed the total number of pages by adding 1 extra day\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    actual_minuend = 166\n    \n    correct_difference = actual_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = 3 * first_day\n    third_day = (5 / 3) * second_day\n\n    total_sold = first_day + second_day + third_day\n\n    return total_sold\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio equation: oranges/lemons = 3/5\n    original_ratio = Eq(oranges/lemons, 3/5)\n\n    # After selling 48 oranges, the new ratio: (oranges - 48)/lemons = 1/2\n    new_ratio = Eq((oranges - 48)/lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    # Extract the number of lemons\n    num_lemons = solutions[lemons]\n\n    return num_lemons\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    # Calculate price after discount\n    price_after_discount = original_price * (1 - discount)\n\n    # Apply member discount\n    final_price_before_tax = price_after_discount - member_discount\n\n    # Apply sales tax\n    final_price = final_price_before_tax * (1 + sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    total_cakes = 250 / flour_per_cake\n    return int(total_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    total_work = 1\n    ivy_rate = total_work / 24\n    kevin_rate = total_work / 20\n\n    # Work done together until Kevin takes off\n    work_by_both = ivy_rate * 12 + kevin_rate * (12 - x)\n    work_done = total_work - work_by_both\n\n    # Since work is finished by the end of the 12th day, work_done must be 0\n    # solve for x:\n    x = (ivy_rate * 12) / kevin_rate\n\n    return x\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Consider the 3 maths books as one unit and the English books also as one unit\n    # So we have in total 8 - 3 - 2 + 2 units (including the units of math and English books), which equals 5 units\n    units = 5\n    \n    # Now calculate the permutations of these 5 units\n    units_permutations = factorial(units)\n    \n    # Also, calculate the permutations of the 3 math books among themselves\n    math_books_permutations = factorial(3)\n    \n    # And the permutations of the 2 English books among themselves\n    english_books_permutations = factorial(2)\n    \n    # Since the units can be arranged in multiple ways and within those units \n    # math and English books can also be arranged, multiply the permutations\n    total_permutations = units_permutations * math_books_permutations * english_books_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilogram = 0.0025\n    gram = kilogram * 1000\n    return gram\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Initial relationship between Ophelia and Penelope's diamonds\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # Penelope bought 21 more diamonds\n    penelope_new = penelope + 21\n    \n    # New relationship after Penelope bought more diamonds\n    equation2 = Eq(penelope_new, 5/8 * ophelia)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Since there are only 2 colors, after picking 3 socks,\n    # Cindy is guaranteed to have at least one pair of the same color\n    # by the pigeonhole principle.\n    return 3\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange\n\n    # The number of ways to arrange 'r' items from 'n' options is given by P(n, r) = n! / (n-r)!\n    ans = factorial(n) // factorial(n - r)\n    \n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    initial_price = 0.10\n    final_price = 1.00\n\n    increase = final_price - initial_price\n    percentage_increase = (increase / initial_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    cost_of_bracelet = 80\n    gst_rate = 0.08\n    total_cost = cost_of_bracelet * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # Equation 1: Total number of bicycles and tricycles is 300\n    equation1 = Eq(b + t, 300)\n    \n    # Equation 2: The total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    # Each tricycle has 3 wheels and each bicycle has 2 wheels\n    equation2 = Eq(3 * t, 2 * b + 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_factor\n\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # The divisor must be at least one more than remainder for a valid division\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # There are 2 grey rabbits in the pattern. If there are 14 grey rabbits,\n    # there must be 14 / 2 = 7 complete patterns.\n    num_patterns = 14 // 2\n\n    # Each pattern consists of 1 black, 2 white, and 2 grey rabbits, summing up to 5.\n    rabbits_per_pattern = 1 + 2 + 2\n\n    # The total number of rabbits for the complete patterns is:\n    total_rabbits = num_patterns * rabbits_per_pattern\n\n    # If there are any additional grey rabbits (remainder),\n    # we need to consider the remaining colors as well.\n    grey_remainder = 14 % 2\n    if grey_remainder != 0:\n        # If there's one more grey rabbit, the preceding colors would be\n        # 1 black and 2 white, hence 3 more rabbits.\n        total_rabbits += 3 + grey_remainder\n\n    return total_rabbits\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    a = 2015\n    b = 2016\n    c = 2014\n    ans = (a ** 2) - (b * c)\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    chocolate = chocolate_with_foil + neither_chocolate_nor_foil - (foil_wrappers - chocolate_with_foil)\n\n    return chocolate\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, s be the original speed, and t be the original time\n    d, s, t = symbols('d s t')\n\n    # If the cyclist increases his speed by 25%, new speed is 1.25s\n    # Time taken will then be d/(1.25s) and decrease by 20 minutes, so original time t - 20/60\n    equation1 = Eq(d / (1.25 * s), t - 20/60)\n\n    # If the cyclist decreases his speed by 45, new speed is s - 45\n    # Time taken will then be d / (s - 45) and increases by 75%, so original time t + 0.75t\n    equation2 = Eq(d / (s - 45), t + 0.75 * t)\n\n    # Since both equations equal the distance, we set them equal to each other.\n    equation3 = Eq(d / (1.25 * s), d / (s - 45))\n\n    # We also know that the distance equals the original speed times the original time.\n    equation4 = Eq(d, s * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (d, s, t))\n\n    # Filtering non-physical solutions, distance should be positive\n    solution_set = [sol for sol in solutions if sol[d] > 0 and sol[s] > 0 and sol[t] > 0]\n\n    # There might be more than one solution theoretically, so we return the first one's distance\n    if solution_set:\n        ans = solution_set[0][d]\n        return ans\n    else:\n        raise ValueError(\"No physical solution found for the equations.\") # In case no positive solution is found\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimals = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimals, 1)\n    tongtong_answer = 9764.0\n    return rounded_number if rounded_number != tongtong_answer else tongtong_answer\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    equation = Eq((initial_crystals / 2) - 10 + 20 - 14, 35)\n    \n    solutions = solve(equation, initial_crystals)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of pairs of 2 and 5 multiplied together\n    # since 10 = 2 * 5 creates a zero. We have 15 fives and 10 twos, so the number of zeros is the minimum of the count\n    # of 5s and 2s, which in this case is 10.\n\n    num_fives = 15\n    num_twos = 10\n    num_zeros = min(num_fives, num_twos)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of carrots Anna originally had\n    # Then Olaf originally had 3x carrots\n    # After giving away 335 carrots, Olaf has 3x - 335 carrots\n    # At that time, Anna has 2 times the carrots Olaf has, which gives us the equation: x + 335 = 2(3x - 335)\n\n    x = symbols('x')\n    equation = Eq(x + 335, 2 * (3 * x - 335))\n\n    # Solving for x gives us the original amount of carrots Anna had\n    anna_carrots = solve(equation, x)[0]\n\n    return anna_carrots\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    permuts = permutations(digits, len(digits))\n    \n    # Each permutation of the digits has 4 possible places to put the decimal point\n    count = sum(1 for _ in permuts) * 4\n    \n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_Bala = 2  # Ali and Bala themselves\n\n    total_people = people_in_front_of_Ali + Ali_Bala + people_behind_of_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    result = 257 * 37\n    return result\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = 2 / 3 * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    price_per_plant_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100\n    num_plants = budget_pence // price_per_plant_pence\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Defining the equations based on the sum and the difference of the numbers\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The smaller number will be the second element in the solutions tuple\n    return solutions[y]\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # The blue Fords are the remnants after removing black Dodges from the total Ford count.\n    # This is because all Fords are either blue or black and all black Fords are not Dodges.\n    blue_fords = fords - (total_cars - blue_cars - black_dodges)\n\n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start from the smallest composite number, which is 4.\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if A, B, C, D are composite numbers by checking if they have divisors other than 1 and themselves.\n        if (any(A % i == 0 for i in range(2, A)) and \n            any(B % i == 0 for i in range(2, B)) and \n            any(C % i == 0 for i in range(2, C)) and \n            any(D % i == 0 for i in range(2, D))):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Using the Pigeonhole Principle, in the worst-case scenario, the magician would \n    # pick all balls of the first color, and then all balls of the second color without \n    # getting a ball of the third color.\n    # Therefore, the minimum number of picks to ensure getting at least one of each color is:\n    # the total number of blue and red balls (since they have the least numbers) plus one \n    # for the guaranteed pick of a green ball.\n\n    blue_balls = 8\n    red_balls = 10\n    # green_balls = 13 (not needed for calculation as it's the largest number)\n\n    min_picks = blue_balls + red_balls + 1  # Add one to guarantee a green ball\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return ans\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 1000):  # arbitrary upper limit to ensure we find the solution\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_income = 120\n    days_worked = 5\n\n    total_income = daily_income * days_worked\n\n    return total_income\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # minimum 1 apple for each child subtracted from total apples\n    remaining_apples = total_apples - children\n    # distribute the remaining apples equally to each child\n    apples_per_child = remaining_apples // children\n    # one child gets the remaining apples\n    max_apples = apples_per_child + 1\n    return max_apples\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = 2\n    total_score = 125\n\n    # Assume all answers are correct first\n    max_correct_score = total_questions * correct_mark\n    \n    # Find out the excess score if all answers were correct\n    excess_score = max_correct_score - total_score\n    \n    # Calculate wrong answers based on the excess score and deduction per wrong answer\n    wrong_answers = excess_score // (correct_mark + wrong_mark)\n    \n    # Number of correct answers\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3 / 8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "import math\n\ndef solution():\n    return math.gcd(math.gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # Total numbers on clock\n    total_numbers = 12\n    # Total count\n    total_count = 30\n    # Ending number is 10\n    end_number = 10\n\n    # Since the clock is periodic with a period of 12,\n    # we can find the starting number modulo 12\n    # Calculate the starting number, using the formula:\n    # start_number = (end_number - (total_count % total_numbers)) % total_numbers\n    start_number = (end_number - (total_count % total_numbers)) % total_numbers\n    if start_number == 0:\n        start_number = total_numbers\n    \n    return start_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        if (int(f\"296{digit}12\") % 9) == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n\n    for i in range(2, 2011):\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n\n    ans = sequence[2010]\n    return ans\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        sum_of_series = sum(range(23, 2 * k, 2))\n        if (sum_of_series ** 0.5).is_integer():\n            m = int(sum_of_series ** 0.5)\n            break\n        k += 1\n\n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove in the first 2 hours.\n    initial_distance = 2 * 40  # Speed * Time\n\n    # Calculate total distance driven.\n    total_distance = initial_distance + 280  # Initial distance + remaining distance\n\n    # Calculate the time taken to drive the remaining 280 km.\n    remaining_time = 280 / 70  # Distance / Speed\n\n    # Calculate total time taken for the whole trip.\n    total_time = 2 + remaining_time  # Initial 2 hours + remaining time\n\n    # Calculate the average speed for the whole trip.\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of cards Alan originally has be denoted by 'alan'\n    alan, bob = symbols('alan bob')\n\n    # Equation representing the relationship between Alan and Bob's cards\n    equation1 = Eq(bob - alan, 15)\n\n    # Equation representing the scenario after Colin gives Bob 25 cards\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_now = (original_amount + (saved_per_day * days_saved)) - (lent_to_brother + spent_on_snacks)\n\n    return amount_now\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n    \n    # Equation representing the remaining oil in the big bucket\n    equation1 = Eq(89 - x, 12 * (45 - x))\n    \n    # Solve for x\n    sold_amount = solve(equation1, x)\n    \n    return sold_amount[0]\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    total_cost = 10 * banana_price + 10 * apple_price\n\n    return total_cost\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    total_visitors = 100  # Assuming a base of 100 for percentage calculations\n    men = 37  # 37% of the visitors were men\n\n    women_and_children = total_visitors - men  # The rest were women and children\n    ratio_sum = 4 + 5  # The sum of the ratio parts for women and children\n\n    # Calculate the number of units for children and women based on the ratio\n    children = (women_and_children / ratio_sum) * 4\n    women = (women_and_children / ratio_sum) * 5\n\n    # Adjust the ratio to account for the 12 extra men compared to children\n    children_with_extra_men = children + 12\n\n    # Normalize the results to account for the base of 100 visitors used for percentage calculations\n    normalization_factor = men / children_with_extra_men\n    actual_women = women * normalization_factor  # Find the actual number of women\n\n    return int(actual_women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    \n    # Probability none of the trains are late\n    prob_none_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    \n    # Probability at least one train is late is 1 minus the probability that neither train is late\n    prob_at_least_one_late = 1 - prob_none_late\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_received_from_mother = 100 - (lena_had - lena_gave_away)\n    \n    return lena_received_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # from 10 to 99 inclusive\n    without_six = 8 * 8  # for each place, there are 8 possibilities excluding 0 and 6\n    at_least_one_six = total_two_digit_numbers - without_six\n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    days_off = (end_date - start_date).days + 1  # add 1 to include the start date\n\n    return days_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # Since each pair of lines intersects at one point,\n    # the maximum number of intersection points is\n    # the number of ways to choose 2 out of 13 lines.\n    # This can be calculated using combinations (n choose k).\n    from math import comb\n    num_lines = 13\n    max_intersections = comb(num_lines, 2)\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    ans = 9744 // 7\n    return ans\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_of_5_pow = 5  # The last digit of any power of 5 is 5\n    last_digit_of_7_pow = pow(7, 20, 10)  # Calculate the last digit of 7^20 using modulo 10\n    \n    ans = (last_digit_of_5_pow * last_digit_of_7_pow) % 10  # Multiply the last digits and find the last digit of the result\n    return ans\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # Let x be the total number of watermelons Helen had initially.\n    remaining_after_first_day = 2/3  # After selling 1/3, she's left with 2/3.\n    remaining_after_second_day = 2/5  # After selling 3/5 of the remainder, she's left with 2/5.\n    \n    # So, we have the equation: (2/3 * 2/5 * x) = 48\n    x = 48 / (remaining_after_first_day * remaining_after_second_day)\n\n    return x\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given the diameter of the semicircles is AB = CD = 14 cm, the radius of each semicircle is 7 cm\n    radius_semicircle = 7  # radius of the semicircles\n\n    # The perimeter of each quadrant is half the circumference of a full circle plus the 2 radii\n    # For one quadrant: (1/2) * Circumference_full_circle + 2 * radius\n    # Perimeter of 2 quadrants = 2 * ((1/2) * 2 * pi * radius + 2 * radius)\n    # = 2 * (pi * radius + 2 * radius)\n    # Using the given value of pi\n    pi = 22 / 7\n\n    perimeter_2_quadrants = 2 * (pi * radius_semicircle + 2 * radius_semicircle)\n\n    # The perimeter of each semicircle is half the circumference of a full circle\n    # For one semicircle: (1/2) * Circumference_full_circle\n    # Perimeter of 2 semicircles = 2 * ((1/2) * 2 * pi * radius)\n    # = 2 * pi * radius\n    perimeter_2_semicircles = 2 * pi * radius_semicircle\n\n    # The total perimeter is the sum of the perimeters of the 2 quadrants and 2 semicircles\n    total_perimeter = perimeter_2_quadrants + perimeter_2_semicircles\n\n    return total_perimeter\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for i in range(10, 100):  # Last two digits range from 10 to 99\n        number = 600 + i  # Forming the three digit number\n        if number % lcm == 0:  # Checking divisibility by LCM\n            return number\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    time_to_meet = distance / (speed_a + speed_b)\n\n    return time_to_meet\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    pasta_price = 95  # in pence\n    rice_price = symbols('rice_price')\n\n    # Equation: 6 packets of pasta and 5 packets of rice cost £11.70\n    equation = Eq(6 * pasta_price + 5 * rice_price, 1170)  # We use pence for the total amount as well\n\n    # Solve the equation\n    solutions = solve(equation, rice_price)\n\n    # Get the price of rice in pence\n    rice_price_in_pence = solutions[rice_price]\n\n    return rice_price_in_pence\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start with the target fraction\n    target_fraction = 13/10\n\n    # Subtract 1 to find the fractional part\n    frac_part = target_fraction - 1\n\n    # Since the fractional part is the reciprocal of the expression,\n    # take the reciprocal to find the value of a + 1/(b + 1/c)\n    a_expr = 1/frac_part\n\n    # Separate integer part 'a' and the fractional part\n    a = int(a_expr)\n    frac_part_a = a_expr - a\n\n    # Take the reciprocal to find the value of b + 1/c\n    b_expr = 1/frac_part_a\n\n    # Separate integer part 'b' and the fractional part\n    b = int(b_expr)\n    frac_part_b = b_expr - b\n\n    # Take the reciprocal of the fractional part of b to find c\n    c = int(1/frac_part_b)\n\n    # Compute a + 2b + 3c\n    result = a + 2 * b + 3 * c\n    \n    return result\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # total_work represents the entire work of painting the house, set as 1 (whole work done)\n    total_work = 1\n    \n    # work_rate_energetic represents the work rate of the energetic decorator per day\n    work_rate_energetic = total_work / 20\n    # Since both decorators working together finish in 12 days, we can find their combined work rate\n    combined_work_rate = total_work / 12\n    \n    # The work rate of the lazy decorator is the combined work rate minus the work rate of the energetic decorator\n    work_rate_lazy = combined_work_rate - work_rate_energetic\n    \n    # Finally, we find the number of days it would take the lazy decorator to paint the house on his own\n    days_lazy = total_work / work_rate_lazy\n    \n    return int(days_lazy)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Total sum of 15 consecutive numbers\n    total_sum = 1650\n    # Since the numbers are consecutive, the middle number is the average\n    middle_number = total_sum / 15\n    # The smallest number is 7 less than the middle, \n    # and the largest is 7 more than the middle, since there are 15 numbers\n    smallest_number = middle_number - 7\n    largest_number = middle_number + 7\n    # Sum of the smallest and largest\n    sum_of_smallest_and_largest = smallest_number + largest_number\n\n    return sum_of_smallest_and_largest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while not (pies % 4 == 0 and pies % 6 == 0):\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / boys_to_girls_ratio)\n\n    return int(girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        oddtastic = True\n        for digit in str(number):\n            if int(digit) % 2 == 0:\n                oddtastic = False\n                break\n        if oddtastic:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n    number_of_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / number_of_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a divided by 8 gives remainder 6, we can represent a as 8k + 6\n    # Similarly, since b divided by 8 gives remainder 7, we can represent b as 8m + 7\n    # Adding these two we get: (8k + 6) + (8m + 7)\n    # This simplifies to: 8(k + m + 1) + (6 + 7 - 8)\n    # That is: 8(k + m + 1) + 5\n    # The remainder when (a + b) is divided by 8 is 5\n\n    return 5\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # The worst case happens when every time he tries a key, it doesn't fit the room, until the last key,\n    # which by the process of elimination, has to be the correct key.\n    # Thus for each room he tries at most 10 incorrect keys before finding the correct one.\n\n    # Number of rooms\n    rooms = 11\n\n    # Number of keys tried per room in the worst case scenario (except the last one)\n    # For the last room, he doesn't need to try any keys because the last key has to fit\n    keys_tried_per_room = 10\n\n    # Total number of tries in the worst case scenario\n    max_tries = rooms * keys_tried_per_room\n\n    return max_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    total_digits = 0\n\n    while True:\n        next_number_digits = len(str(current_number))\n        if total_digits + next_number_digits >= 2019:\n            break\n        total_digits += next_number_digits\n        current_number += 1\n\n    remaining_digits = 2019 - total_digits\n    return int(str(current_number)[remaining_digits - 1])\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Solving the following congruences:\n    # n ≡ 1 (mod 2)\n    # n ≡ 2 (mod 3)\n    # n ≡ 3 (mod 4)\n    # n ≡ 4 (mod 5)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Use the Chinese Remainder Theorem to find the smallest n\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    digits_of_2 = 3\n    digits_of_3 = 2\n    \n    # Calculating permutations while considering the repetition of digits\n    permutations = factorial(total_digits) // (factorial(digits_of_2) * factorial(digits_of_3))\n\n    # Number of permutations where the first digit is zero (invalid for four-digit number)\n    # In this case, there are no permutations with first digit zero because we have no zero digit\n\n    return permutations\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms\n    basket_mass_kg = 500 / 1000  # Basket mass converted from grams to kilograms\n    kitten_mass_kg = 0.6  # Mass of each kitten in kilograms\n    num_kittens = 4  # Number of kittens\n\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + kitten_mass_kg * num_kittens)  # Mass of the cat\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # Mary has three brothers and four sisters\n    mary_and_siblings = siblings + 1  # Including Mary\n    eggs_bought = mary_and_siblings * siblings  # Each buys one egg for each sibling\n\n    return eggs_bought\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Following the pattern in the sequence, we can see that the difference between the numbers increases by one each time:\n    # 6 - 3 = 3 (difference is 3)\n    # 10 - 6 = 4 (difference is 4)\n    # 15 - 10 = 5 (difference is 5)\n    # It's a second-order difference, with each difference increasing by 1.\n    # So the next difference should be 6 (5 + 1).\n    last_number = 15\n    next_difference = 6\n    next_number = last_number + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    departure_time = (7, 50)  # 7:50 AM\n    arrival_time = (8, 40)    # 8:40 AM\n\n    # Calculate the total minutes for departure and arrival\n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n\n    # Calculate the difference in minutes\n    journey_duration_minutes = arrival_minutes - departure_minutes\n\n    # Convert minutes to hours and minutes\n    hours = journey_duration_minutes // 60\n    minutes = journey_duration_minutes % 60\n\n    return (hours, minutes)\n\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    money_after_dvd = initial_money - (initial_money / 6) - 5\n    money_after_magazines = money_after_dvd - (money_after_dvd * 2 / 5) - 12\n\n    equation = Eq(money_after_magazines, 24)\n    initial_money_solution = solve(equation, initial_money)\n\n    return initial_money_solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 80 / (1 - 3/5)\n    original_amount = remaining_after_handbag / (1 - 1/5)\n    return original_amount\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_in_bottle = 5\n    oil_left = total_oil - oil_in_bottle\n    tanks = 6\n\n    oil_in_each_tank = oil_left / tanks\n\n    return oil_in_each_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    johnny_current_age = 8\n    grandpa_current_age = 72\n    years = 0\n    \n    while True:\n        years += 1\n        johnny_future_age = johnny_current_age + years\n        grandpa_future_age = grandpa_current_age + years\n        if grandpa_future_age == 5 * johnny_future_age:\n            break\n\n    return years\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    # Pip is in front of Bud, so we count Bud's position from the front\n    total_children = pip_position + children_between + bud_position_from_end\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards\n    # Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal = 2000\n    amount_after_3_years = 2519.42\n    r = symbols('r')\n    \n    # A = P(1 + r/n)^(nt), as n=1 because it's compounded annually\n    # therefore A = P(1 + r)^3\n    equation = Eq(principal * (1 + r)**3, amount_after_3_years)\n    \n    # Solve for r\n    interest_rate = solve(equation, r)[0]\n    \n    # Convert it to percentage and round to nearest tenth\n    interest_rate_percentage = round(interest_rate * 100, 1)\n    \n    return interest_rate_percentage\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If Janice gave 20 oranges to each elderly, 10 will not receive any oranges.\n    # There is not enough information to determine how many elderly she is serving,\n    # However, we can set up an equation based on the facts.\n    \n    # Let e be the number of elderly, and o be the total number of oranges.\n    # From the first piece of information, we know that (e - 10) * 20 = o. (1)\n    \n    # From the second piece of information, if she gave 16 oranges to each elderly,\n    # she would have enough oranges to pack 25 boxes, each with 2 dozen oranges.\n    # 25 boxes * 2 dozen (24) oranges = 25 * 24 * 2\n    # Thus, e * 16 = 25 * 24 * 2. (2)\n    \n    # We can solve these two equations to find the value of e and o.\n    \n    from sympy import symbols, solve\n\n    e, o = symbols('e o')\n    equation1 = (e - 10) * 20 - o\n    equation2 = e * 16 - 25 * 24 * 2\n    \n    solutions = solve((equation1, equation2), (e, o))\n    \n    # Now, we have the number of elderly and the total number of oranges.\n    # To divide all oranges equally, we simply divide the number of oranges by the number of elderly.\n    \n    num_oranges_per_elderly = solutions[o] / solutions[e]\n\n    return int(num_oranges_per_elderly)\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m, n, x = symbols('m n x')  # Define the symbols for the equation\n\n    # Define the custom operation function\n    def delta_operation(m, n):\n        return 5*m + 3*n\n\n    # Solve the equation x ~Δ~ 9 = 37\n    equation = Eq(delta_operation(x, 9), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # To be sure that Sheila gets 4 balls of the same color, we need to consider\n    # the worst-case scenario. This will happen when she picks the balls in such\n    # a way that she picks as many different colors before she gets 4 of the same.\n\n    # Let's assume she picks 3 balls of each color first because that's the maximum\n    # number of balls she can pick without getting 4 of the same color.\n    max_blue = 3\n    max_orange = 3\n    max_yellow = 2  # 2 yellow balls in total, so she picks both.\n\n    # Now, no matter what color of ball she picks next, she will have 4 balls of that color.\n    # Therefore, we add one more ball to the count to make sure we have 4 of the same color.\n    next_ball = 1\n\n    # Total number of balls she must take out is the sum of the maximum balls\n    # she can pick from each color plus one.\n    return max_blue + max_orange + max_yellow + next_ball\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31  # Weight of full wheelbarrow\n    part_weight = 27  # Weight after removing 1/5 of the soil\n\n    removed_soil_weight = full_weight - part_weight  # Weight of the removed soil\n    soil_weight = removed_soil_weight * 5  # Weight of the full soil\n\n    empty_weight = full_weight - soil_weight  # Weight of empty wheelbarrow\n\n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    equation1 = Eq(tim / 6, 3 * tyler / 8)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    total_cookies = solutions[tim] + solutions[tyler]\n    \n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for the three types of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Set up equations based on the given information\n    equation1 = Eq(chocolate, vanilla + 72)  # She had 72 more chocolate cupcakes than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)  # She had 36 lesser blueberry cupcakes than vanilla\n    \n    # After selling some of each, the remaining total should be 427 cupcakes\n    remaining_cupcakes = Eq((chocolate - chocolate / 6) +\n                            (vanilla - 2 * vanilla / 3) +\n                            (blueberry - 7 * blueberry / 9), 427)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, remaining_cupcakes), (chocolate, vanilla, blueberry))\n    \n    # Calculate how many chocolate cupcakes Sally sold (1/6 of the total chocolate cupcakes)\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n    \n    # Find the least common multiple of the two time intervals\n    interval = lcm(24, 30)\n    \n    # Transform the time interval into hours and minutes\n    hours = interval // 60\n    minutes = interval % 60\n    \n    # The starting time is 9:00 am\n    start_hour = 9\n    start_minute = 0\n    \n    # Calculate the time when trains next leave both platforms at the same time\n    next_leave_hour = start_hour + hours\n    next_leave_minute = start_minute + minutes\n    \n    # Normalize the minutes and hours\n    if next_leave_minute >= 60:\n        next_leave_hour += next_leave_minute // 60\n        next_leave_minute = next_leave_minute % 60\n    \n    # Since the question asks for the time, we return it as a string in \"HH:MM\" format\n    ans = f\"{next_leave_hour % 24:02d}:{next_leave_minute:02d}\"\n    \n    return ans\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, w, p, b = symbols('r w p b')\n    # Original ratio of red to white balls is 3:2\n    equation1 = Eq(r/w, 3/2)\n    # After Pip puts some red balls, the ratio becomes 5:3\n    equation2 = Eq((r+p)/w, 5/3)\n    # After Bud puts white balls, the ratio becomes 5:4\n    equation3 = Eq((r+p)/(w+b), 5/4)\n    # Bud puts 100 more balls than Pip\n    equation4 = Eq(b, p + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n    \n    # Extract the number of white balls from the solutions\n    ans = solutions[w]\n    return ans\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Considering the remainders when 'a' and 'b' are divided by 8    \n    a_remainder = 6\n    b_remainder = 7\n    \n    # Summing the two remainders\n    sum_remainders = a_remainder + b_remainder\n    \n    # Calculating the remainder when the sum is divided by 8\n    final_remainder = sum_remainders % 8\n    \n    return final_remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # There's one desk for Jessica and one for Judy, hence `2`\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 2\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count_of_6 = 0\n    for i in range(2, 57):\n        count_of_6 += str(i).count('6')\n    return count_of_6\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbols for the number of apples each person has\n    agnes, george, jack = symbols('agnes george jack')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(agnes, george - 5)          # Agnes has 5 fewer apples than George\n    equation2 = Eq(jack, 3 * george)           # Jack has thrice as many apples as George\n    equation3 = Eq(agnes + george + jack, 55)  # Total number of apples is 55\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the original average weight of the group\n    # Let n be the number of people in the group before Aaron joined\n    from sympy import symbols, Eq, solve\n    \n    x, n = symbols('x n')\n    \n    # Equation 1: Total weight of the group before Aaron was n * x\n    # Equation 2: After Aaron joined, the new average is 61 and total weight is (n + 1) * 61\n    # Equation 3: The total weight increased by Aaron's weight, so (n + 1) * 61 = n * x + 45\n    equation1 = Eq((n + 1) * 61, n * x + 45)\n    \n    # Equation 4: Ben joins after Aaron and the new average is 62\n    # Equation 5: The total weight now is (n + 2) * 62\n    # Equation 6: The total weight increased by Ben's weight, so (n + 2) * 62 = (n + 1) * 61 + 71\n    equation2 = Eq((n + 2) * 62, (n + 1) * 61 + 71)\n    \n    # Solve the system of equations for x and n\n    solutions = solve((equation1, equation2), (x, n))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_white = 1991\n    total_black = 1000\n\n    # Initially, Bag A has 1991 white + 1000 black = 2991 balls\n    # After 2989 balls are taken out, there are 2991 - 2989 = 2 balls left.\n    balls_left = total_white + total_black - 2989\n\n    # Since at every step, the difference between white and black balls stays odd,\n    # and initially, it is 1991 - 1000 = 991 (an odd number),\n    # after 2989 steps, the difference must be 1 (an odd number), with 1 more white ball than black balls.\n    # One of the two balls left must be white.\n    # Thus, 1 white ball will be left in Bag A.\n    \n    return balls_left, \"white\"\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        # skipping cases where multiplication leads with 0\n        if a == 0 or d == 0:\n            continue\n        first = 10*a + b\n        second = 10*c + d\n        product = first * second\n        # Check if the product has the digit e at the end\n        if product % 10 == e:\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work = initial_people * initial_hours\n    required_people = work / target_hours\n\n    return int(required_people)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_first_n_numbers = n * (n + 1) // 2\n    return sum_first_n_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert metres to centimetres\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    \n    # Since we are to split 5 as sum of at least two non-zero natural numbers,\n    # we will iterate through all possible pairs, triples, and so on.\n    \n    # Split into two parts: 1+4, 2+3 (and reverse is the same for this problem)\n    count += 2\n    \n    # Split into three parts: 1+1+3 (three permutations), 1+2+2 (three permutations)\n    count += 3 + 3\n    \n    # Split into four parts only has one possibility: 1+1+1+2\n    count += 1\n    \n    # Five parts (i.e., 1+1+1+1+1) doesn't contribute to the combinations as \n    # they are all the same number and does not satisfy the condition of being\n    # different non-zero natural numbers.\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):  # 100s digit can be from 1 to 9\n        units_digit = hundreds_digit + 2  # Units digit is 2 more than 100s\n        if units_digit <= 9:  # Units digit must be a valid digit (0 to 9)\n            for tens_digit in range(0, 10):  # Tens digit can be anything from 0 to 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    total_mass = 91.2\n    # Let x be the mass of his daughter, then Mr Han's mass is 3x.\n    # According to the problem, x + 3x = total_mass.\n    # That simplifies to 4x = total_mass.\n    x = total_mass / 4\n    mr_han_mass = 3 * x\n    return mr_han_mass\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)  # Calculate the remaining after giving to her children\n    initial_chocolates = remaining_after_students / (1 - 0.8)  # Calculate the initial amount before giving to students\n\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Assuming there are 3 students A, B, C and A has the most votes\n    # We want to find the least number of votes A can have, which means we need to maximize votes for B and C\n    # Since A has more votes than anyone else, A must have more votes than the average.\n    total_votes = 25\n    # If A has the least number of votes that is still more than anyone else,\n    # then the other two candidates must have equal or less number of votes,\n    # which means A must have at least one more vote than the average.\n    # Dividing total votes by 3 (students) and rounding up since we can't have a fraction of a vote\n    average_votes = total_votes // 3\n    # In order for A to have more votes than anyone else, A needs at least one more vote than the average.\n    samantha_least_votes = average_votes + 1\n    return samantha_least_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_types = (1, 2, 5)\n    totals = set()\n    \n    for i in coin_types:\n        for j in coin_types:\n            for k in coin_types:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    principal = 6000\n    amount = 8029.35\n    years = 5\n\n    equation = Eq(principal * (1 + x / 100)**years, amount)\n    interest_rate = solve(equation, x)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n\n    # 1-9 each use 1 digit, total of 9 digits used\n    if digits_used + 9 < 291:\n        pages += 9\n        digits_used += 9\n\n    # 10-99 each use 2 digits, total 180 digits used for these 90 pages\n    if digits_used + 180 < 291:\n        pages += 90\n        digits_used += 180\n\n    # 100-999 each use 3 digits, find the remaining number of pages\n    remaining_digits = 291 - digits_used\n    remaining_pages = remaining_digits // 3\n    pages += remaining_pages\n\n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_spent = 1500\n    spent_on_chairs = 360\n\n    percent_spent_on_chairs = (spent_on_chairs / total_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages in the magazine\n    x = symbols('x')\n    \n    # Let y be the number of pages Clarice has already read\n    y = symbols('y')\n    \n    # According to the problem, (number of pages read):(number of pages not read) = 1:5\n    # Thus, (x - y):y = 5:1\n    # Or 5y = x - y\n    equation1 = Eq(5 * y, x - y)\n\n    # If she reads another 80 pages, pages read becomes 70% of total\n    # Thus, y + 80 = 0.7 * x\n    equation2 = Eq(y + 80, 0.7 * x)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    for cc_correct in range(11):\n        cc_points = cc_correct * 10 - (10 - cc_correct) * 5\n        vivi_points = cc_points + 15\n        if cc_points + vivi_points == 95:\n            return cc_correct\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_needed = flour_per_person * 18\n    return flour_needed\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_price = 6.34\n    child_price = 4.75\n    adults = 2\n    children = 3\n    total_cost = (adults * adult_price) + (children * child_price)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = \"2581953752\"\n    min_sum = float('inf')  # Initialize to infinity\n    # Since we are cutting the strip, we need to consider all possible places to cut\n    # We exclude the first and last index since there has to be at least one digit in each number\n    for i in range(1, len(num_str)-1):\n        for j in range(i+1, len(num_str)):\n            # Split the number at two different positions (i, j)\n            part1 = int(num_str[:i])\n            part2 = int(num_str[i:j])\n            part3 = int(num_str[j:])\n            # Calculate the sum of the three numbers\n            current_sum = part1 + part2 + part3\n            # Check if the current sum is the minimum found so far\n            if current_sum < min_sum:\n                min_sum = current_sum\n                \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    # let the two numbers be x and y\n    x, y = symbols('x y')\n\n    # original sum of the numbers\n    original_sum = Eq(x + y, 11.63)\n\n    # Oliver's sum when the decimal is shifted\n    shifted_sum = Eq(x + y / 10, 5.87)\n\n    # solving the equations\n    solutions = solve((original_sum, shifted_sum), (x, y))\n\n    # one of the numbers (x or y could be chosen)\n    number = solutions[x]\n\n    # one hundred times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    ans = 7000000 / mm_in_m\n    return ans\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Let the common multiple for the ratio between science club and literature club be x\n    # Then the number of members in science club = 9 * x\n    # And the number of members in the literature club = 10 * x\n    \n    # Similarly, let the common multiple for the ratio between literature club and math club be y\n    # Then the number of members in the literature club = 5 * y\n    # And the number of members in the math club = 7 * y\n    \n    # Since the literature club members are the same in two ratios, we can equate them:\n    # 10 * x = 5 * y\n    # So, y = 2 * x\n    \n    # Total members in all clubs is 99\n    # 9 * x + 10 * x + 7 * y = 99\n    # But y = 2 * x, substituting gives us:\n    # 9 * x + 10 * x + 7 * 2 * x = 99\n    # 9 * x + 10 * x + 14 * x = 99\n    # 33 * x = 99\n    # x = 99 / 33\n    x = 99 / 33\n    \n    # Number of members in the literature club\n    literature_members = 10 * x\n    # Number of members in the math club\n    math_members = 7 * (2 * x) # Since y = 2 * x\n    \n    # Calculate the difference\n    difference = math_members - literature_members\n    \n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = smallest_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Worst case scenario without getting 3 marbles of the same color:\n    # taking 2 blue, 2 yellow, and 1 red = 5 marbles.\n    # To ensure getting 3 of the same color, we need to take one more out.\n    # That will guarantee 3 marbles of at least one color.\n    marbles_to_ensure_three_same_color = 5 + 1\n\n    return marbles_to_ensure_three_same_color\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n\n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother - melissa, 32 - 8)\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation2 = Eq(mother, 3 * melissa)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # flowers on each side excluding the corners\n    flowers_per_side = 6 - 2  # excluding the corner flowers\n\n    # total flowers on the 4 sides excluding the corners\n    total_flowers_excluding_corners = flowers_per_side * 4\n\n    # corner flowers\n    corner_flowers = 4\n\n    # total flowers\n    total_flowers = total_flowers_excluding_corners + corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece_1 = 4.8\n    piece_2 = 2.73\n    piece_3 = original_length - (piece_1 + piece_2)\n\n    min_piece = min(piece_1, piece_2, piece_3)\n    max_piece = max(piece_1, piece_2, piece_3)\n\n    return max_piece - min_piece\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # From the problem, we know that Li Yan spent 1/3 of her money on a book\n    # Let's say the total money she had initially is 'total_money'\n    # The cost of the book is then (1/3) * total_money\n\n    # Then she spent 1/2 of the remainder (which is now 2/3 of total_money) on a bag\n    # The cost of the bag is then (1/2) * (2/3) * total_money = (1/3) * total_money\n\n    # Combined cost of the book and the bag is (1/3)*total_money + (1/3)*total_money = (2/3)*total_money\n\n    # According to the problem, the combined cost is $132, which gives us the equation\n    # (2/3)*total_money = 132\n\n    # Solve for total_money\n    total_money = (132 * 3) / 2\n\n    # Thomas's solution is incorrect as he added fractions incorrectly\n    return total_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let vb be the price of a volleyball\n    # Then, the price of a basketball is vb + 10\n    vb = symbols('vb')\n    \n    # 5 basketballs and 6 volleyballs cost $325\n    # 5*(vb+10) + 6*vb = 325\n    total_cost_eq = Eq(5*(vb + 10) + 6*vb, 325)\n\n    # Solve for the price of a volleyball\n    vb_price = solve(total_cost_eq, vb)[0]\n\n    # Calculate the price of a basketball\n    bb_price = vb_price + 10\n\n    return bb_price\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    pattern_sum = sum([int(digit) for digit in pattern])\n    full_patterns = 47 // len(pattern)\n    partial_pattern_len = 47 % len(pattern)\n    partial_sum = sum([int(digit) for digit in pattern[:partial_pattern_len]])\n    total_sum = pattern_sum * full_patterns + partial_sum\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    total_cost = cost_per_bottle * 9\n    return total_cost\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n\n    # Let the number of boys be b and girls be g\n    # b + g = total_pupils\n    # (avg_boys_pencils * b + avg_girls_pencils * g) / total_pupils = avg_pencils\n    # avg_boys_pencils * b + avg_girls_pencils * (total_pupils - b) = avg_pencils * total_pupils\n\n    # Solve for b\n    b = (avg_pencils * total_pupils - avg_girls_pencils * total_pupils) / (avg_boys_pencils - avg_girls_pencils)\n\n    return int(b)\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(25 + 1):\n        incorrect = 25 - correct\n        if 4 * correct - incorrect == 61:\n            # Since Jack answered more questions correctly than Johnson,\n            # it will stop once the first valid combination is found.\n            return incorrect\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Fixed cost per cupcake for the first 20\n    cost_per_cupcake = 4.5\n    # Shipping and handling cost\n    shipping_handling = 12\n    # Discount rate for the cupcakes over 20\n    discount_rate = 0.2\n    # Total bill\n    total_bill = 120\n\n    # The number of cupcakes if 20 or fewer are ordered\n    cupcakes_20_or_fewer = (total_bill - shipping_handling) / cost_per_cupcake\n    \n    if cupcakes_20_or_fewer <= 20:\n        return int(cupcakes_20_or_fewer)\n    \n    # If more than 20 cupcakes were ordered\n    # Calculate the cost for first 20 cupcakes plus shipping\n    cost_first_20 = 20 * cost_per_cupcake + shipping_handling\n    \n    # The cost after discount for additional cupcakes\n    cost_per_additional_cupcake = cost_per_cupcake * (1 - discount_rate)\n    \n    # The number of additional cupcakes ordered\n    additional_cupcakes = (total_bill - cost_first_20) / cost_per_additional_cupcake\n    \n    # Total number of cupcakes ordered\n    total_cupcakes = 20 + additional_cupcakes\n    \n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of pigs and goats\n    pigs, goats = symbols('pigs goats')\n\n    # First equation: 3 pigs and 1 goat cost £440\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    # Second equation: 1 pig and 2 goats cost £280\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    # Calculate the total cost for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds_to_pence = 1.28 * 100\n    pence = 57\n    total_pence = pounds_to_pence + pence\n    ans = total_pence / 100\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution_A = solve(equation, A)\n\n    return solution_A[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_place_from_back = 12\n    total_people = people_in_front_of_rose + rose_place_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    energetic_rate = 1 / 10\n    combined_rate = 1 / 6\n\n    lazy = symbols('lazy')\n    lazy_rate = 1 / lazy\n\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n    \n    lazy_days = solve(equation, lazy)[0]\n\n    return lazy_days\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    \n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    return (52 - 10) / 2\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    # Since each brother has at least two books, we distribute those first.\n    # So each brother gets 2 books and 4 books remain to be distributed.\n    \n    # Now the problem is reduced to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 4 where x1, x2, x3 >= 0\n    # This is a problem of distributing 4 identical items to 3 different groups.\n\n    # We can use the \"Stars and Bars\" combinatorial method to find this.\n    # The number of ways to distribute n identical items to k different groups is (n+k-1) choose (k-1)\n    \n    from math import comb\n\n    # Number of identical items (remaining books)\n    n = 4\n    # Number of different groups (brothers)\n    k = 3\n    \n    # Calculate the number of ways using the combinatorial formula\n    number_of_ways = comb(n + k - 1, k - 1)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Assume the worst case for each color drawn, we want 4 different colors\n    # Draw all 12 red marbles: 12 draws\n    # Next, draw all 9 blue marbles: 12 + 9 = 21\n    # At this point, no matter what we draw, we will have a different color\n    # Draw 1 yellow marble: 21 + 1 = 22\n    # At this point, we have 3 colors (red, blue, yellow)\n    # To guarantee the fourth color, we need to draw one more marble\n    # Add 1 more marble to ensure getting the last color (any will work): 22 + 1 = 23\n    \n    ans = 23\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number = '5' * 19 + '0' + '9' * 19\n    for digit in range(10):\n        modified_number = int(number[:19] + str(digit) + number[20:])\n        if modified_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since Tom is the 10th from the shortest, the maximum height for Tom would be\n    # if the remaining children after him are all taller than him.\n    # We start from the last child who is 131 cm tall and go down 21 steps\n    # because there are 31 - 10 = 21 children after Tom.\n    max_height_tom = 131 - 21\n    return max_height_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == 1 + ones):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return len([i for i in range(10, 100) if i % 10 == 6])\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    increase_amount = 14.4\n\n    last_purchase = current_purchase - increase_amount\n    total_spent = current_purchase + last_purchase\n\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the initial number of storybooks Anthea has\n    # After giving 4 storybooks: Jason has 30 - 4 and Anthea has x + 4\n    # We are given that both will have the same number of storybooks, so:\n    # 30 - 4 = x + 4\n    # Solving for x gives us:\n    x = 30 - 4 - 4\n\n    # The difference between Jason and Anthea at first is:\n    # 30 (Jason's storybooks) - x (Anthea's storybooks)\n    difference = 30 - x\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    # The sequence begins with 3, 10 and each following term is the sum of the previous two terms.\n    # Because we are asked for the remainder when dividing by 3, we can consider just the remainders of each term.\n    # Let's find the pattern of remainders when each term is divided by 3.\n\n    first = 3 % 3  # The remainder of the first term\n    second = 10 % 3  # The remainder of the second term\n\n    # We initialize the first two remainders\n    remainders = [first, second]\n\n    # We know remainders will repeat every few terms because the sequence is deterministic and we are modding by a fixed number 3.\n    # Once we detect a repeat, we've found our cycle.\n    while True:\n        # The new remainder is the sum of the last two remainders, mod 3\n        next_remainder = (remainders[-1] + remainders[-2]) % 3\n        remainders.append(next_remainder)\n\n        # If we have found a repeating pattern, then we break out of the loop as we can infer the pattern for 2023rd term from this cycle\n        if remainders[-1] == second and remainders[-2] == first:\n            break\n            \n    # We remove the last two elements of remainders because they represent the start of the next cycle\n    remainders.pop()\n    remainders.pop()\n\n    # Now we know the cycle length and can find the remainder corresponding to the 2023rd term in the sequence\n    # We subtract 1 because our cycle starts with the 3rd term, so the index is offset by 2\n    remainder_index = (2023 - 1) % len(remainders)\n\n    # The remainder of the 2023rd term is the remainder at remainder_index\n    ans = remainders[remainder_index]\n\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((208 - magic_number), 9 * (136 - magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    gifts = 5 * 4  # LCM of 5 and 4\n    remainder_5 = 3\n    remainder_4 = 9\n\n    # Naive method to find a common number that leaves the same remainder\n    for student_count in range(1, gifts):\n        if ((gifts * student_count + remainder_5) % 5 == 0) and ((gifts * student_count + remainder_4) % 4 == 0):\n            return student_count\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    total_factors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_factors += 1\n    return total_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's amount of money\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Alan's money to Bella's money is in the ratio 4:3\n    equation1 = Eq(alan/bella, 4/3)\n\n    # Alan has £20 more than Chloe\n    equation2 = Eq(alan, chloe + 20)\n\n    # Alan, Bella and Chloe have a total of £200\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83 * 2\n    total_price = box_price + bar_price\n    paid = 20\n    change = paid - total_price\n    return round(change, 2)  # Rounding to 2 decimal points as it's dealing with currency\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Lily and her mother's positions are fixed,\n    # so we need to arrange the other three family members.\n    # The number of ways to arrange n items is n!\n    from math import factorial\n\n    # There are 3 family members to arrange.\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_perms = list(permutations(range(1, 9), 2))\n    # Filter based on each condition\n\n    # In the smallest number, the ones digit is twice the tens digit.\n    all_perms = [p for p in all_perms if p[1] == 2 * p[0]]\n    \n    # In the largest number, the sum of ones and tens digits is 9.\n    largest = [p for p in all_perms if sum(p) == 9]\n\n    if largest:\n        largest = max(largest)\n        all_perms.remove(largest)\n\n    # In the second largest number, the tens digit is 5 more than the ones digit.\n    second_largest = [p for p in all_perms if p[0] == p[1] + 5]\n\n    if second_largest:\n        second_largest = max(second_largest)\n        all_perms.remove(second_largest)\n\n    # There is only 1 odd number among these 4 numbers.\n    all_perms = [p for p in all_perms if p[0] % 2 == 0 or p[1] % 2 == 0]\n\n    # Only one is odd so we select the third number (second smallest)\n    # because the largest has already been removed\n    if len(all_perms) == 1:\n        second_smallest = all_perms[0]\n    else:\n        # Sort remaining numbers from smallest to largest\n        all_perms.sort()\n        second_smallest = all_perms[1]  # second smallest number\n\n    # Convert tuple to a two-digit number\n    ans = second_smallest[0] * 10 + second_smallest[1]\n    \n    return ans\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    # In an arithmetic sequence, the n-th term a_n can be expressed as:\n    # a_n = a_1 + (n - 1)d, where a_1 is the first term, and d is the common difference.\n    # We have the following:\n    a_1 = 7          # first term\n    d = 4            # common difference\n\n    # We also have the last term a_n (99 in this case) and we need to find n:\n    # 99 = 7 + (n - 1)*4\n    # (n - 1)*4 = 92\n    # n - 1 = 92 / 4\n    # n = 92 / 4 + 1\n    # n = 23 + 1\n    # n = 24 (This is the total number of rows since we started counting from 1)\n    n = (99 - a_1) / d + 1\n\n    # The sum S_n of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (a_1 + a_n), where a_n is the nth term.\n    # Plugging in the values we have:\n    # S_n = 24/2 * (7 + 99)\n    # S_n = 12 * 106\n    # S_n = 1272\n    # There are 1272 seats altogether in the theatre.\n    \n    S_n = n/2 * (a_1 + 99)\n    return int(S_n)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if (num % 5 == 4) and (num % 7 == 4):\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining_visitors = visitors - children\n    men = 1/2 * remaining_visitors\n\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sam, peter = symbols('sam peter')\n\n    # Equation based on the problem statement\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - sam*0.20 + peter*0.25, peter + sam*0.20 - peter*0.25 + 96)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # The sum of the first three numbers\n    sum_first_three = 120 * 3\n    \n    # The sum of four numbers (with the fourth number included)\n    sum_four_numbers = 150 * 4\n    \n    # Calculate the fourth number\n    fourth_number = sum_four_numbers - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15  # upper limit of the sum\n    sum_of_squares = (n*(n+1)*(2*n+1)) // 6  # sum of squares formula for 1 to n\n    subtract_sum = ((5-1)*(5)*(2*(5-1)+1)) // 6  # sum of squares formula for 1 to 4 to subtract\n    correct_answer = sum_of_squares - subtract_sum\n    is_kimmy_correct = (correct_answer == 1240)\n    return correct_answer if not is_kimmy_correct else \"Kimmy is correct\"\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly\n    # Then (20-x) is the number of questions she answered incorrectly\n    # The total points is then 5x (points from correct answers) minus\n    # 2(20-x) (the points lost from incorrect answers)\n    # The total points should be equal to 51, according to the problem statement\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # equation representing the problem \n    equation = Eq(5*x - 2*(20-x), 51)\n    \n    # solving the equation for x\n    correct_answers = solve(equation, x)\n    \n    return correct_answers[0]  # the number of correct questions\n\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n\n    # Amy spent 6/11 of her initial amount and then $5\n    after_highlighters = initial_amount - (6/11) * initial_amount - 5\n\n    # Amy then spent 3/10 of the remainder and then $12\n    after_pens = after_highlighters - (3/10) * after_highlighters - 12\n\n    # Finally, Amy has $30 left\n    equation = Eq(after_pens, 30)\n\n    # Solve for the initial amount\n    solution = solve(equation, initial_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n\n    # Olivia mistakenly subtracted 70 instead of the actual subtrahend 75.\n    # So the actual minuend (number to be subtracted from) is:\n    actual_minuend = incorrect_subtrahend + incorrect_result\n\n    # The correct subtrahend is 75.\n    correct_subtrahend = 75\n\n    # Now, subtract the correct subtrahend from the actual minuend to get the correct result.\n    correct_result = actual_minuend - correct_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    # Find the LCM of 3 and 4 to get the interval at which customers receive both a pen and a file\n    lcm = 12  # LCM of 3 and 4\n\n    # Calculate how many customers receive both a pen and a file\n    num_customers = 40 // lcm\n\n    return num_customers\n\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_of_one_apple = 1 / 9  # kg\n    apples_in_one_cake = 4\n    total_mass_used = 8  # kg\n    total_apples_used = total_mass_used / mass_of_one_apple\n    number_of_cakes = total_apples_used / apples_in_one_cake\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    total = 45\n    result = 35\n    fraction_of_total = result / total\n    numerator = fraction_of_total * 9\n    \n    return int(numerator)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n\n    circumference = distance_between_seeds * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    original_pieces = 10\n    total_pieces_now = 16\n\n    # If x pieces were cut into three parts, each piece becomes 3 pieces,\n    # which adds an extra 2 pieces per cut piece to the original count.\n    # The equation becomes original_pieces + x * 2 = total_pieces_now\n    \n    x = (total_pieces_now - original_pieces) // 2\n\n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    average_boys = 10\n    total_participants = 12 + 8\n    average_total = 14\n\n    sum_total = total_participants * average_total\n    sum_boys = total_boys * average_boys\n    sum_girls = sum_total - sum_boys\n    average_girls = sum_girls / 8\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    students = 0\n    while True:\n        initial_square = (students ** 0.5)\n        if initial_square.is_integer() and (((initial_square + 1) ** 2) - students == 25):\n            return students\n        students += 1\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Since each envelope has the same number of postcards and she divides\n    # initially into 5 envelopes, the number of postcards per envelope can be\n    # found by finding a multiple of 5 that is at least 50, since we know she\n    # starts with 50 postcards.\n\n    # We can establish a variable for the number of postcards per envelope.\n    postcards_per_envelope = None\n    \n    # We set a starting point for the loop, which is the minimum number of\n    # postcards she could have received from her friends. This would be the next\n    # multiple of 5 above the original 50.\n    initial_postcards = 50\n    while initial_postcards % 5 != 0 or initial_postcards == 50:\n        initial_postcards += 1\n    postcards_per_envelope = initial_postcards // 5\n    \n    # Since she later divides the new postcards into another 2 envelopes, then\n    # the total number of envelopes is now 5 + 2 = 7.\n\n    # Therefore, the total number of postcards must be a multiple of 7 and greater\n    # than the original 50. Since the postcard count per envelope is fixed, we\n    # find the next multiple of 7 that is a multiple of the postcards_per_envelope.\n\n    total_postcards = postcards_per_envelope * 7\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    possible_coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Pence values\n    total_change = 250  # £2.50 in pence\n\n    # Check only pairs of coins (since there's exactly one other of the same value)\n    for smallest_coin in possible_coins:\n        for second_smallest_coin in possible_coins:\n            if smallest_coin != second_smallest_coin:\n                remaining_change = total_change - 2*(smallest_coin + second_smallest_coin)\n                if remaining_change > 0 and remaining_change % (2 * max(smallest_coin, second_smallest_coin)) == 0:\n                    return smallest_coin\n    return None\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of cookies Jolie baked and sold\n    total_cookies, sold_cookies = symbols('total_cookies sold_cookies')\n    \n    # Equation for the 3/5 of the cookies being burnt\n    burnt_cookies = total_cookies * 3/5\n    \n    # Equation for the 75% of the remaining cookies being sold\n    remaining_cookies = total_cookies - burnt_cookies\n    equation_sold = Eq(sold_cookies, remaining_cookies * 75/100)\n    \n    # The number of cookies burnt was 42 more than what was sold\n    equation_burnt_sold = Eq(burnt_cookies, sold_cookies + 42)\n    \n    # Solve the system of equations\n    solutions = solve((equation_sold, equation_burnt_sold), (total_cookies, sold_cookies))\n    \n    # Return the total number of cookies\n    return solutions[total_cookies]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    grams_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * grams_needed\n    \n    return total_cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Loop through the possible digits in the tens column\n    for digit in range(1, 10):\n        # Construct the original number with 9 in the units column\n        original_number = digit * 10 + 9\n        \n        # Construct the new number by moving 9 to the beginning\n        new_number = int(str(9) + str(digit))\n        \n        # Check if the new number is four times the original number\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        number = int(f'107{Y}')\n        if number % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    num_students = 6  # Laura, Rita, and other four students\n    laura_position_ways = 1  # Laura must be in front, so only 1 way\n    rita_positions_ways = num_students - 2  # Rita cannot be at the end, so only 6 - 2 positions are available\n    other_students_positions_ways = factorial(num_students - 2)  # Other students can be in any order\n\n    total_ways = laura_position_ways * rita_positions_ways * other_students_positions_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let x be the length of the road\n    # Kevin's and Jerry's speeds must be in the same ratio as the distances they travel\n    kevin_speed = 80  # mph\n    # Jerry travels 3/7 of the road, which means Kevin travels 4/7 of the road\n    # Their speeds are therefore in the ratio 3:4\n    # If Jerry travels 3/7 of the road, and does this distance in 1 hour:\n    # his speed is (3/7) * x = 5/2 * x (since he travels the whole road in 2/5 hours)\n    # This gives us the equation: (3/7 * x) / 1 hour = (5/2 * x)\n    # We can find x with direct proportion: (3/7) / (5/2) = (kevin_speed) / (4/7 * x)\n    # Solving for x, we get x = (3/7) / (5/2) * (4/7 * kevin_speed)\n    \n    jerry_to_kevin_speed_ratio = (3/7) / (5/2)\n    x = (4/7) * kevin_speed / jerry_to_kevin_speed_ratio\n    \n    return x\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def custom_operation(a, b):\n        return (a + b) * a\n\n    ans = custom_operation(4, 7)\n\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount = 0.5  # 50% discount\n    extra_discount = 0.2  # Additional 20% discount for buying at least 5 items\n\n    discounted_price = regular_price * (1 - discount)\n    final_price = discounted_price * (1 - extra_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    buzz, jessie = symbols('buzz jessie')\n  \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4/7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    takeoff_time_singapore = datetime(2023, 8, 24, 5, 0)\n    landing_time_london = datetime(2023, 8, 24, 11, 0)\n\n    # Calculate the time difference as if both times were in the same timezone\n    flight_duration = landing_time_london - takeoff_time_singapore\n\n    # Adjust for the timezone difference, Singapore is 7 hours ahead\n    flight_duration_adjusted = flight_duration + timedelta(hours=7)\n\n    return flight_duration_adjusted\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    # Equation representing the total number of pencils\n    total_pencils = Eq(boys*20 + girls*60, 35*40)\n  \n    # Solve the equation\n    num_boys = solve(total_pencils, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability of Sally winning a game\n    p_win = 0.3\n    # Probability of Sally drawing a game\n    p_draw = 0.1\n    # Probability of Sally losing a game, which is 1 minus the probability of winning or drawing\n    p_lose = 1 - (p_win + p_draw)\n\n    # Probability of Sally winning exactly one game:\n    # It can happen in two scenarios: \n    # 1. Sally wins the first game and loses or draws the second game\n    # 2. Sally loses or draws the first game and wins the second game\n    \n    # Using the law of addition for probabilities for mutually exclusive events:\n    # P(Win first, Not win second) + P(Not win first, Win second)\n\n    prob_exactly_one_win = (p_win * (p_lose + p_draw)) + ((p_lose + p_draw) * p_win)\n\n    return prob_exactly_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Start by finding a number that when divided by 4 leaves a remainder of 32\n    # and when divided by 7 leaves a remainder of 3.\n    # These are of the form 4x + 32 and 7y + 3, respectively.\n    # Since we are looking for the same quantity of lollipops in both cases,\n    # we equate 4x + 32 to 7y + 3 and solve for a common solution.\n\n    x = 0  # Start with x=0 and increase until we find a common solution.\n\n    while True:\n        lollipops_with_4 = 4 * x + 32  # Calculate lollipops when divided by 4\n        remainder_with_7 = lollipops_with_4 % 7  # Calculate remainder when divided by 7\n\n        if remainder_with_7 == 3:\n            # If remainder is 3, we've found the solution\n            ans = lollipops_with_4\n            break\n\n        x += 1  # Increment x and try again\n\n    return ans\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Since each of the numbers gives the same remainder R when divided by D,\n    # their differences must be multiples of D.\n    # Therefore, D must divide the greatest common divisor (gcd) of the differences\n    # of the pairs of numbers.\n    from math import gcd\n    \n    a, b, c = 2010, 2377, 3111\n    \n    # Calculate the differences\n    diff1 = b - a\n    diff2 = c - b\n    diff3 = c - a\n    \n    # Find the gcd of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n    \n    # The largest possible value of D is the gcd of the differences\n    # The remainder R when any of the given numbers is divided by the gcd is the same\n    # Therefore, R is any of the given numbers modulo the gcd_diff.\n    R = a % gcd_diff\n    \n    # The largest possible value of D+R would then be\n    ans = gcd_diff + R\n    \n    return ans\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1/13).split('.')[1]  # Get the repeating decimal part\n    length_of_cycle = len(decimal)     # Find the length of the repeating cycle\n    position = (2012 - 1) % length_of_cycle  # Calculate the position within the cycle\n    return int(decimal[position])  # Return the digit at the required position\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    ans = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a, b = 4, 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of cards Eddi and Wiya originally had\n    eddi, wiya = symbols('eddi wiya')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq(eddi / wiya, 8 / 7)         # Original ratio of Eddi's cards to Wiya's cards\n    equation2 = Eq((eddi - 4) / (wiya + 4), 18 / 17)   # Ratio after Eddi gives Wiya 4 cards\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    # The solution will have Eddi's original number of cards\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Ratio of red marbles to blue marbles is 5:6\n    red_marbles = (5/6) * blue_marbles\n    # Red marbles are twice the number of green marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016.875\n    num4 = 11/3\n    num5 = 2017 + 1/3\n    num6 = 17\n    num7 = 3 + 23/32\n    \n    # Perform the calculation as per the given expression\n    result = ((num1 * num2 - num3 * num4) / ((num5 - num3) * num6)) * num7\n\n    return result\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n\n    # Time taken for rabbit to sleep (it starts after 10 minutes into the race)\n    sleep_time = 215  # min\n\n    # Rabbit runs for 10 minutes before sleeping\n    distance_before_sleep = rabbit_speed * 10  # m\n\n    # Turtle's distance after sleep_time + 10 minutes\n    turtle_distance = turtle_speed * (sleep_time + 10)  # m\n\n    # Rabbit runs again after sleep_time + 10 minutes, how long it takes to finish the race?\n    remaining_distance_for_rabbit = 6990 - distance_before_sleep\n    time_after_sleep_for_rabbit = remaining_distance_for_rabbit / rabbit_speed\n\n    # Total time rabbit takes to finish the race\n    total_rabbit_time = 10 + sleep_time + time_after_sleep_for_rabbit\n\n    # Turtle's distance after total_rabbit_time\n    final_turtle_distance = turtle_speed * total_rabbit_time\n\n    # Who finishes first and distance between them\n    if final_turtle_distance >= 6990:\n        winner = \"turtle\"\n        distance_between = final_turtle_distance - 6990\n    else:\n        winner = \"rabbit\"\n        distance_between = 6990 - final_turtle_distance\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let the number of students in Class A be A and in Class B be B.\n    # A = B + 47\n    # After moving x students from Class A to Class B, we want A - x to be 9 more than B + x.\n    # Hence, A - x = B + x + 9.\n    # Substituting A from the first equation, we get:\n    # B + 47 - x = B + x + 9\n    # Solving for x:\n    x = (47 - 9) // 2  # We use integer division since the number of students must be an integer\n\n    return x\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - (piece1 + piece2)\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 30):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            current_product = A * B * C\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # According to the problem, we have two equations\n    # y - x = 57 (1)\n    # x + y = 77 (2)\n    # Adding both equations, we get 2y = 134\n    # Dividing by 2, we get y = 67\n    # Substituting the value of y in equation (2), we get x = 77 - y = 77 - 67\n    x = 77 - 67\n    # The value of the smaller number x is what we need to find\n    return x\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            oddtastic_count += 1\n    \n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # 3-digit odd numbers have an odd first digit\n        for j in range(10):\n            for k in range(10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # 1 pair = 2 avocados\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100  # 1 pound = 100 pence\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # Initialize a dictionary to keep track of the sums and their frequencies\n    sum_counts = {i: 0 for i in range(2, 13)}\n    \n    # Iterate over all possible outcomes of rolling two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            roll_sum = die1 + die2\n            sum_counts[roll_sum] += 1\n    \n    # Find the maximum frequency of the sums\n    max_count = max(sum_counts.values())\n    \n    # Find the sum that has the maximum frequency\n    for roll_sum, count in sum_counts.items():\n        if count == max_count:\n            return roll_sum\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    total_students = 36\n    total_score = 89 * total_students\n    \n    boys_score = 91\n    girls_score = 88\n    \n    boys = total_students - girls\n\n    equation = Eq(girls * girls_score + boys * boys_score, total_score)\n\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of rhinos, d be the number of deer, and o be the number of ostriches\n    r, d, o = symbols('r d o')\n    \n    # Given that rhinos and deer have the same number\n    equation1 = Eq(r, d)\n    \n    # Total number of heads (each animal has one head)\n    equation2 = Eq(r + d + o, 28)\n    \n    # Total number of legs (rhinos and deer have 4 legs, ostriches have 2 legs)\n    equation3 = Eq(4*r + 4*d + 2*o, 88)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, o))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    square_tables = 8\n\n    # Calculating maximum number of people for one square table sitting \"around\" it\n    # means people on 4 sides, so there would be 3 people on each side for a square table\n    people_per_side = people_per_square_table // 4\n    \n    # Now when 8 tables are put together in a row, two sides will connect with \n    # the other table so they won't be counted twice, and the two end sides remain\n    # 3 people for the start table, 3 for last table, 2 for each inner side \n    max_people = (people_per_side * 2) * (square_tables - 1) + (people_per_side * 4)\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has\n    a, b, j, x = symbols('a b j x')\n\n    # The average number of marbles that Boris, Jeffery, and Xavier have\n    average_b_j_x = (b + j + x) / 3\n\n    # Given that Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(a, average_b_j_x - 30)\n\n    # Given that Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(x, 3 * a)\n\n    # Solve the system of equations for the number of Andrew's and Xavier's marbles\n    solutions = solve((equation1, equation2), (a, x))\n\n    # Substituting the number of Andrew's and Xavier's marbles into the first equation to find Boris' and Jeffery's marbles\n    b_and_j = solve(Eq(solutions[a] + 30, (b + j + solutions[x]) / 3), (b, j))\n\n    # Return the sum of Boris' and Jeffery's marbles\n    return b_and_j\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n    quotient = dividend // divisor\n\n    return quotient\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits = 339\n    pages = 0\n    digits_per_page = 1\n\n    while digits > pages * digits_per_page:\n        digits -= pages * digits_per_page\n        pages += 1\n        if pages >= 10 ** digits_per_page:\n            digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors\n\n    count = 0\n    for i in range(15, 1001, 15):  # Check only the multiples of 15\n        if len(divisors(i)) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit of each term separately\n    ones_digit_32_33 = pow(32, 33, 10)\n    ones_digit_22_29 = pow(22, 29, 10)\n    \n    # Subtract the ones digits and calculate the final ones digit of the result\n    result = (ones_digit_32_33 - ones_digit_22_29) % 10\n    \n    return result\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for i in range(1, 52):  # Search for possible numbers of teachers\n        students = i + 52  # Number of students\n        # Check if total people can form a square\n        if ((i**0.5) % 1 == 0) and ((students**0.5) % 1 == 0):\n            # Calculate the side lengths of the square\n            side_teacher = int(i**0.5)\n            side_students = int(students**0.5)\n            # Check if the layers are alternating between students and teachers\n            if side_teacher % 2 == side_students % 2:\n                # Total people is the square of the side length of students\n                ans = side_students**2\n                return ans\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # 2-digit numbers range from 10 to 99\n        for B in range(1000, 10000):  # 4-digit numbers range from 1000 to 9999\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(B - A, max_diff)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Calculate the value of the expression on the left side\n    left_value = 8 * 80 * 100\n\n    # Since 8 is squared on the right side, we divide the left value by 8^2 to find the number in the box\n    right_value = left_value // (8**2)\n\n    return right_value\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Initially, Danny bought 5/7 as many apples as oranges.\n    equation1 = Eq(apples, 5/7 * oranges)\n    \n    # After buying 12 more oranges, Danny had 2/3 as many apples as oranges.\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    # Number of apples Danny had.\n    return solutions[apples]\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, nsimplify, solve\n    from fractions import Fraction\n\n    # Initialize symbols\n    x, y, z = symbols('x y z')\n\n    # Define the equation according to the question\n    equation = 54 + 1 / (x + 1 / (y + 1 / z)) - Fraction(2014, 37)\n\n    # Simplify and solve the equation\n    simplified_eq = nsimplify(equation)\n    solutions = solve(simplified_eq, (x, y, z))\n\n    # Filter for the solution with distinct positive integers\n    for sol in solutions:\n        if all(sol[i].is_integer and sol[i] > 0 for i in range(3)) and len(set(sol)) == 3:\n            correct_sol = sol\n            break\n    \n    return sum(correct_sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_position = 10\n    total_counts = 30\n\n    # Since the clock has 12 numbers, the period is 12.\n    # We find the starting position by counting backwards from the end position.\n    \n    start_position = (end_position - (total_counts % 12)) % 12\n    # If start_position is 0, it means he started from 12 on the clock.\n    start_position = 12 if start_position == 0 else start_position\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n    \n    # Big bucket after selling x kg\n    big_bucket = 89 - x\n    \n    # Small bucket after selling x kg\n    small_bucket = 45 - x\n    \n    # Equation based on the condition given\n    equation = Eq(big_bucket, 12 * small_bucket)\n    \n    # Solve the equation for x\n    amount_sold = solve(equation, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    shoes_per_set = 5\n    socks_per_set = 2\n\n    shoes_price_per_set = 78\n    socks_price_per_set = 12\n\n    aliens = 1 + 5  # Himself and 5 brothers\n    legs_per_alien = 5\n\n    total_legs = aliens * legs_per_alien\n\n    total_shoe_sets = total_legs // shoes_per_set\n    total_sock_pairs = total_legs // socks_per_set\n\n    cost = (total_shoe_sets * shoes_price_per_set) + (total_sock_pairs * socks_price_price_per_set)\n\n    return cost\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n    \n    # Set up the equations based on the given information\n    # Get the prime numbers less than 31\n    primes = list(primerange(1, 31))\n\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if (31 + i == 26 + j) and (26 + j == 20 + k):\n                    return i * j * k\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are x ≡ 1 (mod 5), x ≡ 1 (mod 6), and x ≡ 1 (mod 7).\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies the congruences.\n    smallest_solution, _ = solve_congruence(*congruences)\n\n    # Ensure the solution is a three-digit number\n    while smallest_solution < 100:\n        smallest_solution += 5 * 6 * 7\n\n    return smallest_solution\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n\n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Let d be the distance between Celine's home and the park.\n    # Let t1 be the time taken to jog from home to the park.\n    # Let t2 be the time taken to jog back to home from the park.\n\n    # Celine's speed going to the park is 5 km/h.\n    # Celine's speed returning is 4 km/h.\n    \n    # We know that:\n    # Distance = Speed * Time\n    # So:\n    # d = 5 * t1 and d = 4 * t2\n    # t1 = d / 5 and t2 = d / 4\n\n    # Total time taken is 54 minutes, which is 54/60 hours.\n    # So:\n    # t1 + t2 = 54/60\n\n    # Substituting t1 and t2 we get:\n    # (d / 5) + (d / 4) = 54/60\n    # Multiply all terms by 20 to clear denominator.\n    # 4d + 5d = 54*20/60\n    # 9d = 54*20/60\n    # d = (54*20/60) / 9\n    \n    d = (54*20/60) / 9\n    return d\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both, apples, bananas = symbols('both apples bananas')\n    total_students = 35\n    \n    equation1 = Eq(apples, 3 * both)  # Students who like apples is three times the number who like both\n    equation2 = Eq(bananas, 5 * both) # Students who like bananas is five times the number who like both\n    equation3 = Eq(apples + bananas - both, total_students) # By inclusion-exclusion principle\n    \n    solutions = solve((equation1, equation2, equation3), (both, apples, bananas))\n\n    return solutions[both]\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls is x + 8\n    # The total number of pupils is x + (x + 8) = 26\n    # Solving for x we get 2x + 8 = 26\n    # Subtracting 8 from both sides gives 2x = 18\n    # Dividing by 2 gives x = 9\n    \n    # Therefore, the number of girls is x + 8\n    number_of_girls = 9 + 8\n    return number_of_girls\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the rate at which Lee types and N be the rate at which Nancy types.\n    # Both rates are in 'jobs per hour'.\n    L, N = symbols('L N')\n\n    # If they work together, they finish the job in 10 hours, so their combined rate is 1 job / 10 hours.\n    equation1 = Eq(L + N, 1 / 10)\n\n    # Nancy types for 20 hours and Lee types for 6 hours to finish 1 job.\n    equation2 = Eq(20 * N + 6 * L, 1)\n\n    # Solve the system of equations for L and N.\n    solutions = solve((equation1, equation2), (L, N))\n\n    # The time it takes for Nancy to finish the job by herself is the reciprocal of her rate.\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_for_pie_kg = 550 / 1000  # converting grams to kilograms\n    oranges_for_juice_kg = 1050 / 1000  # converting grams to kilograms\n    \n    oranges_left_kg = total_oranges_kg - (oranges_for_pie_kg + oranges_for_juice_kg)\n    \n    return oranges_left_kg\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    num_days = 5\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n    total_chairs = num_days / 2 * (2 * first_day_chairs + (num_days - 1) * difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choose between a pencil and a ruler, a pencil and a pen, or a ruler and a pen\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    # Total combinations\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # John's initial equation is 6A + 25 = B\n    # But his expansion is incorrect when he translates A and B.\n    # A = 10x + y\n    # B = 20x + 2y\n    # Let's correct the equation:\n    # 6*(10x + y) + 25 = 20x + 2y\n    # 60x + 6y + 25 = 20x + 2y\n    # Now, let's solve for x and y by simplifying the equation\n    # 60x + 6y + 25 = 20x + 2y\n    # 40x + 4y = -25\n    # Simplifying the equation gives us:\n    # 10x + y = -6.25 which is not possible since x and y are digits\n    # we made a mistake: we should have compared B to A, not 2xy to xy\n    # So the correct equation is 6*(10x + y) + 25 = 200x + 2y\n    # 60x + 6y + 25 = 200x + 2y\n    # 140x = 4y + 25\n    # Since x and y are digits, 140x and 4y must end with 5 or 0\n    # Only when x = 1 and y = 5 do we get values that satisfy the place value requirement\n    # Thus, A = 10x + y = 10*1 + 5 = 15\n\n    # We can check this quickly by plugging A = 15 back into the equation to see if B = 25 + 6A\n    A = 15\n    B = 2 * A\n    return A if B == 25 + 6 * A else False\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Based on the pigeonhole principle, in the worst case scenario,\n    # Benny could take out all marbles of the first two colors without\n    # getting three of the same color.\n    \n    # Since Benny has 4 blue marbles and 3 yellow marbles, he could take\n    # out all 4 blue and 2 yellow marbles without obtaining 3 marbles of the same color.\n    # The next marble he takes out, whatever its color, will result in 3 marbles of the same color.\n\n    blue_marbles = 4\n    yellow_marbles = 3\n    red_marble = 1\n\n    # He must take all blue marbles and two yellow ones in the worst case\n    marbles_taken_out = blue_marbles + (yellow_marbles - 1)\n\n    # The next one he takes out will ensure he has 3 of the same color\n    marbles_taken_out += 1\n\n    return marbles_taken_out\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = ((-3, 4), (-1, 13))\n    number_of_children = solve_congruence(*congruences)\n\n    return number_of_children[0]\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    # Breaking down the calculation step-by-step\n    ans = (98 - 87) + (76 - 65) + (54 - 43) + (32 - 21) + (10)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_per_sharpener = 14\n    number_of_sharpeners = 7\n    total_cost_pence = cost_per_sharpener * number_of_sharpeners\n    pounds_to_pence = 100  # £1 is 100p\n    change_received = pounds_to_pence - total_cost_pence\n    return change_received\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n\n    equation1 = Eq(garrett - sebastian, 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let Mary's current age be m and her son's current age be s.\n    # According to the problem, the sum of their ages is 45: m + s = 45\n    # In 5 years, Mary's age will be m + 5 and her son's age will be s + 5.\n    # We need to find the sum of their ages in 5 years: (m + 5) + (s + 5) = m + s + 10\n    # Since m + s = 45, we can substitute this into the equation above.\n\n    m_plus_s = 45\n    sum_in_5_years = m_plus_s + 10\n\n    return sum_in_5_years\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    \n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * days * hotel_cost_per_day_per_person\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    # Set up the initial equation: boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n    \n    # After \\frac{2}{5} of the boys and \\frac{3}{7} of the girls left the hall, there's an equal number remaining:\n    # (1 - \\frac{2}{5}) * boys = (1 - \\frac{3}{7}) * girls\n    # \\frac{3}{5} * boys = \\frac{4}{7} * girls\n    equation2 = Eq(3/5 * boys, 4/7 * girls)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate the remaining students\n    remaining_boys = (1 - 2/5) * solutions[boys]\n    remaining_girls = (1 - 3/7) * solutions[girls]\n    \n    # Total remaining students\n    remaining_total = remaining_boys + remaining_girls\n\n    return remaining_total\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len('ORANGES'))\n    vowel_permutations = factorial(len('OAE'))\n    \n    # Calculate the permutations with all vowels together treating vowels as one entity\n    vowels_together = vowel_permutations * factorial(len('ORANGES') - len('OAE') + 1)\n    \n    # Subtract \"vowels together\" permutations from total permutations\n    ans = total_permutations - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for oranges, apples, and bananas\n    oranges, apples, bananas = symbols('oranges apples bananas')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(apples, oranges + 150)  # 150 more apples than oranges\n    equation2 = Eq(bananas, oranges + 50)  # 50 more bananas than oranges\n    equation3 = Eq(oranges + apples + bananas, 1400)  # The total number of fruits\n\n    # Solve the equations to find the number of oranges\n    solutions = solve((equation1, equation2, equation3), (oranges, apples, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n    \n    # First, treat each group of books as a single item, so we have 4 items (Math, Chemistry, Physics, Biology)\n    # There are 4! ways to arrange these 4 items\n    group_arrangements = factorial(4)\n    \n    # Now, we consider the arrangements within each group\n    # Math books can be arranged in 4! ways, Chemistry in 3! ways, Physics in 2! ways\n    # Biology book has only one arrangement since it's a single book\n    math_arrangements = factorial(4)\n    chemistry_arrangements = factorial(3)\n    physics_arrangements = factorial(2)\n    biology_arrangements = 1  # Only one way to arrange a single book\n\n    # The total number of arrangements is the product of the number of group arrangements and \n    # the number of arrangements within each group\n    total_arrangements = group_arrangements * (math_arrangements * chemistry_arrangements * physics_arrangements * biology_arrangements)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    metres_to_kilometres = 1000\n    height_in_kilometres = height_in_metres / metres_to_kilometres\n    return height_in_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    ways = category1 * category2 * category3\n\n    return ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1):\n        for b in range(a, 12 // 2 + 1):\n            c = 12 - a - b\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let E be the initial number of Eugene's stickers, M be Melvin's, and D be David's\n    E, M, D = symbols('E M D')\n\n    # Since in the end the ratios are 46:12:7, let's assume that Eugene, Melvin, and David\n    # ends with 46k, 12k, and 7k stickers respectively, for some positive integer k.\n    k = symbols('k')\n\n    # Express the end number of stickers based on k\n    E_end = 46 * k\n    M_end = 12 * k\n    D_end = 7 * k\n\n    # Compute the original number of stickers for each person using the operations in reverse\n    # David originally had half the stickers (since Melvin gave him as many stickers as he had), \n    # so David originally had 7k / 2.\n    D_orig = D_end / 2\n\n    # After giving away the stickers, Melvin's stickers doubled (since Eugene gave him twice as many), \n    # and then he gave away D_orig (since he gave David as many as he had). Thus, Melvin originally had (12k + D_orig) / 2.\n    M_orig = (M_end + D_orig) / 2\n\n    # Eugene originally had E_end after receiving D_orig from David, thus Eugene originally had E_end - D_orig.\n    E_orig = E_end - D_orig\n    \n    # The original total number of stickers is the sum of original stickers of Eugene, Melvin, and David\n    total = E + M + D\n    \n    # The total number of stickers was given as 260.\n    equation1 = Eq(total, 260)\n    \n    # The original and end amounts are based on the previous reverse calculations.\n    equation2 = Eq(E, E_orig)\n    equation3 = Eq(M, M_orig)\n    equation4 = Eq(D, D_orig)\n    \n    # Solve the system of equations for E, M, D, and k.\n    solutions = solve((equation1, equation2, equation3, equation4), (E, M, D, k), dict=True)\n    \n    # Required solution is the value of E (Eugene's initial number of stickers) from the solutions\n    # Only return positive integer solutions\n    eugene_initial = [sol[E] for sol in solutions if sol[E] > 0 and sol[E].is_integer]\n    \n    return int(eugene_initial[0])\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Based on the game theory of Nim, the winning strategy is to leave a position with equal\n    # numbers of matches in both piles. Since Eddie goes first and the piles are not equal, \n    # he can take matches from pile A (the larger pile) to make the piles equal.\n\n    pile_a = 35\n    pile_b = 24\n\n    # Calculate the number of matches Eddie needs to take from pile A to make both piles\n    # have an equal number of matches.\n    matches_to_take = pile_a - pile_b\n\n    # The winning strategy for Eddie is to take these matches from pile A during his first turn.\n    # After that, he will simply mimic Wei'er's moves, ensuring that he takes the last match.\n\n    # The winner is Eddie who goes first with the winning strategy:\n    # take (35 - 24) matches from pile A initially then mirror the opponent's moves.\n    winner = 'Eddie'\n    strategy = matches_to_take\n\n    ans = (winner, strategy)\n    return ans\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # Define variables\n    a, b, c = symbols('a b c')\n\n    # Equations based on the problem statement\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Extract solutions for a, b, and c\n    a = solutions[a]\n    b = solutions[b]\n    c = solutions[c]\n\n    # Ensuring that a, b, and c are prime\n    if isprime(a) and isprime(b) and isprime(c):\n        return a * b * c\n    else:\n        return \"One or more variables are not prime.\"\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # Since rotation that results in the same order is not counted,\n    # we consider the first person's position as fixed, and permute the rest.\n    # This is because after placing the first person, the rotation symmetry is broken.\n    num_people = 6\n    num_seats = 8\n\n    # Fixing one person’s spot, we arrange (num_people - 1) around the remaining seats\n    num_ways = factorial(num_people - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let b be the original number of boys (also the original number of girls)\n    # After 12 boys enter and 8 girls leave:\n    # boys = b + 12\n    # girls = b - 8\n    # At this point, there are twice as many boys as girls\n    # So: 2*(b - 8) = b + 12\n    # Solving for b, we get:\n    # 2b - 16 = b + 12\n    # b = 28\n    # Since the number of boys and girls was equal initially, there were 28 boys and 28 girls\n    # Total students at first = b + b = 2 * b\n    b = 28\n    total_students_at_first = 2 * b\n    return total_students_at_first\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(56, 81, 2)])\n    return ans\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2/7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 7]\n    permutations_list = list(permutations(digits, 3))\n    count = len(permutations_list)\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for i in primes:\n        if isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Distance covered in each stage\n    distance_stage_1 = 280  # in meters\n    distance_stage_2 = 400  # in meters\n    distance_stage_3 = 800 - (distance_stage_1 + distance_stage_2)  # in meters\n\n    # Speed in each stage\n    speed_stage_1 = 7  # in meters per second\n    speed_stage_2 = 5  # in meters per second\n    speed_stage_3 = 8  # in meters per second\n\n    # Time spent in each stage\n    time_stage_1 = distance_stage_1 / speed_stage_1  # in seconds\n    time_stage_2 = distance_stage_2 / speed_stage_2  # in seconds\n    time_stage_3 = distance_stage_3 / speed_stage_3  # in seconds\n\n    # Total time spent\n    total_time = time_stage_1 + time_stage_2 + time_stage_3  # in seconds\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour = 6\n    start_minute = 52\n    end_hour = 8\n    end_minute = 24\n    \n    # Convert start and end times to minutes\n    start_total_minutes = start_hour * 60 + start_minute\n    end_total_minutes = end_hour * 60 + end_minute\n    \n    # Calculate the difference in minutes\n    time_spent = end_total_minutes - start_total_minutes\n    \n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # equations based on the problem description\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # after selling the cupcakes, she has 427 left\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - 2 * vanilla / 3) + (blueberry - 7 * blueberry / 9), 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    # Subtract one because the distance is between each pair of posts.\n    road_length = (number_of_lamp_posts - 1) * distance_between_lamp_posts\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    # Using the Pigeonhole Principle, we divide the total peaches by the total students\n    # and then add 1 to ensure that at least one student gets more than the average\n    max_peaches = (total_peaches // total_students) + 1\n    return max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    half_way_number = (18 + 52) / 2\n    return half_way_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n    num_pages = end_page - start_page + 1\n    return num_pages\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    # Because the numbers are consecutive and there are 7 of them, we can represent\n    # the sequence as x, x+1, x+2, x+3, x+4, x+5, x+6, and their sum equals 140.\n    # So the equation to solve will be 7x + (1+2+3+4+5+6) = 140.\n    # We calculate the sum of 1 to 6 using n(n+1)/2\n    sum_consecutive = (6 * (6 + 1)) // 2\n    # Now we solve for x.\n    x = (total_sum - sum_consecutive) // 7\n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2 / 9) * 36\n    return ans\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (6, 7), (6, 9)]\n    least_number_of_children = solve_congruence(*congruences)[0]\n    return least_number_of_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45  # cost in pence\n    stamps_cost = 10 * 27      # cost in pence\n    total_cost_pence = post_cards_cost + stamps_cost\n\n    note_value_pence = 1000    # £10 note in pence\n    \n    change_pence = note_value_pence - total_cost_pence\n    change_pounds = change_pence / 100  # convert pence to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed.\n    # There are 3 seats left for other players.\n    # Since Tony can't sit face to face with Claire, Tony has 2 choices for seats.\n    tony_seats = 2\n    \n    # Once Tony is seated, Chantel and Cale have 2 and 1 choices, respectively.\n    chantel_seats = 2\n    cale_seats = 1\n    \n    # Multiply the possibilities to get the total arrangements.\n    total_arrangements = tony_seats * chantel_seats * cale_seats\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank makes 180 tables in 10 days\n    frank_daily_rate = 180 / 10\n    \n    # Ryan makes 180 tables in 15 days\n    ryan_daily_rate = 180 / 15\n    \n    # Calculate how many more tables Frank makes than Ryan per day\n    daily_difference = frank_daily_rate - ryan_daily_rate\n    \n    return daily_difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x represents the total number of questions Miss Atkinson had to mark\n    x = symbols('x')\n\n    # If she marked 4 questions per minute, she would take (x / 4) minutes\n    # Since she is 5 minutes late, this is equal to her allocated time + 5\n    equation1 = Eq(x / 4, (x / 6) + 10)\n    \n    # Solve for x\n    solution = solve(equation1, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    rounded_mass = 7.4\n    smallest_possible_mass = rounded_mass - 0.05\n    return smallest_possible_mass\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = 2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_mark - wrong * wrong_mark == 79:\n            return correct\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_pence = 165 * 100  # convert pounds to pence\n    price_per_cake = 75\n    number_of_cakes = total_money_pence // price_per_cake\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Loop through all possible consecutive 2-digit sequences\n    for i in range(10, 96):  # 96 is the highest start for a sequence of 5 consecutive 2-digit numbers\n        # Define the five consecutive numbers\n        n1, n2, n3, n4, n5 = i, i+1, i+2, i+3, i+4\n        \n        # Check if any combination of 3 numbers sum is divisible by 37 and 60\n        # There are 10 possible combinations, but we only need to check unique sums\n        # Since they are consecutive, we can check the sum of n2+n3+n4 once\n        three_sum = n2 + n3 + n4\n        if three_sum % 37 == 0:\n            for combo in [(n1, n2, n3), (n1, n2, n4), (n1, n2, n5), (n1, n3, n4), (n1, n3, n5), (n1, n4, n5), (n2, n3, n5), (n2, n4, n5), (n3, n4, n5)]:\n                if sum(combo) % 60 == 0:\n                    # We've found a valid sequence\n                    return n5\n                    \n    return None  # If no such sequence exists, although the problem guarantees there is one\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    candies_to_give = 24 - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remaining_after_restaurant\n    remaining_money = remaining_after_restaurant - spent_on_fees\n\n    return remaining_money\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # The clock chimes thrice in 6 seconds, so there are 2 intervals between chimes.\n    # Interval duration is total time divided by number of intervals.\n    interval_duration = 6 / 2  # seconds\n\n    # At 6pm, to chime 6 times, there are 5 intervals between chimes.\n    total_time_for_6_chimes = interval_duration * 5  # the total time for all intervals\n\n    return total_time_for_6_chimes\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert 3.2 meters to centimeters\n    meters_in_cm = 3.2 * 100\n    # Length in centimeters given\n    length_in_cm = 30\n    # Calculate the difference\n    difference = meters_in_cm - length_in_cm\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    ans = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for page in range(1, 41):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # pence\n    total_cost_pence = 5 * cost_per_kg  # 5 kg of potatoes cost in pence\n    money_given_pence = 10 * 100  # £10 converted to pence\n\n    change_pence = money_given_pence - total_cost_pence\n    change_pounds = change_pence / 100  # convert change back to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n    \n    factors_dict = factorint(120)\n    total_factors = 1\n    \n    for prime, exponent in factors_dict.items():\n        total_factors *= (exponent + 1)\n    \n    return total_factors\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P can complete the job working 12 days for 8 hours each day\n    # So the total work P can do is Work = days * hours_per_day\n    total_work_p = 12 * 8\n\n    # Q can complete the job working 8 days for 10 hours each day\n    # So the total work Q can do is Work = days * hours_per_day\n    total_work_q = 8 * 10\n\n    # Total work to be done can be assumed to be multiples of both total works\n    # We can assume the total work is equal to the Least Common Multiple (LCM) of P's and Q's total work\n    # Let's calculate the work done by P and Q in a day working together 8 hours\n    work_per_day_p = total_work_p / 12\n    work_per_day_q = total_work_q / 8\n\n    # Now, the work Per and Q do together in a day is (working 8 hours a day)\n    work_per_day_pq = work_per_day_p + work_per_day_q\n\n    # Total work to be done (assuming it is the LCM of total_work_p and total_work_q)\n    # is the product of total work of P and Q divided by their Greatest Common Divisor (GCD)\n    from math import gcd\n    total_work = (total_work_p * total_work_q) // gcd(total_work_p, total_work_q)\n\n    # Now we calculate the number of days P and Q together working 8 hours a day\n    # can complete the total work\n    days_pq = total_work // work_per_day_pq\n\n    # If there is a remainder, they will need one extra day to complete it,\n    # hence we take the ceiling of the division\n    if total_work % work_per_day_pq != 0:\n        days_pq += 1\n\n    return days_pq\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    from math import sqrt\n\n    product = 180\n    min_diff = float('inf')\n\n    for i in range(1, int(sqrt(product)) + 1):\n        if product % i == 0:\n            factor1 = i\n            factor2 = product // i\n            min_diff = min(min_diff, abs(factor2 - factor1))\n\n    return min_diff\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time it takes for Max to cover the distance\n    # Then, the time it takes for Luca to cover the distance is x + 10\n    # Since their speeds are in the ratio 2:3, the times are in the ratio 3:2\n    # Hence, (x + 10) / x = 3 / 2\n    # Simplifying the equation: 2(x + 10) = 3x\n    # 2x + 20 = 3x\n    # 3x - 2x = 20\n    # x = 20 (Time in minutes it takes for Max to cover the distance)\n    \n    # Luca's time at his usual speed is x + 10\n    luca_time_usual = 20 + 10\n    \n    # If Luca walked at double his speed, the time would be halved\n    luca_time_double_speed = luca_time_usual / 2\n    \n    return luca_time_double_speed\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n    overall_change = midday_temperature - midnight_temperature\n    \n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15, 3):\n        if 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n\n    total_money_collected = people * price_per_person\n\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    total_marks = 71\n    marks_for_correct = 2\n    marks_deducted_for_wrong = -1\n    \n    # Let's find the actual number of correct and wrong answers\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * marks_for_correct) + (wrong_answers * marks_deducted_for_wrong)\n        \n        if score == total_marks:\n            actual_wrong_answers = wrong_answers\n            break\n            \n    Tom_incorrect = actual_wrong_answers != 9  # Check if Tom's calculation was incorrect\n    \n    return actual_wrong_answers\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pencils = 5\n    while True:\n        pens = pencils * 2\n        if pens + 18 == pencils + 5 + 18:\n            break\n        pencils += 1\n    return pens + 18\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    total_cards = 52\n    cards_in_each_pattern = 13\n    # Since there are 4 patterns, we can draw one from each of the other 3 patterns.\n    minimum_cards_to_draw = (cards_in_each_pattern * 3) + 1\n\n    return minimum_cards_to_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    ship_speed_in_still_water = 33\n    current_speed = 7\n    downstream_speed = ship_speed_in_still_water + current_speed\n    distance = 320\n\n    time_to_travel = distance / downstream_speed\n\n    return time_to_travel\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the distance Star jogs from 6:30 A.M. to 7:30 A.M.\n    jogging_time = 1  # hours\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_time * jogging_speed  # miles\n\n    # Calculate the distance Star walks from 7:30 A.M. to 9:30 A.M.\n    walking_time = 2  # hours\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_time * walking_speed  # miles\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    total_piles = 10\n\n    books_per_pile = total_books // total_piles\n\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    piece_length = 40\n\n    num_pieces = remaining_length // piece_length\n\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_of_left_handed_tennis_players = 1 / 10\n    proportion_of_girls_left_handed = 25 / 100\n\n    total_left_handed = left_handed_tennis_players / proportion_of_left_handed_tennis_players\n    total_students = total_left_handed / proportion_of_girls_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_made = 80\n    butter_used = 20  # grams\n    cookies_to_make = 100\n\n    butter_needed = (butter_used * cookies_to_make) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    num_digits = 3\n    choices_per_digit = 3\n    ans = choices_per_digit ** num_digits\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    digit_count, num_zeros, current_number = 0, 0, 0\n    while num_zeros < 100:\n        current_number += 1\n        str_num = str(current_number)\n        num_zeros += str_num.count('0')\n        digit_count += len(str_num)\n        if num_zeros > 100:\n            overshoot = num_zeros - 100\n            # Find the position of the 100th zero in the current number\n            position = str_num.find('0', -(overshoot)) - 1\n            return int(str_num[:position + 1])\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_juice = 8 * 3\n    juice_drank = 9\n    juice_left = total_juice - juice_drank\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)      # Bud has three times as many sweets as Pip\n    equation2 = Eq(tom, 2 * bud)      # Tom has twice as many sweets as Bud\n    equation3 = Eq(bud + pip + tom, 50)  # Sum of sweets is 50\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_first_part = 180  # meters per minute\n    time_first_part = 6  # minutes\n    speed_second_part = 120  # meters per minute\n    time_second_part = 8  # minutes\n\n    # Distance = Speed * Time\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n    \n    # Total distance is the sum of both parts\n    total_distance = distance_first_part + distance_second_part\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first number in the sequence be x\n    # Then the 8 consecutive numbers can be represented as: x, x+1, x+2, ..., x+7\n    # The sum of the consecutive numbers is given by the sum of an arithmetic progression:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms, which is 8 in this case\n    # Thus, Sum = 8/2 * (x + (x+7)) = 4 * (2x + 7)\n\n    # We know the sum is 2012, so we can set up the equation:\n    # 4 * (2x + 7) = 2012\n    # Simplifying, we get 2x + 7 = 2012 / 4\n    # And so, 2x + 7 = 503\n    # Now solving for x, we get x = (503 - 7) / 2\n\n    x = (503 - 7) // 2  # Use integer division for whole number\n\n    # If x is the first number, then the largest number would be x+7\n    largest_number = x + 7\n\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_behind_danya = 14 - 1  # As Danya is the 14th from the back, there are 13 people behind him\n    people_in_front_of_elias = 25\n    danya_and_elias = 2  # Danya and Elias themselves\n\n    total_people = people_behind_danya + people_in_front_of_elias + danya_and_elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    percentage = (42 / 35) * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio\n    equation1 = Eq(A, 5/7 * B)\n\n    # After transferring students\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let's use the symbols x to represent the number of bottles Faye had initially\n    # The problem can be translated into simple equation\n    # Initial bottles (x) divided by 3 = Number of bottles after 5 swaps + 1 extra bottle from miscalculation\n    # x // 3 = 4 after 5 swaps + 1 from miscalculation\n    \n    for x in range(1, 100):  # We limit the range for practical purposes\n        total_bottles = x\n        for swap in range(5):  # Simulate 5 swap transactions\n            total_bottles = (total_bottles // 3) * 4 + total_bottles % 3\n        if total_bottles == 4 + 1:  # Finally, we check if after 5 swaps she has 4 + 1 extra bottles\n            return x\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's assume that the side of the smaller square is x,\n    # therefore, the total number of boys is x^2.\n    # After adding the girls, the new square side is (x+1),\n    # hence the new total number of children is (x+1)^2.\n    # We know that the difference between the boys and total children\n    # after adding the girls is 17, therefore:\n    # (x+1)^2 - x^2 = 17\n    # x^2 + 2x + 1 - x^2 = 17\n    # 2x + 1 = 17\n    # 2x = 17 - 1\n    # 2x = 16\n    # x = 8\n    # Therefore, the total number of boys is x^2 = 8^2 = 64.\n\n    x = 8  # Solution from the equation after folding it to find the side length of the smaller square\n    num_boys = x**2  # The total number of boys is the area of the square\n    return num_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    speed_up_time = 1  # time reduced when speeding up, in hours\n    speed_increased_by = 2  # speed increase needed to save 1 hour, in km/h\n\n    # The difference in time is 1 hour, so we set up equations based on the speed and time relationship:\n    # Original speed: s (in km/h)\n    # Enhanced speed: s + 2 (in km/h)\n    # Original time: 7 - 1 = 6 hours\n    # Enhanced time: 6 - 1 = 5 hours\n    # We know that distance = speed * time, and the distance remains the same.\n    # Therefore, we have the equation: 6s = 5(s + 2)\n    # Solve for s\n    s = symbols('s')\n    equation = Eq(6 * s, 5 * (s + speed_increased_by))\n    original_speed = solve(equation, s)[0]\n\n    # Find distance using the original speed: distance = speed * time\n    distance = original_speed * (7 - 1)\n\n    return distance\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    water_volume_liters = 40   # volume of water in liters\n    flow_rate_ml_per_sec = 125  # flow rate in milliliters per second\n    water_volume_ml = water_volume_liters * 1000  # convert volume to milliliters\n    time_seconds = water_volume_ml / flow_rate_ml_per_sec  # calculate time in seconds\n    return time_seconds\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # a is the first term and d is the common difference\n    a, d = symbols('a d')\n\n    # According to the given conditions:\n    # 9th term is a + 8d\n    # 15th term is a + 14d\n    # 20th term is a + 19d\n    # 12th term is a + 11d\n\n    # 9th term is 18 larger than 15th term: (a + 8d) - (a + 14d) = 18\n    equation1 = Eq((a + 8*d) - (a + 14*d), 18)\n\n    # Sum of the 20th term and the 12th term is 88: (a + 19d) + (a + 11d) = 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term: a + 31d\n    term_32 = solutions[a] + 31*solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    correct_total = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    difference_in_daily_savings = incorrect_day_savings - correct_day_savings\n    difference_in_averages = incorrect_total - correct_total\n\n    num_days = difference_in_daily_savings / difference_in_averages\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # If Mr Tung can cut a rope into 4 equal pieces in 12 minutes,\n    # it means he makes 3 cuts (since the first piece doesn't require a cut).\n    cuts_for_four_pieces = 3\n\n    # Time to make one cut\n    time_per_cut = 12 / cuts_for_four_pieces\n\n    # To cut a rope into 12 pieces, he needs 11 cuts\n    cuts_for_twelve_pieces = 11\n\n    # Total time required to make 11 cuts\n    total_time = cuts_for_twelve_pieces * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    # The total number of digits printed by the printer is given as 237.\n    total_digits = 237\n    \n    # We'll calculate the number of pages by considering the number of digits on each page number:\n    # 1-9: 9 digits, 10-99: 90 * 2 digits, 100-999: 900 * 3 digits, etc.\n    \n    # Start with 1-digit page numbers.\n    digits_per_page = 1\n    \n    # Initialize the number of pages and the total used digits.\n    pages = 0\n    used_digits = 0\n    \n    while used_digits < total_digits:\n        # Calculate the span of the current digit pages: 9, 90, 900, ...\n        span = 9 * (10 ** (digits_per_page - 1))\n        \n        # Calculate the number of digits if all pages in the current span were used.\n        # This is either the remaining needed digits or the maximum for the current span.\n        digits_in_span = min(total_digits - used_digits, span * digits_per_page)\n        \n        # Calculate the actual number of pages in this span.\n        pages_in_span = digits_in_span // digits_per_page\n        \n        # Add the pages to the total number of pages.\n        pages += pages_in_span\n        \n        # Update the total used digits.\n        used_digits += pages_in_span * digits_per_page\n        \n        # Go to the next digit level (10, 100, ...).\n        digits_per_page += 1\n    \n    return pages\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_tree = current_year - birth_year\n    return age_of_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    last_term = 31\n    n = 10\n    common_difference = 28 - 25  # This is calculated from the given sequence\n\n    # Using arithmetic sequence nth term formula: an = a1 + (n - 1)d, where\n    # an is the nth term, a1 is the first term, n is the term number, and d is the common difference\n    # Since we're trying to find a1 (the first term), we rearrange the formula to solve for a1:\n    # a1 = an - (n - 1)d\n    first_term = last_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n\n    # Carol is 2 years older than Marry\n    equation1 = Eq(carol, marry + 2)\n    # Marry is 1 year older than Lily\n    equation2 = Eq(marry, lily + 1)\n    # The product of their ages times 4 is 2240\n    equation3 = Eq(4 * lily * marry * carol, 2240)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    # There might be multiple solutions, we return the positive integer one\n    for sol in solutions:\n        if all(isinstance(age, int) and age > 0 for age in sol):\n            return sol[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n    \n    x = symbols('x')\n    \n    # Define the original expression\n    original_expr = (8*x + 8)/2 - 3*(x + 6)\n    \n    # Simplify the original expression\n    simplified_expr = simplify(original_expr)\n    \n    # Return the simplified expression\n    return simplified_expr\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = int((2/5) * total_flowers)\n    purple_flowers = int((1/8) * total_flowers)\n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number_to_reduce = 38942\n    remainder = number_to_reduce % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    ways = 0\n    for pile1 in range(1, 10):  # since piles must be different, pile1 can take values from 1 to 9\n        pile2 = 10 - pile1  # the rest of the marbles go to pile2\n        if pile1 != pile2: # since piles must be different, we ensure they are not the same\n            ways += 1\n    return ways // 2  # we divide by 2 because each distribution is counted twice\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # Convert 2.5 liters to quarts (1 liter = 1.05669 quarts)\n    cups_capacity = 0.5\n    num_cups = liters_to_quarts / cups_capacity\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Maximum possible not to get 3 toys of same color\n    max_different = 2 * (3 - 1) # Two each from the three colors\n    \n    # The next one picked must be the same color as one of the previously picked\n    ans = max_different + 1\n\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 200, 147]  # 2m converted to 200cm\n    total_length_cm = sum(lengths_cm)\n    total_length_m = total_length_cm / 100  # convert cm to m\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34 / 100\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    legs_sum = 64\n    spider_legs = 8\n    ant_legs = 6\n\n    # hypothesis: assume all legs belong to ants, and find the remainder when dividing by spider_legs\n    max_ants = legs_sum // ant_legs\n    remainder = legs_sum % ant_legs\n\n    # adjust the number of ants downwards until the remainder is divisible by the number of spider legs\n    while remainder % spider_legs != 0:\n        max_ants -= 1\n        remainder += ant_legs\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n    \n    solutions = solve((equation1, equation2), (vivian, justin))\n    \n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_after_giving = 34 + 2  # After giving away 14 and using 2, she has 34 left\n    stamps_after_buying = stamps_after_giving - 11  # She bought 11 more stamps before that\n    initial_stamps = stamps_after_buying + 14  # Initially, she had 14 more stamps than after giving away\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    millilitres_in_a_litre = 1000\n    litres = 7.5\n    millilitres = litres * millilitres_in_a_litre\n    return int(millilitres)\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    expression = ((x - 6) * 6 + 6) / 6\n\n    equation = Eq(expression, 6)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Define the initial height as h.\n    # After first bounce: height = 3 * h\n    # After second bounce: height = 3 * 3 * h = 9 * h\n    # After third bounce (half of the height from which it dropped): height = 4.5 * h\n    # After fourth bounce (half of the height from which it dropped): height = 2.25 * h\n    # We know that after fourth bounce height is 36 m.\n    # So, we have the equation 2.25 * h = 36\n\n    # Solve the equation to find h.\n    h = 36 / 2.25\n\n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # The original equation: x + y = 11.63\n    original_eq = Eq(x + y, 11.63)\n\n    # The incorrect equation: x + y/10 = 5.87\n    incorrect_eq = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((original_eq, incorrect_eq), (x, y))\n\n    # Calculate 100 times the absolute difference between x and y\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b == a or b == 8:\n                continue\n            for c in range(10):\n                if c == b or c == a or c == 8:\n                    continue\n                for d in range(1, 10, 2):  # d must be odd for divisibility by 5\n                    if d == c or d == b or d == a or d == 8:\n                        continue\n                    for e in range(10):\n                        if e == d or e == c or e == b or e == a or e == 8:\n                            continue\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    individual_price = 99  # price in pence for one song\n    album_price = 899  # price in pence for the whole album\n\n    total_individual_price = 12 * individual_price  # total price for 12 songs bought individually\n\n    savings = total_individual_price - album_price  # savings in pence\n\n    return savings / 100  # convert pence to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    differences = set()\n    for i in range(10, 100):\n        original = i\n        reversed_number = int(str(i)[::-1])\n        diff = abs(original - reversed_number)\n        differences.add(diff)\n    \n    # Check if all differences are a multiple of 9\n    all_multiples_of_9 = all(d % 9 == 0 for d in differences)\n    \n    return all_multiples_of_9, differences\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    amount_paid = 20\n    change = amount_paid - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set(int(''.join(p)) for p in permutations(digits, r=2) if p[0] != '0')\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Since we want the smallest possible difference,\n    # we should aim to have the first digits of the two numbers as close as possible\n    # For the smallest difference, the largest digit (9) should be the first digit of the smaller number\n    # The second smallest (0) should not be in the smaller number to avoid making it a 4-digit number\n    # Assign the rest of the digits in ascending order for the smaller number\n    # Assign the rest of the digits in descending order for the larger number\n    # The smallest number will be 9,876 and the largest will be 10,234\n    smaller_number = 9876\n    larger_number = 10234\n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_seconds = 15\n    length_meters = 450\n\n    speed_m_per_s = length_meters / time_seconds\n    speed_km_per_h = speed_m_per_s * 3.6  # Convert m/s to km/h\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(10)\n\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each_friend = friends - 1\n    total_cards_sent = friends * cards_sent_by_each_friend\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 1 + 1  # Ali and Bala themselves\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n    return total_people\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    num = lcm(1, 2, 3, 4, 5, 6)\n    return num\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    result = sum(i * (i + 1) for i in range(1, 102))\n    return result\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Initially, Sam has 40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    # Peter's new count is his original count plus 20% of Sam's stickers\n    peter_new = peter + 0.20 * sam\n\n    # Peter gives 25% of his new stickers to Sam\n    # Sam's new count is his original count minus 20% he gave plus 25% of Peter's new count\n    sam_new = sam - 0.20 * sam + 0.25 * peter_new\n\n    # In the end, Sam has 96 stickers more than Peter\n    final_condition = Eq(sam_new, peter_new + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs_added = 4\n\n    total_water = initial_water + (jug_capacity * number_of_jugs_added)\n    \n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_period = 9 * 3\n    cookies_second_period = 15 * 2\n    cookies_last_period = 10 * 2\n\n    total_cookies = cookies_first_period + cookies_second_period + cookies_last_period\n    total_days = 3 + 2 + 2\n\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's daily work rate\n    candy_daily_rate = 1 / 20\n\n    # David's daily work rate\n    david_daily_rate = 1 / 25\n    \n    # Total work done by Candy and David by the end of the 12th day\n    total_work_done = 12 * candy_daily_rate # Candy works all 12 days\n\n    # Let x be the number of days David takes off\n    # Since David was taking days off, he worked (12 - x) days\n    # Work done by David is (12 - x) times his daily rate\n    david_work_done = (12 - x) * david_daily_rate\n    \n    # The equation representing the total work is the sum of work done by Candy and David,\n    # which should equal to 1 (the whole job done)\n    # Therefore: total_work_done + david_work_done = 1\n    # Substitute the known values and solve for x\n    x = symbols('x')\n    equation = Eq(total_work_done + (12 - x) * david_daily_rate, 1)\n    days_off = solve(equation, x)\n    \n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude\n    # and opposite in direction to the force of gravity acting on the book.\n    # This is known as Newton's third law: For every action, there is an equal and opposite reaction.\n\n    # The mass of the book is given as 20N, which is actually the gravitational force\n    # (because weight is a force and is mass times gravity, and is measured in newtons).\n    # Therefore, the force exerted by the table is simply 20N upwards.\n\n    force_exerted_by_table = 20  # in newtons\n\n    return force_exerted_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    tax_paid = 15100\n    first_50k_tax = 0.05 * 50000\n    remaining_income = income - 50000\n    remaining_tax = tax_paid - first_50k_tax  # Tax paid on income above $50,000\n\n    # Equation for tax paid on remaining income at rate (8 + T)%\n    equation = Eq(remaining_tax, remaining_income * (0.08 + T / 100))\n\n    # Solve for T\n    T_value = solve(equation, T)\n\n    return T_value[0]  # Return the value of T\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(0)  # The '0' is just a dummy argument, the actual expression is \"y - 3\""
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits = symbols('total_fruits')\n\n    # Given that 4/5 of the fruits were apples\n    apples = 4 * total_fruits / 5\n    \n    # Total fruits after removing 3/4 of them\n    remaining_fruits = total_fruits / 4\n    \n    # 1/8 of the apples and 30 pears were left\n    # Given that the rest of fruits are pears and the rest 30 are pears\n    # it can be concluded that 1/8 of the apples is equal to the remaining fruits minus 30 pears\n    equation = Eq(1/8 * apples, remaining_fruits - 30)\n\n    solution = solve(equation, total_fruits)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum balls Lily can take without having 6 of the same type:\n    # 5 footballs, 5 basketballs, and 5 volleyballs\n    max_without_six_same = 5 + 5 + 5\n\n    # She needs to take out one more to ensure she has 6 of one type\n    return max_without_six_same + 1\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the final speed of the ball\n    v = symbols('v')\n\n    # Initial speed (u) is 0 because the ball is gently pushed\n    u = 0  \n    # Acceleration due to gravity (g) is 9.81 m/s^2\n    g = 9.81\n    # Height (h) is 5.0 m\n    h = 5.0\n\n    # Using the equation of motion: v^2 = u^2 + 2gh\n    equation = Eq(v**2, u**2 + 2*g*h)\n\n    # Solve for the final speed v\n    solutions = solve(equation, v)\n\n    # There will be two solutions (positive and negative speed), but we're interested in the positive one\n    final_speed = max(solutions)\n\n    return final_speed\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_per_cake = 36 / 6\n    total_time_for_ten_cakes = time_per_cake * 10\n    return total_time_for_ten_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 15\n    tax_percent = 8\n\n    tip_amount = (bill * tip_percent) / 100\n    tax_amount = (bill * tax_percent) / 100\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Constants and initial conditions\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    v0 = 5  # initial velocity (m/s)\n    theta = math.radians(45)  # angle of projection (converted to radians)\n    h = 30  # initial height (meters)\n    \n    # Using the kinematic equation for vertical motion: (v^2) = (u^2) + 2*a*s\n    # where u is the initial vertical velocity component, v is the final vertical velocity component (0 at the max height),\n    # a is the acceleration due to gravity, and s is the displacement (height in this case).\n    # We rearrange to find the time taken to reach the ground: s = ut + 0.5*a*t^2\n    u_vertical = v0 * math.sin(theta)  # initial vertical velocity component\n    # solving the quadratic equation for time to reach the ground\n    # using the quadratic formula: (-b - sqrt(b^2 - 4*a*c))/(2*a),\n    # where a = 0.5 * g, b = -u_vertical, c = -h\n    a = 0.5 * g\n    b = -u_vertical\n    c = -h\n    time_to_ground = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n    \n    # The horizontal velocity component remains constant, as there is no acceleration in the horizontal direction\n    u_horizontal = v0 * math.cos(theta)\n    \n    # At the moment the arrow hits the ground, the vertical velocity component will be: v = u + at\n    v_vertical = u_vertical + g * time_to_ground\n    \n    # Now, we need to calculate the final velocity of the arrow as it hits the ground\n    # The final velocity is the vector sum of the horizontal and vertical components\n    # The magnitude of this vector sum gives the final speed: v = sqrt(v_horizontal^2 + v_vertical^2)\n    final_speed = math.sqrt(u_horizontal**2 + v_vertical**2)\n    \n    return final_speed\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Since each kid must get at least one orange, we give each of them one.\n    remaining_oranges = 13 - 3\n    \n    # Now we need to distribute the remaining oranges to 3 kids.\n    # This is equivalent to putting 2 dividers in the 10 possible positions.\n    # So it's \"10 choose 2\" - combinations of choosing 2 positions from 10.\n    \n    ans = comb(remaining_oranges + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # The smallest possible number with digit sum of 20 divisible by 11\n    # Initialize the smallest number with the smallest digit sum of 20\n    number = 2999 # 2 + 9 + 9 + 9 = 29\n    while True:\n        # Adjust the number to have a digit sum of 20\n        str_num = str(number)\n        digit_sum = sum(int(digit) for digit in str_num)\n        if digit_sum == 20:\n            # Check if the number is divisible by 11\n            if number % 11 == 0:\n                return number\n        number += 1\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if s != '0' and o != '0' and sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    num_food_options = 2     # sandwiches, burgers\n    num_drink_options = 3    # coffee, milk, tea\n    num_dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    # Multiplication Principle: multiply the number of choices for each category\n    total_ways = num_food_options * num_drink_options * num_dessert_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_from_A = 48 - equal_volume\n    return transfer_from_A\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n\n    equation1 = Eq(2 * elephants, 5 * cows)\n    equation2 = Eq(4 * cows, 3 * horses)\n    equation3 = Eq(3 * horses, 5 * pigs)\n    \n    # Since we want to find how many pigs weigh as much as 8 elephants,\n    # we need to express pigs in terms of elephants.\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n\n    # Number of pigs that weigh as much as 8 elephants\n    pigs_as_8_elephants = (8 * solutions[elephants]) / solutions[pigs]\n\n    return pigs_as_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    time = 3\n    rate = symbols('rate')\n\n    equation = Eq(principal * (1 + rate)**time, amount)\n    rate_value = solve(equation, rate)[0]\n\n    # Convert the decimal rate to a percentage\n    rate_percent = rate_value * 100\n\n    return rate_percent\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    # 2 ten-dollar notes is $20, 4 two-dollar notes is $8, and 8 fifty-cent coins is $4\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.5)\n    # He received $0.40 as change\n    change = 0.40\n    # Total cost of the cups\n    total_cost = total_paid - change\n    # Cost per cup\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the price per box of mangoes and l be the price per box of lychees\n    m, l = symbols('m l')\n\n    # The price of each box of lychees is 6 less than 2 times the price of each box of mangoes\n    equation1 = Eq(l, 2*m - 6)\n\n    # The total cost for the cases of mangoes and lychees is $1160\n    equation2 = Eq(24*m + 20*l, 1160)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (m, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_rate = 0.18\n    tax_rate = 0.10\n    \n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    total_weight_3_boxes = (total_weight_5_boxes / 5) * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the singing performances\n    sing_perms = factorial(6)\n    \n    # Calculate the number of slots available for dancing performances\n    # 1 slot between each singing + 1 slot at the beginning + 1 slot at the end\n    dance_slots = 6 + 1\n    \n    # Choose 4 slots out of the available slots to place the dancing performances\n    # This is a combination problem: C(n, k) = n! / (k! * (n-k)!)\n    dance_combinations = factorial(dance_slots) // (factorial(4) * factorial(dance_slots - 4))\n    \n    # Total arrangements are the product of singing_perms and dance_combinations\n    total_ways = sing_perms * dance_combinations\n    \n    return total_ways\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for correct_dora in range(11):\n        points_dora = correct_dora * 10 - (10 - correct_dora) * 5\n        points_justin = points_dora + 15\n        if points_dora + points_justin == 155:\n            return correct_dora\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Since the average for A and B combined is 8, we can set up an equation\n    # 3 groups in Class A sold 12 candies on average: 3 * 12\n    # We don't know the number of groups in Class B but it is given as 4 groups.\n    # The average for all groups combined is 8, the total groups are 3 (from A) + 4 (from B).\n    \n    # With the sum of the averages being (3 * 12) + (4 * x), and the total groups are 7, we have:\n    # (3 * 12 + 4 * x) / 7 = 8\n    # Solving for x gives us the average number of candies sold by each group in Class B.\n    \n    x = symbols('x')\n    equation = Eq((3 * 12 + 4 * x) / 7, 8)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the time Nancy takes to finish the job by herself\n    n = symbols('n')\n    \n    # Since Lee and Nancy together finish the job in 10 hours, their combined work rate is 1/10\n    combined_rate = 1 / 10\n    \n    # Let's denote Lee's work rate as l and Nancy's work rate as n. So, l + (1/n) = 1/10\n    # Also, if Lee works for 6 hours and Nancy for 20 hours, they finish the job: 6l + 20/n = 1\n    \n    # We have two equations:\n    # Eq(l + 1/n, 1/10)\n    # Eq(6*l + 20/n, 1)\n\n    # Let's express one in terms of the other\n    # l = 1/10 - 1/n\n    # Substitute l in the second equation\n    # Eq(6*(1/10 - 1/n) + 20/n, 1)\n\n    # Now we only need to find n\n    equation = Eq(6 * (1/10 - 1/n) + 20/n, 1)\n    solution = solve(equation, n)\n\n    # We only need the positive solution since time cannot be negative \n    ans = [sol for sol in solution if sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    number_of_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let's refer to the original number of passengers as 'x'.\n    # After the first stop, two fifths (2/5) of the passengers got off,\n    # which means 3/5 of the passengers remained.\n    # After the second stop, one third of the remaining passengers got off,\n    # hence 2/3 of the passengers after the first stop are left.\n    # Eventually, there were 22 passengers left.\n\n    # Therefore, we can set up the equation:\n    # (3/5 * 2/3) * x = 22\n    # Solving for x gives us the original number of passengers.\n  \n    x = 22 / (3/5 * 2/3)\n    return int(x)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences to solve:\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    # Our task is to find x using the Chinese Remainder Theorem for the given moduli and remainders.\n    congruences = [(3, 4), (4, 5)]\n    x, _ = solve_congruence(*congruences)\n\n    # Check if the solution is less than 20.\n    # If x is greater or equal to 20, get the equivalent number less than 20.\n    while x >= 20:\n        x -= 20\n\n    return x\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Treat the group of four comics as one book and the group of six fictions as one book\n    # Thus, we have two \"books\" to arrange, and there are 2! ways to arrange these \"books\"\n    group_arrangement = factorial(2)\n\n    # Now, within each group, we need to arrange the individual books\n    # There are 4! ways to arrange the four comics and 6! ways to arrange the six fictions\n    comics_arrangement = factorial(4)\n    fictions_arrangement = factorial(6)\n\n    # The total arrangements is the product of the arrangements of the groups and the arrangements within each group\n    total_arrangements = group_arrangement * comics_arrangement * fictions_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n    return comb(flavours, doughnuts)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 9\n    c = 18\n\n    # Find gcd of first two numbers\n    gcd_ab = gcd(a, b)\n    \n    # Now find gcd of the result with the third number\n    ans = gcd(gcd_ab, c)\n    \n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "def solution():\n    from math import comb\n    ans = comb(10, 2)\n    return ans\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n    \n    ratio_white_to_milk_to_dark = Eq(white/milk, 3/7) & Eq(milk/dark, 7/5) & Eq(dark - white, 8)\n    \n    chocolates = solve(ratio_white_to_milk_to_dark, (white, milk, dark))\n    \n    return chocolates[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    for total_students in range(1, 1000):  # assuming a practical class size upper limit\n        badminton_students = total_students // 4 + 3\n        remaining_students = total_students - badminton_students\n        table_tennis_students = remaining_students // 3 - 3\n        football_students = total_students - badminton_students - table_tennis_students\n        if football_students == 25:\n            return total_students\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Total green balls count\n    green_balls = 10\n    # Red balls count initially\n    red_balls = 5\n\n    # Let x be the number of red balls added\n    x = symbols('x')\n\n    # Set the equation based on the condition: Probability of getting green is 1/3\n    equation = Eq((green_balls / (green_balls + red_balls + x)), 1/3)\n\n    # Solve the equation\n    red_balls_added = solve(equation, x)\n\n    # Return the answer\n    return red_balls_added[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    ans = (large_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n\n    ans = meters * centimeters_per_meter\n\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5  # Avril spends 5p\n    fraction = 1 / 4  # One-quarter\n    total_money = spent / fraction  # Calculate the total money Avril had originally\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n    \n    # After transactions, Sam has 96 stickers more than Peter\n    equation2 = Eq(0.8 * sam - 0.25 * (peter + 0.2 * sam), peter + 0.25 * (peter + 0.2 * sam) - 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a power can be found by taking the power of the ones digit of the base\n    # and then taking the ones digit of the result.\n    \n    # For 32^33, we only care about the ones digit, which is 2\n    # 2 raised to any power has a cyclicity of 2^1 = 2, 2^2 = 4, 2^3 = 8, 2^4 = 6 and then repeats.\n    # Thus, we find the power modulo 4 to find the correct ones digit in the cycle.\n    ones_digit_32_pow_33 = pow(2, 33 % 4)  # Here 33 % 4 is the remainder of 33 divided by the cycle length 4.\n    \n    # Similarly, for 22^29, we only care about the ones digit, which is 2\n    # Using the same cyclicity, we find the ones digit for 2 raised to the 29th power\n    ones_digit_22_pow_29 = pow(2, 29 % 4)  # Here 29 % 4 is the remainder of 29 divided by the cycle length 4.\n    \n    # Now find the ones digit of the final result by subtracting the two values and getting the ones digit\n    final_ones_digit = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    \n    return final_ones_digit\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    # initialize variables\n    low = 1\n    high = 300  # estimate, subject to change as we use binary search\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_sixes(mid) == 18:\n            # Check if this point actually has 18 appearances of '6'\n            # if it is, check if it is the first point with 18 '6's.\n            if count_sixes(mid - 1) < 18:\n                return mid\n            else:\n                high = mid - 1\n        elif count_sixes(mid) < 18:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # if no solution found, though problem guarantees there is one\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Loop through all possible outcomes where each dice has a different number\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    \n    ans = fruits * vegetables\n    \n    return ans\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given ratio 4:9\n    # Let's assume missing number is x, then x~:81=4:9\n    # Here ~ represents the proportional sign.\n    # So we can say that x/81 = 4/9\n    # Cross multiply to solve for x\n    x = 81 * (4/9)\n    return int(x)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    jump_up = 5\n    slip_down = 3\n    distance_needed = 40\n    total_jumps = 0\n    current_height = 0\n\n    while current_height < distance_needed:\n        total_jumps += 1\n        current_height += jump_up\n        if current_height >= distance_needed:\n            break\n        if total_jumps % 2 == 0:\n            current_height -= slip_down\n\n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = 0\n    for n in range(1, 2013):\n        ans += (2*n)**3 / (n * (n+1) * (n+2))\n    ans += 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 16 == 0 and (i + 1) % 5 == 0 and (int(i**0.5))**2 == i:\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15\n    n = 6 # we want the 6th term\n    next_number = first_term + (n - 1) * common_difference\n    return next_number\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    total_marks = 152\n    correct_mark = 4\n    incorrect_mark = -2\n\n    # Let x be the number of correct answers\n    # then (total_questions - x) will be the number of incorrect answers\n    # Set up the equation:\n    # 4x + (-2)*(total_questions - x) = total_marks\n    # Solve for x:\n\n    x = (total_marks + 2 * total_questions) / (correct_mark - incorrect_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To share 16 sausages equally among 24 people, each person should get 16/24 of a sausage. \n    # Since 16/24 simplifies to 2/3, each sausage must be cut into three parts. \n    # Two cuts per sausage are required to divide it into three parts.\n    # Therefore for 16 sausages, we need 16 * 2 cuts.\n    cuts_needed = 16 * 2\n    return cuts_needed\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Calculate total permutations (without constraint)\n    total_permutations = factorial(len(\"RAINBOW\"))\n\n    # Calculate permutations when vowels (A, I, O) are together\n    # Treat the vowels as a single entity, so we have 5 entities (AI0 + R + N + B + W)\n    vowels_together = factorial(5) * factorial(3)\n\n    # Subtract permutations with vowels together from the total to get the answer\n    ans = total_permutations - vowels_together\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_in_5_years = solutions[wendy] + 5\n\n    return wendy_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    eq1 = Eq(A, B + 350)\n    eq2 = Eq(B, 2 * (A - 500))\n\n    solution = solve((eq1, eq2), (A, B))\n\n    return solution[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    a = 51 - 39\n    b = 147 - 51\n    c = 147 - 39\n\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle says 3 sentences to each of 5 members\n    lovelle_to_others = 5 * 3\n    \n    # Each of the 5 members says 3 sentences back to Lovelle\n    others_to_lovelle = 5 * 3\n    \n    # Total sentences involving Lovelle\n    total_sentences_lovelle = lovelle_to_others + others_to_lovelle\n    \n    # There are also 12 members who did not speak to Lovelle\n    # Each of those can speak to other 11 members (excluding Lovelle)\n    # Each conversation is counted twice (A to B and B to A), so we divide by 2\n    total_sentences_not_lovelle = (12 * 11) // 2\n    \n    # For each member who did speak to Lovelle, they can speak to each other\n    # Excluding conversations with Lovelle (which were counted earlier)\n    # We subtract 5 from total not-speaking-to-Lovelle members and divide by 2\n    total_sentences_among_speakers = ((12-5) * (12-6)) // 2\n    \n    # Total sentences in the team\n    total_sentences = total_sentences_lovelle + total_sentences_not_lovelle + total_sentences_among_speakers\n    \n    # Total team members are the speakers to Lovelle, the non-speakers, and Lovelle herself\n    total_members = 5 + 12 + 1\n\n    return total_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Assuming the pages start from 1\n    # 1-9 uses 1 digit per number, 9 pages total\n    pages_with_1_digit = 9\n    digits_used_1_digit = pages_with_1_digit * 1\n    \n    # 10-99 uses 2 digits per number, 90 pages total (99 - 10 + 1)\n    pages_with_2_digits = 99 - 10 + 1\n    digits_used_2_digits = pages_with_2_digits * 2\n    \n    # 100-325 uses 3 digits per number, 325 - 100 + 1 pages total\n    pages_with_3_digits = 325 - 100 + 1\n    digits_used_3_digits = pages_with_3_digits * 3\n    \n    # Total digits used\n    total_digits = (digits_used_1_digit + digits_used_2_digits + \n                    digits_used_3_digits)\n    \n    return total_digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'STATISTIC'\n    word_len = len(word)\n\n    # Total permutations\n    total_perms = factorial(word_len) // (factorial(word.count('S')) * factorial(word.count('T')) * \n                                          factorial(word.count('A')) * factorial(word.count('I')) * \n                                          factorial(word.count('C')))\n\n    # Permutations where T's are together\n    word_with_together_ts = 'STT' + word.replace('T', '')\n    perms_with_together_ts = factorial(len(word_with_together_ts)) // (factorial(word_with_together_ts.count('S')) * \n                                                                       factorial(3) *  # 'T' appears 3 times, considering them together\n                                                                       factorial(word_with_together_ts.count('A')) * \n                                                                       factorial(word_with_together_ts.count('I')) * \n                                                                       factorial(word_with_together_ts.count('C')))\n    \n    # Subtract permutations with T's together from total permutations\n    ans = total_perms - perms_with_together_ts\n    \n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_sales = 2140\n    second_week_sales = first_week_sales - 320\n    third_week_sales = second_week_sales - 210\n\n    total_sales = first_week_sales + second_week_sales + third_week_sales\n    return total_sales\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 // 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 100):  # Define a reasonable range to look for the solution\n        remaining = gums - 2  # Ate 2 gums in Music lesson\n        shared = remaining / 3  # Shared one third with friends\n        if shared.is_integer():  # The shared amount must be an integer\n            remaining_after_shared = remaining - shared\n            if (remaining_after_shared % 4) == 0:  # Must be able to eat an equal amount in the next 4 lessons\n                return gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n    \n    # Sarah had $20 more Pokemon cards than Mark\n    equation1 = Eq(sarah, mark + 20)\n\n    # Sarah bought $16 extra Pokemon cards, and she had $3 times more than Mark had\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    num = 418\n    ans = round(num, -1)\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # Max attempts would be if the last key the explorer tries is the correct one for each chest\n    # Chest 1: 9 attempts (9 keys to try)\n    # Chest 2: 8 attempts (8 remaining keys)\n    # Chest 3: 7 attempts (7 remaining keys)\n    # Chest 4: 6 attempts (6 remaining keys)\n\n    max_attempts = 9 + 8 + 7 + 6\n    return max_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern_diff = [3445 - 2945, 3245 - 3445, 3745 - 3245, 4045 - 3745, 3845 - 4045]\n    missing_number = 3745 + pattern_diff[3]  # Follow the detected pattern\n\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(1, 26, 2))\n    return sum_of_squares\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    \n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mushrooms_first_hour = symbols('mushrooms_first_hour')\n    \n    # Total mushrooms\n    total_mushrooms = 40\n    \n    # Equation describing the relationship between the first and second hour\n    equation = Eq(mushrooms_first_hour + 26, total_mushrooms - mushrooms_first_hour)\n    \n    # Solve the equation to find the number of mushrooms gathered in the first hour\n    mushrooms_first_hour = solve(equation, mushrooms_first_hour)[0]\n    \n    # Calculate the number of mushrooms gathered in the second hour\n    mushrooms_second_hour = total_mushrooms - mushrooms_first_hour\n    \n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    original_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    value_after_years = original_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85  # diameter of one coin in cm\n    num_coins = 11  # number of coins\n\n    # Total length is the length of 10 gaps plus one coin's diameter\n    total_length = coin_diameter + (num_coins - 1) * (coin_diameter / 2)\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    n_terms = 14\n    \n    common_difference = second_term - first_term\n    n_term = first_term + (n_terms - 1) * common_difference\n\n    sum_sequence = n_terms * (first_term + n_term) / 2\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Given it's a proportion problem where 3/12 = □/20\n    cross_product = 3 * 20  # Cross multiply the known terms\n    ans = cross_product // 12  # Divide by the remaining term to solve for the unknown (□)\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    ans = (participants * (participants - 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    people = 8\n    # Subtract 1 because in a circular arrangement, the starting point is irrelevant\n    different_orders = factorial(people - 1)\n    return different_orders\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    base_2_last_digit = 2 ** (2017 % 4)\n    base_3_last_digit = 3 ** (2017 % 4)\n    last_digit = (base_2_last_digit * base_3_last_digit) % 10\n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable x be the initial number of ants\n    x = symbols('x')\n    \n    # Equation representing the problem\n    equation = Eq(x - (3/4)*x - (2/5)*(1/4)*x + 185, 2*x)\n\n    # Solve the equation\n    num_ants = solve(equation, x)\n\n    return num_ants[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    total_books = 89 + 11\n    cost_per_book = 13\n    total_cost = total_books * cost_per_book\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a1, d = symbols('a1 d')\n    \n    # The sum of the first four terms of an arithmetic progression\n    sum_first_four = a1 + (a1 + d) + (a1 + 2*d) + (a1 + 3*d)\n    \n    # The sum of the last four terms of the same arithmetic progression\n    sum_last_four = (a1 + 4*d) + (a1 + 5*d) + (a1 + 6*d) + (a1 + 7*d)\n    \n    # The equation described by the problem\n    equation = Eq(sum_first_four, sum_last_four - 32)\n    \n    # Solve for the common difference d\n    sol = solve(equation, d)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8  # Next position since the sequence starts with 1 and we have 7 numbers already\n    next_num = n**2  # Next number is the square of its position in the sequence\n    return next_num\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def calculate_number(n):\n        if n == 1:\n            return 1\n        else:\n            prev_number = calculate_number(n - 1)\n            next_number = 2 * prev_number + 4\n            # If the number is larger than 100, remove the hundreds digit\n            if next_number >= 100:\n                next_number %= 100\n            return next_number\n\n    ans = calculate_number(2022)\n    return ans\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    red_flashes_per_minute = 4\n    green_flashes_per_minute = 6\n\n    red_green_lcm = lcm(red_flashes_per_minute, green_flashes_per_minute)\n\n    flashes_per_hour = 60 // red_green_lcm\n\n    return flashes_per_hour + 1  # Including the first and the last time\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 42):\n        if isprime(a):\n            for b in range(2, 42):\n                if isprime(b) and 3 * a + 7 * b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price_with_30_percent_profit = 6500\n    profit_with_30_percent = selling_price_with_30_percent_profit * 0.30\n    cost_price = selling_price_with_30_percent_profit - profit_with_30_percent\n    \n    desired_profit = 5000\n    percentage_of_desired_profit = (desired_profit / cost_price) * 100\n\n    return percentage_of_desired_profit\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume = (120 * 5) / 2  # Since juice is 2/5 of the drink\n    water_volume_per_bottle = total_volume - 120\n    water_needed_for_six_bottles = water_volume_per_bottle * 6\n    return water_needed_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kg to grams\n    return n\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150  # feet per minute\n    friend_speed = 200  # feet per minute\n    walking_time = 10  # minutes\n    \n    # Distance each of them has walked away from school\n    simon_distance = simon_speed * walking_time\n    friend_distance = friend_speed * walking_time\n    \n    # Total distance between them after walking in opposite directions for 10 minutes\n    total_distance_walked = simon_distance + friend_distance\n    \n    # Simon runs back to school at twice his original speed\n    simon_run_speed = simon_speed * 2\n    \n    # Time taken by Simon to get back to school\n    simon_run_time = simon_distance / simon_run_speed\n    \n    # Distance friend walks during the time Simon runs back to school\n    friend_walk_distance_during_simon_run = friend_speed * simon_run_time\n    \n    # Total distance between Simon and his friend when Simon reaches school\n    total_distance_separation = friend_distance + friend_walk_distance_during_simon_run\n\n    return total_distance_separation\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm[:5], 0, perm[5], perm[4]\n        if m == 0:  # M cannot be zero since it's the first digit of a number\n            continue\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        money = m * 10000 + o * 1000 + n * 100 + e * 10 + y\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = factorial(7) # Total arrangements for 7 items\n    identical_items = factorial(2) * factorial(2) * factorial(2)\n    arrangements = total_bells_stars_balls // identical_items # Divide by factorial for each set of identical items\n    return arrangements\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Eddie: 1 min, Jack: 2 mins, Rose: 5 mins, Mary: 10 mins\n    \n    # The strategy for the shortest time is to minimize the number of times\n    # the slowest person (Mary) has to cross the bridge. We send Mary across with\n    # the fastest person (Eddie), and then send Eddie back, so it takes 10 + 1 = 11 mins.\n    \n    # Next, we send the next slowest (Rose) with the fastest person (Eddie),\n    # which takes 5 minutes, and we send back the fastest person (Eddie) again taking 1 min,\n    # making a total of 5 + 1 = 6 mins.\n    \n    # Finally, we can send the two fastest people (Eddie and Jack) across together,\n    # taking 2 mins.\n\n    # Summing up all the times for the optimal strategy we get:\n    # First trip: Mary and Eddie -> 10 minutes (Mary is over)\n    # Second trip: Eddie returns -> 1 minute (Eddie is back)\n    # Third trip: Rose and Eddie -> 5 minutes (Rose is over)\n    # Fourth trip: Eddie returns -> 1 minute (Eddie is back)\n    # Fifth trip: Eddie and Jack -> 2 minutes (All are over)\n\n    total_time = 10 + 1 + 5 + 1 + 2  # The total time for all of them to cross\n\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # liters\n    container_ratio = 0.25\n    cup_volume = 150 / 1000  # converting ml to liters\n    number_of_cups = 14\n\n    container_volume = initial_volume * container_ratio\n    cups_total_volume = cup_volume * number_of_cups\n    remaining_water = initial_volume - (container_volume + cups_total_volume)\n\n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # This is a classic problem of derangements, often solved using !n (subfactorial of n).\n    # A derangement is a permutation of the elements of a set, such that no element appears in its original position.\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"2{i}{j}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 0\n    for i in range(1, 100):\n        if i % 7 == 0:\n            n = i\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # time in minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    \n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    total_pages = symbols('total_pages')\n    \n    # Original rate\n    original_time = 8\n    # New rate, 2 days earlier\n    new_time = original_time - 2\n    \n    # Equation for original rate\n    original_rate = total_pages / original_time\n    # Equation for new rate with 2 more pages per day\n    new_rate = total_pages / new_time\n    \n    # Set up the equation based on the condition that new_rate = original_rate + 2\n    equation = Eq(new_rate, original_rate + 2)\n    \n    # Solve the equation\n    solution = solve(equation, total_pages)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    increase_rate = 0.10\n    decrease_rate = 0.10\n    last_year_value = 11000\n\n    # Calculate the original price based on last year's value\n    original_price = last_year_value / (1 + increase_rate)\n    \n    # Calculate this year's value based on the decrease rate\n    this_year_value = original_price * (1 - decrease_rate)\n    \n    # Calculate profit or loss comparing with the original price\n    profit_or_loss = this_year_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking bread is 5 loaves per 20 minutes\n    # so in one minute Pip can bake 5/20 loaves\n    pip_rate_per_minute = 5 / 20\n\n    # Bud's rate of baking bread is 3 loaves per 15 minutes\n    # so in one minute Bud can bake 3/15 loaves\n    bud_rate_per_minute = 3 / 15\n\n    # Total rate of baking bread by Pip and Bud in one minute\n    total_rate_per_minute = pip_rate_per_minute + bud_rate_per_minute\n\n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves_in_40_minutes = total_rate_per_minute * 40\n\n    return total_loaves_in_40_minutes\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Worst case scenario:\n    # Yohan picks all red and black socks before getting a pair of white socks\n    max_red_socks = 10\n    max_black_socks = 10\n\n    # As soon as he picks one white sock, the next one could be a pair\n    white_socks_for_a_pair = 2\n\n    # At most socks Yohan needs to pick to get a pair of white socks\n    ans = max_red_socks + max_black_socks + white_socks_for_a_pair\n\n    return ans\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = (12*a)/(4) + (2*a)*(5)\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cookies = symbols('total_cookies')\n\n    equation = Eq((3/8 + 1/6) * total_cookies + 33, total_cookies)\n    \n    solutions = solve(equation, total_cookies)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    # Write 1 three times, 2 four times, 3 five times, and so on until 9 eight times\n    for i in range(1, 10):\n        sequence.extend([i] * (i+2))\n    \n    # Calculate the median of the sequence\n    length = len(sequence)\n    if length % 2 == 1:\n        # If the sequence has odd length, take the middle number\n        ans = sequence[length // 2]\n    else:\n        # If the sequence has even length, take the average of the two middle numbers\n        ans = (sequence[length // 2 - 1] + sequence[length // 2]) / 2\n\n    return ans\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let x be Jemma's number\n    # According to the problem, we have (x + 3) * 5 = 35\n    # To find x, we need to perform the inverse operations\n    # We start by dividing 35 by 5\n    result_after_multiplication = 35 / 5\n    # Then we subtract 3 from the result of the division\n    jemmas_number = result_after_multiplication - 3\n    \n    return jemmas_number\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Assuming the year is 2020, the 5th May is Monday\n    end_date = datetime(2020, 6, 7)\n    \n    sundays_count = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n    \n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r and w be the original number of red and white marbles, respectively.\n    r, w = symbols('r w')\n\n    # Let p be the number of red marbles added by Pip.\n    p = symbols('p')\n    \n    # The equation for the ratio after Pip adds red marbles.\n    equation1 = Eq((r + p) / w, 5 / 3)\n    # The equation for the ratio after Bud adds white marbles (which is 100 more than p).\n    equation2 = Eq(r / (w + p + 100), 5 / 4)\n    # The equation for the original ratio of red to white marbles.\n    equation3 = Eq(r / w, 3 / 2)\n\n    # Solve the system of equations for r, w, and p.\n    solutions = solve((equation1, equation2, equation3), (r, w, p))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    number_of_buckets = barrel_capacity // bucket_capacity\n    return number_of_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    packets = 25\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # Divisibility rule for 3: A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # Divisibility rule for 4: A number is divisible by 4 if the last two digits form a number divisible by 4.\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if (5 + K + 2 + 7 + K) % 3 == 0 and int(str(number)[-2:]) % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n\n    # Initial ratio\n    original_ratio = Eq(cookies / brownies, 4/3)\n    \n    # Ratio after giving away 6 brownies\n    adjusted_ratio = Eq(cookies / (brownies - 6), 12/7)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, adjusted_ratio), (cookies, brownies))\n\n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    companies_original = 4\n    days_original = 5\n    expressway_original_length = 900\n\n    companies_new = 6\n    expressway_new_length = 5400\n\n    # Calculate the work rate for the original scenario (work per company per day)\n    work_rate_per_company_per_day = expressway_original_length / (companies_original * days_original)\n    \n    # Calculate total days needed for the new scenario\n    days_needed = expressway_new_length / (companies_new * work_rate_per_company_per_day)\n    \n    return days_needed\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Initial buy cost\n    buy_cost1 = 10\n    # First sell price\n    sell_price1 = 20\n    # Second buy cost\n    buy_cost2 = 30\n    # Second sell price\n    sell_price2 = 40\n\n    # Total earnings = (First sell price - Initial buy cost) + (Second sell price - Second buy cost)\n    earnings = (sell_price1 - buy_cost1) + (sell_price2 - buy_cost2)\n\n    return earnings\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n\n    price_per_ticket = adam_spent / adam_tickets\n\n    claire_spent = 124\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    last_term = 31\n    term_position = 10\n    difference = 3\n    first_term = last_term - difference * (term_position - 1)\n    \n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Total sum of numbers 1 through 8\n    total_sum = sum(range(1, 9))\n    \n    # Sum of Player One's cards\n    player_one_sum = 23\n    \n    # Remaining sum for Player Two\n    player_two_sum = total_sum - player_one_sum\n    \n    # Since we want the highest single card for Player Two,\n    # we would try to minimize the other cards.\n    # This means giving Player Two the lowest cards first\n    player_two_cards = sorted(range(1, 9), reverse=True)\n    \n    # Remove cards for Player One (maximize the rest for Player Two)\n    for card in player_two_cards[:]:\n        if player_two_sum - card >= 3:  # Reserve at least 1+2 for the other cards\n            player_two_sum -= card\n            player_two_cards.remove(card)\n    \n    # The highest card now on top of Player Two's cards\n    highest_card = player_two_cards[0]\n\n    return highest_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, each pair has 2 shoes\n    time_per_shoe = 2  # 2 minutes to clean one shoe\n    cobblers = 2  # Number of cobblers\n\n    # Since both cobblers work at the same time, we divide the total work by the number of cobblers.\n    time_to_clean_all = (total_shoes * time_per_shoe) / cobblers\n\n    return time_to_clean_all\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    # Using the property: a*b - 1 = (a-1)(b+1)\n    # We can simplify the equation by realizing that 2019*2020 - 1 = (2019-1)*(2020+1) = 2018*2021\n    # This simplifies the fraction to: (2019+2018*2020)/(2018*2021)\n    # Further simplification leads to (2019/2018) + (2018*2020/2018*2021)\n    # The 2018 terms cancel out in the second term: 1 + (2020/2021)\n    # This means (2019/2018) + (2020/2021) is our simplified form which equals (2019 + 2020)/(2018 + 2021)\n    \n    ans = (2019 + 2020) / (2018 + 2021)\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score_correct = 4\n    score_wrong = -1\n    total_score = 168\n\n    # We will assume all the attempted questions are answered correctly.\n    # Let x be the number of questions answered correctly.\n    # Then the number of questions answered incorrectly would be (attempted_questions - x).\n    # We can set up the equation: score_correct * x + score_wrong * (attempted_questions - x) = total_score\n\n    for x in range(attempted_questions + 1):\n        if score_correct * x + score_wrong * (attempted_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    \n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # Let the number be x\n    # According to the problem, two-thirds of x is 24, so:\n    # (2/3) * x = 24\n    # To find x, we rearrange the equation:\n    # x = (24 * 3) / 2\n    x = (24 * 3) / 2\n    \n    # Now we need to find three-quarters of the same number, x\n    # So, (3/4) * x\n    ans = (3/4) * x\n    \n    return ans\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    total_sum = sum(number for number in range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Since Mr Manson wants at least 1000 markers,\n    # find how many times the lcm fits into 1000 and then add one set if there's a remainder\n    min_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        min_packs += 1\n\n    # Multiply by least common multiple to find the minimum number of markers\n    min_markers = min_packs * pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    word = 'CHALLENGE'\n    letters_count = factorial(len(word) - 2)   # Consider AEE as one letter\n\n    vowels_count = factorial(3) // factorial(2) # Divide by factorial(2) because 'E' appears twice\n\n    ans = letters_count * vowels_count\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for each digit\n    B, C, D, E = symbols('B C D E', integer=True)\n\n    # Each letter represents a different digit, so they are within the range of 0 to 9\n    # Also, since B and D are the first digits of a 4-digit number, they cannot be 0\n    digits_range = range(10)\n    B_range = range(1, 10)\n    D_range = range(1, 10)\n\n    # Create the equations based on the problem statement\n    # 1000*B + 100*C + 10*C + D + 1000*C + 100*D + 10*B + C = 1000*B + 100*D + 10*E + C\n    eq = Eq(1000*B + 100*C + 10*C + D + 1000*C + 100*D + 10*B + C, 1000*B + 100*D + 10*E + C)\n\n    # Find all solutions for the equation\n    solutions = solve(eq)\n\n    # Filter solutions to ensure each letter represents a different digit\n    # and they are within the allowed range\n    for sol in solutions:\n        if sol[B] in B_range and sol[C] in digits_range and sol[D] in D_range and sol[E] in digits_range \\\n          and len(set(sol.values())) == 4:\n            # Construct the number BDEC from the solution\n            BDEC_value = sol[B]*1000 + sol[D]*100 + sol[E]*10 + sol[C]\n            return BDEC_value\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_sales / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    dividend = None\n    for quotient in range(1, 100):  # Iterate through possible quotients\n        divisor = quotient\n        # Calculate potential dividend given the divisor and remainder\n        potential_dividend = divisor * quotient + 7\n        if potential_dividend % divisor == 7:\n            dividend = potential_dividend\n            break\n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    num_years = 2\n    final_value = initial_value * ((1 - depreciation_rate) ** num_years)\n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cars, bikes, lorries = symbols('cars bikes lorries')\n    \n    equation1 = Eq(cars, (4/3) * bikes)\n    equation2 = Eq(bikes, lorries + (1/4) * lorries)\n    equation3 = Eq(cars + bikes + lorries % 2, 0)\n    \n    # Iterate through the possible number of lorries to find a solution less than 100\n    for lorries_count in range(1, 100):\n        # Calculate the number of bikes and cars based on the number of lorries\n        bikes_count = lorries_count + (1/4) * lorries_count\n        cars_count = (4/3) * bikes_count\n        # Check if total is even and less than 100\n        if (cars_count + bikes_count + lorries_count) < 100 and (cars_count + bikes_count + lorries_count) % 2 == 0:\n            # Check if all counts are integers\n            if all(isinstance(i, int) for i in [cars_count, bikes_count, lorries_count]):\n                return (int(cars_count), int(bikes_count), int(lorries_count))\n    \n    return None\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    row_difference = 2\n    row_count = 12\n    \n    # This is an arithmetic sequence problem \n    # The nth term in an arithmetic sequence is given by: a + (n-1) * d\n    # a is the first term, n is the term number, and d is the difference between terms\n    twelfth_row_seats = first_row_seats + (row_count - 1) * row_difference\n    \n    return twelfth_row_seats\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    entrance_capacity = 25\n\n    # Single entrance scenario\n    minutes_single_entrance = 16\n\n    # Calculate the total number of visitors in 16 minutes\n    total_visitors = visitors_per_minute * minutes_single_entrance\n\n    # Two entrances scenario\n    entrance_capacity_two_entrances = entrance_capacity * 2\n    minutes_two_entrances = total_visitors / entrance_capacity_two_entrances\n\n    return minutes_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_root = 245**(1/3)\n    p = round(cube_root)**3 / 245\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days_to_read = total_pages // pages_per_day\n    if total_pages % pages_per_day > 0:\n        days_to_read += 1\n    return days_to_read\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.1\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.2\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = \"3\" * 1000  # The decimal part of 1/3 is a recurring sequence of \"3\"\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    \n    original_doubled = final_number - added_number\n    original_number = original_doubled / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, lemons = symbols('oranges lemons')\n    \n    # Set up the proportions based on the description\n    initial_ratio = Eq(oranges/lemons, 3/5)\n    final_ratio = Eq((oranges - 48)/lemons, 1/2)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    \n    # effective_distance is the distance that the snail covers in one full day (day + night)\n    effective_distance = day_distance - night_distance\n    \n    # The snail will reach at least 5 metres on the first day, and then covers the rest in full days\n    remaining_distance_after_first_day = total_distance - day_distance\n    \n    # The number of full days needed, not accounting for the final climb\n    full_days_needed = remaining_distance_after_first_day // effective_distance\n    \n    # If there's a remainder, the snail will exit the following day\n    if remaining_distance_after_first_day % effective_distance > 0:\n        full_days_needed += 1\n    \n    # The day the snail will exit is the number of full days plus the initial partial day\n    exit_day = full_days_needed + 1\n    \n    return exit_day\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits: apples, pears, cherries\n    # Students can choose:\n    # 1 fruit of one type (3 possibilities: apple / pear / cherry)\n    # 1 fruit of two different types (3 combinations: apple+pear / apple+cherry / pear+cherry)\n    # 1 fruit of all three types (1 possibility)\n    # Total unique choices = 3 (single fruit) + 3 (two fruits) + 1 (three fruits) = 7\n    # According to the Pigeonhole Principle, to ensure that two students choose the same combination,\n    # we need one more student than there are pigeonholes.\n    \n    number_of_fruit_combinations = 7\n    students_needed = number_of_fruit_combinations + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "from itertools import product\n\ndef solution():\n    burgers = ['chicken', 'beef']\n    sides = ['fries', 'mashed', 'broccoli']\n    drinks = ['sprite', 'coke', 'fanta', 'lemonade', 'iced_tea']\n    \n    combos = list(product(burgers, sides, drinks))\n    return len(combos)\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # Avril spent 10p, which is one-quarter of her money.\n    total_money = spent * 4  # If 10p is one-quarter, multiply by 4 to get the total.\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # number of legs for each animal\n    duck_legs = 3 * 2\n    parrot_legs = 2 * 2\n    rabbit_legs = 1 * 4\n    # fixed number of legs from ducks, parrots, and rabbit\n    fixed_legs = duck_legs + parrot_legs + rabbit_legs\n    \n    # total legs\n    total_legs = 32\n    \n    # legs from cats\n    cat_legs = total_legs - fixed_legs\n    \n    # each cat has 4 legs\n    num_cats = cat_legs // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    A = 45\n    B = 75\n    C = 210\n    \n    g = gcd(A, B)\n    ans = gcd(g, C)\n\n    return ans\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age = symbols('judy_age father_age')\n    years_ago = symbols('years_ago')\n\n    # Judy's father is 33 years older than her\n    eq1 = Eq(father_age, judy_age + 33)\n    # This year, the sum of their ages is 63 years old\n    eq2 = Eq(judy_age + father_age, 63)\n    # Solve for Judy and her father's current age\n    current_ages = solve((eq1, eq2), (judy_age, father_age))\n    \n    # How many years ago her father's age was four times her age?\n    # (father_age - years_ago) = 4 * (judy_age - years_ago) \n    eq3 = Eq(current_ages[father_age] - years_ago, 4 * (current_ages[judy_age] - years_ago))\n    years_ago_solution = solve(eq3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    inner_result = phi(8, 3)\n    ans = phi(4, inner_result)\n    return ans\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the current age of the older brother and y be the current age of the younger brother\n    x, y = symbols('x y')\n\n    # Age difference between the brothers remains constant\n    age_difference = x - y\n\n    # When the age of the older brother was y, the younger brother was 12\n    equation1 = Eq(x - age_difference, 12)\n\n    # When the younger brother becomes x, the older brother will be 27\n    equation2 = Eq(y + age_difference, 27)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n    least_common_multiple = lcm(6, 8, 9, 15)\n    multiple = least_common_multiple\n    while multiple < 1000:\n        multiple += least_common_multiple\n    return multiple\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of rooms and y be the total number of students.\n    x, y = symbols('x y')\n\n    # If there are 4 people in each room, 40 students don't have rooms.\n    eq1 = Eq(4*x + 40, y)\n    \n    # If there are 6 people in each room, there are 24 extra beds.\n    eq2 = Eq(6*x, y + 24)\n    \n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_number_wanted = 102\n\n    difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    first_term = tenth_term - (10 - 1) * difference\n    wanted_term = first_term + (term_number_wanted - 1) * difference\n\n    return wanted_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3 / 5\n\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left = total_sweets - sweets_eaten\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age = 9\n    john_age = 5\n    years_until_jane_is_15 = 15 - jane_age\n    john_age_when_jane_is_15 = john_age + years_until_jane_is_15\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    # Find multiples of 4 between 10 and 20\n    multiples_of_4 = [i for i in range(10, 21) if i % 4 == 0]\n    \n    # Find factors of 36\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n    \n    # Find the common number between the multiples of 4 and factors of 36\n    common_numbers = set(multiples_of_4).intersection(factors_of_36)\n    \n    # Since there should be only one such number, we can return the only element\n    return common_numbers.pop()\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price  # 20% above cost price\n    selling_price = 0.80 * marked_price  # Sold at 80% of the marked price\n    loss = marked_price - selling_price\n\n    equation = Eq(loss, 40)\n\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    # Perform the calculation inside the parentheses and multiplication first\n    to_subtract = 7 + (3 * 11)\n    from_which_to_subtract = (7 + 3) * 11\n\n    # Subtract the values\n    ans = from_which_to_subtract - to_subtract\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # X and Y together fill the tank in 6 minutes\n    rate_XY = 1 / 6\n    \n    # X alone takes 10 minutes to fill the tank\n    rate_X = 1 / 10\n    \n    # Using the inclusion-exclusion principle to find Y's rate\n    rate_Y = rate_XY - rate_X  # This is the rate at which Y fills the tank\n    \n    # Since rate is (1 / time), time is (1 / rate)\n    time_Y = 1 / rate_Y\n    \n    return time_Y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    total_apples = 20\n    total_strawberries = 30\n    total_both = 10\n    total_neither = 5\n\n    total_students = (total_apples + total_strawberries - total_both) + total_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of markers Xuanrui and Yaokuan initially have.\n    x, y = symbols('x y')\n\n    # Equation 1: Total markers Xuanrui and Yaokuan have before any transactions.\n    eq1 = Eq(x + y, 708)\n\n    # Equation 2: Markers left with Xuanrui after giving away 532.\n    eq2 = Eq(x - 532, y - (3/7) * y)\n\n    # Solve the simultaneous equations to find the value of x.\n    solution = solve((eq1, eq2), (x, y))\n\n    return solution[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_rate = 0.12  # 12%\n    discount_amount = usual_price * discount_rate\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Let x be the number of correct answers\n    for x in range(11):  # There are only 10 questions, so we iterate from 0 to 10\n        # Points for correct answers = 6 * x\n        # Points for incorrect answers = 2 * (10 - x) (because he loses 2 points for each wrong answer)\n        # Total points = Points for correct answers - Points for incorrect answers\n        if 6 * x - 2 * (10 - x) == 44:\n            return x\n            \nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    facts = [1, 2, 6, 24, 120, 720, 5040, 40320]\n    sum_facts = sum(facts)\n    ans = sum_facts % 100\n    return ans\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_A = 300 * 0.20\n    sugar_B = 300 * 0.30\n    \n    # Calculate the total volume of the mixture\n    total_volume = 300 + 300\n    \n    # Calculate the total amount of sugar in the mixture\n    total_sugar = sugar_A + sugar_B\n    \n    # Calculate the concentration of sugar in the mixture\n    concentration = (total_sugar / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    total_marbles = 1442\n\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) // 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    exchange_rate = 2.50  # 1 pound is worth $2.50\n    \n    pounds = dollars / exchange_rate\n    \n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes and y be the number of $10-notes Theia had initially\n    total_notes = 95\n    exchanged_notes = 175\n\n    # After exchanging, she only has $2-notes, which is 5 times the number of $10-notes plus the original $2-notes\n    # So x + 5y = 175 (after exchanging all $10-notes)\n    \n    # But initially, she had 95 notes in total\n    # So x + y = 95 (initial count of notes)\n\n    # Solve the equations:\n    # x + 5y = 175\n    # x + y = 95\n    # Subtracting the second equation from the first gives:\n    # 4y = 80\n    # So y, the number of $10-notes originally, is:\n    y = 80 // 4\n\n    # Substitute y back into x + y = 95 to find x, the number of $2-notes originally\n    x = total_notes - y\n\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    train_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap = 1\n\n    # Calculate the length of the train without the head\n    remaining_length = train_length - head_length\n    # Calculate the number of carriages without the head\n    num_carriages = remaining_length // (carriage_length + gap)\n\n    # Including the head of the train as one carriage\n    total_carriages = num_carriages + 1\n\n    return total_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Count the occurrence of digit '8' in the ones place\n    ones_place = 0\n    for i in range(1, 289): # Including page 288\n        if i % 10 == 8:\n            ones_place += 1\n\n    # Count the occurrence of digit '8' in the tens place\n    tens_place = 0\n    for i in range(80, 289): # From 80 to 288\n        if (i // 10) % 10 == 8:\n            tens_place += 1\n\n    # Count the occurrence of digit '8' in the hundreds place\n    hundreds_place = 0\n    for i in range(180, 289): # From 180 to 288\n        if i // 100 == 8:\n            hundreds_place += 1\n\n    # Bobby's mistake was not considering the all occurrences in the hundreds place\n\n    # Sum all occurrences\n    ans = ones_place + tens_place + hundreds_place\n    return ans\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Find how many triangles are equal to one diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    total_points = 82\n    correct_points = 2\n    incorrect_points = -1\n\n    # Let x be the number of questions answered correctly\n    for x in range(total_questions + 1):\n        # y is the number of questions answered incorrectly\n        y = total_questions - x\n        # Total score is calculated\n        score = x * correct_points + y * incorrect_points\n        # If the score matches the total points, we've found the answer\n        if score == total_points:\n            return x\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 1\n    while True:\n        y = (24 * x - 8) / 25\n        if y.is_integer():\n            break\n        x += 1\n    return x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    A = 10*x + y\n    B = 20*x + y\n\n    equation = Eq(B, 6*A + 25)\n\n    solutions = solve(equation, (x, y))\n\n    x_val = solutions[x]\n    y_val = solutions[y]\n    \n    return 10 * x_val + y_val\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n\n    # Apply the Black Friday discount\n    discounted_price = original_price * (1 - discount)\n\n    # Apply the increase after Black Friday\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the cost per kg for each bag\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.70 / 4\n\n    # Determine which bag has the lower cost per kg\n    if cost_per_kg_bag1 < cost_per_kg_bag2:\n        return '2.5kg bag'\n    else:\n        return '4kg bag'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1 / i for i in range(2001, 2011))\n    S = 1 / S_inv\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n\n    total_cost = price_per_book * number_of_books\n\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n\n    # Calculate mass of half of the jar (this is the difference between 3/4 full and 1/4 full)\n    mass_half_full = (mass_three_quarters_full - mass_quarter_full) / 2\n    \n    # Calculate mass of empty jar (this is when the jar is 1/4 full minus the mass of 1/2 of the Marmite)\n    mass_empty_jar = mass_quarter_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    trees = (road_length // interval + 1) * 2  # Trees on both sides\n\n    return trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    red_mark = 5\n    blue_mark = 10\n    green_mark = 12\n\n    ans = lcm(red_mark, blue_mark, green_mark)\n\n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    num_buses = 7\n    bus_length = 5\n    distance_between_buses = 2\n\n    total_length = bus_length * num_buses + distance_between_buses * (num_buses - 1)\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistake = Eq((x / 4) - 25, 2021)\n    original_number = solve(mistake, x)[0]\n\n    correct_answer = (original_number * 4) + 25\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    # Number of blocks in the first case\n    blocks_first_case = 28\n    # Total height in the first case\n    total_height_first_case = 182\n    \n    # Calculate the height of each block (unit rate)\n    height_per_block = total_height_first_case / blocks_first_case\n    \n    # Number of blocks in the second case\n    blocks_second_case = 42\n    \n    # Calculate total height in the second case by multiplying the unit rate with the number of blocks\n    total_height_second_case = height_per_block * blocks_second_case\n    \n    # Return the total height for the second case\n    return total_height_second_case\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    # The sum of an arithmetic sequence can be found by using the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n = number of terms\n    # Our first term is 106, last term is 2019, and the common difference is 1\n    first_term = 106\n    last_term = 2019\n    common_difference = 1\n    \n    # Calculate the number of terms in the sequence\n    num_terms = (last_term - first_term) // common_difference + 1\n    \n    # Calculate the sum according to the sum formula of arithmetic sequence\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(x / 5, y / 3)\n\n    y_when_x_5 = solve(equation.subs(x, 5), y)[0]\n\n    return (\"directly\", y_when_x_5)\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let a, b be the first two numbers\n    a, b = symbols('a b')\n    # Define the sequence based on the information given\n    seq = [a, b, a+b, a+2*b, 2*a+3*b, 3*a+5*b]  # We know that the 4th number is a+2*b = 6, and the 6th number is 3*a+5*b = 15\n    \n    # Define the equations based on given values\n    equation1 = Eq(a + 2*b, 6)\n    equation2 = Eq(3*a + 5*b, 15)\n    \n    # Solve the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    a = solutions[a]\n    b = solutions[b]\n    \n    # Find the seventh value in the sequence by continuing the pattern\n    seventh_val = (seq[4] + seq[5]).subs({a: a, b: b})\n    \n    return seventh_val\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price * 1.5\n    discount = selling_price_before_discount * 0.1\n    selling_price_after_discount = selling_price_before_discount - discount\n    profit = selling_price_after_discount - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    for m in range(1, 1000):  # Assuming a reasonable upper limit for school class sizes\n        if ((m ** 2) + 5 + 18).isqrt() ** 2 == (m ** 2) + 5 + 18:\n            n = ((m ** 2) + 5 + 18).isqrt()\n            original_students = (m ** 2) + 5\n            break\n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2*x+3)/4 + (6+4*x)/3, (7*x+22)/8)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    common_factor = gcd(gcd(students_A, students_B), students_C)\n\n    return common_factor\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    total_duration = timedelta(minutes=45 + 30)\n    end_time = start_time + total_duration\n    return end_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n\n    changed_number = 16\n    difference_in_sum = original_sum - new_sum\n\n    original_number = changed_number + difference_in_sum\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    number_of_girls = solve(equation, girls)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3) ** 2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    correct_points = 4\n    incorrect_points = -2\n    rex_score = 66\n\n    # Assume all answered questions are correct, then decrease by 1 correct answer\n    # and replace it with an incorrect answer until we reach Rex's actual score.\n    # Only answered questions are considered, hence the range 24 instead of 25.\n    for correct_answers in range(total_questions - not_attempted + 1):\n        incorrect_answers = (total_questions - not_attempted) - correct_answers\n        score = (correct_answers * correct_points) + (incorrect_answers * incorrect_points)\n        if score == rex_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Given a 3D shape with 8 vertices, 12 edges, and 6 faces (i.e., a cube),\n    # we want to find the number of different possible graphs (not isomorphic to each other)\n    # that can be formed using those vertices (ignoring the 3D aspect of the original shape).\n    # This is equivalent to the number of non-isomorphic graphs on 8 vertices with 12 edges.\n    # However, finding this number is not trivial and cannot be directly computed using a formula.\n    # This is a complex graph enumeration problem that typically requires either\n    # case-by-case analysis or computational assistance via graph enumeration software.\n    \n    # As this task cannot be feasibly computed with a simple python function and no\n    # off-the-shelf libraries provide a direct way to compute it, we'll return None.\n    # For an actual solution, one would need to use graph enumeration software like nauty\n    # or perform extensive combinatorial analysis.\n    \n    return None\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution\n    david_sugar = 800 * 0.05\n    # Eugene's solution\n    eugene_sugar = 200 * 0.3\n    # Felix's solution\n    felix_sugar = 300 * 0.1\n\n    # Total sugar weight\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution weight\n    total_solution = 800 + 200 + 300\n\n    # Resulting concentration\n    resulting_concentration = (total_sugar / total_solution) * 100\n\n    return resulting_concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black = 9\n    blue = 4 * black\n    green = 2 * black\n    total_pens = black + blue + green\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20\n    concentration1 = 0.35\n    volume2 = 30\n    concentration2 = 0.60\n\n    total_volume = volume1 + volume2\n    total_juice = volume1 * concentration1 + volume2 * concentration2\n\n    concentration_new_mix = (total_juice / total_volume) * 100\n\n    return concentration_new_mix\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the number of badges Wendy made for the event at the beginning\n    x = symbols('x')\n    \n    # After selling 5/7 on the first day, she has 2/7 left\n    remaining_after_first_day = (2/7) * x\n    \n    # After selling 1/3 of the remaining on the second day\n    remaining_after_second_day = remaining_after_first_day - (1/3) * remaining_after_first_day\n    \n    # She then made an additional 354 badges\n    total_badges_after_addition = remaining_after_second_day + 354\n    \n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_badges_after_addition, 3 * x)\n    \n    # Solve the equation to find the number of badges made at the beginning\n    initial_badges = solve(equation, x)[0]\n    \n    return initial_badges\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    cookies_per_box = 9\n    boxes_needed = (cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Mapping letters of \"Angel\" to the digits \"0141705021\"\n    letter_to_digit_mapping = {\n        'A': '0',\n        'n': '1',\n        'g': '4',\n        'e': '7',\n        'l': '0',\n    }\n\n    # Creating the new password based on the \"Devil\" word using the mapped digits\n    correct_password = ''.join([letter_to_digit_mapping[letter] for letter in \"Devil\"])\n\n    # Andy's attempt\n    andys_attempt = '4005220912'\n\n    # Checking if Andy's attempt is correct\n    if andys_attempt == correct_password:\n        return True # Andy can unlock the chest\n    else:\n        return False, correct_password # Andy cannot unlock the chest, returning the correct password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, the number of games played is one less than the number of players,\n    # because in each game, one player is eliminated until there is one winner.\n    # For 4 players, the number of games required will be 4 - 1.\n    ans = 4 - 1\n    return ans\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # smallest 3-digit number with 7 as one of the digits\n    # other digits must be 4 or less apart from 7\n    # Let's try to minimize the number by choosing the smallest possible digits\n    # that satisfy the condition, starting with 7 as the leftmost digit.\n    \n    # As we want the smallest number, we will start with 7 at hundred's place\n    # Now we need to find the smallest digit that is 4 or less apart from 7.\n    # That digit is 3 because any smaller and we won't have a three-digit number.\n    # Since 7 is at hundred's place and 3 is next smallest possible number 4 or less away,\n    # we put 3 at the one's place.\n    # Finally, for the ten's place, we need to reason what is the smallest digit\n    # that differs from each of 7 and 3 by 4 or less and is not 7 or 3.\n    # That number will be 4.\n    # Assembling the number, we get 743 which is the smallest three-digit \n    # number with 7 as one of the digits and all digits being at most 4 units apart.\n    \n    ans = 743\n    return ans\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n    by_A_only = total_exhibits - not_by_A\n    by_B_only = total_exhibits - not_by_B\n    by_both = by_A_only + by_B_only - total_exhibits\n    return by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temperature = 4\n    drop_by_midnight = 10\n\n    midnight_temperature = noon_temperature - drop_by_midnight\n\n    return midnight_temperature\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # In the worst case, the magician could pick all balls of one color first, \n    # then all balls of a second color.\n    # To ensure getting at least one ball of each color,\n    # he must then pick at least one more ball.\n\n    # Maximum number of balls that can be picked without getting all colors:\n    max_without_all_colors = 8 + 10  # all blue balls and all red balls\n\n    # To guarantee at least one of each color, pick one more:\n    min_balls_for_all_colors = max_without_all_colors + 1\n\n    return min_balls_for_all_colors\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n    \n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since 8A has to be a multiple of 3 and A is prime, A can not be 3\n    # because if A = 3, 8A will not be a multiple of 3\n    # therefore A can only be 2 because that's the only even prime number\n    # and only even numbers multiplied by an even number results in an even number,\n    # which proves that A must be 2 in this case.\n    A = 2\n    return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    final_value_last_year = 110000\n    percentage_decrease = 10  # 10% decrease\n\n    original_value = final_value_last_year / 1.1\n    final_value_this_year = final_value_last_year * (1 - percentage_decrease / 100)\n\n    profit_or_loss = final_value_this_year - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each = total_pupils // 2\n    return pupils_each\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    lower_multiple = 1*2*3*4*5*6\n    upper_factor = 1*2*3*4*5*6*7*8\n    count = 0\n    \n    for m in range(lower_multiple, upper_factor + 1):\n        if m % lower_multiple == 0 and upper_factor % m == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_required = 60\n    n = 1\n    while (n * (n + 1)) // 2 <= sum_required:\n        n += 1\n    return n - 1\n    \nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    flowers_groups = 3  # Roses, Jasmines, Daisy\n    roses_colors = 3\n    jasmines_colors = 4\n    daisy_colors = 1\n\n    # Calculate arrangements of the groups\n    group_arrangements = factorial(flowers_groups)\n    \n    # Calculate internal arrangements for each group\n    roses_arrangements = factorial(roses_colors)\n    jasmines_arrangements = factorial(jasmines_colors)\n    daisy_arrangements = factorial(daisy_colors)\n    \n    # Total arrangements\n    total_arrangements = group_arrangements * roses_arrangements * jasmines_arrangements * daisy_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Let's start by assuming the initial number of friends and pies\n    # as variables 'f' for friends and 'p' for pies.\n    \n    # If each friend received 5 custard pies, George would have 3 left.\n    # This means total pies 'p' is equal to 5 * 'f' (pies given to each friend) + 3 (leftover pies)\n    # p = 5f + 3\n    \n    # If each friend received 6 custard pies, George would be short of 2 pies.\n    # This means total pies 'p' is 6 * 'f' - 2 (the number George is short of)\n    # p = 6f - 2\n    \n    # Now we have two equations:\n    # 5f + 3 = 6f - 2\n    # Solving for 'f' we get 'f' = 3 + 2 = 5\n    \n    # Plugging 'f' into any of the above equations to solve for 'p':\n    # p = 5(5) + 3\n    # p = 25 + 3\n    # p = 28\n    \n    # So George baked 28 custard pies.\n    return 28\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # ml per min\n    mins_per_hour = 60\n    ml_per_litre = 1000\n    \n    leaked_ml_per_hour = leak_rate_per_min * mins_per_hour\n    leaked_litres_per_hour = leaked_ml_per_hour / ml_per_litre\n    \n    return leaked_litres_per_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    from itertools import permutations\n\n    # All possible permutations of digits 0-9 for three places\n    digits = list(range(10))\n    for perm in permutations(digits, 3):\n        s, e, x = perm\n\n        # Ensuring S cannot be 0 as it's a three-digit number\n        if s == 0:\n            continue\n\n        see = (100 * s) + (10 * e) + e\n        addend = (10 * e) + x\n        if see == 3 * addend:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The problem is represented by the following congruences:\n    # age ≡ 1 (mod 2)\n    # age ≡ 1 (mod 3)\n    # age ≡ 1 (mod 4)\n    # age ≡ 1 (mod 6)\n    # age ≡ 0 (mod 7)\n    # Here we use a tuple (remainder, modulus) for each congruence.\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Solve the system of congruences with the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 colors, so to guarantee a pair Cindy must pick one more than 3 times the number of colors,\n    # because with 3 colors, she could still possibly pick one of each color.\n    colors = 3\n    ans = colors * 3 + 1\n    return ans\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces_now = 16\n    # Let x be the number of pieces cut into 3 parts\n    # Original pieces - x (pieces cut) + 3x (new pieces after cutting) = total pieces now\n    # 10 - x + 3x = 16 -> 2x = 16 - 10 -> x = (16 - 10) / 2\n    x = (total_pieces_now - original_pieces) / 2\n    return int(x)\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # There are 4 red and 4 green apples.\n    # In the worst case, we pick apples alternately (red, green, red, green,...).\n    # To guarantee we have 2 of the same colour, we have to pick 1 more after \n    # the sequence of picking alternating colours.\n    \n    max_different_picks = 1 + 1  # One red and one green\n\n    # To ensure we pick 2 apples of the same colour, we take one more.\n    total_picks = max_different_picks + 1\n    \n    return total_picks\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    # Calculating the sum of the decimals\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pail_volume = 4\n    num_pails = 4\n    remaining_water = 7\n\n    original_volume = (pail_volume * num_pails) + remaining_water\n\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Since x^20 * y^15 * z^5 = 243\n    # and 243 is 3^5, we can assume that x^4 * y^3 * z = 3,\n    # because (x^4 * y^3 * z)^5 = x^20 * y^15 * z^5 = 3^5.\n    # Then, we need to find (x^4 * y^3 * z)^2 for x^8 * y^6 * z^2.\n    # So we square 3 to get 9.\n    \n    return 9\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    sum_even = sum(range(2, 47, 2))    # Sum of even numbers from 2 to 46\n    sum_odd = sum(range(1, 46, 2))     # Sum of odd numbers from 1 to 45\n    ans = sum_even - sum_odd           # Subtract sum of odd numbers from sum of even numbers\n\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expand the equation\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    \n    # Solve the equation for c\n    solved = solve(equation, c)\n    \n    # Return the solution for c\n    return solved[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the cost of one book is b and one pencil box is p.\n    b, p = symbols('b p')\n\n    # Creating two equations based on the problem statement\n    equation1 = Eq(2 * b + 3 * p, 42)\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:\n            product //= 10\n    return int(str(product)[-1])\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    total_numbers = sum([(i + 1) * i for i in range(1, 9)])\n    half_total = total_numbers // 2\n\n    current_count = 0\n    for i in range(1, 9):\n        current_count += i * (i + 1)\n        if current_count >= half_total:\n            return i  # The median value\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paved_length = 50\n\n    days_needed = total_length / daily_paved_length\n\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # calculating x\n    # 42x = 42^2\n    x = 42**2 // 42\n    \n    # calculating y\n    # Factoring 42y\n    # Prime factors of 42 are 2, 3, and 7\n    # For all exponents of factors to be 1, y should be\n    # the product of all prime factors not already in 42\n    # to respective power of 1, which means y equals to 1\n    # since 42 already includes all prime factors only once.\n    y = 1\n    \n    # return sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattles = 8\n    days = 4\n    daily_consumption_per_cattle = 10\n\n    total_fodder = cattles * days * daily_consumption_per_cattle\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # We have 1 dog = 8 rabbits and 1 rabbit = 2 chickens.\n    # Therefore, 1 dog is equivalent to 8 * 2 chickens.\n\n    dog_to_chicken = 8 * 2\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Larry had (1 - 5/12) of his marbles left after giving some away\n    remaining_fraction = 1 - (5/12)\n    # He gave 30 marbles to Nate and 26 marbles to Ollie\n    marbles_given_to_nate_and_ollie = 30 + 26\n    # He had 35 marbles left\n    marbles_left = 35\n    # Let's find out the total marbles initially (before giving away)\n    initial_marbles = (marbles_left + marbles_given_to_nate_and_ollie) / remaining_fraction\n    return int(initial_marbles)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of sweets Jess initially has, y be the number Jill initially has\n    x, y = symbols('x y')\n    \n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(y, 6/5 * x)\n    \n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(y - 8, 4/7 * (x + 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total number of sweets they have together\n    total_sweets = solutions[x] + solutions[y]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    # Calculate the amount of sugar based on the percentage\n    total_weight = 600  # g\n    concentration = 0.22  # 22%\n    \n    sugar_weight = total_weight * concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        digits = [int(digit) for digit in str(number)]\n        total += sum(digits)\n    return total\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assign symbols for the number of pies and cakes sold\n    pies, cakes = symbols('pies cakes')\n\n    # Setup the equations based on the given information\n    equation1 = Eq(15 * pies, 7 * cakes)  # Ratio of money collected from selling the pies to cakes\n    equation2 = Eq(pies, 4 * cakes)       # Ratio of the number of pies to cakes sold\n    equation3 = Eq(15 * pies + 7 * cakes, 1848)  # Total money collected\n\n    # Solve the equations for the number of pies and cakes\n    solutions = solve((equation1, equation2, equation3), (pies, cakes))\n\n    # Number of cakes sold\n    return solutions[cakes]\n\n# Getting the final answer\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    quarter = total_money / 4\n    return quarter\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    years_ago = timedelta(days=(38 * 365.25 + 6 * 30.4375))\n    birth_date = current_date - years_ago\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Hanson had at first\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, Hanson is left with 3/4x - 3\n    remaining_after_CDs = (3/4) * x - 3\n\n    # Then Hanson spends 3/5 of the remaining money and an additional $6\n    remaining_after_batteries = (2/5) * remaining_after_CDs - 6\n\n    # Given that he was left with $24, we have the equation:\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the total amount of money Hanson had at first\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for p in permutations(digits, 4):  # Get all permutations of length 4\n        if p[-1] not in ['0', '1', '3', '6', '9']:  # The last digit must be even and not 0\n            if p[0] != '0':  # The first digit cannot be 0\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = []\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            beads_count.append(beads)\n    if len(beads_count) == 1:\n        return beads_count[0]\n    else:\n        return beads_count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Let d be the distance from the library to the school in meters\n    # Weiling's and Qiqi's travel times are t_w and t_q respectively, in minutes\n    # Weiling starts 2 minutes after Qiqi and arrives 4 minutes before her\n    \n    # Speed = Distance / Time, so Time = Distance / Speed\n    # t_q = d / 60 and t_w = d / 72\n    \n    # Also, t_w = t_q - 6 (Because Weiling starts 2 minutes late and arrives 4 minutes early)\n    # We can set up the equation: d / 72 = d / 60 - 6 and solve for d\n    # Cross-multiply to solve for d:\n    # 60 * d = 72 * (d - 6 * 72)\n    \n    # Calculate the distance\n    d = 72 * 6 * 60 / (72 - 60)\n    return d\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of 9^x repeats every 2 steps: 9, 1, 9, 1, ...\n    # Thus, 9^2015 and 9^2016 will have units digits 9 and 1 respectively\n    units_digit_2015 = 9\n    units_digit_2016 = 1\n\n    # Summing their units digits without considering other digits\n    units_sum = units_digit_2015 + units_digit_2016\n\n    # The units digit of the sum\n    ans = units_sum % 10\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Number of positions to place the women between the men: (5 men + 1)\n    positions_for_women = 6\n    \n    # Choose 3 positions from 6 for the women\n    women_combinations = factorial(positions_for_women) // (factorial(3) * factorial(positions_for_women - 3))\n    \n    # Permutations of 5 men and 3 women\n    men_permutations = factorial(5)\n    women_permutations = factorial(3)\n    \n    # Total combinations\n    total_combinations = women_combinations * men_permutations * women_permutations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    import math\n    length_1 = 45\n    length_2 = 30\n    # Find the Greatest Common Divisor (GCD) of the two lengths\n    gcd = math.gcd(length_1, length_2)\n    return gcd\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    total_amount = 540\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_below_30000 = T * 30000 / 100\n    tax_above_30000 = (T + 3) * (income - 30000) / 100\n    total_tax = Eq(tax_below_30000 + tax_above_30000, (T + 1) * income / 100)\n\n    solutions = solve(total_tax, income)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marc_time_str = \"11:50 AM\"\n    marc_time = datetime.strptime(marc_time_str, \"%I:%M %p\")\n\n    # Marc's watch is 15 minutes slow.\n    actual_time = marc_time + timedelta(minutes=15)\n\n    # In half an hour's time\n    future_time = actual_time + timedelta(minutes=30)\n\n    # George's watch is 7 minutes fast.\n    george_time = future_time + timedelta(minutes=7)\n\n    # Formatting the time to only show hours and minutes\n    ans = george_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    height = 31\n    jump_up = 3\n    slide_down = 2\n    total_jumps = 0\n    \n    # Effective progression in each set of three jumps:\n    effective_progress = (jump_up * 3) - slide_down\n    \n    # The squirrel will reach or surpass the top before the slide down on its last set of jumps\n    # Calculate the total height excluding the last jump\n    while height > effective_progress:\n        height -= effective_progress\n        total_jumps += 3\n\n    # After the above loop, the remaining height will be <= effective progress and > 0\n    # Now calculate the number of jumps needed to reach or surpass the remaining height\n    while height > 0:\n        height -= jump_up\n        total_jumps += 1\n        if height > 0:\n            height += slide_down\n\n    return total_jumps\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n\n    combined_rate = A_rate + B_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 1\n    total_marks = 90\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * marks_for_correct - wrong * marks_deducted_for_wrong == total_marks:\n            return correct\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing all marbles of any three colors guarantee that with the next draw,\n    # you will get the fourth color for sure as there is no other option.\n    # Hence, taking the worst-case scenario to ensure getting 4 marbles of different colors, \n    # we draw all the red, blue, and yellow marbles.\n    red_marbles = 12\n    blue_marbles = 9\n    yellow_marbles = 8\n    # The problem statement has a mistake where it mentions \"3 red marbles\" twice,\n    # truly it should be green, so let's assume it is any different color such as green:\n    green_marbles = 3\n\n    # We need to draw all but one color entirely (here we draw red, blue, yellow completely)\n    # Then we draw one more marble, which has to be the fourth color (green)\n    total_marbles_to_ensure_fourth_color = red_marbles + blue_marbles + yellow_marbles + 1\n\n    return total_marbles_to_ensure_fourth_color\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(0, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age when Jenny was 22 years old:\n    # Since on 15th May 2002, Gigi was 45 years old,\n    # we subtract the years from 2002 to 1995, which is 7 years.\n    # So, 7 years before 2002, Gigi was 45 - 7 = 38 years old.\n    gigi_age_when_jenny_22 = 45 - (2002 - 1995)\n\n    # Now we need to find out how old Jenny was when Gigi was 22\n    # The age difference between Gigi and Jenny will always remain the same, which is\n    # Gigi's age - Jenny's age in 2002 = 45 - 22 = 23 years.\n    age_difference = gigi_age_when_jenny_22 - 22\n    \n    # So, when Gigi was 22, we can subtract the age difference from Jenny's age in 1995\n    # to find her age back then.\n    jenny_age_when_gigi_22 = 22 - age_difference\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    # The last positive term would be difference * (n - 1) + first_term > 0\n    # n - 1 < first_term / (-difference)\n    # Since we're looking for the last positive term, we consider only the integer part\n    n = int(first_term / (-difference)) + 1\n\n    return n\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    num_str = '20190406'\n    current_sum = sum(map(int, num_str))\n    for A in range(10):\n        if (current_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    # Starting from the smallest number ending in 2 that is a multiple of 3\n    num = 12\n    while True:\n        # Check if the number is also a multiple of 8 and ends with 2\n        if num % 8 == 0 and str(num).endswith('2'):\n            return num\n        # Increment the number by multiples of 3 to maintain the first condition\n        num += 3\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    # The first three digits of the bike lock are 451.\n    for last_digit in range(10):  # Candidates for the last digit: 0 through 9.\n        code = int(f\"451{last_digit}\")\n        if code % 3 == 0 and code % 5 != 0 and code % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n    \n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    result = numerator / denominator\n    \n    return round(result, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for i in range(1, total_apples):\n        if total_apples - i > i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship_still_water = 25\n    speed_current = 3\n    distance = 140\n    \n    speed_downstream = speed_ship_still_water + speed_current\n    time_downstream = distance / speed_downstream\n    \n    return time_downstream\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 15 / 100\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    num_cupcakes = 3\n    num_cans = 2\n\n    total_cupcake_cost = cost_per_cupcake * num_cupcakes\n    total_can_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_can_cost / num_cans\n\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -2\n\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We have two equations:\n    # x + y = 20 (since the total number of questions is 20)\n    # 5x - 2y = 51 (since 5 points are gained for correct answers and 2 points are lost for wrong ones)\n\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if correct_points * x + wrong_points * y == 51:\n            return x\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    next_difference = differences[-1] + second_differences[-1]\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean_value = 5\n    \n    total_sum = mean_value * total_numbers\n    sum_known = sum(known_numbers)\n    missing_number = total_sum - sum_known\n\n    return missing_number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Time for lights to change in seconds\n    light1 = 30       # every half a minute -> 30 seconds\n    light2 = 45       # every 0.75 minutes -> 45 seconds\n    period = 9 * 60   # all lights green at the same time every 9 minutes -> 540 seconds\n\n    # The third light must be at least 30 seconds or longer\n    # light1, light2, and light3 must have a common multiple at 540 seconds\n    # Start with the lcm of light1 and light2, then find the smallest multiple >= 540 seconds\n    min_lcm = lcm(light1, light2)\n\n    light3 = min_lcm\n    while light3 < 30 or lcm(light3, min_lcm) != period:\n        light3 += 1\n\n    return light3\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since there are 4 individuals, let's name them A, B, C, D for convenience.\n    # A can pass the ball to 3 others (B, C, D).\n    # The first receiver can then pass to the remaining two (since it cannot pass back to A immediately).\n    # Finally, the second receiver has no choice but to pass back to A.\n    \n    # The sequence will follow the pattern A -> X -> Y -> A where X and Y are different from A and each other.\n    \n    # Since A can pass to 3 others initially, we have 3 choices for the first pass.\n    # For each choice of the first pass, there are 2 choices for the second pass (since it can't be the same as the first receiver or A).\n    # Therefore, the total number of methods will be 3 (choices for the first pass) * 2 (choices for the second pass).\n    \n    count = 3 * 2\n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for Daniel's and Ming's ages\n    daniel, ming = symbols('daniel ming')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(daniel, 4 * ming)  # Daniel is four times older than Ming\n    equation2 = Eq(daniel + 6 + ming + 6, 62)  # In 6 years, sum of their ages will be 62\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_sheet = 25\n    number_of_students = 250\n    total_weight_grams = weight_per_sheet * number_of_students\n    total_weight_kilograms = total_weight_grams / 1000\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let's denote the number of people in group A as 'a' and in group B as 'b'.\n    # Since each bus can seat 36 people and the last bus is filled with 11 members from group A,\n    # the remaining 25 seats must be filled by members from group B.\n    # Thus, we can conclude that 'a' is divisible by 36 (all other buses were filled by group A) and b = 25 modulo 36.\n\n    # Let's consider the possible values of 'b' given that it needs to be '25 modulo 36':\n    # Possible values of 'b' are '25 + 36k' where k is a non-negative integer to adjust for full buses.\n\n    # The number of photographs (combinations) taken will be 'a * b'.\n    # This product has to be greater than a minimum number of photographs to fill whole rolls of film plus the remainder.\n    \n    # We will use iteration to find the smallest 'a' and 'b' that fits all conditions:\n    maximum_pictures_per_roll = 36\n    extra_pictures = 0\n    for a in range(36, 1000, 36):  # Start with 36, and increment by 36 because group A can only fill complete buses\n        for k in range(0, 1000):   # Iterate over possible k values for group B\n            b = 25 + 36 * k\n            total_pictures = a * b\n            # Check if the number of pictures taken is more than complete rolls of 36 and also has a remainder.\n            if total_pictures % maximum_pictures_per_roll > 0:\n                extra_pictures = maximum_pictures_per_roll - (total_pictures % maximum_pictures_per_roll)\n                break  # We found the solution, break the inner loop\n        if extra_pictures > 0:\n            break  # We found the solution, break the outer loop\n    return extra_pictures\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 1, 2, 8, 9\n    perms = permutations([1, 2, 8, 9], 4)\n    \n    # Initialize the variable to hold the maximum product\n    max_product = 0\n    \n    # Go through each permutation\n    for perm in perms:\n        # Form two 2-digit numbers and calculate their product\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        \n        # If current product is greater than the max product, update it\n        if product > max_product:\n            max_product = product\n            \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let x be the length of the second bridge.\n    # Since the people line is 3m long and it takes the same time to pass the starting and the ending point of each bridge:\n    # The speed of the line (v) can be calculated by dividing the length of the first bridge by the time (8s) minus the length of the 3-meter-long line.\n    v = (9 - 3) / 8  # m/s\n\n    # Using the speed (v), we can calculate the time it takes for the 3-meter end of the line to pass the starting point of the second bridge.\n    # This will be the time to entirely cross the second bridge minus the time to entirely cross the first bridge.\n    time_difference = 10 - 8  # s\n\n    # Now calculate the length of the second bridge by multiplying the speed by the total time it takes to cross the second bridge (10s)\n    # and adding the length of the people line.    \n    second_bridge_length = v * 10 + 3  # m\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    # The expression can be rewritten as a sum of differences:\n    # (1000^2 - 998^2) + (996^2 - 994^2) + ... + (4^2 - 2^2)\n    # Each of these differences can be calculated using the identity:\n    # a^2 - b^2 = (a - b)(a + b)\n    \n    ans = 0\n    for n in range(1000, 2, -4):\n        ans += (n ** 2 - (n - 2) ** 2)\n\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # Convert 11:55 am to minutes\n    end_time = (13 * 60) + 40    # Convert 1:40 pm to minutes (13:40 in 24hr format)\n\n    play_time = end_time - start_time  # Calculate the difference\n\n    return play_time\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_left = 11\n    people_right = 7\n    # Crystal herself is 1 person\n    crystal = 1\n\n    # Calculate the total people in her row\n    total_people_in_row = people_left + crystal + people_right\n\n    # Since there are 2 rows and assuming both rows have the same number of people\n    total_people_in_class = total_people_in_row * 2\n\n    return total_people_in_class\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for n in range(2, int(product ** (1/3)) + 1, 2):\n        if product % n == 0:\n            second = n\n            first = second - 2\n            third = second + 2\n            if first * second * third == product:\n                ans = third\n                break\n    return ans\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors_dict = factorint(224)\n    total_factors = 1\n\n    for exponent in factors_dict.values():\n        total_factors *= (exponent + 1)\n    \n    return total_factors\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):  # Three-digit numbers range from 100 to 999\n        if num % 3 == 0 and num % 11 == 0:  # The number is divisible by both 3 and 11\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:  # Subtracting one makes it divisible by both 2 and 7\n                return num\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    start_time = 8.5  # 8:30 am in hours\n    lesson_duration = 3 * (45 / 60)  # three 45-minute lessons in hours\n    moving_period_duration = 2 * (5 / 60)  # two 5-minute moving periods in hours\n\n    break_time = start_time + lesson_duration + moving_period_duration  # total time in hours\n\n    break_hour = int(break_time)\n    break_minutes = (break_time - break_hour) * 60\n    break_time_formatted = f\"{break_hour}:{int(break_minutes):02d}\"\n\n    return break_time_formatted\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Maddy has 10 cupcakes in total and she wants to divide them into two groups with different numbers.\n    # Since each group must have at least one cupcake and the groups have different number of cupcakes,\n    # We can simply assign number of cupcakes to one group and the other group gets the rest.\n    # The smallest group can have 1 cupcake, and in that case, the other group will have 9.\n    # If the first group has 2, the second one will have 8, and so on, up to the point where the first group has 4\n    # (as 5 would lead to both groups having 5 cupcakes each which is not allowed).\n    # So, there are 4 possible ways for Maddy to divide the cupcakes into two groups with different numbers.\n    \n    count = 0\n    for i in range(1, 10 // 2 + 1):  # We only need to iterate to half of 10, because after that groups would be equal\n        count += 1\n    return count\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):     # Hundreds digit, can't be 0\n        for b in range(0, 10): # Tens digit\n            for c in range(0, 10): # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    import math\n    return math.gcd(math.gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_winnings = 12018\n    jasmine_winnings = 309\n    total_winnings = neha_winnings + jasmine_winnings\n    return total_winnings\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    # wands + cards = 69\n    equation1 = Eq(wands + cards, 69)\n    \n    # wands = cards + 17\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    troy, adam = symbols('troy adam')\n    \n    # Establish the equations\n    equation1 = Eq(troy, 5 * adam)  # Troy has 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more, he has 1/3 as many coins as Troy\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (troy, adam))\n    troy_coins = solutions[troy]\n    adam_coins = solutions[adam]\n    \n    # Calculate the total coins they had at first\n    total_coins_at_first = troy_coins + adam_coins\n    \n    return total_coins_at_first\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    # Let x be the number of $5 notes and y be the number of $10 notes\n    # Jeremy had a total of 57 $5 and $10 notes\n    # After spending 60% of the $10 notes and 25% of the $5 notes, he has twice as many $10 notes as $5 notes\n\n    # Setting up the system of equations\n    # x + y = 57 (total number of notes)\n    # (1 - 0.25)x = 2 * (1 - 0.60)y (twice as many $10 notes as $5 notes left after spending)\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 57)\n    equation2 = Eq((1 - 0.25) * x, 2 * (1 - 0.60) * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the cost of the bag\n    # Spent 60% of the $10 notes: 0.60 * y * 10\n    # Spent 25% of the $5 notes: 0.25 * x * 5\n    cost_of_bag = (0.60 * solutions[y] * 10) + (0.25 * solutions[x] * 5)\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the initial amount of money Hanson had\n    initial_money = symbols('initial_money')\n\n    # After spending 1/4 of his money and an additional $3, the remaining money is (3/4)*initial_money - 3\n    after_CDs = (3/4) * initial_money - 3\n\n    # After spending 3/5 of the remaining money and an additional $6, the final amount is \n    # (2/5)*after_CDs - 6 = 24\n    after_batteries = (2/5) * after_CDs - 6\n\n    # Set up the equation based on the final amount of money (24)\n    equation = Eq(after_batteries, 24)\n\n    # Solve the equation for the initial amount of money Hanson had\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Darrell may draw all the blue and white beads before getting 5 green beads.\n    max_blue_white_beads = 5 + 6 # Maximum blue and white beads he can draw\n    # To ensure 5 green beads, he needs to draw one more after the non-green beads\n    beads_needed = max_blue_white_beads + 5 # 5 more green beads\n\n    return beads_needed\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18/16) * (16*15) / (5*3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    # Initialize count to 0\n    count = 0\n\n    # Loop through possible hundreds digit (1-7, since 8 and 9 would not allow for two other non-zero digits that sum to 8)\n    for hundreds in range(1, 8):\n        # Loop through possible tens digit (0-7, since it must be different from the hundreds place)\n        for tens in range(0, 8):\n            # Calculate the ones digit as 8 minus the other two digits\n            ones = 8 - (hundreds + tens)\n            # Check if ones digit is even, non-negative and all digits are different\n            if ones >= 0 and ones % 2 == 0 and len(set((hundreds, tens, ones))) == 3:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n      \nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    quarter_of_sixteen = 1/4 * 16\n    half_of_unknown = quarter_of_sixteen\n    unknown_number = half_of_unknown * 2\n    return unknown_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage using single round-robin\n    # For n people single round-robin, n * (n - 1) / 2 matches are played\n    # With 4 groups of 4 people each, that's 4 * 4 * (4 - 1) / 2 matches\n    group_games = 4 * (4 * (4 - 1) // 2)\n    \n    # Calculate the number of games in the knockout rounds\n    # Top 8, top 4, top 2, the final, and the third place match\n    # Since it's single elimination, that's just 8 + 4 + 2 + 1 + 1 matches\n    knockout_games = 8 + 4 + 2 + 1 + 1\n    \n    # Total number of games is the sum of group games and knockout games\n    total_games = group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    # If A is twice as good as B, then A takes half the amount of time B takes\n    # Let's say B takes x days to do the job alone, then A takes x/2 days\n    # A finishes 12 days before B: x/2 = x - 12 -> x = 24\n    B_time = 24\n    \n    # A's time is half of B's time\n    A_time = B_time / 2\n    \n    # The combined work rate is the sum of their individual work rates\n    combined_rate = 1/A_time + 1/B_time\n    \n    # The time to complete the job together is the reciprocal of their combined rate\n    combined_time = 1/combined_rate\n\n    return combined_time\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    common_difference = 4\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # Rearranging for n gives us: n = ((a_n - a_1) / d) + 1\n    n = ((last_term - first_term) / common_difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # When Rachel gives Alice 10 pieces of candy, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    # When Alice gives Rachel 10 pieces of candy, Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Rachel's candies + Alice's candies\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_ways = permutations(9, 4)\n\n    return total_ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n    \n    stickers_start = stickers_end - stickers_bought + stickers_given\n    \n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of pineapple and apple\n    pineapple, apple = symbols('pineapple apple')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    # Return the weight of a pineapple\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 3 == 2) and (i % 4 == 2) and (i % 5 == 2) and (i % 7 == 0):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import gcd\n\n    # lcm function to calculate Least Common Multiple\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Since 15 and 21 are factors, the number must be divisible by the lcm of 15 and 21\n    num = lcm(15, 21)\n    \n    # Factors of 15 and 21 are {1, 3, 5, 15} and {1, 3, 7, 21} respectively.\n    # The number must be some multiple of the lcm such that the total number of factors is 8.\n    # So we need to find such a multiple that gives exactly 6 more factors \n    # (since we already have 1 and the number itself as factors).\n    # We start by checking the multiples of the num (105).\n    multiple = 1\n    while True:\n        candidate = num * multiple\n        factors_count = 0\n        for i in range(1, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:\n                if i * i == candidate:\n                    factors_count += 1  # Perfect square, only count once\n                else:\n                    factors_count += 2  # Count both factors\n        if factors_count == 8:\n            # We have found the number with exactly 8 factors\n            break\n        multiple += 1\n\n    # Finally, calculate the sum of all eight factors\n    final_number = num * multiple\n    sum_of_factors = sum(set(i + final_number // i for i in range(1, int(final_number ** 0.5) + 1) if final_number % i == 0))\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Since the leftmost digit is fixed as 8\n    digits = '0123456789'\n    digits_left = digits.replace('8', '')\n\n    # Check divisibility conditions for permutated 9-digit numbers\n    for perm in permutations(digits_left):\n        num = '8' + ''.join(perm)\n        if all(int(num[:i]) % i == 0 for i in range(2, 11)):\n            return int(num)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    belinda_after_giving = belinda_tomatoes - belinda_gave\n    matthew_tomatoes = belinda_after_giving\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_assembly_rate = 10\n    increased_efficiency = 0.50\n    new_assembly_rate = original_assembly_rate * (1 + increased_efficiency)\n    return new_assembly_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Given that 2012 and 1274 have the same remainder when divided by D,\n    # We know that (2012 - R) and (1274 - R) are both divisible by D.\n    # The largest value of D that divides both numbers is their greatest common divisor (GCD).\n    # We can represent it as D = gcd(2012 - R, 1274 - R).\n    # The condition is gcd(2012, 1274) = gcd(2012 - R, 1274 - R).\n    # We need to find the largest D - R, which means maximizing D and minimizing R.\n    # R must be less than D, so the largest possible D will be the gcd of the difference between the numbers.\n    \n    from math import gcd\n    \n    # Compute the greatest common divisor of the difference of the two numbers\n    D = gcd(2012 - 1274, 1274)\n    # R is the remainder when either number is divided by D\n    R = 2012 % D\n\n    # We return the largest possible value of D - R\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem to solve the congruences\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    \n    return remainder\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = total_juice * (5/7)\n    remaining_juice = total_juice - grace_juice\n    evelyn_juice = remaining_juice * (1/9)\n    final_juice = remaining_juice - evelyn_juice\n    return final_juice\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # We need to find the strategy that leads to a win for Betty.\n    # Let's define a function that tells us if the current state is a winning state.\n\n    # Create a list to memoize the winning states, initialize as None because we haven't computed anything yet.\n    # The index of the list represents the number of digits left that can be written.\n    # win_states[n] = True if the player whose turn it is with n numbers left can force a win\n    win_states = [None] * 53 # 52 + 1 because list is zero-indexed and we have numbers from 1 to 52\n\n    def can_win(n):\n        # Base condition: if n is 0, that means the player whose turn it is has already lost.\n        if n == 0:\n            return False\n\n        # If we've already computed this state, return the result\n        if win_states[n] is not None:\n            return win_states[n]\n\n        # Assume the current state is a losing state until proved otherwise\n        win = False\n\n        # For all possible moves, check if any leads to a losing state for the opponent.\n        # If we find one, this state is a winning state.\n        for move in [1, 3, 4, 6]:\n            if n - move >= 0 and not can_win(n - move):\n                win = True\n                break\n        \n        # Memorize this result to avoid recomputation.\n        win_states[n] = win\n\n        return win\n\n    # Calculate the winning states for every number from 52 to 1.\n    can_win(52)\n    \n    # Betty should first check if 52 is a winning state. If it is, she would like to go first.\n    # Otherwise, she would want to go second and let Abby take the first move.\n    if win_states[52]:\n        # If going first is a winning move, find out the strategy by checking which move leads to a losing state for Abby.\n        for move in [1, 3, 4, 6]:\n            if 52 - move >= 0 and not win_states[52 - move]:\n                return ('First', move)\n        # If the code reaches here, there's a logical error in the implementation.\n        return ('First', None)\n    else:\n        return ('Second', None)\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 63 // 2 + 1):\n        for five_gram_weights in range(0, 63 // 5 + 1):\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Since we're interested in the last digit, we can use modulo arithmetic\n    # The last digit of any number is equivalent to that number modulo 10\n    last_digit_4_power = (4 ** 2009) % 10  # Find the last digit of 4^2009\n    last_digit_6_power = (6 ** 2010) % 10  # Find the last digit of 6^2010\n\n    # The last digit of 4 raised to any power cycles through 4, 6, 4, 6,...\n    # The cycle repeats every 2, since 4^2 = 16 (last digit 6), and then back to 4 again (last digit of 4^3)\n    # Thus, for 4^2009, we find that 2009 mod 2 = 1\n    # So the last digit is the first one in the cycle, which is 4.\n\n    # The last digit of 6 raised to any power is always 6, since 6^1 = 6, 6^2 = 36, 6^3 = 216, etc.\n    # So the last digit of 6^2010 is simply 6\n\n    # Now add the last digits to find the last digit of the sum\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n\n    return ans\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_remaining_two = total_height_for_six - total_height_for_four\n    average_height_for_remaining_two = total_height_for_remaining_two / 2\n\n    return average_height_for_remaining_two\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # The sum of an arithmetic sequence can be found using the formula ((n/2) * (2a + (n - 1)d)),\n    # where n is the number of terms, a is the first term, and d is the common difference\n\n    # Let a be the first term and d be the common difference\n\n    # Sum of first 8 terms (S_8) is ((8/2) * (2a + (8 - 1)d)) = 4*(2a + 7d) = 32\n    # Sum of first 22 terms (S_22) is ((22/2) * (2a + (22 - 1)d)) = 11*(2a + 21d) = 44\n\n    # From S_8: 4*(2a + 7d) = 32 => 2a + 7d = 8\n    # From S_22: 11*(2a + 21d) = 44 => 2a + 21d = 4\n\n    # We have two equations now:\n    # 1) 2a + 7d = 8\n    # 2) 2a + 21d = 4\n\n    # Subtract equation 1 from equation 2 to find the common difference (d)\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 14d = -4\n    # d = -4 / 14\n    d = -2 / 7\n\n    # Substitute d back into the first equation to find the first term (a)\n    # 2a + 7*(-2/7) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 10 / 2\n    a = 5\n\n    # Now, we need to find the sum of the first 15 terms (S_15)\n    # S_15 = ((15/2) * (2a + (15 - 1)d))\n    num_terms = 15\n    S_15 = (num_terms / 2) * (2 * a + (num_terms - 1) * d)\n\n    return S_15\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    attempted = total_questions - not_attempted\n    score_for_correct = 4\n    score_for_incorrect = -2\n    target_score = 66\n    \n    for correct in range(attempted + 1):\n        incorrect = attempted - correct\n        if correct * score_for_correct + incorrect * score_for_incorrect == target_score:\n            return correct\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_19 = sum(range(1, 20))\n    ans = sum_to_20 + sum_to_19\n    return ans\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for flow rates of A, B, and C\n    A_rate, B_rate, C_rate, total_water = symbols('A_rate B_rate C_rate total_water')\n\n    # Equation for the case where only A and C are turned on\n    equation1 = Eq(A_rate + C_rate, total_water)\n    # Equation for the case where only B and C are turned on\n    equation2 = Eq(B_rate + C_rate, total_water)\n    # Given: flow rate of B is twice that of A\n    equation3 = Eq(B_rate, 2 * A_rate)\n    # Given: A provides 18 tons of water when A and C fill the pool\n    equation4 = Eq(A_rate / (A_rate + C_rate), 18 / total_water)\n    # Given: B provides 27 tons of water when B and C fill the pool\n    equation5 = Eq(B_rate / (B_rate + C_rate), 27 / total_water)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (A_rate, B_rate, C_rate, total_water))\n\n    return solutions[total_water]\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # There are 4 letters and each must be a different color\n    # We have 5 colors to choose from for the first letter\n    num_ways_first = 5\n    # We have 4 colors remaining for the second letter\n    num_ways_second = 4\n    # We have 3 colors remaining for the third letter\n    num_ways_third = 3\n    # We have 2 colors remaining for the fourth letter\n    num_ways_fourth = 2\n    \n    # Calculating the total number of different ways we can color the word \"MATH\"\n    total_ways = num_ways_first * num_ways_second * num_ways_third * num_ways_fourth\n    \n    return total_ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1]) + 1\n        if age == reversed_age * 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Let's denote the total number of meatballs as `m` and\n    # the number of students before the last one as `n`.\n    # Then, `m - 20` is the total meatballs that were distributed.\n    # Since every student gets an equal amount, we can say (m - 20) % n == 0.\n    # When the new student comes, the total number of meatballs that gets distributed is `m - 10`.\n    # The new total number of students is `n + 1`.\n    # Similarly, we can say (m - 10) % (n + 1) == 0.\n    # We need to find a common `m` that satisfies both conditions.\n    # Since we don't know the number of students or meatballs,\n    # we can start from some number of meatballs for each student,\n    # increment it and check the conditions until we find the solution.\n    \n    per_student = 1\n    while True:\n        # The total number of meatballs is what each student gets plus 20 left initially.\n        m = per_student + 20\n        # Now check if with one more student (one more portion), there will be 10 left.\n        if (m - 10) % (per_student + 1) == 0:\n            # If the condition holds, we have our solution.\n            return per_student\n        # Otherwise, we increment the number of meatballs each student gets.\n        per_student += 1\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    return 9.32 + (9.32 * 1/10)\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day1 = symbols('remaining_after_day1')\n    total_questions = 2 * (remaining_after_day1 - 7)\n    remaining_after_day2 = (remaining_after_day1 / 2) - 5\n    equation = Eq(remaining_after_day2 + 23, remaining_after_day1)\n    remaining_after_day1_solution = solve(equation, remaining_after_day1)\n    ans = total_questions.subs(remaining_after_day1, remaining_after_day1_solution[0])\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    ans = '4/25' if fraction_value > decimal_value else '0.17'\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_capacity_ml = 1000  # 1 litre = 1000 ml\n    water_used_ml = 200 * 3  # 200 ml for each of the 3 cups\n    water_left_ml = jug_capacity_ml - water_used_ml\n    return water_left_ml\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    twelfth_term = tenth_term + 2 * common_difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # The number of times a switch is pressed corresponds to its factors.\n    # Only the numbers with an odd number of factors (perfect squares) will remain on.\n    # Hence, we need to find all the perfect squares between 1 and 250.\n    answer = 0\n    for i in range(1, 251):\n        if (i**0.5).is_integer():\n            answer += 1\n    return answer\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r_original, d_original, r_monthly, d_monthly, months = symbols('r_original d_original r_monthly d_monthly months')\n    \n    # Total number of flowers originally (Roses + Daisies)\n    equation1 = Eq(r_original + d_original, 300)\n    \n    # Number of roses after planting more flowers for a few months\n    equation2 = Eq(r_original + r_monthly * months, 280)\n    \n    # Number of daisies after planting more flowers for a few months\n    equation3 = Eq(d_original + d_monthly * months, 180)\n    \n    # Since the planter plants the same number of each type every month\n    equation4 = Eq(r_monthly, d_monthly)\n    \n    # Also, the total number of flowers increases by the same amount of roses and daisies each month\n    equation5 = Eq(r_monthly * months + d_monthly * months, 280 + 180 - 300)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (r_original, d_original, r_monthly, d_monthly, months))\n    \n    return solutions[r_original]\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    total_correct = 0.2 * 10 + 0.8 * 20 + 0.9 * 30\n    overall_score_percentage = (total_correct / total_problems) * 100\n    \n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    area_per_large_brick = 6 * 6  # in decimeters squared\n    total_area = area_per_large_brick * 80  # in decimeters squared\n\n    area_per_small_brick_cm = 64  # in square centimeters\n    area_per_small_brick_dm = area_per_small_brick_cm / 100  # converting square cm to square dm\n\n    num_small_bricks = total_area / area_per_small_brick_dm\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for price of a bottle of water (w) and price of a bag of fruit (f) in pence\n    w, f = symbols('w f')\n\n    # Given equations\n    equation1 = Eq(2*w + 3*f, 255)  # Total cost converted to pence\n    equation2 = Eq(w, f + 15)       # Bottle costs 15p more than bag\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, f))\n\n    # Return the cost of a bag of fruit in pounds\n    return solutions[f] / 100  # Converting from pence to pounds\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '4', '5', '7', '8']\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 11 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let the number of boys be x, then the number of girls is x + 30\n    # The sum of boys and girls is total_pupils:\n    # x + (x + 30) = total_pupils\n    # Solve for x (the number of boys)\n    x = (total_pupils - 30) / 2\n    # The number of girls is x + 30\n    number_of_girls = x + 30\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    if number > 1:\n        for i in range(2, int(number ** 0.5) + 1):\n            if (number % i) == 0:\n                ans = False\n                break\n        else:\n            ans = True\n    else:\n        ans = False\n    return ans\n\nans = not solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_difference = 31\n    total_students = 0\n    # Start with assuming the smallest square possible and increment the size\n    side_length = 1\n    while True:\n        boys = side_length * 4 - 4 if side_length > 1 else 1\n        girls = (side_length - 2) * 4 if side_length > 2 else 0\n        # Check if the difference matches the given condition\n        if boys - girls == total_difference:\n            total_students = side_length**2  # Total students is the area of the square\n            break\n        # Go to the next outer layer\n        side_length += 2\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    A = (4**2018) * (25**2018)\n    A_str = str(A)\n    num_digits = len(A_str)\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    \n    return comb(total_players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit = selling_price * 0.30\n    cost_price = selling_price - profit\n\n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    percentage_profit = (new_profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for original number of apples\n    apples = symbols('apples')\n\n    # Equation based on the problem\n    equation = Eq((apples * 4/5 - 80) / apples, 30/100)\n\n    # Solve for the number of apples\n    solved_apples = solve(equation, apples)\n\n    # The number of apples he had in the end\n    apples_in_the_end = apples * 30/100\n\n    return int(apples_in_the_end.subs(apples, solved_apples[0]))\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            rest = 10 - x1 - x2\n            if rest > 0 and rest != x1 and rest != x2:\n                count += 1\n    return count // 3  # Divide by 3 to account for permutations of identical balls\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            for x3 in range(x2+1, 14):\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the first even number\n    x = symbols('x')\n\n    # Equation for the fourth number being larger than one-third of the sum of\n    # the first and seventh numbers by 6\n    equation = Eq((x + 6), 6 + (1 / 3) * (x + (x + 12)))\n\n    # Solve the equation to find the value of x\n    x_value = solve(equation, x)[0]\n\n    # Calculate the sum of the first seven consecutive even numbers starting from x\n    sum_seven_numbers = sum([x_value + 2 * i for i in range(7)])\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n\n    length_each_piece = total_length / num_pieces\n\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometres = 1.5\n    metres = kilometres * 1000  # since 1 kilometre equals 1000 metres\n    return metres\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of all 9 numbers\n    sum_of_8_numbers = total_sum - 180  # Sum after removing one number\n    average_of_8_numbers = sum_of_8_numbers / 8  # Average of remaining 8 numbers\n    \n    return average_of_8_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Gardener Ben has twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    # and 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids.\n    equation3 = Eq(red + white, 38)\n    # If 28 orchids are red\n    equation4 = Eq(red, 28)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # To find the total number of orchids, add up purple, yellow, white, and red orchids.\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length = 45\n    distance = 9\n\n    trees_per_side = (length // distance) + 1\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    # The sequence of odd numbers starting from 1 is an arithmetic sequence with a common difference of 2.\n    first_term = 1\n    n = 20\n    common_difference = 2\n\n    # The nth term of an arithmetic sequence is given by:\n    # a_n = a_1 + (n - 1) * d\n    nth_odd_number = first_term + (n - 1) * common_difference\n\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place\n    # and overtook 5 cars, it means there were at least 6 cars\n    # behind the first place car initially.\n    # So, there must be at least 1 (first place) + 1 (Ferrari in second place)\n    # + 5 (cars overtaken) = 7 cars in the race.\n    return 7\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_age_now = 8\n    mike_age_now = 48\n    age_difference = mike_age_now - eddie_age_now\n    eddie_age_future = 18\n    mike_age_future = eddie_age_future + age_difference\n    return mike_age_future\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_payment = lily_book_price + amy_book_price\n    return total_payment\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    interior_angle = (sides - 2) * 180 / sides\n\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_digits = 0\n    for i in range(1, 21):\n        sum_digits += int(\"5\" * i)\n    ans = sum_digits % 10000\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    men_per_wall = 2\n    days_to_build_one_wall = 3\n    days_for_y_men_to_build_x_walls = (men_per_wall * days_to_build_one_wall * x) / y\n\n    return days_for_y_men_to_build_x_walls\n\nans = solution(x, y)  # Replace x and y with the actual number of walls and men when calling the function."
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1/5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white_shirts, checked_shirts = symbols('white_shirts checked_shirts')\n    \n    equation1 = Eq(white_shirts, 7 * checked_shirts)\n    equation2 = Eq(white_shirts + checked_shirts, 72)\n\n    solutions = solve((equation1, equation2), (white_shirts, checked_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    max_num = 0\n    for num in range(100, 1000):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                max_num = max(max_num, num)\n    return max_num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # There seems to be a missing part \"insert pic\" which likely\n    # refers to a specific pattern in the figure sequence that is not given.\n    # Without the information on the specific figure pattern, the problem cannot be solved.\n    # If you provide the figure pattern or more context, I would be able to solve it.\n    \n    # Since I cannot ask for further clarification and the problem statement is incomplete,\n    # returning None or an indicative message is the only option.\n    \n    return \"Figure pattern not provided\"\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Since there are 3 colors, by drawing 4 balls you might still get \n    # 1 ball of each color, so to ensure 2 balls of the same color,\n    # you should draw one more.\n    # Thus, the worst-case scenario according to the Pigeonhole Principle.\n    return 4 + 1\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    square = 42 // 6\n    return square\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    # Calculate the depreciation multiplier for each year\n    depreciation_multiplier = (1 - depreciation_rate) ** years\n\n    # Calculate the final value of the bike after the given number of years\n    final_value = initial_value * depreciation_multiplier\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    total_children = 390\n    equation1 = Eq(girls / 3, boys / 2)  # One-third of the number of girls is equal to one-half of the number of boys\n    equation2 = Eq(girls + boys, total_children)  # Total number of children is the sum of boys and girls\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(1, 60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef solution():\n    m = 1\n    while True:\n        if sum_of_digits(m) == 5 * sum_of_digits(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_april = 300 * 4\n    may_to_july = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n    \n    total_spent = jan_to_april + may_to_july + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temp_at_bottom = 17\n    temp_at_top = -2\n    overall_drop = temp_at_bottom - temp_at_top\n    return overall_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Let's find the difference in age between Tom's current age and the time when his father will be 70\n    age_difference = father_future_age - tom_age\n    # Tom will be the same age as his father's age now after the above calculated difference in years\n    # So the father's current age is Tom's current age plus the age difference\n    father_current_age = tom_age + age_difference\n\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    fraction_men = 9 / 20\n    percent_women = 30 / 100\n\n    men = total_passengers * fraction_men\n    women = total_passengers * percent_women\n    children = total_passengers - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    # Jordan got 3 times as many votes as Emily\n    equation1 = Eq(jordan, 3 * emily)\n    # Evie got 20 fewer votes than Jordan\n    equation2 = Eq(evie, jordan - 20)\n    # Total votes\n    equation3 = Eq(jordan + evie + emily, 400)\n    \n    # Solving equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"07:35\", \"%H:%M\")\n    train_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + train_duration + walk_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        digits_base_4 = [int(digit) for digit in format(N, 'b')]\n        digits_base_6 = [int(digit) for digit in format(N, 'o')]\n        digits_base_8 = [int(digit) for digit in format(N, 'x')]\n        if sum(digits_base_4) == 5 and sum(digits_base_6) == 8 and sum(digits_base_8) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # For three-digit numbers, the first digit cannot be 0.\n    # There are 2 possibilities for the first digit (2 or 3)\n    first_digit_options = 2\n    \n    # The second and third digits can be 0, 2, or 3\n    # So there are 3 possibilities for each of these positions\n    second_digit_options = 3\n    third_digit_options = 3\n    \n    # Calculate the total number of combinations\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    cost_per_twelve_hotdogs = (cost_per_six_hotdogs / 6) * 12\n    return cost_per_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    # Convert £2 to pence\n    total_pence = 2 * 100\n    \n    # Price of one bag of crisps in pence\n    price_per_bag = 16\n    \n    # Calculate the number of bags by dividing the total pence by the price per bag\n    num_bags = total_pence // price_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    difference = 14\n    \n    # Let acorns_Chip be the number of acorns Chip had and acorns_Dale be the number Dale had initially\n    # After giving 14 acorns away, Chip had 14 less acorns and Dale had 14 more\n    # Since they then had the same number of acorns, initially Chip had 14 more acorns than Dale\n    # This gives us the equation: acorns_Chip + acorns_Dale = total_acorns\n    # And also: acorns_Chip - 14 = acorns_Dale\n    # By substitution, we get: acorns_Chip + (acorns_Chip - 14) = total_acorns\n    # Solving for acorns_Chip we get:\n    \n    acorns_Chip = (total_acorns + difference) // 2\n    return acorns_Chip\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6    # Number of fiction books\n    comic_books = 2      # Number of comic books\n\n    # Calculate the arrangements using the formula for permutations of identical items\n    arrangements = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return arrangements\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0:\n            if int(num**0.5)**2 == num:\n                return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    sum_ = 51\n    count = 0\n\n    while sum_ > 0:\n        for prime in reversed(prime_numbers):\n            if prime <= sum_:\n                sum_ -= prime\n                count += 1\n                break\n\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n\n    for penpals_3 in range(total_penpals + 1):\n        penpals_4 = total_penpals - penpals_3\n        total_written_pages = pages_4 * penpals_4 + pages_3 * penpals_3\n        if total_written_pages == total_pages:\n            return penpals_3\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    used_pie_kg = 750 / 1000\n    used_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (used_pie_kg + used_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    total_people = amy_position_from_back + people_in_front_of_amy - 1\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # In the worst case scenario, all balls of the same color are drawn before getting all three different colors.\n    # This means drawing all 5 balls of one color and all 5 balls of another color.\n    # Thus, after these 10 balls are drawn, the next ball must be of the remaining color.\n\n    # Number of balls of each color is 5.\n    # To ensure 3 different colored balls, draw all balls of two colors first (5 Red + 5 White).\n    # The next drawn ball will be the third color (1 Yellow).\n    # Therefore, we need to draw at least 5 + 5 + 1 = 11 balls.\n\n    return 11\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two pieces of the ribbon\n    x, y = symbols('x y')\n\n    # Setup the equations based on the problem\n    equation1 = Eq(x + y, 12.75)  # Total length of the ribbon\n    equation2 = Eq(x, 2 * y)      # One piece is twice as long as the other\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want the length of the longer piece, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    \n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins_class = symbols('gigi lily coins_class')\n\n    # Gigi and Lily got the same amount of coins in class\n    equation1 = Eq(gigi, 120 + coins_class)\n    equation2 = Eq(lily, 24 + coins_class)\n\n    # The amount of coins Gigi has is now 3 times the amount of coins Lily has\n    equation3 = Eq(gigi, 3 * lily)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins_class))\n\n    return solutions[coins_class]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(1, 21):\n        if not isprime(i):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age)[::-1].zfill(2):\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # The range for a 3-digit number's hundreds digit is 1-9,\n    # tens digit is 0-9, units digit is 0-9 for odd number, it's 1, 3, 5, 7, or 9.\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for units in [1, 3, 5, 7, 9]:\n                if hundreds + tens + units == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since you can boil more than one egg at the same time, \n    # the least amount of time it takes to boil 3 eggs is the same as boiling one egg\n    # provided that you have a pot that can fit them all at once.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    capacity = 6\n    cabins_needed = (students + capacity - 1) // capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # Equations based on sum of arithmetic sequences:\n    # Let the first term be a and the common difference be d.\n    # Sum of first 4 terms: 4a + 6d = 124\n    # Sum of all terms: (n/2)*(2a + (n-1)d) = 210\n    # Sum of last 4 terms: sum of all terms - sum of first (n-4) terms\n    # Sum of last 4 terms: (n/2)*(2a + (n-1)d) - (n-4)/2*((2a + (n-5)d)) = 156\n\n    # Using the sympy library to solve the system of equations\n    from sympy import symbols, Eq, solve\n\n    a, d, n = symbols('a d n')\n    eq1 = Eq(4*a + 6*d, 124)\n    eq2 = Eq(n*(2*a + (n-1)*d)/2, 210)\n    eq3 = Eq(n*(2*a + (n-1)*d)/2 - (n-4)*(2*a + (n-5)*d)/2, 156)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3), (a, d, n))\n\n    # Extracting the number of terms solution\n    for sol in solutions:\n        if sol[n].is_real and sol[n] > 0:\n            ans = sol[n]\n            break\n\n    return ans\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n    \n    total_dough_g = initial_dough_kg * 1000\n    dough_used_g = (cookie_dough_g * num_cookies) + (brownie_dough_g * num_brownies)\n    dough_left_g = total_dough_g - dough_used_g\n    dough_left_kg = dough_left_g / 1000\n    \n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # Dan needs to take in less than 1000 calories today to lose weight\n    # Let x be the number of calories Dan can take in today\n    # The inequality representing this situation is: x < 1000\n    # Since we are asked to provide the inequality, and not solve it,\n    # We simply return the string representation of the inequality\n\n    return \"x < 1000\"\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    total_days = 15\n    money = initial_amount\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:\n            money += 5  # Deposit on odd days\n        else:\n            money -= 8  # Spend on even days\n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)\n    ans = pattern[index]\n    return ans\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n\n    wine_gums_per_child = total_wine_gums // children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    common_difference = 3\n    last_term = 298\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    sum = (436 + 721 + 8219 + 917) - (532 + 918 + 7912 + 394)\n    return sum\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, total_chocolates = symbols('friends total_chocolates')\n\n    # 18 chocolates per friend leaves 41 extra\n    equation1 = Eq(total_chocolates - 18 * friends, 41)\n\n    # 23 chocolates per friend short of 34\n    equation2 = Eq(23 * friends - total_chocolates, 34)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (friends, total_chocolates))\n\n    # Calculate remaining chocolates if 20 pieces are given to each friend\n    remaining_chocolates = solutions[total_chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from math import sqrt\n\n    # find all factors of 89100 that are 3 digits long\n    factors = []\n    for i in range(100, 1000): \n        if 89100 % i == 0:\n            factors.append(i)\n    \n    # test each factor for multiples and digit sum\n    for factor in factors:\n        is_multiple_of_27 = factor % 27 == 0\n        is_multiple_of_7 = factor % 7 == 0\n        digit_sum = sum(int(digit) for digit in str(factor))\n        is_digit_sum_17 = digit_sum == 17\n        is_perfect_square = int(sqrt(factor)) == sqrt(factor)\n        \n        # count the number of true statements\n        # return the factor if exactly three statements are true\n        if sum([is_multiple_of_27, is_multiple_of_7, is_digit_sum_17, is_perfect_square]) == 3:\n            return factor\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    spent_on_book = initial_amount * 0.15\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.30\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    dividend = 5992\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # If the best boy soldier can do 50 push-ups,\n    # and Mulan can beat even the best boy soldier, then\n    # Mulan can do more than 50 push-ups.\n    mulan_pushups = '> 50'\n    \n    return mulan_pushups\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining = 10\n    day2 = (remaining + 2) * 2\n    initial = (day2 + 4) * 2\n    return initial\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons = 40\n    blown_up = 22\n    burst = 3\n    remaining = total_balloons - (blown_up - burst)\n    return remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # According to the provided information and considering it's a \n    # round-robin tournament where each team plays every other team once,\n    # We use the formula for the number of games in a round robin tournament:\n    # n(n-1)/2, where n is the number of teams.\n    \n    teams = 32\n    played_games = 96\n\n    # Calculate the total games that should be played in the tournament\n    total_games = teams * (teams - 1) // 2\n\n    # Calculate the number of games remaining\n    remaining_games = total_games - played_games\n\n    return remaining_games\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Calculate the minimum number of candies the child with the most can have,\n    # under the conditions that each of the 8 children receives a different number\n    # and they all receive at least one piece of candy.\n    min_candies_for_max_child = 1\n    total_candies = 88\n\n    # Since each child must get at least one piece, we reserve 7 candies for the other children\n    # We distribute the candies so that each child gets a different amount by making sure that\n    # each child gets one more candy than the previous child.\n    # For 7 children, we have: 1, 2, 3, 4, 5, 6, 7 candies - a difference of 1 between each child.\n    reserved_candies = sum(range(1, 8))\n\n    # The child with the most candies gets the remaining candies\n    min_candies_for_max_child = total_candies - reserved_candies\n    \n    return min_candies_for_max_child\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, we have:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    \n    # For Jerry to win, he must leave the two stacks in such a state that \n    # no matter what Tom does afterwards, Tom cannot win in his next move.\n    \n    # This situation occurs when the two stacks have the same number of stones,\n    # because then, no matter how many stones Tom takes from one stack,\n    # Jerry can take the same amount from the other stack and mirror Tom's move,\n    # until they reach a situation where there is one stone left in each stack.\n    # Jerry will then take one stone and leave the last stone for Tom.\n    \n    # Therefore, Jerry should take:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # He needs to take 4 stones from Stack A to match the count of Stack B.\n    stack = 'A'\n    stones_to_take = 4\n\n    return stones_to_take, stack\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and the number of boys be 9x\n    # According to the problem, there are 16 more boys than girls\n    # Thus, 9x - 7x = 16 => 2x = 16 => x = 8\n    x = 16 / 2\n\n    # Total number of pupils = number of girls + number of boys\n    total_pupils = 7 * x + 9 * x\n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(range(1, 3*37, 3))\n    mistake = correct_sum - 2011\n    person = mistake // 6 + 1  # since each mistake causes two deviations\n    return person\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n    \n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return round(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # If the numbers are consecutive, we can represent them as:\n    # x - 2, x - 1, x, x + 1, and x + 2\n    # The sum of these five terms will be:\n    # 5x = 160\n    # Solving for x gives us the middle number of balls.\n    x = 160 // 5\n    \n    # The student with the most balls would have x + 2\n    most_balls = x + 2\n    return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reverse_M = ones * 100 + hundreds\n                return reverse_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200   # 2 meters = 200 cm\n    piece_length_cm = 6     # Each piece is 6 cm long\n    num_pieces = stick_length_cm // piece_length_cm  # Integer division for complete pieces\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    ans = comb(total_balls, balls_to_select)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Rational, Eq, solve\n    \n    a, b, c = symbols('a b c', integer=True)\n\n    # Constructing the equation according to the given complex fraction\n    equation = Eq(Rational(13, 10), 1 + 1 / (a + 1 / (b + 1 / c)))\n    \n    # Solve the equation\n    solution_set = solve(equation, (a, b, c))\n    \n    # Filtering out only positive integer solutions\n    positive_integer_solutions = [(ta, tb, tc) for ta, tb, tc in solution_set if all(x.is_integer and x > 0 for x in (ta, tb, tc))]\n    \n    # Assuming there is one unique solution as per the question\n    unique_solution = positive_integer_solutions[0]\n    \n    # Calculate the required expression a + 2b + 3c\n    a_value, b_value, c_value = unique_solution\n    result = a_value + 2 * b_value + 3 * c_value\n    \n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    ones_digit = (base ** exponent) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n    \n    num_days = total_pages / average_pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -3\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * points_correct + wrong * points_wrong\n        if score == 52:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1  # Start with the first day\n    eaten = 0  # No peaches eaten on the first day\n    \n    # The monkey eats at least one more peach than the day before\n    # We need to maximize the number of days\n    while (eaten + days) <= 100:\n        eaten += days\n        days += 1\n\n    return days - 1  # Subtract one because on the last day he eats all remaining peaches\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    # This is an arithmetic sequence with\n    # first term (a) = 10, last term (l) = 155 and common difference (d) = 5\n    a = 10\n    l = 155\n    d = 5\n\n    # The number of terms (n) in the arithmetic sequence\n    # l = a + (n - 1) * d => n = (l - a) / d + 1\n    n = (l - a) // d + 1\n\n    # Sum of the arithmetic sequence given by the formula: S = n/2 * (a + l)\n    ans = n / 2 * (a + l)\n\n    return ans\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    total_trees = 100\n    extra_trees_girls = 12\n\n    # Let number of trees planted by boys be b\n    # Then number of trees planted by girls will be b + 12\n    # The total number of trees planted by boys and girls together is 100\n    # b + (b + 12) = 100\n    # 2b + 12 = 100\n    # 2b = 100 - 12\n    # 2b = 88\n    # b = 88 / 2\n    # b = 44\n\n    b = (total_trees - extra_trees_girls) / 2\n    return int(b)\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = sum(number for number in range(1, 21) if number % 6 == 1)\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    # We know that 48% of the solution is sugar.\n    sugar_percentage = 48 / 100\n    total_solution_mass = 600  # in grams\n\n    # Calculate the amount of sugar in the solution.\n    sugar_mass = total_solution_mass * sugar_percentage\n\n    # The remaining mass of the solution will be water.\n    water_mass = total_solution_mass - sugar_mass\n\n    return water_mass\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    return 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    youngest = (42 - 3) // 3  # Middle term of the youngest three dwarfs\n    middle_dwarf_age = youngest + 1  # The age of the middle dwarf (4th in sequence)\n    sum_oldest_three = 3 * middle_dwarf_age + 3  # Sum of the oldest three is same as three times the middle term + 3\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(1, 5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # Considering the place values, we can express the equation as follows:\n    # 1000a + 100b + 10c + d + 100a + 10b + c + 10a + b + a = 1370\n    # Simplifying this we get:\n    # 1111a + 111b + 11c + d = 1370\n\n    # Therefore one way to solve this is to iterate over possible values of a (1-9)\n    # and then calculate b, c, and d from the remaining value.\n    for a in range(1, 10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if 1111*a + 111*b + 11*c + d == 1370:\n                        return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractions_part = 4 / 5 * 5  # Since 4/5 repeated 5 times, adding them gives 4.\n    numbers_part = 19 + 199 + 1999 + 19999 + 199999  # Sum of the whole numbers\n    ans = numbers_part + fractions_part\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    amount = total_pence * fraction\n\n    return amount\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    years_later = (35 - current_total_age)\n\n    return years_later\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_marks = 75\n    num_tests = 3\n    total_score_two_tests = 172\n    \n    total_score_three_tests = average_marks * num_tests\n    remaining_test_score = total_score_three_tests - total_score_two_tests\n    \n    return remaining_test_score\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dad_current, son_current = symbols('dad_current son_current')\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(1/i for i in range(1, 9) for _ in range(i))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    # 6 fruit drops is 2/7 of the milk chocolates\n    equation1 = Eq(6, milk_chocolates * 2 / 7)\n    # Milk chocolates is 3/4 of the total number of sweets\n    equation2 = Eq(milk_chocolates, total_sweets * 3 / 4)\n\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let's denote the prices of one football as f and one volleyball as v.\n    from sympy import symbols, Eq, solve\n    \n    f, v = symbols('f v') # Define symbolic variables for the price of football and volleyball\n    \n    # We have two equations based on the information given:\n    # 1 football + 2 vollyballs = $60\n    equation1 = Eq(f + 2*v, 60)\n    # 2 footballs = $60 - $16 (money returned)\n    equation2 = Eq(2*f, 60 - 16)\n    \n    # Now, we solve the equations\n    solutions = solve((equation1, equation2), (f, v))\n    \n    # Solution for the price of volleyball\n    return solutions[v]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for ages\n    a1, a2, a3, a4, a5 = symbols('a1 a2 a3 a4 a5')\n\n    # Given conditions\n    mean_eq = Eq((a1 + a2 + a3 + a4 + a5)/5, 9)       # Mean age is 9\n    mode_age = 7                                       # Mode age is 7, therefore at least two team members are 7 years old\n    median_age = 8                                     # Median age is 8, that gives us that a3 (when sorted) will be 8\n    range_age = Eq(max(a1, a2, a3, a4, a5) - min(a1, a2, a3, a4, a5), 6)  # Range is max age - min age = 6\n\n    # Possible solutions for a1, a2, a3, a4, a5 when a3=8 and two members have the age of 7\n    possible_solutions = list(filter(lambda sol: sol.count(7) >= 2 and 8 in sol and ((max(sol) - min(sol)) == 6), \n                               [(age1, age2, age3, age4, age5) for age1 in range(3, 14) for age2 in range(3, 14) \n                                for age3 in range(3, 14) for age4 in range(3, 14) for age5 in range(3, 14) \n                                if sum([age1, age2, age3, age4, age5]) == 45]))\n\n    # Since there's only one unique solution that follows the given conditions\n    final_solution = possible_solutions[0]\n    \n    # Sort ages\n    sorted_ages = sorted(final_solution)\n\n    # Second oldest\n    second_oldest = sorted_ages[-2]\n\n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Possible digits for each position based on clues\n    pos1 = {'3', '5', '4'}  # From clue 3 (cannot be 1 because 1 needs to be in the number but at a different position)\n    pos2 = {'5', '4', '1'}  # From clue 3 (cannot be 3 because 3 needs to be in the number but at a different position)\n    pos3 = {'3', '1'}       # From clue 2 (can't be 2, 4, or 5, and from clue 3 at least one of 3 or 1 must be here)\n    pos4 = {'7', '3'}       # From clue 1\n\n    # From clue 1: 1703\n    # Digit 1 and 7 cannot change \n    pos1.discard('7')\n    pos4.discard('1')\n\n    # From clue 2: 2745\n    # Digit 2 and 5 cannot be in pos3 or pos4 based on the exclusions\n    # So 4 must be in pos2 and 5 must be in pos1 \n    pos2 = {'4'}\n    pos1 = {'5'}\n\n    # Now, pos3 cannot have 4\n    pos3.discard('4')\n\n    # From clue 3: 3541\n    # 3 must be in pos4 as it is the only position left for it\n    pos4 = {'3'}\n\n    # So pos3 must be 1 based on the remaining options\n    pos3 = {'1'}\n\n    # Combine the positions to form the number\n    number = ''.join([pos1.pop(), pos2.pop(), pos3.pop(), pos4.pop()])\n\n    return int(number)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3\n    return factorial(num_books)\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # Total permutations for 5 people\n    total_permutations = 5 * 4 * 3 * 2 * 1\n    # Permutations for A if A can be at any position\n    permutations_with_A_anywhere = total_permutations // 5\n    # Permutations for A restricted from first and last position (3 possible positions for A)\n    permutations_with_A_restricted = permutations_with_A_anywhere * 3\n    return permutations_with_A_restricted\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n\n    num_people = 16\n    ans = math.ceil(math.log(num_people, 2))\n    return ans\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for boys (b) and girls (g)\n    b, g = symbols('b g')\n    \n    # In the morning\n    # Number of boys was 50% more than the number of girls\n    # b = 1.5 * g\n    morning_eq = Eq(b, 1.5 * g)\n    \n    # In the afternoon\n    # 12 boys and 12 girls joined the group.\n    # Ratio of the number of boys to girls became 19:14\n    # (b + 12) / (g + 12) = 19 / 14\n    afternoon_eq = Eq((b + 12) / (g + 12), 19 / 14)\n\n    # Solve the system of equations\n    solutions = solve((morning_eq, afternoon_eq), (b, g))\n\n    # Calculate the total number of children in the Botanic Gardens in the afternoon\n    total_afternoon = solutions[b] + 12 + solutions[g] + 12\n\n    return total_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    ratio_initial = Eq(apples / oranges, 3 / 8)\n    ratio_after = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((ratio_initial, ratio_after), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit from 1 to 9\n        for tens in range(0, 10):  # Tens digit from 0 to 9\n            for ones in range(0, 10):  # Ones digit from 0 to 9\n                # Check if tens is smaller than both hundreds and ones\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    # This is a classic example of a derangement problem, also known as subfactorial or !n.\n    # For n students, the number of derangements is denoted as !n and can be calculated\n    # using the formula !n = (n - 1) * (!(n - 1) + !(n - 2))\n    \n    # Define a function to calculate the subfactorial using recursion\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    # Calculate the number of ways for 6 students\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    notebooks = 0\n    for colour_pencils in range(11):\n        notebooks = 10 - colour_pencils\n        if notebooks * 3 + colour_pencils * 9 == 48:\n            return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    first_floor_seats_per_row = 36\n    total_students = 500\n\n    first_floor_capacity = first_floor_rows * first_floor_seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n    \n    return second_floor_students\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n    total = red + yellow\n    return total\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_term = 56\n    ratio = current_term // 28\n    next_term = current_term * ratio\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the smallest of the six consecutive even numbers be x.\n    # Then the sequence of numbers in terms of x will be:\n    # x, x+2, x+4, x+6, x+8, x+10\n    # The sum of these numbers is 6x + 30\n    # Given that this sum equals 510, we can set up and solve the equation: 6x + 30 = 510\n\n    total_sum = 510\n    num_terms = 6\n    sum_formula = (num_terms * (2 * 'smallest' + (num_terms - 1) * 2)) // 2\n    \n    # Solve for x, the smallest number in the sequence\n    for x in range(2, 100, 2):  # Start at 2 and iterate by even numbers\n        if 6 * x + 30 == 510:\n            smallest = x\n            break\n    \n    # Calculate the consecutive even numbers\n    numbers = [smallest + 2 * i for i in range(num_terms)]\n    \n    # Since the numbers are evenly spaced, the median will be the average of the middle two numbers\n    median = (numbers[2] + numbers[3]) / 2\n    \n    # The mean is the total sum divided by the number of terms\n    mean = total_sum / num_terms\n    \n    # The difference between the mean and median is requested\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n\n    for i in range(1, 51):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for number in range(3, 48):\n        count += str(number).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards Helen won\n    x = symbols('x')\n\n    # Original cards\n    helen_original = 18\n    oliver_original = 22\n\n    # After game cards\n    helen_after = helen_original + x\n    oliver_after = oliver_original - x\n\n    # Helen has 10 more cards than Oliver after the game\n    equation = Eq(helen_after, oliver_after + 10)\n\n    # Solve for x\n    solved_x = solve(equation, x)\n\n    # Calculate the current number of cards Helen has\n    helen_current = helen_original + solved_x[0]\n\n    return helen_current\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n    \n    sugar_weight = total_weight * concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climbed_up_first = 23\n    climbed_down = 31\n    climbed_up_second = 17\n\n    final_height = initial_height + climbed_up_first - climbed_down + climbed_up_second\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "from math import log10, ceil\n\ndef solution():\n    N = 5 ** 100\n    num_digits = ceil(log10(N))\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes - strawberries, 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # Then the consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is 5x + 10 (since 1+2+3+4=10)\n    # According to the problem, this sum equals 40\n    # Therefore, we have 5x + 10 = 40\n    # Solving for x, we get x = (40 - 10) / 5\n    x = (40 - 10) // 5   # Using integer division for whole number\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number we are looking for\n    number = symbols('number')\n    \n    # The equation is: 3 * number - 8 = 4\n    equation = Eq(3 * number - 8, 4)\n    \n    # Solve the equation for the number\n    solution = solve(equation, number)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtracting 1 for the number '1', which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    result = 2 * 13 * 3.5\n    return result\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39  # the fourth number\n    n12 = 57  # the twelfth number\n    d = (n12 - n4) / (12 - 4)  # common difference\n    n1 = n4 - 3 * d  # the first term\n    \n    return n1\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    # We will create the largest number by sorting the digits in descending order\n    digits = [1, 3, 5, 2]\n    # Sort the digits in reverse (descending order)\n    sorted_digits = sorted(digits, reverse=True)\n    # Combine the digits to form the largest number\n    largest_number = int(\"\".join(map(str, sorted_digits)))\n    return largest_number\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # The given digits for the 5-digit numbers\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    all_numbers = []\n\n    # Generate all possible 5-digit numbers from the given digits (without repetition)\n    for p in permutations(digits, 5):\n        # Skip numbers starting with zero (not 5-digit number)\n        if p[0] != 0:\n            num = int(''.join(map(str, p)))\n            # Check if the number is a multiple of 9\n            if num % 9 == 0:\n                all_numbers.append(num)\n    \n    # Find the largest and smallest numbers that are multiples of 9\n    max_num = max(all_numbers)\n    min_num = min(all_numbers)\n    \n    # Return the largest possible value of (M - N) / 9\n    return (max_num - min_num) // 9\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salinity_1 = 0.30  # 30% solution\n    salinity_2 = 0.20  # 20% solution\n\n    mass_1 = 30  # grams of 30% solution\n    mass_2 = 20  # grams of 20% solution\n\n    salt_mass_1 = mass_1 * salinity_1\n    salt_mass_2 = mass_2 * salinity_2\n\n    total_salt = salt_mass_1 + salt_mass_2\n\n    desired_salinity = 0.10  # 10% solution\n\n    # Calculate the mass of water to be added (w) to reach desired salinity\n    # We form the equation: (total_salt) / (mass_1 + mass_2 + w) = desired_salinity\n    # From this equation: w = (total_salt / desired_salinity) - (mass_1 + mass_2)\n\n    w = total_salt / desired_salinity - (mass_1 + mass_2)\n\n    return w\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend  = 540\n    correct_addend    = 450\n    incorrect_sum     = 987\n    # Correct the mistake by subtracting the difference between the incorrect and correct addend \n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    # Iterate through possible integers to find the one that satisfies the equation\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Johnson's speed\n    johnson_speed = 600  # m/min\n    # Vicky's speed\n    vicky_speed = 250  # m/min\n    # Total distance\n    distance = 3000  # m\n\n    # Time taken by Johnson to finish the race\n    johnson_time = distance / johnson_speed\n    # Time taken by Vicky to finish the race\n    vicky_time = distance / vicky_speed\n\n    # Difference in time\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To guarantee we have 29 balls of one color, we have to account for the worst-case scenario.\n    # That means picking the maximum number of balls of other two colors first.\n    # Since we need to secure 29 of one color, we consider the case where we pick \n    # all 28 of the second color and all 30 of the third color first.\n    # Then we add 29 of the first color to ensure we have 29 of at least one color.\n    # Sum these up to find the minimum number of balls we need to pick.\n\n    # Worst-case of picking red and white (28 reds and 30 whites)\n    red_and_white = 28 + 30\n    # Now, adding 29 blue balls to guarantee 29 of one color\n    minimum_pick = red_and_white + 29\n    \n    return minimum_pick\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case scenario, we can draw all different numbers until we get to 3 cards of the same number. \n    # Since each number can appear a maximum of 4 times (once for each pattern), we can draw 2 cards of each number without getting 3 of the same number.\n    # 13 numbers * 2 cards per number = 26 cards drawn without getting 3 of the same number.\n    # The next card we draw must be the third card of a number we already have, which will satisfy the condition of having at least 3 cards of the same number.\n    # So we need to draw 26 (all different pairs) + 1 (the next card guarantees a triplet) = 27 cards.\n    return 27\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n\n    proportion = len(prime_numbers) / total_numbers\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = len(known_numbers) + 1  # including the missing number\n    mean_value = 8\n    \n    total_sum = mean_value * total_numbers\n    sum_known_numbers = sum(known_numbers)\n    missing_number = total_sum - sum_known_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    ans = sum_1_to_50 - 1 + 51\n    return ans\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    \n    total_combinations = len(notebooks) * len(calendars)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFGH'):\n        if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n            if 'FG' in ''.join(perm) or 'GF' in ''.join(perm):\n                if perm.index('C') == (perm.index('A') + perm.index('B')) / 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variable for the volume transferred\n    x = symbols('x')\n\n    # Bottle A after transfer, 5 liters originally with 10% lime, lose x liters gain x liters with 20% lime\n    # New lime = original lime - lime removed + lime gained from Bottle B\n    lime_a = 5 * 0.10 - x * 0.10 + x * 0.20\n    \n    # Bottle B after transfer, 3 liters originally with 20% lime, lose x liters gain x liters with 10% lime\n    # New lime = original lime - lime removed + lime gained from Bottle A\n    lime_b = 3 * 0.20 - x * 0.20 + x * 0.10\n    \n    # New total volume for both bottles is (5 - x) for A and (3 - x) for B\n    volume_a = 5 - x\n    volume_b = 3 - x\n\n    # Set new concentration equal for both bottles and solve for x\n    equation = Eq(lime_a / volume_a, lime_b / volume_b)\n    solution = solve(equation, x)\n\n    # Return the valid solution (since x cannot be greater than the volume of the smaller bottle)\n    ans = [sol for sol in solution if sol > 0 and sol < 3][0]\n    return ans\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows = -(-students // tables_per_row)\n    \n    return rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    hundreds_digit = 0\n    for i in range(1, 124):\n        num = int('123' * i)\n        hundreds_digit = (hundreds_digit + num // 100) % 10  # We are only interested in the hundreds place\n    return hundreds_digit\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount // 2\n\n    # Check which coin is lost\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    painting_length = 90\n    lego_length = painting_length - 70.5\n    length_breadth_ratio = 5 / 2\n\n    # Calculate the breadth based on the ratio and new lego length\n    lego_breadth = (lego_length / length_breadth_ratio) * 2\n    \n    # Finding the maximum size of the breadth of the lego, thus converting to the closest lower integer\n    max_lego_breadth = int(lego_breadth)\n\n    return max_lego_breadth\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200\n    kane_distance = jaan_distance - 12.5\n\n    jaan_speed = 8\n    jaan_time = jaan_distance / jaan_speed\n\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_per_hour = 12\n    normal_hours = 8\n    overtime_pay_per_hour = normal_pay_per_hour * 1.25\n    overtime_hours = 10 - normal_hours\n\n    total_pay = (normal_hours * normal_pay_per_hour) + (overtime_hours * overtime_pay_per_hour)\n    return total_pay\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_cost = 5.50\n    milk_cost = 3.75\n    voucher_value = 110 / 100  # converting pence to pounds\n\n    total_cost = cake_cost + milk_cost\n    actual_payment = total_cost - voucher_value\n\n    return actual_payment\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z be the rates at which John, Raj, and Pete work, respectively\n    x, y, z = symbols('x y z')\n\n    # Since they can finish the job in 1 hour together, their combined rate is 1 job per hour\n    eq1 = Eq(x + y + z, 1)\n\n    # John and Raj can finish the job in 1 hour 12 min, which is 1.2 hours\n    eq2 = Eq(x + y, 1 / (1 + 12 / 60))\n\n    # Raj and Pete can finish the job in 1 hour 30 min, which is 1.5 hours\n    eq3 = Eq(y + z, 1 / (1 + 30 / 60))\n\n    # We'll solve for Raj (y)\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n    raj_rate = solutions[y]\n\n    # Raj will take the reciprocal of his rate to finish the job by himself (in hours)\n    raj_time_hours = 1 / raj_rate\n\n    # Convert hours to minutes\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35 / 100\n    total_number = 60\n    ans = percentage * total_number\n    return ans\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100): # Two-digit numbers range from 10 to 99\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    digit_sequence = \"928\"\n    num_repetitions = 99 // len(digit_sequence)\n    remaining_digits = 99 % len(digit_sequence)\n    \n    full_number = digit_sequence * num_repetitions + digit_sequence[:remaining_digits]\n    remainder = sum(int(digit) for digit in full_number) % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the younger and elder brothers\n    y, e = symbols('y e')\n    \n    # Given current ages sum up to 42\n    equation1 = Eq(y + e, 42)\n    \n    # A few years ago, the age of the elder brother was the current age\n    # of the younger brother\n    # Let's assume that this \"few years ago\" is \"y\" years ago\n    # Then, at that time, elder brother was \"e - y\" years old\n    \n    # We also know that, at that time, the younger brother was half this age\n    equation2 = Eq(y - y, (e - y) / 2)\n    \n    # Solving the system of equations\n    solution = solve((equation1, equation2), (y, e))\n\n    # solution[e] will give us the elder brother's age\n    return solution[e]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # If we remove 2 balls of each color, we are not guaranteed to have three of the same color.\n    # Therefore, we have to remove one more ball.\n    # 2 white + 2 blue + 2 green + 2 orange + 1 any = 9 balls\n    ans = (2 * 4) + 1\n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == original_number // 3 + 3:\n                ans = original_number\n                return ans\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    matches = 30\n    # The total number of matches is given by the combinations of teams taken 2 at a time,\n    # each multiplied by 2 as they play twice. So, we have n*(n-1) = matches*2\n    # To solve for n, we can use the quadratic formula or a simple loop as below.\n    for n in range(1, matches + 1):\n        if n * (n - 1) == matches * 2:\n            return n\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We use the Chinese remainder theorem which says that, for a system of\n    # congruences with pairwise coprime moduli, there is a solution that is unique\n    # modulo the product of the moduli.\n    # The system of congruences is:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum_ages = 34\n    future_sum_ages = 40\n    \n    years_later = future_sum_ages - current_sum_ages\n\n    return years_later\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let's denote the length of the rope as L, and the circumference of the tree as C.\n    # Then the two conditions given by the problem translate into the following equations:\n    # 10 * C - L = 3 (1)\n    # 12 * C - L = -3 (2)\n    #\n    # From these two equations, we can solve for C by subtracting equation (1) from (2):\n    # (12 * C - L) - (10 * C - L) = -3 - 3\n    # 2 * C = -6\n    # C = -6 / 2\n\n    from sympy import symbols, Eq, solve\n\n    L, C = symbols('L C')\n\n    equation1 = Eq(10 * C - L, 3)\n    equation2 = Eq(12 * C - L, -3)\n\n    # Solving the equations to find C\n    solutions = solve((equation1, equation2), (L, C))\n    C_value = solutions[C]\n\n    # Now we need to find how many meters 8 turns would leave us left over\n    # This would be: 8 * C - L, we already know C, we just need L\n    L_value = solutions[L]\n\n    return 8 * C_value - L_value\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # According to the Pigeonhole Principle:\n    # If n pigeons are put into m pigeonholes with n > m, then at least one pigeonhole\n    # must contain more than one pigeon.\n    \n    countries = 11\n    minimum_same_country = 5\n    \n    # To ensure that not every country has more participants than the minimum,\n    # we distribute the participants equally to the number of countries minus 1,\n    # then add the minimum required number.\n    participants = ((countries - 1) * (minimum_same_country - 1)) + 1\n    \n    return participants\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 4):\n        A, B, C, D = p\n        if A != '0':\n            sum_ABCD = int(A) + int(B) + int(C) + int(D)\n            if (int(A + B) * int(C + D) == int(C + A + B + D + D)):\n                return sum_ABCD\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for the total amount of money Mary had\n    total_money = symbols('total_money')\n    \n    # Mary spent 3/7 of her money on a bag\n    spent = 3/7 * total_money\n    \n    # The remaining money is 3/7 less than the total, which is 4/7 of the total\n    remaining = total_money - spent\n    \n    # The difference between the amount spent and not used was £12\n    equation = Eq(spent - remaining, 12)\n    \n    # Solve for the total amount of money\n    total_money_solution = solve(equation, total_money)\n\n    # Calculate how much Mary spent on the bag\n    amount_spent_on_bag = 3/7 * total_money_solution[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * x + 6, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    sum_of_youngest_three = 42\n    # Since the ages are consecutive, the middle age of the youngest three dwarfs is the average.\n    middle_age_of_youngest = sum_of_youngest_three // 3\n    # The middle dwarf's age is also the fourth age in the sequence of seven ages\n    middle_age_of_all = middle_age_of_youngest + 1\n    # The sum of ages of oldest three is 3 times the middle age of all minus the sum of youngest three\n    sum_of_oldest_three = 3 * middle_age_of_all - sum_of_youngest_three\n    return sum_of_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 7 + 1):\n        result -= i\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    A_B = 447\n    B_C = 335\n    Total = 659\n\n    B = (A_B + B_C - Total)\n\n    return B\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_to_pay_debt = debt / monthly_salary\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    girls_more_than_boys = 30\n\n    # Let's say the number of boys is b.\n    # Then the number of girls would be b + 30.\n    # According to the question, the total number of pupils is 500.\n    # So the sum of boys and girls should be 500.\n    # Therefore we have the equation: b + (b + 30) = 500\n\n    # Now solve the equation for b (number of boys).\n    b = (total_pupils - girls_more_than_boys) / 2\n\n    # The number of girls is b + 30.\n    girls = b + girls_more_than_boys\n    return int(girls)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for a file and a storybook\n    file, storybook = symbols('file storybook')\n\n    # create equations based on the given information\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    # total cost of 1 file and 1 storybook\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_average = 13\n    additional_sausages = 21\n    new_tray = 1\n\n    total_initial_sausages = initial_trays * initial_average\n    total_sausages_now = total_initial_sausages + additional_sausages\n    total_trays_now = initial_trays + new_tray\n\n    new_average = total_sausages_now / total_trays_now\n\n    return new_average\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be 1-9\n        for tens in range(0, 10):  # tens digit must be 0-9 \n            for units in range(1, 10):  # units digit must be 1-9\n                if tens < hundreds and tens < units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (137 + 263) / 20  # speed = total distance / time\n    length_second_bridge = speed * 27 - 137  # total distance for second bridge = speed * time - train length\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    equal_amount = (rani + brenda) / 2\n    money_to_give = brenda - equal_amount\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    equation1 = Eq((2/5) * blue, (3/5) * red)\n    equation2 = Eq(blue + red, 125)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n    \n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial as f\n    \n    # The number of ways to choose books for the first student\n    ways_for_first = f(7) // (f(1) * f(6))\n    \n    # The number of ways to choose books for the second student from the remaining 6 books\n    ways_for_second = f(6) // (f(1) * f(5))\n    \n    # The number of ways to choose books for the third student from the remaining 5 books\n    ways_for_third = f(5) // (f(1) * f(4))\n    \n    # Since for each way of choosing books for the first student, the second and third students can choose in any combination:\n    total_ways = ways_for_first * ways_for_second * ways_for_third\n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Initialize variables for the least number of candies\n    # the child with the most candies can have, and the total candies to distribute\n    most_candies = 0\n    total_candies = 88\n    \n    # Since each child gets a different amount and there are 8 children,\n    # the least number of candies the most fortunate child can get is when the remaining children\n    # get the least possible, which is 1, 2, ..., 7 pieces, respectively.\n    # We calculate the sum of the minimum candies the first 7 children will get\n    min_candies_for_others = sum(range(1, 8))\n\n    # Subtract the sum of minimum candies from the total to find out\n    # the least number of candies the child with the most could get\n    most_candies = total_candies - min_candies_for_others\n\n    return most_candies\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on Dec 1, 2008\n    grandmother_age_2008 = 80\n    \n    # Daughter's age on Dec 1, 1996\n    daughter_age_1996 = 40\n    \n    # Difference in years between 2008 and 1996\n    year_diff = 2008 - 1996\n    \n    # Daughter's age on Dec 1, 2008\n    daughter_age_2008 = daughter_age_1996 + year_diff\n    \n    # Grandmother's age when daughter was born\n    grandmother_age_when_daughter_born = grandmother_age_2008 - daughter_age_2008\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Individual A can pass the ball to B, C, or D (3 ways).\n    first_pass_options = 3\n    \n    # After A passes to, say, B, B has 2 options, to pass to C or D.\n    second_pass_options = 2\n    \n    # Now whoever got the ball from B has only one option, to pass to A (as A must get the ball on the third pass).\n    third_pass_options = 1\n    \n    # The number of different methods is the product of these possibilities.\n    num_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return num_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    \n    # Nicole had thrice as many tokens as Eddy\n    equation1 = Eq(nicole, 3 * eddy)\n    \n    # Nicole used 130 tokens and Eddy used 38 tokens, they had 24 tokens left altogether\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n    \n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(8)\n    AB_together_permutations = factorial(7) * 2  # Treat AB as one person, and they can be in two orders, AB or BA\n    AB_CD_never_together_permutations = factorial(6) * 2 * 2  # Treat AB and CD as one person each, with two orders for each pair\n\n    CD_together_permutations = factorial(7) * 2  # Treat CD as one person, and they can be in two orders, CD or DC\n    AB_not_together_with_CD_permutations = CD_together_permutations\n\n    ans = AB_together_permutations - AB_not_together_with_CD_permutations\n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Calculate the mass of salt in Leroy's solution\n    leroy_salt = 200 * 35 / 100\n\n    # Calculate the mass of salt in Lenny's solution\n    lenny_salt = 300 * 50 / 100\n\n    # Calculate the mass of the mixture\n    total_mass = 200 + 300\n\n    # Calculate the mass of salt in the mixture\n    total_salt = leroy_salt + lenny_salt\n\n    # Calculate the concentration of salt in the mixture\n    concentration = (total_salt / total_mass) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    difference_valeria_mike = 22 - 6\n\n    valeria_candy = (total_candy + difference_valeria_mike) // 2\n    return valeria_candy\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # The problem is equivalent to finding the largest whole number k such that:\n    # 12^50 > k^75\n    # Taking the 75th root of both sides, we have:\n    # (12^50)^(1/75) > k\n    # Which simplifies to:\n    # 12^(50/75) > k\n    # We now simplify the exponent:\n    # 12^(2/3) > k\n    # Finally, calculate the 2/3 power of 12:\n    k = 12**(2/3)\n    # Since we are looking for the largest whole number, and k is not a whole number,\n    # we take the floor of k:\n    return int(k)\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    oranges_thrown_away = 34\n    oranges_bought = 25\n    oranges_at_end = 133\n\n    oranges_at_first = oranges_at_end + oranges_thrown_away - oranges_bought\n\n    return oranges_at_first\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    # Calculate (14 psi 13)\n    part1 = psi(14, 13)\n    \n    # Calculate (result of (14 psi 13) psi 12)\n    ans = psi(part1, 12)\n    \n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')  # number of girls in the class\n    boys = 36 - girls  # number of boys in the class, since there are 36 students in total\n\n    # Total score of the class = average score of the class * number of students\n    total_score = 89 * 36\n\n    # Equation based on average scores and number of girls and boys\n    equation = Eq(88 * girls + 91 * boys, total_score)\n\n    # Solving for the number of girls\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Given numbers of pets\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Given number of legs\n    total_legs = 28\n    \n    # Calculate the total legs of cats, dogs, and rabbits\n    total_legs_of_cats_dogs_rabbits = (num_cats + num_dogs) * 4 + num_rabbits * 4\n    \n    # Calculate the remaining legs for the birds\n    legs_for_birds = total_legs - total_legs_of_cats_dogs_rabbits\n\n    # Since each bird has 2 legs, divide the remaining legs by 2 to get the number of birds\n    num_birds = legs_for_birds // 2\n    \n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Initial team and time to paint\n    initial_people = 5\n    initial_hours = 6\n\n    # Neighbor's fence requirements\n    neighbor_fence_multiplier = 2\n    neighbor_desired_hours = 5\n\n    # Calculate total work (in people * hours) for painting the initial fence\n    total_work = initial_people * initial_hours\n\n    # Calculate the total work needed for the neighbor's fence, which is twice as long\n    neighbor_total_work = total_work * neighbor_fence_multiplier\n\n    # Find the minimum people required to finish the work within the desired time\n    min_people = neighbor_total_work / neighbor_desired_hours\n\n    # If the minimum number of people is not an integer, we'll need one more person\n    min_people = int(min_people) if min_people.is_integer() else int(min_people) + 1\n\n    return min_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_per_floor = 12 / 4\n    flights_in_30_min = 30 / time_per_floor\n\n    return int(flights_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_more_butter = cookies_per_gram * 21.6\n    return cookies_with_more_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert base 8 number to base 10\n    N_base10 = int('12345654321', 8)\n    \n    # Calculate the remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    # Sum of the remainders\n    ans = remainder_7 + remainder_9\n    \n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, wallet, handbag = symbols('belt wallet handbag')\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n    \n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Three years ago, the combined age was 7 years.\n    combined_age_three_years_ago = 7\n    \n    # Since three years have passed, we need to add 3 years for each cat.\n    combined_age_now = combined_age_three_years_ago + 3 * 2\n    \n    # To find the combined age in four years, we add 4 years for each cat to their current combined age.\n    combined_age_in_four_years = combined_age_now + 4 * 2\n    \n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n    \n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    # Calculating the sum of the series 1*2 + 2*3 + ... + 99*100\n    n = 99\n    sum_of_series = n * (n + 1) * (n + 2) / 3\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n    factors = factorint(2016)\n    exponents = [factors[k] for k in factors]\n    count = 1\n    for exp in exponents:\n        count *= (exp // 2 + 1)\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the first number be x, so the three consecutive numbers are x, x+1, x+2.\n    # Their sum is x + (x + 1) + (x + 2).\n    # We set up the equation and solve for x:\n    # 3x + 3 = 60\n    # 3x = 60 - 3\n    # x = (60 - 3) / 3\n    # x = 57 / 3\n    x = (60 - 3) // 3\n    # The largest number is x+2\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    B, S = symbols('B S')  # B for big pail and S for small pail\n\n    # 3B + 4S = 68\n    equation1 = Eq(3 * B + 4 * S, 68)\n\n    # 4B + 2S = 64\n    equation2 = Eq(4 * B + 2 * S, 64)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (B, S))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Ensure A and C are not 0 since they are the first digits of the number\n        if A == 0 or C == 0:\n            continue\n        num1 = A * 101  # for the number ABA (A*100 + B*10 + A)\n        num2 = C * 101  # for the number CDC (C*100 + D*10 + C)\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    max_non_yellow = 6 + 4 + 12  # sum of orange, pink, and brown shirts\n    must_take_out = max_non_yellow + 1  # one more shirt to ensure getting a yellow shirt\n    \n    return must_take_out\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division to ensure enough packs\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    mixed_numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5]\n    total_sum = sum(mixed_numbers) + 1\n    return total_sum\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Analyzing the pattern given 94, ?, 80, 73, 66\n    # Looking for a pattern in decrements between the numbers: 80 - 73 = 7, 73 - 66 = 7\n    # Assuming the pattern holds, to find the missing number (denoted as x): x - 80 = 7\n    x = 80 + 7\n    return x\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    concentration = (sugar / (sugar + water)) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n\n    total_wine_glasses = 25\n    total_tumblers = 12\n\n    total_ml_sold = (total_wine_glasses * wine_glass_ml) + (total_tumblers * tumbler_ml)\n    ml_in_carton = 1000\n\n    cartons_needed = total_ml_sold / ml_in_carton\n\n    return int(cartons_needed) if cartons_needed == int(cartons_needed) else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of avocados = 2x, peaches = 9x, lemons = 8x\n    x = symbols('x')\n\n    # After selling, we have the following quantities:\n    avocados_after = 2*x - 52\n    peaches_after = 9*x - 12\n    lemons_after = 8*x - 60\n\n    # New ratio of peaches to lemons 6:5\n    equation = Eq(peaches_after / lemons_after, 6/5)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n\n    # Calculate total number of fruits left\n    total_fruits_left = avocados_after.subs(x, x_value) + peaches_after.subs(x, x_value) + lemons_after.subs(x, x_value)\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since the powers of 2 follow a pattern for the last digit: 2, 4, 8, 6 and repeats.\n    # We just need to find the position in this pattern that corresponds to the given power.\n    # The power given is 859433, we will find its position in the pattern of 4.\n    position_in_pattern = 859433 % 4\n    \n    # If the position is 0, it means the last digit is 6 (from the pattern 2,4,8,6)\n    if position_in_pattern == 0:\n        last_digit = 6\n    # If the position is 1, it means the last digit is 2\n    elif position_in_pattern == 1:\n        last_digit = 2\n    # If the position is 2, it means the last digit is 4\n    elif position_in_pattern == 2:\n        last_digit = 4\n    # If the position is 3, it means the last digit is 8\n    elif position_in_pattern == 3:\n        last_digit = 8\n    \n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count = 0\n    for i in range(1, 61):\n        if i % 3 == 0 and i % 5 == 0:  # student is a multiple of 3 and 5, will turn around twice\n            count += 1\n        elif i % 3 == 0 or i % 5 == 0:  # student is a multiple of 3 or 5, will turn around once\n            continue\n        else:  # student does not call out a multiple of 3 or 5, will not turn around\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n    \n    # The age when divided by 2, 4, or 6 leaves a remainder of 1, so \n    # the age must be 1 more than a common multiple of 2, 4, and 6.\n    # Since 4 is a multiple of 2 and 6 is a multiple of both 2 and 3, \n    # the least common multiple of 2, 4, and 6 is simply the least common multiple of 4 and 6.\n    least_common_mult = lcm(4, 6)\n\n    # We must find the smallest number more than the LCM that when divided by 7 leaves a remainder of 5.\n    # We begin checking from 1 more than the LCM and increment by the LCM (since all valid ages must be 1 more \n    # than a multiple of the LCM) until we find an age that satisfies the condition for division by 7.\n    age = least_common_mult + 1\n    while age % 7 != 5:\n        age += least_common_mult\n\n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess and Jill have originally\n    jess, jill = symbols('jess jill')\n\n    # Equation said: Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After sharing: Jill gives eight sweets to Jess\n    # Jill now has: jill - 8\n    # Jess now has: jess + 8\n    # The new ratio: Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets they have together\n    total_sweets = solution[jess] + solution[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [7, 6, 5, 4, 3, 2, 1]\n    \n    for i in range(7, 0, -1):\n        for p in permutations(digits, i):\n            number = int(''.join(map(str, p)))\n            if all(number % d == 0 for d in p):\n                return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for i in range(1, 901, 2):\n        sum = 0\n        length = 0\n        while sum < 900:\n            sum += i\n            i += 2\n            length += 1\n        if sum == 900 and length > max_length:\n            max_length = length\n    ans = max_length\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let's denote A, B, and C as the weights of Adam, Ben, and Carl respectively.\n    \n    # According to the question:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # We need to find A + B + C\n    # Adding all three equations we get:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # To find A + B + C, we divide the sum by 2\n    total_weight = (102 + 97 + 93) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):  # two-digit numbers range from 10 to 99\n        if number % 3 == 2 and number % 11 == 2:\n            return number  # return the first number that satisfies both conditions\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    quotient = (120 - remainder) // divisor + 1\n    smallest_number = quotient * divisor + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n\n    # Convert centimetres to metres\n    height_centimetres_to_metres = height_centimetres / 100\n\n    # Total height in metres\n    total_height_metres = height_metres + height_centimetres_to_metres\n\n    return total_height_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    final_amount = principal * (1 + rate) ** time\n\n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(6 * pupils - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n\n    mean_saving = (january_saving + february_saving + march_saving) / 3\n\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Loop through all hours and minutes in a day\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hour and minute to string\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count occurrences of \"4\" in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    # Check if the number is prime or not\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        p = 3\n        while p * p <= n:\n            if n % p == 0:\n                return False\n            p += 2\n        return True\n    \n    # 233 is the number of chocolate bars\n    ans = is_prime(233)\n    return ans\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum(n**2 for n in range(7, 106, 7))\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start_num = 56\n    end_num = 92\n    multiple = 4\n\n    # Calculate the multiples from 1 to end_num\n    multiples_to_end = end_num // multiple\n\n    # Calculate the multiples from 1 to start_num - 1 (since 56 is inclusive)\n    multiples_to_start = (start_num - 1) // multiple\n    \n    # Calculate the actual number of multiples between start_num and end_num\n    actual_multiples = multiples_to_end - multiples_to_start\n\n    # Check Sam's work\n    is_correct = False\n    if actual_multiples != 9:\n        is_correct = False\n    else:\n        is_correct = True\n\n    return (is_correct, actual_multiples)\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    speed_in_still_water = 15\n    travel_time_downstream = 8\n    \n    # Calculate the speed of the stream\n    speed_of_stream = (distance / travel_time_downstream) - speed_in_still_water\n\n    # Calculate the speed of the ship upstream (against the stream)\n    speed_upstream = speed_in_still_water - speed_of_stream\n    \n    # Calculate the time taken to travel upstream\n    time_upstream = distance / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_choose = 2\n\n    return comb(total_students, students_to_choose)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h be the food consumed by the hippo per day\n    # Let k be the food consumed by the kangaroo per day\n    h, k = symbols('h k')\n\n    # The hippo eats 45 kilograms more food than the kangaroo per day\n    equation1 = Eq(h, k + 45)\n\n    # After 20 days, the hippo has consumed 10 times as much food as the kangaroo\n    equation2 = Eq(20 * h, 10 * (20 * k))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, k))\n\n    # Calculate the total food consumed by the hippo in 20 days\n    total_food_hippo = 20 * solutions[h]\n\n    return total_food_hippo\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_time_minutes = (3 * 60) + 15  # Convert 3.15 PM to total minutes for easier calculation\n    waiting_time = 1 * 60 + 25  # Convert 1h25min to minutes\n    meet_time_minutes = initial_time_minutes + waiting_time\n\n    meet_hour = meet_time_minutes // 60\n    meet_minute = meet_time_minutes % 60\n\n    # Since there are only 24 hours in a day, we take the modulo of meet_hour by 24\n    meet_hour = meet_hour % 24\n\n    return f\"{meet_hour:02d}:{meet_minute:02d}\"\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 20\n\n    # Work done by both in 2 days\n    work_done_2_days = 2 * (work_rate_a + work_rate_b)\n\n    # Remaining work to be done by A\n    remaining_work = 1 - work_done_2_days\n\n    # Days A needs to finish the remaining work\n    days_needed_by_a = remaining_work / work_rate_a\n\n    return days_needed_by_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure at least two balls of the same color,\n    # we have to consider the worst-case scenario\n    # where we keep picking balls of different colors.\n\n    # Picking one green, then one blue, we still can't ensure \n    # two of the same color since we could have one of each.\n    # But when we pick the third ball, no matter what color it is,\n    # we will have two of the same color for sure.\n\n    # Therefore, we need to pick a maximum of 3 balls to ensure\n    # we have at least two balls of the same color.\n\n    return 3\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # Pigeonhole Principle formula: if n is the number of pigeonholes and q the quotient of the division of the number of items by the number of pigeonholes, then at least one pigeonhole contains at least q + 1 items.\n    # We want to ensure that at least 11 students share the same zodiac sign.\n    # So we want at least q = 10 students having the same zodiac sign (1 less than 11 for the guarantee).\n    # Therefore, we need 12 (the number of zodiac signs) times q (10), plus 1 to satisfy the pigeonhole principle.\n    ans = num_zodiac_signs * 10 + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial as fact\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        # A must stand between B and C\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n           perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B'):\n            # D and E must stand together\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                # F and G must not stand together\n                if abs(perm.index('F') - perm.index('G')) != 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n\n    # Take all yellow balls and 1 extra from the rest, we are sure to have 10 of either white or black\n    # because if we took all yellows then we continue to take from white and blacks until we reach a total of 10.\n    balls_needed = yellow_balls + 1 + 4  # 4 extra balls to ensure we have 10 of the same colour\n\n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    start_seat = 3\n\n    # Accounting for the starting seat offset\n    last_candy_seat = (total_candies + start_seat - 1) % 9\n    if last_candy_seat == 0:\n        last_candy_seat = 9\n    \n    return last_candy_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n    \n    # Formula to find the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    last_term = first_term + (num_terms - 1) * difference\n\n    # Formula for the sum of an arithmetic sequence: (n/2) * (first_term + last_term)\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    # Calculate the LCM of 7 and 3 to find the cycle frequency in days\n    cycle_days = lcm(7, 3)\n\n    # Since she eats both on 2nd January, the next time she will eat both on the same day would be:\n    next_same_day = 2 + cycle_days\n\n    return next_same_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    \n    max_without_both = total_children - (children_with_dogs + children_with_cats - total_children)\n    \n    return max_without_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assume the table implies the sum of an arithmetic sequence\n    first_term = 1\n    last_term = 100\n    number_of_terms = (last_term - first_term + 1)\n    sum_of_sequence = (number_of_terms / 2) * (first_term + last_term)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data_points = [12, 145, 32, 77, 62]\n    range_of_dataset = max(data_points) - min(data_points)\n    return range_of_dataset\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirts, shirts = symbols('skirts shirts')\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    solutions = solve((equation1, equation2), (skirts, shirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    # Define a function to find the least common multiple (LCM)\n    def lcm(x, y):\n        from math import gcd\n        return x * y // gcd(x, y)\n\n    # Apply the Chinese Remainder Theorem step-by-step\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n    \n    # Since we are looking for a number that leaves a remainder of 1 when divided by 5,\n    # a remainder of 2 when divided by 6, and a remainder of 7 when divided by 11,\n    # the search range will start from the smallest number that satisfies x ≡ 7 (mod 11) condition,\n    # and it will be within the range of 400 to 800, and must satisfy the other two conditions too.\n    \n    # Find the first number that satisfies the condition x ≡ 7 (mod 11) and is greater than 400\n    x = 7\n    while x <= 400:\n        x += 11\n\n    # Find least common multiple of 5 and 6 that will be used as the step in the loop\n    step = lcm(5, 6)\n\n    # Check each number in the range that satisfies all conditions\n    for num in range(x, 800, step):\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 7:\n            return num\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    sweets_per_ratio = nell_sweets / nell_ratio\n    total_sweets = sweets_per_ratio * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 35):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    return 2 * (5 - 1)\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    avg = sum(sequence) / len(sequence)\n    return avg\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # Average of three numbers is 120\n    average_initial = 120\n    total_initial = 3 * average_initial  # calculate the total sum of the three numbers\n\n    # Desired new average is 110 after adding a fourth number\n    average_new = 110\n    total_new = 4 * average_new  # calculate the new total sum for four numbers\n\n    # The number to be added to get the new average\n    number_to_add = total_new - total_initial\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the amount of marbles each person has\n    jovan, sean, herman = symbols('jovan sean herman')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(herman, jovan + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n\n    # Calculate the total number of marbles\n    total = solutions[jovan] + solutions[sean] + solutions[herman]\n\n    return total\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    distance = 120\n    target_avg_speed = 30\n    outbound_speed = 20\n\n    # Time taken to travel to the place\n    outbound_time = distance / outbound_speed\n\n    # Total time for the round trip at the average speed of 30 mph\n    total_time_for_round_trip = (2 * distance) / target_avg_speed\n\n    # Time taken to return\n    return_time = total_time_for_round_trip - outbound_time\n\n    # Speed required on return to have an average speed of 30 mph\n    return_speed = distance / return_time\n\n    return return_speed\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if (140 + m) == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_feed_days = 12 * 15\n    days_for_20_horses = total_feed_days / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 9\n    num3 = 12\n\n    gcf = gcd(gcd(num1, num2), num3)\n\n    return gcf\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each boy's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Equations based on the problem statement\n    equation1 = Eq(john + andy, 105)      # John and Andy's total mass\n    equation2 = Eq(charles + john, 67)    # Charles and John's total mass\n    equation3 = Eq(andy, 3 * charles)     # Andy's mass is 3 times Charles's mass\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n    meters_per_company_per_day = (total_expressway / companies) / days\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price_per_set = 78\n    sock_price_per_pair = 12\n    legs_per_alien = 5\n    number_of_aliens = 6\n\n    total_legs = legs_per_alien * number_of_aliens\n    total_shoe_sets = total_legs // 5\n    total_pairs_of_socks = total_legs // 2\n\n    cost_shoes = total_shoe_sets * shoe_price_per_set\n    cost_socks = total_pairs_of_socks * sock_price_per_pair\n\n    total_cost = cost_shoes + cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, median_low, median_high\n\n    def mad(data):\n        median_value = median(data)\n        deviations = [abs(x - median_value) for x in data]\n        mad_value = mean(deviations)\n        return mad_value\n\n    data_set = [3, 2, 3, 5, 2, 4, 4, 1]\n    ans = mad(data_set)\n\n    return ans\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # Total number of oranges to divide\n    total_oranges = 13\n    # Total number of kids\n    kids = 3\n\n    # Since someone might not get any orange, we can use the stars and bars method\n    # We need to place two bars among the oranges to divide them into parts for the kids\n    # The total spots to consider are the oranges plus the bars (which is kids - 1)\n    total_spots = total_oranges + kids - 1\n\n    # Calculating combinations: C(total_spots, kids - 1)\n    from math import comb\n    ans = comb(total_spots, kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Since the ones digit is moved to the thousands place and the number increases by 5877\n    # We can infer that: 1000 * ones_digit - ones_digit = 5877\n    # Therefore the ones_digit is 5877 // (1000 - 1)\n\n    ones_digit = 5877 // 999\n\n    # Now, knowing the ones_digit, we can find the original number\n    # Let's denote the original number's digits by abc(d), where d is the ones_digit\n\n    # The new 4-digit number will be dabc\n    # Since the new number is 5877 more than the original number, we have:\n    # 1000d + 100a + 10b + c = 1000a + 100b + 10c + d + 5877\n\n    # By rearranging: (999d - d) + (100a - 1000a) + (10b - 100b) + (c - 10c) = 5877\n    # Given that 999d = 5877, we can simplify to: -900a - 90b - 9c = 0\n    # Thus, a, b and c must be zeros because if any of them were non-zero, the number would be negative.\n    # Thus, the original number was 000d\n\n    # Construct the original lock number\n    original_number = ones_digit\n\n    return original_number\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    candy_combinations = combinations(numbers, 2)\n    candice_combinations = combinations(numbers, 3)\n    candy_products = {a * b for a, b in candy_combinations}\n    candice_products = {a * b * c for a, b, c in candice_combinations}\n    common_products = candy_products & candice_products\n\n    chosen_numbers = set()\n    for product in common_products:\n        for number in numbers:\n            if product % number == 0:\n                chosen_numbers.add(number)\n\n    not_picked = set(numbers) - chosen_numbers\n    return not_picked.pop()\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [total for total in possible_totals if (total - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20\n    distance_of_road = 200\n    # The distance between each tree is the distance between the first and fifth tree divided by 4 (since there are 4 intervals between 5 trees)\n    interval = distance_between_first_and_fifth / 4\n    # The total number of intervals in the 200m road is the distance of the road divided by the interval\n    total_intervals = distance_of_road / interval\n    # The number of trees is the number of intervals plus 1 (since there's a tree at both the beginning and end of the road)\n    num_trees = total_intervals + 1\n    return int(num_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of $0.50 cookies David has\n    # Let j be the number of $0.50 cookies Jeremy has\n    # Let k be the number of $0.10 cookies Jeremy has\n    d, j, k = symbols('d j k')\n\n    # David's cookies cost thrice as much as Jeremy's cookies\n    # Therefore, the total cost of David's cookies is 3 times the total cost\n    # of Jeremy's cookies. Since David had only $0.50 cookies, we can calculate\n    # the total cost as 0.5 * d for David's cookies and (0.5 * j + 0.1 * k)\n    # for Jeremy's cookies.\n    equation1 = Eq(0.5 * d, 3 * (0.5 * j + 0.1 * k))\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(j, k * 3 / 5)\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(k + 60, j)\n\n    # David had only $0.50 cookies which is equivalent to 1 cookie in this case\n    equation4 = Eq(d, 1)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3, equation4), (d, j, k))\n\n    # Calculate the total worth of Jeremy's cookies\n    total_worth = solution[j] * 0.5 + solution[k] * 0.1\n\n    return total_worth\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    initial_expression = (36 * 21) / (6 * 7) \n    mistake_expression = 36 * 21 / 6 * 7 \n    correct_expression = (36 / 6) * 21 * 7\n    ans = correct_expression if initial_expression == correct_expression else mistake_expression\n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_in_8_years = cousin_age_now + 8\n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let x be the side length of the original square array formed by the boys.\n    # The total number of boys will then be x^2.\n    # When 17 girls line up outside the square, they add one row and one column, \n    # making it a square of side length (x + 1). \n    # The total number of students in the larger square will be (x + 1)^2.\n    \n    # The 17 girls only line up outside the square array, \n    # i.e., they only contribute to the new row and the new column.\n    # The additional number of students caused by the girls is therefore 2x + 1,\n    # because there is 1 additional student at the corner shared by the new row and column.\n    \n    # Hence, we can formulate the equation\n    # (x + 1)^2 - x^2 = 17\n    # Simplifying this equation gives us\n    # x^2 + 2x + 1 - x^2 = 17\n    # 2x + 1 = 17\n    # 2x = 16\n    # x = 8\n    \n    # Now we calculate the total number of boys using\n    # the side length of the original square (x):\n    boys_count = 8 ** 2\n\n    return boys_count\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position = ann_position + people_between + 1\n    people_behind_david = 1\n    \n    total_people = david_position + people_behind_david\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8 = 0\n    page = 1\n    while count_8 < 22:\n        if '8' in str(page):\n            count_8 += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12\n    rate_b = 1 / 8\n\n    combined_rate = rate_a + rate_b\n    time_to_fill_half = 0.5 / combined_rate\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we have 29 balls of one color,\n    # we need to pick (30 - 1) from all 3 colors\n    # 29 Blue + 29 Red + 29 White = 87 balls\n\n    # However, at this point, we only have 28 balls max of each color.\n    # Therefore, we need to pick one more ball to ensure we \n    # have 29 balls of at least one color.\n    \n    ans = 87 + 1  # Picking one more ball\n\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    current_height = 0\n    day = 0\n    \n    while current_height < total_distance:\n        day += 1\n        current_height += climb_distance\n\n        if current_height >= total_distance:\n            break\n        \n        current_height -= slide_distance\n    \n    return day\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate_of_interest = 0.08\n    time = 3\n\n    simple_interest = principal * rate_of_interest * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.50 + 4*x, 19)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    england_mountain_height = 978\n    world_highest_mountain_height = 8848\n\n    height_difference = world_highest_mountain_height - england_mountain_height\n\n    return height_difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and num % 5 == 2:\n            # Check if the number is prime\n            if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n                return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amount of money each person had initially\n    alicia, beth, casey = symbols('alicia beth casey', real=True, positive=True)\n\n    # Equations based on the problem statement\n    # Alicia spent half of her money\n    # Beth spent $60\n    # Casey spent 3 times the amount Alicia spent\n    # They all had the same amount of money left\n    equation1 = Eq(alicia - alicia / 2, beth - 60)\n    equation2 = Eq(beth - 60, casey - 3 * (alicia / 2))\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n    \n    # Return the amount of money Alicia had initially\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # For any number larger than 10!, the last digit will always be 0, because\n    # the factorial will include the terms 2 and 5, resulting in a multiple of 10.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    factors = [2, 2, 3, 8, 5, 5, 5]\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    zeros = 0\n    while product % 10 == 0:\n        zeros += 1\n        product //= 10\n    \n    return zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    original_denominator = 20\n    new_numerator = 30\n    # Since the fractions are equivalent, the cross products will be equal\n    # i.e., numerator * new_denominator = new_numerator * original_denominator\n    new_denominator = (new_numerator * original_denominator) // numerator\n    \n    return new_denominator\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    # Since we are working backwards, we will start with the answer and perform the inverse operations.\n    # Final step: The answer is 1. So after subtracting 8, the quotient was 1 + 8 = 9.\n    quotient = 9\n\n    # Before dividing by 8, the product was 8 * quotient.\n    product = 8 * quotient\n    \n    # Before multiplying by 3, the sum was product / 3.\n    sum_number = product / 3\n\n    # Before adding 6, the original number was sum_number - 6.\n    original_number = sum_number - 6\n\n    # Now we solve for the original number.\n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 10 * x, 253)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of cookies eaten on the first day be x\n    x = symbols('x')\n    \n    # The total number of cookies eaten over 5 days can be expressed as an arithmetic series\n    # Day 1: x, Day 2: x + 6, Day 3: x + 12, Day 4: x + 18, Day 5: x + 24\n    # The sum of an arithmetic series is: n/2 * (first_term + last_term)\n    # Here, n = 5 (days), first_term = x, last_term = x + 24\n    total_cookies = 100\n    n = 5\n    last_term = x + 24\n    \n    # The equation can be written as\n    equation = Eq(n/2 * (x + last_term), total_cookies)\n    \n    # solve for x\n    first_day_cookies = solve(equation, x)[0]\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend\n    total_seashells = remaining_seashells + picked_seashells\n    seashells_per_box = total_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "from sympy import sieve, isprime\n\ndef solution():\n    # Least possible multiple of 9 greater than 1 is 9 and the largest number less than 90\n    for number in range(9, 90, 9):\n        if isprime(number + 1) and (number - 1) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    # there are 4 men and 4 women,\n    # factorial(4) ways to arrange men and factorial(4) ways to arrange women.\n    men_ways = factorial(4)\n    women_ways = factorial(4)\n\n    # Each of these arrangements can have two forms: starting with a man or starting with a woman.\n    # So we multiply by 2.\n    combined_ways = men_ways * women_ways * 2\n\n    return combined_ways\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of questions completed by each student\n    sicheng = symbols('sicheng')\n    cayden = sicheng + 6\n    yixuan = 2 * cayden\n    \n    # Set up the equation based on the information provided\n    equation = Eq(cayden - sicheng, 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    # Solve the equation\n    solutions = solve((equation, equation2, equation3), (sicheng, cayden, yixuan))\n    \n    # Calculate the total number of questions completed by all three students\n    total_questions = solutions[sicheng] + solutions[cayden] + solutions[yixuan]\n    \n    return total_questions\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    frequency = {\"H\": 1, \"A\": 1, \"P\": 2, \"Y\": 1}\n    permutations = factorial(total_letters)\n    \n    for key in frequency:\n        permutations = permutations // factorial(frequency[key])\n        \n    return permutations\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = sum(solutions.values())\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2 / 5\n    fraction_girls = 1 - fraction_boys\n    total_children = girls / fraction_girls\n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n\n    num = 96\n    factors = factorint(num)\n    factor_count = 1\n    for power in factors.values():\n        factor_count *= (power + 1)\n\n    return factor_count\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = 900 * 0.1 * 0.6\n    return result\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # noon in 24-hour format\n    flight_duration = 4  # duration in hours\n    st_petersburg_time_difference = 3  # St Petersburg is 3 hours ahead of England\n\n    arrival_time = (departure_time + flight_duration + st_petersburg_time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if N != O:\n                NO = N * 10 + O\n                ON = O * 10 + N\n                if 2 * NO == 3 * ON:\n                    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum(50 - i if i % 2 == 0 else -(50 - i) for i in range(0, 19, 2))\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # We apply the Pigeonhole Principle here.\n    # If Cindy picks one sock from each of the three colors, she could end up with no matching pair.\n    # Thus, in the worst case scenario, she has to pick an extra sock to ensure she has at least one pair.\n    # That means 3 colors + 1 extra sock = 4 socks required.\n    socks_needed = 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 2.5 * 1000  # 1 kg = 1000 grams\n    return kg_to_grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    \n    # Let the total number of children be x\n    # Then the number of boys is (3/8)x and the number of girls is (5/8)x\n    # Each boy took 4 sweets, so boys took (3/8)x * 4 sweets\n    # Each girl took 12 sweets, so girls took (5/8)x * 12 sweets\n    # The total sweets given out is the sum of sweets taken by boys and girls: (3/8)x * 4 + (5/8)x * 12 = 360\n    \n    # Solve for x\n    # (3/8)x * 4 + (5/8)x * 12 = 360\n    # Simplify to find x\n    # x(3 * 4 + 5 * 12) = 360 * 8\n    # x(12 + 60) = 2880\n    # x = 2880 / 72\n    x = (total_sweets * 8) / (3 * 4 + 5 * 12)\n    \n    # Now calculate the number of girls: (5/8)x\n    number_of_girls = (5 / 8) * x\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_to_km = 5 / 1  # 5cm on map represents 1km on ground\n\n    ground_distance_km = (map_distance_cm / scale_cm_to_km)\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    # Initialize result to 1 for multiplication\n    ans = 1\n\n    # Multiply the sequence of terms\n    for i in range(2, 51):\n        ans *= (1/i - 1/(102-i))\n\n    return ans\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be `n`\n    n = symbols('n')\n\n    # Create equations based on the information given\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    eq4 = Eq((n//6) + (n//7) + (n//8), 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n\n    # Find the solution that satisfies all the conditions\n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmph = 7.2\n    time_seconds = 24\n\n    speed_mps = speed_kmph * (1000 / 3600)  # Convert km/h to m/s\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n\n    only_math = math_students - both_classes\n    \n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # A composite number is indeed a positive integer that is not a prime number\n    # However, the definition excludes the number 1, which is neither prime nor composite.\n    # Therefore, Pip's statement is partially correct but misses the important exclusion of 1.\n    # To check whether Pip's statement is generally correct, we can implement a function\n    # that identifies if a number is composite.\n\n    def is_composite(n):\n        if n <= 1:  # Exclude 0, negative numbers, and 1\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    # Test the function with a range of values to see if it correctly identifies composite numbers\n    test_values = [4, 6, 8, 9, 10]  # These are all composite numbers\n    pip_is_correct = all(is_composite(n) for n in test_values)\n\n    # The answer should be the evaluation of Pip's statement:\n    # True if he is correct, False if not.\n    ans = pip_is_correct\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "from itertools import combinations\n\ndef solution():\n    balloons = 12\n    groups = 4\n    count = 0\n    \n    # Generate all possible combinations of 4 positive integers that sum to 12.\n    # Since balloons are indistinguishable, we can start from 1 (not 0)\n    # and make sure we only count each unique set of groups once.\n    for combo in combinations(range(1, balloons - groups + 1), groups - 1):\n        if sum(combo) < balloons:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    current = 40309\n    while not is_palindrome(current):\n        current += 1\n\n    return current - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Total sweets Kasia has\n    total_sweets = 42\n    \n    # Sweets kept for herself\n    kept_sweets = 13\n\n    # Sweets shared between two friends\n    shared_sweets = (total_sweets - kept_sweets) // 2\n\n    # Lucie gives 2/7 of her sweets to Joan\n    lucie_gives_away = shared_sweets * 2 // 7\n    \n    # Remaining sweets with Lucie\n    lucie_keeps = shared_sweets - lucie_gives_away\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    ans = 0\n    for girls_in_one_side in range(1, 100):  # Assuming the maximum number of girls in one side is less than 100\n        boys_in_one_side = girls_in_one_side + 2  # There are two more boys in one side than girls\n        boys = boys_in_one_side ** 2  # Total boys in the square array\n        girls = (girls_in_one_side ** 2)  # Total girls in the square array\n        if boys - girls == 52:  # Checking the condition: 52 more boys than girls\n            ans = boys + girls  # Total number of students\n            break\n    return ans\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Fraction spent on Friday\n    friday_fraction = 1 / 4\n    # Fraction left after Friday\n    remain_after_friday = 1 - friday_fraction\n    # Fraction spent on Saturday\n    saturday_fraction = 1 / 3\n    # Fraction left after Saturday\n    remain_after_saturday = remain_after_friday * (1 - saturday_fraction)\n    # This is the fraction left for the rest of the week\n    return remain_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children = symbols('adults children')\n    \n    equation1 = Eq(adults + children, 20)\n    equation2 = Eq(adults, 1/5 * children)\n    \n    solutions = solve((equation1, equation2), (adults, children))\n    \n    return solutions[adults]\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the capacity of the fish tank in litres\n    # According to the problem:\n    # Using a 5-litre pail, 4 litres overflow, so the fish tank capacity is 1 less than 5 litres\n    # Using a 3-litre pail, 4 more pails are needed to fill the tank, which is equivalent to adding 4*3 litres to the tank's capacity\n    # This means the tank's capacity is also 3 litres * 4 more pails + 3 litres of the last pail\n    # We can set up the equation: x + 4 = 5 and x - (3 * 4) = 3\n    # Solving for x from either equation should give us the capacity of the tank\n\n    # Using the first equation: x + 4 = 5\n    x = 5 - 4\n    # Now we know the capacity of the tank is x litres\n    return x\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    total_combinations = num_school_bags * num_pencil_boxes\n    return total_combinations\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # Since a willow tree is planted between every 2 ginkgo trees,\n    # the number of willow trees needed is one less than the number of ginkgo trees.\n    willow_trees = ginkgo_trees - 1\n\n    return willow_trees\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of apples and pears be 3x and 4x respectively\n    x = symbols('x')\n    \n    # Original ratios\n    original_apples = 3 * x\n    original_pears = 4 * x\n    \n    # After 36 pears are replaced by 36 apples\n    new_apples = original_apples + 36\n    new_pears = original_pears - 36\n\n    # The equation representing the new ratio\n    ratio_eq = Eq(new_apples, 1.5 * new_pears)\n\n    # Solve the equation to find the value of x\n    solution_x = solve(ratio_eq, x)\n\n    # Calculate the original number of apples using the value of x\n    original_number_of_apples = original_apples.subs(x, solution_x[0])\n\n    return original_number_of_apples\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = '6129043'\n    length_of_sequence = len(recurring_sequence)\n\n    full_repeats = 212 // length_of_sequence\n    remainder = 212 % length_of_sequence\n\n    sum_full_repeats = sum(int(digit) for digit in recurring_sequence) * full_repeats\n    sum_remainder = sum(int(recurring_sequence[i]) for i in range(remainder))\n\n    ans = sum_full_repeats + sum_remainder\n\n    return ans\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let's assume the original square side was of length n, so there were n*n soldiers\n    # After adding 31 soldiers and 1 row and 1 column, the square side becomes n+1\n    # The new total of soldiers is (n+1)*(n+1)\n    # We know that (n+1)*(n+1) = n*n + 31 (since 31 soldiers were added)\n    # This gives us the equation: n^2 + 2n + 1 = n^2 + 31\n    # Simplifying this we get: 2n + 1 = 31\n    # Solving for n gives us n = (31 - 1) / 2 = 15\n    # The total number of soldiers in the array now is (n+1)*(n+1) = 16*16\n    \n    # Calculate n based on the equation derived\n    n = (31 - 1) // 2\n    \n    # Calculate total number of soldiers in the array now\n    total_soldiers = (n+1) * (n+1)\n    \n    return total_soldiers\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    count_zeros = 28\n    n = 1\n    factorial_zeros = 0\n    \n    while factorial_zeros < count_zeros:\n        n += 1\n        temp_n = n\n        count_fives = 0\n        while temp_n % 5 == 0:\n            count_fives += 1\n            temp_n //= 5\n        factorial_zeros += count_fives\n    \n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price_per_bottle = 1.09\n    chocolate_bar_price = 0.55\n    num_lemonades = 5\n    num_chocolate_bars = 6\n    ten_pound_note = 10\n\n    total_cost = (lemonade_price_per_bottle * num_lemonades) + (chocolate_bar_price * num_chocolate_bars)\n    change = ten_pound_note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')\n\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    current_age = solve(equation, sam)\n\n    return current_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # Total letters in \"RAINBOW\"\n    vowels = 3  # The vowels in \"RAINBOW\" (A, I, O)\n    consonants = 4  # The consonants in \"RAINBOW\" (R, N, B, W)\n\n    # First, calculate the number of ways to arrange the consonants\n    consonant_arrangements = factorial(consonants)\n\n    # Calculate the number of places where we can insert vowels so they are not together\n    possible_vowel_positions = consonants + 1\n    \n    # No. of ways vowels can be arranged without being together\n    vowel_arrangements = factorial(vowels)\n\n    # No. of arrangements of vowels in the possible positions\n    arrangements_with_vowels = vowel_arrangements * (possible_vowel_positions - vowels + 1) * factorial(possible_vowel_positions - vowels)\n\n    # Total arrangements where vowels are never together\n    arrangements = consonant_arrangements * arrangements_with_vowels\n\n    return arrangements\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Assign the maximum number of socks Daniel can pick without getting a pair of the same color.\n    max_without_pair = 1 + 1 + 1 + 2 + 4  # For each color except yellow and green.\n    \n    # He must pick one more sock to be sure to have a pair of the same color.\n    # This covers the worst case scenario where he picks one of each color first.\n    min_for_one_pair = max_without_pair + 1\n    \n    # To ensure two pairs of the same color, he might have to pick through all colors first.\n    # After having one pair, he can pick at most 3 more socks without getting a second pair.\n    min_for_two_pairs = min_for_one_pair + 3\n\n    return min_for_two_pairs\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    possible_numbers = sorted([int(''.join(p)) for p in permutations(digits)])\n    for number in possible_numbers:\n        if number % 2 != 0:\n            return number\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # sum of first n terms of an arithmetic progression S_n = n/2 * (2a + (n - 1)d)\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n\n    # thus we have two equations\n    # Equation 1:  2a + 9d = 4\n    # Equation 2:  2a + 29d = 6\n\n    # subtracting Equation (1) from Equation (2) we get\n    # 20d = 6 - 4\n    # d = (6 - 4) / 20 = 1/10\n\n    d = (6 - 4) / 20\n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Define the range between which the number should be present\n    range_start = 10\n    range_end = 20\n\n    # Initialize an empty list to store the possible numbers\n    potential_numbers = []\n\n    # Check each number in the range if it is a multiple of 4 and a factor of 36\n    for number in range(range_start, range_end + 1):\n        if number % 4 == 0 and 36 % number == 0:\n            potential_numbers.append(number)\n\n    # There should be only one number that satisfies the conditions\n    if len(potential_numbers) == 1:\n        return potential_numbers[0]\n    else:\n        # If there are none or more than one, the problem statement is incorrect\n        return None\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    \n    penny_stickers = (total_stickers * ratio_penny) / (ratio_amy + ratio_penny)\n\n    return penny_stickers\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for chickens (c), goats (g), and cows (k)\n    c, g, k = symbols('c g k')\n\n    # Given equations\n    equation1 = Eq(c + g, 40)              # 40 chickens+goats combined\n    equation2 = Eq(3 * c, 5 * k)           # 3 times chickens = 5 times cows\n    equation3 = Eq(2 * g, 10 * k)          # 2 times goats = 10 times cows\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g, k))\n\n    # Extract solutions for the number of each animal\n    chickens = solutions[c]\n    goats = solutions[g]\n    cows = solutions[k]\n\n    # Calculate the total number of feet\n    total_feet = 2 * chickens + 4 * goats + 4 * cows\n\n    return total_feet\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_per_day = 9\n    days = 6\n\n    words_per_day = words_per_minute * minutes_per_day\n    total_words = words_per_day * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    speed_mps = speed_kmh * 1000 / 3600\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let x be the total number of apples Jack has\n    # According to the question:\n    # 40 apples = 4/7 of the apples he brought yesterday\n    # He brought 1/2 of all apples he has, so 2 * 40 = 7/4 of (1/2 of all apples)\n    # Thus, x = 2 * 7/4 * 40\n\n    apples_sold = 40\n    fraction_brought = 4 / 7\n    fraction_of_total = 1 / 2\n\n    total_apples = (2 * apples_sold) / (fraction_brought * fraction_of_total)\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    numbers = [200, 202, 204, 206, 208]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    n = 10\n    parts = 1 + n * (n + 1) // 2\n    return parts\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Since the average of the first 2 numbers is 10, their sum is 2 * 10 = 20\n    sum_first_2 = 10 * 2\n    # Since the average of the last 2 numbers is 22, their sum is 2 * 22 = 44\n    sum_last_2 = 22 * 2\n    # Since the average of the first and last numbers is 14, their sum is 2 * 14 = 28\n    sum_first_last = 14 * 2\n    # Let the four numbers be a, b, c, d\n    # We know that a + b = sum_first_2, c + d = sum_last_2, and a + d = sum_first_last\n    # The sum of all 4 numbers is sum_first_2 + sum_last_2\n    sum_all_4 = sum_first_2 + sum_last_2\n    # But we counted the first number 'a' and last number 'd' twice, so we subtract the sum of first and last\n    sum_middle_2 = sum_all_4 - sum_first_last\n    # The average of the two middle numbers b and c is then the sum of b and c divided by 2\n    average_middle_2 = sum_middle_2 / 2\n    return average_middle_2\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of terms in the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    min_diff = float('inf')\n    closest_number = None\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(2978 - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_number = num\n    return closest_number\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    for i in range(10, 100): # Range for 2-digit numbers\n        if 7007 % i == 0:    # Check if i is a factor of 7007\n            other_factor = 7007 // i\n            if 10 <= other_factor < 100 and i % 7 == 0 and other_factor % 7 == 0:\n                # Check if other_factor is a 2-digit number and both are multiples of 7\n                factors.append((i, other_factor))\n    result_sum = sum(factors[0])  # Since there's only one unique pair, take the sum of it\n    return result_sum\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    multiplied_by_2 = result + 10\n    original_number = multiplied_by_2 / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    c = 19\n    sum_ab = 2 * average_ab  # Since the average of A and B is 22, their sum is 22 * 2.\n\n    # To find the average of A, B, and C, sum A and B (which is already known) and add C, \n    # then divide by 3 (the number of terms).\n    average_abc = (sum_ab + c) / 3\n\n    return average_abc\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_Chinese_English = 34\n    average_English_Math = 36\n    average_Chinese_Math = 44\n\n    sum_double_averages = average_Chinese_English + average_English_Math + average_Chinese_Math\n\n    # Each teacher is counted twice in the sum_double_averages, so we divide by 2 to find the total average.\n    total_average = sum_double_averages / 2\n\n    return total_average\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age_at_death = death_date.year - birth_date.year\n    # If the death_date is earlier in the year than the birth_date, subtract 1 year\n    if (death_date.month, death_date.day) < (birth_date.month, birth_date.day):\n        age_at_death -= 1\n\n    return age_at_death\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = 20 + (1 * 7)\n    part2 = (21 + 1) * 7\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    # To find the minimum number of cakes in the layer with the most cakes,\n    # we can use the Pigeonhole Principle.\n    # The Pigeonhole Principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # To apply it here, we consider cakes as items and layers as containers.\n    # So, layer with the most cakes will have at least total_cakes // total_layers + 1\n    min_cakes_in_top_layer = (total_cakes // total_layers) + (1 if total_cakes % total_layers != 0 else 0)\n    \n    return min_cakes_in_top_layer\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_fractional_parts = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - (2018 + i) // 5\n        sum_fractional_parts += fractional_part\n    \n    return sum_fractional_parts\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the common difference\n    d = symbols('d')\n\n    # Total number of cookies in an arithmetic series formula: (n/2)*(2a + (n - 1)d) = S\n    # Where 'n' is the number of terms, 'a' is the first term, 'd' is the difference, and 'S' is the sum\n    # We know n = 10, a = 11 (since box 1 has 11 cookies), and S = 425\n    n = 10\n    a = 11\n    S = 425\n\n    # Based on the formula for the sum of an arithmetic series:\n    equation = Eq((n/2) * (2*a + (n - 1)*d), S)\n\n    # Solve for d using sympy\n    solution_d = solve(equation, d)\n\n    return solution_d[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    \n    # ¾ of Chelsia’s money is the same as ⅔ of Benson’s money\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    # Chelsia had $18 less than Benson\n    equation2 = Eq(chelsia, benson - 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repetitions = factorial(2)  # For the two '1's\n\n    permutations = factorial(total_digits) // repetitions\n\n    return permutations\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Since they are consecutive odd numbers, their common difference is 2.\n    # Let the smallest number be x.\n    # Then the numbers are x, x+2, x+4, x+6, x+8, x+10, x+12.\n    # The sum of an arithmetic sequence is n/2 * (first_term + last_term)\n    # Here the sum is 357, and there are 7 terms.\n    # 357 = 7/2 * (x + x+12)\n    # Simplifying this equation: 357 = 7/2 * (2*x + 12)\n    # Further simplification gives: 357 = 7x + 42\n    # Solving for x: x = (357 - 42) / 7\n    x = (357 - 42) // 7\n    return x\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    \n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum((1/i for i in range(1995, 2009)))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if (number % 3 == 2) and \\\n           (number % 4 == 2) and \\\n           (number % 5 == 2) and \\\n           (number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    \n    martin_time = 9\n    carter_time = 13\n    \n    equation = Eq(martin_speed, carter_speed + 20)\n    \n    # Since speed is inversely proportional to time for the same distance\n    # martin_speed / carter_speed = carter_time / martin_time\n    proportion_eq = Eq(martin_speed / carter_speed, carter_time / martin_time)\n    \n    solutions = solve((equation, proportion_eq), (martin_speed, carter_speed))\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23**0.5)\n    length_to_cut = 23 - max_side_length**2\n    return length_to_cut\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    ans = 2  # 2 is the only even prime number.\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George can paint together in 1/6 of a room per hour.\n    both_rate = 1 / 6\n    \n    # Fred can paint alone in 1/9 of a room per hour.\n    fred_rate = 1 / 9\n    \n    # George's rate is the difference between both and Fred's.\n    george_rate = both_rate - fred_rate\n    \n    # The time George takes is the reciprocal of his rate.\n    george_time = 1 / george_rate\n\n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\nans = solution(x)  # Replace 'x' with the actual amount of cloth used when calling the function."
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n\n    # In the worst case scenario, take all apples of one color\n    # and one more to ensure getting at least two of the same color\n    ans = min(red_apples, yellow_apples) + 1\n\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    red_end = 20  # Number of red pens left in the end\n    # Let the sold number of each color be 'sold'\n    # In the end, the ratio is 5:13, which means (red_end / (black_end)) = (5 / 13)\n    # Given that the initial ratio was 3:7, then the initial number of red pens was red_end + sold = 3/7 * (black_end + sold)\n    # Solving for 'black_end' using the ratios and the fact that the black pens in the end are 13/5 * red_end:\n    black_end = (13/5) * red_end  # Number of black pens left in the end\n    # Since (red_end + sold) / (black_end + sold) = 3 / 7, we can solve for 'sold'\n    # 20 + sold / (52 + sold) = 3 / 7\n    # 140 + 7*sold = 156 + 3*sold\n    # 4*sold = 156 - 140\n    sold = (156 - 140) / 4\n\n    return sold\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "from math import factorial\n\ndef solution():\n    ways_for_each_person = 5  # since there are 5 entrances\n    total_people = 4  # Tina, Joe, Mike, and Black\n\n    # The number of different arrangements for each person\n    arrangements = ways_for_each_person ** total_people\n\n    return arrangements\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    final_value_after_increase = 10500\n    increase_percentage = 0.05\n    decrease_percentage = -0.05\n\n    original_value = final_value_after_increase / (1 + increase_percentage)\n    final_value_after_decrease = original_value * (1 + decrease_percentage)\n\n    profit_or_loss = final_value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each kind of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    # Number of each kind of pet (except birds, which we need to find out)\n    cats = 2\n    dogs = 2\n    rabbits = 1\n    \n    # Total number of legs without birds\n    total_legs_without_birds = (cats * legs_per_cat) + (dogs * legs_per_dog) + (rabbits * legs_per_rabbit)\n    \n    # Legs that are left for the birds\n    legs_for_birds = 28 - total_legs_without_birds\n    \n    # Finding the number of birds by dividing the remaining legs by the number of legs per bird\n    birds = legs_for_birds // legs_per_bird\n    \n    return birds\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    # Calculate multiples of 5 and 7 within the range\n    multiples_of_5 = 200 // 5\n    multiples_of_7 = 200 // 7\n\n    # Calculate multiples of 35 (5*7, common multiple) within the range\n    multiples_of_35 = 200 // 35\n\n    # Apply the inclusion-exclusion principle\n    ans = multiples_of_5 + multiples_of_7 - multiples_of_35\n\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    sum_of_numbers = 6 * 4  # Since the average is 6, and there are 4 numbers\n    sum_of_known_numbers = 8 + 3 + 9  # Sum of the known numbers\n    missing_number = sum_of_numbers - sum_of_known_numbers  # The missing number is what is required to reach the total sum\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    \n    # Two equations based on the given problem\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = -(-total_weight // bag_weight) # Ceiling division to ensure we have enough gravel\n\n    return num_bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse step 8: add 50\n    result += 50\n    # Reverse step 7: subtract day of birth (unknown)\n    # Reverse step 6: divide by 5\n    result /= 5\n    # Reverse step 5: add 20\n    result += 20\n    # Reverse step 4: divide by 5\n    result /= 5\n    # Reverse step 3: subtract 6\n    result -= 6\n    # Reverse step 2: divide by 4\n    result /= 4\n    # Now the result is the month of birth\n    \n    month = int(result)\n    \n    # To find the day, we plug the month back into the equation and solve for the day\n    day = (1126 + 50 - ((month * 4 + 6) * 5 - 20) * 5) // 5\n    \n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(10, 50))  # Considering two-digit prime numbers\n    for num in primes:\n        if (num + 2) % 3 == 0 and (num - 2) % 5 == 0:  # Checking given conditions\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        num1 = int(''.join(perm[0:3]))\n        num2 = int(''.join(perm[3:5]))\n        num3 = int(''.join(perm[5:7]))\n        if num2 == 2 * num1 and num3 == 4 * num1:\n            return num3\n    return None\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    richard_money = 10\n\n    cups = (richard_money - cup_price) // refill_price + 1\n\n    return cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # 3 monkeys eat 96 peaches in 2 days\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # 5 monkeys eat x peaches in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    \n    return int(total_peaches)\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Define the common difference of the arithmetic sequence\n    common_difference = 4\n    \n    # Calculate the number of terms of the one-way sequence (4 to 400)\n    num_terms_one_way = (400 - 4) // common_difference + 1\n    \n    # Calculate the sum of the one-way sequence using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    sum_one_way = num_terms_one_way / 2 * (4 + 400)\n    \n    # Since the sequence goes from 4 to 400 and then back to 4, the total sum is twice the one-way sum minus the last term to avoid counting it twice\n    total_sum = 2 * sum_one_way - 400\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "def solution():\n    from math import factorial\n\n    # Calculate permutations for each type of book\n    story_perm = factorial(2)\n    comic_perm = factorial(3)\n    science_perm = factorial(4)\n    \n    # Calculate permutations for the arrangement of the categories (S for story, C for comic, Sc for science)\n    category_perm = factorial(3)\n    \n    # Total different arrangements is the product of permutations of each category and their internal permutations\n    total_ways = story_perm * comic_perm * science_perm * category_perm\n\n    return total_ways\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    initial_taxed_income = 50000\n    additional_taxed_income = income - initial_taxed_income\n    initial_tax_rate = 0.06\n    additional_tax_rate = 0.06 + T/100\n\n    tax_paid = initial_taxed_income * initial_tax_rate + additional_taxed_income * additional_tax_rate\n    tax_equation = Eq(tax_paid, 10000)\n\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # We need to find combinations of distributing 5 identical ice-creams\n    # to three friends with at least one ice-cream each.\n    # We start by giving each friend 1 ice-cream, and then we need to distribute\n    # the remaining 2 ice-creams among the 3 friends.\n    # This problem can be treated as a \"stars and bars\" problem (n+k-1 choose k-1).\n    \n    # Number of ice-creams left after each friend gets one ice-cream\n    ice_cream_remaining = 5 - 3 \n    \n    # Number of friends\n    friends = 3\n    \n    # Calculate combinations using the formula (n+k-1 choose k-1)\n    from math import comb\n    ways = comb(ice_cream_remaining + friends - 1, friends - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    average_jan_to_mar = 450\n    months_jan_to_mar = 3\n    total_jan_to_mar = average_jan_to_mar * months_jan_to_mar\n    \n    average_apr_to_jul = 350\n    months_apr_to_jul = 4\n    total_apr_to_jul = average_apr_to_jul * months_apr_to_jul\n\n    total_aug_to_oct = 1250\n    \n    average_nov_to_dec = 400\n    months_nov_to_dec = 2\n    total_nov_to_dec = average_nov_to_dec * months_nov_to_dec\n\n    total_year = total_jan_to_mar + total_apr_to_jul + total_aug_to_oct + total_nov_to_dec\n    months_in_year = 12\n    average_per_month = total_year / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3.5/(3*x + 2)) + (2/(1.5*x + 1)), (4.5/(5 - 6*x)) - (3/(2.5 - 3*x)))\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Assuming the distance to the library is D (one way)\n    # Time taken to walk to library = Distance / Speed walking = D / 40\n    # Time taken to cycle back from library = Distance / Speed cycling = D / 60\n\n    # Average speed = Total distance / Total time\n    # Total distance for the round trip is 2D, D for going and D for returning\n\n    # Total time = Time taken to walk + Time taken to cycle back\n    # Total time = D/40 + D/60\n\n    # Average speed = Total distance / Total time\n    # Average speed = 2D / (D/40 + D/60)\n    # Average speed = 2D / (D*(1/40 + 1/60))\n    # Average speed = 2D / (D*(3/120 + 2/120))\n    # Average speed = 2D / (D*5/120)\n    # Average speed = 2 / (5/120)\n    # Average speed = 2 * (120/5)\n    # Average speed = 240 / 5\n    # Average speed = 48 m/min\n\n    # We don't need to know the distance D as it cancels out in the calculation.\n    avg_speed = 240 / 5\n    return avg_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's denote x as the price for one serving of ice cream\n    # Sophie was short of $2.30 for 5 servings, so she could afford 5x - 2.3\n    # She bought 3 servings and had $0.30 left, so she had 3x + 0.3 in total\n    # We can create an equation: 5x - 2.3 = 3x + 0.3\n    # Solving for x: 2x = 2.6 => x = 1.3\n    # The amount of money Sophie's mother gave her equals the cost of 3 servings plus $0.30\n    # Which is: 3 * 1.3 + 0.3 = 3.9 + 0.3 = $4.2\n\n    price_per_serving = (2.6 / 2)\n    money_given = (3 * price_per_serving) + 0.3\n    return money_given\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    x = symbols('x')\n    y = symbols('y')\n    equation = Eq(9/x, y/2)\n    \n    proportional_relation = solve(equation, y)[0].subs(x, 3)\n    \n    return proportional_relation\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits\n    digits = '2356'\n    all_permutations = [''.join(p) for p in permutations(digits)]\n\n    # Convert each permutation into an integer and filter out even numbers\n    odd_numbers = [int(p) for p in all_permutations if int(p) % 2 != 0]\n\n    # Find the smallest odd number\n    smallest_odd = min(odd_numbers)\n\n    return smallest_odd\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To make sure that you have removed at least two of the same colour,\n    # you have to consider the worst-case scenario where you are picking\n    # different colours each time until you reach a point where the next pick\n    # must result in at least two of the same colour.\n\n    # Since there are 2 colours, you can pick one of each (green and blue) safely.\n    # So after picking 2 (one of each), the next pick must give you a pair of same colour balls.\n    total_picks = 2 + 1  # one for each colour +1 to ensure a pair of the same colour\n\n    return total_picks\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's define a variable x for \"the number you started with\"\n    x = symbols('x')\n    \n    # Perform the operations step by step as per the instructions\n    x_added_3 = x + 3\n    x_multiplied_by_2 = x_added_3 * 2\n    x_take_away_2 = x_multiplied_by_2 - 2\n    x_add_10 = x_take_away_2 + 10\n    x_divide_by_2 = x_add_10 / 2\n    final_result = x_divide_by_2 - x\n\n    # Since x is taken from both sides in the last step,\n    # The operations will cancel x out, and we will be left with a constant.\n    ans = final_result.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    import math\n\n    numerator = -6.94 - math.pow(9.604, 1/3)\n    denominator = math.sqrt(44.541 / 67) - (-377/6 * (5/3))\n    \n    ans = round(numerator / denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    return 299 + 199 + 99 + 5\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the initial number of bracelets Felicia had\n    # Let j be the initial number of bracelets Janice had, which is 96\n    f, j = symbols('f j')\n    j = 96\n\n    # Felicia sells 3/5 of her bracelets\n    felicia_sold = 3 / 5 * f\n\n    # Janice buys 2/5 of the bracelets Felicia sold\n    janice_bought = 2 / 5 * felicia_sold\n\n    # After the sale, Felicia has 2/5 of her initial bracelets\n    felicia_after = f - felicia_sold\n\n    # After the purchase, Janice has her initial number plus what she bought\n    janice_after = j + janice_bought\n\n    # The final ratio of bracelets is 5:7 (Felicia to Janice)\n    equation = Eq(felicia_after / janice_after, 5 / 7)\n\n    # Solve for f\n    f_value = solve(equation, f)[0]\n\n    # Compute how many bracelets Janice bought\n    janice_bought_value = (2 / 5) * (3 / 5) * f_value\n\n    return int(janice_bought_value)\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20*4 + 10*5 + 20*6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Total number of bags\n    total_bags = 25\n\n    # The total number of sweets is represented by 127M where M is a digit\n    # This means the total number of sweets can be expressed as 1270 + M\n    # Since each bag has the same number of sweets, 1270 + M must be divisible by 25\n    # To find the values of M that make 1270 + M divisible by 25, we iterate over 0-9\n    for M in range(10):\n        total_sweets = 1270 + M\n        if total_sweets % total_bags == 0:\n            sweets_per_bag = total_sweets // total_bags\n            return sweets_per_bag\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(50, 100))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    # Count numbers with exactly two sevens and one another digit\n    for i in range(1, 10):  # First digit cannot be 0 for a three-digit number\n        if i != 7:\n            # Two possible positions for the digit that is not 7\n            count += 2  # The two positions are _77, 7_7 and 77_\n    \n    # Count numbers with three sevens\n    count += 1  # This is for the number 777\n    \n    # Count numbers with exactly one seven and two other different digits\n    for i in range(1, 10):  # First digit cannot be 0 for a three-digit number\n        if i != 7:\n            for j in range(10):  # Second or third digit can be 0\n                if j != 7 and j != i:\n                    # Six possible positions: (seven, not seven, not seven), \n                    # (not seven, seven, not seven), (not seven, not seven, seven)\n                    count += 6  # The six positions are 7_ij, i_7j, ij_7, 7_ji, j_7i, ji_7\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of money Jack and Kyle have\n    jack, kyle = symbols('jack kyle')\n\n    # Create equations based on the problem description\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Number of orange, pink, and brown shirts\n    non_yellow_shirts = 6 + 4 + 12\n\n    # To ensure getting 1 yellow shirt, Annabella must take out all non-yellow shirts plus one more\n    shirts_to_take = non_yellow_shirts + 1\n\n    return shirts_to_take\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    total_individual_cost = 15 * individual_packet_cost\n    difference = total_individual_cost - multipack_cost\n    \n    return difference\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n    interest = principal * rate * time\n    total_amount = principal + interest\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Given equation is (3/4) + (3/4) + (3/4) = 1 + box * (1/4)\n    # To solve for the box, we need to sum up the fractions on the left side and \n    # subtract 1 from it, as the right side equals the sum of 1 and box times (1/4)\n\n    # First we sum up the fractions on the left side\n    left_sum = (3/4) + (3/4) + (3/4)\n    \n    # Then we subtract 1 from the sum to isolate the term with the box\n    box_times_quarter = left_sum - 1\n\n    # Now we divide by (1/4) to find the value in the box\n    box = box_times_quarter / (1/4)\n\n    return box\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the first term and 'd' the common difference\n    a = symbols('a')\n    d = 2  # given common difference\n    n = 20  # number of terms\n\n    # The sum of an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n    S_n = 560  # given sum of the sequence\n\n    # Forming the equation based on the sum of arithmetic sequence formula\n    equation = Eq(n / 2 * (2 * a + (n - 1) * d), S_n)\n\n    # Solving for 'a' (the first term)\n    solution_a = solve(equation, a)\n\n    return solution_a[0]\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_climb = 3\n    night_slip = 2\n    net_climb = day_climb - night_slip\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= day_climb\n        if total_distance <= 0:\n            break\n        total_distance += night_slip\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_four_days = 25 * 4\n    following_six_days = 40 * 6\n    last_five_days = 80\n    \n    total_pages = first_four_days + following_six_days + last_five_days\n    total_days = 4 + 6 + 5\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    brother_original = 12 - (14 - 10)\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    lcd, _ = solve_congruence(*congruences)\n    return lcd\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Since there is no specific calculation provided in the question,\n    # the \"Calculate\" command seems incomplete. However, I will implement\n    # a function that multiplies two whole numbers that are outside the\n    # traditional multiplication table (e.g., larger than 10).\n\n    def multiply_outside_table(a, b):\n        return a * b  # Perform multiplication\n\n    # Example: Multiply 123 by 456, which are outside the traditional table:\n    ans = multiply_outside_table(123, 456)\n    \n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age range between 10 and 99\n        tens, ones = divmod(age, 10)\n        new_age = ones * 10 + tens + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    series_sum = n * (n + 1) // 2\n    return series_sum\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # In the worst case scenario, to ensure that he has 4 cards of the same suit,\n    # Tom must account for drawing the maximum number of cards from all suits\n    # without getting to 4 of any suit.\n    # This means he could draw 3 cards of each of the 4 suits, which is 3*4 = 12 cards.\n    # The next card he draws must be the 4th card of one of the suits.\n    \n    max_cards_without_4_of_a_kind = 3 * 4\n    next_card_ensures_4_of_a_kind = 1\n    \n    # The total number of cards to ensure 4 of a kind is: \n    total_cards = max_cards_without_4_of_a_kind + next_card_ensures_4_of_a_kind\n    \n    return total_cards\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60 / 100\n    unsold_tickets = 28\n    \n    total_tickets = unsold_tickets / (1 - percent_sold)\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables: spent is the amount they each spent\n    spent = symbols('spent')\n\n    # Create the equations based on the problem statement\n    hayden_saved = 1420\n    mitchell_saved = 505\n    hayden_remaining = hayden_saved - spent\n    mitchell_remaining = mitchell_saved - spent\n\n    # Hayden had 4 times as much money as Mitchell\n    equation = Eq(hayden_remaining, 4 * mitchell_remaining)\n\n    # Solve the equation for the amount spent\n    solution = solve((equation), (spent))\n\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2/3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_n = (n * (n + 1)) // 2\n    return sum_n\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let x be the total number of people at the party\n    # (4/7)x = the number of children at the party (since 3/7 are adults)\n    # (3/8)(4/7)x = the number of boys among the children\n    # (5/8)(4/7)x = the number of girls among the children (since 3/8 are boys)\n    # We have the number of girls as 45, so we can set up the equation (5/8)(4/7)x = 45\n    # Now we just solve for x\n\n    # Simplify the fraction multiplying x\n    fraction_of_girls = (5/8)*(4/7)\n\n    # Divide the number of girls by the fraction to find the total number of people\n    x = 45 / fraction_of_girls\n\n    # Since the total number of people must be an integer, we round it to the nearest whole number if needed\n    x = round(x)\n\n    return int(x)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Convert everything to a uniform currency unit, in this case, cents.\n    two_dollar_notes = 5 * 200  # 5 two-dollar notes converted to cents\n    fifty_cent_coins = 7 * 50   # 7 fifty-cent coins in cents\n\n    # Calculate the total amount in cents before buying the file.\n    total_amount_cents = two_dollar_notes + fifty_cent_coins\n\n    # Cost of the file converted to cents.\n    file_cost_cents = 1195  # $11.95 converted to cents\n\n    # Calculate the final amount of money left in cents after purchase.\n    money_left_cents = total_amount_cents - file_cost_cents\n\n    # Convert the final amount back to dollars for the answer.\n    money_left_dollars = money_left_cents / 100\n\n    return money_left_dollars\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days_to_reach = 0\n    distance_covered = 0\n\n    while True:\n        days_to_reach += 1\n        distance_covered += climb_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n\n    return days_to_reach\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "from math import factorial\n\ndef solution():\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Number of ways to arrange r pupils out of n\n    ans = factorial(n) // factorial(n - r)\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    trees_between = 2\n\n    willow_trees = (ginkgo_trees - 1) * trees_between\n\n    return willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # a for Adam's weight, b for Ben's weight, c for Carl's weight\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    # To find the total weight, we sum all the weights of Adam, Ben, and Carl.\n    # However, we have counted Ben's weight twice in the given information.\n    # So we subtract Ben's weight once from the sum of the given weights.\n    total_double_weight = 102 + 97 + 93  # This is (a + b) + (b + c) + (a + c) = 2a + 2b + 2c\n    total_weight = (total_double_weight - 102)  # This subtracts b\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost = 7.48 * (500 / 1000)  # cost per 500g converted from per kilogram\n    apples_cost = 8 * 0.12  # cost of 8 apples at 12p each, converted to pounds\n    yoghurts_cost = 2 * 0.46  # cost of 2 yoghurts at 46p each, converted to pounds\n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n    change = 10 - total_cost  # change from a £10 note\n    return round(change, 2)  # round to 2 decimal places for currency\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    andy_rate = symbols('andy_rate')\n    zack_rate = 150  # Zack can sell 150 aircrafts per hour\n    total_aircrafts = 1200  # Total number of aircrafts to sell\n    combined_time = 6  # Time taken by Andy and Zack working together\n\n    # Equation representing the total work done together\n    equation = Eq((andy_rate + zack_rate) * combined_time, total_aircrafts)\n\n    # Solve for Andy's rate\n    andy_solution = solve(equation, andy_rate)\n\n    # Calculate the time it would take for Andy to sell all the aircrafts by himself\n    andy_time = total_aircrafts / andy_solution[0]\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # We assume that the number of rows (and columns) in the square array for students is x,\n    # and for teachers is y. Students are the outer layer so x = y + 2\n    # The total number of students will be x^2, and the total number of teachers will be y^2.\n    # We know that there are 80 more students than teachers: x^2 - y^2 = 80\n    \n    # Since x = y + 2, we can substitute x in the equation:\n    # (y + 2)^2 - y^2 = 80\n    # Expanding the square and simplifying:\n    # y^2 + 4y + 4 - y^2 = 80\n    # 4y + 4 = 80\n    # 4y = 76\n    # y = 19\n    # So y (teachers side) is 19. Now, we find x (students side):\n    # x = y + 2 = 19 + 2 = 21\n    \n    # Total number of students (outermost layer) is:\n    students_total = 21**2\n    # Total number of teachers (inner layer) is:\n    teachers_total = 19**2\n    # Total number of people is the sum of students and teachers:\n    total_people = students_total + teachers_total\n\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts each friend raises\n    chloe, david, emily = symbols('chloe david emily')\n    \n    # Define equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)  # Chloe collects twice as much as David\n    equation2 = Eq(david, 3 * emily)  # David raises three times as much as Emily\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)  # Total sum raised = £400\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    volume_orange = (orange_ratio / ratio_sum) * total_volume\n\n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x be the smaller number, y be the larger number\n    equation1 = Eq(x + y, 528)  # Sum of the two numbers\n    equation2 = Eq(y, 3 * x)  # Bigger number is three times the smaller number\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    savings_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    snacks_expense = 3\n\n    saved_money = days_saved * savings_per_day\n    remaining_money = original_amount + saved_money - lent_to_brother - snacks_expense\n\n    return remaining_money\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repayment_mum = 10.50\n    remaining_after_repayment = initial_amount - repayment_mum\n    amount_spent_on_magazines = remaining_after_repayment / 2\n    amount_left = remaining_after_repayment - amount_spent_on_magazines\n\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 1\n    for i in range(1, 44001):\n        if 44000 % (i ** 3) == 0:\n            q = max(q, i ** 3)\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')  # l for length and w for width\n    equation1 = Eq(l, 2 * w)  # Length is twice the width\n    equation2 = Eq(2*l + 2*w, 72)  # Perimeter is 72\n\n    solutions = solve((equation1, equation2), (l, w))\n    return solutions[l]\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    steve, mark, ryan = symbols('steve mark ryan')\n    meal = symbols('meal')\n\n    # If Steve paid for the meal, the ratios of what's left: steve:mark:ryan = 3:8:9\n    equation1 = Eq((steve - meal) / mark, 3 / 8)\n    equation2 = Eq((steve - meal) / ryan, 3 / 9)\n    equation3 = Eq(mark / ryan, 8 / 9)\n\n    # If Ryan paid for the meal, the ratios of what's left: steve:mark:ryan = 5:4:1\n    equation4 = Eq(steve / mark, 5 / 4)\n    equation5 = Eq(steve / (ryan - meal), 5 / 1)\n    equation6 = Eq(mark / (ryan - meal), 4 / 1)\n\n    # If Mark paid for the meal, the ratios of what's left: steve:mark:ryan = 10:1:9\n    equation7 = Eq(steve / (mark - meal), 10 / 1)\n    equation8 = Eq(steve / ryan, 10 / 9)\n    equation9 = Eq((mark - meal) / ryan, 1 / 9)\n\n    # Steve had $40 more than Mark initially\n    equation10 = Eq(steve, mark + 40)\n\n    # Using the equations to solve for meal cost\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7, equation8, equation9, equation10), (steve, mark, ryan, meal))\n\n    return solutions[meal]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    num = 81\n    exponent = 0\n    factors = 0\n    \n    while num % 3 == 0:\n        num //= 3\n        exponent += 1\n    \n    factors = exponent + 1  # The number of factors of a prime power is exponent + 1.\n    \n    return factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass_of_crate = 100  # mass of the crate in kilograms\n    static_friction_coefficient = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied parallel to the floor in newtons\n\n    # Calculate the maximum static friction force:\n    gravity = 9.81  # acceleration due to gravity in m/s^2\n    normal_force = mass_of_crate * gravity  # normal force in newtons\n    max_static_friction_force = static_friction_coefficient * normal_force\n\n    # Static friction force matches the applied force but does not exceed the maximum static friction force\n    force_of_static_friction = min(applied_force, max_static_friction_force)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n\n    common_difference = (term_15 - term_3) / (15 - 3)\n\n    return common_difference\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    n = 1\n    while True:\n        cube = n ** 3\n        square = int(cube ** 0.5)\n        if (square + 1) ** 2 == cube + 1:\n            return (square + 1) ** 2\n        n += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let x be the number of buttons James has, and y be the number Nina has.\n    # We have two conditions:\n    # 1. x + y = 24\n    # 2. y - 6 = x + 6\n\n    # We can rearrange the equations to solve for x:\n    # x = y - 24\n    # x = y - 12, by substituting the second condition into the first one\n\n    # Equating both expressions for x:\n    # y - 24 = y - 12\n    # Simplify the equation\n    # y - y = 12 - 24\n    # This gives us\n    # 0 = -12\n    # Since we have a mistake in the simplification step let's solve it the right way\n\n    # From the 2nd condition, we can express x in terms of y:\n    # y - 6 = x + 6\n    # x = y - 6 - 6\n    # x = y -12\n\n    # Now we substitute x into the 1st condition:\n    # (y - 12) + y = 24\n    # 2y - 12 = 24\n    # 2y = 24 + 12\n    # 2y = 36\n    # y = 36 / 2\n    y = 18 \n\n    return y\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour = total_parts / total_hours\n    parts_per_worker_per_hour = parts_per_hour / total_workers\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance_per_day = climb_distance - slide_distance\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Because the linear equation representing the relationship between the number of\n    # bags used (x) and the tax charged (y) is not specified in the question prompt,\n    # we cannot derive an exact equation without additional information.\n    # However, we can provide a general form for such a linear equation.\n    # Typically, a linear relationship can be expressed in the form y = mx + b,\n    # where m is the slope (change in tax per bag used) and b is the y-intercept (base tax).\n    # As we do not have specific information, we'll represent the slope as 'm' and the y-intercept as 'b'.\n    m = symbols('m')\n    b = symbols('b')\n    x = symbols('x')\n    y = symbols('y')\n    \n    # The general form of the linear equation\n    equation = Eq(y, m * x + b)\n    \n    # As we don't have actual values for m and b, we return the symbolic equation.\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n\n    ans = fraction < decimal\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed fractions to improper fractions\n    frac1 = Fraction(3, 1)\n    frac2 = Fraction(4, 5)\n    frac3 = Fraction(1 * 9 + 1, 9)\n    frac4 = Fraction(5 * 2 + 1, 2)\n    frac5 = Fraction(3, 11)\n\n    # Perform the multiplication\n    result = frac1 * frac2 * frac3 * frac4 * frac5\n\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_cost = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    max_short_term_days = 5\n    \n    # Calculate the cost for the initial 5 days\n    short_term_cost = max_short_term_days * daily_fee_short_term + flat_fee\n    \n    if total_cost <= short_term_cost:\n        # If the total cost is less than or equal to short term cost, he kept the car within 5 days\n        days = (total_cost - flat_fee) / daily_fee_short_term\n    else:\n        # If the total cost is more than the short term cost, calculate the additional days\n        additional_days = (total_cost - short_term_cost) / daily_fee_long_term\n        days = max_short_term_days + additional_days\n    \n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8  # 1 dog weighs as much as 8 rabbits\n    rabbit_to_chicken = 2  # 1 rabbit weighs as much as 2 chickens\n\n    # To find out how many chickens weigh as much as 1 dog, multiply the two ratios\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1 # Initialize product to 1 since we are multiplying\n    for i in range(2, 51): # Loop from 2 to 50 for the terms in the sequence\n        term = (1/i - 1/(51-i)) # Calculate each term in the multiplication sequence\n        product *= term # Multiply the current term with the running product\n    \n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height  # First drop\n\n    while initial_height * rebound_ratio > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height  # Each rebound consists of an up and down travel\n\n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # He had an equal number of green and yellow toy cars initially\n    equation1 = Eq(green, yellow)\n    \n    # After giving away 60 green toy cars and 14 yellow toy cars\n    # he had thrice as many yellow toy cars as green toy cars.\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    green_toy_cars_end = solutions[green] - 60\n\n    return green_toy_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    total_distance = 3000  # race distance in meters\n    speed_buck = 600       # buck's speed in meters per minute\n    speed_elephant = 250   # elephant's speed in meters per minute\n\n    time_buck = total_distance / speed_buck       # time taken by buck in minutes\n    time_elephant = total_distance / speed_elephant  # time taken by elephant in minutes\n\n    time_difference = time_elephant - time_buck   # time difference in minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    num_terms = (400 - 4) // 4 + 1\n    sum_of_sequence = (num_terms * (4 + 400)) // 2\n    return sum_of_sequence * 2 - 400\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    percentage_bad = 15\n    total_apples = 200\n\n    num_bad_apples = (percentage_bad / 100) * total_apples\n\n    return int(num_bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # If the sheet has pages numbered (a, b, c, d), then a + d = b + c\n    # Because of the way pages are numbered when folded, a and d are on one sheet and b and c are on the opposite side\n    # a + b + c + d = 58, and since a + d = b + c, we can deduce that a + d = 58 / 2 = 29\n    # Because the numbers are consecutive, a and d are one apart, the middle two numbers should be the two \n    # consecutive numbers whose sum is 29. Those numbers are 14 and 15.\n    # The first page of the sheet (a) will be 14, making the last page (d) 15.\n    # In a folded booklet, the first sheet will have pages 1 and 2n, where n is the number of sheets.\n    # Therefore, a = 1 + 13 (since page 1 is on this sheet and it's the 14th page) and d = 2n - 13\n    # => 1 + 13 + 2n - 13 = 29 => 2n = 29 - 1 => 2n = 28 => n = 28 / 2 => n = 14\n    return 14\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    pencil_cost_per_unit = 1.80 / 12\n    pen_cost_per_unit = pencil_cost_per_unit * (7 / 3)\n    cost_of_5_pens = 5 * pen_cost_per_unit\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols we will use\n    t = symbols('t')\n    \n    # Define the equations based on the problem description\n    # Simon started further away, but both are driving towards home.\n    # They travel the same amount of time t before Simon catches up with his wife.\n    # Simon's distance is his speed times the time.\n    # His wife's distance is her speed times the time plus the initial 15 km.\n    # Set up the equations:\n    # Simon's distance = Wife's distance (when Simon overtakes)\n    equation = Eq(80 * t, 60 * t + 15)\n    \n    # Solve for time t\n    solution = solve(equation, t)\n    time_to_overtake = solution[0]\n    \n    # Simon and his wife left at 6.10 pm\n    # Convert this time to hours and minutes\n    initial_time_hour = 18\n    initial_time_minute = 10\n    \n    # Calculate the time by adding the overtaking time to the initial time\n    overtaking_time_hour = initial_time_hour + int(time_to_overtake)\n    overtaking_time_minute = initial_time_minute + int((time_to_overtake - int(time_to_overtake)) * 60)\n    \n    # Adjust for any minutes that roll over into an extra hour\n    if overtaking_time_minute >= 60:\n        overtaking_time_hour += overtaking_time_minute // 60\n        overtaking_time_minute = overtaking_time_minute % 60\n        \n    # The result should be in the format HH:MM, ensuring two digits for minutes\n    return f\"{overtaking_time_hour}:{str(overtaking_time_minute).zfill(2)}\"\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    \n    # Calculate the number of terms\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2 # coffee and milk\n    food_items = 3 # hamburgers, burritos, and bagels\n\n    # Using the Principle of Multiplication\n    ans = drinks * food_items\n    return ans\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # A locker will end up unlocked only if its locker number is a perfect square\n    # because perfect squares have an odd number of factors\n\n    count = 0\n    for i in range(1, 101):\n        if (i ** 0.5).is_integer():\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n  \n    # Function to calculate number of combinations (nCr)\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Climbing up to the 5th step: Nelson must take his 4th step on either step 3 or step 4.\n    # If he takes the 4th step on the 3rd stair, there are 3C2 ways to get there.\n    # If he takes the 4th step on the 4th stair, there are 4C3 ways to get there.\n    ways_to_step_5 = nCr(3, 2) + nCr(4, 3)\n\n    # After the 5th step, Nelson has 5 more steps to reach step 10, which he can do in 5C2 ways.\n    # Thus the total number of ways for Nelson to climb while stepping on the 5th step is:\n    ways_from_5_to_10 = nCr(5, 2)\n  \n    total_ways = ways_to_step_5 * ways_from_5_to_10\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_per_pancake = 3 / 2\n    total_pancakes = (12 / time_taken_per_pancake)\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1 / 5\n\n    original_price = sale_price / (1 - reduction_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500  # total meters of road\n    total_days = 5  # total days taken\n\n    meters_per_day = total_road / total_days\n    \n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    # To ensure there are 8 people from each country at most, we need:\n    max_people_without_nine = countries * 8\n    # To ensure that there is at least 9 people from the same country, add 1\n    ans = max_people_without_nine + 1\n    return ans\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import permutations\n\ndef solution():\n    # Each person's time to cross the river\n    times = [5, 5, 9, 7]  \n\n    # Generate all possible permutations of people crossing the river\n    perms = permutations(times)\n\n    # Initialize minimum time to a large number\n    min_time = float('inf')\n\n    for perm in perms:\n        time = 0\n        # The four trips required for everyone to cross :\n        # 1. Two people cross, one returns.\n        # 2. Two people cross, one returns.\n        # 3. Two people cross, one returns.\n        # 4. Two people cross.\n        # Since the order matters and we need to take the minimum time possible, we simulate all scenarios.\n        time += max(perm[0], perm[1])  # First trip, two persons cross, fastest returns.\n        time += perm[0]                # Second trip, fastest returns with the boat.\n        time += max(perm[2], perm[3])  # Third trip, two other persons cross, second fastest returns.\n        time += perm[1]                # Last trip, second fastest person returns with the boat.\n        # Keep track of the minimum time found.\n        if time < min_time:\n            min_time = time\n    return min_time\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    n = 53\n    total_sum = 2014\n    average = total_sum / n\n    largest_number = average + (n - 1) // 2\n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra wrote 88 instead of 98 by mistake and got 22\n    # So we create an equation as per the incorrect operation\n    # 88 / A = 22\n    # From that, A can be calculated as follows:\n    A = 88 / 22\n\n    # Now we find the correct answer that Sandra should have gotten\n    # for the correct operation, that is 98 / A\n    correct_answer = 98 / A\n\n    # Returning the value of A and the correct answer\n    return A, correct_answer\n\n# Call the function to get the answer\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    cost_for_twelve_calculators = cost_per_calculator * 12\n    return cost_for_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps per 6 minutes\n    lucas_speed = 5 / 6  # laps per minute\n\n    # Miller's speed is 5 laps per 10 minutes\n    miller_speed = 5 / 10  # laps per minute\n\n    # Relative speed is the difference in their speeds\n    relative_speed = lucas_speed - miller_speed\n\n    # Since they are on a circular track, Lucas will overtake Miller\n    # every time Lucas completes 1 more lap than Miller.\n    # The time to overtake once more is when the relative distance between them\n    # is 1 lap.\n\n    time_to_overtake = 1 / relative_speed  # in minutes\n\n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    return 1670 + 4\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    remainder = 5217 % 13\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children_fraction = 3 / 5\n    men_fraction_of_remaining = 1 / 4\n\n    equation = Eq(children_fraction * visitors - (men_fraction_of_remaining * (1 - children_fraction) * visitors), 120)\n\n    total_visitors = solve(equation, visitors)[0]\n\n    return total_visitors\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    charge_for_first_15_min = 80  # In cents\n    cost_per_additional_min = 5   # In cents\n    total_cost_in_cents = 140     # Convert $1.4 to cents\n\n    extra_cost = total_cost_in_cents - charge_for_first_15_min\n    additional_minutes = extra_cost // cost_per_additional_min\n\n    total_minutes = 15 + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_current_age = 8\n    mother_future_age = 54\n    \n    mother_current_age = mother_future_age - (mother_future_age - tim_current_age)\n    \n    return mother_current_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Convert the orange string length from meters to centimeters\n    orange_string_length_cm = 5.52 * 100\n    \n    # Calculate the purple string length in centimeters\n    purple_string_length_cm = orange_string_length_cm / 9.2\n    \n    # Calculate the green string length in centimeters\n    green_string_length_cm = purple_string_length_cm + 24.9\n\n    # Convert the green string length from centimeters to meters\n    green_string_length_m = green_string_length_cm / 100\n    \n    # Return the green string length in meters\n    return green_string_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # All of the combinations of A and B such that their product is a number with identical figures \"11\"\n    # are limited to the multiplication table of 11 (11x1, 11x2, ... , 11x9)\n    # where the product of A and E is 0, B and D must be 01, 02, ... , 09 respectively\n    # and the only pair that satisfies the condition is when B and D are 02: A=4, B=2, D=2, E=0, C=8 accordingly\n    A = 4\n    return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 5*x, 49.5)\n\n    longer_piece = solve(equation, x)[0] * 5\n    return round(longer_piece, 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    ratio_apple_juice = 4\n    \n    apple_juice_litres = (ratio_apple_juice / total_ratio) * total_litres\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # let x be the total number of pupils normally at school\n    x = symbols('x')\n\n    # 20% of x are in Year 7 normally\n    year_7_normal = 0.20 * x\n\n    # when some Year 7 girls are missing, there are 400 pupils left at school\n    # and 10% of those are in Year 7\n    year_7_after_sports = 0.10 * 400\n\n    # the difference between the normal Year 7 pupils and those after the sports match\n    # is the number of Year 7 girls missing\n    year_7_missing = year_7_normal - year_7_after_sports\n\n    # the equation is then set up as the total number of pupils minus the missing \n    # Year 7 girls equals 400\n    equation = Eq(x - year_7_missing, 400)\n\n    # solve for the total number of pupils\n    total_pupils = solve(equation, x)\n\n    return total_pupils[0]\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < 25:\n        day += 1\n        distance_climbed += 4\n        if distance_climbed >= 25:\n            break\n        distance_climbed -= 1\n\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Let the rate of work for Nancy be 1/6 books per day\n    # Let the rate of work for Tim be 1/t books per day\n    # Together, they complete 1/4 of a book per day\n    \n    # 1/6 (Nancy's rate) + 1/t (Tim's rate) = 1/4 (combined rate)\n    # To find Tim's individual rate, solve for 1/t:\n    # 1/t = 1/4 - 1/6\n    # 1/t = 3/12 - 2/12\n    # 1/t = 1/12\n    # Therefore, Tim can complete the book alone in 12 days\n    \n    t = 12\n    return t\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100\n    days = 15\n    for i in range(1, days + 1):\n        if i % 2 == 1:  # Odd days: deposits £5\n            total_money += 5\n        else:  # Even days: spends £8\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - (slide_down // 3)\n    \n    # Calculate the number of effective jumps needed to reach the top minus the last jump\n    jumps_needed = (total_height - jump_up) // effective_jump\n    \n    # If there's a remainder, an additional effective jump is needed\n    if (total_height - jump_up) % effective_jump != 0:\n        jumps_needed += 1\n    \n    # Add the last jump to reach the top\n    jumps_needed += 1\n    \n    return jumps_needed\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_amount = remaining_after_dress / (2/3)\n    return initial_amount\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    total_work = 1\n    \n    # Let x be the number of days Kevin takes off.\n    for x in range(18):\n        # Work done by Ivy alone in 18 days\n        ivy_work = ivy_rate * 18\n        # Work done by Kevin when he worked (18 - x) days\n        kevin_work = kevin_rate * (18 - x)\n        # If the total work done by Ivy and Kevin is equal to 1 job, we found the solution\n        if ivy_work + kevin_work >= total_work:\n            return x\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    zeros_999 = count_zeros(999)\n    zeros_300 = count_zeros(300)\n\n    ans = zeros_999 - zeros_300\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the numerator and the initial value of the denominator\n    numerator = 1\n    denominator = 1\n    \n    # This variable will hold the sum of the series\n    series_sum = 0\n\n    # In each iteration, calculate the current term and update the sum\n    while numerator <= 6:\n        # Calculate the term and add to the total sum\n        term = numerator / (denominator * (denominator + numerator))\n        series_sum += term\n\n        # Update the denominator for the next term\n        denominator += (numerator + 1)\n        \n        # Update the numerator for the next term\n        numerator += 1\n    \n    # Add the last term of the series to the sum\n    last_term = 1 / denominator\n    series_sum += last_term\n\n    return series_sum\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The total number of students when they form a square and the outermost layer has 60 students \n    # can be found by considering that the square will have a perimeter of 60 * 4 students.\n    # Since a square has all its sides equal, the number of students along one side will be 60.\n    # To form a square, students must fill in the inside, which means the next inner layer will\n    # have 2 fewer students on each side (one less at the beginning and one less at the end), \n    # and this logic applies to all subsequent layers until no students are left to make a new layer.\n    \n    # Initialize the total number of students with those in the outer layer\n    total_students = 0\n    students_in_layer = 60\n\n    while students_in_layer > 0:\n        total_students += students_in_layer**2\n        students_in_layer -= 2  # Move to the next inner layer which has 2 less students per side\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n'))  # where n is an integer less than 50\n\n    # Since we should check all possible even numbers, loop through 2 to 98 (even numbers less than 100)\n    for n in range(1, 50):\n        solutions = solve((equation1, equation2, equation3.subs(symbols('n'), n)), (cars, bikes, lorries), dict=True)\n        # Check if there is a positive integer solution\n        if solutions and all(val.is_integer and val > 0 for val in solutions[0].values()):\n            return tuple(solutions[0][var] for var in (cars, bikes, lorries))\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of buttons in box B\n    x = symbols('x')\n    # Now, box A has x + 64 buttons initially\n\n    # Ken removed 28 buttons from box B to get the new amount of buttons in box B to be x - 28\n    # Since he removes 2 buttons from B for every button he adds to A, he added 28 / 2 = 14 buttons to A\n\n    # The new amount of buttons in box A is x + 64 + 14\n    new_A = x + 64 + 14\n    new_B = x - 28\n\n    # The total number of buttons in both boxes is new_A + new_B\n    # The ratio of the total number of buttons in both boxes to the number of buttons left in box B is 4:1\n    equation = Eq((new_A + new_B) / new_B, 4)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The number of buttons in box A initially is x + 64\n    initial_A = solution[0] + 64\n\n    return initial_A\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    while total_tiles > 0:\n        # Calculate the number of tiles in the current layer\n        tiles_in_current_layer = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        # Check if we can lay down tiles in the current layer\n        if total_tiles >= tiles_in_current_layer:\n            total_tiles -= tiles_in_current_layer\n        else:\n            break\n        layer += 1\n    \n    red_tiles = 0\n    green_tiles = 0\n    # Count the number of red and green tiles\n    for i in range(1, layer + 1):\n        tiles_in_layer = (i * 2 + 1) ** 2 - (i * 2) ** 2\n        if i % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n    \n    # Check which color has more tiles and the difference\n    if red_tiles > green_tiles:\n        return 'Red', red_tiles - green_tiles\n    else:\n        return 'Green', green_tiles - red_tiles\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return (18 * 20132013) - (2013 * 180018)\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    ans = 764 * 7\n    return ans\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n    \n    # Using the equation: wins*cards_per_win + losses*cards_per_loss = total_cards\n    # And wins + losses = rounds\n    # We can transform it to: wins*cards_per_win + (rounds - wins)*cards_per_loss = total_cards\n    # Let losses be x, then wins = rounds - x\n    # So, (rounds - x)*cards_per_win + x*cards_per_loss = total_cards\n    # To find x, rearrange the equation and solve for x\n\n    # (rounds - x)*cards_per_win + x*cards_per_loss = total_cards\n    # rounds*cards_per_win - x*cards_per_win + x*cards_per_loss = total_cards\n    # -x*(cards_per_win - cards_per_loss) = total_cards - rounds*cards_per_win\n    # x = (rounds*cards_per_win - total_cards) / (cards_per_win - cards_per_loss)\n\n    losses = (rounds * cards_per_win - total_cards) / (cards_per_win - cards_per_loss)\n    \n    return int(losses)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    # Interval is 10m\n    interval = 10\n    # Total length of the boulevard\n    total_length = 300\n    # Dividing the length by the interval gives the number of spaces between bins\n    num_spaces = total_length / interval\n    # We add one more for the bin at the very end\n    num_bins = num_spaces + 1\n    return int(num_bins)\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # Initial variables\n    num_2011 = '2011'\n    num_26 = '26'\n    num_7 = '7'\n    n = 0\n\n    # Check divisibility by 3 and 11 for the number to be divisible by 33\n    while True:\n        # Construct the number as a string\n        num = num_26 + num_2011 * n + num_7\n        num_list = list(map(int, num))\n        \n        # Check divisibility by 3 (sum of digits is divisible by 3)\n        if sum(num_list) % 3 != 0:\n            n += 1\n            continue\n        \n        # Check divisibility by 11 (difference of the sum of odd position digits\n        # and even position digits is divisible by 11)\n        odd_sum = sum(num_list[i] for i in range(0, len(num_list), 2))\n        even_sum = sum(num_list[i] for i in range(1, len(num_list), 2))\n        if (odd_sum - even_sum) % 11 != 0:\n            n += 1\n            continue\n        \n        # If divisible by both 3 and 11, then it is divisible by 33\n        # Return n which is the minimum number of times 2011 is repeated\n        return n\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    return 326 * 112\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 2\n            y += 1\n            z += 1\n        elif y >= x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        elif z >= x and z >= y:\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    for x in range(8): # First plate can have from 0 to 7 lollipops\n        for y in range(8): # Second plate can have from 0 to 7 lollipops\n            z = 7 - x - y # Third plate gets the remaining lollipops\n            if z >= 0: # We have a valid distribution if z is non-negative\n                ways += 1\n    return ways // 6 # Divide by 6 because the plates are identical\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes 3 minutes to cut a log into 4 pieces, then there are 3 cuts made.\n    # Because 3 cuts results in 4 pieces (each cut adds an additional piece)\n    \n    # Similarly, to get 8 pieces, Bob would need to make 7 cuts \n    # (since starting with 1 piece, each cut adds an additional piece)\n    \n    # If 3 cuts take 3 minutes, then each cut takes 3 minutes / 3 cuts = 1 minute per cut \n    \n    # So 7 cuts to make 8 pieces would take 7 minutes (7 cuts * 1 minute per cut)\n    \n    time_per_cut = 3 / 3 \n    number_of_cuts_for_8_pieces = 8 - 1\n    total_time_for_8_pieces = time_per_cut * number_of_cuts_for_8_pieces\n    \n    return total_time_for_8_pieces\n    \nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts of Rasidah and Chai Seng\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    # Chai Seng spent 6/7 of his money\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng - (6/7)*chai_seng, (1/2)*(rasidah - (3/5)*rasidah))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    final_cards = (initial_cards - duplicates) + new_cards\n\n    return final_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as one person, thus we have 7 \"people\" to arrange.\n    # For circular arrangements, we have (n-1)! arrangements.\n    arrangements = factorial(7 - 1)\n    \n    # Now Amy and Judy can switch places, which will count as different arrangement.\n    arrangements *= 2\n    \n    return arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    # Let's denote the original cookies Andy and Ben have as A and B respectively\n    # We are given that Andy had 84 fewer cookies than Ben originally. (A = B - 84)\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Construct the equations based on the problem statement\n    equation1 = Eq(A, B - 84)\n    # After buying, Andy has A + 1/3 * A and Ben has B + 1/5 * B\n    # Andy ends up having 1/3 as many as Ben in the end\n    equation2 = Eq(A + A / 3, (B + B / 5) / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # We want to find how many cookies Andy had in the end, which is A + 1/3 * A\n    Andy_end = solutions[A] + solutions[A] / 3\n\n    return Andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1/i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    amount = 37100\n\n    years = 0\n    while principal < amount:\n        interest = principal * rate\n        principal += interest\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    num1 = 0.7\n    num2 = 0.04\n    num3 = 1.006\n\n    ans = num1 + num2 + num3\n\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # All two-digit numbers that are divisible by 24\n    divisible_by_24 = [x for x in range(10, 100) if x % 24 == 0]\n    \n    # All two-digit numbers\n    all_two_digit_numbers = set(range(10, 100))\n\n    # The possible numbers for the 4 students who raised their hands the first time\n    # They could either have a number from the `divisible_by_24` set or not divisible by any two-digit number\n    # which simply means they are prime numbers as they do not have divisors other than 1 and itself.\n    prime_numbers = [x for x in range(10, 100) if all(x % i != 0 for i in range(2, int(x**0.5) + 1))]\n    possible_numbers_first_round = set(divisible_by_24 + prime_numbers)\n    \n    # Possible numbers for the second round should be the ones that after removing 4 known numbers\n    # including Tom's number, have 6 numbers left that are either divisible or not divisible by 24\n    # We do not know Tom's number but we know it is in `divisible_by_24`\n    \n    possible_combinations = []\n    for tom_number in divisible_by_24:\n        other_eight_numbers = all_two_digit_numbers - {tom_number}\n        for other_four_numbers in itertools.combinations(other_eight_numbers, 4):\n            # Remove the four numbers and see if the remaining fit the condition of the second round\n            remaining_numbers = other_eight_numbers - set(other_four_numbers)\n            number_divisible_by_24 = len([x for x in remaining_numbers if x in divisible_by_24])\n            number_not_divisible_by_24 = len(remaining_numbers) - number_divisible_by_24\n            if number_divisible_by_24 + number_not_divisible_by_24 == 6:\n                possible_combinations.append((tom_number, sum(other_eight_numbers)))  # Tom's number and the sum of the other eight\n\n    # Since Tom raised his hand in both rounds and there's only one situation that fits the description,\n    # that's when 4 = 1 (Tom's number) + 3 (from prime or divisible by 24)\n    # and 6 = 1 (Tom's number) + 5 (remaining numbers meeting the 24 divisibility condition)\n    # The sum of other eight numbers should be the same for all possible combinations\n    # and thus we can take the sum from the first element as the answer\n    ans = possible_combinations[0][1]\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sequence = [18, -16, 19, -15]\n    sign = -1\n    while len(sequence) < 5:\n        next_value = sequence[-2] + 1\n        sequence.append(next_value * sign)\n        sign *= -1\n    return sequence[-1]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four numbers be a > b > c > d\n\n    # From the given conditions, we have:\n    # d + (a + b + c) / 3 = 39\n    # a + (b + c + d) / 3 = 51\n\n    # Simplifying the above equations:\n    # 3d + a + b + c = 117 (1)\n    # a + b + c + 3d = 153 (2)\n\n    # Subtracting (1) from (2):\n    # -2d + 2a = 36\n    # a - d = 18 -> a = d + 18\n    \n    # We want to maximize the value of 'a', so we should minimize 'b' and 'c'. Since 'd' must be a positive whole number, let's make 'd' = 1.\n    # Then, a = 1 + 18 = 19.\n    # This makes the minimum value of b & c to be 2 and 3 respectively (since all numbers must be distinct).\n\n    # Calculate the sum of a, b, c, and d:\n    d = 1\n    a = d + 18\n    b = 2\n    c = 3\n    sum_abc = a + b + c + d\n\n    # Now solve for 'd' based on the sum:\n    d = (117 - sum_abc) / 2\n\n    # Recalculate 'a' based on the new 'd':\n    a = d + 18\n    \n    return int(a)\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    equivalent_fraction_numerator = 12\n    original_fraction_numerator = 6\n    original_fraction_denominator = 20\n\n    # To find the equivalent fraction's denominator (d), we use the property of equivalent fractions:\n    # (numerator1 / denominator1) = (numerator2 / denominator2)\n    # Original fraction is (6 / 20), and we want to find the denominator when the numerator is 12.\n    # (6 / 20) = (12 / d)\n    # Cross multiply to find d:\n    # 6 * d = 12 * 20\n    # d = (12 * 20) / 6\n    denominator = (equivalent_fraction_numerator * original_fraction_denominator) / original_fraction_numerator\n\n    return int(denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of pupils who passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Number of pupils who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Maximum possible number of pupils who passed all three tests\n    # Calculation based on the Inclusion-Exclusion principle:\n    # At most, the number of students passing all three tests could be the sum of\n    # individual subjects tests minus the total number who passed at least one test.\n    max_passed_all_three = (passed_math + passed_science + passed_english) - total_passed_at_least_one\n    \n    # Return the result\n    return max_passed_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Let the total distance from home to school be x meters.\n    # Time taken by Ahmad to reach school = x / 80 minutes\n    # Time taken by his brother to walk (x - 210) meters = x / 80 minutes\n    # Brother's speed = 50 meters per minute\n    # (x - 210) / 50 = x / 80\n    # Solving the equation for x\n    # x / 50 - 210 / 50 = x / 80\n    # (80x - 50x) / (50*80) = 210 / 50\n    # 30x = 210 * 50 * 80\n    # x = 210 * 50 * 80 / 30\n    x = 210 * 50 * 80 / 30\n    return x\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pencil cases cannot be empty, start with one pen in each case\n    initial_pens = 3\n    remaining_pens = 6 - initial_pens\n    # For remaining 3 pens, find the number of non-negative integer solutions to x1 + x2 + x3 = 3\n    # This is equivalent to \"stars and bars\" problem: (remaining_pens + number_of_cases - 1) C (number_of_cases - 1)\n    from math import comb\n    ans = comb(remaining_pens + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # The fractions within the complex fraction\n    numerator_first_term = 1/30\n    numerator_second_term = 1/6\n    denominator_first_term = 2/25\n\n    # The second complex fraction\n    numerator_third_term = 2 - 2/3\n    denominator_second_term = 8/3\n\n    # Evaluate the first complex fraction\n    first_complex_fraction = (numerator_first_term + numerator_second_term) / denominator_first_term\n\n    # Evaluate the second complex fraction\n    second_complex_fraction = numerator_third_term / denominator_second_term\n\n    # Add the two complex fractions\n    ans = first_complex_fraction + second_complex_fraction\n\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    place_value_first_8 = 8 * 1000  # The place value of the first 8 in 8844\n    place_value_second_8 = 8 * 100  # The place value of the second 8 in 8844\n    difference = place_value_first_8 - place_value_second_8\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find smallest 5-digit multiple of 45\n    num = 10000\n    while num % 45 != 0:\n        num += 1\n    smallest_palindrome = num\n\n    # Check if smallest 5-digit multiple of 45 is palindromic\n    if str(smallest_palindrome) != str(smallest_palindrome)[::-1]:\n        # If not, create the smallest 5-digit palindrome\n        first_digits = str(num)[:2]  # Get the first two digits\n        smallest_palindrome = int(first_digits + first_digits[::-1] + str(num)[2])\n\n        # Ensure that it is a multiple of 45\n        while smallest_palindrome % 45 != 0 or str(smallest_palindrome) != str(smallest_palindrome)[::-1]:\n            smallest_palindrome += 1\n\n    # Find largest 5-digit multiple of 45\n    num = 99999\n    while num % 45 != 0:\n        num -= 1\n    largest_palindrome = num\n\n    # Ensure that largest_palindrome is a palindrome\n    while str(largest_palindrome) != str(largest_palindrome)[::-1]:\n        largest_palindrome -= 45\n\n    # Calculate the difference\n    diff = largest_palindrome - smallest_palindrome\n    return diff\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(\"572\" + str(A))\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    \n    ribbon1_length = 16\n    ribbon2_length = 24\n    \n    longest_piece_length = gcd(ribbon1_length, ribbon2_length)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind_luna = 4\n    total_sheep = luna_position + sheep_behind_luna\n    return total_sheep\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy import lcm\n    \n    # Step 1: Find the common supplement\n    # Since we want to find a number x such that:\n    # x % 5 = 1, x % 6 = 2, x % 11 = 7\n    # This implies the common supplement is 1 for the modulus 5, 2 for modulus 6, \n    # and 7 for modulus 11. Which will be taken into account in Step 3.\n    \n    # Step 2: Find the LCM of all the divisors\n    divisors = [5, 6, 11]\n    lcm_of_divisors = lcm(divisors)\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # x = lcm(5,6,11)*k + common_supplement\n    # where k is an integer that makes x < 500\n    # common_supplement = (lcm(5,6,11)*k + 1) % 5 = 1, \n    #                     (lcm(5,6,11)*k + 2) % 6 = 2, \n    #                     (lcm(5,6,11)*k + 7) % 11 = 7\n\n    # We'll loop to find the smallest k such that the conditions are met and x < 500\n    k = 0\n    while True:\n        x = lcm_of_divisors * k + 1\n        if x % 5 == 1 and x % 6 == 2 and x % 11 == 7:\n            if x < 500:\n                return x\n        k += 1\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    target_earnings = 270\n\n    hours_needed = target_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for the mean score of all students\n    mean_all = symbols('mean_all')\n\n    # mean score of the last 7 students is 6 less than the mean score of all 10 students\n    mean_last_7 = mean_all - 6\n\n    # mean score of the top 3 students\n    mean_top_3 = 92\n\n    # total score for the top 3 students\n    total_top_3 = mean_top_3 * 3\n\n    # total score for the last 7 students\n    total_last_7 = mean_last_7 * 7\n\n    # equation for the total score of all students\n    equation = Eq(total_top_3 + total_last_7, mean_all * 10)\n\n    # solving the equation\n    mean_score = solve(equation, mean_all)[0]\n\n    return mean_score\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = [int(d) for d in year_str]\n        sorted_digits = sorted(digits)\n        consecutive = all(sorted_digits[i] + 1 == sorted_digits[i+1] for i in range(len(sorted_digits)-1))\n        if consecutive and len(set(digits)) == 4:\n            lucky_years += 1\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    # The total number of marbles in six bags\n    total_marbles = [19, 21, 27, 32, 37, 40]\n    # Initially assume no red marbles\n    red_marbles = 0\n\n    # Iterate over all combinations of splitting the 'X' bags into two groups\n    for jaslin_bags in combinations(total_marbles, 3):\n        george_bags = [x for x in total_marbles if x not in jaslin_bags]\n        # If Jaslin gets twice as many marbles as George\n        if sum(jaslin_bags) == 2 * sum(george_bags):\n            # The bag with red marbles is the one not chosen by Jaslin or George\n            all_bags = sum(total_marbles)\n            jaslin_george_marbles = sum(jaslin_bags) + sum(george_bags)\n            red_marbles = all_bags - jaslin_george_marbles\n            break\n\n    return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Equation 1: Total sweets before receiving extra.\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation 2: Andre has 6 sweets more than Beth after receiving 4 sweets each.\n    equation2 = Eq(andre + 4, beth + 4 + 6)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Since the numbers are consecutive even numbers, the difference between them is 2.\n    # Let x be the smallest even number. Then the numbers are x, x+2, x+4, x+6, x+8.\n    # The sum of these numbers is given by: x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # By simplifying, we get: 5x + 20 = 100\n    # Solving for x gives us: 5x = 80\n    # Therefore, x = 16 which is the smallest of the five even numbers.\n\n    # Solve for x\n    x = (100 - 20) // 5\n\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550\n    time_taken = 5\n    speed = distance / time_taken\n    \n    travel_time = 3\n    distance_travelled = speed * travel_time\n    return distance_travelled\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5  # The fraction of apples remaining after selling\n    remaining_apples = 150\n    initial_apples = remaining_apples / remaining_fraction\n    return int(initial_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\n\ndef solution():\n    colors = ['R', 'R', 'B', 'B', 'Y', 'Y', 'G', 'G', 'O', 'O', 'P', 'P']\n    total_arrangements = 0\n    even_arrangements = 0\n\n    # permute all unique arrangements since there are duplicate blocks\n    for arrang in set(permutations(colors)):\n        is_even = True\n        # check all pairs\n        for color in set(colors):\n            first_idx = arrang.index(color)\n            second_idx = arrang[first_idx+1:].index(color) + (first_idx + 1)\n\n            # check if the number of blocks between same color blocks is even\n            if (second_idx - first_idx) % 2 != 1:\n                is_even = False\n                break\n        \n        # count total and even arrangements\n        total_arrangements += 1\n        if is_even:\n            even_arrangements += 1\n    \n    # calculating the probability in its reduced form\n    from math import gcd\n    divider = gcd(even_arrangements, total_arrangements)\n    m = even_arrangements // divider\n    n = total_arrangements // divider\n\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    first_post = 1\n    last_post = 15\n    distance_per_jump = 3\n\n    num_jumps = last_post - first_post\n    total_distance = num_jumps * distance_per_jump\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_items = 18 + 30 + 36 + 18  # Sum of all items\n    friends = 6  # Number of friends\n    items_per_friend = total_items // friends  # Equally distributed items among friends\n    return items_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_a = 1 / 36  # Inlet A fills the pool in 36 minutes\n    rate_b = 1 / 48  # Inlet B fills the pool in 48 minutes\n\n    portion_filled = 0.0\n    time = 0\n\n    # Pattern A: 1 min, B: 2 min, A: 2 min, B: 1 min repeats every 6 minutes\n    pattern_rate = (1 * rate_a) + (2 * rate_b) + (2 * rate_a) + (1 * rate_b)\n    pattern_time = 6\n\n    # Fill as much as possible using the repeating pattern\n    while portion_filled < 1:\n        if portion_filled + pattern_rate <= 1:\n            portion_filled += pattern_rate\n            time += pattern_time\n        else:\n            break\n\n    # Use individual rates to fill the remaining portion\n    while portion_filled < 1:\n        if time % 6 == 0 or time % 6 == 2 or time % 6 == 5:  # Inlet A's turn\n            if portion_filled + rate_a <= 1:\n                portion_filled += rate_a\n            else:\n                portion_filled = 1\n            time += 1\n        else:  # Inlet B's turn (1, 3, 4 minute(s) in the pattern)\n            if portion_filled + rate_b <= 1:\n                portion_filled += rate_b\n            else:\n                portion_filled = 1\n            time += 1\n\n    return time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    \n    # Equation based on the work = rate x time principle\n    equation1 = Eq(1/alan + 1/bob, 1/4)  # Combined rate of Alan and Bob\n    equation2 = Eq(1/bob, 1/6)  # Rate of Bob alone\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_rain_at_least_one_day = 1 - (prob_no_rain_saturday * prob_no_rain_sunday)\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n    \n    # Let x be the number of correct answers\n    for x in range(total_questions + 1):\n        if x * points_per_correct + (total_questions - x) * points_per_incorrect == total_points:\n            return total_questions - x  # Return the number of incorrect answers\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    count_of_twos = 0\n    count_of_fives = 0\n    while True:\n        current = n\n        while current % 2 == 0:\n            count_of_twos += 1\n            current //= 2\n        while current % 5 == 0:\n            count_of_fives += 1\n            current //= 5\n        \n        if min(count_of_twos, count_of_fives) == 28:\n            break\n        \n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n    \n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas initially has 10 bottles of mineral water.\n    initial_bottles = 10\n    # Shop owner lends 1 extra empty bottle which Lucas has to return.\n    extra_bottle = 1\n    # Empty bottles available to exchange.\n    empty_bottles = initial_bottles + extra_bottle\n    total_drinks = initial_bottles\n\n    while empty_bottles >= 2:\n        # Exchange the empty bottles for new full bottles.\n        new_bottles, remaining_empty_bottles = divmod(empty_bottles, 2)\n        # Update the total number of drinks Lucas can have.\n        total_drinks += new_bottles\n        # Update the number of empty bottles Lucas has.\n        empty_bottles = new_bottles + remaining_empty_bottles\n        # Lucas returns the extra empty bottle when it cannot be used for further exchange.\n        if empty_bottles == remaining_empty_bottles:\n            empty_bottles -= extra_bottle\n    \n    return total_drinks\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    children_between = abs(vanessa_position_from_front - andrea_position_from_front) - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_initial = 320\n    sweets_per_week = 30\n    weeks = 7\n    sweets_final = 348\n\n    sweets_bought = sweets_per_week * weeks\n    sweets_eaten = (sweets_initial + sweets_bought) - sweets_final\n\n    sweets_eaten_per_week = sweets_eaten // weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let hA be the height of A's waterline and hB be the height of B's waterline\n    # Let t be the time in minutes after both pools start draining\n    # The draining rates are:\n    # Rate of A: 1/10 (full pool height / 10 minutes)\n    # Rate of B: 1/6 (full pool height / 6 minutes)\n    # We want to find the time t when hA = 3 * hB\n    \n    # We know that at full height, hA = hB (as bases and heights are the same initially)\n    # After t minutes, the remaining height of A's waterline is hA - (hA * (1/10) * t)\n    # After t minutes, the remaining height of B's waterline is hB - (hB * (1/6) * t)\n    \n    # Thus, the equation to solve for t is:\n    # hA - (hA * (1/10) * t) = 3 * (hB - (hB * (1/6) * t))\n    \n    # We can simplify this, since hA = hB, we can just use \"h\" to represent the full pool height:\n    # h - (h * (1/10) * t) = 3 * (h - (h * (1/6) * t))\n    \n    # Dividing both sides by \"h\" and solving for t, we get:\n    # 1 - (1/10) * t = 3 * (1 - (1/6) * t)\n    # 1 - t/10 = 3 - t/2\n    # t/2 - t/10 = 2\n    # (5t - t) / 10 = 2\n    # 4t / 10 = 2\n    # t = 5 minutes\n\n    t = 5\n\n    return t\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for Chenxi's and Yue Ying's amount of sweets\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n    \n    # Equation representing Chenxi has $5 more sweets than Yue Ying\n    equation1 = Eq(chenxi, yue_ying + 5)\n    \n    # Solve the equation to find the original amount of sweets for each\n    original_sweets = solve(equation1, (chenxi, yue_ying))\n    \n    # Calculate the new amounts after Chenxi gives Yue Ying 10 sweets\n    chenxi_new = original_sweets[chenxi] - 10\n    yue_ying_new = original_sweets[yue_ying] + 10\n    \n    # Calculate the new difference\n    difference_new = abs(chenxi_new - yue_ying_new)\n    \n    return difference_new\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 8 / 60\n\n    # Let the distance be x km\n    # Speed = Distance / Time\n    # For speed of 3 km/h being 12 min late,\n    # Time taken at 3 km/h = x / 3\n    # Correct time = (x / 3) - late_time\n\n    # For speed of 7 km/h being 8 min early,\n    # Time taken at 7 km/h = x / 7\n    # Correct time = (x / 7) + early_time\n\n    # Since the correct times are equal,\n    # (x / 3) - late_time = (x / 7) + early_time\n    # Solving for x\n    x = (late_time + early_time) / (1/3 - 1/7)\n    \n    return x\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    base_amount = 200\n\n    ans = (percentage / 100) * base_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 70):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return abs(prime2 - prime1)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    number_of_goats = 6\n    number_of_lambs = 4 * number_of_goats - 4\n\n    return number_of_lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let the original number of students in school A be x.\n    # Then the number of students in school B would be 1050 - x.\n    # After the transfer, school A has x - 20 students, and school B has 1050 - x + 20.\n    # According to the problem, after the transfer, school A has 10 more students than school B.\n    # Therefore, we get the equation: (x - 20) = (1050 - x + 20) + 10.\n    # Now we can solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - 20, 1050 - x + 20 + 10)\n\n    original_students_A = solve(equation, x)\n\n    return original_students_A[0]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Possible positions for the first pair of brackets: (We have four places to insert the first bracket)\n    # (15+5)×5+15-6+7, (15+5×5)+15-6+7, 15+(5×5+15)-6+7, 15+5×(5+15)-6+7, 15+5×5+(15-6)+7, 15+5×5+15-(6+7)\n    \n    # Possible positions for the second pair of brackets: (We have to consider all combinations with one bracket already set)\n    # We want to maximize multiplication and minimize subtraction impact, \n    # so we will generally prioritize brackets around larger numbers and multiplications.\n    \n    # Given these constraints, let's calculate all the possibilities:\n\n    expressions = [\n        '(15+5)*5+15-6+7',\n        '(15+5*5)+15-6+7',\n        '15+(5*5+15)-6+7',\n        '15+5*(5+15)-6+7',\n        '15+5*5+(15-6)+7',\n        '15+5*5+15-(6+7)'\n    ]\n    \n    max_result = float('-inf')\n    max_expression = ''\n    \n    for expr in expressions:\n        result = eval(expr)\n        if result > max_result:\n            max_result = result\n            max_expression = expr\n\n    return max_result\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    # Let x be the number of questions answered correctly\n    # Then (10 - x) is the number of questions answered incorrectly\n    # 10x - 5(10 - x) = 70 is the equation that represents the situation\n    # Solving for x gives us the number of questions answered correctly\n\n    for x in range(11):\n        if (10*x - 5*(10 - x)) == 70:\n            return x\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n    \n    writing_and_maths_students = both_classes_students\n    writing_only_students = total_students - maths_students - neither_class_students + writing_and_maths_students\n    \n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    birthday_digits = '08072003'\n\n    # Create all possible permutations of the digits\n    # and check if they are prime while being less than 50.\n    largest_prime = 0\n    for i in range(1, 50):\n        if isprime(i) and set(str(i)).issubset(set(birthday_digits)):\n            largest_prime = i\n            \n    return largest_prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # Total sum for the five numbers\n    total_sum = 5 * 54  # Average of five numbers times 5\n    # Total sum for the first two numbers\n    sum_first_two = 2 * 48  # Average of first two numbers times 2\n    \n    # Total sum for the last three numbers\n    sum_last_three = total_sum - sum_first_two\n    \n    # Average of the last three numbers\n    average_last_three = sum_last_three / 3\n    \n    return average_last_three\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    teddy, father = symbols('teddy father')\n    \n    # When Teddy was 5, his father was 7 times older\n    equation1 = Eq(father, 7 * 5)\n    \n    # When his father is 40, how old will Teddy be?\n    teddy_age_then = teddy + (40 - father)\n    \n    father_age_now = solve(equation1, father)[0]\n    \n    # Teddy's age now is father's age now divided by 7\n    teddy_age_now = father_age_now / 7\n    \n    # Calculate Teddy's age when father is 40\n    teddy_age_then_evaluated = teddy_age_now + (40 - father_age_now)\n    \n    return teddy_age_then_evaluated\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    numbers = range(1, 18, 2)\n    return sum(numbers)\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    position_from_left = 10 + 5\n    position_from_right = 40 - position_from_left + 1\n    return position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 110):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut increases the maximum number of pieces by the number of pieces it crosses through.\n    # The first cut creates 2 pieces (it does not cross any existing cut)\n    # Each subsequent cut can cross all the previous cuts plus one additional piece\n    # So the second cut crosses 1 previous cut creating 2 more pieces for a total of 4 pieces\n    # The third cut crosses 2 previous cuts creating 3 more pieces for a total of 7 pieces\n    # The fourth cut crosses 3 previous cuts creating 4 more pieces for a total of 11 pieces\n\n    # Hence, the pattern is that the nth cut can produce n new pieces\n    # Therefore, Andrea's assumption is incorrect. The correct maximum number of pieces is given by\n    # the following pattern: 2 + (2+1) + (3+1) + (4+1)\n    # That is the initial 2 from the first cut, plus 3 from the second, plus 4 from the third, plus 5 from the fourth\n    num_slices = 2 + (2 + 1) + (3 + 1) + (4 + 1)\n    return num_slices\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    base_length = 9  # in cm\n    area = 54  # in cm^2\n\n    # Area of a triangle formula A = 1/2 * base * height\n    # Rearranging the formula to solve for height: height = (2 * area) / base\n    height = (2 * area) / base_length\n\n    return height\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Let total number of people be x\n    # Adults = 2/7 * x\n    # Boys = 4/5 * (5/7 * x) because 5/7 are the remaining after taking 2/7\n    # Girls = 1/5 * (5/7 * x) because it is the rest of the remaining\n    # Adults - Girls = 80\n    # (2/7 * x) - (1/5 * (5/7 * x)) = 80\n    # Simplify the equation to solve for x\n    \n    adults_fraction = 2/7\n    remaining_fraction = 5/7\n    boys_fraction = 4/5\n    girls_fraction = 1 - boys_fraction\n\n    # Girls expression: 1/5 of the remaining\n    girls_expression = girls_fraction * remaining_fraction\n    # Adults expression: 2/7 of the total\n    adults_expression = adults_fraction\n\n    # Difference between adults and girls\n    difference_adults_girls = adults_expression - girls_expression\n    \n    # Since the difference is given as 80, we solve for total people (x)\n    total_people = 80 / difference_adults_girls\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # Initially, the number of tables is equal to the number of chairs\n    equation1 = Eq(tables, chairs)\n    \n    # After selling 42 tables and bringing in 24 chairs, chairs become 4 times tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 700 * 0.35\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # We use the property that a^m divided by a^n is equal to a^(m-n)\n    # Also we use the principle of modular arithmetic for simplifying the expression.\n    \n    # Given expression: (2^2019) / (4^982 - 2^1963)\n    # We simplify the denominator first: 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    # Now we subtract 2^1963: 2^1964 - 2^1963 = 2^1963(2 - 1) = 2^1963\n    \n    # Now we can simplify the given expression to:\n    # (2^2019) / (2^1963)\n    # Now we subtract the exponents of 2 in the numerator and denominator to get the new exponent\n    # This simplification results in: 2^(2019 - 1963) = 2^56\n    \n    # Now we want to find the remainder when 2^56 divided by 5, this calls for modular exponentiation.\n    # The pattern of powers of 2 modulo 5 is 2, 4, 3, 1 and it repeats every 4 numbers because 2^4 % 5 == 1.\n    \n    # 2^56 % 5 can be calculated as (2^(56 % 4) % 5) due to the repeating pattern\n    # 56 % 4 is 0, so we get 2^0, which is 1.\n    \n    # Therefore, the remainder of 2^56 when divided by 5 is 1.\n    return 1\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_Candy = 4\n    cabinets_right_of_Candy = 7\n    Candy_cabinet = 1  # Including Candy's cabinet\n    total_cabinets = cabinets_left_of_Candy + cabinets_right_of_Candy + Candy_cabinet\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    classes = 5\n    total_boxes = boxes_per_class * classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    max_value = 0\n    # Starting from 99 and going backward to find the largest number that satisfies the conditions.\n    for i in range(99, -1, -1):\n        number = int(f\"49{i:02d}\")  # Construct the four-digit number.\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            max_value = number\n            break  # we can break here because we are going backward from 99.\n    return max_value\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of motorcycles, cars, and lorries\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Equation 1: Total number of vehicles\n    eq1 = Eq(motorcycles + cars + lorries, 27)\n    # Equation 2: Counting the total number of wheels\n    eq2 = Eq(2*motorcycles + 4*cars + 6*lorries, 96)\n    # Equation 3: Number of cars equal to the number of lorries\n    eq3 = Eq(cars, lorries)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = symbols('pink_dolphins')\n    equation = Eq(11 * pink_dolphins + pink_dolphins, 48)\n    solution = solve(equation, pink_dolphins)\n    return solution[0]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the empty jar and y the mass of one chocolate.\n    # We then have two equations based on the given information:\n    # x + 5y = 185\n    # x + 17y = 317\n\n    # We can solve these two equations for x and y.\n    # Subtract the first equation from the second to eliminate x.\n    y = (317 - 185) / (17 - 5)\n\n    # Now substitute the value of y back into the first equation to solve for x.\n    x = 185 - 5 * y\n\n    # The mass of the jar with 10 chocolates is then:\n    mass_with_10_chocolates = x + 10 * y\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(ana, olaf + 116)  # Ana is 116cm taller than Olaf\n    equation2 = Eq(kristoff, 5.5 * olaf)  # Kristoff is five and a half times the height of Olaf\n    equation3 = Eq(ana, 150)  # Ana is 150cm tall\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    # Find how much taller Kristoff is than Ana\n    height_difference = solutions[kristoff] - solutions[ana]\n\n    return height_difference\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define the number of fruits\n    apples, pears, mangoes, total_cost = symbols('apples pears mangoes total_cost')\n    \n    # Given costs and ratios\n    apple_cost = 0.60\n    total_money = 150\n    apples_to_pears_cost_ratio = 3/2\n    pears_to_mangoes_cost_ratio = 1/5\n    \n    # Equations based on the given ratios and costs\n    equation1 = (4/5) * apples - pears                 # pears is 4/5 times apples\n    equation2 = (2/5) * apples - mangoes               # mangoes is 2/5 times apples\n    equation3 = total_cost - (apples * apple_cost + \n                              pears * (apple_cost * apples_to_pears_cost_ratio) + \n                              mangoes * (apple_cost * apples_to_pears_cost_ratio / pears_to_mangoes_cost_ratio))\n    equation4 = total_cost - total_money               # total cost is $150\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apples, pears, mangoes, total_cost))\n    \n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    \n    return int(total_fruits)\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # total weight of sugar solution\n    sugar_concentration = 0.32   # sugar concentration\n    sugar_weight = total_solution_weight * sugar_concentration  # weight of sugar\n    water_weight = total_solution_weight - sugar_weight  # weight of water\n    \n    return water_weight\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    total_length = 800\n    \n    # Subtract 1 from the tree count because we're looking for the number of gaps between the trees,\n    # not the number of trees.\n    num_gaps = total_trees - 1\n    \n    # The distance from one tree to another is the total length divided by the number of gaps.\n    distance_between_trees = total_length / num_gaps\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    min_value = float('inf')  # Initialize to positive infinity for comparison\n\n    # Iterating through 0-9 for the three unknown digits\n    for x in range(10):\n        for y in range(10):\n            for z in range(10):\n                number = int(f\"1992{x}{y}{z}\")\n\n                # Check divisibility rules\n                if number % 2 == 0 and number % 5 == 0:  # Divisible by 2 and 5, hence last digit must be 0\n                    if number % 3 == 0:  # Sum of the digits must be divisible by 3\n                        sum_digits = sum([int(digit) for digit in str(number)])\n                        if sum_digits % 3 == 0:\n                            if number % 11 == 0:  # Specific rule for divisibility by 11\n                                # Alternate sum and difference of digits should be divisible by 11\n                                alt_sum_diff = int(str(number)[0]) - int(str(number)[1]) + int(str(number)[2]) - int(str(number)[3]) + int(str(number)[4]) - int(str(number)[5]) + int(str(number)[6])\n                                if alt_sum_diff % 11 == 0:\n                                    min_value = min(min_value, number)  # Update minimum value if a lower number is found\n\n    return min_value\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_total = 366\n    second_half_average = 65\n    second_half_total = second_half_average * 6  # There are 6 months in the second half of the year\n    total_year = first_half_total + second_half_total\n    average_per_month = total_year / 12  # There are 12 months in a year\n\n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    letters = \"ELEMENT\"\n    freq = {letter: letters.count(letter) for letter in set(letters)}\n    \n    denominator = 1\n    for count in freq.values():\n        denominator *= factorial(count)\n    \n    ans = factorial(len(letters)) // denominator\n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # In three years, Hazel will be 9 years old.\n    # Therefore, currently Hazel is 9 - 3 = 6 years old.\n    hazel_current_age = 9 - 3\n    \n    # Jessica is 3 years younger than Hazel.\n    # So, Jessica's current age is Hazel's current age - 3.\n    jessica_current_age = hazel_current_age - 3\n    \n    # Next year, their ages will increase by 1.\n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n    \n    # Their total age next year will be the sum of their ages next year.\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Average score of 6 assignments\n    average_6_assignments = 92\n    # Average score of first 5 assignments\n    average_5_assignments = 94\n    # Total score of 6 assignments\n    total_6_assignments = average_6_assignments * 6\n    # Total score of 5 assignments\n    total_5_assignments = average_5_assignments * 5\n    # Score of the sixth assignment\n    score_6th_assignment = total_6_assignments - total_5_assignments\n\n    return score_6th_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n    pairs_sold = total_profit / profit_per_pair\n    initial_pairs = pairs_sold + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_point = datetime.strptime('5:30 PM', '%I:%M %p')\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    duration = end_time - halfway_point\n    start_time = halfway_point - duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let's use algebra to solve the problem\n    # Let x be the number of cars in the car park at the beginning\n    # According to the problem, 8 more cars enter, so we have x + 8\n    # Then 10 cars exit, so we have (x + 8) - 10\n    # Now, we're told there are 30 cars in the car park, so: (x + 8) - 10 = 30\n    # Let's solve this simple equation for x\n    x = (30 + 10) - 8\n    return x\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(((2 * x / 4)**2 - 4) / 10, 6)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liter = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_liter = 3\n    days = 1  # Start with the first day already counted\n\n    while current_liter < total_liter:\n        current_liter -= leak_rate  # Pool leaks at night\n        current_liter += fill_rate  # Pipe fills the pool during the day\n        days += 1  # Counting each day\n\n    return days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_in_5_minutes = 27\n    time_ratio = 20 / 5\n    toys_in_20_minutes = toys_in_5_minutes * time_ratio\n    \n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour to seconds\n    current_number = 1\n    digits_written = 0\n\n    while digits_written + len(str(current_number)) <= total_seconds:\n        digits_written += len(str(current_number))\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    fractions = [(1/2) * 30, (1/3) * 36, (1/4) * 40, (1/5) * 60, (1/6) * 96]\n\n    smallest = min(fractions)\n    largest = max(fractions)\n\n    difference = largest - smallest\n\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    stop_time = datetime.strptime(\"11:20 PM\", \"%I:%20%M %p\")\n    game_duration = timedelta(minutes=225)\n    start_time = stop_time - game_duration\n    start_time_formatted = start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\n    return start_time_formatted\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # To guarantee getting a green marble, Darrell could draw\n    # all non-green marbles first; which are blue, white and black.\n    non_green_marbles = 5 + 9 + 2\n\n    # After having drawn all non-green marbles, on the next draw\n    # he must pick a green marble.\n    draws_to_get_green = non_green_marbles + 1\n\n    return draws_to_get_green\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    total_teams = 20\n    total_matches = comb(total_teams, 2)\n    return total_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        initial_rabbits = (initial_rabbits * 3) // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Candy's walking speed as c meters per minute.\n    c = symbols('c')\n\n    # Ivy's walking speed is 20 meters per minute more than Candy's.\n    # So, Ivy's speed is (c + 20)\n\n    # Ivy walked for a total of 6 (Candy delay) + 12 minutes.\n    # Candy walked for a total of 12 minutes.\n\n    # Let's set up the equation based on the distance they covered.\n    # Ivy's distance + Candy's distance = 1200\n    equation = Eq((c + 20) * (6 + 12), c * 12 + 1200)\n\n    # Solve for Candy's speed.\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # Each game results in a win for one player and a loss for the other.\n    # Thus, each player plays 7 games.\n    \n    # Since each of the players records different number of wins, the number of wins for each player\n    # can range from 0 to 7 because if one player wins all matches, no other player can have 7 wins.\n    \n    # The wins can therefore be distributed as follows:\n    # 0 wins - 1 player\n    # 1 win - 1 player\n    # 2 wins - 1 player\n    # 3 wins - 1 player\n    # 4 wins - 1 player\n    # 5 wins - 1 player\n    # 6 wins - 1 player\n    # 7 wins (champion) - 1 player\n    \n    # Thus, the champion has 7 wins.\n    return 7\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # Total distance the snail needs to climb\n    total_distance = 20\n    # Daily advance\n    daily_advance = 6\n    # Advance on the 7th day\n    seventh_day_advance = 2\n    # Distance climbed in 6 days\n    distance_in_six_days = daily_advance * 6\n\n    # On the seventh day, the snail climbs up 2 more meters, reaching the top\n    # Hence, we subtract the 7th day's advance from the total distance\n    remaining_distance = total_distance - seventh_day_advance\n\n    # The snail must have reached this remaining distance by the end of the 6th day\n    # before slipping back at night\n    # We calculate the nightly slip by subtracting the distance climbed in 6 days from the remaining distance\n    nightly_slip = distance_in_six_days - remaining_distance\n     \n    return nightly_slip\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    metal1_weight = 6\n    metal1_nickel_percent = 45\n    \n    metal2_weight = 14\n    metal2_nickel_percent = 60\n    \n    total_weight = metal1_weight + metal2_weight\n    total_nickel = (metal1_weight * (metal1_nickel_percent / 100)) + (metal2_weight * (metal2_nickel_percent / 100))\n    \n    nickel_concentration_percent = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    # Define the function to find the future age difference\n    def find_future_years(edward_age, mother_age):\n        future_years = 0\n        while True:\n            # Each year that passes, they both get 1 year older\n            future_years += 1\n            edward_future_age = edward_age + future_years\n            mother_future_age = mother_age + future_years\n            # We are looking for when the mother is 3 times Edward's age\n            if mother_future_age == 3 * edward_future_age:\n                break\n        return future_years\n\n    edward_present_age = 8\n    mother_present_age = 32\n\n    ans = find_future_years(edward_present_age, mother_present_age)\n    return ans\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # Scale of 1cm to 6m\n    playground_length_plan = 5  # Length on the plan in cm\n\n    real_playground_length = playground_length_plan * scale_ratio\n\n    return real_playground_length\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100): # 2-digit numbers range from 10 to 99\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let n be the number of students on one side of the initial square array.\n    # The total number of students in the square array is n^2.\n    # According to the problem, there is a surplus of 11 students, so the total number of students is n^2 + 11.\n    # When one row and one column are added to form a larger square array, it becomes (n+1)^2.\n    # According to the problem, 12 more students are needed for the larger square array, so we have n^2 + 11 + 12 = (n+1)^2.\n    # Simplifying that equation we get:\n    # n^2 + 23 = n^2 + 2n + 1\n    # 22 = 2n\n    # n = 11\n    \n    # Now we can find the total number of students by substituting n = 11 into the initial total: n^2 + 11\n    n = 11\n    total_students = n**2 + 11\n\n    return total_students\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen - pencil, 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    tank_B = tank_A + 56\n    return tank_B\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    # Let g be the number of girls\n    # According to the problem, we have the following equation:\n    # (30 * boys + 20 * girls) / (boys + girls) = 26\n    # Plugging in the known number of boys (15), we get:\n    # (30 * 15 + 20 * g) / (15 + g) = 26\n    # Solving for g:\n    boys = 15\n    average = 26\n    boys_apples = boys * 30\n    girls_apples = 20  # coefficient for girls\n\n    # Rearrange the equation and solve for g:\n    # 30 * 15 + 20 * g = 26 * (15 + g)\n    # 450 + 20g = 390 + 26g\n    # 6g = 60\n    # g = 10\n    girls = (average * boys - boys_apples) / (girls_apples - average)\n\n    return int(girls)\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_got = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_got\n    thrifty_got = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_got\n    bounty_got = remaining_after_thrifty * (2/5)\n    archie_got = remaining_after_thrifty - bounty_got\n    return archie_got\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_per_book = 32 / 8\n    total_cost = cost_per_book * 12\n    return total_cost\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    basketball_cost = 30\n    volleyball_cost = 25\n\n    # Let's assume all items are volleyballs initially, and calculate the cost\n    cost_with_all_volleyballs = total_items * volleyball_cost\n\n    # The excess amount is the amount we need to compensate by replacing volleyballs with basketballs\n    excess_amount = total_cost - cost_with_all_volleyballs\n\n    # Each replacement increases the cost by the difference between basketball and volleyball cost\n    cost_difference = basketball_cost - volleyball_cost\n\n    # The number of basketballs is the number of replacements needed to compensate the excess amount\n    num_basketballs = excess_amount // cost_difference\n\n    return num_basketballs\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    initial_candy = 36\n    given_to_lily = (3 / 4) * initial_candy\n    remaining_after_lily = initial_candy - given_to_lily\n    given_to_brother = (1 / 3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - given_to_brother\n\n    return int(remaining_candy)\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / y for y in range(2, x + 1)) for x in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # s1 = 2/5 * x1\n    # m1 = m (constant for all containers)\n    # c1 = x1 - s1 - m1 => c1 = 3/5 * x1 - m\n\n    # s2 = 2/7 * x2\n    # m2 = m (constant for all containers)\n    # c2 = x2 - s2 - m2 => c2 = 5/7 * x2 - m\n\n    # s3 = 2/9 * x3\n    # m3 = m (constant for all containers)\n    # c3 = x3 - s3 - m3 => c3 = 7/9 * x3 - m\n\n    # m1 = c1 = 3/5 * x1 - m\n    # m2 = c2 = 5/7 * x2 - m\n    # m3 = c3 = 7/9 * x3 - m\n\n    # x1 + x2 + x3 = 1371\n\n    # System of equations:\n    # 3/5 * x1 - m = 5/7 * x2 - m = 7/9 * x3 - m\n    # x1 + x2 + x3 = 1371\n\n    x1, x2, x3, m = symbols('x1 x2 x3 m')\n    equation1 = Eq(3 / 5 * x1 - m, 5 / 7 * x2 - m)\n    equation2 = Eq(5 / 7 * x2 - m, 7 / 9 * x3 - m)\n    equation3 = Eq(x1 + x2 + x3, 1371)\n\n    solutions = solve((equation1, equation2, equation3), (x1, x2, x3, m))\n\n    s1_mass = 2 / 5 * solutions[x1]\n    s2_mass = 2 / 7 * solutions[x2]\n    s3_mass = 2 / 9 * solutions[x3]\n\n    total_strawberry_mass = s1_mass + s2_mass + s3_mass\n\n    return total_strawberry_mass\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let roy and dennis be variables for the amounts of money they originally had\n    roy, dennis = symbols('roy dennis')\n\n    # Express the conditions as equations\n    total_money_equation = Eq(roy + dennis, 340)\n    remaining_money_equation = Eq(dennis - dennis / 4, 2*(roy - 2*roy / 3))\n\n    # Solve the system of equations\n    solutions = solve((total_money_equation, remaining_money_equation), (roy, dennis))\n    \n    # Calculate Dennis' remaining money\n    dennis_remaining = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_remaining\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    total_digits = 300\n    digits = 0\n    page = 0\n    while digits < total_digits:\n        page += 1\n        digits += len(str(page))\n    if digits > total_digits:\n        page -= 1\n    return page\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    num_hoops = 6\n    cost_per_ball = 20.45\n\n    total_cost_balls = num_balls * cost_per_ball\n    total_cost_hoops = total_cost - total_cost_balls\n    cost_per_hoop = total_cost_hoops / num_hoops\n\n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 693 into its prime factors\n    factors = factorint(693)\n    \n    # To make the product a perfect square, each prime factor's exponent must be even\n    # Multiply by a number that will make all exponents even\n    res = 1\n    for factor, exponent in factors.items():\n        if exponent % 2 != 0:\n            res *= factor\n\n    return res\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17 = pow(17, 379, 10)\n    unit_digit_4 = pow(4, 2012, 10)\n    \n    unit_digit = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice_liters = 8 * 3\n    juice_after_drinking = total_juice_liters - 9\n    containers_needed = -(-juice_after_drinking // 5)  # Use ceil division to get the number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solutions = solve(equation, A)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    equation1 = Eq(mary, (7/5) * alexis)  # Mary had 7/5 as many stickers as Alexis\n    equation2 = Eq(mary - 0.20 * mary, charlotte + 0.20 * charlotte + 20)  # Mary gave 20% to Charlotte and has 20 more than her in the end\n    equation3 = Eq(alexis - 0.20 * alexis, charlotte + 0.20 * charlotte)  # Alexis gave 20% to Charlotte\n    equation4 = Eq(charlotte + 0.80 * charlotte, charlotte * (1 + 0.80))  # Charlotte's stickers increased by 80%\n\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight = 3 + 1/2  # Weight of the steak in kg\n    cost_per_kg = 7.5  # Cost per kilogram\n    total_cost = weight * cost_per_kg  # Total cost of the steak\n    money_available = 20  # Money available\n    \n    if total_cost > money_available:\n        more_money_needed = total_cost - money_available\n    else:\n        more_money_needed = 0\n    \n    return more_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position_from_front = 12\n    eddies_position_from_end = total_people - eddies_position_from_front + 1\n\n    return eddies_position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    light_ball, heavy_ball = symbols('light_ball heavy_ball')\n    \n    equation1 = Eq(6 * light_ball + 6 * heavy_ball, 65.7)\n    equation2 = Eq(heavy_ball, 2 * light_ball)\n    \n    solutions = solve((equation1, equation2), (light_ball, heavy_ball))\n    \n    return round(solutions[light_ball])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # Four-digit palindromic numbers must be in the range 1000 to 9999\n    for i in range(1, 10):  # The first digit must be between 1 and 9 (inclusive)\n        for j in range(0, 10):  # The second digit can be between 0 and 9 (inclusive)\n            # The third digit must be the same as the second, and the fourth the same as the first\n            count += 1  # This forms a palindromic number\n    \n    ans = count\n    return ans\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    avg_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return avg_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    \n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    jay_pens = 6 * denise_pens\n    equation = Eq(jay_pens + denise_pens, 126)\n    solutions = solve(equation, denise_pens)\n    return solutions[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_price = 1.26\n    total_chocolate_cost = 5 * chocolate_bar_price\n    cookie_price = total_chocolate_cost / 6\n    money_at_first = 9.05\n    cost_of_four_cookies = 4 * cookie_price\n    money_left = money_at_first - cost_of_four_cookies\n    return money_left\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the number of boys and g be the number of girls.\n    b, g = symbols('b g')\n    \n    # Every 3 boys shared one ball: total balls for boys is b / 3.\n    # Every 2 girls shared one ball: total balls for girls is g / 2.\n    # We have a total of 250 balls.\n    equation1 = Eq(b / 3 + g / 2, 250)\n    \n    # There are 650 children in total.\n    equation2 = Eq(b + g, 650)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # We need the number of girls.\n    return solutions[g]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    girls, boys = symbols('girls boys')\n    \n    # Equation 1: After 25 girls went out to play, girls became 2/3 of boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n    \n    # Equation 2: After 15 boys went to play soccer, number of boys equals number of girls\n    equation2 = Eq(boys - 15, girls - 25)\n    \n    # Solve equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    # Calculate the total number of students at first\n    total_students_initially = solutions[girls] + solutions[boys]\n    \n    return total_students_initially\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):\n                if hundreds + tens + ones == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # the total value of the coins is 7590 cents\n    total_value_cents = 7590\n    # the ratio of the values of the types of coins is 10 cents to 50 cents, which simplifies to 1 to 5\n    # let the total number of coins be x\n    # then the number of 10-cent coins is 8x and their total value is 80x cents\n    # the number of 50-cent coins is 3x and their total value is 150x cents\n    # the total value is 80x + 150x = 230x\n    # we can find x by dividing the total value by 230\n    x = total_value_cents / 230\n    # now we find the total value of the 50-cent coins, which is 150x\n    value_of_50_cent_coins = 150 * x\n\n    return value_of_50_cent_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown number\n    box = symbols('box')\n\n    # Setup the equation: 8*11 = box*9 + 34\n    equation = Eq(8 * 11, box * 9 + 34)\n\n    # Solve the equation\n    solution = solve(equation, box)\n\n    # Return the solution (Note that solution will be in form of a list, we need to return the first element)\n    return solution[0]\n\n# Call the solution function to get the answer\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n    midnight_temperature = midday_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    spent = 6400\n    discount_percentage = 0.8\n    original_price = spent / (1 - discount_percentage)\n    savings = original_price - spent\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7  # cm\n    hole_side_length = 3  # cm\n    volume_with_hole = 320  # cm^3\n\n    # Calculate the area of the base with the hole\n    base_area = base_side_length ** 2 - hole_side_length ** 2\n    \n    # Calculate the height of the prism\n    height = volume_with_hole / base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so we have 7 \"people\" to arrange\n    arrangements_for_7 = factorial(7)  # 7 people around the table\n    \n    # There are 2! ways to arrange Amy and Judy\n    arrangements_for_amy_judy = 2\n    \n    # Multiply the two possibilities since they are independent events\n    total_arrangements = arrangements_for_7 * arrangements_for_amy_judy \n    \n    # For a circular table, we divide the total arrangements by the number of seats\n    # to account for rotational symmetry (we consider rotations to be the same arrangement)\n    total_arrangements /= 8\n    \n    return int(total_arrangements)\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # We will find the triangular number sequence that includes the 2008th element.\n    # Triangular numbers are of the form n(n+1)/2. We're looking for the smallest n\n    # such that n(n+1)/2 >= 2008.\n\n    n = 1\n    while n * (n + 1) // 2 < 2008:\n        n += 1\n\n    prev_triangular_number = (n - 1) * n // 2\n    position_in_sequence = 2008 - prev_triangular_number\n\n    # Now we have the position within the current segment of the sequence (e.g., within 1,2,3,...,n)\n    return position_in_sequence\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    # Given that 3x's balance with 10y's and one x weighs 1.5g.\n    # Let y be the weight of one y in grams.\n    # Form the equation: 3 * x = 10 * y, where x = 1.5\n    x = 1.5\n    # Calculate the weight of one y.\n    y = (3 * x) / 10\n    return y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    result = 35 * 24\n    return result\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    # Equation representing the relationship between the number of tomatoes and cucumbers\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n    \n    # Solve the equation with the known number of tomatoes\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Loop through possible hundreds digit from 1 to 9\n    # Zero is not included as we are looking for three-digit numbers\n    for i in range(1, 10):\n        # Loop through possible tens digit from 0 to 9\n        for j in range(10):\n            # Calculate the ones digit so that the sum is 5\n            k = 5 - i - j\n            # Check if the ones digit is between 0 and 9\n            if 0 <= k <= 9:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_result = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum_result += i\n    return sum_result\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # The number of mosquitos eaten forms an arithmetic sequence\n    # The number of mosquitoes eaten on the 16th night: a_16 = 100 (given)\n    # The common difference (d) is 6 (given)\n    # We need to find the first term (a_1) and then sum all terms from a_1 to a_31\n\n    # Using the formula for the n-th term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # where n is the term number, we can find a_1 (the first term)\n    # a_16 = a_1 + (16 - 1) * d => 100 = a_1 + 15 * 6 => a_1 = 100 - 90 => a_1 = 10\n\n    a_1 = 100 - (16 - 1) * 6\n\n    # The number of mosquitoes eaten on the 31th night: a_31 = a_1 + (31 - 1) * d\n    a_31 = a_1 + (31 - 1) * 6\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, we can find the total mosquitoes eaten in 31 nights\n    S_31 = 31 / 2 * (a_1 + a_31)\n\n    return int(S_31)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    bags_left = total_bags - given_away\n    \n    return bags_left\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure a victory, Chris must leave 5 matches after his turn,\n    # so that no matter whether Dylan picks 1 or 2 matches,\n    # Chris will be able to end up with the last match.\n    # Hence Chris must take 2 matches on his first turn.\n    # Because the number 5 is a position from which Dylan can't win\n    # if Chris plays optimally. Whenever Dylan takes 1 or 2, Chris can take\n    # the rest leaving 1 match for Dylan.\n\n    # Matches Chris should take away in the first turn.\n    chris_take = 7 - 5\n\n    return chris_take\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # The first digit of a 3-digit number should not be 0\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        if p[0] != '0' and p[2] != '0' and p[3] != '0':\n            a, b, c, d, e = map(int, p)\n            abac = a*1001 + b*10 + c\n            dbec = d*1000 + b*100 + e*10 + c\n            acedc = a*10000 + c*1000 + e*100 + d*10 + c\n            if abac + dbec == acedc:\n                return dbec\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%I.%M%p\"\n    start_time = datetime.strptime(\"9.23am\", time_format)\n    end_time = datetime.strptime(\"1.06pm\", time_format)\n\n    duration = end_time - start_time\n    minutes = duration.total_seconds() / 60\n\n    return int(minutes)\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64+36) * (64-36)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    choices = 1  # Assuming there is at least one choice to start with\n\n    # You mentioned 'him' in the question, but there's no additional data provided.\n    # If there's no context or data about different restaurants or criteria, \n    # the answer cannot be anything other than the default assumption.\n\n    return choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sum_1_to_9 = sum(range(1, 10))\n    sum_8_to_1 = sum(range(1, 9))\n    ans = sum_1_to_9 + sum_8_to_1\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # 3 notebooks, 4 pencil cases and 5 erasers cost $50\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    # A notebook and a pencil case cost $6\n    equation2 = Eq(notebook + pencil_case, 6)\n    # A pencil case and an eraser cost $8\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([(53 - i*6) - (50 - i*6) for i in range(8)]) \n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    time_taken = distance_to_market / walking_speed\n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, _, _ = perm\n        num = A*1000 + E*100 + E*10 + A\n        if A != 0 and num % 2 == 0:  # A cannot be 0 for a 4-digit number and the number should be even\n            return num\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    total_age = total_family_members * average_age\n\n    harry_age = 14\n    harry_mom_age = 36\n    harry_sister_age = 10\n\n    harry_dad_age = total_age - (harry_age + harry_mom_age + harry_sister_age)\n    \n    return harry_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters.\n    measurements_in_cm = [8300, 200, 8, 50]  # 83m = 8300cm, 200cm, 8cm, 0.5m = 50cm\n    \n    # Height of a standard classroom door is around 200cm or 2 meters.\n    standard_door_height_cm = 200\n    \n    # Find the measurement closest to the standard door height.\n    closest = min(measurements_in_cm, key=lambda x: abs(x - standard_door_height_cm))\n    \n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages = 0\n    digits_used = 0\n\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n\n    if digits_used > total_digits:\n        pages -= 1\n\n    return pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12  # fraction remaining after buying lunch\n    remaining_after_dinner = 1 - 2/7  # fraction remaining after buying dinner\n\n    # Calculate the remaining money after both lunch and dinner\n    remaining = remaining_after_lunch * remaining_after_dinner\n\n    # Calculate the original amount of money Leonard had\n    original_amount = 45 / remaining\n\n    return original_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    while total_digits < 1524:\n        pages += 1\n        total_digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_matches = (5 * 4) // 2  # Total matches in a round-robin tournament of 5 players.\n    wins_by_others = 2 + 1 + 4 + 3  # Total wins by Lily, Eva, Tina, and Emma.\n    games_won_by_gina = total_matches - wins_by_others\n\n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    return 2 * difference\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity in m/s^2\n    theta = 20  # angle of the incline in degrees\n    d = 400  # distance measured along the slope in meters\n    mu_k = 0.2  # coefficient of kinetic friction\n\n    # Convert angle to radians\n    theta_rad = math.radians(theta)\n    \n    # The net force along the incline\n    f_net = (math.sin(theta_rad) - mu_k * math.cos(theta_rad)) * g\n    \n    # Using kinematic equation: v^2 = u^2 + 2*a*d\n    # Initial velocity (u) is 0 because the skier starts from rest\n    # Final velocity (v) is what we need to find\n    # Acceleration (a) is net force along the incline (f_net)\n    # Distance (d) is given 400 m\n    # v^2 = 0 + 2 * f_net * d\n    v_squared = 2 * f_net * d\n    v = math.sqrt(v_squared)  # Final velocity\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let's denote the number of correct answers for Eddie and Avril as e and a, respectively.\n    # According to the rules, the total points for Eddie and Avril can be expressed as:\n    # Total points for Eddie: 10e - 5(10 - e) = 15e - 50\n    # Total points for Avril: 10a - 5(10 - a) = 15a - 50\n    # The problem states that Eddie got 15 more points than Avril:\n    # (15e - 50) - (15a - 50) = 15\n    # 15e - 15a = 15\n    # e = a + 1\n    # The total points together is 155, so:\n    # (15e - 50) + (15a - 50) = 155\n    # 15e + 15a = 255\n    # Substitute e from the first equation into the second equation to solve for a:\n    # 15(a + 1) + 15a = 255\n    # 15a + 15 + 15a = 255\n    # 30a + 15 = 255\n    # 30a = 240\n    # a = 8\n    # Avril answered 8 questions correctly.\n\n    a = (255 - 15) // 30\n    return a\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    group_price = 5 * 4 + 10\n    num_groups = 300 // group_price\n    num_shirts = num_groups * 4\n    return num_shirts\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Let x be the amount of work completed by one man in one day\n    # Let y be the amount of work completed by one woman in one day\n    # Total work done by 6 men in 5 days is equal to the work done by 5 women in 6 days\n\n    # 6 men take 5 days to complete the job -> 6*x*5 = total work\n    # 5 women take 6 days to complete the job -> 5*y*6 = total work\n    # Thus, 6*x*5 = 5*y*6\n\n    # Calculating work rate of one man (x) and one woman (y)\n    man_rate = 1 / (6 * 5)  # work per day for one man\n    woman_rate = 1 / (5 * 6)  # work per day for one woman\n\n    # Calculating combined work rate for 10 men and 5 women\n    combined_rate = 10 * man_rate + 5 * woman_rate\n\n    # Total work (which is 1 job) divided by combined rate gives us the total days needed\n    days_needed = 1 / combined_rate\n\n    return days_needed\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: 3 times as many boys as girls\n    original_condition = Eq(boys, 3 * girls)\n    \n    # After 12 boys leave and 20 girls join, boys = girls\n    new_condition = Eq(boys - 12, girls + 20)\n    \n    # Solve the system of equations\n    solutions = solve((original_condition, new_condition), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "from math import gcd\n\ndef solution():\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n\n    # Calculate the greatest common divisor (GCD) of the three weights\n    greatest_mass = gcd(gcd(weight_A, weight_B), weight_C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # For the kid who gets the most apples, we want to minimize their count\n    # We distribute one apple to each child first so that they all have at least one\n    remaining_apples = 30 - 6\n    \n    # To minimize the maximum, we should then distribute the remaining apples evenly\n    max_apples = remaining_apples // 5  # Divide among the other children, not the one with the max\n    \n    # Add the apple that was given initially to each child\n    max_apples += 1\n    \n    # If there's a remainder from the division, the max will have one more apple\n    if remaining_apples % 5 != 0:\n        max_apples += 1\n    \n    return max_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n    # 1 apple is used alongside 2 bananas and 3 oranges, so their ratio is 1:2:3\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    # Alex uses 24 fruits in total\n    equation3 = Eq(apple + banana + orange, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short_ribbon_length = 40  # cm\n    may_long_ribbon_length = 70   # cm\n    nancy_long_ribbon_length = 70 # cm\n    extra_length_may = 240        # cm, converted from 2.4m to cm\n\n    # Let's denote May's number of long ribbons as x.\n    # May's total length of ribbon = 7 * May_short_length + x * May_long_length\n    # Nancy's total length of ribbon = 18 * Nancy_long_length\n    # According to the problem, May's length is 2.4m longer than Nancy's, so:\n    # 7 * 40 + x * 70 + 240 = 18 * 70\n\n    total_ribbon_length_nancy = 18 * nancy_long_ribbon_length\n    total_ribbon_length_may = 7 * may_short_ribbon_length + extra_length_may\n\n    # Calculate x (May's number of long ribbons) from the equation\n    x = (total_ribbon_length_nancy - total_ribbon_length_may) / may_long_ribbon_length\n\n    # Total pieces May has = number of short ribbon + number of long ribbon\n    total_pieces_may = 7 + x\n\n    return int(total_pieces_may)\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assuming all animals are chickens (with 2 legs each), then we count the excess legs.\n    total_legs_if_all_chickens = 12 * 2\n    excess_legs = 34 - total_legs_if_all_chickens\n\n    # Since rabbits have 4 legs and assuming the excess legs are due to rabbits,\n    # Each rabbit adds an additional 2 legs (4 legs of rabbit - 2 legs that were assumed for chicken).\n    number_of_rabbits = excess_legs / (4 - 2)\n\n    return int(number_of_rabbits)\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 0.52 + 7.6 * 0.52\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    max_number = 99\n    \n    while not (max_number % 4 == 3 and max_number % 5 == 3):\n        max_number -= 1\n        \n    return max_number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_paint = 1  # 1 litre of Purple Fire paint\n    ratio_sum = 3 + 1  # Sum of ratio parts (red:blue)\n    red_ratio = 3  # Red part of the ratio\n    \n    red_paint = (red_ratio / ratio_sum) * total_paint\n    \n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    sum_of_numbers = 6 * 8  # Since the mean is 6 and there are 8 numbers\n    sum_of_known_numbers = 9 + 7 + 5 + 8 + 4 + 1 + 8  # Sum of known numbers\n    missing_number = sum_of_numbers - sum_of_known_numbers  # Calculate missing number\n    \n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    original_amount = 68\n    quarter_amount = original_amount / 4\n    remaining_amount = original_amount - quarter_amount\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    for red_balls in range(19):\n        blue_balls = 2 * red_balls\n        if red_balls + blue_balls == 18:\n            return blue_balls\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    apples_to_distribute = 50\n    children_count = 8\n    \n    # Start assigning minimum apples to each child\n    assigned_apples = [1] * children_count\n    # Increment the number of apples for each subsequent child\n    assigned_apples = [x + i for i, x in enumerate(assigned_apples)]\n    # Calculate the remaining apples after initial assignment\n    remaining_apples = apples_to_distribute - sum(assigned_apples)\n    \n    # Distribute the remaining apples starting from the last/farthest child\n    i = children_count - 1\n    while remaining_apples > 0:\n        assigned_apples[i] += 1\n        remaining_apples -= 1\n        # Move to the previous child if the difference between\n        # this child and the next child is more than 1\n        if i - 1 >= 0 and (assigned_apples[i] - assigned_apples[i-1] > 1):\n            i -= 1\n        else:  # Otherwise, reset to the last/farthest child\n            i = children_count - 1\n    \n    # The number of apples for the child getting the most is the last in assigned_apples\n    return assigned_apples[-1]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Available grass units can feed 8 cows for 10 days\n    total_grass_units = 8 * 10\n    # Total_grass_units can feed 4 cows for 15 days\n    # Therefore, total_grass_units equals 4 cows * 15 days\n    # From this, we can find the rate at which grass is consumed per cow per day\n    grass_per_cow_per_day = total_grass_units / (4 * 15)\n\n    # Number of cows that can be fed for 5 days is:\n    num_cows = total_grass_units / (grass_per_cow_per_day * 5)\n    \n    return int(num_cows)\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass = (1.02 / 12) * 4\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let's denote the cost of each compact disc as 'cd_price'.\n    tape_price = 9\n    total_price = 83\n    number_of_tapes = 3\n    \n    # The total cost for the tapes\n    total_tape_price = tape_price * number_of_tapes\n\n    # The remaining price is the total cost of the compact discs\n    remaining_price_for_cds = total_price - total_tape_price\n\n    # Given 4 identical compact discs, we divide the remaining price by 4 \n    cd_price = remaining_price_for_cds / 4\n\n    return cd_price\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # The divisor without the decimal point\n    divisor_without_decimal = 122\n    \n    # The incorrect result subtraction\n    incorrect_subtraction = 99.396\n    \n    # The incorrect result\n    incorrect_result = incorrect_subtraction * divisor_without_decimal\n    \n    # The true result\n    true_result = incorrect_result + incorrect_subtraction\n    \n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n\n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n\n    # Together, they had 876 cards\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    # Solve the equations for the number of cards each person has\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    # Calculate how many cards Melissa should give to Hisham\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    eq1 = Eq(a + b, 6)  # third number\n    eq2 = Eq(b + 6, 15)  # fifth number\n    sol = solve((eq1, eq2), (a, b))\n    # Get the first two numbers in the sequence\n    first_num = sol[b] - 6\n    second_num = 6 - first_num\n    # Calculate the seventh number in the sequence\n    third_num = first_num + second_num\n    fourth_num = second_num + third_num\n    fifth_num = third_num + fourth_num\n    sixth_num = fourth_num + fifth_num\n    seventh_num = fifth_num + sixth_num\n\n    return seventh_num\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number Tasha thought of\n    number = symbols('number')\n\n    # Define the equation based on the problem description\n    equation = Eq(3 * number + 8, 35)\n\n    # Solve the equation for the number\n    solution = solve(equation, number)\n\n    # Get the solution number (first and only item in the list)\n    return solution[0]\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # 1 litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    result = 0\n    for i in range(1, 8):\n        numerator = 36\n        denominator = ((5 * i) - 4) * ((5 * i) + 1)\n        fraction = numerator / denominator\n        result += fraction\n    return result\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_combinations = sorted([''.join(map(str, p)) for p in permutations(digits) if p[0] != '0' and int(p[-1]) % 2 != 0])\n    return int(all_combinations[0])\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Let the total work be represented by the product of the number of workers and the days they need to complete the job\n    total_work = 24 * 16  # This is the work done by 24 men\n\n    # Finding the work rate of a single man\n    work_rate_man = total_work / (24 * 16)\n\n    # The same total work is done by 16 women in 24 days\n    # Finding the work rate of a single woman\n    work_rate_woman = total_work / (16 * 24)\n\n    # Rate at which 10 men can do the work\n    rate_10_men = 10 * work_rate_man\n\n    # Rate at which 6 women can do the work\n    rate_6_women = 6 * work_rate_woman\n\n    # Combined rate of 10 men and 6 women\n    combined_rate = rate_10_men + rate_6_women\n\n    # Total days required for 10 men and 6 women to complete the job\n    days_required = total_work / combined_rate\n\n    return days_required\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rects = 4\n    lines = rects * 2  # Each rectangle adds 2 lines\n    intersections = lines * (lines - 1) // 2  # Choose 2 lines to intersect\n    regions = 1 + lines + intersections\n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    difference_equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(difference_equation, julie)\n    marion_pay = 2 * julie_pay[0]\n    ethan_pay = 5 * julie_pay[0]\n\n    total_pay = julie_pay[0] + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n    # There are 5 people in total\n    total_people = 5\n    # Eddie can have 4 positions (1st, 2nd, 4th, or 5th). We subtract the middle position.\n    eddie_positions = total_people - 1\n    # The remaining 4 people can be arranged in 4! ways.\n    arrangement_of_others = factorial(total_people - 1)\n    # Multiply the number of positions Eddie can take by the number of arrangements of the others.\n    total_arrangements = eddie_positions * arrangement_of_others\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    second_term = 96\n    fourth_term = 12\n    common_ratio = fourth_term / second_term\n    \n    third_term = second_term * common_ratio\n    \n    return int(third_term)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    \n    # Equation based on the problem statement\n    # initial_money * 1/3 + 56 + initial_money * 3/8 = initial_money\n    equation = Eq(initial_money / 3 + 56 + initial_money * 3 / 8, initial_money)\n    \n    # Solve the equation for initial_money\n    solved_money = solve(equation, initial_money)[0]\n\n    # Calculate the total amount spent\n    spent = solved_money / 3 + 56\n    \n    return spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    # Using divisibility rule for 11: the difference between the sum of the digits in the odd positions\n    # and the sum of the digits in the even positions should be either 0 or divisible by 11\n    digits = '123456789'\n    min_num = float('inf')\n    for p in permutations(digits):\n        num = int(''.join(p))  # make a number from the permutation tuple\n        if num < min_num:\n            # Calculate alternating sum to check divisibility by 11\n            alternating_sum = sum(int(p[i]) if i % 2 == 0 else -int(p[i]) for i in range(9))\n            if alternating_sum % 11 == 0:\n                min_num = num\n    return min_num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3             # Eddie's speed in m/s\n    train_speed = 57            # Train's speed in m/s\n    time_to_pass = 10           # Time for train to pass Eddie in seconds\n    relative_speed = train_speed + eddie_speed   # Relative speed in m/s\n    \n    # Distance covered by the train while passing Eddie, which is equal to the train's length\n    length_of_train = relative_speed * time_to_pass\n    \n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operations = ['+', '*']\n    max_value = 0\n    for op1, op2, op3 in product(operations, repeat=3):\n        expression = f\"1{op1}2{op2}3{op3}4\"\n        value = eval(expression)\n        if value > max_value:\n            max_value = value\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_award = 8\n    incorrect_penalty = 3\n    total_marks = 63\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        marks = correct * correct_award - incorrect * incorrect_penalty\n        if marks == total_marks:\n            return correct\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    # total distance the train needs to cover to cross the bridge entirely\n    total_distance = 700 + 900\n    # speed of the train (m/min)\n    speed = 400\n    # time = distance / speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(3, 1997):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his to Peter\n    sam_to_peter = sam * 20 / 100\n\n    # Peter gives 25% of his to Sam\n    peter_to_sam = (peter + sam_to_peter) * 25 / 100\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - sam_to_peter + peter_to_sam, (peter + sam_to_peter - peter_to_sam) + 96)\n\n    solution = solve((equation1, equation2), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h represent Hazel's current age, m represent her mom's current age.\n    h, m = symbols('h m')\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(h + 12, 3 * h)\n\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age.\n    equation2 = Eq(m + (18 - h), 3 * 18)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (h, m))\n\n    # Hazel's mom's current age.\n    return solutions[m]\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    n = 60  # Total number of terms in the sequence\n    sum_first_5 = 10  # Sum of the first 5 numbers\n    sum_last_5 = 120  # Sum of the last 5 numbers\n\n    # Let's denote the first term of the sequence as a and the common difference as d\n    # The sum of the first 5 terms can be calculated as sum_first_5 = 5a + 10d\n    # Similarly, the sum of the last 5 terms can be calculated as sum_last_5 = 5a + 118d, because the last term is the (n-1)th term, which is a + 59d\n\n    # Now we have two equations:\n    # 5a + 10d = 10 (1)\n    # 5a + 118d = 120 (2)\n\n    # Subtract equation (1) from (2):\n    # (5a + 118d) - (5a + 10d) = 120 - 10\n    # 108d = 110\n    d = 110 / 108\n\n    # Substitute d back into equation (1) to find a:\n    # 5a + 10d = 10\n    a = (10 - 10 * d) / 5\n\n    # Now, we can find the sum of the first term and the last term:\n    # Sum of the sequence = n/2 * (first term + last term)\n    #                     = n/2 * (a + (a + (n - 1) * d))\n    #                     = n/2 * (2a + (n - 1) * d)\n    sum_sequence = n / 2 * (2 * a + (n - 1) * d)\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Peter's current age\n    peter_age = 45\n    # Pip's current age\n    pip_age = 7\n    # Pit's current age\n    pit_age = 14\n\n    # Let x be the number of years it will take for Peter's age to be the sum of his sons' ages\n    x = symbols('x')\n\n    # Equation representing the future ages\n    equation = Eq(peter_age + x, (pip_age + x) + (pit_age + x))\n\n    # Solve the equation\n    future_age = solve(equation, x)\n\n    # Peter's age when the condition is met\n    return peter_age + future_age[0]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers, so we wil have 13+1=14 pigeonholes.\n    # To ensure we get 2 cards with consecutive numbers, we must draw from each pigeonhole.\n    # Since there are 4 patterns, we must draw one more than 13 times 4 to ensure we have consecutive numbers.\n    ans = (13 * 4) + 1\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet has 4 page numbers.\n    # The fifth sheet will have page numbers 5*4-3, 5*4-2, 5*4-1, 5*4 (based on the reverse counting for a newspaper).\n    # Therefore, the pages are 17, 18, 19, 20.\n    page_sum = (5*4-3) + (5*4-2) + (5*4-1) + (5*4)\n    return page_sum\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of laptops and original cost per laptop\n    n_laptops, original_cost = symbols('n_laptops original_cost')\n\n    # Profit from selling all laptops at the initial scenario\n    initial_profit = Eq(n_laptops * (2000 - original_cost), 60000)\n\n    # Profit from selling all laptops after the cost decreases by 1/5\n    # and the total profit increases by 30%\n    new_cost = original_cost - original_cost / 5\n    increased_profit = Eq(n_laptops * (2000 - new_cost), 60000 * 1.3)\n\n    # Solve the system of equations\n    solutions = solve((initial_profit, increased_profit), (n_laptops, original_cost))\n\n    # We only need the number of laptops\n    return solutions[n_laptops]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    answer_when_halved = 10\n    original_number = answer_when_halved * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Initialize the smallest possible number M\n    M = 1\n    \n    while True:\n        # Calculate the remainders for 7, 9, a, and 28.\n        remainder_7 = M % 7\n        remainder_9 = M % 9\n        remainder_28 = M % 28\n        \n        # Skip iterations where remainders are not in increasing order or not distinct\n        if remainder_7 >= remainder_9 or remainder_9 >= remainder_28 or remainder_7 == 0 or remainder_9 == 0 or remainder_28 == 0:\n            M += 1\n            continue\n        \n        # Since the differences form an arithmetic sequence, the difference between remainders must be consistent\n        # Let the common difference be d\n        d = remainder_9 - remainder_7\n        \n        # Compute the expected remainder for a based on the common difference\n        remainder_a = remainder_9 + d\n        \n        # Check if the current M is a valid solution\n        # The remainder when divided by 'a' should be remainder_a, and 'a' should be the last of the arithmetic sequence\n        a = remainder_a + d\n\n        if M % a == remainder_a:\n            return M\n        \n        # Increment M and continue the search\n        M += 1\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of the arithmetic sequence\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n    num_boys = ((total_students + 1)/2)**2\n    num_girls = (total_students/2)**2\n    equation = Eq(num_boys - num_girls, 36)\n    \n    possible_students = solve(equation, total_students)\n    \n    for num in possible_students:\n        if num.is_real and num > 0:\n            return num**2\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of man-days to dig the original 120 metres trench\n    original_man_days = 3 * 2\n    \n    # Number of man-days per metre\n    man_days_per_metre = original_man_days / 120\n    \n    # Number of metres a single man can dig in one day\n    metres_per_man_day = 1 / man_days_per_metre\n    \n    # Total number of man-days needed to dig the 880 metres trench\n    total_man_days_for_880_metres = 880 * man_days_per_metre\n    \n    # Number of days it would take 4 men to dig the 880 metres trench\n    days_for_4_men_to_dig_880_metres = total_man_days_for_880_metres / 4\n    \n    return days_for_4_men_to_dig_880_metres\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    # combined_rate * combined_time = total_people\n    combined_rate = total_people / combined_time\n\n    # gloria_rate is how many people Gloria interviews per week\n    # combined_rate = ellie_rate + gloria_rate\n    gloria_rate = combined_rate - ellie_rate\n\n    # gloria_time = total_people / gloria_rate\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books to move from the first shelf to the second shelf\n    x = symbols('x')\n\n    # After moving x books, first shelf would have 18 - x books\n    # After moving x books, second shelf would have 24 + x books\n    # Second shelf should have twice as many books as the first shelf\n    equation = Eq(24 + x, 2 * (18 - x))\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "from fractions import Fraction\n\ndef solution():\n    # Mixed fractions are converted to improper fractions\n    first_term = 285 + Fraction(6, 7)\n    second_term = 181 + Fraction(10, 11)\n    third_term = 153 + Fraction(12, 13)\n    \n    numerator = first_term + second_term + third_term\n    \n    # Fraction part in the denominator\n    denominator_fraction = Fraction(1, 7) + Fraction(1, 11) + Fraction(1, 13)\n    \n    # Divide the numerator by the denominator_fraction\n    ans = numerator / denominator_fraction\n    \n    # Convert to mixed number if needed (not asked for in question, thus just returning the improper fraction)\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = symbols('total_pupils', integer=True)\n    band = 5\n    neither_band_nor_choir_fraction = 2/9\n    choir_fraction = 3/4\n\n    neither_band_nor_choir = neither_band_nor_choir_fraction * total_pupils\n    remaining_pupils = total_pupils - band\n    choir = choir_fraction * remaining_pupils\n\n    eq = Eq(band + choir + neither_band_nor_choir, total_pupils)\n\n    total_pupils_solution = solve(eq, total_pupils)\n\n    return total_pupils_solution[0]\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    leftovers_when_4_per_box = 32\n    leftovers_when_7_per_box = 3\n    lollipops_with_7_per_box = 7 - leftovers_when_7_per_box\n\n    for total_lollipops in range(leftovers_when_4_per_box, 1000):  # Assuming a reasonable upper limit\n        if (total_lollipops - leftovers_when_4_per_box) % 4 == 0 and \\\n           (total_lollipops - lollipops_with_7_per_box) % 7 == 0:\n            return total_lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls, long_tube_capacity = 47, 8\n    max_long_tubes = total_balls // long_tube_capacity\n    for long_tubes in range(max_long_tubes, -1, -1):\n        remaining_balls = total_balls - (long_tubes * long_tube_capacity)\n        if remaining_balls % 5 == 0:\n            return long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    difference = (ninth_term - third_term) // (9 - 3)\n    first_term = third_term - 2 * difference\n\n    eleventh_term = first_term + (n-1) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the original number of bracelets Felicia had.\n    # Let J be the original number of bracelets Janice had. J = 96 (given)\n    J = 96\n    \n    # F_after is the number of bracelets Felicia had after selling 3/5 of her bracelets.\n    # J_after is the number of bracelets Janice had after buying 2/5 of the bracelets Felicia sold.\n    \n    # From the problem, we have the following equations:\n    # (1) J_after / F_after = 7 / 5\n    # (2) J_after = J + (2/5) * (3/5) * F\n    # (3) F_after = F - (3/5) * F = (2/5) * F\n    # Substituting (3) in (1) gives us J_after = (7/5) * (2/5) * F\n    # Which translates to J + (2/5) * (3/5) * F = (7/5) * (2/5) * F\n    # Which simplifies to J = (7/5) * (2/5) * F - (2/5) * (3/5) * F\n    # Further simplifying gives J = (14/25 - 6/25) * F\n    # Thus J = (8/25) * F\n    # Now we solve for F using the value of J (96)\n    \n    F = J / (8/25)  # Solve for original number of bracelets Felicia had.\n    \n    # Number of bracelets Janice bought from Felicia is (2/5) * (3/5) * F\n    bracelets_bought = (2/5) * (3/5) * F\n    \n    return round(bracelets_bought)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Define the series of numbers we are summing up the cubes for\n    numbers_to_cube = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    # Calculate the sum of cubes using list comprehension\n    sum_of_cubes = sum([i**3 for i in numbers_to_cube])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percent = 15 / 100\n    discount_amount = original_price * discount_percent\n    sale_price = original_price - discount_amount\n\n    return round(sale_price, 2)\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let's denote the true result as x.\n    # Then the incorrectly calculated result is x + 2138.4.\n    # But we also know that this incorrect result is equivalent to multiplying 432 with the unknown number.\n    # Hence, 432 * unknown number = x + 2138.4\n\n    # We can set up an equation x = 432 * unknown - 2138.4\n\n    # We then rearrange the equation to derive the value of the unknown number\n    # unknown number = (x + 2138.4) / 432\n\n    # But as per the problem, we know that the unknown number is simply x divided by 4.32,\n    # so we can equate the two expressions for the unknown number:\n    # (x + 2138.4) / 432 = x / 4.32\n\n    # We can now solve for x:\n    # x + 2138.4 = 100 * x (because 432/4.32 = 100)\n    # x = 2138.4 / (100 - 1)\n    # x = 2138.4 / 99\n\n    x = 2138.4 / 99\n    return x\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    differences = [2758 - 2017, 3670 - 2758]\n    # Find the greatest common divisor among the differences\n    from math import gcd\n    a_gcd = gcd(*differences)\n\n    # Find the divisors of the gcd\n    divisors = set()\n    for i in range(1, int(a_gcd ** 0.5) + 1):\n        if a_gcd % i == 0:\n            divisors.add(i)\n            divisors.add(a_gcd // i)\n    \n    # Remove the trivial solution where divisor is 1\n    divisors.remove(1)\n    \n    return sum(divisors)\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # the time taken in seconds\n    distance = 300  # the length of the bridge in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum = 9 + 99 + 999 + 9999\n    return sum\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy gets 5 candies and each girl gets 3 candies, with total candies being 448\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    \n    # There are 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate total number of children adding boys and girls\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk_before, fruit = symbols('milk_before fruit')\n\n    equation1 = Eq(milk_before / fruit, 7/9)\n    equation2 = Eq((milk_before - 8) / fruit, 2/3)\n\n    solutions = solve((equation1, equation2), (milk_before, fruit))\n\n    return solutions[milk_before]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # My grandmother's age in 2008\n    grandmother_age_2008 = 80\n    # The year grandmother turned 80\n    year_grandmother_2008 = 2008\n\n    # My mum's age in 1996\n    mum_age_1996 = 40\n    # The year mum turned 40\n    year_mum_1996 = 1996\n\n    # Calculate the birth year of my mum\n    birth_year_mum = year_mum_1996 - mum_age_1996\n\n    # Calculate grandmother's age when my mum was born\n    grandmother_age_when_mum_born = grandmother_age_2008 - (year_grandmother_2008 - birth_year_mum)\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n\n    # Find the position where the first '3' in '23' would be,\n    # which is the digit count up to '22' plus 1.\n    position = count - 1\n\n    return position\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for the number of lemonade bottles (x) and \"1000 Plus\" bottles (y)\n    x, y = symbols('x y', integer=True)\n    \n    # Total number of bottles\n    total_bottles = 350\n    \n    # Total income\n    total_income = 2012\n    \n    # Price per bottle of lemonade and \"1000 Plus\"\n    lemonade_price = 4\n    plus_price = 7\n    \n    # Create equation based on total number of bottles and total income\n    eq1 = x + y - total_bottles\n    eq2 = lemonade_price * x + plus_price * y - total_income\n    \n    # Solve the system of equations for x and y\n    # We only need the value of y, but we need to find the non-negative solutions as well\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Finding the minimum y which is a positive integer\n    min_plus_bottles = min(y for x, y in solutions if y.is_nonnegative)\n    \n    return min_plus_bottles\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Maximum socks taken without getting a pair of white socks\n    # Would be taking all red and black socks, and one white sock\n    max_red_black = 10 + 10  \n    one_white = 1\n    \n    # To ensure a pair of white socks, take one more\n    one_more_white = 1\n    \n    # Total socks taken to guarantee a pair of white socks\n    total_socks = max_red_black + one_white + one_more_white\n    \n    return total_socks\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    total_marks = sum(marks)\n    num_tests = len(marks)\n    mean_mark = total_marks / num_tests\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 4 students\n    # Let y be the number of groups with 6 students\n    # We have two equations based on the problem statement:\n    # x + y = 24 (total number of groups)\n    # 4x + 6y = 112 (total number of students)\n    # We can solve this system of equations for x and y.\n    \n    # Importing the solve function from sympy\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for x and y\n    x, y = symbols('x y')\n    \n    # Setting up the equations\n    equation1 = Eq(x + y, 24)\n    equation2 = Eq(4*x + 6*y, 112)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # We need to find the value of y, which is the number of groups with 6 students\n    return solutions[y]\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # the average of the first three numbers\n    average_first_three = 60\n    # the total of the first three numbers\n    total_first_three = average_first_three * 3\n    \n    # the new average when a fourth number is added\n    new_average = 90\n    # the new total for all four numbers\n    new_total = new_average * 4\n    \n    # the fourth number is the difference between the new total and the old total\n    fourth_number = new_total - total_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    additional_apples_per_friend = 1\n    total_initial_apples = 60\n\n    number_of_friends = total_initial_apples // initial_apples_per_friend\n    total_apples_needed = (initial_apples_per_friend + additional_apples_per_friend) * number_of_friends\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0: # A cannot be 0 as it is the first digit of the 3-digit number\n            ABC = (100 * A) + (10 * B) + C\n            return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_for_rabbit = 3/2  # Owen trades 3 fish for 2 rabbits\n    rabbit_for_wheat = 3/4  # Oscar trades 3 rabbits for 4 packs of wheat\n\n    fish_for_wheat = fish_for_rabbit / rabbit_for_wheat  # Calculate fish per pack of wheat\n    fish_needed_for_8_wheat = fish_for_wheat * 8  # Calculate fish needed for 8 packs of wheat\n\n    return fish_needed_for_8_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    pens_cost = 3 * 1.60\n    pencils_cost = 2 * 0.62\n    magazine_cost = 4.50\n\n    total_cost = pens_cost + pencils_cost + magazine_cost\n\n    change = 20 - total_cost\n\n    return change\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # Let x be the original price of the purse before the discount\n    handbag_discount = 428 * 0.2\n    total_discount = 121\n    purse_discount_percentage = 0.28\n\n    # The purse discount plus the handbag discount is equal to the total discount\n    purse_discount = total_discount - handbag_discount\n\n    # Find the original price of the purse before the discount\n    original_purse_price = purse_discount / purse_discount_percentage\n\n    return original_purse_price\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import factorial\n    \n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n    \n    factorial_25 = factorial(25)\n    ans = count_trailing_zeros(factorial_25)\n    return ans\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Calculate the sum of digits for one cycle of the recurring decimal\n    sum_per_cycle = A * 10 + 2\n    \n    # Calculate how many complete cycles of the recurring pattern are there in the first 20 digits\n    cycles = 20 // 2\n    \n    # Calculate the sum of the digits in these complete cycles\n    total_sum = sum_per_cycle * cycles\n    \n    # Given that the total sum of the first 20 digits after the decimal point is 80\n    # Using this information to solve for A\n    A = (80 - 2 * cycles) // (10 * cycles)\n\n    return A\n\n# To find A, we can iterate over the possible values of A (1 to 9) and find the correct one\nfor A in range(1, 10):\n    if solution() == A:\n        ans = A\n        break"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    daily_climb = 4\n    nightly_slide = 1\n    net_progress = daily_climb - nightly_slide\n    day_count = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        day_count += 1\n        distance_climbed += daily_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= nightly_slide\n\n    return day_count\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    return 2 * 2  # Sally dances twice a week, so in 2 weeks she goes dancing 2*2 times.\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time jogged in hours: 7:00am - 6:30am\n    jogging_time_hours = 0.5\n    # Speed while jogging in miles per hour\n    jogging_speed_mph = 6\n\n    # Distance covered while jogging\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Time walked in hours: 8:00am - 7:00am\n    walking_time_hours = 1\n    # Speed while walking in miles per hour\n    walking_speed_mph = 5\n\n    # Distance covered while walking\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance covered by jogging and walking\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had.\n    # He spent $120 on a chair.\n    # Then 40% of the remainder (x - 120) on a jacket.\n    # He had 30% of the original amount left after shopping.\n\n    # This can be represented by the equation:\n    # 0.3 * x = x - 120 - 0.4 * (x - 120)\n\n    # Simplify the equation and solve for x:\n    x = symbols('x')\n    equation = Eq(0.3 * x, x - 120 - 0.4 * (x - 120))\n    original_amount = solve(equation, x)[0]\n\n    return original_amount\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    most_books = (total_books + layers - 1) // layers\n    return most_books\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let original number of books be x\n    x = symbols('x')\n\n    # Equation based on total price before and after\n    # Before: (x * 3.5) is the total price of the books.\n    # After: (x * 3.5 + 2 * 6) is the total price after buying two more books at $6 each.\n    # The new average is $4 and the new total number of books is x + 2.\n    # So, the new total price is (x + 2) * 4.\n    equation = Eq(x * 3.5 + 2 * 6, (x + 2) * 4)\n\n    # Solve for x\n    num_books_original = solve(equation, x)[0]\n\n    # Total books is original number plus 2\n    total_books = num_books_original + 2\n\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):\n        for ten in range(0, 4):\n            for one in range(0, 4):\n                if len(set([hundred, ten, one])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = 0\n    num_terms = 0\n    \n    while term >= 0:\n        term = first_term + num_terms * common_difference\n        if term >= 0:\n            num_terms += 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    # Given sum of a, b, and c\n    total_sum = 31\n\n    # Initialize the maximum product\n    max_product = 0\n\n    # Iterate through all possible combinations of a, b, c such that a + b + c = 31\n    for a in range(1, total_sum - 1):\n        for b in range(1, total_sum - a):\n            c = total_sum - a - b\n            current_product = a * b * c\n            if current_product > max_product:\n                max_product = current_product\n\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for Rachel's and Alice's initial candies\n    rachel, alice = symbols('rachel alice')\n\n    # Create equations based on the problem description\n    eq1 = Eq(rachel - 10, alice + 10)\n    eq2 = Eq((rachel - 8) / (alice - 8), 3)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (rachel, alice))\n\n    # Calculate the total number of candies they originally had combined\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_kg = 1.2\n    weight_g = weight_kg * 1000\n    piece_weight_g = 30\n    num_pieces = weight_g / piece_weight_g\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters = 2.5\n    quart_capacity = 0.5\n    # 1 liter is approximately 1.05669 quarts\n    quarts_in_liters = liters * 1.05669\n\n    number_of_cups = quarts_in_liters / quart_capacity\n\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, 2, 0, C, E, F}) == 6:  # all digits must be distinct\n                        number1 = 500000 + A * 10000 + 2000 + C * 100 + E * 10 + F\n                        number2 = E * 100000 + F * 10000 + A * 1000 + 200 + C * 10\n                        if number1 * 6 == number2 * 5:\n                            return E * 1000 + F * 100 + A * 10 + C\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    jogging_time = 1  # from 6:30 to 7:30\n    walking_time = 2  # from 7:30 to 9:30\n\n    jogging_speed = 6  # miles per hour\n    walking_speed = 5  # miles per hour\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    # Original situation: Angel had 5/6 as many sweet wrappers as Belle.\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After discarding 58 wrappers, Angel had 75% as many as Belle.\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solve the equations for angel and belle\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Equations based on the given information\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))  # Six years ago, dad was 5 times older than son\n    equation2 = Eq(dad_current + son_current, 78)            # Current sum of their ages is 78\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children, y be the amount of money\n    x, y = symbols('x y')\n\n    # The first equation corresponds to the condition with an additional 20p\n    # y + 20p = 70p * x\n    equation1 = Eq(y + 20, 70 * x)\n\n    # The second equation corresponds to the condition with 2.10 pounds left after distributing 60p per child\n    # y - 60p * x = 2.10 pounds\n    equation2 = Eq(y - 60 * x, 210)\n\n    # Solve the simultaneous equations to find the number of children x\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_rate = 0.005\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_rate\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x1 != x2 and x2 != x3 and x1 != x3 and x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment_received = 120.75\n    final_balance = current_balance + payment_received\n    return final_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2nd March 2023', '%dth %B %Y')\n    end_date = datetime.strptime('15th April 2023', '%dth %B %Y')\n    \n    difference = (end_date - start_date).days + 1\n    \n    return difference\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10000):  # Assuming the special number has less than 5 digits\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # Eddie is fixed at the left end, Avril can be on Eddie's right side in one way\n    # The rest 5 students can be arranged in any order, which is a permutation of 5\n    ways_for_rest = math.factorial(5)\n    # Total ways is the product for Avril's place and the permutation of the rest\n    total_ways = 1 * ways_for_rest\n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Given the gloves in the drawer\n    # 1 left-hand blue glove (LB), 2 left-hand green gloves (LG),\n    # 3 right-hand blue gloves (RB), 4 right-hand green gloves (RG)\n\n    # Using the pigeonhole principle, we want to find the worst case scenario\n    # where Dilly picks the maximum number of gloves without getting a matching pair.\n\n    # The worst case without a pair is picking all gloves of one color (both hands), \n    # which would be all 4 green gloves and the maximum of the blue gloves without forming a pair.\n    # Here, we're assuming the worst case is leaving out only one glove that could form a pair.\n\n    max_green_gloves = 2 + 4  # Left-hand green and right-hand green gloves.\n    max_blue_gloves = 1 + 2  # Only two blue gloves are added as taking 3 would form a pair.\n\n    # One more glove to ensure we get a pair (pigeonhole principle)\n    gloves_needed_for_pair = max_green_gloves + max_blue_gloves + 1\n\n    return gloves_needed_for_pair\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers_sum = 9 + 7 + 5 + 4 + 1 + 8 + 8\n    total_numbers = 8\n    mean_value = 6\n    \n    # Total sum of all numbers is mean * number of values\n    total_sum_needed = mean_value * total_numbers\n    \n    # Missing number is the difference between the sum needed and the known sum\n    missing_number = total_sum_needed - known_numbers_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def climb_ways(steps):\n        if steps == 1:\n            return 1\n        elif steps == 2:\n            return 2\n        else:\n            return climb_ways(steps - 1) + climb_ways(steps - 2)\n\n    return climb_ways(4) * climb_ways(5)\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return combinations\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    initial_interval = 3\n    new_interval = 5\n\n    # Calculate the total number of holes with the initial interval\n    total_holes_initial = circumference // initial_interval\n\n    # Calculate the total number of holes needed with the new interval\n    total_holes_new = circumference // new_interval\n\n    # Calculate the number of holes already dug before the new order\n    holes_dug = 30\n\n    # Calculate the number of more holes to dig\n    more_holes_needed = total_holes_new - holes_dug\n\n    return more_holes_needed\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # When Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # When they both eat 8 sweets, Rachel has three times what Alice has\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    i = 1\n    while True:\n        if i % 3 == 1 and i % 4 == 3 and i % 5 == 4:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number we are trying to find\n    number = symbols('number')\n    \n    # Set up the equation that represents the problem\n    equation = Eq((number + 3) / 4, 12)\n    \n    # Solve the equation for the number\n    solution = solve(equation, number)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_used = 792\n    total_pages = 0\n    digits_count = 0\n\n    # Count the number of digits used to print the page numbers\n    for pages in range(1, digits_used + 1):\n        digits_count += len(str(pages))\n        if digits_count > digits_used:\n            break\n        total_pages = pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_current_average = 89\n    billy_target_average = ivan_average + 10\n\n    total_points_ivan = ivan_average * 5\n    total_points_billy_current = billy_current_average * 4\n\n    billy_target_total = billy_target_average * 5\n\n    score_needed = billy_target_total - total_points_billy_current\n\n    return score_needed\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    \n    return int(num_pipes) if total_length % pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "import itertools\n\ndef solution():\n    numbers = [15, 5, 5, 15, -6, 7]  # Since we have to consider subtraction as addition of a negative number\n    operations = ['+', '*', '+', '-', '+']\n    brackets = ['(', ')']\n\n    # Generate all the possible two pairs of bracket combinations\n    bracket_positions = list(itertools.combinations(range(len(numbers)), 4))\n\n    max_value = None\n\n    for positions in bracket_positions:\n        expression = ''\n        for i, num in enumerate(numbers):\n            if i in positions:\n                expression += brackets[positions.index(i)]\n            expression += str(num)\n            if i < len(operations):\n                expression += operations[i]\n        if positions[-1] != len(numbers):  # Adding the closing bracket if necessary\n            expression += brackets[1]\n\n        try:\n            value = eval(expression)\n            if max_value is None or value > max_value:\n                max_value = value\n                max_expression = expression\n        except SyntaxError:\n            pass\n\n    return max_value\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import divisors, isqrt\n\n    # Obtain divisors of 1260\n    divs = divisors(1260)\n    \n    # Find m such that 1260 * m is a perfect square\n    for d in divs:\n        # Test if 1260 / d is a perfect square\n        if (1260 // d) == isqrt(1260 // d)**2:\n            return d\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given the sequence terms 39 (7th term), 44 (8th term), 49 (9th term)\n    # calculate the common difference of the sequence\n    common_difference = 44 - 39\n\n    # We can derive the first term by subtracting (n-1)*common_difference from the n-th term of sequence\n    first_term = 39 - (7 - 1) * common_difference\n\n    # find the 100th term using the formula a + (n-1)*d\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "from sympy import lcm, symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    # Calculate the least common multiple of 8 and 11\n    lcm_8_11 = lcm(8, 11)\n    \n    # Set up the equation for the two-digit number with the remainder 6\n    equation = Eq(x % lcm_8_11, 6)\n    \n    # Find all solutions in the range of two-digit numbers (10 to 99)\n    solutions = [s for s in solve(equation, x) if 10 <= s < 100]\n    \n    # Return the found two-digit number\n    return solutions[0]\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Since the sum has to be 1000 and we are dealing with two whole numbers,\n    # for each whole number x, there is a unique whole number (1000 - x) that can be added to x to get 1000.\n    # Assuming the whole numbers are positive, the pairs will be (1, 999), (2, 998), ..., (999, 1).\n    # So, there are 999 ways to add two positive whole numbers to get a sum of 1000.\n    \n    # But the question does not specify that the whole numbers must be positive,\n    # so we must also consider zero and negative whole numbers.\n    # The pair (0, 1000) and (1000, 0) also satisfy the condition\n    # Negative whole numbers and positive whole numbers also form valid pairs.\n    # For each positive whole number x, there is a negative whole number (-x) such that x + (-x) = 0.\n    # So we can add 1000 to this sum, leading to an extra set of 1000 pairs: (1, 999), (2, 998), ..., (1000, 0)\n    # Also include the pair (0, 1000) which was not included in the negative pairs.\n    \n    # Thus, there are 2 * 999 + 1 ways in total.\n    ans = 2 * 999 + 1\n    return ans\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Since we're interested in the ones digit, we use modulo 10\n    # We notice that the ones digit in the powers of 9 repeat in a cycle (1, 9, 1, 9, ...)\n    # Since 999 is congruent to 9 modulo 10, the ones digit in the powers of 999 will behave the same \n    # 99 is an odd number, so the ones digit of 999^99 is the same as the ones digit in 9^1\n    ones_digit = 9\n\n    return ones_digit\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    modulo_4 = 3\n    modulo_7 = 3\n    modulo_28 = 28\n\n    # Since when arranged in piles of 4 and 7, 3 cards are left,\n    # we are looking for a number that when divided by 4 leaves a remainder of 3\n    # and when divided by 7 also leaves a remainder of 3.\n    # This number when divided by 28 (LCM of 4 and 7) will tell us the remainder.\n\n    # We start the search from the first number that leaves remainder 3 when divided by 4\n    # and keep incrementing by 4 (since must be in the form 4n + 3)\n    for n in range(modulo_4, modulo_28 * 2, 4):  # The upper bound is arbitrary.\n        if n % 7 == modulo_7:\n            # Once we find \"n\" that also leaves 3 when divided by 7, we can break the loop.\n            break\n\n    # Since the number n we found gives a remainder of 3 for both 4 and 7,\n    # when arranging in piles of 28, the remainder will be the same.\n    return n % modulo_28\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spend = table_price + chair_price\n    return total_spend\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_stickers = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_stickers\n    \n    return remaining_stickers\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    \n    # Reversing step (5): Add 50 to the result\n    step4_result = result + 50\n    \n    # Reversing step (4): Subtract the day value, the value will be in the form day+(month*4*50+50),\n    # which means the only the last two digits can form the day. So we take modulo 100 to find the day.\n    month_times_200_plus_50 = step4_result // 100\n    day = step4_result % 100\n    \n    # Reversing step (3): Divide by 50 the intermediate result\n    step2_result = month_times_200_plus_50 // 50\n    \n    # Reversing step (2): Subtract 1 from the result\n    step1_result = step2_result - 1\n    \n    # Reversing step (1): Divide by 4 to get the month\n    month = step1_result // 4\n    \n    # Now month and day should hold the original birthday\n    return (month, day)\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    # Calculate 2^2015 mod 3 using modular exponentiation\n    ans = pow(2, 2015, 3)\n    return ans\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    # Let x be the total value of the five other ponies\n    # Initial average value of ponies in small stable (with Rein Beau): (250000 + x / 5) / 3\n    # Initial average value of ponies in large stable (without Rein Beau): (x / 5) / 3\n    # New average value in small stable (without Rein Beau): ((x / 5) - 250000) / 2\n    # New average value in large stable (with Rein Beau): (x / 5 + 250000) / 4\n    \n    # According to the problem, both averages increase by £10 000\n    # Therefore we have two equations:\n    # ((x / 5) - 250000) / 2 = ((x / 5) / 3) + 10000\n    # (x / 5 + 250000) / 4 = ((250000 + x / 5) / 3) + 10000\n    \n    # Solve for x in the system of equations\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    equation1 = Eq((((x / 5) - 250000) / 2), (((x / 5) / 3) + 10000))\n    equation2 = Eq((((x / 5) + 250000) / 4), (((250000 + x / 5) / 3) + 10000))\n    \n    solution_x = solve((equation1, equation2), (x))\n    \n    # The total value of all six ponies is the value of Rein Beau (£250,000) plus the value of the other five (x)\n    total_value = 250000 + solution_x[x]\n    return total_value\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 8\n    group_of_four = 4\n    other_pupils = total_pupils - group_of_four\n\n    # Treat the group of four who insist on standing together as one unit.\n    # Thus, we have (other_pupils + 1) units to arrange.\n    units_to_arrange = other_pupils + 1\n\n    # Calculate the arrangements of these units.\n    arrangements_of_units = factorial(units_to_arrange)\n\n    # Now, consider the internal arrangements within the group of four.\n    internal_arrangements = factorial(group_of_four)\n\n    # The total arrangements are the product of the arrangements of the units\n    # and the internal arrangements of the group of four.\n    total_arrangements = arrangements_of_units * internal_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar_ounces = 7\n    water_ounces = 21\n    total_ounces = sugar_ounces + water_ounces\n    percent_concentration = (sugar_ounces / total_ounces) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let x be the number of gold medals, and y be the number of silver medals\n    for x in range(80 + 1):  # x can be from 0 to 80\n        y = 80 - x  # Total number of medals is 80\n        if 5 * x + 4 * y == 331:  # Check if the points match\n            return x  # Return the number of gold medals\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    lamb_weight_kg = 7\n    beef_weight_kg = 30\n    \n    total_cost = lamb_price_per_kg * lamb_weight_kg + beef_price_per_kg * beef_weight_kg\n    \n    return total_cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    total_sum = 60\n    # Since the numbers are consecutive, let the first number be n,\n    # then the second number is n + 1, and the third number is n + 2.\n    # Their sum is 3n + 3, so we have the equation 3n + 3 = 60.\n    # Solving for n gives us the first number, and we want the largest,\n    # which is the third number, so we add 2 to n.\n\n    # Subtract 3 from both sides of the equation to isolate the term 3n\n    n = (total_sum - 3) / 3\n    # The largest number is the third one which is n + 2\n    largest_number = n + 2\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    import math\n    students = 40\n    boat_capacity = 7\n    boats_needed = math.ceil(students / boat_capacity)\n    return boats_needed\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for the rates of work\n    master_rate, apprentice_rate = symbols('master_rate apprentice_rate')\n\n    # The equations based on the two scenarios given:\n    # 1 master and 3 apprentices working together for 4 days\n    equation1 = Eq(1 * master_rate + 3 * apprentice_rate, 1/4)\n    # 2 masters and 1 apprentice working together for 3 days\n    equation2 = Eq(2 * master_rate + 1 * apprentice_rate, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (master_rate, apprentice_rate))\n\n    # Calculate the time it takes for 1 apprentice to complete the task alone\n    time_apprentice_alone = 1 / solutions[apprentice_rate]\n\n    return time_apprentice_alone\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    fraction_men = 5/8\n    fraction_children = 1/3\n    # Let total_spectators be x\n    # x - (1/3)x = number of adults\n    # (5/8) * (number of adults) = number of men\n    # (number of adults) - (number of men) = number of women\n    # So, we solve for x:\n    # (1 - (1/3))x - (5/8)(1 - (1/3))x = 80\n    # (2/3)x - (5/8)(2/3)x = 80\n    # (2/3 - 5/24)x = 80\n    # ((16 - 5)/24)x = 80\n    # (11/24)x = 80\n    # x = 80 * (24/11)\n    total_spectators = 80 * (24/11)\n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def new_operation(a, b):\n        if a > b:\n            return a + b\n        else:\n            return a * b\n    \n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # If the rabbit is the 9th from right, it is the (rabbit's position from right + number of dolls between them + elephant's position from left) from left\n    total_dolls = 9 + 5 + 10\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * ((11/52) / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))  # prime range up to 60, exclusive\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    first_term = tenth_term - (10 - 1) * common_difference\n    required_term = first_term + (102 - 1) * common_difference\n\n    return required_term\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of roses, and d the number of daisies originally in the park.\n    # Let m be the number of months passed, and k the number of roses and daisies planted each month.\n    r, d, m, k = symbols('r d m k')\n\n    equation1 = Eq(r + d, 300)  # Original total count of roses and daisies.\n    equation2 = Eq(r + m*k, 280)  # Number of roses after m months.\n    equation3 = Eq(d + m*k, 180)  # Number of daisies after m months.\n    equation4 = Eq(r - d, 280 - 180)  # Difference between roses and daisies after m months.\n\n    # We can solve the system of equations for r, which is what we're looking for.\n    solutions = solve((equation1, equation2, equation3, equation4), (r, d, m, k))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_plus_comics = total_books - english_books\n\n    comics = chinese_plus_comics / 3\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Initial assumption\n    boys_over_girls = 32\n    total_students = 0\n\n    # As it is a square array, start with sidelength = 1 (which will give just a single boy)\n    side_length = 1\n\n    while True:\n        # Boys are on the outer layer and for each side of the square, there are side_length boys\n        # Considering all four sides, we have 4 * side_length boys\n        # However, each corner is counted twice, thus we subtract 4 to account for the corners\n        boys = 4 * side_length - 4\n\n        # Girls fill the next inner layer which is (side_length - 2) for each side\n        # If side_length is less than 3, there are no girls\n        girls = max(4 * (side_length - 2) - 4, 0)\n\n        # Calculate the difference between boys and girls for this iteration\n        difference = boys - girls\n\n        # If the difference matches the one we're looking for, break the loop\n        if difference == boys_over_girls:\n            total_students = side_length**2\n            break\n        \n        # If the difference exceeds the one we're looking for, it's impossible as we only increase the difference\n        if difference > boys_over_girls:\n            break\n        \n        # Increase the side_length to look at a larger square for the next iteration\n        side_length += 2\n\n    return total_students\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = coffee_litres / coffee_ratio * total_ratio\n    \n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_scores = 5\n    accurate_shots = 6\n    missed_shots = 4\n    total_shots = accurate_shots + missed_shots\n\n    total_scores = accurate_scores * accurate_shots\n    average_score = total_scores / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Total apples and children\n    total_apples = 50\n    total_children = 8\n    \n    # Sort children in ascending order based on the number of apples they can get\n    # Each child gets at least one apple, starting from 1 apple to the first child\n    apples = list(range(1, total_children))\n    \n    # Remaining apples after giving each child one apple\n    remaining_apples = total_apples - sum(apples)\n\n    # Find the least number of apples the child with the most apples can get\n    # by giving the remaining apples to the last child (who gets the most).\n    least_apples_max_child = remaining_apples + total_children\n\n    return least_apples_max_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = 2/25\n    # Calculate the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = 8/3\n    # Calculate the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Add the two complex fractions\n    ans = complex_fraction1 + complex_fraction2\n\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # 3 apples and 5 oranges have a mass of 270g\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n\n    # 3 apples and 7 oranges have a mass of 342g\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    # Start by creating a loop for each possible first number in the sum\n    for x1 in range(1, 8):\n        # Then for the second number, ensuring it does not exceed the total sum of 8\n        for x2 in range(1, 8 - x1 + 1):\n            # Check if we are at the last number or need to continue to another number in the sum\n            if x1 + x2 == 8:\n                count += 1\n            else:\n                # If we have more numbers to add to the sum, continue the pattern\n                for x3 in range(1, 8 - (x1 + x2) + 1):\n                    # Check if we are at the last number or need to continue to another number in the sum\n                    if x1 + x2 + x3 == 8:\n                        count += 1\n                    else:\n                        # Continue with as many loops as needed until we fulfil the sum 8\n                        for x4 in range(1, 8 - (x1 + x2 + x3) + 1):\n                            # ... (potentially more loops if more numbers are needed)\n                            # Final check for the sum to be 8\n                            if x1 + x2 + x3 + x4 == 8:\n                                # Increase the count if a valid combination is found\n                                count += 1\n    \n    # Return the final count\n    return count\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    result = 0.50 * 0.20 * 350\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marbles\n    blue = symbols('blue')\n\n    # Relationship between the number of marbles\n    red = blue + 25\n    green = red + 32\n\n    # Total number of marbles\n    total_marbles = blue + red + green\n\n    # Equation representing the total number of marbles\n    equation = Eq(total_marbles, 112)\n\n    # Solve for the number of blue marbles\n    solutions = solve(equation, blue)\n\n    # Extract the solution for the number of blue marbles\n    blue_marbles = solutions[0]\n\n    return blue_marbles\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The greatest number of men that do not wear bow ties and are not wearing spectacles\n    # would be the total men minus the maximum number that could be wearing either or both.\n    max_either_or_both = min(bow_ties + spectacles, total_men)\n\n    not_wearing_either = total_men - max_either_or_both\n\n    return not_wearing_either\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1 / 3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # The problem can be solved by determining the combinations of apples\n    # that can be given to each child such that each child gets a unique number of apples.\n    # We start with the maximum possible number of apples one child can get and reduce it\n    # until all apples can be distributed while fulfilling the criteria.\n\n    # As there are 5 children and everyone needs at least one apple,\n    # we start by giving each child one apple.\n    total_apples = 19\n    apples_assigned = 5  # One apple for each child\n    remaining_apples = total_apples - apples_assigned # Remaining apples to distribute\n\n    # Now we calculate the maximum number of apples one child can get.\n    # We can start by giving the maximum number possible and go down\n    # until we find a distribution that meets the conditions.\n    max_apples = remaining_apples\n    while max_apples > 0:\n        apples_distribution = [1, 2, 3, 4, max_apples]\n        if sum(apples_distribution) == total_apples and len(set(apples_distribution)) == len(apples_distribution):\n            return max_apples\n        max_apples -= 1\n    # Return None if no solution is found though we're guaranteed to find one.\n    return None\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n    \n    # Dan must stand at the furthest left, so he is fixed.\n    # Consider Ali and Bala as one unit since they must stand together.\n    # There are 3! ways to arrange Dan, the (Ali_Bala) unit, Charles, and Ella.\n    \n    arrangements_ali_bala = factorial(3)\n    \n    # Ali and Bala themselves can be arranged in 2! ways.\n    arrangements_within_ali_bala = factorial(2)\n    \n    # Multiply the two to get the total arrangements.\n    total_arrangements = arrangements_ali_bala * arrangements_within_ali_bala\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Ratio of fish to rabbits based on Owen's trade with Oscar\n    fish_to_rabbits = 3 / 2\n    # Ratio of rabbits to packs of wheat based on Oscar's trade with Dennis\n    rabbits_to_wheat = 3 / 4\n    \n    # Overall ratio of fish to packs of wheat combining the two trades (fish -> rabbits -> wheat)\n    # Calculate the ratio of fish to one pack of wheat first.\n    fish_to_one_pack_wheat = fish_to_rabbits * rabbits_to_wheat\n    \n    # Calculate how many fishes Owen should give for 8 packs of wheat\n    # Multiply the ratio of fish to one pack of wheat by the number of packs(8)\n    fishes_for_eight_packs = fish_to_one_pack_wheat * 8\n    \n    return fishes_for_eight_packs\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    count = 0\n    for i in range(1, 140 + 1):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for ten_1 in range(1, 10):\n        for one_1 in range(10):\n            for ten_2 in range(1, 10):\n                for one_2 in range(10):\n                    num1 = ten_1 * 10 + one_1\n                    num2 = ten_2 * 10 + one_2\n                    num2_mistake = (ten_2 + 2) * 10 + (one_2 - 1)\n                    if num1 - num2_mistake == 36:\n                        return num1 - num2\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    numbers = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_woods = 6.5\n\n    remaining_length = total_length - (used_fence + used_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # We need to consider the worst case scenario using the Pigeonhole Principle\n    # Worst case: drawing all balls of the most abundant color (red) first, then the next most abundant (white),\n    # and then any ball after will be guaranteed to be of the third color (yellow).\n    \n    # Number of red balls is 15, number of white balls is 9\n    # We draw all red and all white balls first\n    worst_case_draws = 15 + 9\n    \n    # Then we draw one more ball to ensure we have the third color, yellow\n    # So we need to draw at least one yellow ball\n    worst_case_draws += 1\n    \n    return worst_case_draws\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    three_digit_numbers = set(permutations(digits, 3))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq((ellen - 12), (13 / 24) * (ellen + lenny))\n    equation2 = Eq((lenny - 12), (3 / 8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    total_sweets = solutions[ellen] + solutions[lenny]\n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for T\n    T = symbols('T')\n\n    # The tax for the first $50000\n    tax_first_part = 0.06 * 50000\n\n    # The tax for the remaining income (120000 - 50000)\n    tax_remaining_income = (0.06 + T) * (120000 - 50000)\n\n    # Equation based on the total tax\n    equation = Eq(tax_first_part + tax_remaining_income, 10000)\n\n    # Solve for T\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # To minimize the difference, we want smallest number to start with smallest digits,\n    # and largest number to start with largest digits\n    smallest_number = int('01234')\n    largest_number = int('98765')\n    \n    # Difference between the two\n    difference = largest_number - smallest_number\n    \n    return difference\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    tunnel_length = 500  # length of the tunnel in meters\n    speed = 10           # speed of the train in m/s\n\n    # The entire train is in the tunnel when both, the front and the end of the train, are inside the tunnel\n    # Total distance covered by the train to get completely inside the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Duration is the total distance divided by the speed\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz, jessie + 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    money_paid = 100  # In pence, since 1 pound is 100 pence\n\n    change = money_paid - total_cost\n\n    return change\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "def solution():\n    from math import factorial as f\n\n    # Total presents\n    total_presents = 7\n    # Total children\n    total_children = 5\n\n    # Calculate combinations\n    def comb(n, r):\n        return f(n) // (f(r) * f(n-r))\n\n    # Calculate permutations\n    def perm(n, r):\n        return f(n) // f(n-r)\n\n    # Case 1: Richard gets the toy car, Kevin gets the puzzle\n    case_1 = perm(total_presents - 2, total_children - 2)\n\n    # Case 2: Richard gets the puzzle, Kevin gets the toy car\n    case_2 = perm(total_presents - 2, total_children - 2)\n\n    # Case 3: Richard gets the toy car, Kevin gets the calculator\n    case_3 = perm(total_presents - 2, total_children - 2)\n\n    # Case 4: Richard gets the calculator, Kevin gets the toy car\n    case_4 = perm(total_presents - 2, total_children - 2)\n\n    # All possible distributions adding each case\n    ans = case_1 + case_2 + case_3 + case_4\n\n    return ans\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r1, r2, r3 = symbols('r1 r2 r3')  \n\n    equation1 = Eq(r2, r1 + 2)  \n    equation2 = Eq(r3, r2 - 0.80)  \n    equation3 = Eq(r1 + r2 + r3, 19.70)  \n\n    solutions = solve((equation1, equation2, equation3), (r1, r2, r3))\n\n    return solutions[r1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_mass = 200\n    sugar_concentration = 0.15\n\n    sugar_mass = total_mass * sugar_concentration\n\n    return sugar_mass\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15\n    speed_rose = 10\n    time_to_meet = 10\n\n    distance_between_towns = (speed_jack - speed_rose) * time_to_meet\n\n    return distance_between_towns\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([(2 * i + 2)**2 - (2 * i)**2 for i in range(1, 1010)])\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 35 / 100, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_13 = 5000 // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        return 0\n    else:\n        return 3 - remainder\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    total_girls = 333\n    total_teachers = 36\n\n    total_boys = total_pupils - total_girls\n    more_boys_than_teachers = total_boys - total_teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')\n\n    # David's work rate per day\n    david_rate = 1 / 10\n    # Emma's work rate per day\n    emma_rate = 1 / 18\n\n    # Equation representing total work done\n    equation = Eq(david_rate * (14 - emma_days) + emma_rate * emma_days, 1)\n\n    # Solve for the number of days Emma worked\n    emma_days_solution = solve(equation, emma_days)\n\n    return emma_days_solution[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    remaining_money = 56\n    remaining_shirts = 145 - 138\n    price_per_shirt = remaining_money / remaining_shirts\n    total_money = 145 * price_per_shirt\n    return total_money\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_perms = factorial(7) // (factorial(3) * factorial(2))  # Total permutations of 'SUCCESS'\n    \n    # Total permutations where S's are together. 'SS' is treated as one letter for the pairings\n    # Then, we calculate as if there are 5 \"letters\": SS, U, C, C, E with SS, C, C being indistinguishable\n    ss_together_perms = factorial(5) // (factorial(2) * factorial(2))\n    \n    # Multiplied by the permutations of the two S's within 'SS' which is simply 2!\n    ss_together_perms *= factorial(2)\n    \n    # Subtract the invalid permutations where SS's are together from the total\n    return total_perms - ss_together_perms\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    difference = 132 - 124\n    # In the worst case, each student could be of a distinct height before we have to repeat a height\n    # This would give us difference + 1 distinct heights\n    # We need at least 4 students of the same height, so:\n    class_size = difference + 1 + (4 - 1)\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    percentage_increase = 12\n\n    new_pay = original_pay * (1 + percentage_increase / 100)\n\n    return new_pay\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    avg = 119\n    total_numbers = 14\n    total_sum = avg * total_numbers # Calculate the sum of all the numbers\n    # The numbers are consecutive even numbers, so their common difference is 2.\n    # If the smallest number is x, the largest number will be x + 2*(total_numbers-1)\n    # and the sum of the numbers will be (smallest + largest)/2 * total_numbers.\n\n    # Based on the average given, we can derive the smallest number (x) as follows:\n    # total_sum = (x + (x + 2*(total_numbers-1)))/2 * total_numbers\n    # total_sum = (2*x + 2*(total_numbers-1)) * total_numbers/2\n    # total_sum = x*total_numbers + (total_numbers-1)*total_numbers\n    # x * total_numbers = total_sum - (total_numbers-1)*total_numbers\n    # x = (total_sum - (total_numbers-1)*total_numbers) / total_numbers\n\n    smallest_number = (total_sum - (total_numbers - 1) * total_numbers) // total_numbers\n    return smallest_number\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Time taken to cut 1 piece of wood into 5 sections:\n    time_for_5_cuts = 12\n    \n    # Number of cuts needed to cut the wood into 5 sections:\n    cuts_needed_for_5_sections = 4  # (since first cut leaves us with 2 pieces, and so forth)\n    \n    # If Rachel cuts the wood 5 times, irrespective of the number of sections\n    number_of_cuts = 5\n    \n    # Scale the time based on the number of cuts proportionally\n    time_for_5_cuts_only = (time_for_5_cuts / cuts_needed_for_5_sections) * number_of_cuts\n    \n    return time_for_5_cuts_only\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let the number of each coin be x\n    # We have 2p and 5p coins. 2x + 5x = total pence in the bag\n    # Since the total is £1.26, we convert it to pence: £1.26 = 126p\n    # The equation is 2x + 5x = 126, which simplifies to 7x = 126\n    # Solving for x we get x = 126 / 7\n    x = 126 // 7\n    \n    # The total number of coins is 3 times x (since there are 3 equal groups of coins)\n    total_coins = 3 * x\n    \n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of a number repeats in a cycle for powers of 3\n    ones_cycle = [3**i % 10 for i in range(1, 4+1)]\n\n    # 2009 modulo 4 to find the position in the cycle since length of cycle is 4\n    cycle_index = 2009 % 4\n\n    # If cycle_index is 0, we need the last digit in the cycle\n    ones_digit = ones_cycle[cycle_index - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5 / 9\n    adults_fraction = 2 / 5\n\n    # Since the girls are the remaining people after adults and boys\n    # we can calculate the fraction of the party that are girls\n    girls_fraction = 1 - adults_fraction - (boys_fraction * (1 - adults_fraction))\n\n    # The number of people at the party is the number of girls divided by the fraction of the party they represent\n    total_people = girls / girls_fraction\n\n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    i = 1\n    while True:\n        num = i ** 2\n        if num % 2 == 0 and num % 5 == 0:\n            return num\n        i += 1\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    # Calculate the full cost of an adult ticket with the given information\n    child_discount = 0.25   # 25% discount for children\n    child_ticket_cost = 30\n\n    # Finding the base price for an adult ticket before the discount is applied\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n\n    # Calculate the cost for senior citizens with a 20% discount\n    senior_discount = 0.20  # 20% discount for senior citizens\n    \n    # Finding the price for senior citizens with the obtained base price\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    # Using stars and bars theorem.\n    # Number of ways to distribute n identical items to r groups is (n + r - 1) choose (r - 1).\n    # Here n = 20 books, r = 4 kids.\n    from math import comb\n    return comb(20 + 4 - 1, 4 - 1)\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_original = 3\n    days_original = 30\n    men_new = 2\n\n    work_per_man_original = days_original / men_original\n    days_new = work_per_man_original * men_new\n\n    return days_new\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    number = 10\n    while True:\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Will's current age\n    will_age = symbols('will_age')\n\n    # Equation: Will's age in 8 years is 4 times his age 4 years ago\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    # Solve the equation to find Will's current age\n    solution = solve(equation, will_age)\n\n    # Return the solution, which indicates Will's current age\n    return solution[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_to_finish = total_pages / pages_per_day\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child must get at least 2 books, so we allocate 2 books to each child to start\n    allocated_books = 5 * 2\n    \n    # Remaining books to distribute\n    remaining_books = 30 - allocated_books\n    \n    # This problem is equivalent to finding the number of integer solutions to the equation\n    # x1 + x2 + x3 + x4 + x5 = remaining_books, where each xi can be 0 or a positive integer\n    # Apply the \"stars and bars\" combinatorial method: (n+k-1) choose (k-1),\n    # where n is the number of remaining books and k is the number of kids.\n    # We subtract 1 from both n and k because each child already has 2 books and cannot receive 0 more books.\n    \n    num_ways = comb(remaining_books + 5 - 1 - 1, 5 - 1 - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, chewy * 2/3)\n    equation2 = Eq(chewy, mike * 40/100)\n    equation3 = Eq(mason, mike - 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_milliliters = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_liters = total_soup_milliliters / 1000\n\n    return total_soup_liters\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_deposit = 1000\n    interest_rate = 0.06\n    number_of_years = 2\n\n    balance = initial_deposit * ((1 + interest_rate) ** number_of_years)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    one_direction = 20\n    the_vamps = 17\n    both = 15\n\n    neither = total_girls - (one_direction + the_vamps - both)\n\n    return neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    number_of_intervals = road_length // interval\n    number_of_trees = number_of_intervals + 1  # Add one for the tree at the beginning\n\n    return number_of_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    # Equation 1: Cost of 4 jugs and 5 cups\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    \n    # Equation 2: Cost of 2 jugs and 2 cups\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    # Cost of one cup\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    denominations = [1, 2, 5, 10, 20, 50]\n    fare = 44\n    minimum_coins = float('inf')\n\n    # We assume Susan uses the largest coin possible to pay given the fare\n    for coin in reversed(denominations):\n        if coin > fare:\n            continue  # Cannot use this coin if it's larger than the fare itself\n        Susan_pays = coin\n        change = Susan_pays - fare\n        coins_change_hands = 1  # Susan's coin\n        for change_coin in reversed(denominations):\n            if change_coin <= change:\n                num_coins = change // change_coin\n                coins_change_hands += num_coins\n                change -= num_coins * change_coin\n            if change == 0:\n                break\n        minimum_coins = min(coins_change_hands, minimum_coins)\n\n    return minimum_coins\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    # Define the fractions\n    fractions = [Fraction(1, 2), Fraction(1, 3), Fraction(1, 4), Fraction(1, 5)]\n    operations = ['+', '-', '*', '/']\n    \n    # All possible permutations of operations\n    operations_permutations = list(permutations(operations))\n    \n    max_sum_result = 0\n    second_largest_term = None\n\n    # Go over every operations permutation\n    for ops in operations_permutations:\n        exp1 = eval(f\"fractions[0] {ops[0]} Fraction(1,9)\")\n        exp2 = eval(f\"fractions[1] {ops[1]} Fraction(1,8)\")\n        exp3 = eval(f\"fractions[2] {ops[2]} Fraction(1,7)\")\n        exp4 = eval(f\"fractions[3] {ops[3]} Fraction(1,6)\")\n        \n        # Sum of all expressions\n        current_sum = exp1 + exp2 + exp3 + exp4\n        \n        # Sort the terms to find the second largest\n        terms = [exp1, exp2, exp3, exp4]\n        terms.sort()\n        \n        # Check if the sum is greater than current maximum and update accordingly\n        if current_sum > max_sum_result:\n            max_sum_result = current_sum\n            second_largest_term = terms[-2] # The second largest term\n\n    # The second largest term as a simplified fraction (A/B)\n    A = second_largest_term.numerator\n    B = second_largest_term.denominator\n    \n    return A + B\n    \nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, S\n\n    x = symbols('x')\n    inequality = ((x+3)/(2*x+5)) > S('0.505')\n\n    result_range = solve(inequality, x)\n    \n    # Find the largest integer less than the upper bound\n    ans = int(result_range.rhs) - 1\n\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = 0\n    for i in range(1, 89, 2):\n        ans += (i+1) - i\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points on the circle.\n    # In a circle with points where all points are separated by an equal distance,\n    # a right triangle will be formed when we select a point and take the two other points\n    # that are 3 and 4 steps away from it (forming a 3-4-5 Pythagorean triple).\n    total_points = 12\n\n    # For each point, there is exactly one way to make a triangle with a right angle\n    # because the circle is symmetric: moving 3 steps for one point and 4 for the other.\n\n    # As we have 12 starting points and each can form a unique right triangle,\n    # the total number of right angled triangles is the same as the number of points.\n\n    ans = total_points\n    return ans\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    twelfth_number = tenth_number + 2 * common_difference\n    return twelfth_number\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def nth_term(n):\n        if n == 1:\n            return 0\n        else:\n            return n - 1\n\n    ans = sum(n / (nth_term(n) * (nth_term(n) + n)) for n in range(1, 8))\n    ans += 1 / 29  # the last term in the sequence\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    a_students = 24\n    b_students = 36\n    c_students = 42\n\n    common_gcd = gcd(gcd(a_students, b_students), c_students)\n\n    return common_gcd\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4*i for i in range(1,51)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_lunch_cost * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3  # Points lost for a wrong answer\n    total_points = 76\n\n    # Let x be the number of correct answers, then (total_questions - x) is the number of incorrect answers.\n    # Form the equation based on the points system.\n    # points_correct * x + points_incorrect * (total_questions - x) = total_points\n    for x in range(total_questions + 1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    ans = (3 / 8) * 16\n    return ans\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n\n    marked_price = cost_price * 1.2\n    selling_price = marked_price * 0.9\n    profit = selling_price - cost_price\n\n    profit_eq = Eq(profit, 120)\n\n    solutions = solve((profit_eq), (cost_price))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = total_sheep * 5 // 8\n    white_sheep = total_sheep * 1 // 4\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return brown_sheep\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    num_people = 38\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(equation, x)\n\n    return [sol.evalf() for sol in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    ways_for_different_socks = factorial(4)  # 4!\n    \n    # For two pairs of different colored socks\n    ways_for_pairs_of_socks = factorial(4) // (factorial(2) ** 2)  # 4! / (2! * 2!)\n    \n    return (ways_for_different_socks, ways_for_pairs_of_socks)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    first_number = 13.8\n    second_number = 18.6\n    ans = (first_number + second_number) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because it's the leading digit \n        for b in range(0, 10):  # b can be 0-9\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    n = 4  # number of people\n    ans = n * (n - 1) // 2  # total handshakes when each person shakes hands with every other person exactly once\n    return ans\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n\n    num_triangles = comb(num_points, num_vertices)\n\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Andre and Beth's original amount of sweets\n    andre, beth = symbols('andre beth')\n    \n    # Equation representing total sweets before receiving more\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation representing the difference after each receives 4 more sweets\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # Beth's amount after receiving 4 additional sweets\n    beth_sweets_after = solutions[beth] + 4\n    \n    return beth_sweets_after\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To win the game Anthea needs to leave Ben with a multiple of 4 after her move.\n    # This forces Ben to leave Anthea with a non-multiple of 4 after his move.\n    # Anthea can then always take a number of apples to leave Ben again with a multiple of 4.\n    # The final move will leave Ben with 4 apples, regardless of whether he takes 1, 2, or 3,\n    # Anthea can win by taking the remainder.\n\n    total_apples = 18\n    # Anthea takes at start\n    anthea_start = 0\n\n    for take in range(1, 4):  # Anthea can take 1, 2 or 3 apples.\n        if (total_apples - take) % 4 == 0:\n            anthea_start = take\n            break\n\n    return anthea_start\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a chair\n    x = symbols('x')\n    # The mass of a table is 2kg heavier than a chair, so it is x+2\n    # 3 tables have the same mass as 4 chairs\n    equation = Eq(3*(x+2), 4*x)\n\n    # Solving the equation for x to find the mass of a chair\n    mass_of_chair = solve(equation, x)[0]\n    # Adding 2kg to the mass of a chair gives us the mass of a table\n    mass_of_table = mass_of_chair + 2\n\n    return mass_of_table\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial as fact\n\n    # Judy can be on either end of the line, so there are 2 choices for her position.\n    judy_positions = 2\n\n    # The remaining 5 friends can stand in any order, which is a permutation of 5.\n    friends_permutations = fact(5)\n\n    # Use the multiplication principle to find the total arrangements.\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Original number of sweets (before teacher gave more)\n    equation1 = Eq(andre + beth, 24)\n    # Number of sweets after teacher gave 4 more each, with difference\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth] + 4  # Beth's current number of sweets after receiving 4 more\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return round(cost_for_5_bars, 2)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    return 2 + 5\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Let's denote x as the number we are trying to find.\n    \n    # According to the question:\n    # (x - 6) / 12 = 2\n    # To reverse the operation, we first counteract the division by multiplying by 12.\n    # Then, we need to reverse the subtraction of 6 by adding 6.\n\n    answer_after_operations = 2\n    \n    # Multiply by 12\n    number_after_subtraction = answer_after_operations * 12\n    \n    # Add 6\n    original_number = number_after_subtraction + 6\n    \n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The initial sum of the four numbers\n    sum_of_four = 130 * 4\n    \n    # The sum of the remaining three numbers after one is removed\n    sum_of_three = 110 * 3\n    \n    # The number that was removed is the difference between the sum of four and the sum of three\n    removed_number = sum_of_four - sum_of_three\n    \n    return removed_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for time spent on homework\n    elder_math, elder_english, younger_math, younger_english = symbols('elder_math elder_english younger_math younger_english')\n\n    # Set up equations based on the problem description\n    equation1 = Eq(elder_math, younger_math + 10)  # Elder sister spent 10 minutes more on maths\n    equation2 = Eq(younger_english, younger_math + 4)  # Younger sister spent 4 minutes more on English\n    equation3 = Eq(elder_math + elder_english, 88)  # Elder sister spent a total of 88 minutes\n    equation4 = Eq(younger_math, younger_english - 12)  # Younger sister spent 12 minutes less on her maths\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_math, elder_english, younger_math, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n    \n    # Convert the times to seconds\n    first_traffic_light_period = 1 * 60  # every 1 minute\n    second_traffic_light_period = 1.5 * 60  # every 1.5 minutes\n    third_traffic_light_minimum = 30  # at least 30 seconds\n    \n    # Find LCM of first two traffic lights periods\n    lcm_first_second = lcm(first_traffic_light_period, second_traffic_light_period)\n    \n    # Since all three are supposed to turn green every 9 minutes (540 seconds)\n    target_time = 9 * 60\n    \n    # Find the smallest multiple of lcm_first_second that is just greater or equal to target_time\n    # This will be the answer for the third traffic light if it is at least 30 seconds\n    multiple = lcm_first_second\n    while multiple < target_time:\n        multiple += lcm_first_second\n    \n    # If the calculated period is less than third_traffic_light_minimum, we set it to the minimum\n    third_traffic_light_period = max(multiple, third_traffic_light_minimum)\n    \n    # Convert seconds back to minutes for the time the third traffic light changes lights\n    return third_traffic_light_period / 60\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # In this game, the player who starts wants to leave a number of apples\n    # that is a multiple of 3 for the other player to ensure a win.\n    # Therefore, Leo should take away apples such that (14 - apples_taken) % 3 == 0.\n\n    # Leo can pick 1 or 2 apples on the first turn. Therefore, we try both and check for the condition.\n    for apples_taken in range(1, 3):\n        if (14 - apples_taken) % 3 == 0:\n            return apples_taken\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon and y be the value of one gold ring\n    # Nick's 12 silver spoons have three quarters the value of Pilpha's 6 gold rings\n    # 12x = (3/4) * 6y\n    # Simplify the equation: 12x = 9/2 * y\n    # Divide both sides by 12: x = (9/2 * y) / 12\n    # x = (3/8) * y\n    # We need to find the number of silver spoons that have the same value as 3 gold rings\n    # Let n be the number of silver spoons that have the value equal to 3 gold rings\n    # nx = 3y\n    # Substitute x from the previous equation: n * (3/8) * y = 3y\n    # Divide both sides by y: n * (3/8) = 3\n    # Divide both sides by (3/8): n = 3 / (3/8)\n    # Simplify the equation: n = 3 * (8/3)\n    # n = 8\n    return 8\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    diff = 55\n    boys, girls = 0, 0\n    layer = 0\n    \n    # The number of people on the outer layer is 4n - 4 for a square layer of size n\n    # Since boys and girls alternate, we keep track of them separately\n    while boys - girls != diff:\n        if layer % 2 == 0:\n            boys += 4 * (layer + 1) - 4\n        else:\n            girls += 4 * (layer + 1) - 4\n        layer += 1\n    \n    # When the loop ends, the total will include students in the middle square, so we subtract those to get the last layer\n    if layer % 2 == 0:\n        boys -= (layer + 1) ** 2\n        girls += (layer ** 2)\n    else:\n        girls -= (layer + 1) ** 2\n        boys += (layer ** 2)\n    \n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    # Assumption: if all items were paintbrushes\n    total_cost = 28\n    paintbrush_cost = 1\n    marker_cost = 3\n    total_items = 12\n\n    # Calculate the cost if all items were paintbrushes\n    all_paintbrush_cost = total_items * paintbrush_cost\n\n    # The extra cost incurred for each marker, since a marker costs 2 more than a paintbrush\n    extra_cost_per_marker = marker_cost - paintbrush_cost\n\n    # Calculate the number of markers by dividing the extra paid amount by the extra cost per marker\n    # Extra paid amount is total_cost minus the cost if all were paintbrushes\n    number_of_markers = (total_cost - all_paintbrush_cost) / extra_cost_per_marker\n\n    return int(number_of_markers)\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from the front and 7th from the back, so there are (5 - 1) rows in front of her,\n    # and (7 - 1) rows behind her, making a total of (5 - 1) + (7 - 1) + 1 = 10 rows.\n    rows = (5 - 1) + (7 - 1) + 1\n\n    # Similarly, Cora is 2nd from the left and 4th from the right, so there are (2 - 1) columns to her left,\n    # and (4 - 1) columns to her right, making a total of (2 - 1) + (4 - 1) + 1 = 5 columns.\n    columns = (2 - 1) + (4 - 1) + 1\n\n    # The total number of students in the rectangular formation is equal to the number of rows times the number of columns.\n    ans = rows * columns\n    return ans\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_average_weight = 65\n    male_teachers = 3\n    male_average_weight = 75\n    female_average_weight = 60\n    females = symbols('females')\n\n    # Equation: total weight of all teachers = weight of male teachers + weight of female teachers\n    total_weight = total_average_weight * (male_teachers + females)\n    male_total_weight = male_teachers * male_average_weight\n    female_total_weight = females * female_average_weight\n\n    equation = Eq(total_weight, male_total_weight + female_total_weight)\n\n    females_number = solve(equation, females)[0]\n    return females_number\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces, we place 2 pieces in each plate initially.\n    # This leaves us with 8 - 2*3 = 2 candies to distribute.\n    \n    candies_left = 8 - 2*3\n    \n    # We need to distribute these 2 candies among 3 plates.\n    # This is a classic stars and bars problem (partitioning into non-empty parts), where we have n+k-1 choose k-1 ways.\n    # Here, n is candies_left and k is the number of plates.\n\n    # We calculate the combination (candies_left + 3 - 1) choose (3 - 1)\n    from math import comb\n    ways = comb(candies_left + 3 - 1, 3 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    # Since Star must be the first runner, there are 4 remaining places \n    # to be filled by the other 4 teammates. \n    # The number of ways to arrange 4 people in 4 places is 4 factorial (4!).\n    ans = factorial(4)\n    return ans\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the given numbers to find their prime factors and powers\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n    \n    # Combine the factors into a single dictionary where the key is the prime and the value is the power\n    combined_factors = {}\n    for prime in factors_33:\n        if prime in combined_factors:\n            combined_factors[prime] += factors_33[prime]\n        else:\n            combined_factors[prime] = factors_33[prime]\n    \n    for prime in factors_55:\n        if prime in combined_factors:\n            combined_factors[prime] += factors_55[prime]\n        else:\n            combined_factors[prime] = factors_55[prime]\n    \n    # A number is a perfect square if all the powers of its prime factors are even\n    # Thus, m must contribute sufficient primes to make all powers even\n    smallest_m = 1\n    for prime, power in combined_factors.items():\n        # If the power is odd, we need another prime to make it even\n        if power % 2 != 0:\n            smallest_m *= prime\n    \n    return smallest_m\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for i in range(1000, 10000):\n        digits = str(i)\n        if list(digits) == sorted(digits):\n            reverse_i = int(digits[::-1])\n            third_i = 26352 - i - reverse_i\n            third_digits = str(third_i)\n            if sorted(digits) == sorted(third_digits) and i < third_i < reverse_i:\n                return i\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Assuming the operation follows a pattern that can be determined by the given examples\n    def operation(x, y):\n        # Define the custom operation based on the pattern observed in the examples\n        # Looking at the provided examples, we can deduce that the operation is as follows:\n        # (x * y) + 10 = z, where z is the result of x otimes y\n        return (x * y) + (x + y)\n\n    # Calculate the result of 6 otimes 12 using the custom operation\n    ans = operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Assuming the cutting speed is constant,\n    # the time it takes to cut n segments is directly\n    # proportional to the number of cuts needed (n - 1).\n    # Therefore, we can set up a proportion.\n    \n    # Time to cut 31 segments (30 cuts): 60 minutes\n    # Let 't' be the time to cut 50 segments (49 cuts)\n    # (cuts for 31 segments)/(time for 31 segments) = (cuts for 50 segments)/(time for 50 segments)\n    \n    # time_min represents the time in minutes\n    time_min = (49 * 60) / 30\n    \n    return time_min\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are:\n    # number ≡ 1 (mod 3)\n    # number ≡ 3 (mod 5)\n    # number ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    # Solving the congruences using Chinese Remainder Theorem\n    number, _ = solve_congruence(*congruences)\n    \n    # Finding the number in the specified range\n    while number < 100:\n        number += 3*5*7\n\n    if number >= 200:\n        raise ValueError(\"No solution exists between 100 and 200\")\n\n    return number\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    # Let the number be x\n    # According to the problem statement, x - 30% of x = 210\n    # Which can be written as: x - 0.3 * x = 210\n    # Simplifying: 0.7 * x = 210\n    # Therefore, x = 210 / 0.7\n    x = 210 / 0.7\n    return x\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003  # Start searching from the year after 2002\n    while True:\n        if str(year) == str(year)[::-1]:  # Check if the year is a palindrome\n            break\n        year += 1\n    return year - 2002  # Calculate the difference between the found palindrome year and 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of flowers given by Candy to Nancy\n    candy, nancy, x = symbols('candy nancy x')\n\n    # Initial number of flowers\n    candy_original = 11\n    nancy_original = 9\n\n    # After giving x flowers away\n    candy_new = candy_original - x\n    nancy_new = nancy_original + x\n\n    # Nancy has 8 more flowers than Candy after the exchange\n    equation = Eq(nancy_new, candy_new + 8)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Calculate how many flowers Candy has now\n    candy_now = candy_original - solution[0]\n\n    return candy_now\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ans = factorial(len(word))\n    \n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    percentage_increase = 45\n    \n    increased_cost = initial_cost * (1 + percentage_increase / 100)\n    \n    return increased_cost\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n    \n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number / 24 == 36:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current = 1\n    difference = 1\n    while current <= 50:\n        current += difference\n        difference += 1\n    return current\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_pounds = 1.85\n    total_amount_pounds = 10\n\n    # Convert pen cost to pounds\n    pen_cost_pounds = pen_cost_p / 100\n\n    # Calculate total cost for pens and booklets\n    total_cost = (3 * pen_cost_pounds) + (4 * booklet_cost_pounds)\n\n    # Calculate change\n    change = total_amount_pounds - total_cost\n\n    return change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return int(ans)\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5383000  # Replace this with the actual population figure\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Loop through all 3-digit numbers\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousands in range(5, 10):  # The thousands digit, can only be 5-9 for numbers larger than 5000\n        for hundreds in range(10):  # The hundreds digit can be 0-9\n            for tens in range(10):  # The tens digit can be 0-9\n                for ones in range(1, 10):  # The ones digit can be 1-9 (can't be 0 to avoid division by zero)\n                    # Skip if any digit is not divisible by thousands digit and not 0 (since division by zero is undefined)\n                    if ((hundreds == 0 or thousands % hundreds == 0) and\n                        (tens == 0 or thousands % tens == 0) and\n                        (ones == 0 or thousands % ones == 0)):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "from itertools import product\n\ndef solution():\n    # Create all possible 4-digit combinations from 0 to 9\n    all_combinations = product(range(10), repeat=4)\n    \n    for combination in all_combinations:\n        if (\n            sum(a == b for a, b in zip(combination, (5, 6, 4, 8))) == 2 and\n            sum(a == b for a, b in zip(combination, (3, 6, 2, 8))) == 2 and\n            sum(a == b for a, b in zip(combination, (3, 1, 4, 7))) == 2 and\n            sum(a == b for a, b in zip(combination, (5, 6, 2, 9))) == 2 and\n            all(a == b for a, b in zip(combination, (1, 2, 5, 8))) == False\n        ):\n            return \"\".join(map(str, combination))\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # There are (22 - 4) children between the 4th and the 22nd child in one half of the circle.\n    # Since they are opposite, it means that there must be an equal number of children in the other half of the circle.\n    half_circle_children = 22 - 4\n\n    # Therefore, the total number of children is twice the half-circle number, plus the 4th and the 22nd child.\n    total_children = 2 * half_circle_children + 2 \n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n\n    last_term = first_term + (num_weeks - 1) * difference\n    total_coins = (num_weeks * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n    total_dresses = gina + fiona\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Equations based on the problem statement\n    average_A_B_C = Eq((A + B + C)/3, 95)\n    average_B_C_D = Eq((B + C + D)/3, 94)\n    E_mark = Eq(E, 96)\n    A_highest = Eq(A > E, True)\n    E_second_highest = Eq(E > B, True) & Eq(E > C, True) & Eq(E > D, True)\n    B_equals_D = Eq(B, D)\n    A_B_C_D_E_above_91 = Eq(A > 91, True) & Eq(B > 91, True) & Eq(C > 91, True) & Eq(D > 91, True) & Eq(E > 91, True)\n\n    # Solve equations\n    solutions = solve((average_A_B_C, average_B_C_D, E_mark, A_highest, E_second_highest, B_equals_D, A_B_C_D_E_above_91), (A, B, C, D, E))\n\n    # Filter valid solution\n    for solution in solutions:\n        if all(value > 91 for value in solution) and solution[A] > solution[E] > solution[B]:\n            return solution[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5%\n\n    # Calculate the number of years using the formula for simple interest\n    # A = P * (1 + rt)\n    # Where A is the final amount, P is the initial amount, r is the interest rate, and t is the time in years\n    # Rearrange the formula to solve for t: t = (A/P - 1) / r\n\n    years = (final_amount / initial_amount - 1) / interest_rate\n\n    # Since Bella said the number of years is 5, checking if the calculated years is close to 5\n    is_bella_right = round(years) == 5\n\n    # If Bella is not right, return the actual number of years, otherwise return \"Bella is right\"\n    ans = \"Bella is right\" if is_bella_right else round(years)\n    return ans\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let f = number of female teachers\n    f = symbols('f')\n    \n    # Average weight (male and female) = 65\n    # Total weight of all teachers = 65 * (f + 3)\n    \n    # Average weight of male teachers = 75\n    # Total weight of male teachers = 75 * 3\n    \n    # Average weight of female teachers = 60\n    # Total weight of female teachers = 60 * f\n    \n    # Equation representing the weights and average:\n    equation = Eq(75 * 3 + 60 * f, 65 * (f + 3))\n    \n    # Solve for f\n    solution = solve(equation, f)\n    \n    # Return the number of female teachers\n    return solution[0]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_one_quarter_full = 250\n    mass_three_quarter_full = 350\n    \n    mass_half_full = (mass_one_quarter_full + mass_three_quarter_full) / 2\n    mass_empty_jar = 2 * mass_half_full - mass_three_quarter_full\n    \n    return int(mass_empty_jar)\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    # Convert everything to litres\n    cups_to_litres = 4 * 350 * 0.001  # 350 ml to litres for 4 cups\n\n    # Calculate the amount of soda used to fill the fraction of the bottle\n    bottle_fraction = (1 / 7) * 9.1\n\n    # Total amount of soda used\n    soda_used = cups_to_litres + bottle_fraction\n\n    # Subtract the used amount from the total bought\n    soda_left = 13.15 - soda_used\n\n    return soda_left\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for father's current age (f) and son's current age (s)\n    f, s = symbols('f s')\n\n    # Equation 1: Father's age 6 years ago is 5 times the son's age 6 years ago.\n    equation1 = Eq(f - 6, 5 * (s - 6))\n\n    # Equation 2: The sum of their current ages is 78.\n    equation2 = Eq(f + s, 78)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (f, s))\n\n    # Return the father's current age.\n    return solutions[f]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters (converted from cm)\n    x = 0.04  # position from equilibrium in meters (converted from cm)\n\n    # Total energy (E) of the oscillator is given by the formula E = 1/2 * k * A^2\n    E = 0.5 * k * A**2\n\n    # Total energy E is conserved and is the sum of potential and kinetic energy\n    # Potential energy (PE) at x is given by PE = 1/2 * k * x^2\n    # Kinetic energy (KE) is then KE = E - PE\n    PE = 0.5 * k * x**2\n    KE = E - PE\n\n    # The speed (v) of the block can be found using the kinetic energy formula KE = 1/2 * m * v^2\n    v = sqrt(2 * KE / m)\n\n    return E, v\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure her victory, Rose must leave a number of marbles that is \n    # a multiple of 3 for Kylie on her first move. This is because whatever\n    # amount Kylie takes (1 or 2 marbles), Rose can always take the remaining\n    # amount to make the total number taken in that round 3. \n    # Therefore, by the time it gets to 3 marbles left, Rose can take them all \n    # and win the game. So she should leave 13 (a multiple of 3 plus 1) after her first turn.\n\n    total_marbles = 14\n    # Subtract multiples of 3 until we reach a number just above a multiple of 3\n    while total_marbles % 3 != 1:\n        total_marbles -= 1\n\n    # The amount Rose should take is the original number of marbles minus the target number\n    # That makes the first turn amount 14 - 13\n    marbles_to_take = 14 - total_marbles\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100  # convert pounds to pence\n    coin_value_pence = 5\n    num_coins = total_amount_pence // coin_value_pence\n\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Pip and Bud's running rate per minute\n    pip_per_min, bud_per_min = symbols('pip_per_min bud_per_min')\n\n    # Pip runs 20 meters more than Bud each minute\n    equation1 = Eq(pip_per_min, bud_per_min + 20)\n\n    # 3 minutes total running distance\n    total_distance = 540\n\n    # Total distance ran by Pip and Bud in 3 minutes\n    equation2 = Eq(3 * pip_per_min + 3 * bud_per_min, total_distance)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip_per_min, bud_per_min))\n\n    # Distance Pip has run in 3 minutes\n    pip_distance = solutions[pip_per_min] * 3\n\n    return pip_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the original amount of coins in box A\n    # Let 'b' be the original amount of coins in box B\n    # Let 'c' be the original amount of coins in box C\n    a, b, c = symbols('a b c')\n    \n    # Equation 1: Box A contains four times as many coins as Box B\n    equation1 = Eq(a, 4 * b)\n    # Equation 2: 6% of the coins in Box A are removed and transferred to Box C\n    # Equation 3: 20% of the coins in Box B are removed and transferred to Box C\n    # Equation 4: There are now 1220 coins in Box C, which is 22% more than the original number of coins in Box C\n    # Equation 5: Sum of the coins removed from A and B and added to C\n    equation2 = Eq(c + (0.06 * a) + (0.20 * b), 1220)\n    equation3 = Eq(c, 1220 / 1.22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    return int(solutions[a])\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let's denote the original number of coffee bottles as c,\n    # the original number of tea bottles as t,\n    # and the final total number of bottles as f.\n\n    # According to the question, initially 60% are coffee, which means 40% are tea.\n    # After buying more tea bottles, coffee becomes 40% of the total.\n    # Since the number of coffee bottles doesn't change, we have:\n    # c / f = 0.4 (40%)\n    \n    # We know that c was initially 60% of the original total number of bottles.\n    # So if we denote the original total number of bottles as o,\n    # we have the equation: c = 0.6 * o\n\n    # Let's also establish that the final number of tea bottles is t_final.\n    # This means:\n    # t_final = f - c (because the number of coffee remains the same, c)\n\n    # Now, let's use o to represent the original number\n    # of tea bottles in terms of c: t = o - c\n    \n    # We're looking for the percentage increase in tea bottles, which is:\n    # percentage increase = ((t_final - t) / t) * 100\n\n    # Because the number of coffee bottles stays the same,\n    # we can find the ratio of original coffee bottles to the final total:\n    # c = 0.4 * f  =>  f = c / 0.4\n    \n    # We can substitute o for the original number of bottles in terms of c:\n    # o = c / 0.6\n\n    # Now we find the original number of tea bottles:\n    # t = o - c\n    # t = (c / 0.6) - c\n    \n    # The final number of tea bottles after adding more is:\n    # t_final = f - c\n    # t_final = (c / 0.4) - c\n\n    # Now plug in all the values into the percentage increase formula:\n    # percentage increase = ((t_final - t) / t) * 100\n    # percentage_increase = (((c / 0.4) - c) - ((c / 0.6) - c)) / ((c / 0.6) - c) * 100\n    \n    # Simplify the formula by canceling the c terms:\n    # percentage_increase = (((2.5c - c) - (1.666c - c)) / (1.666c - c)) * 100\n    # percentage_increase = ((1.5c - 0.666c) / 0.666c) * 100\n    # percentage_increase = (0.834c / 0.666c) * 100\n    # c will cancel out:\n    # percentage_increase = (0.834 / 0.666) * 100\n    # percentage_increase = 1.25225225225 * 100\n    \n    percentage_increase = (0.834 / 0.666) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_sum = hex((0x2A3 + 0x17B)).upper().replace(\"0X\", \"\")\n    return hex_sum\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for page in range(1, 501):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 0.25 * 0.30 * 0.40 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n    \n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n    \n    average_price = total_price / total_flowers\n    \n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n\n    # equation for the total number of vehicles\n    equation1 = Eq(tricycles + cars, 24)\n\n    # equation for the total number of wheels\n    equation2 = Eq(3 * tricycles + 4 * cars, 86)\n\n    solutions = solve((equation1, equation2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Define the individual times for the tasks\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n    \n    # Sum the times as they are sequential tasks\n    total_time = (washing_watermelons + washing_glasses +\n                  juicer_working + pouring_juice)\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60  # in pence\n    james_money = 110  # £1.10 in pence\n\n    total_money_pence = lewis_money + james_money\n    total_money_pounds = total_money_pence / 100  # Convert pence to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    w_count = \"WINNING\".count(\"W\")\n    i_count = \"WINNING\".count(\"I\")\n    n_count = \"WINNING\".count(\"N\")\n    g_count = \"WINNING\".count(\"G\")\n\n    arrangements = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    \n    return arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    \n    # Function to get number of factors\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Get all possible combinations of 9 numbers\n    all_combinations = list(combinations(range(1, 14), 9))\n    results = []\n\n    for combo in all_combinations:\n        factors = [num_factors(num) for num in combo]\n        # Find two numbers with a unique number of factors\n        if len([x for x in factors if factors.count(x) == 1]) == 2:\n            # Alice sees two unique numbers with a unique number of factors\n            # Because Alice can have a number with a unique number of factors\n            # and unique numbers have a unique number of factors\n            # but Alice doesn't know her number so she can't have a unique number of factors\n            # we eliminate combinations with two odd unique or two even unique numbers of factors\n            alice_can_see = [(x, num_factors(x)) for x in combo if factors.count(num_factors(x)) == 1]\n            if alice_can_see and (alice_can_see[0][0] % 2 != alice_can_see[1][0] % 2):\n                # Since May’s number is 2 less than Alice’s, Alice’s number must be odd and >2\n                # May's number is different from Mark's by 1 means May's number must be even\n                # The difference between May and Alice is 2, so Alice's number is the larger odd number\n                alices_number = max(x[0] for x in alice_can_see if x[0] % 2 != 0)\n                # May's number must be 2 less than Alice's and also even\n                mays_number = alices_number - 2\n                # Mark's number is 1 less than May's number\n                marks_number = mays_number - 1\n                if (mays_number in combo) and (marks_number in combo):\n                    # Check if the numbers of May and Mark are indeed in the combination\n                    all_numbers = set(range(1, 14))\n                    unpicked_numbers_product = 1\n                    unpicked_numbers = all_numbers - set(combo)\n                    for num in unpicked_numbers:\n                        unpicked_numbers_product *= num\n                    results.append(unpicked_numbers_product)\n\n    if len(results) == 1:\n        ans = results[0]\n    else:\n        ans = \"Error: multiple or no solutions found\"\n\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    total_bottles = 350\n    \n    # Since we want to minimize the number of bottles of \"1000 Plus\" sold,\n    # we try to maximize the number of lemonade bottles sold.\n    # Start with the case of selling all lemonade bottles.\n    max_lemonade_sales = income // lemonade_price\n    \n    # Now, we loop to find the point where minimum \"1000 Plus\" are sold.\n    for lemonade_sold in range(max_lemonade_sales, -1, -1):\n        # Calculate total income from lemonade sold.\n        lemonade_income = lemonade_sold * lemonade_price\n        # Remainder of income must be from \"1000 Plus\".\n        remaining_income = income - lemonade_income\n        # Check if the remainder is divisible by the price of \"1000 Plus\".\n        if remaining_income % plus_price == 0:\n            # The number of \"1000 Plus\" sold is the remaining income divided by its price.\n            plus_sold = remaining_income // plus_price\n            # Check if the total bottles sold does not exceed the total stock of bottles.\n            if lemonade_sold + plus_sold <= total_bottles:\n                return plus_sold\n    \nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of blue pens and red pens before and after addition\n    blue_pens_initial, red_pens_initial, blue_pens_added = symbols('blue_pens_initial red_pens_initial blue_pens_added')\n    \n    # Given ratios and total pens initially\n    equation1 = Eq(blue_pens_initial / red_pens_initial, 3/5)\n    equation2 = Eq(blue_pens_initial + red_pens_initial, 96)\n    \n    # Solve for the initial number of pens\n    initial_pens_solution = solve((equation1, equation2), (blue_pens_initial, red_pens_initial))\n    \n    # Extract initial blue pens and red pens\n    blue_pens_before = initial_pens_solution[blue_pens_initial]\n    red_pens_before = initial_pens_solution[red_pens_initial]\n    \n    # Given condition after adding 60 red pens and some blue pens\n    equation3 = Eq((blue_pens_before + blue_pens_added) / (blue_pens_before + red_pens_before + blue_pens_added + 60), 40/100)\n    \n    # Solve for the number of blue pens added\n    blue_pens_added_solution = solve(equation3, blue_pens_added)\n    \n    return blue_pens_added_solution[0]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in m/s\n    time = 4  # in seconds\n\n    acceleration = final_velocity / time\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Using Frobenius Number theory for two numbers a and b where gcd(a, b) = 1.\n    # The largest number that cannot be expressed as a linear combination of a and b is (a*b - a - b).\n    # Here, a = 3 and b = 7 which are co-prime.\n    a = 3\n    b = 7\n    ans = a * b - a - b\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # Equation representing the score from correct and incorrect answers\n    total_score_eq = Eq(5 * correct - 2 * incorrect, 151)\n    # Equation representing the relationship between correct and incorrect answers\n    correct_incorrect_relationship = Eq(correct, 3 * incorrect + 12)\n\n    # Solving the system of equations\n    solutions = solve((total_score_eq, correct_incorrect_relationship), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / num_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    total = int('45', 7) + int('66', 7)\n    ans = ''\n    while total > 0:\n        ans = str(total % 7) + ans\n        total //= 7\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    total_matches = (4 + 6 + 2 + 1 + 3 + 5) // 2\n    matches_F = total_matches - (4 + 6 + 2 + 1 + 3 + 5)\n    return matches_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for skipped in range(1, 20):\n        divisors = set(range(1, 21)) - {skipped, skipped + 1}\n        lcm = 1\n        for d in divisors:\n            lcm = (lcm * d) // math.gcd(lcm, d)\n        if lcm % skipped != 0 and lcm % (skipped + 1) != 0:\n            return skipped + (skipped + 1)\n\nimport math\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    linda_now = symbols('linda_now')\n\n    cici_now = linda_now - 11     # Cici was born when Linda was 11\n    linda_future = linda_now + 4  # Linda's age 4 years later\n    cici_future = cici_now + 4    # Cici's age 4 years later\n    sum_future_ages = linda_future + cici_future  # Sum of their ages 4 years later\n\n    # Equation based on the provided condition\n    equation = Eq(sum_future_ages, 37)\n\n    # Solve for Linda's current age\n    linda_current_age = solve(equation, linda_now)\n\n    # Calculate Linda's age 3 years later\n    linda_age_in_3_years = linda_current_age[0] + 3\n\n    return linda_age_in_3_years\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Jamie-Anne's stamps to Natasha's stamps ratio\n    ratio_jamie_anne = 5\n    ratio_natasha = 3\n\n    # Difference in the number of stamps\n    difference = 18\n\n    # Since the difference is related to the 2 extra parts in Jamie-Anne's possession (5 - 3 = 2 parts)\n    # One part is equal to:\n    one_part = difference / (ratio_jamie_anne - ratio_natasha)\n\n    # The total number of Jamie-Anne's stamps\n    jamie_anne_stamps = one_part * ratio_jamie_anne\n\n    # The total number of Natasha's stamps\n    natasha_stamps = one_part * ratio_natasha\n\n    # The total number of stamps they have\n    total_stamps = jamie_anne_stamps + natasha_stamps\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(161, 15 * 15 + 1): # 15x15 is the max possible number that fulfills the conditions\n        if i // 15 == i % 15:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    difference = 4\n    last_term = 85\n    num_terms = (last_term - first_term) // difference + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    return sum_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    least_possible_sum = first_number_min + second_number_min\n    return least_possible_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # meters\n    speed_uphill = 10  # m/min\n    speed_downhill = 30  # m/min\n    \n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_time = time_uphill + time_downhill\n    total_distance = 2 * distance_one_way  # round trip\n\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways = 5**4\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # The amounts of apples, pears and oranges that can be equally distributed\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Calculate the greatest common divisor of the distributable amounts\n    gcd_apples_pears = gcd(distributable_apples, distributable_pears)\n    gcd_all = gcd(gcd_apples_pears, distributable_oranges)\n\n    # Maximum number of students is the greatest common divisor\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n    \n    # There are two positions for Judy: first or last.\n    positions_for_judy = 2\n    \n    # There are five friends who can be arranged in any order in the remaining places.\n    arrangements_for_friends = factorial(5)\n    \n    # Total number of different ways Judy and her friends can form the line\n    total_arrangements = positions_for_judy * arrangements_for_friends\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    lcm = 12\n    given_number = 6\n    \n    for i in range(1, lcm + 1):\n        if (lcm % i == 0) and (given_number % i == 0) and (i == 1 or i == 2):\n            other_number = lcm // given_number\n            return other_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    count = 0\n    number = 1\n    while count < 200:\n        count += len(str(number))\n        if count < 200:\n            number += 1\n    return int(str(number)[200 - (count - len(str(number))) - 1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let the number of qualified products be q, and the number of unqualified products be u\n    # According to the problem, we have two equations:\n    # q + u = total number of products in 4 days = 500 * 4\n    # 5*q - 18*u = total points = 9931\n\n    total_products = 500 * 4\n    total_points = 9931\n\n    # Now we can calculate the number of unqualified products first\n    # considering q = total_products - u, and then substitute in the second equation:\n    # 5 * (total_products - u) - 18 * u = total_points\n    # 5 * total_products - 5 * u - 18 * u = total_points\n    # -5 * u - 18 * u = total_points - 5 * total_products\n    # -23 * u = total_points - 5 * total_products\n\n    u = (5 * total_products - total_points) // 23\n    q = total_products - u\n\n    return q\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    \n    # Price is $40 more than the cost\n    price = cost + 40\n    \n    # Customer buys it with 20% off\n    sale_price = price * 0.8\n    \n    # Profit is $12\n    profit_eq = Eq(sale_price - cost, 12)\n    \n    # Solve for the cost\n    cost_value = solve(profit_eq, cost)\n    \n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, daughter = symbols('daniel daughter')\n    \n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    \n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let d be the distance Baye walked when April met her 800m from Q.\n    # The remaining distance for Baye is therefore 1800 - d.\n    # April covered the whole distance to Q and then 1000m back to meet Baye.\n    # Hence, the distance April covered is 1800 + (1800 - 800).\n    # Since April runs 4 times faster after reaching Q, the time taken to cover both distances should be the same.\n    # Time taken by April for the first 1800m and 4x her speed for the next 1000m is equal to Baye's time for d meters.\n\n    # Let speed of April = a, speed of Baye = b\n    # April's total distance covered is 1800 + 1000 (to meet Baye).\n    # Time for April to walk 1800m at speed a + Time to run 1000m at speed 4a (equal to walking 4000m at speed a)\n    # is equal to Time for Baye to walk d meters at speed b.\n    # a * 1800 + a * 4000 = b * d, we know that b/a = 1 (since they started walking at the same time)\n    # Therefore, 1800 + 4000 = d\n    d = 1800 + 1000\n\n    # Distance left for Baye to reach Q when April met her is 1800m - d\n    remaining_distance = 1800 - d\n\n    return remaining_distance\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original relationship between hens and roosters\n    original_eq = Eq(hens, 6 * roosters)\n    # Relationship after increase\n    increased_eq = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve the system of equations\n    solutions = solve((original_eq, increased_eq), (hens, roosters))\n\n    return solutions[hens] + solutions[roosters]\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven_numbers = 7 * 12\n    total_for_eight_numbers = 8 * 11\n    eighth_number = total_for_eight_numbers - total_for_seven_numbers\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    ans = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum(range(1, 3))\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    periodic_sequence = \"538462\"\n    index = 2020  # 2021st digit means we look at the index 2020 (0-indexed)\n    periodic_index = index % len(periodic_sequence)\n    return int(periodic_sequence[periodic_index])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    equation = Eq((1/3) * money + (2/5) * money, 132)\n\n    result = solve(equation, money)\n\n    return result[money]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case scenario for not getting 5 green beads:\n    # Darrell draws all blue and all white beads first\n    blue_beads = 5\n    white_beads = 6\n    # The next beads he draws would be green for sure\n    beads_to_get_5_green = blue_beads + white_beads + 5\n    \n    return beads_to_get_5_green\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    total_numbers = 105\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_5_and_7 = total_numbers // (5 * 7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 216):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    floors_walked_initially = 4 - 1  # From first to fourth floor\n    time_initial = 12  # in minutes\n\n    floors_total = 8 - 1  # From first to eighth floor\n\n    # Assuming constant speed, the time taken is directly proportional to number of floors\n    time_total = (time_initial / floors_walked_initially) * floors_total\n\n    return time_total\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Normally, dividing n indistinguishable items into r groups involves using \n    # stars and bars combinatorics methods, but since the baskets are identical,\n    # we need to use partition function P(n, k) where n is the number of items \n    # and k is the number of groups. Since Sympy doesn't have a direct partition \n    # function, we calculate it differently.\n\n    # However, in a simpler approach, we can just list out all possible options \n    # with identical baskets for a small number like 6.\n\n    # Options:\n    # (6, 0, 0), (5, 1, 0), (4, 2, 0), (4, 1, 1), (3, 3, 0), (3, 2, 1), (2, 2, 2)\n    # Therefore, there are 7 ways.\n\n    return 7\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Given initial ratio of birds to squirrels\n    bird_to_squirrel_ratio = 8 / 5\n    # Assume a number for birds and squirrels that satisfy the initial ratio\n    # Let the initial number of birds be 8x and squirrels be 5x for some positive integer x\n    # Then the total number of animals initially is 8x + 5x = 13x\n    \n    # One year later, the number of squirrels increased by 20%\n    # New number of squirrels = 5x * 1.2 = 6x\n    # Total number of animals remains same, so new number of birds = 13x - 6x = 7x\n    \n    # Calculate the percentage of birds that flew away\n    initial_birds = 8\n    new_birds = 7\n    birds_flew_away = initial_birds - new_birds\n    birds_flew_away_percent = (birds_flew_away / initial_birds) * 100\n\n    return birds_flew_away_percent\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = (5 * a) - (2 * b)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            dividend = divisor * quotient + remainder\n            if dividend + divisor + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    eq1 = Eq(fiona + gary, 973)\n    eq2 = Eq(fiona + harold, 1823)\n    eq3 = Eq(harold, 6 * gary)\n\n    solutions = solve((eq1, eq2, eq3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increase = 4\n\n    # Calculate the total number of days using the formula for the number of terms in an arithmetic sequence:\n    # last_term = first_term + (num_terms - 1) * difference\n    num_days = ((last_day_pages - first_day_pages) / daily_increase) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define the custom operation based on observed patterns from the given pairs.\n    def custom_operation(a, b):\n        return a + b - (a % 10)\n\n    # Finding 9◈20 using the custom operation function.\n    ans = custom_operation(9, 20)\n    return ans\n\n# Call the solution function to find 9◈20.\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # liters\n    juice_drank = 9  # liters\n    container_volume = 5  # liters\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - juice_drank\n    containers_needed = -(-remaining_juice // container_volume)  # ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    difference = 8  # common difference obtained by 15 - 7 or 23 - 15 or 31 - 23\n    last_term = 31  # last given term of the sequence\n    next_term = last_term + difference  # next term is found by adding the common difference\n\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2  # Integer division\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve, Permutations\n    \n    # Define symbols for variables\n    D, A, R, T, C = symbols('D A R T C')\n    \n    # Set up the equations\n    eq1 = Eq(D + A + R + T, 11)\n    eq2 = Eq(T + A + R + T, 12)\n    eq3 = Eq(C + A + R + T, 13)\n    \n    # Solving for the variables\n    solutions = solve((eq1, eq2, eq3), (D, A, R, T, C))\n    \n    # Variable space after accounting for non-zero constraint\n    non_zero_values = set(range(1, 10))\n\n    # Find the maximum A+R+T\n    max_art = 0\n    for solution in solutions:\n        # Check if all values are different and non-zero\n        if len(set(solution)) == len(solution) and non_zero_values.issuperset(set(solution)):\n            max_art = max(max_art, sum(solution[1:4]))\n\n    return max_art\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 1000):  # Assuming a reasonable upper limit for A as 1000\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July is 5 months\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1  # Each friend sends a card to each of the other friends\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the condition: 1/4 of the boys equals 2/5 of the girls\n    equation1 = Eq(boys / 4, 2 * girls / 5)\n\n    # Total number of students is the sum of boys and girls\n    equation2 = Eq(boys + girls, 39)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Find the difference between the number of boys and girls\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_on_left = 3\n    members_on_right = 5\n    tanya = 1 # Tanya herself\n\n    total_members = members_on_left + tanya + members_on_right\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import prevprime\n\n    number = 87878\n    largest_prime_factor = prevprime(number)\n\n    # Check if the largest prime factor is four digits and a factor of the number\n    while number % largest_prime_factor != 0 or largest_prime_factor < 1000:\n        largest_prime_factor = prevprime(largest_prime_factor)\n\n    return largest_prime_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Jack's speed during each stage of the race\n    speed_first_stage = 7  # in metres per second\n    speed_second_stage = 5  # in metres per second\n    speed_final_stage = 8  # in metres per second\n\n    # Distance covered in each stage\n    distance_first_stage = 280  # in metres\n    distance_second_stage = 400  # in metres\n    distance_final_stage = 800 - (distance_first_stage + distance_second_stage)  # remaining distance in metres\n\n    # Time taken to complete each stage\n    time_first_stage = distance_first_stage / speed_first_stage\n    time_second_stage = distance_second_stage / speed_second_stage\n    time_final_stage = distance_final_stage / speed_final_stage\n\n    # Total time to finish the race\n    total_time = time_first_stage + time_second_stage + time_final_stage\n    \n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    total_crates = 24\n    van_capacity = 12\n\n    total_weight = crate_weight * total_crates\n    vans_needed = total_weight / van_capacity\n    return int(vans_needed) if vans_needed.is_integer() else int(vans_needed) + 1\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    equation1 = Eq(daniel - 24, patrick + 10)\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def split_number(number, maximum):\n        if number == 0:\n            return 1\n        elif number < 0 or (maximum == 0 and number >= 1):\n            return 0\n        else:\n            with_max = split_number(number - maximum, maximum)\n            without_max = split_number(number, maximum - 1)\n            return with_max + without_max\n\n    ans = split_number(5, 5) - 1  # subtract 1 to exclude the number itself (5)\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    num = 10\n    while not (num % 3 == 0 and num % 7 == 0):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea_level = 82\n    plane_height_above_sea_level = 569\n\n    vertical_distance = whale_depth_below_sea_level + plane_height_above_sea_level\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    boys = total_pupils - girls  # Boys in the class\n\n    # Since not all girls are right-handed, the minimum number of right-handed\n    # girls would be when all boys are right-handed. So, we start by assuming\n    # all boys are right-handed and calculate the remaining right-handed pupils\n    # as the minimum number of right-handed girls.\n    min_right_handed_girls = right_handed - boys\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    nums = [i for i in range(1, 10)]\n    smallest_diff = float('inf')\n    nums.sort()\n    \n    while True:\n        num1 = int(''.join(map(str, nums)))\n        nums.reverse()\n        num2 = int(''.join(map(str, nums)))\n        diff = abs(num1 - num2)\n        smallest_diff = min(smallest_diff, diff)\n        if not next_permutation(nums):\n            break\n    \n    return smallest_diff\n\ndef next_permutation(arr):\n    i = len(arr) - 2\n    while not (i < 0 or arr[i] < arr[i+1]):\n        i -= 1\n    if i < 0:\n        return False\n    j = len(arr) - 1\n    while not (arr[j] > arr[i]):\n        j -= 1\n    arr[i], arr[j] = arr[j], arr[i]  \n    arr[i+1:] = reversed(arr[i+1:])  \n    return True\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_fruits = symbols('total_fruits')\n    apples = 2/3 * total_fruits\n    bananas = 1/9 * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples - 12, lemons)\n\n    solutions = solve((equation,), (total_fruits,))\n\n    num_lemons = lemons.subs(total_fruits, solutions[0])\n\n    return num_lemons\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    days = 9\n    total_skirts = sum(skirts_per_day * (worker + 1) for worker in range(days))\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pieces = 6\n    qiqi_pieces = jenny_pieces + 5\n    return qiqi_pieces\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25 = 0.3\n    \n    probability_over_25_given_over_20 = probability_over_25 / probability_over_20\n    \n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Number of taps\n    taps = 5\n    \n    # Time it takes for 5 taps to fill a 1-liter jug in minutes\n    time_for_1_litre = 2\n    \n    # The rate at which 5 taps fill the jug (litres per minute)\n    rate = 1 / time_for_1_litre\n    \n    # The rate at which 1 tap fills the jug (litres per minute)\n    rate_per_tap = rate / taps\n    \n    # Volume of the jug we want to fill in litres (500ml = 0.5 litres)\n    volume_jug = 0.5\n    \n    # Calculating the time for one tap to fill a 500ml jug in minutes\n    time_for_500ml = volume_jug / rate_per_tap\n    \n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    \n    total_erasers = 246\n    more_erasers = 32\n    \n    equation1 = Eq(john + brother, total_erasers)\n    equation2 = Eq(john, brother + more_erasers)\n\n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if (a * a) + (a + a) == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n    children_fraction = 3/5\n    men_fraction = 1/2\n    \n    children = children_fraction * visitors\n    remaining_visitors = visitors - children\n    men = men_fraction * remaining_visitors\n    \n    equation = Eq(children - men, 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_cola_ml = 2000  # Convert 2 litres to millilitres\n    drank_cola_ml = 350\n\n    remaining_cola_ml = total_cola_ml - drank_cola_ml\n\n    return remaining_cola_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    ans = 40 / 100 * 3280\n    return ans\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    # Sorting the digits in descending order to get the greatest possible numbers\n    digits = [8, 7, 6, 4, 3, 1]\n    \n    # Use the largest three digits to form the first number\n    first_number = digits[0] * 100 + digits[1] * 10 + digits[2]\n    \n    # Use the remaining three digits to form the second number\n    second_number = digits[3] * 100 + digits[4] * 10 + digits[5]\n    \n    # Sum up the two numbers to get the greatest possible sum\n    greatest_sum = first_number + second_number\n\n    return greatest_sum\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the given pattern\n    # 1 -> 8 (add 7)\n    # 8 -> 16 (double)\n    # 16 -> 23 (add 7)\n    # 23 -> 46 (double)\n    # 46 -> 53 (add 7)\n    # Next, we should double the 53, since the last operation was +7\n    \n    last_number = 53\n    next_number = last_number * 2  # Double the last number\n\n    return next_number\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, pool = symbols('A B C pool')\n\n    # Given conditions\n    equation1 = A + C  # Pool filled by A and C\n    equation2 = B + C  # Pool filled by B and C\n    equation3 = Eq(B, 2 * A)  # Flow rate of B is twice A\n    \n    # Amount of water when A and C fill the pool is A + 18 tons from A\n    equation4 = Eq(equation1, A + 18)\n    # Amount of water when B and C fill the pool is B + 27 tons from B\n    equation5 = Eq(equation2, B + 27)\n    # Since both scenarios fill the pool to the same level, equation1 and equation2 are equal to pool\n    equation6 = Eq(equation1, pool)\n    equation7 = Eq(equation2, pool)\n\n    # Solve for all variables\n    solutions = solve((equation3, equation4, equation5, equation6, equation7), (A, B, C, pool))\n\n    return solutions[pool]\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's represent the daily amount of grass grown as G\n    # The amount each horse eats per day is H.\n    # The amount each sheep eats per day is S.\n    # Based on the information given:\n    # 20H = G * 12  --> H = (G * 12) / 20\n    # 60S = G * 24  --> S = (G * 24) / 60\n    # Given H = 4S, we can write:\n    # H = 4 * ((G * 24) / 60)\n    # Therefore, we can solve for G:\n    # (G * 12) / 20 = 4 * ((G * 24) / 60)\n    # Simplify and solve for G:\n    # G = (20 * 4 * 24) / (12 * 60)\n    # G = 80 / 3\n    \n    G = (20 * 4 * 24) / (12 * 60)\n    \n    # Now, we have 12 horses and 88 sheep eating the grass.\n    # Total grass consumption per day by 12 horses and 88 sheep is:\n    # 12H + 88S = 12 * (G * 12) / 20 + 88 * (G * 24) / 60\n    # 12H + 88S = 12 * (80 / 3) / 20 + 88 * (80 / 3) / 60\n    \n    daily_consumption = 12 * (G * 12) / 20 + 88 * (G * 24) / 60\n    \n    # The number of days all the grass can be eaten by 12 horses and 88 sheep:\n    # total_days = G / daily_consumption\n    \n    total_days = G / daily_consumption\n    \n    return total_days\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    number = 1\n    length = 10\n    start = number\n    result_sum = 0\n    for i in range(length):\n        result_sum += start\n        start += 2  # Increment by 2 for the next odd number\n    return result_sum\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    # At least two sevens means either exactly two sevens or exactly three sevens.\n    \n    # Case 1: Exactly two sevens\n    # The two sevens could be in positions (1, 2), (1, 3), or (2, 3).\n    # For each of these positions, there are 10 options for the other digit (0-9), \n    # except when the other digit is in the hundreds place, we cannot have a zero.\n    count += 3 * 9  # (7,7,X), (7,X,7), and (X,7,7) where X is not 7, the hundreds place has 9 options (1-9)\n    \n    # For other digits being 7, we should exclude them from our count, subtract 3 for that (77X, 7X7, X77)\n    count -= 3\n    \n    # Case 2: Exactly three sevens\n    # There's only one 3-digit number with all digits as seven.\n    count += 1  # (7,7,7)\n    \n    return count\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    avg_goals_per_game = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals_per_game * num_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of $2 notes and y as the number of $5 notes.\n    x, y = symbols('x y')\n    \n    # Total number of notes initially\n    total_notes_initial = Eq(x + y, 55)\n    \n    # Cindy spent 1/3 of the $2 notes\n    spent_2_notes = x / 3\n    \n    # Received 8 more $5 notes\n    received_5_notes = y + 8\n    \n    # After that, the number of $5 notes is 3/7 of the remaining notes\n    remaining_notes_relation = Eq(received_5_notes, 3/7 * (x - spent_2_notes + received_5_notes))\n\n    # Solve the system of equations\n    solutions = solve((total_notes_initial, remaining_notes_relation), (x, y))\n\n    # Calculate the total amount of money Cindy had at first\n    total_money = solutions[x] * 2 + solutions[y] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # There are three seats that can be selected for Mr. Spencer and his 2 children.\n    # The seat Mr. Spencer can sit on either the second, third, or fourth seat.\n    mr_spencer_options = 3\n    \n    # There are 3 seats remaining for the other three people.\n\n    # The number of ways to arrange Mr. Spencer and his children is simply 2!,\n    # because Mr. Spencer has to sit between them, so only the children can switch places.\n    children_permutations = factorial(2)\n    \n    # The number of ways to arrange the other 3 people is 3! because they can sit in any order.\n    others_permutations = factorial(3)\n\n    total_arrangements = mr_spencer_options * children_permutations * others_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    \n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    \n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    marks_correct = 5\n    marks_incorrect = -2\n    total_score = 23\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * marks_correct + incorrect * marks_incorrect\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M != 0 and T != 0:\n            MATH = M*1000 + A*100 + T*10 + H\n            HTAM = H*1000 + T*100 + A*10 + M\n            if MATH + HTAM == 12221:\n                return A + M + T + H\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n\n    time = distance / speed  # time = distance / speed\n\n    return int(time)\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n    # Initialize the smallest sum to a large number\n    smallest_sum = float('inf')\n\n    # Iterate through all possible values of B that divide both 24 and 52\n    for B in range(1, min(24, 52) + 1):\n        if 24 % B == 0 and 52 % B == 0:\n\n            # Calculate A and C using the value of B\n            A = 24 // B\n            C = 52 // B\n\n            # Calculate the sum of A and C\n            sum_A_C = A + C\n\n            # Update smallest sum if a smaller sum is found\n            if sum_A_C < smallest_sum:\n                smallest_sum = sum_A_C\n    \n    return smallest_sum\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Considering A, B, C as a single person: ABC\n    # Similarly, considering E and F as a single person: EF\n    # So we have 5 \"persons\" to arrange: D, G, H, ABC, EF\n\n    # Total arrangements for these 5 \"persons\" is factorial(5)\n    arrangements_5_persons = factorial(5)\n\n    # A, B, C can arrange among themselves in factorial(3) ways\n    arrangements_ABC = factorial(3)\n\n    # E and F can arrange among themselves in factorial(2) ways\n    arrangements_EF = factorial(2)\n\n    # Multiplying gives total arrangements\n    total_arrangements = arrangements_5_persons * arrangements_ABC * arrangements_EF\n\n    return total_arrangements\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n    \n    # Originally planned to produce total_scarfs in 6 days\n    original_plan = Eq(scarfs_per_day * 6, total_scarfs)\n    \n    # If producing 24 more scarfs per day, she can finish in 4 days\n    increased_production_plan = Eq((scarfs_per_day + 24) * 4, total_scarfs)\n    \n    # Solve the system of equations\n    solutions = solve((original_plan, increased_production_plan), (scarfs_per_day, total_scarfs))\n    \n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let's denote x as the number of students.\n    # If Mr. Lim gives each student 6 sweets, he will be short of 26 sweets.\n    # This means total sweets is 6x - 26.\n    # If he gives each student 5 sweets, he will be short of 5 sweets.\n    # This means total sweets is 5x - 5.\n    # Therefore, we have the equation: 6x - 26 = 5x - 5.\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(6*x - 26, 5*x - 5)\n    number_of_students = solve(equation, x)[0]\n\n    # The total number of sweets is then 5 * number_of_students - 5.\n    total_sweets = 5 * number_of_students - 5\n\n    return total_sweets\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # Start from x1+1 to ensure numbers are different\n            for x3 in range(x2 + 1, 15):  # Start from x2+1 to ensure numbers are different\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    # Let the number of boys be 5x and the number of girls be 3x.\n    # After 15 boys left, the number of boys is 5x - 15.\n    # The new ratio of boys to girls is 5:6, so we can write the equation:\n    # (5x - 15) / 3x = 5 / 6\n    # Solving for x gives us the original number of boys and girls.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5*x - 15) / (3*x), 5/6)\n    x_value = solve(equation, x)[0]\n\n    # Total number of pupils initially is the sum of boys and girls: 5x + 3x.\n    total_pupils = 8 * x_value\n    return total_pupils\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_factor = 1 - (1/3)\n    \n    original_price = sale_price / discount_factor\n    \n    return original_price\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 into its prime factors\n    prime_factors = factorint(675)\n    \n    # To make the product a perfect square, each prime factor's power\n    # must be even. So we should make the power of the prime factors of 675 even.\n    B = 1\n    for prime, power in prime_factors.items():\n        if power % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's current age\n    shelby_age = 65\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = shelby_age - 5\n    # Josh's age 5 years ago, which is 3/5 of Shelby's age 5 years ago\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost = 6.95\n    single_can_cost = 0.65\n    total_single_cost = 12 * single_can_cost\n\n    savings = total_single_cost - multipack_cost\n\n    return int(savings * 100)  # converting to pence\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    for thous in range(3, 6):\n        for hund in range(1, 7):\n            for ten in range(1, 7):\n                for one in range(1, 7):\n                    if len(set([thous, hund, ten, one])) == 4:  # No digit repeats\n                        num = thous*1000 + hund*100 + ten*10 + one\n                        if 3267 <= num <= 5120:  # Number is within range\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote the weights of Adam, Ben, and Carl as A, B, and C respectively.\n    # The given information can be summarized as follows:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Sum all the equations: (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n\n    # Notice that when we sum all the equations, we have counted each person's weight twice.\n    # To find the total actual weight, we divide the sum by 2.\n    total_weight = total_double // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations for the prices of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Return the price of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the time Alan takes to paint the room on his own\n    alan = symbols('alan')\n\n    # 1/a is the work rate of Alan, 1/6 is the work rate of Bob\n    # Together their work rate is 1/4 (the reciprocal of 4 hours)\n    equation = Eq(1/alan + 1/6, 1/4)\n\n    # Solve for Alan's time\n    alan_time = solve(equation, alan)[0]\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    compound_interest = principal * (1 + rate) ** time\n    return compound_interest\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    total_stamps = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, total_stamps), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    ans = 10024 + 3968\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(84, 108)\n    return ans\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    num_weeks = 26\n    total_food = weekly_food * num_weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    solved_score = solve(equation, original_score)\n\n    return solved_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n\n    # To win without fail, Peter needs over half of the total votes.\n    # Half of the total votes is exactly 60 (120 / 2), so to win\n    # without fail Peter needs 61 votes or more.\n    votes_needed_to_win = (total_votes // 2) + 1\n\n    # Calculate how many more votes Peter needs.\n    additional_votes_needed = votes_needed_to_win - peter_votes\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, nicholas = symbols('alex nicholas')\n    \n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n    equation2 = Eq(alex, nicholas)\n    \n    solutions = solve((equation1, equation2), (alex, nicholas))\n    \n    return solutions[alex] + solutions[nicholas]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for i in range(1, 30):\n        if i % 3 == 0 and i % 2 == 1 and i % 4 == 1 and i % 5 == 1:\n            return i\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6 * 6 - 8 * 6\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    # Since 28 is a multiple of 7, 28 days later will be the same weekday\n    weekday_code = 1  # Monday corresponds to 0001\n\n    return f\"{weekday_code:04d}\"\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    flour_left = 21\n    flour_used = total_flour - flour_left\n\n    return flour_used\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_two_thirds = 9\n    a = a_two_thirds ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 1 / 1000  # The decimal position of 6 is the thousandths place.\n    value_of_digit = 6 * position_value\n    return value_of_digit\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    number_of_poles = (road_length - interval) // interval\n\n    return number_of_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    pencils_extra = 10\n\n    # Let the number of rulers be r\n    # Then pencils will be r + pencils_extra\n    # r + (r + pencils_extra) = total_items\n    # 2*r + pencils_extra = total_items\n    # 2*r = total_items - pencils_extra\n    rulers = (total_items - pencils_extra) / 2\n\n    return int(rulers)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]  # existing numbers in the dataset without x\n    mean_value = 11  # given mean of the dataset\n    total_numbers = len(numbers) + 1  # including x\n    sum_numbers = mean_value * total_numbers  # sum of all the numbers including x\n    sum_existing_numbers = sum(numbers)  # sum of existing numbers without x\n    x = sum_numbers - sum_existing_numbers  # solving for x\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The first 7 is in the thousand's place, so its value is 7 * 10^3\n    value_of_first_7 = 7 * (10 ** 3)\n\n    # The second 7 is in the ten's place, so its value is 7 * 10^1\n    value_of_second_7 = 7 * (10 ** 1)\n\n    # The difference between the two 7's is the difference of their place values\n    difference = value_of_first_7 - value_of_second_7\n\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    \n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    ratio_boys = 5\n    ratio_girls = 6\n\n    total_parts = ratio_boys + ratio_girls\n    part_value = boys / ratio_boys\n\n    girls = part_value * ratio_girls\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    one_third = '3' * 1000  # Since 1/3 in decimal form is 0.333..., the 1000 digits will all be 3.\n    digits_sum = sum(int(d) for d in one_third)\n    return digits_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percent_value = 15 / 100\n    total_amount = 29\n    answer = percent_value * total_amount\n    return answer\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To guarantee we have 4 marbles of the same color we use the Pigeonhole principle\n    # We take worst case scenario of 3 marbles from each color first which is still not enough\n    # since we need at least 4 marbles of one color \n    # After taking 3 marbles from each color (total of 9 marbles), we will take one more\n    # then we will definitely have 4 marbles of one color.\n\n    # 3 marbles of each of 3 colors\n    marbles_taken = 3 * 3\n    \n    # Taking one more will ensure we have 4 of the same color\n    marbles_taken += 1\n    \n    return marbles_taken\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start_number = 2\n    end_number = 100\n    step = 2\n\n    num_multiples = ((end_number - start_number) // step) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The initial concentration of the solution added to container A (in percentage)\n    concentration = symbols('concentration')\n\n    # After adding 10g of the solution to A, A's concentration is the same as the initial concentration\n    conc_A = concentration\n\n    # When 10g is taken from A (now 40g total) and added to B (50g after addition),\n    # the resulting concentration in B is the weighted average\n    conc_B = (conc_A * 10 + 0 * 40) / 50\n\n    # When 10g is taken from B (now 50g total) and added to C (60g after addition),\n    # the resulting concentration in C is the weighted average\n    # We know that final concentration in C is 0.5%\n    equation = Eq(((conc_B * 10) + (0 * 50)) / 60, 0.5)\n\n    # Solve for the original concentration\n    solution_concentration = solve(equation, concentration)\n\n    return solution_concentration[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2/5\n    percentage = 35/100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    \n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    prime_factors_2016 = [2, 2, 2, 2, 2, 3, 3, 7]\n    prime_factors_1377 = [3, 3, 3, 17]\n\n    # Find the ages based on the prime factorization from last year\n    ages_last_year = [3, 3, 17]\n\n    # Calculate their ages two years ago\n    ages_two_years_ago = [age - 2 for age in ages_last_year]\n\n    # Compute the product of their ages two years ago\n    product_two_years_ago = 1\n    for age in ages_two_years_ago:\n        product_two_years_ago *= age\n\n    return product_two_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n    \n    # Treat the two people who want to stand next to each other as one unit.\n    # So now, we have 4 units (3 single people + 1 combined unit)\n    unit_arrangements = factorial(4)\n    \n    # The two people who want to stand next to each other can be arranged in 2! ways\n    pair_arrangements = factorial(2)\n    \n    # Total arrangements is the product of unit arrangements and pair arrangements\n    total_arrangements = unit_arrangements * pair_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_3_days = 33\n    avg_last_4_days = 18\n    total_last_4_days = avg_last_4_days * 4\n    total_week = total_first_3_days + total_last_4_days\n    avg_per_day = total_week / 7\n    return avg_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # in mg\n    nickel_percent_metal1 = 40  # %\n\n    weight_metal2 = 13  # in mg\n    nickel_percent_metal2 = 60  # %\n\n    nickel_metal1 = (nickel_percent_metal1 / 100) * weight_metal1\n    nickel_metal2 = (nickel_percent_metal2 / 100) * weight_metal2\n\n    total_nickel = nickel_metal1 + nickel_metal2\n    total_weight = weight_metal1 + weight_metal2\n\n    percent_concentration_nickel = (total_nickel / total_weight) * 100\n\n    return percent_concentration_nickel\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 9 - (x + 3) - 1\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player exactly once.\n    # Therefore, each player plays 7 games, since there are 7 other players.\n    \n    # Since everyone scores different number of wins and there are no ties, the scores must be distinct.\n    # The possible score for any player ranges from 0 to 7 wins, representing 8 distinct scores. \n\n    # The player with the highest number of wins will have the maximum possible score that can be achieved while keeping all scores distinct.\n    # Hence the scores will be distributed as 0, 1, 2, 3, 4, 5, 6, 7 wins.\n    # The champion, therefore, records the maximum score of 7 wins.\n\n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 * 7\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    total, n = 0, 0\n    while total <= 3405:\n        n += 1\n        total = n * (n + 1) // 2\n\n    doubled_number = 3405 - total + (n * (n + 1) // 2)\n    return doubled_number\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Number of terms for first sum\n    n1 = 6\n    # Number of terms for second sum\n    n2 = 12\n    # Number of terms for the sum we need to find\n    n3 = 18\n    \n    # Sum of first 6 terms\n    S6 = 64\n    # Sum of first 12 terms\n    S12 = 156\n    \n    # Using the formula for the sum of an arithmetic progression: S = n/2 * (2a + (n - 1)d)\n    # We have two equations:\n    # 64 = 6/2 * (2a + (6 - 1)d) => 64 = 3 * (2a + 5d) => 64 = 6a + 15d -- (1)\n    # 156 = 12/2 * (2a + (12 - 1)d) => 156 = 6 * (2a + 11d) => 156 = 12a + 66d -- (2)\n    \n    # Multiply equation (1) by 2 to subtract it from equation (2)\n    # 128 = 12a + 30d -- (3)\n    \n    # Subtract equation (3) from equation (2) to find d\n    # 156 - 128 = 12a + 66d - (12a + 30d)\n    # 28 = 66d - 30d\n    # 28 = 36d\n    d = 28 / 36\n    \n    # Find the value of a using equation (1)\n    # 6a + 15d = 64\n    # 6a = 64 - 15d\n    a = (64 - 15 * d) / 6\n    \n    # Now we can find the sum of the first 18 terms using the formula\n    S18 = n3 / 2 * (2 * a + (n3 - 1) * d)\n    \n    return S18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    pens_before = 24\n    pens_after = pens_before + 6\n    chickens_reduced_per_pen = 6\n    \n    # Let x denote the total number of chickens\n    # Total chickens before and after are equal:\n    # pens_before * chickens_before_per_pen = x \n    # pens_after * chickens_after_per_pen = x\n    # chickens_before_per_pen = chickens_after_per_pen + chickens_reduced_per_pen\n    # pens_before * (chickens_after_per_pen + chickens_reduced_per_pen) = pens_after * chickens_after_per_pen\n    # Solve for chickens_after_per_pen\n    \n    chickens_before_per_pen = pens_after / pens_before * chickens_reduced_per_pen + chickens_reduced_per_pen\n    total_chickens = chickens_before_per_pen * pens_before\n\n    return int(total_chickens)\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    divisor_dividend_quotient_sum = 40 - 3  # We subtract the remainder which is given as 3.\n    count = 0\n    possible_values = set()\n    for divisor in range(1, divisor_dividend_quotient_sum):\n        for quotient in range(1, divisor_dividend_quotient_sum // divisor):\n            dividend = divisor * quotient + 3\n            if divisor + dividend + quotient + 3 == 40:\n                possible_values.add(dividend/quotient)\n                count += 1\n    return len(possible_values)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_members = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history_members = total_math_members * ratio_history_to_math\n    return int(total_history_members)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # On the planet Zog, subtract the reversed digits\n    # Reverse the digits of 729 to get 927\n    # Reverse the digits of 26 to get 62\n    # Perform the subtraction 927 - 62\n    result = 927 - 62\n\n    # Reverse the result to get the answer as Pluto would write it\n    answer = int(str(result)[::-1])\n\n    return answer\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age_now = 10\n    difference_in_age = 2\n\n    brother_age_3_years_ago = ashley_age_now - 3 - difference_in_age\n    brother_age_now = brother_age_3_years_ago + 3\n\n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n    train_length = 160  # meters\n\n    # Distance = Speed * Time\n    # Total distance covered by the train while passing the bridge\n    # includes the length of the train and the length of the bridge\n    total_distance = train_speed * time_to_pass\n\n    # Length of the bridge is the total distance minus the length of the train\n    bridge_length = total_distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n\n    return int(more_marks)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging: from 6:30 to 7:00 is 0.5 hours\n    time_jogging = 0.5\n    speed_jogging = 9 # km/h\n    \n    # Time spent walking: from 7:00 to 8:00 is 1 hour\n    time_walking = 1\n    speed_walking = 7.5 # km/h\n\n    # Distance traveled while jogging\n    distance_jogging = time_jogging * speed_jogging\n    \n    # Distance traveled while walking\n    distance_walking = time_walking * speed_walking\n    \n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the hundred's place (cannot be 0)\n    # 3 choices for the ten's place \n    # 3 choices for the one's place\n    number_of_ways = 2 * 3 * 3\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of games lost be 'L' and the number won be 'W'\n    L, W = symbols('L W')\n\n    # Equation 1: The number of games played is the sum of games won and lost\n    equation1 = Eq(W + L, 63)\n    \n    # Equation 2: The team won twice as many games as it lost\n    equation2 = Eq(W, 2 * L)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (L, W))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return (55 - 44) * common_factor\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of animals initially\n    # Let y be the number of goats initially\n    x, y = symbols('x y')\n    \n    # 65% of the animals were cows, hence 35% were goats initially\n    # equation for the initial number of goats\n    equation1 = Eq(y, 0.35 * x)\n    \n    # After adding 240 more animals, the number of cows becomes 85% of the total\n    # The number of goats doubles, so it becomes 2 * y\n    # The total number of animals is now x + 240\n    # equation for the new distribution of cows and goats\n    equation2 = Eq(0.85 * (x + 240), x * 0.65 + 240)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[y]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle with side length 'a' is given by the formula: (sqrt(3)/4) * a^2\n    \n    from math import sqrt\n    \n    # Side lengths\n    side_x = 3\n    side_y = 9\n    \n    # Areas of triangles X and Y\n    area_x = (sqrt(3) / 4) * side_x ** 2\n    area_y = (sqrt(3) / 4) * side_y ** 2\n    \n    # How many times triangle X fits into triangle Y\n    times_fit = area_y / area_x\n    \n    return int(times_fit)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    cost_pens = 5 * x * 12\n    cost_pencils = 3 * x * 5\n    total_cost = 120\n\n    equation = Eq(cost_pens + cost_pencils, total_cost)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n\n    # The girls are treated as a single unit since they want to stand together.\n    # We will place 3 teachers and 1 \"girl group\" first, then place the boys.\n    # Total spots to consider initially = 3 teachers + 1 \"girl group\" = 4 spots\n    initial_arrangement_ways = factorial(4)\n    \n    # The girls can be arranged among themselves in 3! ways.\n    girls_arrangement_ways = factorial(3)\n    \n    # With 4 units (3 teachers and 1 \"girl group\") there will be 5 spots\n    # where the boys can stand without being adjacent to each other.\n    # These are _ T _ T _ T _ \"girl group\" _\n    # The 3 boys can be placed in these 5 positions in P(5, 3) ways.\n    boys_arrangement_ways = factorial(5) // factorial(5 - 3)\n\n    # Total arrangements will be the product of all possibilities.\n    total_arrangements = initial_arrangement_ways * girls_arrangement_ways * boys_arrangement_ways\n\n    return total_arrangements\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_chosen = 2\n\n    ans = comb(num_students, num_chosen)\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    difference = product1 - product2\n\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # including the option of not having soup\n    desserts = 3  # including the option of not having dessert\n\n    # Calculate the total combinations using the multiplication principle\n    total_combinations = appetisers * main_courses * soups * desserts\n\n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for n in range(100, 200 + 1):\n        if n % 8 == 3 and n % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue_balls = symbols('blue_balls')\n\n    # Total balls is sum of red and blue balls\n    total_balls = 4 + blue_balls\n    \n    # Probability of taking one red ball is 4/total_balls\n    # Probability of taking another red ball without replacement is 3/(total_balls-1)\n    \n    # Set equality to the given probability\n    equation = Eq((4/total_balls) * (3/(total_balls - 1)), 2/7)\n    \n    # Solve for the number of blue balls\n    num_blue_balls = solve(equation, blue_balls)\n    \n    # Since number of balls is positive integer, filter non-integers or negative\n    num_blue_balls = [int(sol.evalf()) for sol in num_blue_balls if sol.is_integer and sol > 0]\n\n    # Assuming there's a unique solution and returning the first occurrence\n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    sequence = range(6, 42, 5)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    \n    # Since 1 dog = 8 rabbits, and 1 rabbit = 2 chickens,\n    # then 1 dog is equivalent to 8 * 2 chickens.\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    \n    return dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "import math\n\ndef solution():\n    # Since 2^27 = 2^1 * 2^1 * 2^1 * ... * 2^1 (27 times),\n    # We need to partition 27 into 10 parts where each part is a non-zero integer\n    # Because each part corresponds to one digit in the 10-digit number,\n    # and each digit's minimum value is 1 (2^0), we subtract 1 from each part\n    # So we are actually partitioning 27 - 10 = 17\n    target = 17\n    \n    # There are 9 dividers to partition the number into 10 parts\n    dividers = 9\n    \n    # The number of ways to partition 17 into 10 parts is equivalent \n    # to finding combinations of placing 9 dividers in 17 slots\n    total_ways = math.comb(target + dividers, dividers)\n    \n    return total_ways\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    slices_left = 4\n    slices_given = 2\n    fraction_remaining = 1 - 3/5  # Fraction of the cake that remains is 1 - 3/5\n\n    # Total slices that were left and given to friends is 1 - fraction eaten\n    total_slices_after_eating = slices_left + slices_given\n\n    # Initial number of slices is the total slices after eating divided by the remaining fraction\n    initial_slices = total_slices_after_eating / fraction_remaining\n\n    return int(initial_slices)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m and d be the hourly work rates for Mike and Danny respectively\n    m, d = symbols('m d')\n\n    # If they work together, they will finish the job in 10 hours\n    combined_work = Eq(m + d, 1/10)\n\n    # Mike types for 8 hours and then Danny types for 13 hours to finish the job\n    separate_work = Eq(8*m + 13*d, 1)\n\n    # Solve the system of equations to find the rate at which Danny works\n    rates = solve((combined_work, separate_work), (m, d))\n\n    # The time it will take Danny to finish the job is the reciprocal of his rate\n    time_for_danny = 1 / rates[d]\n\n    return time_for_danny\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1000s = 3 * 1000\n    place_value_1s = 3 * 1\n    difference = place_value_1000s - place_value_1s\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n\n    min_pencils_in_one_case = (total_pencils + pencil_cases - 1) // pencil_cases\n\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(100):  # An arbitrary range to check for possible m values\n        if custom_oplus(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n\n    # Each side will have `side_length / spacing` chess pieces, but since each corner\n    # piece is shared between two sides, we subtract 1 for each of the four corners\n    # After placing chess pieces on three sides of the square, we don't need to subtract 1\n    # for the fourth side because its corners are already accounted for.\n    \n    chess_per_side = side_length // spacing\n    total_chess = 4 * chess_per_side - 4\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # As each digit must appear at least 5 times to be painted red, and we want the minimum,\n    # distribute the count of 4 for each digit from 0 to 9 (gives 40 non red squares).\n    # The remaining 60 squares can then be filled with six distinct numbers 10 times each.\n    # So, the minimum red squares will correspond to those six distinct numbers.\n    min_red_squares = 60\n\n    return min_red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n\n    num_terms = 0\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    father_gave = 4 / 5\n\n    current_amount = initial_amount - spent_amount + father_gave\n\n    return current_amount\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # the square root of the smallest 4-digit number is ≈32 and of the largest is <100\n        square = i * i\n        str_sq = str(square)\n        if len(str_sq) == 4 and str_sq[0] == str_sq[1] and str_sq[2] == str_sq[3]:\n            return square\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    factor = 10\n    prime_factor_5_count = 0\n    prime_factor_2_count = 0\n    n = 1\n    \n    # Since 10 is made of 2 and 5 and there are always more 2s, count the number of 5s\n    while prime_factor_5_count < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            prime_factor_5_count += 1\n            temp_n = temp_n / 5\n    \n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    combined_speed = tim_speed + bob_speed\n    distance_covered = initial_distance - remaining_distance\n\n    time = distance_covered / combined_speed\n\n    return time\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    daily_climb = 3\n    nightly_slide = 1\n    net_climb = daily_climb - nightly_slide\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += daily_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= nightly_slide\n\n    return day_count\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    numbers = [3, 4, 6, 10]\n    total_sum = mean_value * 5\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon = 4\n    ben = 7\n    cris = 8\n    return lcm(akon, ben, cris)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = set(year_str)\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                d = list(perm)\n                if int(d[0]) + 1 == int(d[1]) and int(d[1]) + 1 == int(d[2]) and int(d[2]) + 1 == int(d[3]):\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = '8354'  # repeating sequence in the decimal\n    length_of_sequence = len(decimal_part)  # length of the repeating sequence\n\n    sum_of_digits = 0  # initialize the sum of digits\n    for i in range(84):  # for the first 84 digits\n        digit = int(decimal_part[i % length_of_sequence])  # the current digit\n        sum_of_digits += digit\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Number of intervals between strikes when it strikes 6 times\n    intervals_6 = 6 - 1\n    # Total duration without strikes when it strikes 6 times\n    total_duration_6 = 43 - 6 * 3\n    # Duration of one interval between strikes\n    one_interval_duration = total_duration_6 // intervals_6\n    \n    # Number of intervals between strikes when it strikes 12 times\n    intervals_12 = 12 - 1\n    # Total duration without strikes when it strikes 12 times\n    total_duration_12 = intervals_12 * one_interval_duration\n    # Total time from the first to the last strike when it strikes 12 times\n    time_12_strikes = total_duration_12 + 12 * 3\n    \n    return time_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # We distribute one pen each to ensure each child gets at least one. This leaves us with 20 - 6 = 14 pens.\n    # Now we need to divide these 14 pens amongst 6 kids, which is a problem of distributing \"n\" identical items to \"r\" distinct groups,\n    # also known as stars and bars problem. The formula for this is C(n+k-1,k-1) where n is the items and k is the groups.\n    # After distributing one each, we're left with n = 14 pens and k = 6 kids.\n    ans = nCr(14 + 6 - 1, 6 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m = 1\n    while True:\n        original_students = m ** 2 + 5\n        new_students = original_students + 18\n        n = int(new_students ** 0.5)\n        if n ** 2 == new_students:\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    minutes_per_hour = 60\n\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / minutes_per_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999 (excluding leading 0)\n    non_zero_three_digit_numbers = 9 * 9 * 8  # Excluding 0 from each of the three positions\n\n    # Total three digit numbers - numbers without any zeros = numbers with at least one zero\n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    \n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n    \n    kinetic_energy = 0.5 * mass * speed ** 2\n    \n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 200):\n        if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    nth_term = 7\n\n    seventh_term = first_term + (nth_term - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(2, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Largest odd number for the one's place\n    ones_place = 9\n\n    # Now we just need to form the smallest number with the hundreds and tens digit summing to 13\n    # Since we are forming the smallest 4-digit number, we start from the smallest thousands place digit which is 1\n    thousands_place = 1\n\n    # Now, we need to check combinations for hundreds and tens place that add up to 13\n    # Since we want smallest, we start from the smallest possible hundreds place which is 0 (but 1 is already used)\n    for hundreds_place in range(2, 10): # It cannot be 1 because the thousand place is already 1\n        tens_place = 13 - hundreds_place\n        # We also need to make sure that tens place is not 1 or the same as hundreds_place and ones_place\n        if tens_place != ones_place and tens_place != thousands_place and tens_place != hundreds_place and tens_place < 10:\n            # We have found valid hundreds and tens place\n            break\n\n    # Now, combine the digits to form the number\n    number = thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n    return number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let Jerry's speed be x miles per hour.\n    # Then, Kevin's speed is 1.5x miles per hour.\n    # Let the time taken for them to meet be t hours.\n    # Then, Jerry travels x*t miles and Kevin travels 1.5x*t miles when they meet.\n    # The sum of the distances should be equal to 225 miles, so:\n    # x*t + 1.5x*t = 225\n    # Combining like terms gives us:\n    # 2.5x*t = 225\n    # Since we want to find the distance Jerry travels, we only solve for x*t:\n    # Jerry's distance (x*t) is (1/2.5) of the total distance because 1x is to 2.5x as 1 is to 2.5.\n    # So Jerry's distance is:\n    jerrys_distance = 225 * (1/2.5)\n    return jerrys_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    piece_length = total_length / (cuts + 1)\n\n    return piece_length\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_wall_width = 4800\n    picture_width = 210\n    num_pictures = 10\n    space_between_pictures = (total_wall_width - (num_pictures * picture_width)) / (num_pictures - 1)\n    distance_from_wall_center_to_first_picture_center = (total_wall_width / 2) - (picture_width / 2)\n    center_of_third_picture_from_left = (2 * space_between_pictures) + (1.5 * picture_width)\n    distance_from_center_of_wall = distance_from_wall_center_to_first_picture_center - center_of_third_picture_from_left\n    return distance_from_center_of_wall\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 100  # Let's use 100 for simplicity; the percentage will be the same for any height.\n    bounce_height = initial_height\n    bounce_count = 0\n    critical_height = initial_height * 0.25\n    while bounce_height >= critical_height:\n        bounce_height *= 0.75  # Each bounce reaches 75% of the previous height.\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # Let the work done be W (building one bridge)\n    # Six people can build a bridge in 15 hours\n    # So, the rate of work done by six people is W/15\n\n    # We need to find out how many people (x) are needed to build the bridge in 2 hours\n    # The rate of work done by x people would be W/2\n\n    # Since the work done (W) is the same in both cases, we can equate the rates\n    # (Six people's rate) * (hours they take) = (x people's rate) * (hours they take)\n    # (6 people) * (15 hours) = (x people) * (2 hours)\n    # 6 * 15 = x * 2\n    # 90 = 2x\n    # x = 90 / 2\n    x = 90 / 2\n\n    return x\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = [5, 8, 11, 14, 17, 20]\n    ans = sum(sequence)\n    \n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    doris_future_age = 40\n    uncle_future_age = doris_future_age\n    uncle_current_age = uncle_future_age - (doris_future_age - doris_age)\n    return uncle_current_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    total_price = banana_price + apple_price\n\n    return total_price\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    start = 5\n    end = 20\n\n    ans = end - start - 1\n\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's initial equation states that if 5 is smaller than 8, then 8 plus some number equals 15.\n    # So we set the equation 8 + x = 15\n    x = 15 - 8  # This is the number that needs to be added to 8 to result in 15\n\n    # Timothy believes the number to be added to 8 is 7, to check his answer we will verify.\n    # If his reasoning is that 8 plus this number is equated to 15, he is correct.\n    timothys_answer = 7  # Timothy's proposed answer\n    correct_answer = x    # The correct number based on the equation\n\n    # Return whether Timothy's answer is correct and if not return the correct answer.\n    return timothys_answer == correct_answer, correct_answer\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    # Equation: original - 200 - 2/7 * (original - 200) = 1/3 * original\n    equation = Eq(original_money - 200 - (2/7)*(original_money - 200), (1/3)*original_money)\n    \n    ans = solve(equation, original_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as one person, so we have 6 \"slots\" to arrange\n    # But Tom and Harry can be in two different orders themselves\n    tom_and_harry = 2\n    # There are 5! ways to arrange the remaining 5 students and the Tom-Harry pair\n    others = factorial(5)\n    # Ronda must be at the furthest right, so we only arrange the remaining 6 slots\n    arrangements = others * tom_and_harry\n\n    return arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 0.05\n    second_interest_rate = 0.08\n    first_duration = 3\n    second_duration = 2\n\n    # Compound interest for the first three years\n    amount_after_first_period = initial_investment * ((1 + first_interest_rate) ** first_duration)\n    \n    # Compound interest for the next two years\n    final_amount = amount_after_first_period * ((1 + second_interest_rate) ** second_duration)\n    \n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    # The price can be any value that when rounded to the nearest $100 is 125000\n    # This would be anything in the range of [124950, 125049] since 125050 would round up\n    min_possible_price = rounded_price - 99  # Since the price is rounded to the nearest $100\n\n    # Verifying if Ryna's claim is correct\n    if min_possible_price == 125001:\n        ans = True\n    else:\n        ans = min_possible_price  # The correct lowest possible price\n\n    return ans\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Distance between city P and Q\n    d = symbols('d')\n    # Usual speed\n    v = symbols('v')\n    # Usual time\n    t = symbols('t')\n\n    # If the speed of the car is increased by 20%, it will reach its destination 1 hour earlier.\n    eq1 = Eq(d / v + 1, d / (v * 1.20))\n    \n    # If the car travels the first 200 km at its usual speed and then increases its speed by 25%, it will reach the destination 12 minutes earlier.\n    eq2 = Eq(d / v - 1/5, 200 / v + (d - 200) / (v * 1.25))\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (d, v))\n    \n    # Return the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_total = current_average * 4\n    full_score = 100\n\n    additional_tests = 0\n    while True:\n        additional_total = full_score * additional_tests\n        new_average = (current_total + additional_total) / (4 + additional_tests)\n        if new_average >= desired_average:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - distance1 - distance2\n\n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    \n    # The difference in age between Doris and her uncle will remain constant.\n    age_difference = uncle_future_age - doris_age\n    \n    # Uncle's current age is the age difference added to Doris's current age.\n    uncle_current_age = doris_age + age_difference\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n    total_performances = total_classes + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed is in m/s\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the initial number of sheep and c be the initial number of cows\n    s, c = symbols('s c', positive=True, integer=True)\n\n    # Given equation 1: the number of sheep were 5/7 the number of cows\n    equation1 = Eq(s, (5 / 7) * c)\n\n    # Given equation 2: 21 new sheep were brought and 7 cows were removed\n    # At the end: the number of cows became 3/4 the number of sheep\n    # (c - 7) = 3/4 * (s + 21)\n    equation2 = Eq((c - 7), (3 / 4) * (s + 21))\n\n    # Solving the equations to find the value of s and c\n    solutions = solve((equation1, equation2), (s, c))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = (8, 30)  # 08:30 in hours and minutes\n    end_time = (9, 25)    # 09:25 in hours and minutes\n    \n    # Convert both times to minutes\n    start_minutes = start_time[0] * 60 + start_time[1]\n    end_minutes = end_time[0] * 60 + end_time[1]\n    \n    # Calculate the difference\n    n = end_minutes - start_minutes\n    \n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 2\n    B_efficiency = 1\n    A_days = 6\n\n    work_per_day_A = A_efficiency / A_days\n    work_per_day_B = B_efficiency / (A_days * 2)  # B's efficiency is half of A's\n\n    total_work_per_day = work_per_day_A + work_per_day_B\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Geoff's current age + Sister's current age = 22\n    # Let's say after x years, the sum of their ages will be 30\n    # (Geoff's current age + x) + (Sister's current age + x) = 30\n    # Simplifying,\n    # Geoff's current age + Sister's current age + 2*x = 30\n    # Substitute the given sum of ages,\n    # 22 + 2*x = 30\n    # Solving for x,\n    x = (30 - 22) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50 # cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30 # cost of a packet of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost # cost of a big packet of jelly in dollars\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_candies = symbols('total_candies')\n    \n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_and_dawn = total_candies - (anna + belle)\n    \n    equation = Eq(anna + belle - cathy_and_dawn, 90)\n    total_candies_solution = solve(equation, total_candies)\n    \n    return total_candies_solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    from fractions import Fraction\n\n    # Simplify the fraction 18/36 to find its equivalent simplified form\n    simplified_fraction = Fraction(18, 36)\n    \n    # Since the simplified value of 18/36 is 1/2, we find the numerator that makes 1/2 when the denominator is 32\n    numerator = simplified_fraction.numerator * 32 / simplified_fraction.denominator\n    \n    return int(numerator)  # Ensure the answer is an integer\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants_after_joel = 4\n    plants_joel_left = (remaining_plants_after_joel + 2) * 2\n    plants_valerie_left = (plants_joel_left + 3) * 2\n    initial_plants = (plants_valerie_left + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fish_balls = symbols('initial_fish_balls')\n\n    morning_sold = 3 / 4 * initial_fish_balls\n    remaining_after_morning = initial_fish_balls - morning_sold\n    afternoon_sold = 1 / 3 * remaining_after_morning\n\n    remaining_after_afternoon = remaining_after_morning - afternoon_sold\n    made_additional = 506\n\n    final_count = 2 * initial_fish_balls\n\n    equation = Eq(remaining_after_afternoon + made_additional, final_count)\n\n    initial_count_solution = solve(equation, initial_fish_balls)\n\n    return initial_count_solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate - chocolate / 6 + vanilla - 2 * vanilla / 3 + blueberry - 7 * blueberry / 9, 427)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Number of chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    transfer_books = (beck_books - chris_books) / 2\n    return int(transfer_books)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boy_ratio = 2\n    girl_ratio = 7\n    total_boys = 14\n\n    total_students = total_boys * (boy_ratio + girl_ratio) // boy_ratio\n    \n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_of_2_cheese_cakes = 2 * cheese_cake_price\n    \n    return price_of_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    # Solve for the circle symbol\n    circle_value = (6*6 + 2 - 17) // 3\n    \n    return circle_value\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for number in range(400, 501):\n        if number % 3 == 1 and number % 5 == 3 and number % 7 == 5:\n            return number\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    num_pigs = 8\n    green_apples = num_pigs\n    red_apples = num_pigs // 2\n    \n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    dead_seeds = total_seeds / 4\n    grown_sunflowers = total_seeds - dead_seeds\n    \n    return int(grown_sunflowers)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n\n    equation1 = Eq(x % 5, 3)\n    equation2 = Eq(x % 7, 4)\n    equation3 = Eq(x % 9, 5)\n\n    sol = solve((equation1, equation2, equation3), x)\n    return min(sol)\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    cycle_length = 2  # deposit on one day, spend on the next\n    full_cycles = days // cycle_length\n    remaining_days = days % cycle_length\n\n    # Calculate total for complete cycles\n    money_after_full_cycles = initial_amount + (10 - 8) * full_cycles\n\n    # Calculate for remaining days if any\n    if remaining_days > 0:\n        money_after_full_cycles += 10  # only a deposit happens on the first day of a cycle\n\n    return money_after_full_cycles\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    # x ≡ 1 (mod 2)\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x\n    x, _ = solve_congruence(*congruences)\n    \n    return x\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    return durians_left\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    # Given the final answer after all operations is 54\n    final_answer = 54\n    \n    # To find the original number we need to perform the inverse operations in reverse order\n    # First, multiply by 4\n    result_after_addition = final_answer * 4\n    \n    # Then, subtract 178\n    result_after_multiplication = result_after_addition - 178\n    \n    # Finally, divide by 2 to find Michael's original number\n    original_number = result_after_multiplication / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n    \n    # Equations based on the problem statement\n    # Mary and Alexis's stickers have a ratio of 7:5\n    equation_ratio = Eq(mary / alexis, 7 / 5)\n    \n    # When Mary and Alexis give 20% away, they have 80% left\n    mary_after = mary * 0.8\n    alexis_after = alexis * 0.8\n    \n    # Charlotte's stickers increased by 80%\n    charlotte_final_after_giving = charlotte_initial + mary * 0.2 + alexis * 0.2\n    equation_charlotte = Eq(charlotte_final_after_giving, charlotte_initial * 1.8)\n    \n    # Mary has 20 more stickers than Charlotte\n    equation_mary_charlotte_difference = Eq(mary_after, charlotte_final_after_giving + 20)\n    \n    # Solve system of equations\n    solutions = solve((equation_ratio, equation_charlotte, equation_mary_charlotte_difference), (mary, alexis, charlotte_initial, charlotte_final))\n    \n    # Return the result for Alexis's initial sticker count\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance as d and original speed as s\n    d, s = symbols('d s')\n\n    # Original speed equation\n    equation1 = Eq(d, s * 8)\n\n    # Speed for arriving one hour earlier\n    equation2 = Eq(d, (s + 5) * 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, s))\n\n    # We need to find the distance only\n    return solutions[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1   # 4! ways to arrange without any restrictions\n    \n    # when Claire and Tony sit across each other, we have:\n    # Claire in position, Tony in front, and Chantel and Cale can switch places\n    # This gives 2 ways since Claire and Tony have 2 possible starting positions\n    across_ways = 2 * 2 * 1   # Account for Chantel and Cale switching\n    \n    # Subtract the number of prohibited ways (Claire sitting across Tony)\n    allowed_ways = total_ways - across_ways\n    \n    return allowed_ways\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for banana and pear prices\n    banana, pear = symbols('banana pear')\n\n    # Eq1: The equation for Max's purchase\n    equation1 = Eq(banana + 2 * pear, 94)\n\n    # Eq2: The equation for Emily's purchase\n    equation2 = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    ans = 32 * 47\n    return ans\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_combinations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_combinations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    poison_bottles = 1000\n    test_tubes = 0\n    while (2 ** test_tubes) < poison_bottles:\n        test_tubes += 1\n        \n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    number_of_chairs_initially = 10\n    number_of_chairs_removed = 3\n    \n    # Calculate the number of spaces between chairs after removing 3 chairs\n    number_of_spaces = (number_of_chairs_initially - number_of_chairs_removed) - 1\n    \n    # Calculate the distance between each chair after the chairs are removed\n    distance_between_chairs = total_distance / number_of_spaces\n    \n    return distance_between_chairs\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Define symbols for the number of books each brother has\n    x, y, z = symbols('x y z', integer=True)\n\n    # Equation representing that each brother has at least two books\n    eq1 = Eq(x, 2)\n    eq2 = Eq(y, 2)\n    \n    # Equation representing the sum of the books\n    total_eq = Eq(x + y + z, 10)\n\n    # Solve the system of equations\n    solutions = solve((total_eq, eq1, eq2), (x, y, z))\n\n    # Since the brothers are indistinguishable and each has at least 2 books,\n    # we just need to distribute the remaining 6 books which can be done in\n    # 3 ways: [6,0,0], [5,1,0], [4,2,0]\n\n    # These 3 ways can be distributed among the 3 brothers in any order,\n    # which makes them consider the same as per the question.\n\n    # Hence, there are 3 ways to distribute the remaining books.\n    return len(solutions)\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the fourth angle, so 5x is the third angle\n    x = symbols('x')\n    equation = Eq(90 + 90 + 5*x + x, 360) # sum of angles in quadrilateral is 360 degrees\n\n    angle_x = solve(equation, x)[0]\n    largest_angle = 5 * angle_x\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n    \n    # Calculate ways to reach step 4 (avoiding step 5)\n    ways_to_4 = count_ways(4)\n    # Calculate ways to reach step 10 from step 4 (without stepping on 5)\n    ways_from_4_to_10 = count_ways(10-4-1)\n    \n    # Total ways to reach step 10 without stepping on step 5\n    ans = ways_to_4 * ways_from_4_to_10\n    return ans\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and 7007 // i < 100 and i % 7 == 0 and (7007 // i) % 7 == 0:\n            factors.append(i)\n            factors.append(7007 // i)\n\n    ans = sum(set(factors))  # Using set to ensure the factors are unique\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = (len(sequence) - 1) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # One entrance, no waiting after 16 mins\n    one_entrance_check_in_rate = check_in_per_entrance - visitors_per_minute\n    number_of_visitors = one_entrance_check_in_rate * 16\n\n    # Two entrances, we need to find how long it will take to check in the same number of visitors\n    two_entrances_check_in_rate = 2 * check_in_per_entrance - visitors_per_minute\n    time_with_two_entrances = number_of_visitors / two_entrances_check_in_rate\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n\n    total_carrots = carrots_per_week * weeks\n\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    distance_miles = miles_per_hour * hours\n    miles_to_km = 1.60934  # 1 mile = 1.60934 kilometers\n    \n    distance_km = distance_miles * miles_to_km\n\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n\n    equation1 = Eq(frogs_begin - dragonflies_begin, 9)\n    equation2 = Eq(frogs_begin - (11-10), dragonflies_begin + (10-11))\n\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_climbed_per_day = 5\n    distance_slid_per_night = 3\n    net_distance_per_day = distance_climbed_per_day - distance_slid_per_night\n    total_distance_to_climb = 16\n    days = 0\n\n    while total_distance_to_climb > 0:\n        days += 1\n        total_distance_to_climb -= distance_climbed_per_day\n        if total_distance_to_climb <= 0:\n            break\n        total_distance_to_climb += distance_slid_per_night\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # The number of cookies she baked was 24 more than the number of muffins.\n    equation1 = Eq(cookies, muffins + 24)\n\n    # After selling 3/4 of her muffins and 5/8 of her cookies, she had 74 cookies and muffins left in total.\n    equation2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    # Return the number of cookies she baked at first\n    return solutions[cookies]\n\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 999 - (999 % 25)\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming the cost of the metro both ways, a cup of coffee and the entry fee to be\n    # m, c, and e respectively per person including Richard\n    richard, friends, m, c, e = symbols('richard friends m c e')\n\n    # Total expenses when Richard takes n friends; we use (friends + 1) because we must\n    # include Richard's expenses as well\n    total_expenses = Eq(m * (friends + 1) + c * (friends + 1) + e * (friends + 1), 40)\n\n    # We need expressions (or numbers) for m, c, e to find the number of friends ('friends')\n    # Since we do not have sufficient information about m, c, e, we can't solve this equation.\n    #\n    # Please provide the values for metro both ways (m), cup of coffee (c), \n    # and the entry fee (e) to proceed with the solution.\n\n    return None\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        num = int(f\"123{A}456{A}789{A}2\")\n        if num % 9 == 0 and num % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    driver_speed_ratio = 13\n    cyclist_speed_ratio = 2\n    extra_time_cyclist = 143  # in minutes\n\n    # Speed is inversely proportional to time, so their time ratio is the inverse of their speed ratio\n    driver_time_ratio = cyclist_speed_ratio\n    cyclist_time_ratio = driver_speed_ratio\n\n    # Cyclist takes 143 minutes more than the driver\n    # Hence, difference in time is one part of the time ratio\n    time_ratio_difference = cyclist_time_ratio - driver_time_ratio\n\n    # Calculate how many minutes one part of the time ratio is equivalent to\n    time_per_part = extra_time_cyclist / time_ratio_difference\n\n    # Now calculate driver's time using the driver's part of the time ratio\n    driver_time = time_per_part * driver_time_ratio\n\n    return driver_time\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(2, n + 1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    sausage_rolls_cost = 4 * 24\n    hotdogs_cost = 5 * 81\n    drinks_cost = 7 * 20\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Implementing a simple logical check based on the conditions of the statements\n    statements = [False, False, False, False, False]  # Initial assumption that all statements are false\n    \n    # Iterating over each statement to check which one can be true independently\n    for i in range(len(statements)):\n        # Hypothetically assume the i-th statement is true\n        statements[i] = True\n        # Check logical consistency based on the given conditions:\n        # Statement 1 says all are correct, which contradicts making only one statement true\n        # Statement 2 says none is correct, which cannot be true as we assumed that statement i is true\n        # Statement 3 says one above (which implies statement 1 or 2) is correct, hence it cannot be true by our loop\n        # Statement 4 says all above are correct, which contradicts making only one statement true\n        # Statement 5 says none above is correct, which can only be true if statement 4 is assumed to be true by us\n        if ((i == 4 and not any(statements[:4])) or   # None of the statements above (1-4) are correct\n            (i != 4 and not any(statements[:i]+statements[i+1:]))): # Only i-th statement is assumed true\n            return i+1  # Python is 0-indexed, but we're dealing with 1-indexed statements\n        # Reset the i-th statement to false for the next iteration.\n        statements[i] = False\n\n# Store the returned value from the solution function\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n\n    # Equation representing the situation before flipping coins\n    # 1/4 * x = number of heads before flipping\n    equation1 = Eq(1/4 * x, (1/3 * x) - 2)\n\n    # Solve the equation for x\n    num_coins = solve(equation1, x)\n\n    return num_coins[0]\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ans = trains + cars + flights\n\n    return ans\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500  # total length of the road in meters\n    total_days = 5      # total days to pave the road\n\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "import math\n\ndef solution():\n    singing_shows = 5\n    comedy_shows = 3\n    # Comedy shows cannot be performed consecutively, so we can insert them into\n    # the \"slots\" created between and around the 5 singing shows.\n    # We have 6 slots (before the first show, between each pair of singing shows, \n    # and after the last show) but only need 3 slots for comedy shows to ensure \n    # non-consecutiveness, i.e., we choose 3 slots out of 6.\n    slots = 6\n\n    # Calculate the number of ways to choose 3 comedy show slots out of the possible 6. \n    slot_options = math.comb(slots, comedy_shows)\n\n    # Now calculate the permutations of these 8 shows, taking into account that\n    # the 5 singing shows are identical and the 3 comedy shows are identical.\n    total_shows = singing_shows + comedy_shows\n    total_permutations = math.factorial(total_shows) // (math.factorial(singing_shows) * math.factorial(comedy_shows))\n\n    # The total arrangements are the product of the permutations for choosing slots\n    # and arranging shows within those slots.\n    arrangements = slot_options * total_permutations\n    return arrangements\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Since the pattern repeats every 6 digits (2, 3, 4, 5, 6, [0]), we just need to calculate \n    # how many complete patterns there are in 2100 digits and the sum of the remaining digits.\n    \n    # One complete pattern sum (digits 2, 3, 4, 5, 6, [0]) is 2 + 3 + 4 + 5 + 6 = 20\n    full_pattern_sum = 20\n    \n    # There are 2100 / 6 full patterns\n    full_patterns = 2100 // 6\n    \n    # Calculate the sum of all full patterns\n    sum_full_patterns = full_patterns * full_pattern_sum\n    \n    # Find out how many extra digits beyond full patterns\n    remaining_digits = 2100 % 6\n    \n    # Calculate the sum of the remaining digits, the sequence restarts after the pattern\n    remaining_sum = sum(range(2, 2 + remaining_digits))\n    \n    # The final answer is the sum of all full patterns and the sum of the remaining digits\n    ans = sum_full_patterns + remaining_sum\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert fractions to decimals\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Find the middle value\n    middle_index = len(numbers) // 2\n    ans = numbers[middle_index]\n    \n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown number\n    x = symbols('x')\n    \n    # Set up the equation based on the problem description\n    equation = Eq(((x * 5) + 7) / 4, 8)\n    \n    # Solve the equation for the original number x\n    original_number = solve(equation, x)\n    \n    # Return the solution\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    return (12 + 9) * 2\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # As the table rotation counts the same order,\n    # fix one person's position and arrange the remaining 5\n    ans = factorial(5)\n\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let 's' be the number of steps of the escalator.\n    # Let 'e' be the speed of the escalator in steps per second.\n    \n    # When Peter walks at 1 step per second and takes 10 steps:\n    # Total time to reach the top is 10 seconds.\n    # In 10 seconds, the escalator would have contributed '10e' steps.\n    \n    # When Peter walks at 2 steps per second and takes 16 steps:\n    # Total time to reach the top is 8 seconds.\n    # In 8 seconds, the escalator would have contributed '8e' steps.\n    \n    # We know that the total number of steps is the sum\n    # of Peter's steps and the escalator's steps in both cases:\n    # s = 10 + 10e (1)\n    # s = 16 + 8e  (2)\n    \n    # Now we can solve the two equations:\n    # Subtract (2) from (1): 10 + 10e - (16 + 8e) = 0\n    # 10e - 8e = 16 - 10\n    # 2e = 6\n    e = 3  # Speed of escalator in steps per second\n    \n    # Substitute 'e' back into equation (1) to find 's':\n    # s = 10 + 10 * 3\n    s = 10 + 30  # Number of steps of the escalator\n    \n    return s\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    dollars = 3.5\n    quarters_per_dollar = 4\n    total_quarters = dollars * quarters_per_dollar\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Cost of the chocolate bar in pence\n    chocolate_cost_p = 72\n\n    # Cost of each balloon in pence\n    balloon_cost_p = 20\n\n    # Total money given in pence\n    total_money_p = 1000  # ￡10 note in pence\n\n    # Change received in pence\n    change_p = 388  # ￡3.88 in pence\n\n    # Money spent on balloons in pence\n    money_spent_on_balloons_p = total_money_p - change_p - chocolate_cost_p\n\n    # Number of balloons bought\n    num_balloons = money_spent_on_balloons_p // balloon_cost_p\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "from math import lcm\n\ndef solution():\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percent = 45\n    total_length = 2000\n\n    length = (percent / 100) * total_length\n\n    return int(length)\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity_per_kayak = 4\n    \n    num_kayaks = (students + capacity_per_kayak - 1) // capacity_per_kayak\n    \n    return num_kayaks\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    money_spent_fraction = 2 / 9\n    money_spent = total_money * money_spent_fraction\n    money_left = total_money - money_spent\n\n    # Let the cost of 1 cupcake be c and the cost of 1 slice of pizza be p.\n    # 3p = 2c -> p = 2c/3\n    # Total cost of 5 cupcakes and 6 slices of pizza\n    # 5c + 6(2c/3) = money_spent\n    # 5c + 4c = money_spent\n    # 9c = money_spent\n    # c = money_spent / 9\n    cost_per_cupcake = money_spent / 9\n\n    # Max number of cupcakes he could buy\n    max_cupcakes = money_left // cost_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_number = float(\"inf\")\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < min_even_number:\n            min_even_number = number\n            \n    return min_even_number\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    a = 4 * (3 ** 0.5)\n    eq_left = 3 * a\n    eq_right = (3 * a ** 2) ** 0.5\n    x = (eq_left / (3 ** 0.5)) ** 2\n    return x\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    result = (4 + 2) * 13 - (4 + (2 * 13))\n    return result\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the age of the youngest dwarf be x,\n    # then the ages of the youngest three are x, x+1, and x+2.\n    # Their sum is:\n    # x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    x = 39 / 3\n\n    # The ages of the oldest three are:\n    # x + 4, x + 5, and x + 6.\n    # Their sum is:\n    ans = (x + 4) + (x + 5) + (x + 6)\n    return ans\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    num = 2\n    while num <= 25555:\n        if sqrt(num).is_integer():\n            count += 1\n        num = num * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Initially, there were 10 pieces of paper\n    initial_pieces = 10\n    \n    # After some pieces were cut, there are now 16 pieces of paper\n    final_pieces = 16\n    \n    # Let's denote x as the number of pieces that were cut into three parts\n    # Each piece that is cut into three parts creates 2 additional pieces (one piece becomes three)\n    # So the equation is:\n    # initial_pieces + 2*x = final_pieces\n    # We solve for x:\n    x = (final_pieces - initial_pieces) // 2\n    \n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # 6 workers produce 120 parts in 4 minutes\n    # This means each worker produces 120 parts / 6 workers in 4 minutes\n    parts_per_worker = 120 / 6\n\n    # Now we need to find out how many parts 3 workers produce in 10 minutes\n    # We know 1 worker produces parts_per_worker parts in 4 minutes\n    # So in 10 minutes, 1 worker would produce:\n    parts_per_worker_10min = (parts_per_worker / 4) * 10\n\n    # Finally, if 3 workers work together, they will produce:\n    parts_3_workers_10min = 3 * parts_per_worker_10min\n\n    return parts_3_workers_10min\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original = 98\n    new_value = 44.1\n    percent_change = ((new_value - original) / original) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n    \n    n_candidates = divisors(2240)\n    for n in n_candidates:\n        if is_square(2240 // n):\n            return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimmers = total_pupils * 0.70\n    non_swimmer_boys_pct = 0.40\n    swimming_girls = 200\n\n    # Let x be the number of boys, then (total_pupils - x) is the number of girls\n    # Since 40% of boys cannot swim, 60% of the boys can swim\n    for boys in range(total_pupils + 1):\n        if (boys * 0.6) + swimming_girls == swimmers:\n            girls = total_pupils - boys\n            return girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1/4\n    \n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_fraction\n    non_rotten_apples = total_apples - rotten_apples\n    \n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n    percentage_increase = ((new - original) / original) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    ans = sum_of_cubes\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the quantity of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation for the total sugar from both solutions\n    total_sugar = (4 * 30/100) + (x * 10/100)\n\n    # Equation for the total weight of the mixture\n    total_weight = 4 + x\n\n    # Equation for the concentration of the final mixture\n    concentration_eq = Eq((total_sugar / total_weight), 26/100)\n\n    # Solve for x\n    sol = solve(concentration_eq, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let x be the mass of the jar, and y be the mass of one chocolate\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + 5*y, 185)\n    equation2 = Eq(x + 17*y, 317)\n\n    # Solve the two equations\n    solution = solve((equation1, equation2), (x, y))\n\n    # Find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solution[x] + 10*solution[y]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n    \n    num_ways = count_divisors(200) - 1 # Subtract 1 to exclude the number itself as a sum\n    return num_ways\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def new_operator(a, b):\n        return a * b - a - b + 1\n\n    ans = new_operator(new_operator(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total perimeter of the field in meters\n    perimeter = 2 * (144 + 204)\n\n    # Total number of intervals between the wheat plants\n    # Subtracting 4 because there's already one wheat plant at each corner\n    intervals = 116 - 4\n\n    # Distance between each wheat plant, which is the perimeter divided by the number of intervals\n    distance = perimeter / intervals\n\n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let lana and mark represent the number of sweets they originally had\n    lana, mark = symbols('lana mark')\n    \n    # Write the equations based on the information provided\n    eq1 = Eq(lana + mark, 674)                    # Lana's sweets plus Mark's sweets equal 674\n    eq2 = Eq(lana - lana/3, mark - 34)            # After Lana gave 1/3 and Mark ate 34 they had the same number\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (lana, mark))\n    \n    return solutions[lana] - solutions[mark]\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let's assume the total summer holiday is x days.\n    # He spent x/2 days working.\n    # He spent (x/2)/2 = x/4 days reading and relaxing.\n    # After spending 4 days at a friend's house, he had 2 weeks (14 days) left.\n    # So the equation would be: x/2 + x/4 + 4 + 14 = x\n    # Simplifying the equation: 3/4 * x + 18 = x\n    # Which gives us: 1/4 * x = 18\n    # Therefore, x = 18 * 4\n\n    x = 18 * 4\n    return x\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # If one cat takes 10 minutes to catch a fish, \n    # five cats would also take 10 minutes to catch five fish,\n    # since they are working simultaneously.\n    \n    time_for_one_fish = 10  # minutes for one cat to catch one fish\n    ans = time_for_one_fish  # minutes for five cats to catch five fish\n    return ans\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, watermelon = symbols('pineapple watermelon')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (pineapple, watermelon))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field\n    num_wheat_with_corners = 116 - 4  # Subtract the 4 corner wheat from the total\n    distance_between_wheat = perimeter / num_wheat_with_corners  # The distance between each wheat\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    # reverse the operations starting from 81\n    initial_result = 81\n    # first reverse multiplication by 9\n    after_division = initial_result / 9\n    # then reverse division by 4\n    after_addition = after_division * 4\n    # finally reverse addition of 3\n    original_number = after_addition - 3\n    \n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * (2/7)\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = remaining_bracelets * (3/5)\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    \n    return more_bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total people to interview\n    total_people = 200\n\n    # Ellie's rate of interviewing people per week\n    ellie_rate = 40\n\n    # Collaborative time to finish the work in weeks\n    collaborative_time = 4\n\n    # Collaborative work done in a week\n    collaborative_weekly_work = total_people / collaborative_time\n\n    # Gloria's rate of interviewing people per week\n    gloria_rate = collaborative_weekly_work - ellie_rate\n\n    # Time taken for Gloria to finish interviewing everyone by herself\n    time_for_gloria = total_people / gloria_rate\n\n    return time_for_gloria\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    ans = (3/8) * 48\n    return ans\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * x  # x is the percent of rice in dogfood B\n    percent_rice_mixture = 0.28\n\n    # Set up the equation: total rice in the mixture / total weight of the mixture = percent rice in the mixture\n    equation = (15 * 0.40 + 60 * x) / total_weight - percent_rice_mixture\n\n    # Solve for x\n    ans = (percent_rice_mixture * total_weight - 15 * 0.40) / 60\n\n    return ans * 100  # Convert to percent\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    # Since B=2 and D=0, we substitute:\n    # 5 × ABCDEF = 6 × EFABCD becomes:\n    # 5 × A20C0F = 6 × 0FAC20\n    # and also 0FAC20 has to be divisible by 5, so F must be 5 or 0,\n    # but since D is already 0, F must be 5.\n    \n    # So the equation now is:\n    # 5 × A20C05 = 6 × 05AC20 and we need to find valid digits for A, C, and E\n    # that satisfy this equation.\n\n    ans = 0\n\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                # Avoid duplicate digits\n                if len(set([A, 2, 0, C, 0, 5])) == 5:\n                    num1 = int(f\"{A}20{C}05\")\n                    num2 = int(f\"05{A}C20\")\n                    if 5 * num1 == 6 * num2:\n                        # Found the correct digits\n                        ans = int(f\"{A}20{C}05\")\n                        # Extracting the 4 digit number FACE\n                        FACE = int(f\"{A}{C}05\")\n                        return FACE\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    minutes_in_2_hours = 2 * 60\n    total_leakage_in_milliliters = leak_rate_per_minute * minutes_in_2_hours\n    total_leakage_in_liters = total_leakage_in_milliliters / 1000  # converting milliliters to liters\n    return total_leakage_in_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    distance = 150\n    spacing = 10\n\n    num_trees = (distance / spacing) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let x be the distance to the shopping mall\n    # Time taken by Barbara to reach the mall = Time taken by Catherine to cover (x - 60) metres\n    # Barbara's speed = 60 m/min, Catherine's speed = 45 m/min\n    # Time = Distance / Speed\n    # x / 60 = (x - 60) / 45\n    # Solve for x:\n    # 45x = 60(x - 60)\n    x = symbols('x')\n    equation = Eq(45 * x, 60 * (x - 60))\n    distance_to_mall = solve(equation, x)[0]\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one book and one pen\n    book, pen = symbols('book pen')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pens, 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pen))\n\n    # Return the cost of one pen\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = (2 * 10) + (5 * 5) + (4 * 0.20)\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A + B + C, 200)\n    equation2 = Eq(A, B * 4/3)\n    equation3 = Eq(A, C + 20)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes\n    total_time = 18  # minutes\n    num_plates = total_time // time_per_plate\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    solutions = solve(equation, x)\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            students_facing_teacher += 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n\n    ans = numerator // denominator\n    \n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * (2/5)\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * (7/9)\n\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Initialize min_apples to 3 (each student gets at least 3 apples)\n    min_apples = 3\n\n    # Calculate the class size using the pigeonhole principle\n    # Add 1 to the result because we start counting students from 1, not 0\n    class_size = (29 // min_apples) + 1\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    # Let's define the four variables for the numbers\n    a, b, c, d = symbols('a b c d')\n  \n    # Given conditions\n    equation1 = Eq(a + (b + c + d) / 3, 39)  # The smallest number and the average of the other three numbers is 39\n    equation2 = Eq(d + (a + b + c) / 3, 51)  # The sum of the largest number and the average of the other three numbers is 51\n    equation3 = Eq(a < b)\n    equation4 = Eq(b < c)\n    equation5 = Eq(c < d)\n\n    # Solving the equations for the variables\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Only one solution satisfies the conditions of distinct positive whole numbers in descending order\n    valid_solutions = [s for s in solutions if s[d] > s[a] and s[a] > 0 and s[d] > 0]\n  \n    # The largest possible value of the largest number\n    largest_value = max([s[d] for s in valid_solutions])\n    \n    return largest_value\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if isprime(reversed_num) and num != reversed_num:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_price = 140\n    new_price = 87.5\n    percent_change = ((new_price - original_price) / original_price) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    # Let x be the number of blue balls and y be the number of green balls initially\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    # Total number of balls is 140\n    equation1 = Eq(x + y, 140)\n    # After removing 2/5 of the blue balls and 28 green balls, we have an equal number of each\n    equation2 = Eq(x - (2/5)*x, y - 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want the number of blue balls originally, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Relative probability of being in any one of the three bars is equal (1/3)\n    # Since the alcoholic is not in two of the bars, he must be in the third bar\n    probability = 1 - 0.1  # Since the alcoholic drinks 90% of the day, the probability of being in a bar is 100% - 90%\n    return probability\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot_age_now, cousin_age_now = symbols('eliot_age_now cousin_age_now')\n\n    equation1 = Eq(eliot_age_now, 2 * cousin_age_now)\n    equation2 = Eq(eliot_age_now + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot_age_now, cousin_age_now))\n\n    cousin_age_later = solutions[cousin_age_now] + 4\n\n    return cousin_age_later\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_first_catch = 100\n    total_second_catch = 100\n    marked_second_catch = 16\n\n    estimated_total_fish = (marked_first_catch * total_second_catch) / marked_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Set up the variables for proportions of distances covered by Nancy and Randy.\n    # Their speed ratio is nancy_speed:randy_speed = 2:3\n    # Let x be the distance that Nancy walked. So, Randy will have walked x + 10.\n    # According to their speed ratio, if Nancy walks 2 meters, Randy walks 3 meters.\n    # Therefore, for the distance Nancy walks (x), Randy walks (3/2) * x. \n    # But we know that Randy walks x + 10 meters. So we have the equation:\n    # (3/2) * x = x + 10\n    \n    # Now we can solve the equation for x.\n    x = (2 / 3) * 10  # Rearrange the equation to solve for x: x = (2/3) * (x + 10)\n    randy_distance = x + 10\n    \n    # Total distance is the sum of distances covered by Nancy and Randy\n    total_distance = x + randy_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    \n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator_1 = 1 * 99 + 3  # 1 and 3/99\n    denominator_1 = 99\n    numerator_2 = 3 * 33 + 3  # 3 and 3/33\n    denominator_2 = 33\n    numerator_3 = 9 * 11 + 3  # 9 and 3/11\n    denominator_3 = 11\n\n    # Calculate the numerator and denominator of the entire fraction\n    total_numerator = (numerator_1 / denominator_1) + (numerator_2 / denominator_2) + (numerator_3 / denominator_3)\n    total_denominator = (1 * 99 + 1) / 99 + (3 * 33 + 1) / 33 + (9 * 11 + 1) / 11\n    \n    # Calculate the final result\n    ans = total_numerator / total_denominator\n    \n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be represented by y\n    y = 0.20141414141414...\n\n    # Multiply y by 100 to shift the decimal two places to the right\n    # i.e., 100y = 20.141414141414...\n    # since only the '14' is repeating.\n    y *= 100\n\n    # Now subtract the original number from the new number to get rid of the repeating part\n    # 100y - y = 20.141414141414... - 0.201414141414...\n    # 99y = 20.14 - 0.20 = 19.94\n    y = 19.94 / 99\n\n    # x is related to y through the equation x/9900 = y\n    # So to find x we multiply both sides by 9900\n    # x = 9900 * y\n    x = 9900 * y\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # Setup the equations\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    series_sum_1 = sum(range(10, 21, 2))\n    series_sum_2 = sum(range(9, 20, 2))\n    ans = series_sum_1 - series_sum_2\n    return ans\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # The last digit must be even\n                if hundreds + tens + ones == 8 and len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):  # six-digit numbers\n        if num % 10 == 2:  # ends with 2\n            new_num = int(str(2) + str(num)[:-1])  # put 2 at the beginning\n            if new_num == num // 3:  # new number is one-third of original\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    # Using the inclusion-exclusion principle\n    pass_only_first_exam = pass_first_exam - (total_students - fail_second_exam - pass_second_fail_first)\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alice, sister = symbols('alice sister')\n\n    # Create the system of equations\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + sister + 20, 53)  # In 10 years' time, their total age is 53 years\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (alice, sister))\n\n    # Extract the solution for Alice's current age\n    return solution[alice]\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 500:\n        num += 5 * 8 * 9\n\n    return num\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    num_people = 4\n\n    remainder = total_bars % num_people\n\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit a, b, c will appear twice at each place value (hundreds, tens, ones)\n    digit_sum = 2 * (a + b + c)\n    \n    # Multiply by place values (hundreds place is worth 100, tens place is worth 10, ones place is 1)\n    sum_of_numbers = digit_sum * 100 + digit_sum * 10 + digit_sum\n\n    return sum_of_numbers\n\n# Assign the variables a, b, c to the digits. This is just for an example.\n# In the real use case, these values should be provided.\na, b, c = 1, 2, 3  # Example digits\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            if product % 100 == 0:\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_needed = 300 / rate_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    large_sack, small_sack = symbols('large_sack small_sack')\n\n    # Given equations from the problem\n    equation1 = Eq(large_sack, small_sack * 1.2)  # large sack holds 20% more potatoes than small sack\n    equation2 = Eq(large_sack + small_sack, 77)   # together they contain 77 potatoes\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the oranges be 'o' and apples be 'a'\n    o, a = symbols('o a')\n\n    # Equation representing the total amount of oranges and apples\n    equation1 = Eq(o + a, 125)\n\n    # Equation after selling oranges and half of the apples\n    equation2 = Eq(o - 35, a / 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (o, a))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome will be 10001 (1 followed by four zeros, one more 1)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome will be 999999 (six 9s)\n    greatest_6_digit_palindrome = 999999\n    \n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    min_cabins = (students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):  # Since we want the count until 58, loop goes to 59 (exclusive)\n        count += len(str(i))  # Convert each number to string and get the length\n    return count\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    current_length = 0\n    num_digits = 0\n\n    for i in range(1200, 0, -1):\n        num_digits = len(str(i))\n        current_length += num_digits\n        if current_length >= 2011:\n            break\n\n    digits_left = current_length - 2011\n    specific_number_str = str(i)\n\n    ans = int(specific_number_str[-digits_left - 1])\n\n    return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14  # The picture book is the 14th book from the left\n    books_on_right = 6       # There are 6 books on the right side of the picture book\n\n    # The total number of books is the position of the picture book from the left plus the number of books on the right\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    sum_multiples = sum(range(5, 51, 5))\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    # Both planets are moving towards each other so their relative speed is the sum of their speeds.\n    relative_speed_km_per_minute = 30 + 40  # km/minute\n\n    # The number of minutes before they collided.\n    time_before_collision_minutes = 5\n\n    # Distance is speed multiplied by time.\n    distance_km_apart = relative_speed_km_per_minute * time_before_collision_minutes\n\n    return distance_km_apart\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the total number of coins\n    c = symbols('c')\n\n    # Initial condition: 1/4 are heads\n    initial_heads = c / 4\n\n    # After flipping two coins: (initial_heads + 2) are now heads, which is 1/3 of total coins\n    new_heads = (c / 4) + 2\n\n    # Equation representing the new distribution of heads\n    equation = Eq(new_heads, c / 3)\n\n    # Solve for the number of coins\n    coins = solve(equation, c)\n\n    return coins[0]\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let's denote the number of cars as c and the number of motorbikes as m.\n    # Each car has 4 tyres and each motorbike has 2 tyres, and we know the following:\n    # c + m = 140 vehicles in total\n    # 4c + 2m = 490 tyres in total\n\n    # We will set up a system of equations based on the above information and solve it.\n    # c + m = 140 => m = 140 - c\n    # Substitute m in the second equation:\n    # 4c + 2(140 - c) = 490\n    # Simplify and solve for c:\n    # 4c + 280 - 2c = 490\n    # 2c + 280 = 490\n    # 2c = 210\n    # c = 105\n\n    c = (490 - 2 * 140) / 2\n    return int(c)\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Initialize count\n    count = 0\n    \n    # Loop for the first digit, can't be 0\n    for first_digit in range(1, 6):\n        # Loop for the second digit, can be 0-5\n        for second_digit in range(6):\n            # Two digits together make a two-digit number\n            # Increament count for each combination\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_ratio = 4\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve, mod\n\n    a = symbols('a')\n    num = symbols('num', integer=True)\n\n    # Define the congruence equations\n    eq1 = mod(190 - a, num)\n    eq2 = mod(137 - (a + 4), num)\n    eq3 = mod(101 - (a + 6), num)\n\n    # Solve the congruence equations\n    solutions = solve((eq1, eq2, eq3), (a, num))\n\n    # There could be multiple solutions, we look for the one that satisfies\n    # all conditions, specifically the ones that give positive remainders and numbers\n    for sol in solutions:\n        if sol[a] >= 0 and sol[num] > sol[a]:\n            divisor = sol[num]\n            break\n\n    # Find the remainder when 299 is divided by the found divisor\n    remainder = mod(299, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_slide = 1\n    accumulated_distance = 0\n    day_count = 0\n    \n    while accumulated_distance < total_distance:\n        day_count += 1\n        accumulated_distance += day_distance\n        \n        if accumulated_distance >= total_distance:\n            break\n        else:\n            accumulated_distance -= night_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    return round(8.765, 1)\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_weight = 960\n    box_capacity = 8\n\n    num_boxes = total_weight // box_capacity\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    # Final result after doubling the number and adding 12 is given as 26\n    final_result = 26\n    # Subtract 12 from the final result to get the doubled number\n    doubled_number = final_result - 12\n    # Divide by 2 to get the original number\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    max_sum = 0\n    for y in range(2, 200):\n        if is_prime(y):\n            x = (200 + y) // (2 + y)\n            if (200 + y) % (2 + y) == 0 and is_prime(x) and x != y:\n                max_sum = max(max_sum, x + y)\n                \n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "import math\n\ndef solution():\n    total_numbers = math.factorial(6)\n    repeated_2 = math.factorial(2)\n    repeated_3 = math.factorial(2)\n    \n    ans = total_numbers // (repeated_2 * repeated_3)\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Given that 2p is one-quarter of her money, let's denote her total money as x.\n    # Therefore, x * 1/4 = 2p\n    # To find the total amount x, we can rearrange the equation as:\n    # x = 2p * 4\n    total_money = 2 * 4\n\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    games_per_round = num_teams - 1\n\n    # In a round-robin tournament, each team plays every other team once.\n    # So, each of the 8 teams plays 7 games (against each of the other teams).\n    # However, each game involves two teams, so this counts each game twice.\n    total_games = (num_teams * games_per_round) // 2\n\n    return total_games\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(31, 6)  # 5 1/6 as an improper fraction\n    num2 = Fraction(31, 5)  # 6 1/5 as an improper fraction\n    denom = Fraction(1, 6) + Fraction(1, 5)\n\n    ans = (num1 + num2) / denom\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining the symbols\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # setting the known information\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezey, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # adding the heights of the seven dwarfs\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['3', '5', '9']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return all_numbers[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_covered_in_5_hours = 250  # miles\n    time_spent_5_hours = 5  # hours\n    time_spent_3_hours = 3  # hours\n\n    speed = distance_covered_in_5_hours / time_spent_5_hours  # miles per hour\n    distance_covered_in_3_hours = speed * time_spent_3_hours\n\n    return distance_covered_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    \n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Calculate the number of terms in the sequence\n    num_terms = (90 - 12) // 1 + 1\n    \n    # If the number of terms is odd, the sum is the same parity as the first term\n    # If the number of terms is even, the sum is always even.\n    if num_terms % 2 == 0:\n        ans = \"even\"\n    else:\n        ans = \"odd\" if 12 % 2 == 1 else \"even\"\n\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the numbers on the hats be x, y, and z\n    x, y, z = symbols('x y z')\n\n    # Sum equations based on the given totals\n    equation1 = Eq(x + y, 11)\n    equation2 = Eq(y + z, 17)\n    equation3 = Eq(x + z, 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The largest number on a hat\n    max_hat_number = max(solutions[x], solutions[y], solutions[z])\n\n    return max_hat_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    trees = 30\n    distance_between_trees = 5  # in meters\n\n    # The distance covered by trees except the last one\n    length_of_road = (trees - 1) * distance_between_trees\n\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle = symbols('triangle')\n    \n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n    for i in range(2, 10):\n        result *= Fraction(i, i + 1)\n    return float(result)\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for number in range(1, 21):\n        if isprime(number):\n            if isprime(number + 6) or isprime(number - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Given that there are three 30-minute intervals, and each interval has a different speed.\n    # Distance = Speed * Time\n    # The total distance travelled is 70 miles\n    # Convert 30 minutes to hours by dividing by 60 (since speed is in mph)\n\n    # First interval distance\n    distance_first = x * (30 / 60)\n\n    # Second interval distance (speed reduced by 20 mph)\n    distance_second = (x - 20) * (30 / 60)\n\n    # Third interval distance (speed increased by 10 mph)\n    distance_third = (x + 10) * (30 / 60)\n\n    # Total distance is the sum of distances during the three intervals\n    equation = Eq(distance_first + distance_second + distance_third, 70)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n    for i in range(1, pages + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_people_per_bus = 25\n\n    num_buses = (total_people + max_people_per_bus - 1) // max_people_per_bus\n\n    return num_buses\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    total_prize = symbols('total_prize')\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    solution = solve(equation, total_prize)\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "from math import factorial\n\ndef solution():\n    # There are 5 players (excluding the coach and captain) to be arranged\n    ways_for_5_players = factorial(5)\n    \n    # The captain can be either on the left or the right of the coach: 2 ways\n    ways_for_captain = 2\n    \n    # Use the multiplication principle\n    total_ways = ways_for_5_players * ways_for_captain\n    \n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # boys - girls = 20\n    # Let n be the size of the square, and b and g be the number of boys and girls\n    # b + g = n^2\n    # b - g = 20\n    # Solve for n^2\n    # n is odd (since there need to be an odd number of layers for a boy layer to be on the outside)\n\n    total_students = 0\n    n = 1  # initial size of the square\n    while True:\n        boys = n * n // 2 + n // 2 if n % 2 else n * n // 2\n        girls = n * n - boys\n        if boys - girls == 20:\n            total_students = boys + girls\n            break\n        n += 2  # increment n to the next odd number\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of penguins and y as the total number of fish\n    x = symbols('x')\n    y = symbols('y')\n\n    # If the staff gives 3 fish to each penguin, there will be 25 fish left.\n    equation1 = Eq(y, 3 * x + 25)\n\n    # If the staff gives 6 fish to each penguin, one penguin gets only 1 fish, and the rest get 6 fish each\n    # which means y - 1 fish for the one penguin = 6 * (x - 1), where x-1 is the number all the other penguins\n    equation2 = Eq(y - 1, 6 * (x - 1))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the number of penguins, so we return x\n    return solutions[x]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    current_number = 1\n    count = 0\n    \n    while count < 30:\n        for _ in range(current_number):\n            if count < 30:\n                sum_of_terms += current_number\n                count += 1\n            else:\n                break\n        current_number += 1\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    sum_of_parts = (25/100) * 20 + (1/5) * 30 + (2/3) * 18\n    return sum_of_parts\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    # Divisibility rule for 11: The difference between the sum of the digits in the odd positions\n    # and the sum of the digits in the even positions must be either 0 or a multiple of 11.\n    for a in range(10):\n        number = f\"1{a}7731\"\n        odd_sum = int(number[0]) + int(number[2]) + int(number[4])\n        even_sum = int(number[1]) + int(number[3]) + int(number[5])\n        if (odd_sum - even_sum) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    total_votes = 140\n\n    # Cindy must have at least 1 more vote than the maximum votes that Alice and Betty could have\n    max_votes_for_others = max(alice_votes, betty_votes)\n\n    # Cindy needs enough votes to surpass the maximum votes achievable by either Alice or Betty, \n    # after all remaining students have voted.\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n    votes_needed_for_cindy = max_votes_for_others + 1 - cindy_votes\n\n    # If the remaining votes are enough for Cindy to surpass others, that's the answer\n    # Otherwise, she needs all the remaining votes plus some more.\n    ans = max(votes_needed_for_cindy, remaining_votes + 1)\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_age_in_2005 = 50\n    james_age_in_1997 = 20\n    \n    # Calculate the year when James was born\n    james_birth_year = 1997 - james_age_in_1997\n    \n    # Calculate the year when Gina was 50\n    gina_birth_year = 2005 - gina_age_in_2005\n    \n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total sales\n    x = symbols('x')\n\n    # Commission for the first $25000\n    commission1 = 0.02 * 25000\n\n    # Commission after $25000\n    commission2 = 0.05 * (x - 25000)\n\n    # Total commission\n    total_commission = commission1 + commission2\n\n    # Total salary including the base salary and commissions\n    total_salary = 2500 + total_commission\n\n    # Equation representing the total salary for July being $3300\n    equation = Eq(total_salary, 3300)\n\n    # Solve for x\n    sales = solve(equation, x)\n\n    return sales[0]\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, getcontext\n    \n    # Set precision for Decimal operations\n    getcontext().prec = 28\n    \n    # First expression\n    expression1_numerator = Fraction(7, -10) / Decimal('3.3333333333333333333333333333')\n    expression1_denominator = Decimal('-0.027') ** (Decimal(1) / Decimal(3))\n    expression1 = expression1_numerator / expression1_denominator\n    \n    # Second expression\n    expression2_numerator = 2 ** 3 / 4 ** 2\n    expression2_denominator = Decimal('0.125') * (Decimal('1.8') - (Decimal('0.2') * 7))\n    expression2 = expression2_numerator / expression2_denominator\n    \n    # Third expression (Bracketed)\n    expression3_part1 = Decimal('0.1') / Decimal('0.1428571428571428571428571429')\n    expression3_part2 = 2 * Decimal('0.3')\n    expression3 = expression3_part1 + expression3_part2\n    \n    # Combine all expressions and round to match the precision without calculator\n    ans = Decimal(expression1) + Decimal(expression2) - Decimal(expression3)\n    # Note: Since we can't use a calculator, we assume the correct rounding is applied as would be by hand\n    # round to 15 significant digits which is the default precision of Decimal\n    ans = ans.quantize(Decimal('1.000000000000000'))  \n    return float(ans)\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person originally had\n    ryan, audrey = symbols('ryan audrey')\n\n    # Original ratio 2:7\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # New ratio after changes 1:3\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    # Get the number of marbles Audrey had at first\n    audrey_marbles = solutions[audrey]\n\n    return audrey_marbles\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n    # Probability of failing on the first attempt and passing on the second attempt\n    p_second = 0.6 * 0.5\n    # Probability of failing on the first two attempts and passing on the third attempt\n    p_third = 0.6 * 0.5 * 0.3\n\n    # Total probability of passing before the fourth attempt\n    p_total = p_first + p_second + p_third\n\n    return p_total\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n        \n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_AB = 2  # ways to travel from City A to City B\n    routes_BC = 3  # ways to travel from City B to City C\n\n    # Total different routes\n    total_routes = routes_AB * routes_BC\n\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (first_term + last_term) * number_of_terms // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    time_needed = total_pieces / rate_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n        \n    zeros = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        zeros += 1\n    \n    return zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq((age / 4) + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Let's denote the side of the square array as n\n    # Boys occupy the outer layer and alternate layers after that.\n    # Therefore, if n is odd, the number of boys' layers will be greater than the number of girls' layers by one.\n    # If n is even, the number of boys' and girls' layers will be the same.\n    #\n    # The total number of students in the boy layers can be expressed as:\n    # n^2 + (n-2)^2 + (n-4)^2 + ... until (n-2*k)^2 where k makes (n-2*k) just greater than 0.\n    #\n    # The total number of students in the girl layers can be expressed as:\n    # (n-1)^2 + (n-3)^2 + (n-5)^2 + ... until (n-(2*k+1))^2 where k makes (n-(2*k+1)) positive.\n    #\n    # We need to look for such n where the difference between the sum of boys and girls is 44.\n    # The total number of students will be n^2.\n\n    boy_diff = 44\n    total_students = 0\n\n    # We can try from smaller odd squares because the difference between boys and girls begins from an odd square configuration.\n    for n in range(1, 1000, 2):  # We can start with 1 and increment by 2 for odd numbers\n        boys = sum((n - 2*i)**2 for i in range(n // 2 + 1))\n        girls = sum((n - 2*i - 1)**2 for i in range(n // 2))\n        if boys - girls == boy_diff:\n            total_students = n * n\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = 0\n    days = 0\n\n    while total_climbed < 18:\n        days += 1\n        if days == 6:\n            total_climbed += 3\n        else:\n            total_climbed += 7\n        if total_climbed < 18:\n            total_climbed -= (7 - 3)  # the snail slides down a certain number of metres during the night\n\n    sliding_distance = 7 - (18 - total_climbed)  # on the last day, the snail does not slide down\n    return sliding_distance\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    apples = 48\n    max_apples_for_second = 0  # initialize the max apples for the second student\n\n    # The four students are denoted as a, b, c, d and we solve the problem by trying to minimize the number of apples for a.\n    for a in range(1, apples - 3):  # a gets at least one and at most (apples - 3)\n        remaining = apples - a\n        # We follow by giving b the rest of the apples, then the least possible to c, and so on.\n        for b in range(a + 1, remaining - 1):  # b must get more than a and leave at least 2 for c and d\n            remaining -= b\n            for c in range(b + 1, remaining):  # c must get more than b and leave at least 1 for d\n                d = remaining - c\n                if c < d:  # d must get more than c\n                    max_apples_for_second = max(max_apples_for_second, b)  # update the maximum number for b\n    \n    return max_apples_for_second\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let x be the original length and y be the original width of the rectangle.\n    # The new length will be x+12 and the width remains y.\n    # The perimeter of a rectangle is 2 times the sum of its length and width.\n    # So the perimeter of the new rectangle is 2 * (x + 12 + y) = 38 cm.\n\n    # Let's set up an equation for the perimeter of the new rectangle\n    # 2 * (x + 12 + y) = 38\n    # Simplify the equation to solve for x + y\n    # x + 12 + y = 19\n    # x + y = 19 - 12\n    x_plus_y = 19 - 12\n\n    # The perimeter of the original rectangle is 2 times the sum of its original length and width\n    # So the perimeter of the original rectangle is 2 * (x + y)\n    original_perimeter = 2 * x_plus_y\n\n    return original_perimeter\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Time taken by each person as a dictionary\n    # Key is the person, value is the time taken to row the boat\n    times = {'Eddie': 1, 'Jack': 2, 'Rose': 5, 'Mary': 10}\n    \n    # Sort the times from fastest to slowest\n    sorted_times = sorted(times.values())\n\n    # Initialize the total time\n    total_time = 0\n\n    # While more than 2 people are on the wrong side of the river\n    while len(sorted_times) > 3:\n        # Consider the two fastest and two slowest currently at the wrong side\n        fastest1, fastest2, slowest1, slowest2 = sorted_times[0], sorted_times[1], sorted_times[-2], sorted_times[-1]\n        # Calculate the two possible scenarios for getting the slowest people across and choose the faster one\n        option1 = slowest2 + fastest1 + slowest1 + fastest1\n        option2 = fastest2 + fastest1 + slowest2 + fastest2\n        total_time += min(option1, option2)\n        # Remove the two slowest people who are now on the right side of the river\n        del sorted_times[-2:]\n        \n    # Once down to three people, bring the slowest across, then the two fast ones\n    total_time += sorted_times[0] + sorted_times[1] + sorted_times[2]\n\n    return total_time\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2 ** 19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    # There are 4 students\n    num_students = 4\n    \n    # The number of ways to arrange n distinct objects is n!\n    ans = factorial(num_students)\n    \n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Define the food options excluding chocolate for the second day\n    options_second_day = ['peaches', 'strawberries']\n    # Define the food options for the third day\n    options_third_day = ['chocolate', 'peaches', 'strawberries']\n\n    # Initialize a count variable to keep track of different ways of eating\n    count = 0\n\n    # Jenny eats chocolate on the first day, so iterate over possibilities for the next two days\n    for food_second_day in options_second_day:\n        for food_third_day in options_third_day:\n            # She doesn't eat the same food on two adjacent days\n            if food_second_day != food_third_day:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since 8 can be divided into two positive numbers (x, 8-x) where\n    # x is within the range [1, floor(8/2)], we only need to consider the\n    # cases for x in range 1 to 4 to avoid duplicate counting (such as 1+7 and 7+1).\n    \n    # Number of ways x can be chosen\n    ways = (8 // 2)\n    \n    return ways\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n    \n    # There are 7 people to arrange and the table can be rotated,\n    # so we consider one person as a fixed reference point.\n    # Then we arrange the remaining 6 people around the table.\n    ans = factorial(6)\n    \n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5 / 3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's and Emma's current ages\n    john, emma = symbols('john emma')\n\n    # In 3 years, the sum of John's and Emma's ages will be 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n\n    # Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    # Extract Emma's age\n    emma_age = solutions[emma]\n\n    return emma_age\n\n# Get the final result by calling the function\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    from fractions import Fraction\n    \n    # Let 'salary' be the total salary of Almaz\n    salary = symbols('salary')\n\n    # First expenditure: Almaz spent 5/9 of her salary on a television\n    television_cost = Fraction(5, 9) * salary\n\n    # Amount left after buying television\n    amount_left = salary - television_cost\n\n    # Second expenditure: Almaz spent 3/4 of the remainder on a table\n    table_cost = Fraction(3, 4) * amount_left\n\n    # Amount left after buying the table\n    amount_left_after_table = amount_left - table_cost\n\n    # Almaz had $160 left after all expenditures\n    equation = Eq(amount_left_after_table, 160)\n    \n    # Solve for salary\n    total_salary_solution = solve(equation, salary)\n\n    # Calculate cost of the television\n    television_cost_value = Fraction(5, 9) * total_salary_solution[0]\n\n    return television_cost_value\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_in_a_week = 6  # Monday to Saturday is 6 days\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n    # Jack's speed is 50 km/h\n    jack_speed = 50\n    # Time difference between Jack's and Tom's start time\n    time_difference = 3\n    # Time after which they are 15 km apart\n    additional_time = 5\n    # Distance Tom traveled before Jack started\n    initial_distance_tom = tom_speed * time_difference\n    # Total time Tom traveled when they are 15 km apart\n    total_time_tom = time_difference + additional_time\n    # Total distance Tom traveled when they are 15 km apart\n    total_distance_tom = tom_speed * total_time_tom\n    # Total distance Jack traveled when they are 15 km apart\n    total_distance_jack = jack_speed * additional_time\n    # The distance between A and B is the sum of the distances traveled by Tom and Jack and the 15km apart\n    distance_AB = total_distance_tom + total_distance_jack + 15\n\n    return distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # 36 degrees corresponds to water\n    water_fraction = 36 / 360\n\n    # Let the total number of people be x.\n    # 1/4 chose tea, 7 chose coffee, 30% chose cola.\n    # water_fraction of x chose water.\n    # The sum of all choices equals the total number of people.\n    # (1/4)x + 7 + (30/100)x + water_fraction*x = x\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq((1/4)*x + 7 + (30/100)*x + water_fraction*x, x)\n\n    total_people = solve(equation, x)\n\n    return total_people[0]\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    for children in range(1, 56 // 2 + 1):  # Iterate assuming the number of children is less than half of the total leg count\n        dogs = 3 * children  # There are 3 times as many dogs as children\n        total_legs = 2 * children + 4 * dogs  # Each child has 2 legs and each dog has 4 legs\n        if total_legs == 56:  # The total number of legs must equal 56\n            return children\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 1 - 2/5\n    total_pupils = 18 / present_fraction\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10 ** 5) / (5 ** 5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    result = 5.2 + 6.7 + 4.8\n    return result\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    interval = 2\n\n    # Number of trees on the length side (account for both sides, subtract the corners)\n    trees_on_length = (length // interval) * 2 - 2\n\n    # Number of trees on the width side (account for both sides)\n    trees_on_width = (width // interval) * 2\n\n    # Total number of trees\n    total_trees = trees_on_length + trees_on_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_meters = 1.36\n    height_centimeters = height_meters * 100\n    return height_centimeters\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_rate = 0.03\n    tax_amount = initial_income * tax_rate\n    final_income = initial_income - tax_amount\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    adult_price = 20\n    child_price = 15\n    total_price = 110\n\n    max_adults = total_price // adult_price\n    \n    for adults in range(2, max_adults + 1):\n        remainder = total_price - (adults * adult_price)\n        if remainder % child_price == 0:\n            children = remainder // child_price\n            return children\n\n    return 0\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    num_people = 3\n    sweets_each = total_sweets // num_people\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**6):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_volume = 750 * (1 + 9)  # Total volume of the mixture (squash and water)\n    volume_per_bottle = 1000  # Volume of 1 litre bottles in millilitres\n    num_bottles = total_volume // volume_per_bottle  # Greatest number of complete bottles\n    return num_bottles\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (180 / (0.6 * 100))\n    return result\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Calculate the amount spent on the book\n    cost_book_bag = 132\n    cost_book = cost_book_bag / (1 + (1 / 2))\n\n    # Calculate the initial amount of money Li Yan had\n    initial_money = cost_book * 3  # Since she spent 1/3, the cost of the book is equal to 1/3 of the initial money\n\n    return initial_money\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulo = 7\n\n    remainder = pow(base, exponent, modulo)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # The last two digits of a number is its remainder when divided by 100\n    # Calculate last two digits of each term\n    # 6^2015 (mod 100)\n    last_two_digits_1 = pow(6, 2015, 100)\n    \n    # (2015 * 6) (mod 100)\n    last_two_digits_2 = (2015 * 6) % 100\n    \n    # 2015^6 (mod 100)\n    last_two_digits_3 = pow(2015, 6, 100)\n    \n    # Sum the last two digits of each term and get the last two digits of the result\n    result = (last_two_digits_1 + last_two_digits_2 + last_two_digits_3) % 100\n    \n    return result\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n    \n    # B and D are given\n    B, D = 2, 0\n\n    # Since B and D are known, let's find permutations for A, C, E, F\n    for perm in permutations([i for i in range(10) if i not in (B, D)], 4):\n        A, C, E, F = perm\n\n        # Construct the numbers from the digits\n        ABCDEF = A * 100000 + B * 10000 + C * 1000 + D * 100 + E * 10 + F\n        EFABCD = E * 100000 + F * 10000 + A * 1000 + B * 100 + C * 10 + D\n\n        # Check the equation\n        if 5 * ABCDEF == 6 * EFABCD:\n            # Return the 4-digit number FACE\n            return F * 1000 + A * 100 + C * 10 + E\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_rate = 0.10\n    discounted_price = original_price * (1 - discount_rate)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n    \n    # 65% of initial animals were cows\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)\n    # The rest were goats\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)\n    # After adding 240 animals, cows increased by 20% in percentage\n    equation3 = Eq(cows_initial + 240, 0.85 * (total_animals_initial + 240))\n    # The number of goats doubled\n    equation4 = Eq(2 * goats_initial, total_animals_initial + 240 - (cows_initial + 240))\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals_initial, cows_initial, goats_initial))\n    \n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x = total number of cookies in the box\n    x = symbols('x')\n    cookies_sold_second_month = 1680 + (7/20) * 1680\n    cookies_kept_first_month = x - 1680\n    cookies_kept_second_month = x - cookies_sold_second_month\n    equation = Eq(cookies_kept_first_month - (3/20)*x, cookies_kept_second_month)\n    \n    total_cookies = solve(equation, x)\n    return total_cookies[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    Jolene_position = 6\n    Amy_position_from_back = 8\n    total_children = Jolene_position + Amy_position_from_back - 1\n\n    return total_children\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height_to_climb = 40\n    jump_up = 5\n    slide_down = 3 * 2  # 3 meters for each of the 2 jumps\n    net_gain_every_2_jumps = (jump_up * 2) - slide_down\n    jumps_needed = 0\n\n    while height_to_climb > net_gain_every_2_jumps:\n        height_to_climb -= net_gain_every_2_jumps\n        jumps_needed += 2\n\n    if height_to_climb > 0:\n        jumps_needed += 1  # Last jump to reach or exceed the top without sliding down\n\n    return jumps_needed\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # From the given factors, we can deduce that the number is divisible by both 2 and 7\n    # We need to find the smallest number that has 8 factors including the ones provided\n    # Let's start by constructing the potential number using the known prime factors:\n    # - 2 is a factor, so there's at least 2^3 = 8\n    # - 7 is a factor, thus we have at least 7^1\n    # The smallest such number would be 2^3 * 7^1 = 56\n    # Let's check if 56 has 8 factors\n    number = 2**3 * 7**1\n    factors = [1, number]\n    for x in range(2, int(number**0.5) + 1):\n        if number % x == 0:\n            factors.append(x)\n            if (number // x) != x:  # Ensure not to count the square root twice if it's a perfect square\n                factors.append(number // x)\n    \n    if len(factors) == 8:\n        return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    smallest_number, _ = solve_congruence(*congruences)\n    return smallest_number\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Total perimeter of the pentagon\n    perimeter = 5 * side_length\n\n    # Since there is a sunflower on each corner, we subtract the corners from the perimeter\n    perimeter_without_corners = perimeter - 5\n    \n    # Now, we calculate how many sunflowers can be planted apart from the corners\n    sunflowers_without_corners = perimeter_without_corners // distance_apart\n    \n    # Total sunflowers including the corners\n    total_sunflowers = sunflowers_without_corners + 5\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    cost_per_stamp = 46  # cost of one stamp in pence\n    total_money = 300  # total money in pence (£3 = 300p)\n    \n    num_stamps = total_money // cost_per_stamp\n    \n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2  # in minutes\n\n    # Each trip carries 7 people, and requires a return trip (except the last one).\n    # So it's \"1 across + 1 back\" for each FULL trip.\n    full_trips_required = (adventurers - 1) // capacity\n    last_trip_adventurers = adventurers - full_trips_required * capacity\n    \n    # If last trip adventurers is not 0, one more trip needed without return.\n    time = (full_trips_required * 2 + (1 if last_trip_adventurers > 0 else 0)) * trip_time\n\n    return time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Ryan drives at his usual speed\n    t = symbols('t')\n    \n    # Ryan's usual speed is 45 miles/hour and he drives for t hours\n    usual_distance = 45 * t\n\n    # Due to heavy traffic, Ryan drives at 30 miles/hour for (t + 2) hours\n    heavy_traffic_distance = 30 * (t + 2)\n\n    # The distance should be the same for both situations\n    equation = Eq(usual_distance, heavy_traffic_distance)\n\n    # Solve for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # The sum from 3 to 10\n    sum_ascending = sum(range(3, 11))\n    # The sum from 4 to 6 (the descending part excluding the first and last term)\n    sum_descending = sum(range(4, 7))\n    # The total sum is the sum of the ascending part plus the descending part\n    ans = sum_ascending + sum_descending\n    return ans\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    # Define a recursive function to count the partitions of a number\n    def partitions(n, max_val=n):\n        # If n is 0, there is one way to partition it (use no numbers)\n        if n == 0:\n            return 1\n        # If n is negative or max_val is 0, there are no ways to partition n\n        if n < 0 or max_val == 0:\n            return 0\n        # The number of partitions is the sum of:\n        # - the number of partitions without the current max_val\n        # - the number of partitions where the current max_val is used at least once\n        return partitions(n, max_val - 1) + partitions(n - max_val, max_val)\n\n    # Subtract 1 because we do not count the number itself as a partition\n    ans = partitions(5) - 1\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for i in range(2, 1997):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2 / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    \n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n    \n    equation1 = Eq(sweets - 6*students, -26)\n    equation2 = Eq(sweets - 5*students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n    \n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the sum of the number of fruits is odd (225),\n    # and the difference between neighboring trees is always 1,\n    # this means that the sequence of trees must alternate between odd and even counts of fruits.\n    # Because there are 8 trees (an even number),\n    # there will be an equal number of odd and even counts of fruits.\n\n    # With 8 trees, there will be 4 pairs of odd-even or even-odd neighboring trees.\n    # Each pair, with a difference of 1, will have a sum that is also odd.\n    # The sum of 4 odd numbers will again be an even number.\n\n    # Because the required sum is an odd number (225),\n    # it is not possible to achieve this sum with 8 trees having the described pattern of fruit counts.\n    ans = \"No, it is not possible because the sum of an odd number (225) cannot be obtained \" \\\n          \"by the sum of 4 pairs of consecutive numbers with a difference of 1.\"\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    # Let's represent the number of cookies Mary baked as 'mary_cookies'.\n    # According to the problem, we can write the following relationships:\n    # amin_cookies = 329\n    # jessica_cookies = amin_cookies + 97\n    # mary_cookies = jessica_cookies - 58\n    \n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    \n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    leo, son = symbols('leo son')\n    \n    equation1 = Eq(leo - son, son - 4)  # When Leo was son's current age\n    equation2 = Eq(leo + (leo - son), 70)  # When son reaches Leo's current age\n    \n    solutions = solve((equation1, equation2), (leo, son))\n    \n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4*blouse + 3*dress, 140)\n    \n    solutions = solve((equation1, equation2), (blouse, dress))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # The total number of singing and dancing performances\n    total_singing = 4\n    total_dancing = 3\n    \n    # Place the 3 dancing performances with compulsory gaps for singing: _ D _ D _ D _\n    # There are 4 places where the singing performances can go (indicated by underscores)\n    # We have 4 singing performances to place\n    \n    # Choose any 3 places out of the 4 for the singing performances\n    # This can be done in C(4, 3) ways\n    places_for_singing = factorial(4) // (factorial(3) * factorial(4 - 3))\n    \n    # Now we have 4 performances left to be arranged in 4 places\n    # which is just a permutation of 4 items: P(4, 4)\n    singing_permutations = factorial(4)\n    \n    # Multiply the two results together to get the total number of ways\n    ans = places_for_singing * singing_permutations\n    return ans\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    for years_later in range(1, 100):  # assuming the solution is within the next 100 years\n        if (50 + years_later) == 4 * (8 + years_later):\n            return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    twos = count_factors(60, 2)\n    fives = count_factors(60, 5)\n\n    ans = min(twos, fives)\n    return ans\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    original_average = 120\n    new_average = 150\n    number_of_original_numbers = 3\n    number_of_new_numbers = 4\n\n    total_original = original_average * number_of_original_numbers\n    total_new = new_average * number_of_new_numbers\n\n    fourth_number = total_new - total_original\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    ans = (11 * 14 + 26) / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    r = symbols('r')\n    equation = Eq(216 * r, sqrt(216 * r)**2)\n    solutions = solve(equation, r)\n\n    ans = None\n    for s in solutions:\n        if (216 * s).is_square:\n            ans = s\n            break\n\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    fraction = 3 / 13\n    number = 52\n\n    ans = fraction * number\n\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_per_day = 8\n    slide_per_night = 3\n    net_climb = climb_per_day - slide_per_night\n    day_to_exit = 9\n    \n    # On the 9th day, the snail climbs out, so we don't consider the slide on the 8th night.\n    # Total depth = net_climb for (day_to_exit - 1) days + climb_per_day (on 9th day)\n    total_depth = net_climb * (day_to_exit - 1) + climb_per_day\n    \n    return total_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 0.15\n    discount_amount = original_price * discount\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    dividend = quotient * smallest_divisor + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    french_teachers = 75\n    japanese_teachers = 45\n    total_teachers = 100\n\n    # Using Inclusion-Exclusion Principle\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag, can = symbols('bag can')\n\n    # Rachel buys three bags and five cans\n    equation1 = Eq(3 * bag + 5 * can, 4.90)\n    # Rosie buys one bag and three cans\n    equation2 = Eq(bag + 3 * can, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag, can))\n\n    return solutions[bag]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6) # Total permutations for 6 friends\n    teddy_leftmost_ways = factorial(5) # Permutations with Teddy on the furthest left\n\n    # The total ways without Teddy being on the furthest left\n    teddy_not_leftmost_ways = total_ways - teddy_leftmost_ways\n\n    return teddy_not_leftmost_ways\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This sequence is decreasing\n    n = 1  # Start with the first term\n\n    while True:\n        nth_term = first_term + (n - 1) * common_difference\n        if nth_term < 0:\n            break\n        n += 1\n\n    return n - 1  # We subtract 1 because we exit the loop after the term becomes negative\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop over all 2-digit numbers\n        if sum(map(int, str(i))) % 7 == 0:  # Convert the number to string, split, sum digits and check divisibility by 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # If the numbers are consecutive, we denote the first one as n.\n    # Then, the seven numbers are n, n+1, n+2, n+3, n+4, n+5, n+6 \n    # The sum of these numbers is 7n + (1 + 2 + 3 + 4 + 5 + 6) = 280\n    # Simplifying, we have: 7n + 21 = 280\n    # Therefore, 7n = 280 - 21\n    # Calculate n:\n    n = (280 - 21) // 7\n    \n    # The largest number is n + 6:\n    largest_number = n + 6\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    result = 0\n    for i in range(1000, 0, -20):\n        result += i**2 - (i-10)**2\n        \n    return result\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbols for the two numbers\n    x, y = symbols('x y')\n    # Equation for the sum of the two numbers\n    equation1 = Eq(x + y, 49)\n    # Equation for the difference of the two numbers\n    equation2 = Eq(x - y, 9)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    # Get the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Initializing the maximum sum to zero\n    max_sum = 0\n    \n    # The numbers A and B have to be multiples of 75, so we start\n    # checking from the smallest 3-digit multiple of 75.\n    for A in range(100, 1000, 75):\n        for B in range(A, 1000, 75):  # Avoid checking pairs twice, start from A\n            # Extract digits of A and B\n            digits_A = [int(d) for d in str(A)]\n            digits_B = [int(d) for d in str(B)]\n            # If A and B have digit equality and are distinct\n            if len(set(digits_A)) < 3 and len(set(digits_B)) < 3 and A != B:\n                # Check if any of the two digits are repeated in both A and B\n                common_digits = set(digits_A) & set(digits_B)\n                if len(common_digits) > 0:\n                    max_sum = max(max_sum, A + B)\n    \n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (20 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The series given is not a direct sum of squares, but it can be represented as follows:\n    # n^3 - n, for n in range(2, 11)\n    # 2^3-2, 4^3-4, 6^3-6, 8^3-8, 10^3-10, 12^3-12, 14^3-14, 16^3-16, 18^3-18\n    \n    total_sum = sum(n**3 - n for n in range(2, 11))\n    \n    return total_sum\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n    \n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial as f\n\ndef solution():\n    # Choose 4 positions for the storybooks among the 6 possible positions (5 magazines + 1 start position)\n    # so at least 1 magazine is between every 2 storybooks\n    ways_to_place_storybooks = f(6) // (f(4) * f(6 - 4))\n\n    # Permute 5 magazines and 5 storybooks individually\n    permute_magazines = f(5)\n    permute_storybooks = f(5)\n\n    # Total ways\n    total_ways = ways_to_place_storybooks * permute_magazines * permute_storybooks\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    dice_throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    throw_back = False\n\n    for throw in dice_throws:\n        if not throw_back:\n            if throw != 6:\n                position += throw\n            throw_back = throw == 6\n        else:\n            position -= throw\n            throw_back = False\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the amount Alex had initially\n    # Let 'b' be the amount Brayden had initially\n    a, b = symbols('a b')\n\n    # Alex and Brayden had $756 altogether\n    equation1 = Eq(a + b, 756)\n\n    # After Alex gave $65 to Brayden, Alex had three times as much money as Brayden\n    equation2 = Eq(a - 65, 3 * (b + 65))\n\n    # Solving the equations to find the initial amounts\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Assume 'x' is the total number of fruit gums originally.\n    # Set up a variable to run through possible counts of fruit gums\n    x = 3  # Start at 3 because 2 were already eaten, and we can't have fractions of gum\n    \n    while True:\n        remaining_after_eaten_secretly = x - 2\n        shared_with_friends = remaining_after_eaten_secretly // 3\n        remaining_after_sharing = remaining_after_eaten_secretly - shared_with_friends\n        if remaining_after_sharing % 4 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    james_gives = (james_money - kate_money) / 2\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # Divisibility rule for 99 is that the number should be divisible by both 9 and 11.\n    # For divisibility by 9, the sum of the digits must be divisible by 9.\n    # For divisibility by 11, the difference between the sum of the digits at odd places and even places must be divisible by 11.\n\n    # Fixed digits: 4, 2, 2, 8 contribute 16 to the sum. We need two more digits A and B to make it divisible by 9.\n    # The difference for the 11 divisibility rule is (4 - (2+A) + 2 - (8+B)) which simplifies to (-4 - A - B).\n\n    for A in range(10):\n        for B in range(10):\n            total_sum = 16 + A + B\n            if total_sum % 9 == 0:\n                # Check the divisibility by 11\n                if (-4 - A - B) % 11 == 0:\n                    # We return the value of AB\n                    return 10 * A + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_original = 10 * 10\n    total_sum_remaining = 9 * 9\n    removed_number = total_sum_original - total_sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n    \n    # Convert speed from km/h to m/s\n    # 1 km/h is equal to 1000m/3600s\n    speed_ms = (speed_kmh * 1000) / 3600\n    \n    # Calculate distance in meters\n    distance_meters = speed_ms * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sum, each_brother, each_sister = symbols('total_sum each_brother each_sister')\n\n    equation1 = Eq(each_brother, total_sum / 4)\n    equation2 = Eq(each_brother + 20, total_sum / 3)\n\n    solutions = solve((equation1, equation2), (total_sum, each_brother))\n\n    return solutions[total_sum]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = 21 // 2  # Since we want only odd numbers, our last number is 21, and we start from 1\n    sum_of_n = (n * (n + 1)) // 2  # (1+2+3+...+n) = n*(n+1)/2, for odd numbers\n    ans = sum_of_n**2  # (1³+2³+3³+...+n³) = (1+2+3+...+n)²\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbolic variables for initial amounts of red, green, and blue beads (they are all equal)\n    R = G = B = symbols('B')\n\n    # Symbolic variables for the amount of red and green beads left\n    red_left, green_left = symbols('red_left green_left')\n    \n    # Given equations\n    equation1 = Eq(red_left + green_left + (B - 112), 350)\n    equation2 = Eq(red_left, 2 * green_left)\n    equation3 = Eq(B - 112, red_left - 50)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (red_left, green_left, B))\n\n    # The value of B (beads) at first (initial blue beads)\n    initial_blue_beads = solutions[B]\n\n    return initial_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Calculate the sum of any four numbers based on their average\n    sum_4_numbers_36 = 36 * 4\n    sum_4_numbers_38 = 38 * 4\n    sum_4_numbers_39 = 39 * 4\n    sum_4_numbers_45 = 45 * 4\n    sum_4_numbers_49 = 49 * 4\n    \n    # Calculate the total sum of the four sums\n    total_sum_four_averages = (sum_4_numbers_36 + sum_4_numbers_38 + \n                               sum_4_numbers_39 + sum_4_numbers_45 + \n                               sum_4_numbers_49)\n    \n    # Since each of the 4 numbers are counted 4 times in total_sum_four_averages,\n    # we divide by 4 to get the total sum of the 5 numbers\n    total_sum_5_numbers = total_sum_four_averages / 4\n    \n    # Subtract each sum of four numbers from total_sum_5_numbers to find the excluded number\n    fifth_number_1 = total_sum_5_numbers - sum_4_numbers_36\n    fifth_number_2 = total_sum_5_numbers - sum_4_numbers_38\n    fifth_number_3 = total_sum_5_numbers - sum_4_numbers_39\n    fifth_number_4 = total_sum_5_numbers - sum_4_numbers_45\n    fifth_number_5 = total_sum_5_numbers - sum_4_numbers_49\n    \n    # The largest number among the five numbers is the largest value of the excluded numbers\n    largest_number = max(fifth_number_1, fifth_number_2, fifth_number_3, \n                         fifth_number_4, fifth_number_5)\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n\n    # Since 1/3 of the art books is equal to 4/5 of the science books\n    science_books = (art_books / 3) * (5 / 4)\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    katelyn, jared = symbols('katelyn jared')\n    \n    # Equations based on the problem statement\n    ratio_eq = Eq(katelyn / jared, 2 / 5)\n    difference_eq = Eq(jared - katelyn, 60)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (katelyn, jared))\n    \n    # Calculate the total number of stickers\n    total_stickers = solutions[katelyn] + solutions[jared]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 1.05\n    second_interest_rate = 1.10\n\n    # Calculate the amount after the first three years\n    amount_after_three_years = initial_investment * (first_interest_rate ** 3)\n\n    # Calculate the amount after the next two years\n    total_amount = amount_after_three_years * (second_interest_rate ** 2)\n\n    # Round the result to the nearest tenth\n    ans = round(total_amount, 1)\n\n    return ans\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To share 16 sausages among 24 people equally,\n    # each person should get 16/24 of a sausage, which reduces to 2/3 of a sausage.\n    # This means we need to make cuts in such a way that each sausage is divided \n    # into three equal parts.\n\n    # 16 sausages, 3 parts each => 16 * 3 = 48 total parts needed\n    total_parts_needed = 16 * 3\n    \n    # As we already have 16 individual sausages, we need to make 48 - 16 parts\n    parts_to_cut = total_parts_needed - 16\n    \n    # Each cut can at most increase the number of parts by one,\n    # so the minimum number of cuts required is equal to the additional parts needed.\n    return parts_to_cut\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    import math\n    return math.gcd(42, math.gcd(63, 28))\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    d = symbols('d')  # Let d be the distance between the library and the school\n    # Qiqi's time to school is t and Weiling's time to school is t - 6 mins (2 mins later start, 4 mins earlier arrive)\n    # Qiqi's speed: 60 m/min, Weiling's speed: 72 m/min\n    # Qiqi's distance = Qiqi's speed * Qiqi's time\n    # Weiling's distance = Weiling's speed * Weiling's time\n    # Both distances are equal and are represented by d\n    \n    eq1 = Eq(d, 60 * (d / 72 + 6))  # d / 60 = d / 72 + 6; \n    # Simplified the equation by considering that Qiqi and Weiling travel the same distance d\n    \n    distance = solve(eq1, d)\n    \n    return distance[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work Star does per hour and n be the work Nini does per hour.\n    s, n = symbols('s n')\n\n    # If Star works for 5 hours and Nini for 20 hours, the job is finished.\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # If Star works for 20 hours and Nini for 8 hours, the job is also finished.\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations for s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Let x be the number of hours it takes Nini to finish the job by herself\n    # Therefore, x * n = 1 (n is the work Nini does per hour)\n    x = 1 / solutions[n]\n\n    return x\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    initial_companies = 4\n    initial_days = 5\n    initial_length = 900\n\n    required_length = 2700\n    one_company_speed = initial_length / (initial_companies * initial_days)\n    required_days = required_length / one_company_speed\n\n    return required_days\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    st_petersburg_time = datetime.strptime(\"12:00\", \"%H:%M\")\n    flight_duration = timedelta(hours=3, minutes=25)  # Estimated flight duration from Manchester to St Petersburg\n    time_difference = timedelta(hours=3)  # Time difference between Manchester and St Petersburg\n    departure_time = st_petersburg_time - flight_duration - time_difference\n    return departure_time.time()\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Assuming Ben's position is the 6th from the front, we will position Frank accordingly\n    # Assuming 10 people between Ben and Frank, Frank is (6 + 10 + 1)th from the front\n    frank_position_from_front = 6 + 10 + 1\n    \n    # Now we calculate Frank's position from the back\n    # The number of people in the queue can be calculated by: \n    # Position of Frank from the front + Position of Frank from the back - 1 (Frank himself counted twice)\n    total_people = frank_position_from_front + 9 - 1\n    \n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n    total_ratio = coffee_ratio + milk_ratio\n\n    total_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return total_liters\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    num = 100  # Start from the smallest 3-digit number\n    while True:\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    # This is an arithmetic series with alternate signs.\n    # To calculate the sum, we can take the sum of the positive terms\n    # and subtract the sum of the negative terms.\n    positives = sum(range(4, 33, 4))  # 4, 8, 12, ..., 32\n    negatives = sum(range(2, 31, 4))  # 2, 6, 10, ..., 30\n    ans = positives - negatives\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = (72 / 100) * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from fractions import Fraction\n    # Let total number of marbles be x\n    # According to the problem, we have x*(2/5) red, x*(1/3) green, and 96 yellow.\n    # Since all marbles are either red, green, or yellow:\n    # x*(2/5) + x*(1/3) + 96 = x\n    # Solve for x:\n    # x*(2/5 + 1/3) + 96 = x\n    # x - x*(2/5 + 1/3) = 96\n    # x*(1 - 2/5 - 1/3) = 96\n    # x*(1 - 8/15) = 96\n    # x*(15/15 - 8/15) = 96\n    # x*(7/15) = 96\n    # x = 96 * (15/7)\n\n    x = 96 * (Fraction(15, 7))\n\n    return x.numerator  # Since we need whole number of marbles\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    number_of_years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n\n    # Since we're looking for three-digit numbers, the first digit can be between 1 and 8\n    for first_digit in range(1, 9):\n        # The second digit can be between 0 and 8 - first_digit\n        for second_digit in range(0, 9 - first_digit):\n            # Calculate the third digit by subtracting the other two from 8\n            third_digit = 8 - first_digit - second_digit\n            # The number is even if the last digit is even\n            if third_digit % 2 == 0:\n                # Verify that the number is three-digit and the sum of the digits is 8\n                if 100*first_digit + 10*second_digit + third_digit >= 100:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    decimal_number = 1/20\n    return decimal_number\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Regardless of which marble is picked first, the second pick could be of a different color.\n    # If we pick a third marble, it must be of the same color as one of the previous marbles.\n    # Therefore, at least 3 marbles must be taken from the bag to ensure 2 are of the same color.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculating the unit digit of each part\n    unit_digit_13 = (13 ** 242) % 10  # The pattern of unit digit for power of 13 repeats every 4, so 13^2, which is 3^2\n    unit_digit_17 = (17 ** 379) % 10  # The pattern of unit digit for power of 17 repeats every 4, so 17^3, which is 7^3\n    unit_digit_4 = (4 ** 2012) % 10   # The power of 4 only has two units digit in sequence: 4 and 6, so for even powers, it's 6\n    \n    # Since we only need the unit digit, multiplying by 4 only changes the unit digit if it was 5 or greater.\n    unit_digit_17_times_4 = (unit_digit_17 * 4) % 10\n    \n    # Summing the unit digits\n    unit_digit_sum = (unit_digit_13 + unit_digit_17_times_4 + unit_digit_4) % 10\n    \n    return unit_digit_sum\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # We are looking for two adult ages (John and Mary) and three children ages\n    # Based on the information given, we start by iterating over possible ages\n    # such that their products in consecutive years satisfy the given conditions.\n    for john_age in range(1, 100):\n        mary_age = john_age - 1  # Mary is one year younger\n        \n        # The product of John's and Mary's age this year and the next year\n        product_this_year = john_age * mary_age\n        product_next_year = (john_age + 1) * (mary_age + 1)\n        \n        # Check the first condition for John and Mary\n        if product_this_year < 2019 and product_next_year > 2020:\n            \n            # Now, check for children ages based on the similar condition\n            for first_child_age in range(1, 100):\n                second_child_age = first_child_age + 2\n                third_child_age = first_child_age + 4\n                \n                # The product of children's age this year and the next year\n                children_product_this_year = (first_child_age *\n                                              second_child_age *\n                                              third_child_age)\n                children_product_next_year = ((first_child_age + 1) *\n                                              (second_child_age + 1) *\n                                              (third_child_age + 1))\n                \n                # Check the second condition for children\n                if (children_product_this_year < 2019 and\n                        children_product_next_year > 2020):\n                    \n                    # If both conditions are satisfied, return sum of their ages\n                    sum_of_ages = (john_age + mary_age + first_child_age +\n                                    second_child_age + third_child_age)\n                    \n                    return sum_of_ages\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11  # The difference between successive terms\n    n = 7  # The term number we want to find\n\n    # Formula to find the nth term in an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let x be the original sum of money Mrs. Chen had\n    # We set up an equation based on the information provided\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # Define x as a symbol\n    \n    # Given that Mrs. Chen spent $36 on plates\n    # and 3/4 of the remaining money (x - 36) on cups\n    # and she had 1/6 of the original sum of money left\n    equation = Eq(x - 36 - (3/4) * (x - 36), x / 6)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since we are expecting a single solution, we take the first element\n    return solution[0]\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total_sum = 0\n    current_number = 0\n    for i in range(1, 2016):\n        current_number = current_number * 10 + 1\n        total_sum += current_number\n    last_four_digits = total_sum % 10000\n    return last_four_digits\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    # The sum A consists of each digit multiplied by its position value\n    # since each digit from 1 to 9 is used once, the sum A will be maximum\n    # when high digits have high position values. So we place 9, 8, 7 in the position\n    # of a, b, and c (hundreds places) respectively and so on to 1 in i position.\n    # We assign a 3-digit weight w to each abc, bcd, cde, def, efg, fgh, and ghi\n    # Each weight represents the sum of that digit times its hundreds, tens, and ones\n    # place values in the calculated sums.\n    # For example, 'a' appears in the hundreds place once so it gets a weight of 100\n    # And 'b' appears twice: in the hundreds and tens place so it gets a weight of 110 \n    # By following this pattern, we find the maximum sum when weights align with the largest digits.\n    \n    # Define the weights for each digit position based on their contribution to A\n    weights = [321, 432, 543, 654, 654, 543, 432, 321]\n    \n    # Digit with largest weight should get the largest number available, which is 9\n    # And we iterate down to the digit with the smallest weight, which will get the number 1\n    # The algorithm is greedy and sorts digits according to their weights\n    largest_digits = range(9, 0, -1)\n    \n    # We multiply each weight by the corresponding largest digit\n    A = sum(w * d for w, d in zip(weights, largest_digits))\n    \n    return A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Time taken to travel 1 mile in minutes\n    time_for_one_mile = 2 + 30 / 60\n    \n    # Time available in minutes\n    time_available = 60\n    \n    # Calculate the number of miles in the available time\n    miles_travelled = time_available / time_for_one_mile\n    \n    return miles_travelled\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    current = 8\n    while count < 2012:\n        count += 1\n        if count == 2012:\n            return current\n        current += 1\n        if str(current)[0] != '8':\n            current = int('8' + '0' * (len(str(current))))\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    num_students = 5\n\n    # The sequence of ball distribution to each student is an arithmetic sequence with a common difference of 1.\n    # Let the first term be x; therefore, the 5 terms are x, x+1, x+2, x+3, x+4.\n    # The sum of an arithmetic series is given by: sum = n/2 * (first_term + last_term)\n    # Here, n = number of students = 5.\n    # Then sum = 5/2 * (x + (x + 4)) = 160.\n    # Simplifying gives: 5/2 * (2x + 4) = 160 => x + 2 = 64 => x = 62.\n    \n    first_term = (total_balls - 4) / num_students\n    most_balls = first_term + 4  # The student with the most balls is the last term.\n    \n    return int(most_balls)\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    count = 0\n    # Since there are minimum number of envelopes for boxes A, B and C, we deduce the minimum.\n    remaining_envelopes = 15 - (2 + 4 + 3)  # Subtract the minimum required for each box.\n    \n    # Now distribute the remaining envelopes to all boxes including the conditions for each box.\n    for a_count in range(2, 15 - 4 - 3 + 1):  # Box A has at least 2 envelopes.\n        for b_count in range(4, 15 - a_count - 3 + 1):  # Box B has at least 4 envelopes.\n            for c_count in range(3, 15 - a_count - b_count + 1):  # Box C has at least 3 envelopes.\n                # Remaining envelopes after placing in A, B and C will go to box D.\n                d_count = 15 - (a_count + b_count + c_count)\n                count += 1  # Each valid combination is one unique way to place the envelopes.\n                \n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 0.25 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * 1/10\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the individual's income\n    income = symbols('income')\n\n    # Define the equations based on the tax brackets\n    # If income is less than or equal to $20000\n    tax_eq1 = Eq(income * 0.15, 7000)\n    \n    # If income is more than $20000\n    # The first $20000 is taxed at 15%, the rest at 20%\n    tax_eq2 = Eq(20000 * 0.15 + (income - 20000) * 0.20, 7000)\n    \n    # Try to solve the equation assuming the individual makes more than $20000\n    # If no solution, it means the income is less than $20000 and should solve for the first equation\n    solutions = solve(tax_eq2, income)\n    if not solutions:\n        # Solve for income if it's less than or equal to $20000\n        solutions = solve(tax_eq1, income)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Find the repeating part of the decimal expansion of 1/13\n    decimal_expansion = str(format(1 / 13, '.60g')).split('.')[1]\n\n    # Find the length of the repeating cycle\n    repeat_length = len(decimal_expansion)\n\n    # Find the index in the repeating cycle for the 2022th decimal place\n    index = (2022 - 1) % repeat_length\n\n    # Return the digit at the index\n    return int(decimal_expansion[index])\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "from math import gcd\n\ndef solution():\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    # Find the greatest common divisor of the three lengths\n    g = gcd(length1, gcd(length2, length3))\n\n    return g\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if chickens * 2 + rabbits * 4 == 100:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    # Let x be the initial number of packs of potato chips in each store.\n    # After selling 290 packs, store A has x - 290 packs.\n    # Store B has 3 times as many as store A, so store B has 3 * (x - 290) packs.\n    # Total initial packs = x (store A) + x (store B) = 2 * x\n    # Since both stores had the same amount initially, we can set up the following equation:\n    # Store A (after selling) + Store B (3 times after selling) = Initial total of both stores\n    # (x - 290) + 3 * (x - 290) = 2 * x\n    # Simplifying the equation:\n    # x - 290 + 3x - 870 = 2x\n    # 4x - 1160 = 2x\n    # 4x - 2x = 1160\n    # 2x = 1160\n    # x = 580\n    # Initial total = 2 * x = 2 * 580 = 1160\n    \n    # Now we return the initial total number of packs of potato chips\n    return 1160\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys  # Remaining are girls\n    \n    packed_lunch_boys = 4\n    school_lunch_girls = 7\n    \n    # Students who went home, 3 are boys, so 2 are girls\n    went_home_boys = 3\n    went_home_girls = 2\n    \n    # Students who had a school lunch is the total minus those who had a packed lunch and those who went home\n    school_lunch_boys = boys - packed_lunch_boys - went_home_boys\n    school_lunch_total = school_lunch_girls + school_lunch_boys\n    \n    # Hence those who had packed lunch is the total minus those who had a school lunch and those who went home\n    packed_lunch_total = total_students - school_lunch_total - (went_home_boys + went_home_girls)\n    \n    return packed_lunch_total\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolates = 20\n    total_milk_chocolates = 20\n    total_strawberry_chocolates = 20\n    cost_dark_chocolates = 6\n    cost_milk_chocolates = 5\n    cost_strawberry_chocolates = 4\n    \n    total_chocolates = total_dark_chocolates + total_milk_chocolates + total_strawberry_chocolates\n    total_cost = (total_dark_chocolates * cost_dark_chocolates) + \\\n                 (total_milk_chocolates * cost_milk_chocolates) + \\\n                 (total_strawberry_chocolates * cost_strawberry_chocolates)\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return 99 // 12\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    rate_per_day = made_in_5_days / 5\n    total_days = total_uniforms / rate_per_day\n    return total_days\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time in seconds taken to pass the tree\n\n    # The length of the train is the distance it travels while passing the tree.\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # rate of the man drinking the juice alone\n    man_rate = 1 / 15\n    # combined rate of the man and his wife drinking the juice\n    combined_rate = 1 / 12\n    # rate of the wife drinking the juice alone\n    wife_rate = combined_rate - man_rate\n    # calculate how many days it takes for the wife to finish the juice alone\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    fruits_per_friend = (pears + strawberries) // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    num_wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = num_wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    num_books_purchased = 5\n    offer_count = num_books_purchased // 3\n    total_books_with_offer = num_books_purchased + offer_count\n    \n    # Calculate the number of books Subhan has to pay for\n    books_to_pay_for = total_books_with_offer - offer_count\n\n    # Calculate total price\n    total_price = books_to_pay_for * book_price\n    return total_price\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of children be x\n    children = symbols('x')\n    # There were 190 more women than children\n    women = children + 190\n    # There were thrice as many men as children\n    men = 3 * children\n    # Total number of people is the sum of children, women, and men\n    total_people = children + women + men\n\n    # 2/5 of the people were women\n    # So, we set up the equation: women = (2/5) * total_people\n    equation = Eq(women, (2/5) * total_people)\n\n    # Solve the equation\n    solutions = solve(equation, children)\n\n    # Calculate the total number of people using the solved value of children\n    total_people_value = solutions[0] + (solutions[0] + 190) + 3 * solutions[0]\n\n    return total_people_value\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number Sam is thinking of\n    x = symbols('x')\n\n    # Create the equation according to the problem description\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Extract the solution\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the number of boys in the class\n    b = symbols('b')\n\n    # Total number of students in the class\n    total_students = 40\n\n    # Given average pencils per student\n    avg_all = 35\n\n    # Given average pencils for boys and girls\n    avg_boys = 20\n    avg_girls = 60\n\n    # Girls will be total students minus boys\n    g = total_students - b\n\n    # Equations based on the total pencils (average * number of students)\n    # Total pencils owned by boys is avg_boys * b\n    # Total pencils owned by girls is avg_girls * g\n    # Total pencils owned by the class is avg_all * total_students\n    equation = Eq(avg_boys * b + avg_girls * g, avg_all * total_students)\n\n    # Solve the equation for b, which represents the number of boys\n    solution = solve(equation, b)[0]\n\n    return solution\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression = -154  # Base below sea level\n    mount_fuji = 3776         # Tip above sea level\n\n    distance = abs(turpan_depression) + mount_fuji\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    for i in range(4):\n        if (7059 + i) % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        total_sum += int('1' * i)\n    ans = total_sum % 100\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the price of an apple and 'b' be the price of a banana\n    a, b = symbols('a b')\n\n    # Equation 1: 6a + 7b = total money Einstein has\n    # Equation 2: 8a + 4b = total money Einstein has\n    equation1 = Eq(6*a + 7*b)\n    equation2 = Eq(8*a + 4*b)\n\n    # Since both options leave him with no change, the total money is the same\n    # Solve the simultaneous equations to find the prices of 'a' and 'b'\n    solutions = solve((equation1 - equation2,), (a, b))\n\n    # Calculate total money Einstein has using either equation\n    total_money = solve(equation1.subs(solutions), b)[0] * 7\n\n    # Calculate how many bananas (b) he could afford with the total money\n    num_bananas = total_money / solutions[b]\n\n    return int(num_bananas)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import product\n\n    min_A, min_B, min_C = 2, 4, 3\n\n    count = 0\n    for a, b, c, d in product(range(min_A, 16), repeat=4):\n        if a + b + c + d == 15 and a >= min_A and b >= min_B and c >= min_C:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    result = symbols('result')\n    # Leo's incorrect division operation is modeled as (result + 98.01) * 2.11\n    # Result without the decimal point in 2.11\n    incorrect_result = (result + 98.01) * 2.11\n\n    # The true result (correct division) is just (result * 2.11)\n    true_result = result * 2.11\n\n    # Equation representing the difference between the incorrect and true results\n    equation = Eq(incorrect_result, true_result)\n\n    # Solving for the true result\n    ans = solve(equation, result)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n    \n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts John and Choon Mui originally have\n    j, cm = symbols('j cm')\n\n    # The equations representing the problem\n    equation1 = Eq(j - 30, 4 * (cm - 150))  # John's remainder is 4 times Choon Mui's remainder\n    equation2 = Eq(j, cm)  # Initially, John and Choon Mui had the same amount of money\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, cm))\n\n    # Calculate how much John had left\n    john_left = solutions[j] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for female (f) and male (m) visitors\n    f, m = symbols('f m')\n\n    # Equation 1: On the first day, the number of male visitors was 450 more than the number of female visitors.\n    equation1 = Eq(m, f + 450)\n\n    # Equation 2: On the second day, the number of female visitors increased by 15%.\n    # The number of male visitors decreased by 18%. The total number of visitors was 1354.\n    equation2 = Eq((f * 1.15) + (m * 0.82), 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # The solution is the number of male visitors on the first day\n    return solutions[m]\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    # Conversion factors\n    miles_to_kilometers = 1.60934\n    minutes_to_hours = 1 / 60\n\n    # Given values\n    speed_limit_mph = 65\n    travel_time_minutes = 15\n\n    # Calculating distance traveled in miles\n    distance_miles = speed_limit_mph * (travel_time_minutes * minutes_to_hours)\n\n    # Converting miles to kilometers\n    distance_kilometers = distance_miles * miles_to_kilometers\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10  # percent\n\n    increase_amount = original_amount * (percentage_increase / 100)\n    ans = original_amount + increase_amount\n\n    return ans\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # length of the yacht in meters\n    scale = 20  # scale 1:20\n    model_length_cm = (actual_length_m * 100) / scale  # convert meters to centimeters and apply the scale\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    # Let the original number of eggs be x.\n    # According to the problem, after the first sale, the seller has x - (x/2 + 5) eggs left.\n    # After the second sale, the seller has x/2 - 5 - ((x/2 - 5)/2 - 4) eggs left.\n    # The seller is finally left with 15 eggs.\n    # Setting up the equation x/2 - 5 - ((x/2 - 5)/2 - 4) = 15\n    # Solve for x to find the original number of eggs.\n\n    # We have remaining eggs as an expression of x:\n    # (x/2 - 5)/2 - 4 = the eggs left after the second sale\n\n    # Simplifying the expression:\n    # (x/2 - 5)/2 - 4 + 15 = (x/2 - 5)/2 + 11\n\n    # Since the seller was left with 15 eggs, we equate this to 15:\n    # (x/2 - 5)/2 + 11 = 15\n\n    # This simplifies to:\n    # (x/2 - 5)/2 = 4\n\n    # Then we multiply both sides by 2 to get:\n    # x/2 - 5 = 8\n\n    # Then we add 5 to both sides:\n    # x/2 = 13\n\n    # Finally, we multiply both sides by 2 to get the original number of eggs:\n    # x = 26\n\n    # So the seller had 26 eggs in the basket initially.\n    return 26\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n    \n    # Total number of permutations for 4 people is 4 factorial\n    total_permutations = factorial(4)\n    \n    # Calculate derangement (permutations where no element appears in its original position)\n    # The formula for derangement is !n = (n-1)(!(n-1) + !(n-2)) with base values !1 = 0 and !2 = 1\n    # For n = 4, we use the base values for n=2 and n=3 to calculate !4 as follows\n    derangement = (4 - 1) * (factorial(3 - 1) + factorial(3 - 2))\n    \n    return derangement\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n\n    balloons_each_pupil = total_balloons // pupils\n\n    return balloons_each_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n\n    return count, ways\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_progress = day_distance - night_distance\n    days = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_distance\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n    # Compound interest for annually compound\n    amount = principal * ((1 + rate) ** time)\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    pay_for_week = hourly_rate * 8 * 5  # Assuming a week has 5 working days\n    remaining_debt = 700 - pay_for_week\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n\n    ans = air_ticket - train_ticket\n\n    return ans\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if str(A) == str(A)[::-1]:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)  # -2 rounds to the nearest hundred\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n    # LCM of the number of days between haircuts for Arjun (14 days) and Yahya (10 days)\n    ans = lcm(14, 10)\n    return ans\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total = 0\n    for i in range(10):\n        for j in range(10):\n            number = 2000 + i * 100 + 90 + j\n            if number % 3 == 0 and number % 5 == 0:\n                total += number\n    return total\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n\n    number_of_trees = (highway_length // distance_apart) - 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_end = 34\n    stamps_given = 14\n    stamps_bought = 11\n    stamps_used = 2\n\n    stamps_begin = stamps_end + stamps_given + stamps_used - stamps_bought\n\n    return stamps_begin\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    speed1 = 7  # Speed for the first part in meters per second\n    distance1 = 280  # Distance for the first part in meters\n    speed2 = 5  # Speed for the second part in meters per second\n    distance2 = 400  # Distance for the second part in meters\n    speed3 = 8  # Speed for the third part in meters per second\n    distance3 = 800 - distance1 - distance2  # Distance for the third part in meters\n\n    time1 = distance1 / speed1  # Time for the first part in seconds\n    time2 = distance2 / speed2  # Time for the second part in seconds\n    time3 = distance3 / speed3  # Time for the third part in seconds\n\n    total_time = time1 + time2 + time3  # Total time in seconds\n\n    return total_time\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n    # Lucas lost the shoes and had to pay back the fake note value\n    loss = cost_of_shoes + fake_note_value\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5 / 7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n    \n    # Treat A, B, and C as a single entity as they are always together, plus the remaining 7 students\n    groups = 8\n    \n    # Calculate permutations of the 8 entities (7 students + 1 group of A, B, and C)\n    group_permutations = factorial(groups)\n    \n    # Calculate permutations of A, B, and C within their group\n    abc_permutations = factorial(3)\n    \n    # The total permutations is the product of group_permutations and abc_permutations\n    total_permutations = group_permutations * abc_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    min_number = int('1' + '0' * 46)\n    for i in range(46):\n        for digit in range(10):\n            new_number = int(number_str[:i] + str(digit) + '0' * (45 - i))\n            if new_number > min_number:\n                min_number = min(min_number, new_number)\n    return min_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    total_blue_balls = 6\n    ans = total_blue_balls + 1  # take out all blue balls + 1 to ensure getting at least one white ball\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    number_of_students = 15\n    number_to_choose = 4\n    return comb(number_of_students, number_to_choose)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n\n    total_marbles = james + linda + ben\n    return int(total_marbles)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    ans = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    # When tying n rulers with overlap o, the total length is n*l - (n-1)*o.\n    total_length = (number_of_rulers * short_ruler_length) - ((number_of_rulers - 1) * overlap_length)\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 a.m. to 7:30 a.m.\n    jogging_time_hours = 1\n    jogging_speed_mph = 6\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n    \n    # Star walks from 7:30 a.m. to 9:30 a.m., which is 2 hours.\n    walking_time_hours = 2\n    walking_speed_mph = 5\n    walking_distance = walking_speed_mph * walking_time_hours\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n    \n    while used_cups >= 7:\n        current_batch = used_cups // 7\n        new_cups += current_batch\n        used_cups = used_cups - current_batch * 7 + current_batch\n    \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length from metres to cm\n    spacing_cm = 15            # Spacing between cauliflowers in cm\n    initial_offset_cm = 20     # Initial offset from the start in cm\n    cauliflower_width_cm = 45  # Width of each cauliflower in cm\n\n    # Calculate space occupied by one cauliflower with spacing\n    space_per_cauliflower_cm = cauliflower_width_cm + spacing_cm\n\n    # Calculate the remaining length of the plot after the initial offset\n    remaining_length_cm = plot_length_cm - initial_offset_cm - cauliflower_width_cm\n\n    # Calculate the number of cauliflowers that can be planted\n    number_of_cauliflowers = remaining_length_cm // space_per_cauliflower_cm\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_pages = (14 * 3) + (9 * 2) + 12\n    total_days = 6\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    a_students = 8\n    b_students = 12\n    c_students = 20\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_ab = gcd(a_students, b_students)\n    gcd_abc = gcd(gcd_ab, c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # kilometers to meters\n\n    time_taken = distance / speed_of_sound\n\n    return time_taken\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the number of members in the Badminton and Bowling clubs\n    B, b = symbols('B b')\n    \n    # The equation representing that the Badminton Club had thrice as many members as the Bowling Club\n    eq1 = Eq(B, 3 * b)\n    \n    # The equation representing that after 36 members left the Badminton Club and 4 members left the Bowling Club,\n    # both clubs have the same number of members\n    eq2 = Eq(B - 36, b - 4)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (B, b))\n    \n    # The number of members each club had in the end (after the members left)\n    members_end_Badminton = solutions[B] - 36\n    members_end_Bowling = solutions[b] - 4\n    \n    # Returning the number of members each club had in the end\n    return members_end_Badminton\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n    return num1 - num2\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Since the total value is 504 and the average is 126\n    # The number of cards must be 504 / 126 = 4\n    num_cards = 504 // 126\n\n    # Let the smallest number be x. Then the numbers are x, x+2, x+4, x+6 because they are all odd and consecutive.\n    # The sum of these numbers is 4x + 12, and it must equal the total value which is 504.\n    # So we have 4x + 12 = 504\n    x = (504 - 12) // 4\n\n    return x\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (1/4) * (wendy - 10))\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    wendy_future = ages[wendy] + 5\n\n    return wendy_future\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    from sympy import primerange\n\n    # We want to count the power of 2 and 5 in its prime factorization\n    # Since 10 = 2 * 5, we need to count the number of pairs of 2 and 5 prime factors\n    two_counts = 0\n    five_counts = 0\n\n    # Count the multiples of 2 and 5 within the given range\n    for i in range(301, 1000):\n        while i % 2 == 0:\n            two_counts += 1\n            i //= 2\n        while i % 5 == 0:\n            five_counts += 1\n            i //= 5\n\n    # Number of zeros at the end will be equal to the minimum of two_counts and five_counts\n    ans = min(two_counts, five_counts)\n\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_frac = sum(1/i for i in range(10, 20))\n    return int(sum_frac)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    total_pupils = 1690\n    difference_in_boys_girls = 90\n    boys_swim_diff = 120\n    \n    equation1 = Eq(boys - girls, difference_in_boys_girls) \n    equation2 = Eq(girls_swim + girls_not_swim, girls)\n    equation3 = Eq(boys_swim + boys_not_swim, boys)\n    equation4 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation5 = Eq(boys_not_swim - boys_swim, boys_swim_diff)\n    equation6 = Eq(girls + boys, total_pupils)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    can_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return can_not_swim\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = (english_classes + math_classes) - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    rate = 1.10  # 10% increase is the same as multiplying by 1.10\n\n    # Euan's pocket money went up by 10% each year from 2018 to 2020.\n    # To find the amount he received in 2018, we need to reverse the increases:\n    # 2020 -> 2019: Divide by rate (1.10)\n    # 2019 -> 2018: Divide by rate (1.10) again\n    amount_2018 = final_amount / rate / rate\n\n    return amount_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    sleep_duration = 215  # minutes\n    race_distance = 6990  # metres\n    \n    # Distance covered by rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * 10  # 10 minutes at 330 m/min\n    \n    # Distance covered by turtle during rabbit's sleep\n    turtle_distance_during_sleep = turtle_speed * (10 + sleep_duration)  # 10 minutes + 215 minutes at 30 m/min\n    \n    # Remaining distance for rabbit after waking up\n    remaining_distance_for_rabbit = race_distance - rabbit_distance_before_sleep\n    \n    # Time needed for rabbit to finish the race after sleep\n    time_needed_for_rabbit = remaining_distance_for_rabbit / rabbit_speed\n    \n    # Time needed for turtle to reach the finish line from the beginning\n    total_time_needed_for_turtle = race_distance / turtle_speed\n    \n    # Check who reaches the finish line first\n    if total_time_needed_for_turtle < (10 + sleep_duration + time_needed_for_rabbit):\n        winner = \"turtle\"\n        time_difference = (10 + sleep_duration + time_needed_for_rabbit) - total_time_needed_for_turtle\n        distance_between = 0  # Turtle is already at the finish line\n    else:\n        winner = \"rabbit\"\n        time_difference = total_time_needed_for_turtle - (10 + sleep_duration + time_needed_for_rabbit)\n        distance_between = time_difference * turtle_speed  # This is how far turtle is from the finish line when rabbit finishes\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n    \n    # Total permutations of 7 people\n    total_permutations = factorial(7)\n    \n    # Permutations where the three specific people stand next to each other\n    # We treat the three people as a single unit, so we have 5 units\n    # to arrange in total. We also need to consider the arrangements of the\n    # three people within their unit. So we multiply by factorial(3).\n    together_permutations = factorial(5) * factorial(3)\n    \n    # The final answer is the total permutations minus the invalid\n    # permutations where the three people are standing next to one another.\n    ans = total_permutations - together_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    n = 25\n    difference = (25 - 10) / (4 - 1)\n\n    total_athletes = n / 2 * (2 * first_term + (n - 1) * difference)\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    # Function to count the number of 5s in the \n    # prime factorization of a given number.\n    def count_factors(n, divisor):\n        count = 0\n        while n % divisor == 0:\n            count += 1\n            n = n // divisor\n        return count\n    \n    num_zeros = 0\n    for i in range(1, 790):\n        # Count the factors of 5 in each number from 1 to 789\n        num_zeros += count_factors(i, 5)\n    \n    # The number of zeros at the end of the product \n    # is determined by the number of 5s in the prime factorization \n    # because each zero at the end requires a pair of 2 and 5 \n    # and there will be more 2s than 5s.\n    return num_zeros\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    average_score_A = 76\n    average_score_B = 67\n    average_combined = 70\n    num_students_A = 20\n    \n    # Let's denote the number of students in team B as x.\n    # We will use the formula for the combined average:\n    # (average_score_A * num_students_A + average_score_B * x) / (num_students_A + x) = average_combined\n    # So, solving for x will give us the number of students in team B.\n    \n    x = symbols('x')\n    equation = Eq((average_score_A * num_students_A + average_score_B * x), average_combined * (num_students_A + x))\n    num_students_B = solve(equation, x)[0]\n    \n    return num_students_B\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants_per_school_to_ensure_four = 4\n    total_participants = 100\n    # If each school had at least 4 participants, to minimize the number of schools\n    # we would calculate the maximum number of schools by dividing the total number of participants\n    # by the number of participants per school that ensures each school has at least 4.\n    max_schools = total_participants // participants_per_school_to_ensure_four\n\n    # However, to ensure the maximum schools, the remaining participants after the division\n    # would be distributed one to each of the additional schools.\n    if total_participants % participants_per_school_to_ensure_four != 0:\n        max_schools += 1\n\n    return max_schools\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = list(permutations(digits, 3))  # Generate all 3-digit permutations\n    three_digit_numbers = [100*p[0] + 10*p[1] + p[2] for p in perms]  # Convert to numbers\n\n    min_product = None\n    for i in range(len(three_digit_numbers)):\n        for j in range(i + 1, len(three_digit_numbers)):\n            product = three_digit_numbers[i] * three_digit_numbers[j]\n            if min_product is None or product < min_product:\n                # Check if all digits are used only once\n                combined_digits = str(three_digit_numbers[i]) + str(three_digit_numbers[j])\n                if len(set(combined_digits)) == 6:\n                    min_product = product\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_permutations = permutations(range(1, 10), 7)  # Generate permutations for digits 1-9\n    max_product = 0\n    min_product = float('inf')\n    \n    for perm in all_permutations:\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    return max_product - min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25\n    max_dice_roll = 6\n\n    min_rolls = (min_steps + max_dice_roll - 1) // max_dice_roll\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n    \n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of the arithmetic sequence\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    distance_per_hour = 40 - 10\n    hours = 0\n\n    while total_distance > 0:\n        hours += 1\n        total_distance -= 40  # Climbing 40 cm\n        if total_distance <= 0:\n            break\n        total_distance += 10  # Slipping back 10 cm\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    largest_prime = 0\n    for num in range(30):\n        if isprime(num) and num > largest_prime:\n            largest_prime = num\n    return largest_prime\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    initial_typists = 5\n    words = 6000\n    minutes = 20\n    words_needed = 9000\n    remaining_typists = initial_typists - 2\n\n    words_per_typist_per_minute = (words / minutes) / initial_typists\n    total_minutes_needed = words_needed / (words_per_typist_per_minute * remaining_typists)\n\n    return total_minutes_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_spent = cabbage_price * cabbages_bought\n    lettuce_price = total_spent / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n\n    saved_money = total_money - spent_money\n\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_number_of_plants = 11\n    plants_removed = 8\n    remaining_plants = original_number_of_plants - plants_removed\n    \n    # The interval between plants is the total distance divided by the number of intervals.\n    # Since there are n plants, there must be n-1 intervals between them.\n    original_intervals = original_number_of_plants - 1\n    new_intervals = remaining_plants - 1\n    \n    # The original interval is the total distance divided by the number of original intervals.\n    original_interval_distance = total_distance / original_intervals\n    \n    # The new total distance is the same, but the number of intervals has changed.\n    # So we divide the total distance by the number of new intervals.\n    new_interval_distance = total_distance / new_intervals\n    \n    return new_interval_distance\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to total minutes\n    end_time = (14 * 60) + 5     # Convert end time to total minutes\n    duration = end_time - start_time  # Calculate the call duration in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration * cost_per_minute  # Calculate the total cost\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of the number 20\n    factors = divisors(20)\n\n    # Calculate the sum of all divisors\n    sum_factors = sum(factors)\n    \n    return sum_factors\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percent = 40\n    total = 320\n\n    ans = (percent / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # Total numbers from 200 to 399\n    total_numbers = 200\n    \n    # Three-digit numbers that do not contain 2 or do not contain 3\n    # No 2: choices for three digit are 3,3,3 i.e. only one such number (333)\n    # No 3: choices for three digits are 2,2,2 i.e. only one such number (222)\n    without_2_or_3 = 2  # 222 and 333\n\n    # Subtracting the numbers that do not contain 2 or do not contain 3\n    # from the total number of three-digit numbers that can be formed with 2 and 3\n    ans = total_numbers - without_2_or_3\n\n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 10, 17)  # 17th October\n    end_date = datetime(2023, 12, 20)    # 20th December\n    sunday_count = 0\n\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n    \n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of strawberry tarts\n    x = symbols('x')\n\n    # Given that the lady bought twice as many apple tarts than strawberry tarts\n    # Let the cost of an apple tart be c\n    # Then the cost of a strawberry tart will be c + 0.40\n    c = symbols('c')\n\n    # She spent an equal amount of money on each type of item\n    # So the total cost of strawberry tarts is x * (c + 0.40)\n    # And the total cost of apple tarts is 2x * c\n    # Given that the total cost is $40\n    total_cost_eq = Eq(x * (c + 0.40) + 2 * x * c, 40)\n\n    # Solve for x and c\n    solutions = solve((total_cost_eq,), (x, c))\n\n    # The number of tarts bought altogether is the sum of strawberry tarts and apple tarts\n    total_tarts = x + 2 * x\n\n    return total_tarts.subs(solutions)\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n    \n    # Define the least common multiple function for three numbers\n    def lcm_three(a, b, c):\n        return lcm(lcm(a, b), c)\n\n    # Convert the time to seconds\n    first_light = 30  # 0.5 * 60\n    second_light = 45  # 0.75 * 60\n    all_green_time = 540  # 9 * 60\n\n    # We need to find the time for the third light, in seconds, that is at least 30 seconds\n    third_light = 30\n\n    # Increment third_light until the lcm of all three is equal to all_green_time\n    while lcm_three(first_light, second_light, third_light) != all_green_time:\n        third_light += 1\n\n    return third_light\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # There are 5 people and 5 skiboards, and since the skiboards are all\n    # different, each person has a unique skiboard. This is a permutation\n    # problem where we want to find the number of ways to arrange 5 items.\n    num_ways = factorial(5)  # This is 5! since there are 5 skiboards.\n\n    return num_ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces, fitted_pieces = symbols('total_pieces fitted_pieces')\n\n    # On the first day, 20% of the pieces are fitted\n    day1_eq = Eq(fitted_pieces, 0.20 * total_pieces)\n\n    # On the second day, 60 more pieces are fitted\n    day2_eq = Eq(fitted_pieces + 60, (2 / 7) * total_pieces)\n\n    # Solve the system of equations\n    solutions = solve((day1_eq, day2_eq), (total_pieces, fitted_pieces))\n\n    return solutions[total_pieces]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position = total_children - 17 + 1  # Converting Tony's position to be from the left\n\n    # Counting from Henry to Tony, including both Henry and Tony\n    num_children_henry_to_tony = tony_position - henry_position + 1\n\n    return num_children_henry_to_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres_per_metre = 1000\n    ans = metres * millimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage_not_multiples_of_10 = (not_multiples_of_10 / total_numbers) * 100\n    return percentage_not_multiples_of_10\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_amount = 4\n    payment_percentage = 30 / 100\n    amount_paid = initial_amount * payment_percentage\n    amount_owed = initial_amount - amount_paid\n    return amount_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    \n    remaining_legs = 28 - (cats_legs + dogs_legs + rabbit_legs)\n    birds = remaining_legs // 2\n    \n    return birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time_meeting = 10  # time in hours when they meet\n\n    # Total distance covered by both Jack and Rose when they meet\n    total_distance = (jack_speed + rose_speed) * time_meeting\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    melvin_gained = melvin_original * (5/8)\n    melvin_lost = melvin_original * (1/4)\n    melvin_final_gained = melvin_original * (1/8)\n    \n    # After Melvin gains cards from Nelson\n    melvin_after_gain = melvin_original + melvin_gained\n    \n    # After both Melvin and Nelson lose cards to Oliver\n    melvin_after_lost = melvin_after_gain - melvin_lost\n    nelson_after_lost = melvin_lost\n    oliver_cards = melvin_lost + melvin_lost  # Both Melvin and Nelson lost to Oliver\n    \n    # After the final round where Melvin gains cards from Nelson\n    melvin_final = melvin_after_lost + melvin_final_gained\n    nelson_final = nelson_after_lost - melvin_final_gained\n    \n    # We assume they all end up with the same number of cards\n    # Setting Melvin's final amount equal to Nelson's and Oliver's\n    total_cards = 3 * melvin_final\n    return int(total_cards)\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy import primefactors\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    products = {i * j for i in cards for j in cards if i != j}\n    triple_products = {i * j * k for i in cards for j in cards for k in cards if i != j and j != k and i != k}\n\n    common_product = products.intersection(triple_products).pop()\n    \n    picked_numbers = {i for i in cards if common_product % i == 0}\n    unpicked_number = next(num for num in cards if num not in picked_numbers)\n    \n    return unpicked_number\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25):\n        if 24 % i == 0 and i % 2 != 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let P be Polly's age, C1 be age of first child, C2 age of second child, and C3 age of third child\n    # At time t after her 20th birthday, we have the following equations:\n    # P = 20 + t (Polly's age)\n    # C1 = t (first child age)\n    # C2 = t - 2 (second child age)\n    # C3 = t - 4 (third child age)\n    # We are looking for a t such that P = C1 + C2 + C3\n    # 20 + t = t + (t - 2) + (t - 4)\n    # Simplify the equation:\n    # 20 + t = 3t - 6\n    # 2t = 26\n    # t = 13 (the number of years after her 20th birthday)\n    # Now find Polly's age:\n    polly_age_when_sum_equals = 20 + 13\n    return polly_age_when_sum_equals\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    return (2 * 5 + 1 * 5) == ((2 + 1) * 5)\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiplier = 5\n    \n    weight_without_presents = total_weight / multiplier\n    \n    return weight_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago the combined age of the 2 dogs was 10 years old\n    combined_age_four_years_ago = 10\n\n    # Since 4 years have passed, we need to add 4 years for each dog\n    combined_age_now = combined_age_four_years_ago + 4 * 2\n\n    # In two years, we need to add 2 more years for each dog\n    combined_age_in_two_years = combined_age_now + 2 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - y, 39)\n    equation2 = Eq(x + y, 59)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n    \n    m_value = solve(equation, m)\n    \n    return m_value[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Given the product of the numbers, we can calculate their prime factorization\n    product_ABC = 30 * 35 * 42\n\n    # Prime factorization of the product would give us the square of the prime factors of A, B, and C\n    # since each prime factor would appear twice, once in A*B, once in B*C, and once in C*A\n    squared_factors = product_ABC\n\n    # Now we can calculate A, B, and C by taking square roots of respective products\n    # First let's find the square root of the squared factors to find A*B*C\n    ABC = squared_factors ** (1/2)\n\n    # Now using the provided equations, we calculate A, B, and C\n    A = (ABC / 35)  # Since A*B*C / (B*C) = A\n    B = (ABC / 42)  # Since A*B*C / (C*A) = B\n    C = (ABC / 30)  # Since A*B*C / (A*B) = C\n\n    # Finally, calculate the sum of A, B, and C\n    ans = A + B + C\n    return round(ans)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution # substitute actual x and y values when calling this function"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1), (cora, qingle))\n\n    cora_sweets = solutions[cora]\n    qingle_sweets = solutions[qingle]\n\n    difference = abs(cora_sweets - qingle_sweets)\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0.\n    b = 0\n\n    # It also passes through the point (4, 8), so we can find the slope m using\n    # the formula for the slope between two points (x1, y1) and (x2, y2):\n    # m = (y2 - y1) / (x2 - x1)\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n\n    m = (y2 - y1) / (x2 - x1)\n\n    # The equation of the line is y = mx + b\n    # Plug in the values of m and b into the equation.\n    ans = f'y = {m}x + {b}'\n\n    return ans\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    jane, eric = symbols('jane eric')\n    # Initial ratio of seashells between Jane and Eric\n    equation1 = Eq(jane, 5/7 * eric)\n    # After giving 6 seashells, the new ratio becomes 11 to 13\n    equation2 = Eq((jane + 6) / (eric - 6), 11/13)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jane, eric))\n    \n    # Calculate the total number of seashells (jane + eric)\n    total_seashells = solutions[jane] + solutions[eric]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n    \n    while warren_addition > 0:\n        current_number += warren_addition\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtraction\n        warren_addition -= 1\n        naida_subtraction += 1\n        \n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    \n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / total_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n\n    numbers = [48, 925, 38, 435]\n    prime_factors = {}\n\n    # Get prime factors for each number and add them to the prime_factors dictionary\n    for number in numbers:\n        factors = factorint(number)\n        for prime in factors:\n            if prime in prime_factors:\n                prime_factors[prime] += factors[prime]\n            else:\n                prime_factors[prime] = factors[prime]\n\n    # Number of zeros at the end is determined by the number of factor pairs of 2 and 5\n    num_pairs = min(prime_factors.get(2, 0), prime_factors.get(5, 0))\n\n    return num_pairs\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['5', '3', '9', '4', '8']\n    min_even = float('inf')\n\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        # Check if it is a 5-digit even number\n        if number % 2 == 0 and len(str(number)) == 5:\n            min_even = min(min_even, number)\n\n    return min_even\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    pianists_also_play_violin = piano_pupils * (1/4)\n\n    # Subtracting the number of pianists who also play violin from both\n    # piano players and violin players before union, to avoid double counting.\n    unique_piano_pupils = piano_pupils - pianists_also_play_violin\n    unique_violin_pupils = violin_pupils - pianists_also_play_violin\n\n    # Since the intersection has already been subtracted from both the sets,\n    # we can simply add up the numbers to get the union of both the sets.\n    pupils_play_either = unique_piano_pupils + unique_violin_pupils + pianists_also_play_violin\n\n    # Those who play neither instruments are the total pupils minus those\n    # who play either the piano or the violin or both.\n    neither_play = total_pupils - pupils_play_either\n\n    return neither_play\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n\n    amount = principal * (1 + interest_rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, pi, integrate\n\n    # Define the variable\n    x, y = symbols('x y')\n\n    # The right-angle vertex is at the origin (0,0)\n    # The length of the legs of the isosceles right triangle is 2\n    # Equation of the hypotenuse: y = 2 - x (since it's a 45-45-90 triangle)\n\n    # We need to find the integral within the circle x^2 + y^2 < 1\n    # But, we are limited by the hypotenuse and the x and y axes\n\n    # Define the probability as the ratio of the desired area to the total area of the triangle\n    desired_area = integrate(integrate(1, (y, 0, 2 - x)), (x, 0, 1))\n\n    # Total area of the isosceles right triangle (1/2 * base * height)\n    total_area = 1 / 2 * 2 * 2\n\n    # Calculate the probability\n    probability = desired_area / total_area\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    A, B, C, D = symbols('A B C D', integer=True)\n    \n    # Given conditions\n    conditions = [\n        Eq(A, D / 4),\n        Eq(B, A - 1),\n        Eq(A * 1000 + B * 100 + C * 10 + D, 4 * (D * 1000 + C * 100 + B * 10 + A)),\n        A != B,\n        B != C,\n        C != D,\n        D != A\n    ]\n    \n    # Adding digit constraints\n    digit_constraints = [A > 0, A <= 9, B >= 0, B <= 9, C >= 0, C <= 9, D >= 0, D <= 9]\n    \n    # Solve the equations\n    solutions = solve(conditions + digit_constraints)\n    for sol in solutions:\n        if all(sol[i].is_prime for i in sol):\n            continue\n        if len(set(sol.values())) == 4:\n            num = int(\"\".join(str(sol[i]) for i in [A, B, C, D]))\n            return num\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    # Let x be the number Freddie chooses\n    # According to the problem, dividing x by 3 and adding 10 gives 25\n    # (x / 3) + 10 = 25\n    # Now we perform the inverse operations to find x\n    # Subtract 10 from both sides\n    result_after_division = 25 - 10\n    # Multiply both sides by 3 to undo the division and find Freddie's number\n    original_number = result_after_division * 3\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_numbers  # Sum of all actual numbers including 'a'\n\n    sum_without_a = sum(numbers)\n    a = total_sum - sum_without_a  # The value of 'a' is the remaining sum\n\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_constant = 30000 + 452\n    missing_number = (left_side - right_side_constant) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    piece_length_m = (total_length_cm / 2) / 100\n    return piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Lina's reasoning is incorrect because the third sock could still be\n    # of a different color than the first two, in this case, black.\n\n    # Using the Pigeonhole Principle, we can determine the correct number.\n\n    # There are 3 different colors. If Lina takes out one sock of each color,\n    # she does not have a pair yet. With one additional sock taken out,\n    # she is guaranteed to have at least one pair, because there are only\n    # 3 different colors and she would be taking 4 socks.\n\n    # So the correct calculation should be:\n    # Worst case scenario: 1 white, 1 grey, 1 black in the first 3 times.\n    # The 4th sock will guarantee a pair of the same color.\n    \n    return 4  # This is the number of socks needed to guarantee at least one pair.\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # Victoria + pupils to the left + pupils to the right\n    total_rows = 1 + 1 + 8  # row where Victoria is + row in front of her + rows behind her\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_marks = 75\n    total_marks_for_3_tests = average_marks * 3\n    total_marks_for_2_tests = 172\n    remaining_test_marks = total_marks_for_3_tests - total_marks_for_2_tests\n    \n    return remaining_test_marks\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = datetime.strptime(\"00:18\", \"%H:%M\")\n    arrival_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    walk_to_bus_stop_time = (bus_catch_time - school_time).total_seconds() // 60\n    bus_drop_off_time = bus_catch_time + (bus_trip_duration - datetime(1900, 1, 1))\n    walk_home_time = (arrival_home_time - bus_drop_off_time).total_seconds() // 60\n\n    total_walk_time = walk_to_bus_stop_time + walk_home_time\n\n    return int(total_walk_time)\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    \n    equation = Eq(((number + 3) / 4) * 9, 81)\n    \n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    distance_initial = 6300  # in meters\n    distance_at_830 = 1800   # in meters\n    time_initial = datetime.strptime(\"8:00\", \"%H:%M\")\n    time_at_830 = datetime.strptime(\"8:30\", \"%H:%M\")\n    \n    time_delta = time_at_830 - time_initial\n    distance_travelled = distance_initial - distance_at_830\n    \n    # Assuming a constant speed\n    speed = distance_travelled / (time_delta.seconds / 3600)  # in meters per hour\n    \n    # Time to travel the remaining 1800 m\n    time_to_travel_remaining = timedelta(hours=distance_at_830 / speed)\n    \n    arrival_time = time_at_830 + time_to_travel_remaining\n    ans = arrival_time.strftime(\"%H:%M\")\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_sugar_mr_smith = 300 * 0.50 + 600 * 0.20\n    total_volume_mr_smith = 300 + 600\n    percentage_mr_smith = total_sugar_mr_smith / total_volume_mr_smith\n\n    total_sugar_mrs_smith = 700 * 0.10 + 300 * (x / 100)\n    total_volume_mrs_smith = 700 + 300\n    percentage_mrs_smith = total_sugar_mrs_smith / total_volume_mrs_smith\n\n    equation = Eq(percentage_mr_smith, percentage_mrs_smith)\n\n    solution = solve(equation, x)\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candy = 36\n    candy_given_to_lily = (3/4) * initial_candy\n    remaining_candy = initial_candy - candy_given_to_lily\n    candy_given_to_brother = (1/3) * remaining_candy\n    final_candy = remaining_candy - candy_given_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10\n    kenny = symbols('kenny')\n    younger_brother = kenny - 2\n    \n    equation = Eq(3 * may_age_when_10, kenny + younger_brother)\n    \n    kenny_age = solve(equation, kenny)[0]\n    may_current_age = 7\n    \n    kenny_current_age = kenny_age - (10 - may_current_age)\n    \n    age_difference = kenny_current_age - may_current_age\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the number of muffins and d represent the number of donuts\n    m, d = symbols('m d')\n\n    # Price per item\n    price_muffin = 6 / 3\n    price_donut = 10 / 7\n\n    # Amy spent 1/2 of her money on donuts and the other half on muffins\n    # She bought 54 more donuts than muffins. Thus, d = m + 54\n    # Total cost for muffins and donuts is the same since she spent half on each\n    equation1 = Eq(d - m, 54)\n    equation2 = Eq(price_donut * d, price_muffin * m)\n\n    # Solving the system of equations to find the number of muffins and donuts\n    solutions = solve((equation1, equation2), (m, d))\n\n    # Finding the amount of money spent on muffins (which is half of the total money she had)\n    money_spent_on_muffins = solutions[m] * price_muffin\n\n    # Total money Amy had initially (double the amount spent on muffins)\n    total_money = money_spent_on_muffins * 2\n\n    return total_money\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10\n    sell_price_per_bag = 0.65\n    total_weight_kg = 5\n    weight_per_bag_kg = 0.25\n\n    total_bags = total_weight_kg / weight_per_bag_kg\n    total_revenue = total_bags * sell_price_per_bag\n    profit = total_revenue - cost_price\n    profit_percentage = (profit / cost_price) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    \n    min_apples_per_child = 1\n    max_apples_for_one = total_apples - (min_apples_per_child * (children - 1))\n\n    return max_apples_for_one\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # Distance between the 4th and 9th teeth is 30mm\n    # This means there are 9 - 4 = 5 gaps between the 4th and 9th teeth\n    # The distance for each gap is 30 / 5 = 6mm\n    \n    distance_per_gap = 30 / 5\n    \n    # Since there are 100 teeth, there are 99 gaps\n    # Total length is number of gaps multiplied by the distance of each gap\n    \n    total_length_mm = 99 * distance_per_gap\n    \n    # Convert the length from millimeters to centimeters\n    \n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # In 2008, grandmother was 80 years old.\n    # Thus, she was born in 2008 - 80 = 1928.\n    grandmother_birth_year = 2008 - 80\n\n    # In 1996, mum was 40 years old.\n    # Thus, she was born in 1996 - 40 = 1956.\n    mum_birth_year = 1996 - 40\n\n    # We want to find grandmother's age when mum was 25.\n    # So we calculate the year when mum was 25.\n    year_when_mum_was_25 = mum_birth_year + 25\n\n    # Now we calculate grandmother's age in that year.\n    grandmothers_age_when_mum_was_25 = year_when_mum_was_25 - grandmother_birth_year\n\n    return grandmothers_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total_sum = 46563 + 9785 + 859\n    return total_sum\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "from math import factorial\ndef solution():\n    total_ways = factorial(5)\n    adjacent_ways = 2 * factorial(4)\n    return total_ways - adjacent_ways\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let the variables represent the number of ice-cream cones each friend gets\n    z, x, s = symbols('z x s')\n\n    # Equation that all ice-cream cones are distributed\n    eq = z + x + s - 5\n\n    # Each friend must get at least one ice-cream cone\n    solutions = solve([eq, z > 0, x > 0, s > 0], (z, x, s))\n\n    # The number of solutions is the number of ways to distribute the cones\n    ans = len(solutions)\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n\n    sold_monday = (2/3) * total_vegetables\n    remaining_after_monday = total_vegetables - sold_monday\n    sold_tuesday = (2/5) * remaining_after_monday\n\n    total_sold = sold_monday + sold_tuesday\n    \n    return total_sold\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To not get 16 balls of one color and 13 balls of another,\n    # we can take 15 balls of each of the five colors (for a total of 15*5),\n    # Then take 12 more balls from the remaining four colors (for a total of 12*4).\n    # If we take one more ball, we must have either 16 of one color or 13 of another.\n    balls_needed = (15 * 5) + (12 * 4) + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    \n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_biscuits = total_biscuits / 4\n    remaining_biscuits = total_biscuits - given_biscuits\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n    equation1 = Eq(2 * table_cost + 5 * chair_cost, 220)\n    equation2 = Eq(table_cost, 3 * chair_cost)\n\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    original_amount = spent / (1 - remaining_fraction)\n    \n    return original_amount\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 0.0381\n    time = 5\n\n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    ans = 40 / 100 * 75\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_speed_ratio = 3/5\n  \n    # The total distance walked by Lucas and his mother is the original distance minus remaining distance\n    distance_walked = total_distance - remaining_distance\n\n    # Let the distance Lucas walked be x then mother walked (distance_walked - x)\n    # According to the ratio lucas_distance/mother_distance = lucas_to_mother_speed_ratio\n    # We have x/(distance_walked - x) = lucas_to_mother_speed_ratio\n    # Solving for x we get the distance Lucas walked\n    x = (distance_walked * lucas_to_mother_speed_ratio) / (1 + lucas_to_mother_speed_ratio)\n\n    return x\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    terms = 30\n    last_term = first_term + (terms - 1) * difference\n    \n    sum_of_terms = terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    pizzas_per_person = pizzas_initial / people_initial\n    pizzas_needed = pizzas_per_person * people_final\n\n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams /= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for their earnings\n    marion, julie, ethan = symbols('marion julie ethan')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(marion, 2 * julie)  # Marion earns twice the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)   # Ethan earns 5 times the amount Julie earns\n    equation3 = Eq(ethan - marion, 168)  # The difference in pay between Marion and Ethan\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marion, julie, ethan))\n    \n    # Calculate total earnings\n    total_earnings = solutions[marion] + solutions[julie] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5\n    return ans\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    equation1 = Eq(2 * big + 2 * small, 48)  # Total apples\n    equation2 = Eq(3 * big + 2 * small, 55)  # Total oranges\n\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[small]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    count = 0\n    i = 1\n    while i * i * 72 <= 2016:\n        if i * i * 72 <= 2016:\n            count += 1\n        i += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of years in the future and the ages of Efron and Danny\n    years_in_future, danny_age_now, efron_age_now = symbols('years_in_future danny_age_now efron_age_now')\n\n    # Efron is 30 years younger than Danny now\n    equation1 = Eq(efron_age_now, danny_age_now - 30)\n\n    # The current ratio of Danny's age to Efron's age is 8:3\n    equation2 = Eq(danny_age_now / efron_age_now, 8/3)\n\n    # The ratio of Danny's age to Efron's age in the future will be 5:3\n    equation3 = Eq((danny_age_now + years_in_future) / (efron_age_now + years_in_future), 5/3)\n\n    # Solve the equations for the unknowns\n    solutions = solve((equation1, equation2, equation3), (years_in_future, danny_age_now, efron_age_now))\n\n    # The number of years in the future is what we want to return\n    return solutions[years_in_future]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    least_num_of_children = solve_congruence(*congruences)\n\n    return least_num_of_children[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    butter_needed = (butter_used * desired_cookies) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    # Choosing a pencil and a ruler\n    pencil_ruler_ways = pencil_colours * ruler_colours\n    # Choosing a pencil and a pen\n    pencil_pen_ways = pencil_colours * pen_colours\n    # Choosing a ruler and a pen\n    ruler_pen_ways = ruler_colours * pen_colours\n\n    # Total ways to choose any two items\n    total_ways = pencil_ruler_ways + pencil_pen_ways + ruler_pen_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2*second_digit\n        if 1 <= first_digit <= 9:\n            for third_digit in range(10 - (first_digit + second_digit), \n                                     14 - (first_digit + second_digit)):\n                if 0 <= third_digit <= 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of games in the group stage for each group is C(4, 2) since each team plays every other team once\n    # and there are 4 teams in each group. The binomial coefficient C(n, k) is the number of ways to choose k elements\n    # from a set of n elements without regard to the order of selection.\n    group_games_per_group = 6  # C(4, 2) = 4! / (2! * (4-2)!) = 6\n    \n    # There are 8 groups\n    num_groups = 8\n    group_stage_games = group_games_per_group * num_groups\n    \n    # Number of games in the knockout round\n    # 16 teams in round of 16, 8 quarter-finalists, 4 semi-finalists, 2 final and 1 third-place match\n    # So there's 16-1 + 8-1 + 4-1 + 2 + 1 = 15 + 7 + 3 + 2 + 1 = 28 games in the knockout stage\n    knockout_stage_games = 15 + 7 + 3 + 2 + 1\n    \n    # Total number of games\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while (n * (n - 1)) // 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    num = 224\n    factors = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / 0.7\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    ways_to_choose = pencil_colours * ruler_colours * pen_colours\n    return ways_to_choose\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        points = correct * correct_points + incorrect * incorrect_points\n        if points == total_points:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the T-shirt and shorts\n    T_shirt, shorts = symbols('T_shirt shorts')\n\n    # Formulate the equations based on the given information\n    equation1 = Eq(2*shorts + 3*T_shirt, 26)\n    equation2 = Eq(2*shorts + 5*T_shirt, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (T_shirt, shorts))\n\n    return solutions[T_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of triangles, quadrilaterals, and pentagons\n    t, q = symbols('t q')\n\n    # Given number of pentagons\n    p = 2\n\n    # The total number of sides for triangles, quadrilaterals, and pentagons combined is 394\n    total_sides = Eq(3*t + 4*q + 5*p, 394)\n\n    # The number of quadrilaterals is 82 more than that of triangles\n    q_to_t_relation = Eq(q, t + 82)\n\n    # Solving the system of equations\n    solutions = solve((total_sides, q_to_t_relation), (t, q))\n\n    # Returning the number of quadrilaterals\n    return solutions[q]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')  # representing the number of sweets Rachel and Alice have\n\n    # If Rachel gives Alice 10 sweets, they would have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If both eat 8 sweets, Rachel has 3 times as many sweets left as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n    \nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    num_gaps = 3  # Since there are 4 lamp posts, there are 3 gaps between them\n\n    total_distance = distance_between_each * num_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total students\n    total_students = 150\n    \n    # Total teams\n    total_teams = total_students // 3\n    \n    # Given data\n    teams_with_1_boy = 15\n    teams_with_2_or_more_boys = 27\n    \n    # Calculate all-girl teams\n    all_girl_teams = total_teams - teams_with_1_boy - teams_with_2_or_more_boys\n    \n    # Given that the number of all-boy teams is twice the number of all-girl teams\n    all_boy_teams = 2 * all_girl_teams\n    \n    # Calculate the number of girls\n    girls = (all_girl_teams * 3) + teams_with_1_boy\n    \n    return girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5 and 7\n    for i in range(100, 1000):\n        if i % lcm == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    return 63 - (55 - 27)\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum([int(digit) for digit in str(product)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    base = 7\n    \n    # Convert numbers from base 10 to base 7\n    num1_base7 = int(str(61), base)\n    num2_base7 = int(str(34), base)\n    \n    # Calculate the difference in base 10\n    difference_base10 = num1_base7 - num2_base7\n    \n    # Convert the result back to base 7\n    ans = ''\n    while difference_base10 > 0:\n        ans = str(difference_base10 % base) + ans\n        difference_base10 //= base\n    \n    # If the result was 0, we need to ensure to return '0'\n    if ans == '':\n        ans = '0'\n\n    return ans\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and Town B be d kilometers\n    # Let the speed required to arrive at 9 am be x km/h\n\n    # Speed = Distance / Time\n    # For speed of 10 km/h to arrive at 10 am\n    # Time taken = Distance / 10\n\n    # For speed of 15 km/h to arrive at 8 am\n    # Time taken = Distance / 15\n\n    # The difference in time for these two speeds is 2 hours (from 8 am to 10 am)\n    # Therefore, (Distance / 10) - (Distance / 15) = 2 hours\n    # Simplify the equation: 3*Distance - 2*Distance = 2 * 10 * 15\n    # Distance = 2 * 10 * 15 / (3 - 2)\n    distance = 2 * 10 * 15\n\n    # Ben needs to arrive at 9 am, which is 1 hour later than when he cycles at 15 km/h\n    # Therefore, Time taken at speed x = (Distance / 15) + 1\n\n    # Using Speed = Distance / Time\n    # x = Distance / ((Distance / 15) + 1)\n    # Simplify the equation: x = 15 / (1 + 15 / Distance)\n    x = 15 / (1 + 15 / distance)\n\n    return x\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Given relationships\n    dog_to_rabbit_weight = 8  # 1 dog = 8 rabbits\n    rabbit_to_chicken_weight = 2  # 1 rabbit = 2 chickens\n    \n    # Calculating how many chickens weigh as much as 1 dog\n    dog_to_chicken_weight = dog_to_rabbit_weight * rabbit_to_chicken_weight\n    \n    return dog_to_chicken_weight\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Initialize the count of gloves\n    total_gloves = 1 + 2 + 3 + 4\n    \n    # Using the Pigeonhole Principle, to ensure a matching pair,\n    # Dilly should bring one more glove than there are pairs of different types and hands.\n    # There are two colors and two hands, so there are 4 types of gloves.\n    # Thus, Dilly should bring at least 5 gloves to ensure a matching pair.\n    number_to_ensure_pair = 4 + 1\n\n    # Check if we have enough total gloves to reach that number; if not, she needs to bring all gloves\n    number_to_bring = min(number_to_ensure_pair, total_gloves)\n\n    return number_to_bring\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_per_student = 12\n    total_candies = initial_students * candies_per_student\n    new_student_count = initial_students + 1\n    new_candies_per_student = total_candies // new_student_count\n    \n    return new_candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2  # halfway between Raj's and David's height\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    num_cards = 1\n    while True:\n        if (num_cards % 4 == 3) and (num_cards % 5 == 4) and (num_cards % 7 == 6):\n            return num_cards\n        else:\n            num_cards += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 1.20\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    # Rounding to the nearest cent\n    ans = round(final_value, 4)\n    return ans\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_diff = 52\n    boys = girls = 0\n    side_len = 1  # Start with an array of size 1x1\n    \n    while True:\n        if side_len % 2 == 0:  # Even length sides have girls in the innermost layer\n            girls += side_len ** 2\n            boys += (side_len + 1) ** 2\n        else:  # Odd length sides have boys in the innermost layer\n            boys += side_len ** 2\n            girls += (side_len - 1) ** 2\n        \n        if boys - girls == total_diff:\n            break\n        side_len += 1\n    \n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of pins Yuna originally had as 'y'\n    # The problem states that Eugene had 3 times as many pins as Yuna\n    # After buying 76 pins, Yuna had 7/9 as many pins as Eugene\n    eugene, yuna = symbols('eugene yuna')\n\n    # Equation 1: According to the question\n    equation1 = Eq(eugene, 3 * yuna)\n    \n    # Equation 2: Yuna bought 76 more pins\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n\n    # Solving the equations simultaneously for Eugene's original amount\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of all digits must be divisible by 9\n    # We know that the sum of the digits 1+2+3+4+5 = 15\n    # Let's find the possible value for A\n\n    sum_of_digits = 15\n    A = 0\n\n    # Find a value for A such that (sum_of_digits + A) is divisible by 9\n    while (sum_of_digits + A) % 9 != 0:\n        A += 1\n\n    # We have the digit A, now we create the six-digit number\n    six_digit_number = int('12345' + str(A))\n\n    # To find the remainder when the number is divided by 4, we only need to look at the last two digits\n    last_two_digits = six_digit_number % 100\n\n    # Find the remainder when the last two digits are divided by 4\n    remainder = last_two_digits % 4\n\n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n\n    number = hundreds * 100 + tens * 10 + ones\n    \n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_rate = 0.35\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Kelly wants to leave a multiple of 3 for Dan to ensure her victory.\n    # If there are 11 matches, she needs to take away either 1 or 2 matches first.\n    # If Kelly takes away 1 match, 10 matches will remain, which is not a multiple of 3.\n    # If Kelly takes away 2 matches, 9 matches will remain, which is a multiple of 3.\n    # Therefore, Kelly must take away 2 matches to ensure her victory.\n    return 2\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    # Let's call the total number of flowers 'total_flowers'\n    # red_flowers = 1/2 * total_flowers\n    # remaining_flowers = total_flowers - red_flowers\n    # pink_flowers = 4/7 * remaining_flowers\n    # red_flowers = pink_flowers + 6\n    # We form an equation based on the given information:\n    equation = Eq((1/2) * total_flowers, (4/7) * (total_flowers - (1/2) * total_flowers) + 6)\n\n    # Solve the equation for total_flowers\n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator1 = (5 * 7 + 1) / 7\n    numerator2 = (3 * 11 + 3) / 11\n    numerator3 = (1 * 23 + 13) / 23\n\n    denominator1 = (3 * 7 + 3) / 7\n    denominator2 = (2 * 11 + 2) / 11\n    denominator3 = (1 * 23 + 1) / 23\n\n    # Add the fractions in numerator and denominator\n    numerator_sum = numerator1 + numerator2 + numerator3\n    denominator_sum = denominator1 + denominator2 + denominator3\n\n    # Calculate the final result\n    ans = numerator_sum / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    return factorial(3)\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # The equation is 4 * square - 3 = 65\n    # We need to find the value of square by performing inverse operations.\n\n    # Add 3 to both sides of the equation to cancel out -3 on the left side.\n    result_with_addition = 65 + 3  # 4 * square = 68\n\n    # Divide both sides by 4 to find the value of square\n    square_value = result_with_addition / 4  # square = 68 / 4\n\n    return square_value\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    vehicles = 27  # total number of vehicles\n    total_wheels = 78  # total number of wheels\n\n    # Let x be the number of cars and y be the number of motorcycles.\n    # We have two equations:\n    # 1) x + y = 27 (since there are 27 vehicles in total)\n    # 2) 4x + 2y = 78 (since cars have 4 wheels and motorcycles have 2 wheels)\n\n    # We can solve this system using substitution or elimination method.\n    # Here, we proceed by expressing y in terms of x from the first equation:\n    # y = 27 - x\n\n    # Substituting y in the second equation:\n    # 4x + 2(27 - x) = 78\n    # 4x + 54 - 2x = 78\n    # 2x = 78 - 54\n    # 2x = 24\n    # x = 24 / 2\n    # x = 12\n\n    cars = (total_wheels - 2 * vehicles) / 2\n    return int(cars)\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of stickers Nicole initially had and after giving Jason stickers\n    nicole_initial, nicole_after = symbols('nicole_initial nicole_after')\n\n    # Jason's sticker count after receiving stickers from Nicole\n    jason_after = 20 + 18\n    \n    # Equation where Jason has 5 fewer stickers than Nicole after the exchange\n    equation1 = Eq(nicole_after, jason_after - 5)\n\n    # Equation where Nicole gives Jason 18 stickers\n    equation2 = Eq(nicole_initial, nicole_after + 18)\n    \n    # Solve for initial sticker count\n    solutions = solve((equation1, equation2), (nicole_initial, nicole_after))\n    \n    return solutions[nicole_initial]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions: length (L), breadth (B), height (H)\n    # New dimensions: length (1.10 * L), breadth (0.80 * B), height (1.10 * H)\n    \n    # Original volume: V = L * B * H\n    # New volume: V' = 1.10 * L * 0.80 * B * 11/10 * H\n\n    # New volume as a percentage of the original volume: V'/V * 100\n    new_volume_percentage = (1.10 * 0.80 * 11/10) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_grams in range(0, 77//2 + 1):\n        for three_grams in range(0, 77//3 + 1):\n            if 2 * two_grams + 3 * three_grams == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance = 5000  # distance of the race in metres\n    number_of_intervals = 9 + 1  # number of marshals plus the start and end points\n\n    distance_between_marshals = total_distance / number_of_intervals\n    \n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    first_speed = 180  # meters per minute\n    first_time = 6     # minutes\n    second_speed = 120 # meters per minute\n    second_time = 8    # minutes\n    \n    # Calculate the distance covered during each time period\n    first_distance = first_speed * first_time\n    second_distance = second_speed * second_time\n    \n    # Sum both distances to get the total distance travelled\n    total_distance = first_distance + second_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5)  # The side length of the square wall\n    \n    red_tiles = green_tiles = 0\n    for layer in range(1, (side_length // 2) + 1):\n        if layer % 2 == 1:\n            # Red layer tiles = Perimeter of current layer - 4 (because we counted corners twice)\n            red_tiles += 4 * (side_length - (layer - 1) * 2) - 4  \n        else:\n            # Green layer tiles = Perimeter of current layer - 4 (because we counted corners twice)\n            green_tiles += 4 * (side_length - (layer - 1) * 2) - 4\n\n    if side_length % 2 == 1:  # If the side length is odd, the center tile is red\n        red_tiles += 1\n\n    # Calculate the difference\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    tiles_more = abs(red_tiles - green_tiles)\n    \n    return (dominant_color, tiles_more)\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n\n    # First year interest\n    first_year_interest = principal * interest_rate\n    # Total amount at the end of the first year\n    first_year_total = principal + first_year_interest\n\n    # Second year interest\n    second_year_interest = first_year_total * interest_rate\n\n    # Total interest earned at the end of the second year\n    total_interest = first_year_interest + second_year_interest\n    \n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # 1 hour and 20 minutes in total\n\n    pictures_painted = total_minutes // minutes_per_picture\n\n    return pictures_painted\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4/7)\n    decimal_number = round(mixed_number, 1)\n    return decimal_number\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    repeating_seq = \"428571\"\n    length_of_seq = len(repeating_seq)\n    index = (69 - 1) % length_of_seq  # adjust for zero-based indexing\n    digit = repeating_seq[index]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 0.5\n    sold_day1 = 0.7\n    profit_day1 = 0.5\n    total_profit = 0.82 * planned_profit\n    remaining_goods = 1 - sold_day1\n    \n    # Calculate the actual profit made on the first day\n    profit_of_day1 = sold_day1 * profit_day1 \n    \n    # Calculate the remaining profit that needs to be earned from the second day's sales\n    profit_required_day2 = total_profit - profit_of_day1\n    \n    # The profit on the second day is the required profit divided by the remaining goods sold on the second day\n    profit_day2 = profit_required_day2 / remaining_goods\n    \n    # Discount rate is the negative profit on the remaining goods (as it is sold at a loss/discount)\n    discount_rate_day2 = (1 - profit_day2) if profit_day2 < 1 else 0\n    \n    return discount_rate_day2\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_salt_dylan = 300 * 0.35\n    total_salt_daisy = 200 * 0.50\n    total_salt = total_salt_dylan + total_salt_daisy\n    total_solution_weight = 300 + 200\n    concentration = total_salt / total_solution_weight\n\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let's assume Megacorp sold \"m\" widgets in 2014\n    m = 100  # Assume any reasonable value for widgets Megacorp sold\n\n    # Vastco sold 68% more widgets than Megacorp in 2014\n    # Therefore, Vastco sold \"v_2014\" widgets in 2014\n    v_2014 = m * 1.68\n\n    # Vastco's widgets sales rose by 32% in 2015\n    # Therefore, Vastco sold \"v_2015\" widgets in 2015\n    v_2015 = v_2014 * 1.32\n\n    # Vastco sold 44% more widgets than Megacorp in 2015\n    # Hence we can write the equation: v_2015 = 1.44 * m_2015\n    # Where \"m_2015\" is the number of widgets Megacorp sold in 2015\n\n    # Using the above equation, we find \"m_2015\"\n    m_2015 = v_2015 / 1.44\n\n    # The percentage increase in Megacorp's sales from 2014 to 2015 is then:\n    percentage_increase = ((m_2015 - m) / m) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    samantha_left = y / 2\n    return samantha_left\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for each child's age.\n    son1, son2, daughter1, daughter2 = symbols('son1 son2 daughter1 daughter2', integer=True)\n\n    # Setting up the equations according to the problem statement\n    equation1 = Eq(son1 + son2 + daughter1 + daughter2, 55)      # Sum of their ages is 55\n    equation2 = Eq(son1 - son2, 3)                               # Sons were born three years apart\n    equation3 = Eq(daughter1 - daughter2, 2)                     # Daughters were born two years apart\n    equation4 = Eq(son2, 2 * daughter1)                          # Younger son is twice as old as the older daughter\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (son1, son2, daughter1, daughter2))\n\n    # Finding the ages from the solution\n    ages = solutions[son1], solutions[son2], solutions[daughter1], solutions[daughter2]\n\n    # Returning the age of the youngest child\n    return min(ages)\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits for the first 9 numbers (1-9)\n    digits_for_1_to_9 = 9 * 1\n    \n    # Calculate the number of digits for the numbers from 10 up to 99\n    digits_for_10_to_99 = (99 - 10 + 1) * 2\n    \n    # Calculate the number of digits for the numbers from 100 up to 113\n    digits_for_100_to_113 = (113 - 100 + 1) * 3\n    \n    # Find the total number of digits written by Johnny\n    total_digits = digits_for_1_to_9 + digits_for_10_to_99 + digits_for_100_to_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let's denote the number of pearls originally on the strand as x.\n    # According to the problem, we have the following equation:\n    # x = (1/2)*x + (1/4)*x + (1/6)*x + 3\n\n    # To solve for x, we can find a common denominator and combine the fractions:\n    # Common denominator is 12, so we multiply each part by 12 to clear the denominators:\n    # 12*x = 6*x + 3*x + 2*x + 36\n\n    # Now simplify and solve for x:\n    # 12*x = 11*x + 36\n    # x = 36\n\n    return 36\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    walls = 1  # One wall\n\n    # One worker needs 3 times the days of 3 workers for the same amount of work\n    days_for_one_worker = (workers * days) / walls\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    while total_bottles >= 4:\n        new_bottles = total_bottles // 4\n        total_bottles = total_bottles - new_bottles * 4 + new_bottles\n        if total_bottles == 3:\n            total_bottles += 1  # Borrowing one empty bottle.\n    return 48 + 48 // 4 + 48 // 16 + 48 // 64\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    # All possible combinations where order doesn't matter but each entrance must be entered by at least one person.\n    # We can have 3 cases:\n    # 1 person at 1st entrance, 1 person at 2nd entrance, 2 persons at 3rd entrance.\n    # 1 person at 1st entrance, 2 persons at 2nd entrance, 1 person at 3rd entrance.\n    # 2 persons at 1st entrance, 1 person at 2nd entrance, 1 person at 3rd entrance.\n    \n    # Each case can be realized in a number of different permutations based on how we assign the people to entrances.\n    # For case with distribution (1,1,2): There are 3 choices for the double entrance, and then 4 choices for the first person and 3 choices for the second person.\n    case_112 = 3 * 4 * 3\n    \n    # For case with distribution (1,2,1): Similar to case (1,1,2) but the double entrance is at a different position.\n    case_121 = case_112\n    \n    # For case with distribution (2,1,1): Similar to case (1,1,2) but the double entrance is at a different position.\n    case_211 = case_112\n    \n    # Sum the number of permutations for each case to get the total number of different ways they can enter the park.\n    count = case_112 + case_121 + case_211\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_rabbits, black_rabbits, grey_rabbits = symbols('white_rabbits black_rabbits grey_rabbits')\n\n    equation1 = Eq(black_rabbits, white_rabbits + 14)\n    equation2 = Eq(grey_rabbits, white_rabbits - 2)\n    equation3 = Eq(black_rabbits + white_rabbits + grey_rabbits, 84)\n\n    solutions = solve((equation1, equation2, equation3), (white_rabbits, black_rabbits, grey_rabbits))\n\n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    # John has 32 more erasers than his brother\n    equation1 = Eq(john, brother + 32)\n\n    # Together they have 246 erasers\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Let x be the number of glasses broken\n    # Then 100 - x is the number of glasses delivered safely\n    # He earns $1 for each safely delivered glass and loses $1 for each broken glass\n    # Total money made is $92\n    # So, (100 - x) - x = 92\n    # Solving the equation: 100 - 2x = 92\n    # Therefore, 2x = 100 - 92\n    x = (100 - 92) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # Since it is a round-robin competition, each team plays every other team once.\n    # The total number of games played is given by the formula for combinations: n * (n - 1) / 2,\n    # where n is the number of teams, and we need to find n such that the combination formula equals 45.\n\n    # Importing the math library to use the square root function\n    import math\n\n    # We can therefore setup an equation\n    # n * (n - 1) / 2 = 45\n    # n * (n - 1) = 90\n    # n^2 - n - 90 = 0\n    # We solve the quadratic equation n^2 - n - 90 = 0\n    # using the quadratic formula x = (-b + sqrt(b^2 - 4ac)) / (2a) and x = (-b - sqrt(b^2 - 4ac)) / (2a)\n    # Here a = 1, b = -1, c = -90\n    a = 1\n    b = -1\n    c = -90\n\n    # Calculating the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Since we are looking for a positive number of teams, we only consider the positive root\n    n = (-b + math.sqrt(discriminant)) / (2 * a)\n    \n    # As n must be an integer, we return it rounded to the nearest integer\n    return int(n)\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let b represent the original number of boats and p represent the number of people.\n    # According to the problem:\n    # (b - 1) * 9 = bp => The total number of people when one boat is reduced and each boat carries 9 people\n    # (b + 1) * 6 = bp => The total number of people when one boat is added and each boat carries 6 people\n    # We can then deduce the two equations:\n    # 9b - 9 = bp (1)\n    # 6b + 6 = bp (2)\n    # Equate the two equations:\n    # 9b - 9 = 6b + 6\n    # Solve for b:\n    b = 15  # from simplifying the above equation (3b = 15, then b = 5)\n    # Using equation (1) to solve for p:\n    p = (9 * b) - 9\n\n    return p  # p is the total number of people\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayanks_number = symbols('mayanks_number')\n    equation = Eq(2 * mayanks_number + 4, 40)\n    mayanks_original_number = solve(equation, mayanks_number)\n\n    return mayanks_original_number[0]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7  # Cost for 1 banana\n    total_cost = cost_per_banana * 15  # Total cost for 15 bananas\n    change = 1200 - total_cost  # Convert £12 to pence and subtract total cost\n\n    return change / 100  # Convert the change back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest odd integer be x\n    # The consecutive odd integers then become x, x+2, x+4\n    # According to the problem, their sum is 57: x + (x+2) + (x+4) = 57\n    # Simplify the equation: 3x + 6 = 57\n    # Solve for x to find the smallest odd integer\n    x = (57 - 6) // 3\n    return x\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    dividend = 495\n    divisor = 9\n    quotient = dividend // divisor\n\n    return quotient\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Given the division equation x ÷ 3 = 2, solve for x\n    # where x must be a product of the given numbers.\n    x = 2 * 3\n    \n    # Create a list of given numbers, with the possibility of using each number more than once\n    numbers = [2, 6, 1, 10, 5, 3]\n    \n    # Since 'x' represents the product of some combination of\n    # the given numbers, we need to find if x is in the multiples\n    # of the elements in the list numbers. We use a set to avoid duplicates.\n    multiples = {a * b for a in numbers for b in numbers}\n    \n    # Now, find if 'x' is inside this set of multiples. If yes, return 'x', otherwise there is no solution.\n    ans = x if x in multiples else None\n    \n    # Return the result ('x' if found, otherwise None)\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3 and x1 + x2 + x3 == 15:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the three numbers\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for John and Peter's initial number of cookies\n    john, peter = symbols('john peter')\n\n    # Given conditions\n    condition1 = Eq(john, peter + 180)\n    condition2 = Eq(john * 4/5, peter - (peter * 3/10) * 1/2)\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for number in range(5, 16):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks = 4 * 60\n    total_marks_after_fifth_test = total_marks + 70\n    new_average = total_marks_after_fifth_test / 5\n    return new_average\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for x in range(1, 10):  # First digit must be non-zero\n        for y in range(10):  # Second digit can be zero\n            if x + y < 10:   # Sum must be a single digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    # Generate all permutations of the 4 digits forming pairs of 2-digit numbers\n    all_pairs = list(permutations(digits, 4))\n    # Map each pair to the sum of the two 2-digit numbers\n    sums = [10*pair[0] + pair[1] + 10*pair[2] + pair[3] for pair in all_pairs]\n    # Find the minimum sum\n    min_sum = min(sums)\n    return min_sum\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    discount_offer_1 = 3 # Buy 5 get 1 free, so pay for 5 only\n    discount_offer_2 = 0.8 # 20% off for each cup\n    \n    cost_with_offer_1 = (total_cups - 1) * full_price_per_cup\n    cost_with_offer_2 = total_cups * full_price_per_cup * discount_offer_2\n    \n    ans = min(cost_with_offer_1, cost_with_offer_2)\n    \n    return ans\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    \n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount of money Benson had initially.\n    # Let y be the amount of money Jayden had initially.\n    # We have two equations:\n    # 1) x + y = 590 (Total money they had at first)\n    # 2) (x - 74) = 3*(y - 120) (Benson's remaining money is 3 times Jayden's remaining money)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Total money equation\n    equation1 = Eq(x + y, 590)\n    \n    # Remaining money equation\n    equation2 = Eq(x - 74, 3 * (y - 120))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Jayden had $120 before he spent, so he would have 'y - 120' left.\n    jayden_left = solutions[y] - 120\n    \n    return jayden_left\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    sum_of_last_five = 0\n    for i in range(1, 2018):\n        sum_of_last_five += int('2' * i)\n        sum_of_last_five %= 100000  # Keep only the last 5 digits\n    return sum_of_last_five\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n\n    water_in_orange_drink = total_orange_drink * fraction_water\n\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    # Let's denote the number of students in Class A as 'a',\n    # and the number of students in Class B as 'b'.\n    # We know that a = b + 3.\n    # The total number of peaches can be expressed as:\n    # Peaches for Class A = 5*a + 10\n    # Peaches for Class B = 8*b - 2, where 'a' and 'b'\n    # have to satisfy the condition a = b + 3.\n    # We need to find a common number of peaches that satisfies both conditions.\n    \n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of students in Class A and B\n    a, b = symbols('a b')\n    \n    # Equation representing Class A situation\n    eq1 = Eq(5 * a + 10, 8 * b - 2)\n    \n    # Equation representing the relationship between the number of students\n    eq2 = Eq(a, b + 3)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b))\n    \n    # Calculate the total number of peaches (choose either Class A or B and substitute)\n    peaches = 5 * solutions[a] + 10\n    \n    return peaches\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Assume the symbol for the unknown number is 'x'\n    x = symbols('x')\n    \n    # Set up the equation x * x + x = 380\n    equation = Eq(x**2 + x, 380)\n    \n    # Solve the equation\n    solutions = solve(equation, x)\n    \n    # Return the positive whole number solution\n    for solution in solutions:\n        if solution > 0 and solution.is_integer:\n            return solution\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    horses = 6\n    pigs = 12\n    rabbits = 12\n    \n    horse_apples = horses * 20\n    pig_apples = pigs * 15\n    rabbit_apples = rabbits * 5\n    \n    total_apples = horse_apples + pig_apples + rabbit_apples\n    total_animals = horses + pigs + rabbits\n    \n    average_apples = total_apples / total_animals\n    \n    return average_apples\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    total_volume_ml = 300\n    \n    raspberry_volume = (raspberry_part / total_parts) * total_volume_ml\n    \n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let's denote Betty's speed as b meters per minute\n    # and Kevin's speed as k meters per minute.\n\n    # If Betty arrives at the grocery store in 6 minutes,\n    # she will have walked 6 * b meters in that time.\n\n    # At the same time, Kevin has walked 150 meters, so k = 150 / 6\n\n    k = 150 / 6\n\n    # After another 3 minutes, Kevin will have walked an additional 3 * k meters\n    # and he will be at the grocery store, so the total distance from the cinema\n    # to the grocery store is 150 + 3 * k meters.\n\n    distance_to_store = 150 + 3 * k\n\n    # In the same 3 minutes, Betty will have walked an additional 3 * b meters\n    # and she will be 900 meters from the cinema.\n\n    # So Betty's total distance walked is 900 meters when Kevin is at the store.\n\n    # We can set up the equation:\n    # 6 * b + 3 * b = 900\n\n    b = 900 / (6 + 3)\n\n    # In order for Kevin to reach the grocery store (distance_to_store) at the speed of k,\n    # he must have walked for a total time of distance_to_store / k minutes.\n\n    kevin_total_time = distance_to_store / k\n\n    # Subtract from the total time, the time both Kevin and Betty walked after Betty reached grocery\n    # which is 3 minutes, to find out how much head start Betty had.\n\n    betty_head_start = kevin_total_time - 3\n\n    return int(betty_head_start)\n\nans = solution()"
    ]
}